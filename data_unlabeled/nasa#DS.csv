text
"non - distinct identifiers static analysis warning <section> ds_closefilecmd conflict here : <url> <section> static analysis <section> unique identifiers . <allcaps> tbh </allcaps> calling this variable a cmd is misleading , it ' s a pointer to the payload . suggest changing to payloadptr for all of these command processing routines ( which would resolve this issue as well ) . <section> codesonar static analysis <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , use <code> for size parameters and variables <section> - fixes # <number> - updated a few parameters and local variables which represent size to use the more expressive <code> typedef . - <code> parameter <code> was signed previous to this change , but it is actually used in ds with <code> types being passed in to that parameter - updated loop counter variable <code> in <code> to unsigned for clarity / defensiveness note : there is a signed / unsigned comparison in <code> , but i know there are many other cases of this in cfs currently . <section> github ci actions all passing successfully ( incl . build + run , unit / functional tests etc . ) . <section> no change to overall behavior . code is more compliant with relevant coding standards ( <allcaps> jpl </allcaps> , <allcaps> misra </allcaps> etc . which all prefer the more expressive typedefs where possible ) . <section> avi weiss <user>"
use <code> for size parameters / variables <section> a few variables / parameters representing size could be updated to the more expressive <code> typedef . <section> <code> should be <code> : <url> <code> should be <code> : <url> . <repeated> and a few other local variables . <section> update to <code> where possible . <section> avi weiss <user>
"fix # <number> : use correct length filename for too large test <section> fixes <url> <section> see reproduction steps from linked issue <section> tests should pass if osal_config_max_path_len is increased <section> - hardware : intel xeon <allcaps> cpu </allcaps> e5 - 2 6 8 7 w v4 @ <number> . 0 0 ghz - os : centos <number> - versions : trunk ds , cfe draco rc - <number> <section> add any other context about the contribution here . related cfe issue : <url> <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) isaac rowe , <allcaps> nasa jsc </allcaps> / jacobs technology"
"<allcaps> osal </allcaps> path length variables cause tests to fail <section> a clear and concise description of what the bug is . for certain values of <code> and <code> , ds tests fail . <section> steps to reproduce the behavior : <number> . build cfs distribution with <code> set to <number> and <code> set to <number> <number> . <code> <section> a clear and concise description of what you expected to happen . expect test to pass . <section> if applicable , add references to the software . <code> <section> - hardware : intel ( r ) xeon ( r ) <allcaps> cpu </allcaps> e5 - 2 6 8 7 w v4 @ <number> . 0 0 ghz - os : centos <number> linux - versions : draco - rc3 tags for cfe , <allcaps> osal </allcaps> , and ds . also tried with draco - rc4 ds . <section> add any other context about the problem here . related cfe issue : <url> <section> full name and company / organization if applicable isaac rowe , <allcaps> jsc </allcaps> / jacobs technology"
"fix # <number> , convert command success events to <code> type <section> - fixes # <number> - updates command events ( except reset - see note below ) to <code> type rather than <code> which is the nominal pattern across cfe / cfs although currently there are a couple of apps that do not comply , and a couple of cfe components that only partially comply . <section> cfe and most ( but not all ) apps leave the reset command as <code> - should this remain the case , or should it be changed as well to <code> as the operator might still want to be informed that the reset command occurred successfully when <code> events are turned off . <section> github ci actions all passing successfully ( incl . build + run , unit / functional tests etc . ) . <section> align command event types to cfs guidelines as per cfe developer ' s guide s7 . <number> <url> <section> avi weiss <user>"
check the need of cfe_sb_messagestringget ( ) to ensure null term ok to squash the warning but i suspect we also have a null termination concern here . recommend to add another issue to check if this should really be <code> ( this ensures null term on the output string ) _originally posted by <user> in <url>
"fix # <number> , use sizeof destination instead of source <section> fixes # <number> <section> pipeline verification <section> successful compilation when compiling with - werror = sizeof - pointer - memaccess <section> pipeline <section> jose f martinez pedraza - <allcaps> nasa gsfc </allcaps> <number>"
"convert command success events to <allcaps> information </allcaps> type <section> command success events in ds are <code> , example : <url> <url> cfe pattern ( <allcaps> afaik </allcaps> ) is event success creates <code> . <section> since these are triggered by command only , flooding is not anticipated and it ' s useful to see the event nominally . would then match nominal pattern in cfe . <section> change all command success responses to <allcaps> debug </allcaps> , or even add a new command success type . consistency is key . <section> in concert w / reporting time stamps in event messages , this makes it easier to quickly verify <allcaps> rts </allcaps> timing / behavior . even without it in the log , the time tagged event messages provide a similar benefit . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"reject duplicate message id in filter table validation <section> ds does not reject duplicate message id entry in the filter table . although sb does report the duplicate : <code> when ds does the lookup it only returns the first hit : <url> <section> since duplicate message id in filter table is not supported , should clearly reject an attempt by the user to do so . i suggest failing filter table validation . <section> none <section> can send to multiple destinations from a single entry , and supports changing those destinations via command so no additional functionality needed there . just should reject multiple filter table entries with the same <allcaps> mid </allcaps> ( user error ) . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , use separate dispatcher for messages <section> isolate the message verification and dispatch from the general message processing . functions in the "" cmds "" file now strictly handle the command content , and do not get involved in general validation . fixes # <number> <section> build and run <allcaps> cfe </allcaps> , sanity check <section> no impact <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use payload sub - struct in all messages <section> puts the <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> content in a member struct called "" payload "" . this makes it consistent with other <allcaps> cfe </allcaps> modules and provides a predictably named member for determining the position of non - header content . fixes # <number> <section> build and run all tests , sanity check operation <section> none , however the addition of the sub - structure may affect some compiler - added padding between members ( platform dependent ) . <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use generated stubs <section> separate the global variables into separate stub source units , then re - run the stub generator for all internal apis . the committed result here is the exact output of the tool , unmodified . this eases future maintenance , when an internal <allcaps> api </allcaps> changes one just needs to re - run the stub generator tool to update it . fixes # <number> <section> build and run all tests . ( affects ut only ) <section> stubs easier to maintain going forward . no changes in behavior . <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove file age check bug <section> - fix # <number> <section> ci and local check that files get produced as requested ( <number> per minute when configured to do so ) <section> will produce the expected files , vs <number> per <number> minutes when configured to produce <number> per minute <section> ubuntu <number> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , update ut to handle ds_sequence_digits configuration <section> - fix # <number> <section> ci and ran with ds_sequence_digits of <number> <section> will not fail for changed ds_sequence_digits <section> ubuntu <number> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"unit test breaks on <code> configuration change <section> unit test assumes default config for <code> , fails any customization . <url> <url> <url> <url> <url> <url> <section> built the test strings based on actual config , or otherwise improve result verification . <section> none . <section> likely an issue with default configuration changes all over cfs , but should at least move in the direction of unit tests that support valid configuration ranges . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"apps should check / verify msg <allcaps> before </allcaps> calling handler <section> this remains an area with coding pattern discrepancies between <allcaps> cfe </allcaps> core and <allcaps> cfs </allcaps> apps , and also different between <allcaps> cfs </allcaps> apps to some degree as well . the <allcaps> cfe </allcaps> core and sample app ( which is supposed to be the example of "" best practice "" ) do validation on the message before calling the handler . for example : <code> this is different from ds , which does a similar check , but done inside each handler , for example : <url> <section> <allcaps> cfs </allcaps> apps should follow the best practices / patterns set forth in the framework code . ( there are reasons for the pattern being recommended practice ) <section> the pattern recommended in the framework ( checking before calling , as done in sample_app ) has several advantages : <number> . each command handler function has a unique type - safe prototype , that cannot be interchanged with another handler without triggering a type mismatch compiler error . <number> . all typecasting / conversions are confined to one place , and it is nearby to the place that the verification is done - which eases maintainability because check and conversion are all in close proximity and any mismatches will be more visible . <number> . it spreads out the cyclomatic complexity . in the non - recommended pattern , there is a case where the length check fails , and the entire handler is essentially skipped . this adds to the cyclomatic complexity of every handler . in the recommended pattern , those checks are done prior to the invocation of the handler , so the handler can focus solely on its intended purpose - doing the command itself . <section> joseph hickey , vantage systems , inc ."
"all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message should put content in a "" payload "" sub - structure <section> to match the patterns used in <allcaps> cfe </allcaps> and other modules , all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message definitions should put the content ( non - header ) parts into a separate struct called "" payload "" . <section> separate message content into a sub structure called "" payload "" . <section> this is benefit to tooling that can use the presence of this field to identify where the actual content starts ( e . g . something like <code> would work and be correct , as opposed to checking <code> which may not actually reflect where the content starts due to possible compiler - added padding between them ) . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , rename sb command pipe to cmdpipe <section> fixes # <number> <code> global data struct member renamed to <code> . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to behavior . ds ' s sb command pipe struct member is now named consistently with the rest of cfs and the other apps which improves future maintainability . <section> avi weiss <user>"
ds is the only app to label the sb command pipe as inputpipe <section> ds uses the name <code> to label the sb command pipe struct member of the global data struct . every single other app / component of cfs other than cf uses the label cmdpipe . <section> <url> <section> align ds with the rest of cfs by renaming inputpipe to cmdpipe . <section> avi weiss <user>
"fix # <number> , combine consecutive , mutually - exclusive status checks <section> fixes # <number> consecutive , mutually - exclusive status checks ( two <code> s ) were combined into a single <code> / <code> . also cleared up a few out - of - place empty lines and minor typos in the same file . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to behavior . <section> avi weiss <user>"
"combine consecutive mutually exclusive status checks into an if / else <section> <code> contains consecutive , mutually exclusive status checks . <section> <url> <section> combine into an <code> / <code> - no need to do <number> evaluations . <section> avi weiss <user>"
"fix # <number> , change evs_register failure from sendevent to writetosyslog <section> fixes # <number> <code> replaced by <code> on failure of <code> . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . coverage maintained at <percent> : <code> <section> failure can be successfully recorded somewhere even without the <allcaps> evs </allcaps> now . <section> avi weiss <user>"
sends an event message on failure of registering with <allcaps> evs </allcaps> <section> <code> is used when <code> fails . should use <code> for a better chance of actually recording the error . <section> use a mechanism for reporting errors that ' s more likely to succeed in case of an <allcaps> evs </allcaps> registration failure . <section> <url> <section> n / a <section> recommend checking the rest of the apps and marking as bug . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> , use cfe_msg_ptr macro <section> this updates ds to use the cfe_msg_ptr macro . this macro is provided by the <allcaps> cfe </allcaps> "" msg "" module to convert a local header buffer to the base struct type . use of this macro requires that the naming convention was followed , so this also means renaming <code> - > <code> and <code> - > <code> . fixes # <number> <section> build and run all tests <section> none <section> debian <section> this matches the current naming , usage patterns , and recommended practices used in <allcaps> cfe </allcaps> , thereby bringing ds more up to date . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove extraneous assignments to cfe_success <section> fixes # <number> extraneous assignments to cfe_success were removed . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to behavior . <section> avi weiss <user>"
extraneous assignments to cfe_success <section> ds has a few extraneous assignments to <code> as in <url> <section> <url> <url> <section> remove assignments - unnecessary code . <section> avi weiss <user>
"fix # <number> , replace quotes with angle brackets in / inc <section> fixes # <number> - replace quotes with angle brackets in / inc files . <section> <number> . performed build verification testing <number> . ci <section> dan knutsen <allcaps> nasa </allcaps> goddard"
replace quotes with angle brackets in <hashtag> include </hashtag> statements within / inc describe the solution you ' d like quotes should be replaced with angle brackets in <hashtag> include </hashtag> statements that reside in the / inc location . this will ensure that the preprocessor selects the files pre - designated to override the default files contained within the open source cfs build release - as opposed to selecting those located in the same directory . requester info dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , add ds_enabled to ds_extern_typedefs . h <section> adds ds_enabled to ds_extern_typedefs . h <section> ci <section> dan knutsen <allcaps> nasa </allcaps> goddard"
ds_enabled should be included in ds_extern_typedefs . h <section> ds_enabled should be included in ds_extern_typedefs . h - as it is used routinely in filter table generation . <section> dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , adds fsw / src to app target <section> - fixes # <number> <section> make install <section> successful cert_testbed build <section> - ubuntu <number> <section> n / a <section> n / a <section> justin figueroa , vantage systems"
"add fsw / src to app target <section> cannot build cert_testbed . <code> is needed to build tables , etc . revise cmakelists . txt <section> build in cert_testbed <section> error - free build <section> if applicable , add references to the software . <section> - ubuntu <number> <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , set pathname and basename size based on config values * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fix # <number> , replaced hard coded sized with sizes based on configuration values . <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , moves interface definition files to inc <section> - fixes # <number> <section> make install lcov <section> no expected behavior change . <section> - ubuntu <number> <section> n / a <section> if included , identify any third party code and provide text file of license <section> - justin figueroa , vantage"
"move interface definition files to "" inc "" location <section> the interface definition files of all open source apps currently exist in the "" src "" directory . <section> create an "" inc "" dir to go with the "" src "" dir . move the interface definitions into this location : "" _msg . h "" , "" _msgdefs . h "" , "" _tbldefs . h "" , and "" _events . h "" . consider moving header files in both "" platform_inc "" and "" mission_inc "" to "" inc "" <section> leaving as is . <section> n / a <section> justin figueroa , vantage systems"
"commented - out test references old event type constant ( cfe_evs_error ) <section> a single stray reference to the old event type constants remains here in a commented - out test case ( <code> ) . will cause a build failure if _un_ - commented - out . <section> <number> ) update to <code> , or <number> ) delete this commented - out code <section> <url> <section> avi weiss <user>"
"fix # <number> , adds unit tests for ds_cmdremovemid <section> - fixes # <number> <section> lcov <section> <percent> coverage <section> - ubuntu <number> <section> ds_cmds_tests . c may require later cleanup / formatting changes for all tests to user ut_ds_test_add <section> if included , identify any third party code and provide text file of license <section> justin figueroa , vantage systems"
"fix # <number> , remove misleading / unnecessary event text <section> fixes # <number> unnecessary / misleading test ( <code> ) has been removed from event messages in <code> and <code> . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully - ~ ~ except coverage rates which is being addressed in separate issue # <number> ~ ~ <section> no impact on logic . <code> will no longer be printed in these <number> event messages . <section> avi weiss <user>"
"add unit tests for ds_cmdremovemid <section> unit test coverage is less than <percent> due to the additions of code in # <number> . <section> view unit test coverage resulting from workflow : <url> <section> <percent> unit test coverage <section> n / a <section> github workflow actions <section> n / a <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"fix # <number> , change format string to avoid <allcaps> gcc </allcaps> workflow failure <section> fixes # <number> format string in <code> instance changed to avoid potential <code> argument being passed in to "" <code> "" format specifier , which causes a <allcaps> gcc </allcaps> error and workflow failure . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> workflow ( build + run ) will complete without <allcaps> gcc </allcaps> error causing failure . <section> avi <user>"
"change format string to avoid "" ‘ %s ’ directive argument is null error "" <section> build + run workflow fails due to <allcaps> gcc </allcaps> warning ( treated as error ) of potential <allcaps> null </allcaps> argument being passed to format string . this issue was noticed / raised here in pr <url> <section> run ci workflow ( specifically [ build and run with startup msg verification ) and observe error . <section> ci workflow run without failure . <section> <code> <section> avi <user>"
"fix # <number> , fix nasa / fm # <number> ; make ds / fm file header sub - types unique <section> fixes # <number> and fixes <url> updates <code> value to make it unique ( not the same as <code> ) . <section> just github ci actions ( incl . build + run ) . <section> no impact on behavior . <section> avi weiss <user>"
"fix # <number> , apply consistent event id names to common events <section> - fixes # <number> - consistent event ids have been applied to the inconsistent cases to align them with a common event id naming convention . <section> only github ci actions . <section> no impact on code behavior ( no logic changes ) . consistent event id names for the events which are common to all / most cfs components and apps will improve consistency and ease make code review / debugging easier . <section> avi weiss <user>"
"fix # <number> , remove mid <section> - fixes # <number> <section> steps taken to test the contribution : * printed out filter table packet and ds appdata hash table entries after adding a message id to the table using <code> . * printed out filter table packet entries and ds appdata hash table entries after removing that same message id from the table using <code> . * observed that the filter table entry with the indicated message id was reset to <number> . * observed that the ds appdata hash table entry for the removed , indicated message id was reset . <section> allows users to remove message ids from the filter table . <section> - ubuntu <number> <section> n / a <section> if included , identify any third party code and provide text file of license <section> justin figueroa , vantage systems"
"fix # <number> , remove redundant / inconsistent comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . <section> fixes # <number> removes redundant and inconsistent comments ( e . g . <code> , <code> , function name in function header comments ) . there were also a few cases of unnecessary empty lines ( e . g . on the last line before the closing brace of a function ) and also missing empty lines ( e . g . between functions ) which were corrected . some of these empty lines trigger the ci format checks . i have left the commits separated for now to make life easier for whoever reviews this . i can squash them if / when this is ready for merge . <section> none ( comment and whitespace changes only ) . <section> no impact on behavior . these updates will reduce clutter and inconsistency in the code , improving readability . <section> <user>"
"redundant comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . <section> copy of <url> and <url> there are quite a few redundant comments in the code , such as : - <code> - type comments - <code> - type comments - function header comments which include the function name another minor issue has to do with empty lines : a ) _unnecessary_ empty lines ( e . g . first line after the opening brace of a function / struct , or the last line before the closing brace - the latter apparently sometimes triggers the ci format checks ) . b ) _missing_ empty lines between functions ( i . e . closing brace of last function , then next function beginning on the immediately next line without an empty line in between ) the unnecessary empty lines ( at the beginning or end of a function , for example ) represent a low single - digit percentage of the cases ( the vast majority of functions / structs do not have these extra empty lines ) , so there is an argument to remove them purely for consistency , not just due to them being redundant and triggering the ci format checks . <section> remove redundant comments to reduce clutter and inconsistency in the code , and improve readability . <section> <user>"
"fix # <number> , remove ' return ; ' from last line of void functions . <section> fixes # <number> removes all cases of redundant "" return ; "" statements on the last line of void functions . <section> none , prior to submission . <section> no impact on behavior . <section> <user>"
"remove "" return ; "" from last line of void functions <section> "" return ; "" at last line in void function is redundant . copy of <url> <section> remove <section> <user>"
"fix # <number> , remove unnecessary parentheses around return values . <section> fixes # <number> removes parentheses in return statements in ds that return a single value / term . this is aligns these return statements with the predominant style of cfs . <section> none , prior to submission of the pull request . <section> no impact on behavior . <section> <user>"
scrub use of ( ) in return statements <section> unnecessary parentheses around return values in ds copy of <url> <section> <user>
"fix # <number> , use cfe_fs_initheader ( ) to initialize <allcaps> cfe </allcaps> header * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fix # <number> <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"command to remove mids from the filter table * x] i reviewed the [ contributing guide <url> . * x ] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> possibly long term , currently there is a command to add a <allcaps> mid </allcaps> to the filter table and subscribe to it . however short of a manual filter table file update , there is no way to remove unused mids from the filter table or unsubscribe from it . if the the mids required are changing overtime in flight this could potentially lead to running out of space in the filter table even though mids are no longer being used . this in turn would force manual intervention to correct it . <section> implement a command to unsubscribe from a <allcaps> mid </allcaps> and remove the <allcaps> mid </allcaps> from the filter table . ( if needed it could be limited to mids with all its filters set to ds_unused . ) <section> pushing an update to the table may not be feasible when needed in flight . since it unsubscribes to the entire table , it also creates a small gap in telemetry recording on those mids that are not modified . <section> <section> nathan lynch <allcaps> jsc </allcaps> - er611"
remove unnecessary handlers in ds_file_tests . c <section> overriding handlers for success is unnecessary complexity <section> remove unnecessary handler overrides . just use os_opencreate to set up id correctly . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> # <number> # <number> # <number> , resolve multiple static analysis issues ( includes bug fixes ) and remove unnecessary ut handlers <section> - fix # <number> - fix # <number> - fix # <number> - fix # <number> also removes the custom defined ds_string_terminator since anything other than ' \ <number> ' would break standard calls . <section> ci <section> no longer possible to overflow the various string buffers . <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , standardize ut table initialization <section> - fix # <number> <section> ci <section> avoids random test failures based on uninitialized ut variables <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"uninitialized variables in ut , potential test failure <section> the destination file table and filter table are not consistently initialized in unit tests . example where destfiletable is not fully initialized : <url> observed test failure : <code> assuming there ' s a combination of random file name components that pass , which then cause os_opencreate to be called . <section> implement a consistent initialization scheme for commonly used elements <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove stray ut printf <section> - fix # <number> <section> ci <section> removed stray print in ut <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
remove stray printf in ut <section> leftover printf ? <url> <section> remove <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> , remove <allcaps> todo </allcaps> and clean associated ut <section> - fix # <number> <section> ci <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"remove <allcaps> todo </allcaps> and clean up associated ut <section> <url> <section> clean up the test , remove <allcaps> todo </allcaps> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , sends message when file complete <section> a clear and concise description of what the contribution is . - fixes # <number> <section> steps taken to test the contribution : <number> . build steps ' . <repeated> ' <number> . execution steps ' . <repeated> ' <section> generate a message when a file gets completed . <section> - ubuntu <number> <section> none <section> if included , identify any third party code and provide text file of license <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"unit test currently dependent on default ds_total_fname_bufsize definition <section> unit tests currently depend on the configuration define ds_total_fname_bufsize being a specific value , any other setting will fail . example : <url> <section> replace hard coded string values with logic to fill in the strings using the config size such that it meets the expected test conditions . for example in this case calculate which each length should be and fill pathname with repeating "" a "" and basename with repeating "" b "" or similar . pathname size could be ( ds_total_fname_bufsize - ds_sequence_digits - <number> ) / <number> basename size then just ds_total_fname_bufsize - ds_sequence_digits - <number> - pathname size then you can skip the assert on checking if the size is right ( since you set it explicitly ) , and it will work for a reasonable range of ds_total_fname_bufsize . apply this pattern for all the tests that depend on the current config size . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , removes max missed branches <section> a clear and concise description of what the contribution is . - fixes # <number> <section> <number> . lcov - - capture - - rc lcov_branch_coverage = <number> - - directory build - - output - file coverage_test . info <number> . lcov - - rc lcov_branch_coverage = <number> - - add - tracefile coverage_base . info - - add - tracefile coverage_test . info - - output - file coverage_total . info <number> . genhtml coverage_total . info - - branch - coverage - - output - directory lcov <section> <percent> code coverage <section> - ubuntu <number> <section> none <section> none <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"update . github / workflows / unit - test - coverage . yml with no max missed lines or branches <section> max - missed - branches and max - missed - lines should be removed to indicate <percent> unit test coverage . <url> <section> remove the max - missed - branches and max - missed - lines from . github / workflows / unit - test - coverage . yml after <url> and <url> are merged and closed . <section> none <section> none <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"fix # <number> , fix # <number> , update code coverage , removes comments about ds_appprocesshk_test_snprintffail , adds ds_cmdcloseall_test_closeall , adds coverage of null filename with no "" / "" to ds_fileclosedest adds coverage of ! os_objectdefined 2 nd check in ds_filesetupwrite ( ) adds coverage of stringterminator branch in ds_filecreatedest_test ( ) adds coverage of maxpathnamelength branch in ds_filecreatname_test ( ) adds pathbaseseqtoolarge in ds_filecreatname_test ( ) adds pathbaseseqexttoolarge in ds_filecreatname_test ( ) adds extensionzero in ds_filecreatname_test ( ) <section> a clear and concise description of what the contribution is . - fixes # <number> - fixes # <number> <section> <number> . lcov - - capture - - rc lcov_branch_coverage = <number> - - directory build - - output - file coverage_test . info <number> . lcov - - rc lcov_branch_coverage = <number> - - add - tracefile coverage_base . info - - add - tracefile coverage_test . info - - output - file coverage_total . info <number> . genhtml coverage_total . info - - branch - coverage - - output - directory lcov <section> <percent> code coverage <section> ubuntu <number> <section> <percent> coverage depends on the resolution of <url> afterwards , . github / workflows / unit - test - coverage . yml will need to be updated in this pull request to account for no missing branch coverage . <section> if included , identify any third party code and provide text file of license <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"fix # <number> , updates ds_tableaddmsgid header comment <section> - fixes # <number> <section> manual inspection <section> header comment for ds_tableaddmsgid ( ) includes language about ds_tableaddmsgid ( ) <section> ubuntu <number> <section> none <section> if included , identify any third party code and provide text file of license <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"fix # <number> , remove second loop condition using filterpackets <section> a clear and concise description of what the contribution is . - fixes # <number> <section> unit test coverage <section> <percent> unit test coverage <section> ubuntu <number> <section> none <section> if included , identify any third party code and provide text file of license <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"ds_tablefindmsgid has an extraneous filterpacket loop condition <section> line <number> from the code snip below shows an extraneous loop condition <code> . <code> is dereferenced on line <number> . the false branch of the condition is unreachable . <section> view code snip below . <section> <percent> code coverage . <section> <url> <section> ubuntu <number> <section> none <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"ds_tableaddmsgid definition includes incorrect header comment <section> ds_tableaddmsgid ( ) has the header comment for ds_tablefindmsgid ( ) . <section> steps to reproduce the behavior : view the code snip below . <section> ds_tableaddmsgid ( ) should have the header comment associated with adding message ids . <section> <url> <section> ubuntu <number> <section> none <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"unreachable branch in ds_file . c <section> <code> always remains true following <code> the if statement logic about <code> is not needed to maintain the same behavior . <section> steps to reproduce the behavior : the missing coverage of fsw / src / ds_file . c can be seen in unit test and coverage <url> . <section> <percent> coverage <section> <url> <url> <section> continuous integration <section> none <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"fix # <number> # <number> # <number> # <number> , requirements updates <section> - fix # <number> - fix # <number> - fix # <number> - fix # <number> <section> na , requirements updates only <section> none <section> na <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove cfe_psp_memset and cfe_psp_memset use <section> - fix # <number> <section> ci <section> none , just removes unnecessary dependencies <section> ci ( unit test and bundle run cover it ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , added codeql - build . yml * x] i reviewed the [ contributing guide <url> . * [x ] i signed and emailed the appropriate contributor license agreement to <email> and copied <email> . describe the contribution a clear and concise description of what the contribution is . added codeql to github workflows fix # <number> testing performed pushed to branch checked codeql ran successfully expected behavior changes no impact to behavior system ( s ) tested on browser additional context depends on <url> to run successfully third party code if included , identify any third party code and provide text file of license contributor info - all information <allcaps> required </allcaps> for consideration of pull request full name and company / organization / center of all contributors ( "" personal "" if individual work ) note <allcaps> cla </allcaps> ' s apply to software contributions ."
"add codeql to repository * x] i reviewed the [ contributing guide <url> . * x] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> use codeql for continuous integration <section> add codeql workflow <section> none <section> add any other context about the feature request here . <section> haven carlson"
"fix # <number> # <number> , resolve static analysis warnings <section> - fix # <number> - fix # <number> <section> ci + static analysis run <section> none , just squashes static analysis warnings <section> - hardware : vm - os : ubuntu <number> - versions : bundle main + apps + related static analysis resolution branches <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
fill in missing requirements rationale there ' s a handful of missing requirements rationale . add . imported from <allcaps> gsfccfs </allcaps> - <number>
"ds : ds9007 failure ds appears to have been updated and descriptor text , pathname , basename and extention are no longer verified as specified in ds9007 imported from <allcaps> gsfccfs </allcaps> - <number>"
"ds : ds9005 failure ds appears to have been updated such that it no longer validates descriptor text , and always reports that it is ok . imported from <allcaps> gsfccfs </allcaps> - <number>"
"resolve static analysis issues relative to unit tests many actual code issues ( uninitialized variables , buffer overruns , etc ) identified via static analysis in the unit tests . all actual "" bugs "" should be resolved . imported from <allcaps> gsfccfs </allcaps> - <number>"
"revisit coverage , update to <percent> code / branch or write issues where unreachable <section> other coverage failures : failure : coverage cs lines <percent> functions <percent> branches <percent> failure : coverage fm lines <percent> functions <percent> branches <percent> failure : coverage hs lines <percent> functions <percent> branches <percent> failure : coverage lc lines <percent> functions <percent> branches <percent> failure : coverage md lines <percent> functions <percent> branches <percent> failure : coverage sc lines <percent> functions <percent> branches <percent> fix where possible , elsewise issues should document all uncovered lines / branches and disposition ( why it ' s ok as - is ) imported from <allcaps> gsfccfs </allcaps> - <number>"
app requirement issues <number> . lc3002 . <number> & lc3002 . <number> - don ’ t see where event filter is able to be specified in action point or watchpoint definition tables . <number> . ds8000 – <allcaps> ds hk </allcaps> packet <number> . fm4000 – <allcaps> fm hk </allcaps> packet <number> . ds3000 - requirement incomplete imported from <allcaps> gsfccfs </allcaps> - <number>
"should use cfe_fs_initheader instead of manually populating ds initializes and populates the <allcaps> cfe fs </allcaps> header itself ( see ds_file . c , lines <number> - <number> <url> this requires ds to understand the details of the header structure and could break if that structure changes . it should instead use the <code> function which is designed to do exactly this ."
