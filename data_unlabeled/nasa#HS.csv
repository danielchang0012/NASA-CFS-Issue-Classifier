text
"fix # <number> , remove multiple returns from <code> , <code> and <code> <section> - fixes # <number> - <code> , <code> and <code> refactored to have a single exit point <section> github ci actions all passing successfully ( incl . build + run , unit / coverage tests etc . ) . <section> no change to function logic / behavior other than removing the early returns . <section> avi weiss <user>"
"factor out multiple returns from <code> , <code> and <code> <section> the only places multiple returns remain in hs are in <code> , <code> and <code> . this is unnecessary . <section> refactor to a single exit point . <section> avi weiss <user>"
"fix # <number> , lowers hs_util_per_interval_hogging from <number> - - > <number> * x ] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> lowers hs_util_per_interval_hogging from <number> - - > <number> . fix # <number> <section> started a test app that enters into an infinite loop to induce a <allcaps> cpu </allcaps> hogging and verified that the expected event message was triggered . <section> dan knutsen <allcaps> nasa </allcaps> goddard"
"lower threshold required to declare <allcaps> cpu </allcaps> hogging * x ] i reviewed the [ contributing guide <url> . * x ] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> lower the <allcaps> cpu </allcaps> utilization threshold required for hs to declare ' hogging ' . <section> lower hs_util_per_interval_hogging from <number> to <number> . <section> dan knutsen <allcaps> nasa </allcaps> goddard"
"fix # <number> , removal of hs6013 , hs6014 , and hs6015 <section> removes hs6013 , hs6014 , and hs6015 from hs_functionalrequirements . csv . fixes # <number> <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) dan knutsen <allcaps> nasa </allcaps> goddard"
"removal of hs6013 and hs6014 * x ] i reviewed the [ contributing guide <url> . * x ] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> need to update hs_functionalrequirements . csv to remove hs6013 and hs6014 . the set utility diagnostics and set utility parameters commands were removed in the latest version of the app . <section> dan knutsen <allcaps> nasa </allcaps> goddard"
"fix # <number> , rename files according to convention <section> updates the hs file naming to be consistent with the documented recommendations . this also removes "" hs_custom . h "" as it was no longer used ( remnant ) . fixes # <number> <section> build and sanity check <section> none <section> debian <section> joseph hickey , vantage systems , inc ."
"update header file naming based on documented convention <section> header file names need to be adjusted to match the convention described in nasa / cfe # <number> <section> rename the files <section> improving consistency between <allcaps> cfs </allcaps> apps for file names and content <section> joseph hickey , vantage systems , inc ."
"fix # <number> , convert <code> return codes and variables to <code> <section> - fixes # <number> - most <code> return codes converted over to <code> - <code> <code> / <code> variables holding cfe return codes converted to <code> <section> github ci actions all passing successfully . <section> no change to behavior . <code> is more expressive and improves consistency with cfe / cfs . <section> avi weiss <user>"
hs <code> return codes and variables should be converted to <code> <section> hs has quite a few return codes ( as well as local <code> / <code> variables which hold <allcaps> cfe </allcaps> return codes ) that can be easily converted over to the <code> typedef . <section> use the more expressive <code> and improve consistency with cfs . <section> avi weiss <user>
"fix # <number> , use "" generated_file "" option to generate_config_includefile <section> for an <allcaps> eds </allcaps> build , the include files are generated , and do not yet exist when cmake runs . the generate script now has more error checking than it used to and now throws an error if the file does not exist . use of the generated_file flag causes it to bypass the the search / verify and unconditionally link to the file . fixes # <number> <section> build hs with <allcaps> eds </allcaps> <section> build succeeds using <allcaps> eds </allcaps> - generated headers as it should <section> debian <section> joseph hickey , vantage systems , inc ."
"update <allcaps> eds </allcaps> build "" generate_config_includefile "" call <section> the hs script needs to use the new "" generated_file "" option ( added in nasa / cfe # <number> ) so that the <allcaps> eds </allcaps> build can link to headers that are not ( yet ) generated at the time cmake runs . <section> depends on nasa / cfe # <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use non - designated initializer for command header <section> do not assume specific member names on structs that are not directly part of the hs app itself . fixes # <number> <section> build <allcaps> hs mat </allcaps> table in both environments <section> better source compatibility , no difference in output <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , update documentation for cpu load monitor <section> update the cpu load documentation to reflect the recent changes where this information is now obtained from the <allcaps> psp </allcaps> rather than an idle task . fixes # <number> <section> build documentation <section> none - documentation now matches current implementation . <section> debian <section> joseph hickey , vantage systems , inc ."
remove <code> - related macros <section> the <code> family of macros is being removed in <url> there are a couple of uses of these macros in hs that will need to be removed . <section> use the direct bit - check / manipulation expression rather than the abstracted macro which is being removed . <section> avi weiss <user>
"remove doc refs to custom functions <section> the custom functions were removed in a recent pr but some doxygen files still have some refs to functions that were in these files . this triggers some warnings in the documentation build . <section> run documentation build , view warnings <section> should be clean <section> github workflow <section> joseph hickey , vantage systems , inc ."
"fix # <number> , add <allcaps> eds </allcaps> file for hs <section> includes the <allcaps> eds </allcaps> file itself , plus cmake logic to source the various include files from the generated version . fixes # <number> <section> build hs with and without <allcaps> eds </allcaps> tooling <section> hs should work out of the box with the <allcaps> eds </allcaps> tooling , no patches or alternate version needed . <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , move system monitoring to <allcaps> psp </allcaps> <section> removes all "" custom "" routines from hs , and instead calls into <allcaps> psp </allcaps> via the new iodriver mechanism . this is used to obtain average <allcaps> cpu </allcaps> utilization information rather than an idle task . this architecture allows support for many more variables , such as per - cpu utilization information , temperature , fan speeds , and other health info . that is not implemented here , but could be added in the future . fix # <number> <section> monitor hs telemetry , vary system load and confirm <section> no more idle task , system load should be reported correctly on multi - core systems . <section> debian <section> only linux is implemented thus far , will need to create an <allcaps> rtems </allcaps> and vxworks variant - but that is only in <allcaps> psp </allcaps> - hs does not change <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use separate dispatcher for messages <section> isolate the message verification and dispatch from the general message processing . functions in the "" cmds "" file now strictly handle the command content , and do not get involved in general validation . the "" custom "" code isolation is also in a separate dispatcher . there is a separate issue to address this . fixes # <number> <section> build and run hs and all tests , sanity check results <section> none , better source code organization <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , split configuration <section> move configuration include files to a separate "" config "" subdirectory , and use the "" generate_config_includefile "" cmake function to select the one to use and create a wrapper . this makes it easier to override the file and / or use a generated file in place of the distribution / default copy . fixes # <number> <section> build and run hs and all tests , sanity check operation <section> none <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , refactor <allcaps> mat </allcaps> table to be more portable * x ] i reviewed the [ contributing guide <url> . * x ] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> the updated <allcaps> mat </allcaps> table uses the cfe_msg_cmd_hdr_init macro to make <allcaps> mat </allcaps> commands header agnostic . further this implementation makes the tables endian agnostic . fixes # <number> <section> steps taken to test the contribution : <number> . modified hs_monitors . c to print each table entry when the table gets read in by <allcaps> fsw </allcaps> . <number> . ran a test to confirm that the expected commands / mids get read in when the table is validated . <number> . ran a test to ensure that the expected commands get sent when the table is used / executed . <section> none . <section> dan knutsen <allcaps> nasa </allcaps> goddard"
"hs does not calculate <allcaps> cpu </allcaps> utilization correctly on multi - core systems * x ] i reviewed the [ contributing guide <url> . * x ] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> hs does not calculate <allcaps> cpu </allcaps> utilization correctly on multi - core systems . <section> hs has only one idle task . multiple idle tasks would need to be spawned / pinned to each core in an <allcaps> smp </allcaps> / multi - core setup in order to correctly calculate <allcaps> cpu </allcaps> utilization . alternatively , os specific task hooks could be utilized to report the <allcaps> cpu </allcaps> utilization for each core . <repeated> which would likely be the most accurate / desired approach . <section> dan knutsen <allcaps> nasa gsfc </allcaps>"
"split "" platform_cfg "" into external and internal components <section> currently , all configurable items for the app are contained in a single <code> header file . this contains macro definitions that affect both the internal operation of the application ( such as operational limits ) as well as the external interface in <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> and table files . <section> split this header into two components , one that contains only public items ( i . e . those that affect <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> / table definitions ) and one that contains private / internal items that are only used within the local application code and do not affect the interface . <section> mainly a scoping concern , separate files for separate scopes . these files could also be generated in the future , but scope still needs to be consistent . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use generated stubs <section> separate the global variables into separate stub source units , then re - run the stub generator for all internal apis . the committed result here is the exact output of the tool , unmodified . this eases future maintenance , when an internal <allcaps> api </allcaps> changes one just needs to re - run the stub generator tool to update it . fixes # <number> <section> build and run all tests . ( affects ut only ) <section> stubs easier to maintain going forward . no changes in behavior . <section> debian <section> joseph hickey , vantage systems , inc ."
"apps should check / verify msg <allcaps> before </allcaps> calling handler <section> this remains an area with coding pattern discrepancies between <allcaps> cfe </allcaps> core and <allcaps> cfs </allcaps> apps , and also different between <allcaps> cfs </allcaps> apps to some degree as well . the <allcaps> cfe </allcaps> core and sample app ( which is supposed to be the example of "" best practice "" ) do validation on the message before calling the handler . for example : <code> this is different from hs , which does a similar check , but done inside each handler , for example : <url> <section> <allcaps> cfs </allcaps> apps should follow the best practices / patterns set forth in the framework code . ( there are reasons for the pattern being recommended practice ) <section> the pattern recommended in the framework ( checking before calling , as done in sample_app ) has several advantages : <number> . each command handler function has a unique type - safe prototype , that cannot be interchanged with another handler without triggering a type mismatch compiler error . <number> . all typecasting / conversions are confined to one place , and it is nearby to the place that the verification is done - which eases maintainability because check and conversion are all in close proximity and any mismatches will be more visible . <number> . it spreads out the cyclomatic complexity . in the non - recommended pattern , there is a case where the length check fails , and the entire handler is essentially skipped . this adds to the cyclomatic complexity of every handler . in the recommended pattern , those checks are done prior to the invocation of the handler , so the handler can focus solely on its intended purpose - doing the command itself . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use payload sub - struct in all messages <section> puts the <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> content in a member struct called "" payload "" . this makes it consistent with other <allcaps> cfe </allcaps> modules and provides a predictably named member for determining the position of non - header content . fixes # <number> <section> build and run all tests , sanity check app in <allcaps> cfe </allcaps> <section> none . <section> debian <section> joseph hickey , vantage systems , inc ."
"all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message should put content in a "" payload "" sub - structure <section> to match the patterns used in <allcaps> cfe </allcaps> and other modules , all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message definitions should put the content ( non - header ) parts into a separate struct called "" payload "" . <section> separate message content into a sub structure called "" payload "" . <section> this is benefit to tooling that can use the presence of this field to identify where the actual content starts ( e . g . something like <code> would work and be correct , as opposed to checking <code> which may not actually reflect where the content starts due to possible compiler - added padding between them ) . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , combine consecutive , mutually - exclusive status checks <section> fixes # <number> combined <number> consecutive , mutually exclusive status checks ( no need to evaluate twice ) . also moved failure the event down to what i believe is a clearer pattern ( and more common in cfs ) of the successful series of operations together and failure events ( in the <code> blocks ) all together cascading backwards below . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to logic . no test changes required . coverage still at <percent> . <section> avi weiss <user>"
"combine consecutive mutually exclusive status checks into an if / else <section> <code> and <code> have consecutive , mutually exclusive status checks . <section> <url> <url> <section> combine into an <code> / <code> - no need to do <number> evaluations . <section> avi weiss <user>"
"fix # <number> , use cfe_msg_ptr macro <section> this also updates all data structures and function names to use the proper naming conventions - that is : - structure for each command that matches command name - consistent application of camelcase and command code name ( _cc ) this also fixes a few other unsafe / improper casts regarding message buffers . fixes # <number> <section> build and run all tests , sanity check hs <section> safer code , no impact to behavior <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , check correct global in appmon ut <section> the appmon unit test was checking the array in the hk packet rather than the array in the global - which is the one that was updated in the unit under test . fixes # <number> <section> build and run all tests <section> affects ut only , no change to <allcaps> fsw </allcaps> <section> ubuntu <section> it appears these checks in the ut might be inconsequential anyway because they are all zero , and nothing sets it nonzero . this is why they were passing even though it was "" verifying "" the wrong thing ( i . e . the wrong thing was also <number> ) . fixing that is left to a future exercise , if desired . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , unread variables <section> do not assign a value to variables where a value is assigned later and the first value is never read . fixes # <number> <section> build and run all tests <section> cleans up cppcheck errors , no change to <allcaps> fsw </allcaps> behavior . <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , fix # <number> , remove conditional compiles from code <section> do not conditionally compile code based on hs_max_exec_cnt_slots being <number> . it will now be required that the option is > <number> . note that a configuration of <number> was not being tested / validated , so this removes an untested option . fixes # <number> fixes # <number> <section> build and run all tests . <section> no change with default config ( default value was <number> , so all code was being compiled in normally ) . attempting to build hs with the value of <number> will result in a verify error now ( min value is now <number> , whereas it was <number> previously ) . <section> debian <section> removes an untested configuration option . <section> joseph hickey , vantage systems , inc ."
"refactor "" custom "" code ( not really customizable ) <section> the structure of the hs code includes <code> and <code> that imply that these contain user - defined functions . however the current code does not really allow for this . notably - <number> . the interface between "" custom "" and standard routines is not well defined <number> . unit tests directly use the hs_custom_internal . h data structures in non - custom tests ( e . g . see <code> , among others ) furthermore , the code is simply in the same src directory as the rest of hs , so any customizations mean creating a fork of hs and the user having to manage that fork . <section> attempt to change the contents of <code> - such as removing the <code> and and <code> fields and replacing with some other logic . this will break seeming unrelated code that assumes these fields exist . <section> if hs depends on a computation working a certain way , it should not be labeled as <code> . conversely , if a section of code is truly intended to be customized by the user , the interface into that custom function needs to be well - defined and no other parts of the code should assume it works a certain way or has certain fields in its global data . <section> example of a place where unit test is directly accessing custom fields from a non - custom test : <url> <section> n / a <section> could this custom logic potentially be refactored into a separate support library , so the user would not have to fork hs to customize these routines ? <section> joseph hickey , vantage systems , inc ."
"refactor "" compiled - out "" code ( ifdef ) <section> hs contains a significant amount of code that can be compiled - out via <code> to comply with coding standards this should be refactored so it does not need to be compiled out . <section> n / a <section> should not remove entire functions via <code> as this can negatively affect unit testing . switches like this increases the testing permutations required - technically should test it both ways , but we are not currently doing so . <section> n / a <section> in this case the default value of hs_max_exec_cnt_slots is <number> , so this is compiled - in by default , but we never actually test the compiled - out option to see if it works correctly . requirement for this feature should be revisited first ( i . e . is there a reason why we really need to have the option to set hs_max_exec_cnt_slots to <number> , as other configurable parameters do not have such an option ) . if it is required to compile this out entirely , then a source - selection would be preferable over chunks of <code> code . <section> joseph hickey , vantage systems , inc ."
"hotfix # <number> , correct whitespace per clang - format <section> corrects a whitespace issue from a previous pr # <number> <section> check clang - format is clean <section> none <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove compiler extensions from tbldefs <section> do not declare tables as "" static "" w / attribute "" used "" , neither are needed , and build works fine without any special sauce . this also makes the table name consistent by removing the "" default "" in the name - it is still the same table , the name does not need to change just because it happens to be the default value . fixes # <number> <section> build and run all tests run hs app and confirm normal startup , tables loaded <section> none <section> debian <section> joseph hickey , vantage systems , inc ."
"remove use of compiler extension in table file definitions <section> the <code> is a <allcaps> gnu </allcaps> compiler extension flag and such constructs should be avoided in portable code . <section> remove <section> this flag is only in there to avoid a warning due to the use of <code> - but this object should not be static to begin with , then everything works without the use of special flags . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove extraneous assignments to cfe_success <section> fixes # <number> extraneous assignments to cfe_success were removed . also a couple typos corrected along the way . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to behavior . <section> avi weiss <user>"
extraneous assignment to cfe_success <section> couple more extraneous assignments as in <url> <section> <url> <url> <section> remove assignments - unnecessary code . <section> avi weiss <user>
"fix # <number> , replace quotes with angle brackets in / inc * x ] i reviewed the [ contributing guide <url> . * x ] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fixes # <number> - replace quotes with angle brackets in / inc files . <section> <number> . performed build verification testing <number> . ci <section> dan knutsen <allcaps> nasa </allcaps> goddard"
replace quotes with angle brackets in <hashtag> include </hashtag> statements within / inc describe the solution you ' d like quotes should be replaced with angle brackets in <hashtag> include </hashtag> statements that reside in the / inc location . this will ensure that the preprocessor selects the files pre - designated to override the default files contained within the open source cfs build release - as opposed to selecting those located in the same directory . requester info dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , moves custom commands and eids to public interface <section> - fixes # <number> <section> make install , lcov <section> no impact to open source . successful build for <allcaps> jsc </allcaps> ' s intended use <section> - ubuntu <number> <section> n / a <section> n / a <section> justin figueroa , vantage systems"
"make hs_custom . h commands and eids public <section> the commands and eids curently in hs_customs . h need to be made public . <url> <section> make new file hs / fsw / inc / hs_custom_internal . h and move the aforementioned definitions to it . <section> simply move the aforementioned definitions to fsw / inc / hs_extern_typedefs . h <url> <section> <allcaps> jsc </allcaps> needs this change to build successfully <section> justin figueroa , vantage systems"
"fix # <number> , make hs_tbl . h public fixes # <number> - makes hs_tbl . h public . <section> ci <section> dan knutsen <allcaps> nasa </allcaps> goddard"
make hs_tbl . h public <section> hs_tbl . h defines macros used in table generation and should be made public . <section> dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , adds fsw / src to app target <section> - fixes # <number> <section> make install <section> successful cert_testbed build <section> - ubuntu <number> <section> n / a <section> n / a <section> justin figueroa , vantage systems"
"add fsw / src to app target <section> cannot build cert_testbed . <code> is needed to build tables , etc . revise cmakelists . txt <section> build in cert_testbed <section> error - free build <section> if applicable , add references to the software . <section> - ubuntu <number> <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , moves interface definition files to inc <section> - fixes # <number> <section> make install lcov <section> no expected behavior change . <section> - ubuntu <number> <section> n / a <section> if included , identify any third party code and provide text file of license <section> - justin figueroa , vantage"
"move interface definition files to "" inc "" location <section> the interface definition files of all open source apps currently exist in the "" src "" directory . <section> create an "" inc "" dir to go with the "" src "" dir . move the interface definitions into this location : "" _msg . h "" , "" _msgdefs . h "" , "" _tbldefs . h "" , and "" _events . h "" . consider moving header files in both "" platform_inc "" and "" mission_inc "" to "" inc "" <section> leaving as is . <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , remove initializations causing cppcheck errors <section> fixes # <number> note : all are local variables only . in order of the errors reported in the issue report : hs_cmds . c <code> : the only uses of <code> are after it has been set , and given that this is a <code> function , there seems no need to have it initialized to a default value at the top of the function . hs_custom . c <code> : <code> is assigned a value before each use , so this can be changed from an initialization to a declaration . <code> : <code> is assigned a value before its use in a mutually exclusive <code> / <code> statement beginning on line <number> . therefore , this is also safe to change to declaration - only . <code> : <code> is assigned a value before its first use ( on line <number> ) . <code> : <code> is assigned a value on line <number> before its first use . hs_monitors . c in the <code> function : <code> : <code> is assigned a value ( on line <number> ) before it is used , and this assignment covers all of its references . given that this is a <code> function , there is no issue with someone trying to potentially return <code> uninitialized if it does not get set somehow during the function logic ( similar to the first case for <code> in hs_cmds . c ) . <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . in the <code> function : <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . in the <code> function : <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . in the <code> function : <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . in the <code> function : <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no impact on behavior . cppcheck now passes without error again . <section> avi <user>"
new cppcheck errors : ' [ unreadvariable ] ' <section> latest version of cppcheck is issuing the following failures for hs : <code> <section> run the current version of cppcheck on the current main branch hs source code . <section> cppcheck should pass without raising any errors . <section> avi <user>
"fix # <number> , apply consistent event id names to common events <section> - fixes # <number> - consistent event ids have been applied to the inconsistent cases to align them with a common event id naming convention . <section> only github ci actions . <section> no impact on code behavior ( no logic changes ) . consistent event id names for the events which are common to all / most cfs components and apps will improve consistency and ease make code review / debugging easier . <section> avi weiss <user>"
"fix # <number> , remove redundant / inconsistent comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . <section> fixes # <number> removes redundant and inconsistent comments ( e . g . <code> , <code> , function name in function header comments ) . there were also a few cases of unnecessary empty lines ( e . g . on the last line before the closing brace of a function ) and also missing empty lines ( e . g . between functions ) which were corrected . some of these empty lines trigger the ci format checks . i have left the commits separated for now to make life easier for whoever reviews this . i can squash them if / when this is ready for merge . <section> none ( comment and whitespace changes only ) . <section> no impact on behavior . these updates will reduce clutter and inconsistency in the code , improving readability . <section> <user>"
"redundant comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . <section> copy of <url> and <url> there are quite a few redundant comments in the code , such as : - <code> - type comments - <code> - type comments - function header comments which include the function name another minor issue has to do with empty lines : a ) _unnecessary_ empty lines ( e . g . first line after the opening brace of a function / struct , or the last line before the closing brace - the latter apparently sometimes triggers the ci format checks ) . b ) _missing_ empty lines between functions ( i . e . closing brace of last function , then next function beginning on the immediately next line without an empty line in between ) the unnecessary empty lines ( at the beginning or end of a function , for example ) represent a low single - digit percentage of the cases ( the vast majority of functions / structs do not have these extra empty lines ) , so there is an argument to remove them purely for consistency , not just due to them being redundant and triggering the ci format checks . <section> remove redundant comments to reduce clutter and inconsistency in the code , and improve readability . <section> <user>"
"fix # <number> , remove ' return ; ' from last line of void functions . <section> fixes # <number> removes all cases of redundant "" return ; "" statements on the last line of void functions . <section> none , prior to submission . <section> no impact on behavior . <section> <user>"
"remove "" return ; "" from last line of void functions <section> "" return ; "" at last line in void function is redundant . copy of <url> <section> remove <section> <user>"
"fix # <number> , remove unnecessary parentheses around return values . <section> fixes # <number> removes parentheses in return statements in hs that return a single value / term . this is aligns these return statements with the predominant style of cfs . <section> none , prior to submission of the pull request . <section> no impact on behavior . <section> <user>"
scrub use of ( ) in return statements <section> unnecessary parentheses around return values in hs copy of <url> <section> <user>
"fix # <number> , add utility command requirements for existing implementation <section> - fix # <number> <section> ci <section> none , just adds missing requirements for traceability <section> ci <section> note there are future work issues that may change this current behavior , but we need to have requirements for what currently exists . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"hs missing requirements for setutildiagcmd , setutilparamscmd , and utildiagreport ( all hs_custom . c ) <section> although these are in the custom section and may need adjustment depending on resolution of the hogging task related issues , the current implementation is missing associated requirements for hs_report_diag_cc , hs_set_util_params_cc , hs_set_util_diag_cc : <url> <url> <url> <section> all commands should have associated requirements , add . <section> none in the short term . longer term may update behavior based on : - # <number> - # <number> <section> really should be at minimum in the draco - rc2 requirements documents ( as well as many historical versions ) . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ping for awareness : <user>"
"fix # <number> , remove stray terminators <section> - fix # <number> <section> ci <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , add cancellation point to idle task <section> - fix # <number> just adds cancellation point to the idle task <section> ci , and confirmed cfs exits cleanly with ctrl - c <section> hs idle task now exits cleanly <section> ci and linux <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <user>"
"fix # <number> , performance id usage inconsistency fixed all occurrences <section> - fixes # <number> <section> personal"
"fix # <number> , remove all mentions of <allcaps> asist </allcaps> or <allcaps> itos </allcaps> artifacts from docs <section> - fixes # <number> <section> personal"
"fix # <number> # <number> # <number> # <number> , coverage improvements <section> split by topic ( mostly ) in the commits , but submitted as a group for <percent> coverage ( line / branch ) - fix # <number> - fix # <number> - fix # <number> - fix # <number> <section> ci <section> none , refactors just eliminated dependent conditionals <section> ci <section> none <section> none <section> none"
"fix # <number> , remove cfe_psp_memset use for addresses in <allcaps> ram </allcaps> <section> - fix # <number> <section> ci <section> none , just removes unnecessary <allcaps> api </allcaps> dependence <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> # <number> , add missing rationale and update application table requirements <section> - fix # <number> - fix # <number> <section> none , requirements updates only <section> none <section> na <section> deleted related test cases for deleted requirements <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , add idle task while loop back in <section> - fix # <number> just adds idle task loop back in <section> ci <section> idle task loops and should report hogging correctly ( should check with functional test ) <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit <section> still need to finish testing <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , add ut verification of startup sync <section> - fix # <number> <section> build and run unit tests <section> none , just verifies hs8006 and hs8006 . <number> <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , added codeql - build . yml * x] i reviewed the [ contributing guide <url> . * [x ] i signed and emailed the appropriate contributor license agreement to <email> and copied <email> . describe the contribution a clear and concise description of what the contribution is . added codeql to github workflows fix # <number> testing performed pushed to branch checked codeql ran successfully expected behavior changes no impact to behavior system ( s ) tested on browser additional context depends on <url> to run successfully third party code if included , identify any third party code and provide text file of license contributor info - all information <allcaps> required </allcaps> for consideration of pull request full name and company / organization / center of all contributors ( "" personal "" if individual work ) note <allcaps> cla </allcaps> ' s apply to software contributions ."
"add codeql to repository * x] i reviewed the [ contributing guide <url> . * x] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> use codeql for continuous integration <section> add codeql workflow <section> none <section> add any other context about the feature request here . <section> haven carlson"
"fix # <number> , resolve ut static analysis warnings <section> - fix # <number> <section> ci + static analysis run <section> none , just squashes static analysis warnings <section> - hardware : vm - os : ubuntu <number> - versions : bundle main + apps + related static analysis resolution branches <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"hs requirements imply <number> tables / entry types where only <number> exists there are several hs requirements that imply that there are <number> tables and / or entry types - core / non - core . that is not the case . there is one app table . <repeated> and there is no distinction between core / non - core app types ( with the exception that hs does not support restarting a core app ) . hs2000 – the term ‘ critical ’ should be removed from the application table name . hs2000 . <number> , hs2000 . <number> , hs2000 . <number> – requirements are duplicate and need to be removed . they are covered by hs2000 . <number> , hs2000 . <number> , hs2000 . <number> . hs2000 . <number> – needs to be updated to remove verbiage specifying the type ( core / non - core ) of entry in application table . further , it should specify that item ( a ) only applies to non - core apps ."
"fix # <number> # <number> , resolve reassignment before use style warnings <section> - fix # <number> - fix # <number> <section> ci <section> none , just removes extraneous settings <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
fill in missing requirements rationale there ' s a handful of missing requirements rationale . add . imported from <allcaps> gsfccfs </allcaps> - <number>
"static analysis issues relative to flight code handful of static analysis issues in the "" red "" identified ( non - style issues ) . need to resolve these . filter : - file : elf - file : ut - file : cfe - file : os - file : cf_ - file : _lab_app . c ! ( significance : style ) should resolve and / or disposition the higher ranked ones at minimum . note license restricts publishing issues . imported from <allcaps> gsfccfs </allcaps> - <number>"
"resolve static analysis issues relative to unit tests many actual code issues ( uninitialized variables , buffer overruns , etc ) identified via static analysis in the unit tests . all actual "" bugs "" should be resolved . imported from <allcaps> gsfccfs </allcaps> - <number>"
"revisit coverage , update to <percent> code / branch or write issues where unreachable failure : coverage cs lines <percent> functions <percent> branches <percent> failure : coverage ds lines <percent> functions <percent> branches <percent> failure : coverage fm lines <percent> functions <percent> branches <percent> failure : coverage hs lines <percent> functions <percent> branches <percent> failure : coverage lc lines <percent> functions <percent> branches <percent> failure : coverage md lines <percent> functions <percent> branches <percent> failure : coverage sc lines <percent> functions <percent> branches <percent> fix where possible , elsewise issues should document all uncovered lines / branches and disposition ( why it ' s ok as - is ) imported from <allcaps> gsfccfs </allcaps> - <number>"
"hs : remove <allcaps> psp </allcaps> stubs once available from the <allcaps> psp </allcaps> hs_utils_stubs . c has cfe_psp_watchdog * stubs , since they are not provided in caelum <allcaps> psp </allcaps> . eventually these should be removed once supported by <allcaps> psp </allcaps> . pending on <url> imported from <allcaps> gsfccfs </allcaps> - <number>"
"performance id usage is inconsistent in hs app anytime a task goes into a system delay ( for example a pend on message receipt or task delay ) , an app should do the following : cfe_es_perflogexit ( <performance_id> ); < do the delay function > cfe_es_perflogentry ( <performance_id> ); there appear to be some cases in hs where a task delay called , but the performance monitor is not exited . other apps should also be checked for consistent usage . imported from <allcaps> gsfccfs </allcaps> - <number>"
"compiling unit tests with cfs bootes - rc2 the provided unit tests do not compile with the bootes - rc2 release of cfs . the unit test <allcaps> readme </allcaps> states that "" the ut - assert framework , stubs , and hooks are located in the directory cfe / tools / ut - assert "" . this is no longer the case . i found an older version of cfe that had this ut - assert folder and managed to get the unit tests to compile with that , but many of the unit tests failed , likely because the functions in ut - assert are out of date . it seems that many of the functions within the old ut - assert folder used by these unit tests have moved to various places in cfe , osal , and psp and have since been updated . i am attempting to move files around and link libraries to compile with the updated cfs , but have not had any luck so far . below are the versions of cfe , osal , and psp i am using : - cfe v6 . <number> + dev298 - osal v5 . <number> + dev250 - psp v1 . <number> + dev76"
test issue
