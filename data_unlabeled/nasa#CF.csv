text
"fix # <number> , use valid size when calling cfe_msg_init use the offset of the payload start , which by definition must include at least enough space for the primary header . this ensures that the value will pass any size check enforced in cfe_msg_init . fixes # <number> <section> found and tested as part of the stakeholder software delivery <section> cf sends pdus successfully ( with valid msgid ) <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove unnecessary <code> union testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no impact on logic . code is simplified and clearer . <section> avi weiss <user>"
"fix # <number> , align cf command counter implementation to cfs standard testing performed * * github ci actions all passing successfully ( incl . build + run , unit tests etc . ) . <section> <code> / <code> counters now held directly in the hk packet , instead of through an additional struct member . this pr improves consistency across cfs , and makes future maintenance easier as variables are named and located as expected . <section> avi weiss <user>"
"fix # <number> , remove unnecessary cf_unionargs_payload_t union testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no impact on logic . <section> <user>"
"fix # <number> , revert merge of pr # <number> . fixes # <number> . <section> reverts # <number> . <section> dylan z . baker - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"revert - fixes # <number> - fixes # <number> <section> cert_testbed / cfe_bvt <code> <section> no integration issues <section> - os : ubuntu <number> <section> n / a <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , revert merge of pr # <number> . fixes # <number> . <section> reverts # <number> . <section> dylan z . baker - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
move pr # <number> into equuleus - rc2 there were some integrations issues with this pull request . <section> pr # <number> is reverted and a new pull request is created to integrate it into the following release . <section> dylan z . baker / <allcaps> nasa gsfc </allcaps>
move pr # <number> into equuleus - rc2 there were some integrations issues with this pull request . <section> pr # <number> is reverted and a new pull request is created to integrate it into the following release . <section> dylan z . baker / <allcaps> nasa gsfc </allcaps>
"seg fault when invalid destination filename is invalid cf will seg - fault when uploading a file with an invalid destination filename . cf outputs an <allcaps> evs </allcaps> message that it failed to create the file . it then appears to access a null pointer for a transaction . backtrace : <code> we are using cosmos <number> with the <allcaps> cfdp </allcaps> engine . we are using the <allcaps> send file </allcaps> command . <section> steps to reproduce the behavior : <number> . launch cfs with the cf app running . <number> . use cosmos / <allcaps> cfdp </allcaps> engine to send a file , specify an invalid filename ( to a directory that does not exist , for example ) <number> . see error in cfs output <section> cf should report that an error happened ( which it currently does ) , but not seg - fault <happy> <section> none . <section> - x86_64 pc - os : ubuntu <number> - versions : cfe <number> rc4 , <allcaps> osal </allcaps> v6 . <number> - rc4 , <allcaps> psp </allcaps> v1 . <number> - rc4 for pc - linux . note that we have modified cfe , <allcaps> osal </allcaps> , and the <allcaps> psp </allcaps> , but mostly to run on our target system : a microblaze running petalinux ( upon which we have also observed the seg - fault ) . <section> observed with draco - rc2 and draco - rc4 <section> james marshall , <allcaps> nasa gsfc </allcaps> <number>"
"fix # <number> , update size variables to <code> and <code> typedefs testing performed * * github ci actions all passing successfully ( incl . build + run , unit / functional tests etc . ) . <section> no change to behavior . <section> avi weiss <user>"
a few size variables could be updated to <code> or <code> code snips * * <code> should be of <code> type : <url> <code> should be of <code> type : <url> . <repeated> and few others . <section> update where appropriate <section> avi weiss <user>
"receiving entity not handling <allcaps> eof </allcaps> ( cancel ) <allcaps> pdu </allcaps> correctly when <number> entities are transferring a file in reliable mode , if a cancel command is sent to the sender entity , there appears to be something broken with the resulting handshaking with the receiver entity , which ultimately does not allow the sender entity to terminate the transaction gracefully . when the sender receives a cancel command , it issues an <allcaps> eof </allcaps> ( cancel ) <allcaps> pdu </allcaps> to the receiver . upon receiving this <allcaps> eof </allcaps> - <allcaps> pdu </allcaps> , the receiver immediately terminates , without any response to the sender . this results in the sender being stuck in a wait - for - <allcaps> eof </allcaps> - ack state and only terminating when the inactivity timer is reached . <section> steps to reproduce the behavior : <number> . start a file transfer between <number> <allcaps> cfdp </allcaps> entities in reliable mode <number> . send a cancel command to the sender entity <number> . observe that receiver entity immediately terminates the transaction ( whereas per the <allcaps> cfdp </allcaps> specification , it should send an <allcaps> eof </allcaps> - ack , a <allcaps> fin pdu </allcaps> , and waiting for the <allcaps> fin </allcaps> - ack from the sender before terminating ) <number> . observe that the sender entity does not terminate correctly because it continues to wait for the <allcaps> eof </allcaps> - ack from the receiver <section> <number> . file transfer in reliable mode started between <number> entities <number> . cancel command sent to sender entity <number> . sender entity issues a <allcaps> eof </allcaps> ( cancel ) <allcaps> pdu </allcaps> to the receiver entity <number> . receiver entity issues a <allcaps> eof </allcaps> - ack <allcaps> pdu </allcaps> to the sender entity <number> . receiver entity issues a <allcaps> fin pdu </allcaps> to the sender entity <number> . sender entity issues a <allcaps> fin </allcaps> - ack <allcaps> pdu </allcaps> to the receiver entity and terminates <number> . receiver entity terminates upon receiving the <allcaps> fin </allcaps> - ack <section> i believe issue is in the cf_cfdp_r2_substaterecveof function logic in cf_cfdp_r . c . the logic defers sending of the <allcaps> eof </allcaps> - ack until after cf_cfdp_r2_substaterecveof runs to completion : <code> <code> <code> <allcaps> eof </allcaps> ( cancel ) <allcaps> pdu </allcaps> then follows a path that eventually results in a call to cf_cfdp_r2_reset : <code> <code> <code> <code> <code> <code> then within cf_cfdp_r2_reset , the current transaction is already reset and freed . <code> <code> <code> my fix : added an "" else if "" section to cf_cfdp_r2_substaterecveof : <code> <code> <code> <code> <section> - hardware - os : linux ubuntu <number> - versions cf <number> . <number> <section> n / a <section> katie chou"
"fix # <number> , update <code> variables ( <number> , - <number> ) to their defined macros testing performed * * github ci actions all passing successfully ( incl . build + run , unit / functional tests etc . ) . <section> no change . improves expressiveness . <section> avi weiss <user>"
"magic number <code> variables ( <number> , - <number> ) can be updated to their defined macros expected behavior * * use the more expressive defined macros if they are available . <section> avi weiss <user>"
"fix # <number> , align cf command counter implementation to cfs standard testing performed * * github ci actions all passing successfully ( incl . build + run , unit tests etc . ) . <section> <code> / <code> counters now held directly in the hk packet , instead of through an additional struct member . this pr improves consistency across cfs , and makes future maintenance easier as variables are named and located as expected . <section> avi weiss <user>"
cf command counters format inconsistent with cfs code snips * * <url> <section> align cf command counters to the standard cfs implementation . i . e . <code> <section> avi weiss <user>
"fix # <number> , support polling with no delay - fix # <number> <section> ci and custom distro with zero delay , confirmed faster than <number> second polling <section> supports polling with zero timeout <section> ubuntu <number> <section> project request <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove error event on nominal semaphore timeout - fix # <number> <section> updated unit tests and functionally in prototype code <section> no error event for nominal semaphore timeout ( flow control ) <section> ubuntu <number> <section> - added # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"rework no message buffer error reporting to not spam - related to bug # <number> fix for # <number> only addressed removal of error event on nominal semaphore timeout ( flow control ) . when a message buffer is not available , this error event will flood when <code> is false since every wakeup cf will try to resend the <allcaps> pdu </allcaps> . note <code> is set to false on all non - file data pdus . i did not see any justification for why the code was implemented this way ( no event for file data pdus , events on the rest ) . this is the snip before the fix for # <number> . <url> <section> i think it would be more useful to know it happened and a count of how often . consider adding a counter for both semaphore timeouts and no message buffer available . only send an event on the hk cycle when "" no message buffer "" counter increments , and report both in hk . <section> could just send the event once when the no message buffer available count transitions to non - zero . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , optionally move files when complete most trivial implementation i could think of . just adds entry to the table , if it ' s filled in moves the file instead of delete , falls back to a delete if the mv fails . this moves on every tx complete for all styles . <repeated> good enough for our required use - case but may not work for everyone . if the use case is to support either move or delete , you can set up two channels ( one w / the move dir defined ) . - fix # <number> <section> tested use case in project code . ci ( updated unit tests ) <section> if move_dir is filled it , attempts to move instead of remove ( remove is performed if move fails ) . <section> ubuntu <number> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"seeking help in cross testing this <allcaps> cfdp </allcaps> implementation i am reaching out to seek your help in cross - testing our <allcaps> cfdp </allcaps> implementation for the python version built by us at librecube . as a beginner in c + + and new to the cfs software , i would appreciate any assistance you can provide in setting up a client or server or any tutorial for beginners that you may have available . our team has been working on developing a python - based <allcaps> cfdp </allcaps> implementation , and we would like to ensure that it is compatible with the cfs software . we believe that your expertise in this area would be invaluable in helping us to achieve this goal . specifically , we are seeking assistance in the following areas : <number> . setting up a client and server for <allcaps> cfdp </allcaps> using the cfs software <number> . cross - testing our python - based <allcaps> cfdp </allcaps> implementation with the cfs software <number> . any tutorial or guidance that you can provide for beginners in using the cfs software"
"add option to move files from polling directory instead of delete only way to send a file without deleting is by command which unnecessarily limits design options . intra - app commands is not ideal , but currently the only option if you want to automate sending files without deleting them . also nicer for automated data prioritization algorithms to query the number of files in the polling directory ( assuming just file count resolution is needed ) , vs more complex methods of tracking how much data is actually queued via the individual commands , processing cf tlm or similar . <section> support moving the file from the polling directory instead of always deleting . possibly rework the <code> option to support a <code> if the move directory is defined ( via config ) and available . also useful for commanded cases to just move when done . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , update cf_processmsg ( ) comment description testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> none - comment change only . <section> avi weiss <user>"
"fix # <number> , remove use of message storage in cf_appdata global testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to behavior . <section> avi weiss <user>"
"fix # <number> , remove ' dummy ' from variable names _resubmission of <url> somehow i tied myself in a few knots trying to squash the merge commit and some clang - format corrections into a single commit . anyway , this new pr is from an updated branch so there should be no merge commits i believe . _ * * removed ( unnecessary ) use of ' dummy ' in several variable names and corresponding function names for completeness - e . g . <code> ) . note <code> left as is due to conflicting type defined with the exact same name as this function . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully ( except cppcheck convert to sarif issue - already documented here : <url> <section> none <section> avi weiss <user>"
"audit cf for cyclomatic complexity compliance checklist ( please check before submitting ) x ] i reviewed the [ contributing guide <url> . x ] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . is your feature request related to a problem ? please describe . <allcaps> nasa </allcaps> guidelines in <allcaps> npr </allcaps> <number> . 2 d recommends maintaining a cyclomatic complexity ( cc ) in software , in particular flight software of <number> or less . cf_cmd . c : cf_cmdwritequeue ( cc of <number> ) and cf_cfdp_r . c : cf_cfdp_r_tick ( cc of <number> ) unnecessarily violate the recommendation of a cyclomatic complexity of <number> or less . describe the solution you ' d like audit cf_cmd . c : cf_cmdwritequeue and cf_cfdp_r . c : cf_cfdp_r_tick to see if functions would benefit from simplification such that they comply with <allcaps> npr </allcaps> <number> . 2 d recommendation . requester info dan knutsen"
"fix # <number> , update out - of - date doxygen text expected behavior changes * * none ( documentation changes only ) . <section> avi weiss <user>"
"fix # <number> , remove ' dummy ' from variable names testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> none <section> avi weiss <user>"
"fix # <number> , remove extraneous assignments to cfe_success testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to behavior . <section> avi weiss <user>"
extraneous assignments to cfe_success code snips * * <url> <url> <section> remove assignments - unnecessary code . <section> avi weiss <user>
"fix # <number> , clean up cf return codes testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> behavior essentially unchanged . removing positive error return values eases future maintainability . using a defined set of error return macros improves code clarity and makes cf more consistent with cfe and the other cfs apps . synchronizing the return types to <code> simplifies the code , and makes it more type - safe . could consider adding to this pr , or in the future , defining unique error return macros for each unique return type . <section> avi weiss <user>"
"fix # <number> , add option for trailer bytes in <allcaps> cfdp </allcaps> pdus adds an option to insert platform - specific padding at the end of <allcaps> cfdp pdu </allcaps> encapsulation . the padding area may be utilized by the deployment to add arbitrary verification information to the <allcaps> pdu </allcaps> . fixes # <number> <section> build and run all tests run a <allcaps> cfdp </allcaps> file transfer <section> none with default config . new config option allows user to add padding to the end of <allcaps> cfdp </allcaps> pdus for trailer bytes . <section> debian <section> the extra space is added only to the sb encapsulation of <allcaps> cfdp </allcaps> pdus , this is not within the <allcaps> cfdp pdu </allcaps> itself ( that is , the size inside the <allcaps> cfdp pdu </allcaps> does not include these extra bytes , but the size in the <allcaps> cfe sb </allcaps> message that holds the <allcaps> pdu </allcaps> does include it ) . <section> joseph hickey , vantage systems , inc ."
superfluous header <hashtag> includes </hashtag> code snips * * <url> <section> avi weiss <user>
"fix # <number> , replace quotes with angle brackets in / inc fixes # <number> - replace quotes with angle brackets in / inc files . <section> <number> . performed build verification testing <number> . ci <section> dan knutsen <allcaps> nasa </allcaps> goddard"
replace quotes with angle brackets in <hashtag> include </hashtag> statements within / inc <section> quotes should be replaced with angle brackets in <hashtag> include </hashtag> statements that reside in the / inc location . this will ensure that the preprocessor selects the files pre - designated to override the default files contained within the open source cfs build release - as opposed to selecting those located in the same directory . <section> dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , adds fsw / src to app target - fixes # <number> <section> make install <section> successful cert_testbed build <section> - ubuntu <number> <section> n / a <section> n / a <section> justin figueroa , vantage systems"
"add fsw / src to app target cannot build cert_testbed . <code> is needed to build tables , etc . revise cmakelists . txt <section> build in cert_testbed <section> error - free build <section> if applicable , add references to the software . <section> - ubuntu <number> <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , update requirements for more concise transaction status code addresses # <number> . updates requirements to support transaction status codes indicating early completion . <section> n / a - documentation update <section> n / a - documentation update <section> ubuntu <number> <section> dylan baker , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps> code <number>"
"fix # <number> , user ' s guide cleanup pushing doxygen update to refactor the cf user ' s guide for <user> <section> build / reviewed updated user ' s guide <section> dan knutsen <allcaps> nasa </allcaps> goddard"
user ' s guide needs rework <section> cf user ' s guide is not in line with the amount of detail provided for the other apps . <section> clean up doxygen + add more detail in regards to how to use the app . <section> dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , moves interface definition files to inc a clear and concise description of what the contribution is . - fixes # <number> <section> make install lcov <section> no impact to behavior <section> - os : ubuntu <number> <section> recommend fix of broken workflows as of <url> before considering this pull request . <section> if included , identify any third party code and provide text file of license <section> - justin figueroa , vantage"
"move interface definition files to "" inc "" location the interface definition files of all open source apps currently exist in the "" src "" directory . <section> create an "" inc "" dir to go with the "" src "" dir . move the interface definitions into this location : "" _msg . h "" , "" _msgdefs . h "" , "" _tbldefs . h "" , and "" _events . h "" . consider moving header files in both "" platform_inc "" and "" mission_inc "" to "" inc "" <section> leaving as is . <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , add doc - prebuild dependency the documentation requires some artifacts to be in place , this added dependency ensures they are created before doxygen runs . fixes # <number> <section> run documentation build <section> no missing file if this is the first / only target built ( file will be created due to dependency ) <section> ubuntu <number> <section> requires merging nasa / cfe # <number> and nasa / osal # <number> before this will actually work . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , correct doxygen parameters corrects the doxygen for some newly added functions where the parameter names did not match . fixes # <number> <section> build documentation <section> no warnings about parameter name mismatches <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"correct parameter names in doxygen the cf header files have some mismatches between the doxygen documentation and the function prototype . <section> build documentation , check warnings <section> should have no warnings <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"missing dependency in documentation build the application documentation build ( doxygen ) depends on having some artifacts from the parent scope already existing , but there is no explicit dependency to enforce this . as a result , the build may fail , as it does in the github workflow . <section> failing in the github documentation workflow <section> should have a dependency on the parent target , so the needed file ( s ) get generated before running doxygen . <section> github hosted runner <section> this is a multi - part problem that requires a coordinate change across multiple repos . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , work around throttle sem creation race adds a retry loop around os_countsemgetidbyname , because if this sem is created by another app there may be some delay until the other app gets to the point where it creates the sem . this works around the race condition . a retry limit is also imposed so cf will not spin here forever . fixes # <number> <section> build and run tests , check file transfers with bp <section> should start up more reliably <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove unnecessary cf_unionargs_payload_t union testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no impact on logic . <section> avi weiss <user>"
"fix # <number> , reformat bracketed block fix # <number> <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , move ' <allcaps> eid </allcaps> ' to the end of event id names testing performed * * github actions ( build / run + unit tests ) passing successfully . <section> no impact on behavior ( no logic changes ) . the format of cf event ids is now aligned with the rest of the cfs components / apps , improving code consistency . <section> avi weiss <user>"
"fix # <number> , apply consistent event id names to common events testing performed * * only github ci actions . <section> no impact on code behavior ( no logic changes ) . consistent event id names for the events which are common to all / most cfs components and apps will improve consistency and ease make code review / debugging easier . <section> avi weiss <user>"
"fix # <number> , update inaccurate event id name testing performed * * only github ci actions . <section> no impact on behavior . <section> avi weiss <user>"
"fix # <number> , move variables declared mid - function to the top testing performed * * just the ci github actions so far . <section> aligns cf with the rest of cfs and the relevant coding guidelines . makes it easier and quicker to identify all variables in a function . <section> <user>"
"fix # <number> , change variable names to be more informative fix # <number> , change single - letter variable names to be more descriptive <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , clean up redundant comments and empty lines testing performed * * none ( only comments and empty lines were amended ) . <section> no impact on behavior . these updates will reduce clutter and inconsistency in the code , thereby improving readability . <section> <user>"
"redundant comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . expected behavior * * remove redundant comments to reduce clutter and inconsistency in the code , and improve readability . <section> <user>"
"fix # <number> , add more concise transaction status code adds a new concept of "" transaction status "" to replace use of <allcaps> cfdp </allcaps> condition code to indicate the result of a transaction . to aid in transition this is equivalent in numeric value to the defined <allcaps> cfdp cc </allcaps> values but is extended with additional values for other conditions that can occur in the implementation but do not necessarily result in sending a <allcaps> fin </allcaps> / <allcaps> eof pdu </allcaps> . this also adds setting of transaction status for some off - nominal cases where no <allcaps> cfdp cc </allcaps> was set . fixes # <number> <section> build and run all tests , confirm <percent> coverage in unit tests for all new / modified functions run two instances of <allcaps> cfs </allcaps> running cf and perform file transfer between them , both nominal / successful and also intentionally create an error ( filesystem rejection ) . confirm that the generated "" <allcaps> eot </allcaps> "" telemetry message contains the expected code in both cases . <section> for successful file transfers both sender and receiver send "" <number> "" ( <code> ) in the new <code> field of the <allcaps> eot tlm </allcaps> message . for non success both send an appropriate error code in the field . <section> ubuntu <number> <number> - bit <section> the <code> value overlaps with the previous <allcaps> cfdp </allcaps> condition code value , but it is extended with additional values . where overlapping , numeric values for <allcaps> cfdp </allcaps> ccs are kept the same , and the value is the same integer width at the same place , such that the <allcaps> eot </allcaps> message format is not changed and software interpreting the message should not break . however , the software interpreting the <allcaps> eot tlm </allcaps> will need to accept the wider range of possible code values . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , clean up remaining commented - out code testing performed * * none ( comment changes only - no code was modified ) . <section> no impact on behavior . <section> <user>"
"fix # <number> , define special values in cmd processing as enums fix # <number> <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , correct <number> aberrant instances of cf_transaction_t argument name fixes # <number> amended the only <number> aberrant instances of cf_transaction_t objects named ' ti ' , to align them with the other ( several hundred ) instances named ' t ' . <section> none , prior to submission of pull request . <section> no impact on behavior . <section> n / a <section> <user>"
"fix # <number> , correct <number> aberrant instances of cf_transaction_t argument name fixes # <number> amended the only <number> aberrant instances of cf_transaction_t objects named ' ti ' , to align them with the other ( several hundred ) instances named ' t ' . <section> none , prior to pull request submission . <section> no impact on behavior . <section> n / a <section> n / a <section> n / a <section> <user>"
"fix # <number> , resolve usersguide issues with doxygen <date> - fix # <number> <section> build doc with ubuntu <number> <section> successful doc build <section> - hardware : i5 / docker - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , disable polling directory in default table - fix # <number> <section> ci <section> polling disabled by default , avoids messages about the directory not found <section> ci <section> also improved default table comments <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , use utassert_int32_eq to check status using the int32_eq macro avoids type conversion issues in the event that the int32 type is not equivalent to "" int "" . fixes # <number> <section> run all tests <section> no longer has build failure on systems where int32 ! = int <section> <allcaps> rtems </allcaps> <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove dynamic memory use in uts - fix # <number> <section> ci <section> squash warnings . <repeated> also more maintainable unit tests ( much simpler ) <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
unnecessary use of dynamic memory in unit tests dynamic memory used in ut for cf_crc and cf_clist . <section> refactor / simplify . <section> none <section> note this will also fix some static analysis warnings w / the related unit tests . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> , use fixed size types in tlm <allcaps> eot </allcaps> packet - fix # <number> <section> ci <section> fixed size types in tlm <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ( via stakeholder request )"
"fix # <number> , detect pdu truncation fixes # <number> detects and reports silent truncation of entity id or transaction sequence number fields . pdus with <allcaps> eid </allcaps> / <allcaps> tsn </allcaps> fields that are too big for configured internal storage will be rejected and an event will be issued . <section> updated and ran unit and coverage tests . tested with peer - to - peer cf setup with both correctly configured <allcaps> pdu </allcaps> fields were accepted , and pdus with size mismatches were rejected rather than silently truncated . <section> now if the ground or a peer sends a <allcaps> pdu </allcaps> with either <allcaps> eid </allcaps> or <allcaps> tsn </allcaps> fields that are too big for the storage configured in the cf_platform_cfg . h file , the <allcaps> pdu </allcaps> will be rejected , the error counter will be incremented , and an event message will be issued . before these pdus would be silently accepted , and the error could depend on the data truncation that would occur . <section> - hardware : pc - os : ubuntu <number> - versions : cfs bundle main ( as of <date> ) <section> alan cudmore , <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , code <number>"
"fix # <number> , revert requirements whitespace changes from # <number> - fix # <number> <section> ci ( note this is requirements whitespace change only ) <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"revert requirements custom whitespace changes numerous "" custom "" whitespace changes snuck into # <number> <section> revert the custom changes . the csv should be a direct export from the requirements management tool to keep the management process simple ( export / commit vs export / edit / commit ) and helps with version control ( diff between versions reflects actual changes from the requirements cm tool ) . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> # <number> , cf chunk unit test cleanup and main code chunk add and gap bug fixes - fix # <number> - fix # <number> <section> ci with "" real "" scenarios implemented ( no longer random number ) <section> fixes both the chunk add and chunk gap logic <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , consistent cfe_evs_sendevent handling in ut - fix # <number> <section> ci <section> none , just ut updates / cleanup <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove file dequeue cmd requirements - fix # <number> <section> na <section> none , requirements update only ( command not implemented in <number> . x) <section> na <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , updated <allcaps> cfdp </allcaps> class validation fix # <number> , add validation to <code> and <code> to prevent negative <allcaps> cfdp </allcaps> class values . <section> unit testing <section> reject command if <allcaps> cfdp </allcaps> class is negative <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , send packet when transaction resets fix # <number> , when a transaction resets , an information packet is sent <section> unit testing <section> sending a packet of information on a transaction when it is reset . <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"remove dequeue file command requirements , they are not implemented dequeue file is not an implemented command , still listed in requirements cf5022 , cf5022 . <number> <section> remove these requirements <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , clarify event text for commands that initiate actions - fix # <number> <section> ci <section> none , text is just more clear <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , base offsets for cf msgids define the cf msgids as an offset from the cfe_platform_cmd_mid_base or cfe_platform_tlm_mid_base , which helps simplify configuration . users should add <allcaps> msg </allcaps> offsets to the global mission config header . fixes # <number> <section> build and run cf app <section> msgids for cf can be more easily customized by setting <allcaps> msg </allcaps> offsets in the global cfe_mission_cfg . h header file , the same way other <allcaps> cfe </allcaps> framework module msgids are set . user does not need to modify this file in place to do so . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"inconsistent use of cfe_evs_sendevent stub forces unnecessary ut complexity since two patterns are used for checking events , it can not be setup by default at startup causing every test that wants to check events to have to set up the data buffer ( using either pattern a or b) : pattern a uses ut_cf_reseteventcapture , ut_cf_checkeventid_impl , ut_cf_capturedeventids , example : <url> pattern b set ' s up a custom buffer : <url> <section> use a single pattern and setup automatically ( like pattern a ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , support dynamic pdu packets fix # <number> in order to support cf peer to peer transactions , this change will allow incoming <allcaps> pdu </allcaps> packets to be either command or telemetry packets . this is handled in the cf_cfdp_sbintf . c file that handles pdus wrapped in <allcaps> ccsds </allcaps> packets . this change required renaming structures : <code> this rename makes it less confusing if cf receives a <allcaps> pdu </allcaps> wrapped in a <allcaps> tlm </allcaps> packet , for example . in this case , it would not make sense to receive a "" send "" type packet . in addition to renaming these structures , the typedefs were moved to cf_cfdp_sbint . h as a step toward decoupling the <allcaps> pdu </allcaps> send and receive from the software bus . by allowing incoming <allcaps> pdu </allcaps> packets to be wrapped in command or telemetry <allcaps> ccsds </allcaps> packets , cf can receive pdus from the ground wrapped in a command packet , or pdus from a cf peer wrapped in a telemetry packet . <section> <number> . built and ran ( updated ) unit tests . <number> . set up a cf peer - to - peer configuration and verified a type <number> tx transaction works from one cf peer to another . tested that the cf peer can receive the pdus as telemetry or command packets . <section> - no impact to normal behavior , but does enable direct peer to peer <allcaps> pdu </allcaps> transactions cf1 ( <allcaps> tlm pdu </allcaps> ) - > cf2 ( <allcaps> tlm pdu </allcaps> ) <section> - pc virtual machine - os : ubuntu <number> - versions : cfs main ( <date> ) <section> alan cudmore / <allcaps> nasa gsfc </allcaps> / code <number>"
"fix # <number> # <number> # <number> , comment cleanup and spelling - fix # <number> - fix # <number> - fix # <number> <section> ci <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"ci code coverage failure , missing line / branch for random seed <phone> random value use in unit tests strikes again . <repeated> missed a line / branch for random seed <phone> . <section> remove random behavior for whatever caused this issue . <section> replace all random functions w / hard coded settings for now . eventually extract from code and use values that make sense (# <number> ) . <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , updated value in assert causing test to fail fix # <number> , bug in unit tests wasn ' t multiplying the number of transactions per channel by the number of channels , causing the unit test to not pass . <section> ran unit test <section> all unit tests pass <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"num of transactions in channel should be multiplied by num of channels in unit test in <code> , cf_num_transactions_per_channel is not multiplied by cf_num_channels , causing the assert to fail ( see code snippet below ) <section> run unit tests <section> all unit tests should pass <section> <url> <section> - os : ubuntu <number> - <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , refactored to remove cf_cmdacc ( ) and cf_cmdrej ( ) fix # <number> , remove the cf_cmdacc ( ) and cf_cmdrej ( ) functions <section> ran unit tests <section> or no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , flatten logic in cf_cfdp_initengine ( ) to fix bug fix # <number> , fixed error in code where semaphore name being blank would skip to the end of <code> <section> ran unit tests <section> if the semaphore name is blank , continue with function instead of exiting . <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , pass correct parameter in abandon cmd function fix # <number> , <code> was being passed to <code> instead of <code> <section> ran unit tests <section> when the abandon command is called , it will run <code> <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"incorrect parameter in abandon command in the abandon command code , <code> is being passed <section> abandon should pass <code> instead <section> <url> <section> browser <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , failed commands send error event message fix # <number> , an error event message is sent if a command is not successful <section> ran unit tests <section> behavior change : all commands now send an error event message if unsuccessful <section> os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
remove cf_cmdacc and cf_cmdrej inline functions cf_cmdacc and cf_cmdrej are one - liners so they are mostly unecessary . <section> replace their use and remove the functions . <section> <url> <section> haven carlson - <allcaps> nasa </allcaps>
"fix # <number> , reset file psn and use os_mv for out - of - order <allcaps> rx md </allcaps> processing - fix # <number> switches from os_rename to os_mv which supports "" rename "" across file systems ( via copy / delete ) resets file cached position ( from the file open ) so it gets recalculated correctly <section> ci ( added unit test asserts ) <section> should now handle an out - of - order md , and a tmp dir being on a different filesystem than the final location <section> ci <section> note the functional / <allcaps> ctf </allcaps> test is the full verification of this capability <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove ppt design and <allcaps> vdd </allcaps> docs from codebase - fix # <number> <section> ci - doc change only <section> none , just paperwork change in that these should be provided as assets on release . <section> ci <section> eventually converting to markdown would be good . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> # <number> , command handling updates a clear and concise description of what the contribution is . fix # <number> , an information event message is sent if a command is successful fix # <number> , remove <code> <section> ran unit tests <section> - behavior change : all commands now send an information event message if successful <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"part # <number> , fix # <number> , document event ids and remove unused - part # <number> added event id documentation - fix # <number> removed unused event ids <section> ci <section> none , just improved documentation and no unused event ids <section> ci <section> note , still working the rest of the documentation <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , refactor goto statements fix # <number> , replaced all instances of <code> <section> ran unit tests <section> no impact to behavior <section> ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> # <number> # <number> # <number> # <number> , coverage improvements unit test updates - fix # <number> - fix # <number> - fix # <number> <allcaps> fsw </allcaps> updates - fix # <number> - fix # <number> <section> ci <section> none , just achieves full coverage <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
implicit default case in cf_writehistoryentrytofile prevents full branch coverage this will show up with the implicit default case uncovered since it ' s unreachable : <url> <section> add the default case explicitly <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"remove unit test context_t elements as overkill for a coverage test there ' s a significant amount of unit test logic dedicated to confirming argument inputs to stub functions that go above and beyond the requirements of a coverage test . this logic is associated with defining and saving * _context_t structures from within stubs . while there is technically nothing wrong with these tests ( they all pass ) , the issue is with technical debt . unless the test is verifying requirements / spec / algorithm document there ' s also the question of what is truth . <section> use functional tests to verify function . remove context checks that do not add value in the coverage test context . <section> leave as is , but whenever maintenance is performed encourage simplification . at minimum we should avoid this pattern in new or updated tests . <section> along the same lines as removing the randomness , these are not intended to be fuzz tests . - # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove registration of empty <allcaps> evs </allcaps> filters - fix # <number> <section> ci <section> eliminates cfe_evs_registration filter truncation message and no longer registers empty filters <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , truncate files when created to avoid stale data - fix # <number> <section> ci <section> truncates when creating files ( avoids stale data if previous file was larger ) <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , add mission rev and print in startup and noop events - fix # <number> <section> ci <section> adds mission rev in startup and noop events <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> # <number> , move timers into channel config and remove cfg telemetry - fix # <number> - fix # <number> <section> ci ( also built and ran unit tests locally ) <section> no longer supports reporting config in tlm , get it via table dump ( better since it contains everything already ) timer and limits are now channel specific configuration items matching requirements , note this will break existing tables <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
update <allcaps> readme </allcaps> . md - fixed typo <code>
"fix # <number> , removed the typo removed the typo in readme . md fixes - # <number> <section> steps taken to test the contribution : <number> . build steps ' corrected the error ' <number> . execution steps ' saved the file ' <section> no impact to behavior <section> - hardware : [ intel corei5 ] - os : [ windows ] - versions : [ <number> ] <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - note <allcaps> cla </allcaps> ' s apply to software contributions ."
"fix # <number> , resolve ut variable coverage results - fix # <number> <section> built and ran unit tests with troublesome seed , got nominal results <section> none , just avoids possible missing coverage in the unit test for cf_chunks_findsmallestsize <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
inconsistent results in coverage test likely related to random number use in unit tests (# <number> failed coverage here : <url> <code> note it passed in the very next run w / no code changes ( was just a requirements update ) <section> remove whatever random test implementation is causing this ( all others eventually to fix # <number> ) <section> none <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> # <number> # <number> # <number> # <number> # <number> , requirements clean - up - fix # <number> - fix # <number> - fix # <number> - fix # <number> ( note issue # <number> still exists ) - fix # <number> - fix # <number> - part # <number> ( just removes duplicate element from requirement , does not fix issue ) also removed old / obsolete requirements spreadsheet <section> na - requirements only <section> none <section> n / a <section> the update for # <number> adds the timers at the channel level , so it ' s related to existing issue # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , add codeql a clear and concise description of what the contribution is . added codeql to github workflows fix # <number> <section> <number> . pushed to branch <number> . checked codeql ran successfully <section> no impact to behavior <section> browser <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - note <allcaps> cla </allcaps> ' s apply to software contributions ."
add codeql to repository use codeql for continuous integration <section> add codeql workflow <section> none <section> add any other context about the feature request here . <section> haven carlson
"fix # <number> # <number> , resolve static analysis warnings - fix # <number> - fix # <number> <section> ci + static analysis run <section> none , just squashes static analysis warnings <section> - hardware : vm - os : ubuntu <number> - versions : bundle main + apps + related static analysis resolution branches <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , resolve buffer overflow in cf_chunks_insertchunk unit test - fix # <number> rewrites problematic cf_chunk_insertchunk tests that occasionally had a buffer overflow due to random number use . <section> build and ran unit tests , confirmed passing . also confirmed no loss in coverage . <section> just fixes random unit test failures on a <number> bit system . <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit ( and app addition ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"file transfer priority level configuration requirement clarification no <section> per requirement cf5030 . <number> , the cf file - transfer priority levels shall be configurable . this functionality is not currently implemented in cf . <section> none <section> none <section> sergio maldonado <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> / arctic slope technical services"
"z modifier not c89 compatible <code> modifier not c89 compatible <code> format specifier is not c89 compatible . event messages utilizing <code> or <code> ( or other <code> ) format specifier will see "" zd "" in event / print message instead of desired numerical value . <section> steps to reproduce the behavior : build and run cfs cf app in c89 compatible but not fully c99 compatible environment . send valid ground cmd but with invalid ground cmd length to cf app . cf will send an event ( <allcaps> error </allcaps> ) with cmd expected length and actual length , however the actual length will just show <code> . you can see this behavior when viewing cf ' s event printout . for example : <code> <section> event message will include numerical value for corresponding cmd length <section> <code> and corresponding unit test <section> - versions : cf v3 . <number> <section> support for <code> modifier introduced in c99 ( c99 adopted as an <allcaps> ansi </allcaps> standard in <date> )"
"fix # <number> , switch to reusable build - run workflow - fix # <number> <section> modified ci ( pointed to skliper / branch for cfs workflow ) : <url> <section> none , ci <section> ci <section> nasa / cfs # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
use build and run usable workflow at cfs level local build - run workflow duplicates standard app logic for building and running with cfs <section> use reusable workflow instead <section> none <section> nasa / cfs # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> , add unit test and coverage workflow - fix # <number> <section> ci w / modified path / repo for reference : <url> <section> none <section> ci <section> nasa / cfs # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
add unit test and coverage workflow no unit test or coverage verification workflow implemented <section> add <section> none <section> nasa / cfs # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> # <number> , cleanup and add functional requirements csv - fix # <number> - fix # <number> <section> none , doc only <section> none <section> n / a <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"add cf functional requirements csv to repo for easier change history tracking cf requirements hard to track changes during development and reference when supplied as assets . <section> add the requirements directly to the repo in the same format as cfe : <url> <section> endless . but this follows the cfe pattern that has worked well ( csv in repo , doc provided as asset at release ) <section> cleanup listed in # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"additional requirements cleanup based on csv - cf4000 and cf4000 . <number> look identical - not clear what the difference is between cf4003 and cf3005 . <number> ( if a channel has a unique message id , every <allcaps> pdu </allcaps> related to that channel will be associated with that message id , no ? ) - out of family id ' s ( and some missing , only in summary ) : cf5002 . <number> , cf5002 . <number> , cf5002 . <number> - multiple typos : cf1001 "" receieves "" , cf3001 "" the the "" , cf5001 . <number> "" processingall "" "" comand "" , cf5030 "" evels "" , <section> resolve <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , add doc build / deploy workflow - fix # <number> <section> ci with forced fork / branch for reuse workflow and forced deploy : <url> <section> doc build with enforcement of no warnings , will deploy to gh - pages on push to main <section> ci <section> depends on nasa / cfs # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , # <number> - adds strict cppcheck and fixes remaining warnings ( replace codec macros ) - fix # <number> - fix # <number> <section> build / run unit tests , also manually ran strict cppcheck on fsw / <section> none except now enforcing strict cppcheck in ci <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit <section> workflow will fail until # <number> is merged since one of the warnings were fixed there . also will fail until nasa / cfs # <number> is merged based on the directory fix <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , # <number> - resolve static analysis warnings - fix # <number> - fix # <number> <section> build / unit test and run static analysis <section> none , just cleaned up about half the static analysis warnings <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit <section> note goto removal issue is still open which would address another significant set of warnings (# <number> ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , move cf_tbldefs . h to src - fix # <number> moves cf_tbldefs . h so that the compiler does not pick up the default platform_inc headers instead of the overridden headers ( if they exist ) at the mission level . the table structure definitions are not configurable at a platfrom level , much like the majority of other applications . <section> build / run unit tests <section> overridden headers at mission level will now be used by cf_tbldefs . h vs the defaults in fsw / platform_inc where the file was formerly co - located . <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"warnings raised when cf_num_channels is set to something other than <number> <url> is not actually changeable ; the initializer at <url> makes assumptions about the channels and their roles <section> set cf_num_channels to <number> and observe compile warning <section> no warnings <section> <section> - hardware : sp0 - s - os : vxworks <number> <section> <section> john n pham , northrop grumman"
"fixes # <number> , add unit test workflow changes enable_unit_test to true , changes ctest_output_on_failure to true , adds repo_name , changes ubuntu - latest to ubuntu - <number> , splits build - run copied and pasted this file from a successful run adds matrix method to ubuntu - <number> and ubuntu - <number> fixes # <number> <section> testing performed on fork : <url> <section> passing workflow <section> ubuntu <number> ubuntu <number> <section> the build release tested on ubuntu <number> catches a format truncation warning in nasa / osal . # <number> <url> documents this issue . passing workflow requires truncation suppression , depends on <url> <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"update and / or document missing coverage <code> <section> fix where possible , elsewise issues should document all uncovered lines / branches and disposition ( why it ' s ok as - is ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"<code> occasionally fails on <number> bit system not clear what the issue is , but random values being used in test . output observed : <code> <section> built on <number> bit system , ran the <code> test repeatedly ( maybe <number> errors in <number> ) ? <section> no failures . <section> <url> <section> - hardware : i5 / wsl - os : ubuntu <number> - versions bundle main + cf main <section> - # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
add unit test workflow missing unit test workflow . <section> add unit test workflow <section> none <section> none <section> justin figueroa - <allcaps> asrc </allcaps> federal
"fix # <number> , apply clang - format - <number> whitespace formatting - fix # <number> <section> whitespace only - ci <section> none , whitespace only <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove old license headers - fix # <number> <section> ci , documentation only <section> none , documentation only <section> n / a <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , adds format check and static analysis workflows fixes # <number> <section> tested format check on fork : <url> tested static analysis on fork : <url> <section> passing workflow <section> ubuntu <number> <section> the added format check workflow catches a format check error when it runs its "" error on differences "" step . specifically , the workflow throws errors on the placement of "" \* "" with pointer variables written in the fsw and unit test files . the format check would rather that "" \* "" be on the left side of the whitespace than the right side . <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"fix # <number> , update <allcaps> license </allcaps> and copyright headers - fix # <number> <section> documentation only , but built and ran unit tests anyways <code> <section> none <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit ( w / <allcaps> gsfc </allcaps> apps added ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , follow include standard - fix # <number> <section> ci and local build / execute of unit tests <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , resolve uninitialized variables in ut - fix # <number> <section> build <number> bit & run unit tests with valgrind <section> no uninitialized variable warnings <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"uninitialized variables in ut when running <number> bit multiple uninitialized variables identified in ut for <number> bit build ( using valgrind ) : <code> <section> resolve <section> none <section> related to # <number> testing , this is just the remaining issues after that change . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , stack smashing in cf_chunk unit test - fix # <number> <section> built / ran <number> bit unit tests <section> no longer stack smashing in ut <section> - hardware : i5 / container - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
cf_chunk unit test stack smashing stack smashing observed when compiling / testing <number> bit ( - m32 ) . issue is with a test not limiting the max count to the size of the array : <url> <section> limit correctly and use an index inbounds . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"unit test hooks should not pass back pointers out of context multiple cases of pointers getting passed back out of context : <url> <url> <url> <url> <url> <url> <url> <url> these could all be stale by the time they are checked . <section> clean up hooks . remove info not needed , anything critical should either check in context or copy the information out . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , use lowercase and updated table name in ci - fix # <number> <section> ci <section> ci should pass <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix ci for table name update and follow lower case standard ci broken by table update , also unnecessarily diverges from lowercase pattern <section> fix <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , apply header guard standard <section> - fix # <number> <section> ci <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , cf table name and default polling disabled - fix # <number> <section> built and default startup , confirmed table loaded w / no errors ( with cf app name in startup config ) <section> no polling errors reported , works with <allcaps> gsfc </allcaps> app naming patterns <section> - hardware : i5 / docker - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , add build workflow fixes # <number> <section> tested on fork : <url> <section> build cfs with the cf app and run . / core - cpu1 <section> ariel adams , <allcaps> asrc </allcaps> federal"
"fix # <number> , set revision number to <number> <section> per <allcaps> cfe </allcaps> / <allcaps> cfs </allcaps> versioning patterns , development software should report itself as revision <number> to avoid confusion with released versions . fixes # <number> <section> build and sanity check cf <section> revision reported as <number> now , example boot event : <allcaps> evs </allcaps> port1 <number> / <number> / cf_app <number> : cf initialized . version <date> <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , move all bitfields into codec <section> nothing outside of the codec code should need to know about the bitfields in the <allcaps> cfdp </allcaps> protocol definition . everything else uses logical values . this moves all declare_field macros into cf_codec . c and removes cf_field . h . fixes # <number> fixes # <number> <section> build and sanity check cf run all unit tests run some file transfers <section> none , code clean up <section> ubuntu <number> <section> this just puts these definitions on the "" need to know "" basis , by not exposing them outside the only file where they matter . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , improve coverage on cf_cmdgetsetparam <section> rewrites the unit test on this function in order to get full line coverage . this needs to call the routine with every defined param id to get each case . fixes # <number> <section> build and run all unit tests , confirm coverage <section> none for <allcaps> fsw </allcaps> , unit test coverage improvement <section> ubuntu <number> <section> this also removes a bit of code from <allcaps> fsw </allcaps> that did a no - op for a size that wasn ' t uint32 / uint16 / uint8 . this was unreachable because there are no cases that have such a size , and it would be a software bug if there was . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove throttle sem from default / example config <section> removes the throttle sem name from the example configuration table . unless the user provides another app / library to create this sem , this configuration will not load . with this sem removed then cf should at least be able to start up . fixes # <number> <section> build cf <section> example config will not attempt to use a throttle sem . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , reject pdus with large bit set <section> this bit indicates that the <allcaps> pdu </allcaps> has <number> - bit size and offset fields . cf currently does not support large file sizes . it needs to reject these packets as they will corrupt the data because they are not decoded properly ( decode is fixed at <number> bit sizes ) . fixes # <number> <section> build and sanity check cf force sending <allcaps> pdu </allcaps> with bit set , confirm cf rejects the <allcaps> pdu </allcaps> . <section> cf informs the user that it received a <allcaps> pdu </allcaps> that it does not understand . <section> ubuntu <number> <section> cf does not and did not support this feature , the only difference here is that it cf will now properly detect and reject a received <allcaps> pdu </allcaps> with this bit set , and inform the user of that event , instead of attempting to ingest it and doing so wrongly ( likely corrupting data in the process ) . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , add cf_purge_queue_cc <section> adds missing enum label to cf_cmds . fixes # <number> <section> issued the command ( code <number> ) from cmdutil and confirmed cf did something . <repeated> <section> none , this command code was already in the dispatch table , so it worked before if cc <number> was manually sent using cmdutil . <section> ubuntu <number> <section> this is just for completeness / correctness of the enum . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , restore call to cf_cfdp_recvnak <section> this call got inadvertently removed with recent change , caught by regression test . this puts it back . fixes # <number> <section> build and sanity check cf execute cf file transfers <section> <allcaps> nak </allcaps> should work properly again <section> ubuntu <number> <section> in my test environment it is difficult to recreate a <allcaps> nak </allcaps> situation . <repeated> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use osal_id_t for <allcaps> osal id </allcaps> , not int32 <section> use the correct typedef for <allcaps> osal id </allcaps> . this also necessitates using the correct conversion macro where use as an integer is intended . fixes # <number> <section> build with <allcaps> osal </allcaps> bleeding edge code , confirm no type conversion errors . <section> none w / caelum <allcaps> osal </allcaps> , as osal_id_t is equivalent to uint32 . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , update traverse history / write file <section> - rename the functions to better indicate what they do - do not discard the part of the output that has <allcaps> eid </allcaps> / <allcaps> tsn </allcaps> / cc information - do not pass the return value of snprintf directly to write ( ) , use strlen ( ) - simplify the code fixes # <number> <section> build and unit test cf . run two instances of <allcaps> cfe </allcaps> + cf , execute transfer in both directions and confirm issue cf_write_queue_cc ( <number> ) to write the transaction and history queues to the file confirm contents of the file are correct . <section> the file contains the information it is intended to contain , mainly the <allcaps> seq </allcaps> / <allcaps> dir </allcaps> / <allcaps> peer </allcaps> / cc bits are not omitted . there is also no risk of buffer overruns . here is an example file output , after running two transactions between two nodes ( one rx , one tx ) <code> <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"use proper type instead of "" int32 "" for <allcaps> osal </allcaps> ids <section> in some functions , e . g . cf_writequeuedatatofile , cf_writehistoryqueuedatatofile , the <allcaps> osal </allcaps> file descriptor is being passed as an <code> . this is incorrect , but allowed by the backward - compatibility features in <allcaps> osal </allcaps> . in a future version , this will become an error . <section> build <allcaps> osal </allcaps> with type - safe id . implicit conversion of id to / from an integer will fail to compile . <section> use <code> type instead , which is the correct type for an <allcaps> osal id </allcaps> . <section> <url> <url> <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , scrub all printf format codes <section> use the correct printf format code and typecast for printing various values in log messages and events . fixes # <number> <section> build and run tests on <allcaps> rtems </allcaps> and <number> - bit powerpc <section> build succeeds without warnings or errors <section> <allcaps> rtems </allcaps> <number> . <number> on pc686 + <allcaps> qemu </allcaps> yocto / poky linux on <allcaps> ppc </allcaps> <number> + <allcaps> qemu </allcaps> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , consistent "" chunk "" test sizes <section> do not use a random uint16 to size the structure that is allocated on the stack . pick a reasonable size that is not likely to overrun the stack , and use it . this fixes a crash / stack overrun issue when running on <allcaps> rtems </allcaps> . fixes # <number> <section> build and sanity check cf on pc - <allcaps> rtems </allcaps> <section> tests pass <section> <allcaps> rtems </allcaps> <number> . <number> via <allcaps> qemu </allcaps> + pc686 <allcaps> bsp </allcaps> <section> this _only_ fixes the random values that caused a stack overrun / crash . would still recommend fixing other use of random numbers in tests . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , validate input params on txfile and playback cmds <section> the input parameters on txfile and playback commands was not being sufficiently validated before calling the internal routine . fixes # <number> fixes # <number> <section> send in commands with invalid parameters / channel number and confirm it is being rejected with the event . <section> cf no longer segfaults with an out - of - range channel number <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , correct accept / reject counter increments <section> for commands that rely on cf_tsnchanaction ( ) , this is documented as returning a count of the number of transactions affected . therefore , a return value > <number> means that the operation was successful ( or at least it matched something ) , and a return value <= <number> means failure . - fixes a case where the function did not adhere to its documented return - fixes passing the result to cf_cmdcond ( ) which needs a translation . fixes # <number> <section> build and sanity check cf <section> correct counters being incremented now <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , rework loop in cf_cfdp_cycletx <section> modifies the loop inside this function to be more conventional , and easier to follow . does not change the logic . fixes # <number> <section> build and sanity check cf , run all tests <section> none , this does not change loop logic <section> ubuntu <number> <section> do not use "" goto "" to jump _inside_ the middle of a loop , just use <code> and break out when the stop condition was reached . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove macros within c code <section> reworks the cf_cmdgetsetparam to be clearer in its implementation , not require the use of endian - specific conditionally - compiled code . fixes # <number> <section> build and sanity test cf app send various get / set param commands ( cc <number> and <number> ) and confirm working as expected <section> none visible externally ( i . e . <allcaps> cmd </allcaps> handling ) but much cleaner internal handling of these values . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , disable the engine in cf_cfdp_disableengine <section> restores setting a global flag which was mistakenly deleted in a previous cleanup . this also adds a unit test check to confirm the global was set false . fixes # <number> <section> build cf and run tests <section> engine gets disabled when cf_cfdp_disableengine is called <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove dependence on <allcaps> endian </allcaps> macro for checksum <section> removes the checksum "" optimization "" for big endian , as it is unlikely to be useful and creates endianness dependencies . fixes # <number> <section> build and sanity check cf <section> none on x86 / little endian ( removes code that was not used ) <allcaps> ppc </allcaps> / big endian will use the same code as x86 , might be a bit slower but its safer and more testable ( because its the same code ) <section> ubuntu <number> <section> the big endian optimization is probably not that useful because it requires that the hw can do misaligned <number> - bit reads . <allcaps> afaik </allcaps> most embedded cpus do not have this capability , and if they can , it might not be all that much faster than reading it byte - by - byte . so even though it looks like a <number> - bit read in c code ( and therefore 4 x fewer loop iterations ) it probably does not have much of a payoff , if one could find a hardware with this capability ( not sure how it was originally tested ) . in the end i do not think its worth trying to test and maintain this "" optimization "" . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , make entity id default to <number> bit <section> entity ids should be larger by default for real - world applicability , as this also restricts what <allcaps> cfdp </allcaps> can receive , not just what it sends . note <allcaps> cfdp </allcaps> will only use the number of bytes required to express the value , so values less than <number> will still only use <number> byte , regardless of this config . this just allows use of larger values . fixes # <number> <section> build and sanity check cf <section> default "" out of the box "" config should support entity id values up to <number> bits . <section> ubuntu <number> <section> this only affects what cf is capable of handling , if running with small ( < <number> ) entity id values , there is no change to the runtime behavior at all ; they will still be <number> bits in practice . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , adjust padding in msg structs <section> add explicit spare bytes where the compiler is likely to introduce padding into hte message structures . <allcaps> cfs sb </allcaps> messages should avoid having any implicit padding , whenever possible . fixes # <number> <section> build and run tests , send some commands to sanity check <section> none really , the padding was implicitly in the messages already , this just makes it clear / explicit . <section> ubuntu <number> ( on <number> - bit <allcaps> cpu </allcaps> ) <section> this probably needs <allcaps> cosmos </allcaps> updates as well ( <allcaps> tbd </allcaps> ) <section> joseph hickey , vantage systems , inc ."
"cf msg definitions explicit padding <section> <allcaps> cfs </allcaps> apps should avoid having any implicit ( compiler - induced ) padding in the message structures . where items are likely to be spaced due to compiler alignment requirements , an explicit spare byte ( or bytes ) should be added between them . <section> specifically , the following structures need some padding updates : - in <code> : total size needs to be multiple of uint32 ( + <number> spare bytes at end ) - in <code> : + <number> bytes spare between the "" counters "" ( cf_hkcmdcounters_t , <number> bytes in size ) and the "" channel_hk "" ( cf_hkchannel_data_t , which contains uint64 values , and therefore has <number> - byte alignment ) . - in <code> : total size needs to be a multiple of uint64 ( + <number> more spare bytes at end ) . this currently has <number> spare bytes , which puts the end at offset <number> . this is not a multiple of <number> , needs <number> more to make it <number> . <section> will need <allcaps> cosmos </allcaps> updates , too . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , doxygen updates <section> make sure _all_ functions in cf have a doxygen block on the declaration describing the inputs and outputs and a general summary of what the function does . additionally describe the purpose of structures and structure members where it is not totally obvious from the name . note : this also renames one member , cf_max_chunks , that appears to have been improperly scooped up in a previous batch rename . fixes # <number> <section> build and sanity check cf operation . this does not change any actual <allcaps> fsw </allcaps> or unit test logic . <section> no impact to behavior , this only changes documentation ( aside from the one rename ) <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"incorrect check at the start of cf_chunks_eraserange this only verifies that the "" start "" id is less than the count : <url> it really needs to verify that the end is less than the count too ( because it reads this memory ) . this could also make the count go negative if the end was beyond the count . in theory if the code is operating properly this should never happen , but since some error checking is done , it should at least be correctly done . recommend to make it check that <code> instead ."
"fix # <number> , compile out cf_asserts by default <section> changes cf_assert to be opt - in rather than opt - out , so that under normal verification and validation the asserts will _not_ be included , but they can still be added back during development , if desired . they mainly exist as notes to developers as to what is supposed to be true , once debugged it is impossible to get these conditions , by definition . also removes one channel calculation that was only for assert . note that the same condition is asserted later , so it was redundant anyway . fixes # <number> <section> build and sanity check cf with cf_debug_build set both ways <section> branch coverage on <allcaps> lcov </allcaps> report is much better with asserts compiled out . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , # <number> , update identifier names <section> renames all remaining identifiers that did not have an appropriate name per the coding standards . specifically , this is anything that did not start with cf prefix (# <number> ) and anything that ended with an underscore only (# <number> ) . fixes # <number> fixes # <number> <section> build and sanity check cf , run all tests execute test file transfer between two <allcaps> cfe </allcaps> nodes <section> none , internal symbol rename only <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , reject fd packets with segment_metadata flag set <section> the cf does not currently interpret / use the segment metadata option inside file data pdus . packets with this bit set should be rejected . fixes # <number> <section> build cf and run all tests execute test file transfers between two <allcaps> cfe </allcaps> nodes <section> none , cf does not set this bit on tx , it should never be set on rx . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use proper types for msgid and mid values ensures use of the proper sb - provided types for msgids and msgid values ( aka cfe_sb_msgid_atom_t ) . this ensures that the values are used and converted properly . fixes # <number>"
"some functions / typedefs remaining that do not follow naming convention a previous fix for # <number> did a scrub of the global variables , but there are still several instances of localized identifier names that do not follow the convention . these should also be fixed ( easy search and replace ) . - tick_args_t - container_of - chan_action_fn_t - bool_arg_t - susp_res_arg_t - bool_msg_arg_t - trans_seq_arg_t - trav_arg_t - traverse_all_args_t - priority_arg_t most of these are for local helpers that were previously file - scoped ( static ) but after # <number> have been moved to a header and made non - static for unit testing improvements . so these should now be renamed to follow the convention since they are technically global scope , even if use is still limited to one unit ."
""" count_bytes "" inside cf_cfdp_r2_calccrcchunk is not incremented during loop the cf_cfdp_r2_calccrcchunk function has what appears to be an intent to limit the amount of bytes processed during each call . there is a comparison of a local <code> to the configured <code> here : <url> however , nowhere during this loop is <code> incremented , so it is always <number> , and thus this limit is never reached . found during rework of unit tests on here , branch coverage showed it not possible to get this condition because count_bytes is always <number> ."
set revision number to <number> on main branch to indicate development really we should bake this into process such that it ' s the very first change on the development branch after a release . otherwise tlm will not be unique between official releases and development branch use . <url>
"unit tests including "" . c "" file the cf unit tests are using <code> to wrap a . c file . for example : <url> this practice was determined to violate <allcaps> gsfc </allcaps> coding standards . it is likely done this way such that the test can access "" static "" items in the source file . the preferred way is to simply declare the item in a header file so that unit test can access it more conventionally ."
"fix # <number> , add contributing guide fixes # <number> added contributing guide that directs users to the cfs <allcaps> contributing </allcaps> . md file ."
"fix # <number> , add issue & pr templates fixes # <number> added bug report , feature request , and pull request templates ."
add contributing guide match the cfs repo in terms of documentation to allow the community to easily contribute . add a contributing guide similar to the one found in cfs .
add pr & issue templates match the cfs repo in terms of documentation to allow the community to easily contribute . add a bug report and feature request template .
add build workflow for continuous integration develop a github actions workflow to compile cf with the rest of the framework . will also need to modify sch_lab table to check if cf runs .
"fix # <number> ( plus others ) , separate logical vs . network <allcaps> pdu </allcaps> buffers improves the distinction between <allcaps> pdu </allcaps> data being actively interpreted or created during the <allcaps> pdu </allcaps> receive or transmit process , and the encoded form of that data . cf formerly treated the two as the same , directly referencing the encoded form of the data . this creates many repeated translations . furthermore , it would sometimes write a modified value back to the packet in a partially - decoded form , so it was never clear what was in a given buffer at a given time ( it could be native byte order or network byte order , in the same fields ) . this introduces a "" logical "" buffer which correlates to the <allcaps> cfdp </allcaps> buffer , but is used for all in - work or temporary value storage . all values in the logical buffer are normalized to the native machine , that is they are aligned properly and always in the correct byte order for the host , so they can be used as normal values without any need for translation . when it comes time to transmit data to / from the network , a dedicated encode / decode function is used , to translate the entire content from its native form to the network form , or vice versa . <allcaps> fsw </allcaps> should typically not access the encoded form of data , outside of the codec routines , except under very limited circumstances with good reason ( such as dynamically updating the total_length field in the base header after encode ) . fixes # <number> fixes # <number> fixes # <number> fixes # <number> fixes # <number> fixes # <number> fixes # <number> fixes # <number> also related to # <number> , # <number> , # <number> , # <number> , # <number> - makes progress toward those goals but more work still needed ."
"fix # <number> , handle alt - success code from <allcaps> tbl api </allcaps> the <allcaps> tbl api </allcaps> may return success codes other than cfe_success , such as cfe_tbl_info_updated . from the standpoint of cf_checktables , these should all be considered successful . fixes # <number>"
"fix # <number> , make dispatch tables and functions consistent standardize the dynamic handler functions to two basic types , one that accepts a <allcaps> pdu </allcaps> ( recv ) and one that does not ( send ) . also create several dispatch table types , one based on file directive code , one based on tx sub state , and one based on rx sub state . change the dispatcher functions to use these common types and create new dispatcher functions where there was not a separate function already ( this makes the pattern consistent ) . make all "" receive "" helper functions accept a pointer to the recieved <allcaps> pdu </allcaps> and actually use that pointer to read the data . this substantially reduces reliance on the global and fixes some cases where a pointer was actually passed into a function , but ignored . this takes a significant step toward removing the global entirely , but does not do so yet . fixes # <number> also related to / makes some progress on # <number> and # <number> but does not fix those yet ."
replace custom strnlen implementation with <allcaps> osal </allcaps> version <allcaps> todo </allcaps> in code references replacing this function with an osal version <url> apps should avoid developing custom implementation of utilities especially generic ones like strnlen . see osal implementation below <url>
"fix # <number> , no packing of <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> structs the <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> structures are application - defined . as such , they should not need to depend on compiler - specific extensions like packing . note that the definitions ( mostly ) already included explicit spare bytes where padding was likely to be needed , so the "" packed "" attribute was largely unnecessary here , only serving to make the definitions <allcaps> not </allcaps> compilant with c99 . fixes # <number>"
"file receive transactions are not canceled when a fault is detected per requirement cf2002 . <number> , cf should cancel the transaction when a fault is detected . currently when cf detects a fault it will issue an event message an increment the fault counter . however it will continue to retry or closeout the transaction by issuing <allcaps> ack </allcaps> or <allcaps> nak </allcaps> pdus . some of this behavior appears to be consistent with <allcaps> cfdp </allcaps> class <number> handling . either the requirement needs updating or cf should comply and not attempt to continue the transaction when a fault is detected ."
"suspend request faults not detected per requirement cf2002 . <number> , a received suspend request fault should be detected . cf does not appear to detect this request and there is no associated fault counter for verification ."
playback_dir command does not validate parameters per requirements cf3001 . <number> and cf3001 . <number> cf should validate the channel number and class number parameter values . the playback_dir command does not validate the channel number . invalid channel number are accepted and do not result in an incremented invalid counter or issuing an error event . the class number parameter is also not checked . invalid class numbers are accepted as used during transaction processing .
"<allcaps> tx file </allcaps> command causes system failure when engine is disabled when the <allcaps> cfdp </allcaps> engine is disabled and a <allcaps> tx file </allcaps> command is issued with valid or invalid parameter values , the system crashes ."
"configuration table does not contain all required items per requirement cf4000 . <number> , all specified values should be present in the configuration table . currently , only some of the values are present . values not specified in the requirement are also present in the table . for example , the history queue depth and channel name are specified but are not implemented ."
"housekeeping telemetry message does not contain all required values per requirement cf6000 , all specified values should be contained in the housekeeping packet . currently only some of values are present . values that are not specified in the requirement are also present ."
"not all configuration table parameters are validated per requirement cf7001 . <number> , the following values must be validated in the configuration table : a . outgoing file chunk size b . flight and ground entity ids c . message ids d . <allcaps> cfdp </allcaps> class <number> or <number> currently , cf only validates item a . outgoing file chunk size"
"fix # <number> , replace acknack count union using a union for the ack / nak counts is somewhat dangerous because undefined behavior will occur if accessed improperly . in this case there is no need to have separate representations of the counter , they are both limited to the "" unit8 "" range , so use a uint8 . fixes # <number>"
"simplify function names in unit test the function names in the unit test code are absurdly verbose . some of these unit test function names are <number> + characters in length ( exceeding the clang - format line length limit on their own ! ) . this could be considered coding style , but this is so excessive that it warrants pruning them all back - note that for portability , symbol names should ideally be kept under <number> significant characters . this is per <allcaps> iso std </allcaps> c9899 section <number> . <number> - this says that an implementation is only required to recognize <number> significant chars on an external symbol name , or <number> on a local symbol name . the fact that this goes so far beyond the c99 - specified limits is a good reason to fix it . example : <url> descriptive content on what the test is supposed to do belongs in comments , not within the function name itself ."
"odd union for ack / nak counters union is declared here : <url> this counter is then used in the txs2 / rxs2 state data structures . it should not be necessary to create a union between the <code> and <code> types for two reasons : - <code> is not a known / guaranteed range type , and the rollover point of this value is not guaranteed . <allcaps> fsw </allcaps> discourages use of types which do not have fixed range unless for valid reasons ( e . g . interfacing with library code that uses this type ) - <code> is simply the <number> lsbs of the value , there is no need to unionize in order to be able to count both modulo <number> as well as a longer type in short , declaring a union like this has no benefit at all , but only introduces the possibility of accessing it wrong and getting undefined behavior . only downsides , no upside . recommendation is to replace with a normal <code> counter ."
add contributing guide follow example in <url>
"function pointers should be typedef ' ed cf uses function pointers to implement its state machines , but generally do not use a "" typedef "" for this , they are mostly declared inline . for example : <url> <url> not only is this hard to read , it does not facilitate or encourage any sort of uniformity / consistency in the dynamically - called functions . no doubt this is likely a contributor to the fact that some functions take a pointer to the <allcaps> pdu </allcaps> header and some do not ( see # <number> , # <number> ) . recommendation to fix : - determine a common set of arguments that all "" state handler "" functions are likely to need - from initial inspection , this is probably a pointer to the transaction structure , a pointer to the current <allcaps> pdu </allcaps> header , and a generic / opaque argument for any additional data ( this may or may not be needed / used now , but future proofs the calling conventions in case state - specific data becomes needed ) - declare a global - scope function pointer typedef that conforms to that spec ( accepting the standard set of args ) - convert all "" dispatcher "" code to use that typedef . this will not only make the code more readable ( function pointer syntax in c is particularly messy ) but also encourage more uniformity on the arguments and patterns of state handler functions . it will likely help solve the fact that some functions read their packet data from a global , while others read it from a passed - in pointer ( and mixed within the same processing cycle ! ) ."
"function names differing only by trailing underscore cf has a number of cases where function names differ only in a trailing underscore ( s ) , which is likely to violate some coding standards because they look too similar and can be easily confused . an example offender is <code> , <code> , and <code> . these internal helpers with only trailing underscores should be renamed to something more descriptive to make it clear what the intent of the function really is ( e . g . in the example , the double - underscore version seems to be simply a wrapper to initialize the transaction structure . <repeated> seems to have nothing to do with sending files at all , really - just a generic initialization helper ) ."
"task : evaluate unit test items marked "" <allcaps> todo </allcaps> "" a simple search shows the text "" <allcaps> todo </allcaps> "" currently appears <number> times in the cf source code , almost all of which are in unit test . future work items should be tracked in the issue list , not in the source code . - if the intent is to actually do the work item , then there should be a github issue submitted to implement - if it is determined that the work item is not necessary after all , then remove the <allcaps> todo </allcaps> comment ."
"task : run unit tests through valgrind a number of existing prs address unit testing issues where structure objects are created on the stack , and values inside that object are used without any sort of <code> or equivalent call to bring the object into a known / consistent state . while many have been fixed , there are likely to be many more that remain . the "" valgrind "" memcheck tool can be useful in finding these instances , as it will report if a value is read before it is written . it would be helpful to run the unit tests under valgrind memcheck , and submit issues for the problems identified by this tool ."
"remove use of "" dummy "" in variable names"
run through valgrind <allcaps> ccb </allcaps> : <number> - <number> - <number> <url> - <allcaps> approved </allcaps> - run through valgrind _originally posted by <user> in <url> <user> <user>
"fix # <number> , remove use of bitfields in cf bit field behavior is platform - specific , bits are not specified to be in any particular order . furthermore , unions of bitfields are likely undefined behavior . this removes the bitfields and replaces with normal fields . fixes # <number> <allcaps> note </allcaps> : the cost of doing this is slightly larger data size . i checked the size of the structure before and after to quantify this - the "" flags "" structure grew by <number> bytes on my dev system (x 8 6 - <number> , gcc <number> ) . the net result is that the memory footprint of the cf global grows by <number> bytes ( due to <number> transactions in default config ) . however , this is partially mitigated by a slight reduction in code size , of approximately <number> bytes . it probably runs faster too ( although i did not quantify that - not as easy to test ) but the <number> bytes of extra code were obviously being executed every time these flags were read / written , that adds up ."
"clean up commented - out functions in unit test the unit test contains a number of test sequences that are completely disabled / commented out . for example : <url> these serve no value , they are not testing anything , and only serve to clutter the code ( it is not likely to work if un - commented , as it would be un - commented already if it did work ) . without a clear reason why these exist in the code , recommendation is to remove . version control serves the purpose of preserving historical code , if the concern is to keep a historical record of a previous test case ( it does not need to stay in source file ) ."
"fix # <number> , remove unused header "" cf_types . h "" the types defined in this file were not actually used in <allcaps> fsw </allcaps> . this removes the file and the single inclusion of it . fixes # <number> ."
"unused header file "" cf_types . h "" this file exists under <code> and it defines two enumeration types . although the header itself is included in some files , the two enumerated types do not appear to be used anywhere . recommendation is to remove this file ( dead code ) ."
"fix # <number> , naming conventions and style compliance update identifier names across cf source code to match the <allcaps> cfs </allcaps> naming convention . this convention is documented in the <allcaps> cfe </allcaps> framework , see <url> changes are mostly just search / replace . each file will be done separately , to keep the commit size within reason . but these will not likely be easy to merge / split due to the number of lines affected so they need to be maintained as a series . fixes # <number>"
"fix # <number> , remove unused cf_endofheaderptr function unused functions / dead code should not be included in <allcaps> fsw </allcaps> fixes # <number>"
"unused function : cf_endofheaderptr this function is declared here : <url> and defined here : <url> however , it does not appear to be called from anywhere in <allcaps> fsw </allcaps> - only called from unit test . <allcaps> fsw </allcaps> just uses "" cf_headersize "" and uses that value to advance a byte pointer . recommend removal of dead / unused code ."
"support ( or not ) for "" large "" file mode the <allcaps> cfdp </allcaps> specification ( specifically <allcaps> ccsds </allcaps> <number> - b - <number> , table <number> - <number> ) defines a "" large file flag "" bit . when this bit is set in the <allcaps> pdu </allcaps> header , it means that all file sizes and offsets are <number> bits in size , rather than the historical <number> bits . the cf implementation currently does not have this bit defined - the position it resides is defined as <allcaps> reserved </allcaps> in this code - and all file sizes are defined as a fixed <number> bits in the <allcaps> pdu </allcaps> structures , with no provisions to permit use of <number> bit values here . the cf requirements also do not appear to require large file transfer to be supported . however , even if large file is not supported by this implementation of <allcaps> cfdp </allcaps> , for interoperability reasons cf should at least recognize and check for this flag being set , and reject packets for which it is set . due to the fact that this flag changes the size and location of elements that follow , if it is ignored then one runs the risk of misinterpreting packets and triggering undefined behavior , which could corrupt the filesystem ."
"fix # <number> , consistent application target name the application target should not have an "" app "" suffix . note that none of the other <allcaps> cfs </allcaps> apps have a suffix either , so this makes cf consistent with that . also - this removes use of "" aux_source_directory "" - preference is to list the source files . fixes # <number>"
"consolidate repeated unit test setup code into helper functions in the cf unit tests , the "" preconditions "" for each test case are often very similar , but instead of being set up through some sort of helper function , the code is cut - and - pasted . as a result , code to set up for particular preconditions may be repeated dozens of times in the unit test . this incurs a significant maintenance cost when the <allcaps> fsw </allcaps> data structures need to change in any way ( and they will , the <allcaps> fsw </allcaps> is not set in stone and will need to be maintained ) . a small change to <allcaps> fsw </allcaps> can affect many different unit test cases . this would not be a big problem if the setup was in some sort of helper function , but since it is repeated , each affected case must be individually found and fixed . as a result , the time cost of maintaining the unit test is extremely high . to reduce this cost , common sequences of setup ( such as setting up for an input <allcaps> pdu </allcaps> , an output <allcaps> pdu </allcaps> , etc ) should be consolidated into a helper function , so only this function needs to change if the internal <allcaps> fsw </allcaps> structures change ."
"remove use of random numbers in coverage test the objective of a coverage test is to exercise the various paths in the implementation to ensure they do not trigger any undefined behavior . it is not intended to be a "" fuzz test "" - although fuzz testing can be valuable , that is a separate test , typically done using a standard ( non - stub ) build via the public interface , where arbitrary / random input values are expected to be fully scrubbed and handled correctly - not for internal apis that are expected to have more controlled inputs . currently the cf unit tests use lots of random values , and in particular may pass values that are not even within acceptable range , or do not make sense when paired with other inputs ( e . g . a pointer and size where the size is a random value , exceeding the actual size of the object being pointed to ) . this randomness does not really add value to the coverage test objective , if anything it detracts from it by ( possibly ) creating opportunities for test cases to follow different paths through the code under test with each invocation . the unit tests for cf should be scrubbed to remove use of random values , replace with a single / specific value ( s ) that are guaranteed to follow the intended path through the code under test ."
"fix # <number> , resolve uninitialized pointer warning initialize the variables at the beginning of the function . they will be set again in the loop , but this avoids the compiler warning . fixes # <number>"
"fix # <number> , pass actual size of buffer the test must not pass a buffer size larger than the actual buffer , or else it will read beyond the end . fixes # <number>"
"fix # <number> , initialize local variables whenever the value of a local variable not directly set by the test code , make sure to set it to a value so it is never seen as uninitialized . some of these are simply cases where the value is initialized within a loop . several lines of code triggered warnings that a value may be used uninitialized , because the compiler logic might not recognize that the loop must run at least once . in other cases a local buffer structure should be cleared / memset to <number> before being passed along . fixes # <number>"
"fix # <number> , do not use system assert in tests instead of using the system assert call , use utassert_abort ( ) to report critical conditions where continuation is not possible . note due to limitations of the utassert_abort ( ) function , this uses utassert_failed ( ) to report any runtime information , followed by abort with a static / fixed message . fixes # <number>"
"fix # <number> , do not assert when <allcaps> ndebug </allcaps> is set this effectively ignores cf_assert checks in the code when it is compiled with <allcaps> ndebug </allcaps> . none of these checks should be needed after development . in particular , this removes the use of the non - standard "" unlikely "" compiler extension that was used here . fixes # <number>"
"fix # <number> , do not instantiate globals in header file variables declared in headers should only be "" extern "" , otherwise multiple instances will be defined . this moves the instantiation of variables to the most relevant c file . fixes # <number>"
"fix # <number> , aligned buffer for all test commands where ever a unit test is generating a buffer on the stack to send to a command processing function , this typically needs to be represented as a cfe_sb_buffer_t * pointer , which by definition is supposed to be aligned to the worst - possible case , which may be greater than the alignment requirement of the actual command type . to avoid warnings when converting between types , use a union to ensure the stack object meets the alignment requirements for cfe_sb_buffer_t . furthermore , ensure all buffers instantiated on the stack are cleared ( memset to <number> ) before operating on them or passing them to a cf function . fixes # <number>"
"fix # <number> , use proper cfe_sb_pipeid type correct the pipe id assignment in ut to use the resourceid type . this also uses a fixed / consistent value here , rather than a random value . there is no real need to use a random value . fixes # <number>"
"fix # <number> , init data passed as const input any data structure passed to a function by pointer where that pointer is documented as input - only ( const ) should always be initialized . some compilers will warn about this ( even if the called function does not actively dereference the pointer due to other constraints ) . fixes # <number>"
"fix # <number> , # <number> , instantiate properly sized and aligned buffers for unit unit tests that invoke <allcaps> cf pdu </allcaps> processing functions on either input or output , ensure that the locally instantiated "" dummy "" <allcaps> pdu </allcaps> is both sized sufficiently and aligned correctly . this removes quite a bit of questionable casting between the buffer types , and fixes a number of stack - smashing issues . for completeness , this also clears ( memset to <number> ) all instantiated buffers , before setting values in the test . this ensures that the entire message structure has predictable / repeatable content . fixes # <number> fixes # <number>"
"fix # <number> , correct status checks of cfe_sb_receivebuffer check generically for cfe_success , rather than a single error code , since there is more than one error . this also corrects some minor coding standards items in cf_app . c - logic not really changed but improves readability . fixes # <number>"
"fix # <number> , correct allocation size for <allcaps> cfdp pdu </allcaps> the call to cfe_sb_allocatemessagebuffer needs to take into account the size of the extra sb header , not just the cf_max_pdu_size . fixes # <number>"
"fix # <number> , correct declaration of cf_cfdp_playbackdir_ this helper function was declared with fixed - length string arguments but in practice is used with other buffer lengths . these arguments are changed to ( more conventional ) <code> instead . note that other cases where fixed - length string arguments are used are not changed by this commit , since it appears those are always used with a buffer of that length . fixes # <number>"
"fix # <number> , correct declaration of cf_cfdp_playbackdir_ this helper function was declared with fixed - length string arguments but in practice is used with other buffer lengths . these arguments are changed to ( more conventional ) <code> instead . note that other cases where fixed - length string arguments are used are not changed by this commit , since it appears those are always used with a buffer of that length ."
"should not use cfe_sb_getuserdatalength ( may be deprecated in future ) the sb function <code> ( along with the related user data pointer ) are inherently flawed / unreliable , as they do not ( and cannot ) take into account any padding between the cfe_msg cmd / tlm header and the start of the <allcaps> cfdp pdu </allcaps> in the current version of <allcaps> cfe </allcaps> ( caelum ) . in the cf use case , structs are packed such that there really should not be any padding here , but nonetheless , it would still be better to avoid using this function , and just subtract the offset of the <allcaps> pdu </allcaps> . this code is in a better position to do this , because it knows the definition of the actual packet ( <code> or <code> ) and can compute it correctly with this information . sb does not know this , and therefore cannot compute this correctly ."
"cf_checktables does not handle cfe_tbl_info_updated <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf_checktables does not handle cfe_tbl_info_updated _originally submitted by_ : maldonado , sergio e . ( <allcaps> gsfc </allcaps> - <number> ) [ arctic slope technical services , inc . ] on wed <date> <time> <number> _original description_ : the call to <allcaps> cfe </allcaps> \ _tbl \ _manage in cf \ _checktables does not account for the <allcaps> cfe </allcaps> \ _tbl \ _info \ _updated return status , only <allcaps> cfe </allcaps> \ _success . this results in a cf app run error and app shutdown after a new config table is loaded , validated , and activated ."
"cf "" cf_field . h "" macro cleanup <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf "" cf_field . h "" macro cleanup _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on wed <date> <time> <number> _original description_ : the "" cf \ _field . h "" defines a macro called "" inc \ _subfield "" . <repeated> thankfully this appears to not be used anywhere . recommend removal . the other macros "" <allcaps> field </allcaps> \ _set \ _val "" and "" <allcaps> field </allcaps> \ _get \ _val "" have a couple recommended cleanups : <number> . they are multi - line / complex macros . recommend to convert to inline functions instead - they only operate on "" uint8 "" base values so this should not be a problem . <number> . they are then aliased to a shorthand "" <allcaps> fsv </allcaps> "" and "" <allcaps> fgv </allcaps> "" , respectively . it appears the author simply did not want to write the long names ? is there a real justification for having the same macro / function under two names ? only the shorthand is actually used in the code . recommend to choose one name and use it ."
"cf "" <allcaps> max </allcaps> "" macro in cf_chunk . c should be an inline function <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf "" <allcaps> max </allcaps> "" macro in cf_chunk . c should be an inline function _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on wed <date> <time> <number> _original description_ : the "" <allcaps> max </allcaps> "" macro in cf \ _chunk . c is often used as an example in c language textbooks of what \ _not \ _ to do because it evaluates its arguments more than once : <hashtag> define </hashtag> <allcaps> max </allcaps> ( a , b ) ( ( ( a ) > ( b ) ) ? ( a ) : ( b ) ) this appears to be only used in two places in the code , neither of which appear to have side effects , but still recommend converting to an inline function to avoid any future issues . worth noting that the arguments are also somewhat non - trivial so unnecessarily evaluating them twice might be a performance hit , even if its not a behavioral / correctness problem ."
"cf odd use of macro in cf_cfdp_r2_calccrcchunk <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf odd use of macro in cf_cfdp_r2_calccrcchunk _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on wed <date> <time> <number> _original description_ : this function appears to define a local macro inline just to avoid writing the same text a few times over . example : <hashtag> define </hashtag> <allcaps> rxc </allcaps> t - > state \ _data . r . r2 . rx \ _crc \ _calc \ _bytes if ( ! <allcaps> rxc </allcaps> ) { cf \ _crc \ _start ( & t - > crc ) ; } the "" <allcaps> rxc </allcaps> "" is then used in a number of places later as well . normally one would either declare a local pointer to the value , or just simply a local temp variable to hold the value during computation , updating the global at the end of the routine . the major issue with a macro like this is that it is not scoped to this function . the "" <allcaps> rxc </allcaps> "" string remains defined as a macro after this function , and may unexpectedly replace any other occurrence of this symbol later in the file , should it ever appear ."
"cf should use larger cf_entity_id_t type as default <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf should use larger cf_entity_id_t type as default _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on wed <date> <time> <number> _original description_ : in the default configuration , the cf \ _entity \ _id \ _t is defined as a uint8 . while this is permissible per the spec , it means none of the "" variable size "" features implemented in the code will ever be used , because the size is always <number> . in particular the "" cf \ _getmemcpysize "" function will only ever be called with a size of <number> , which basically skips the loops in here . although the test do call it with a bigger sizes ( <number> ? ! <repeated> ) it does not seem to actually check the intended purpose of this routine , and the tests only appear to be included when <allcaps> endian </allcaps> ==\ _el ."
"cf should not depend on <allcaps> endian </allcaps> macro ( _el / _eb ) <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf should not depend on <allcaps> endian </allcaps> macro ( _el / _eb ) _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on wed <date> <time> <number> _original description_ : it is fairly trivial to write code that is endian - agnostic , or to check at runtime whether the processor should run these copy loops from high - to - low or low - to - high addresses . for example , in cf \ _memcpytobe : <hashtag> if </hashtag> <allcaps> endian </allcaps> = = \ _el dst + = ( dst \ _size - <number> ); while ( dst \ _size - - ) * dst - - = * src + + ; <hashtag> elif </hashtag> <allcaps> endian </allcaps> = = \ _eb src + = ( src \ _size - dst \ _size ) ; while ( dst \ _size - - ) * dst + + = * src + + ; <hashtag> else </hashtag> this could be replaced by a simple loop with value shifts rather than making assumptions about memory byte ordering . this would be more correct and portable . the problem with any <hashtag> if def </hashtag> blocks is that the disabled half of the block never gets executed or tested during the integration , until its ported to some other platform that requires that other block . there is also no guarantee or check that the el / eb branch actually do the same thing as prescribed , they can diverge ."
"cf has strange loop construct in cf_cfdp_cycletx <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf has strange loop construct in cf_cfdp_cycletx _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on wed <date> <time> <number> _original description_ : this is even noted in the comment that "" code reviewers will not like this "" . <repeated> which is certainly true . not sure how this made it through review : goto entry \ _jump ; /* code reviewers will not like this */ while ( ! args . ran \ _one & & c - > qs [ cf \ _q \ _pend ] ) { /* did not find anything on <allcaps> txa </allcaps> to run , so pop one off q \ _pend and try again . * keep going until cf \ _q \ _pend is empty or something is run */ transaction \ _t * t = container \ _of ( c - > qs [ cf \ _q \ _pend ] , transaction \ _t , cl \ _node ) ; cf \ _move \ _transaction ( t , cf \ _q \ _txa ) ; /* args is ok , still { c , <number> } */ entry \ _jump : cf \ _clist \ _traverse ( c - > qs [ cf \ _q \ _txa ] , cf \ _cfdp \ _cycletx \ _ , & args ) ; } using a goto like this is somewhat dangerous as it goes from outside to inside a loop . recommend to restructure the loop to use a more typical "" break "" statement ."
"cf printing of fixed - width integers <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf printing of fixed - width integers _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on wed <date> <time> <number> _original description_ : when printing an integer , cf does not use consistent format specifiers and patterns . for example , in the cf \ _checktables function : <allcaps> cfe </allcaps> \ _evs \ _sendevent ( cf \ _eid \ _err \ _init \ _tbl \ _check \ _rel , <allcaps> cfe </allcaps> \ _evs \ _eventtype \ _error , "" cf : error in <allcaps> cfe </allcaps> \ _tbl \ _releaseaddress ( check ) , returned 0x % 0 8 x"", status ) ; "" status "" is an int32 ( actually should be <allcaps> cfe </allcaps> \ _status \ _t , to be pedantic ) but the format code % 0 8 x accepts an unsigned int value . on some platforms ( e . g . <allcaps> rtems </allcaps> ) the "" int32 "" type is implemented as a "" long "" rather than an "" int "" so the implicit conversion from long - > unsigned int will trigger an error / warning . this is a portability problem . whenever fixed - width integers are passed to system library printf - style calls , the caller needs to be explicitly convert the value to the intended type using a cast , e . g . ( unsigned int ) status all printf - style calls ( events , syslog , etc ) should be updated accordingly ."
"cf tests for "" clist "" functions pointers may be used uninitialized warnings <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf tests for "" clist "" functions pointers may be used uninitialized warnings _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : in a number of the functions for the clist tests , the pointers are initialized only inside a for loop , with a random number of iterations . because of this compiler may generate a warning that these may be used uninitialized , as it cannot guarantee that the loop will have set these . although the code does have protection to ensure the loop count is never <number> , the compiler does not always recognize this . best practice is to initialize these pointers anyway - which will end up being a duplicate init , but it will squash the warning . test functions affected are : test \ _cf \ _clist \ _insertfront \ _whennodelistisgreaterthantwonodesandtheypointtocorrectnodesinsertnode test \ _cf \ _clist \ _insertback \ _whennodelistisgreaterthantwonodesandtheypointtocorrectnodesinsertnode test \ _cf \ _clistremove \ _removingheadsetsecondnodetoheadandupdatelastnode test \ _cf \ _clistremove \ _removinglastpointheadandnexttolasttoeachother test \ _cf \ _clistremove \ _removinganynodehasnodesprevandnextpointtoeachother test \ _cf \ _clist \ _insertafter \ _whenanynodesuccess \ _after \ _isinsertedafter \ _start test \ _cf \ _clist \ _traverse \ _whenlistismanynodeserrorin \ _fn \ _call test \ _cf \ _clist \ _traverse \ _whenlistismanynodessuccess"
"cf test reads beyond end of buffer <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf test reads beyond end of buffer _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : inside the "" test \ _cf \ _strnlen \ _when \ _end \ _isnot \ _null \ _returnlengthofgiven \ _s "" function , this calls "" cf \ _strnlen ( ) "" with a size of <number> , where the actual buffer size is only <number> . recommend to call cf \ _strnlen with a size of <number> , which would be correct ."
"cf tests use uninitialized values in buffers <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf tests use uninitialized values in buffers _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : many tests use a local stack buffer and pass a pointer to that buffer to a cf function . however , the tests often do not initialize the stack buffer , so the code under test may end up reading / using an uninitialized value as a result . all cf tests that create a "" dummy "" object on the stack should always at least memset that object to clear it , before calling the cf function , to achieve predictable / consistent behavior . for an example see test \ _cf \ _cfdp \ _findtransactionbysequencenumber \ _donotfindtransaction , in this case the "" expected \ _ptrs "" are initialized to refer to values inside "" dummy \ _c "" when the dummy \ _c object is not initialized ."
"cf test must not instantiate global variables in a header file <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf test must not instantiate global variables in a header file _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : the ' cf \ _test \ _utils . h ' instantiates ( rather than simply declaring ) a number of variables : lines <number> - <number> int32 result ; uint16 eventid ; line <number> : <allcaps> cfe </allcaps> \ _msg \ _setmsgtime \ _context \ _t context \ _cfe \ _msg \ _setmsgtime ; line <number> : <allcaps> cfe </allcaps> \ _msg \ _getmsgid \ _context \ _t context \ _cfe \ _msg \ _getmsgid ; line <number> <allcaps> cfe </allcaps> \ _evs \ _sendevent \ _context \ _t context \ _cfe \ _evs \ _sendevent ; line <number> : <allcaps> cfe </allcaps> \ _msg \ _getsize \ _context \ _t context \ _cfe \ _msg \ _getsize ; line <number> : type \ _of \ _context \ _cf \ _clist \ _traverse \ _t type \ _of \ _context \ _cf \ _clist \ _traverse ; preferably , tests should be designed to not need global state ( pass in the buffers as needed ) . if this is not possible , then for cases where these are actually accessed from multiple source files , the header should only declare the variable as "" extern "" and instantiate in the most appropriate . c file . note for the case of <allcaps> cfe </allcaps> \ _msg \ _getsize - - this does not appear to be accessed from more than one c file so it likely does not even need to be "" extern "" - it can be just scoped to the one file that uses it . the tests fail to link due to this problem , because of the multiple definitions of these variable names ."
"cf command tests need to use union when instantiating objects of type cfe_sb_buffer_t <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf command tests need to use union when instantiating objects of type cfe_sb_buffer_t _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : this is similar in nature to previous issue described in # <number> but in the "" cf \ _cmd \ _tests . c "" file . in this instance , command buffers are instantiated on the stack , but then cast to <code> . the stack variables are not correctly aligned for this cast to be valid , and many compilers will ( correctly ) trigger a warning / error about this . solution is to use a union to ensure alignment , where code like : cf \ _cmd \ _unionargs \ _t dummy \ _msg ; <allcaps> cfe </allcaps> \ _sb \ _buffer \ _t * arg \ _msg = ( <allcaps> cfe </allcaps> \ _sb \ _buffer \ _t <wink> & dummy \ _msg ; needs to become : union { cf \ _cmd \ _unionargs \ _t msg ; <allcaps> cfe </allcaps> \ _sb \ _buffer \ _t buf ; } dummy ; such that & dummy . buf can serve as the pointer to pass to a function accepting a <allcaps> cfe </allcaps> \ _sb \ _buffer \ _t * ."
"cf test incorrect initialization of "" dummy_channel "" pipe id <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf test incorrect initialization of "" dummy_channel "" pipe id _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : these three tests utilize a "" dummy \ _channel "" structure : <number> . test \ _cf \ _cfdp \ _disableengine \ _closesallactivefilesandnoopenplaybackdirectoriesresetsallqueuecountersdeletespipe <number> . test \ _cf \ _cfdp \ _disableengine \ _closesallactivefilesandanyopenplaybackdirectoriesresetsallqueuecountersdeletespipe <number> . test \ _cf \ _cfdp \ _disableengine \ _closesallactivefilesandallopenplaybackdirectoriesresetsallqueuecountersdeletespipe these are calling <code> and assigning that value to to the <code> member of the structure . however on caelum the pipe ids are actually <number> bits like other ids ( not <number> ) and when using strict id types , this assignment will ( correctly ) fail with a compiler error as being invalid . the test needs to be explicit that it is intentionally using an integer as a made - up pipeid and needs to use the conversion macro do to so ."
"cf test passing uninitialized buffer to input - only parameter <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf test passing uninitialized buffer to input - only parameter _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : the test function test \ _cf \ _cfdp \ _copydatatolv \ _failsbecause \ _len \ _iseqto \ _sizeof \ _dest \ _lv \ _data \ _returns \ _neg1 calls ' cf \ _cfdp \ _copydatatolv ' but passes an uninitialized buffer ( arg \ _data ) to the function when this parameter is documented as input only . the test passes because the value happens to be a "" do not - care "" in this case , so it does not affect the outcome / operation , but its bad practice to pass uninitialized data to an input , and also some compilers will generate a warning about this too . interestingly , the call to ' anybufferof \ _uint8 \ _withsize ' which would have initialized this , is commented out . this may be a simple mistake - uncommenting this line will resolve the error ."
"cf - incorrect cast in test functions <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf - incorrect cast in test functions _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : some cf test funtions incorrectly cast the pdu \ _header \ _t as a different type of header , for example inside ' test \ _cf \ _cfdp \ _recvidle \ _checkof \ _pdu \ _hdr \ _flags \ _type \ _returns \ _false \ _but \ _fdh \ _directive \ _code \ _isnot \ _pdu \ _metadata \ _sendeventand \ _increment \ _recv \ _error ' it does this : ( ( pdu \ _file \ _directive \ _header \ _t <wink> & dummy \ _msg . pdu \ _r \ _msg . ph ) - > directive \ _code = any \ _file \ _directive \ _t \ _except ( <allcaps> pdu </allcaps> \ _metadata ) ; the problem here is that the pdu \ _file \ _directive \ _header \ _t should \ _follow \ _ the standard pdu \ _header \ _t ( ph ) , as it is an extension of this header , it does not replace this header . as a result this is not writing the value in the location expected ."
"some cf tests appear to use the buffer from the previous test <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] some cf tests appear to use the buffer from the previous test _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : the following cf test functions do not instantiate their own message buffer , but rather use the value contained in the global <code> : <number> . test \ _cf \ _cfdp \ _r \ _processfd \ _nocrc \ _cached \ _pos \ _noteqto \ _offset \ _and \ _fret \ _noteqto \ _offset \ _sendeventsetandcounterrorreturn \ _neg1 <number> . test \ _cf \ _cfdp \ _r \ _processfd \ _nocrc \ _fret \ _noteqto \ _bytes \ _received \ _value \ _sendeventsetandcounterrorreturn \ _neg1 <number> . test \ _cf \ _cfdp \ _r \ _processfd \ _nocrc \ _cached \ _pos \ _gets \ _bytes \ _received \ _plus \ _offset \ _and \ _data \ _bytes \ _increasesby \ _bytes \ _received \ _return \ _0 <number> . test \ _cf \ _cfdp \ _r \ _processfd \ _nocrc \ _cached \ _pos \ _noteqto \ _offset \ _but \ _fret \ _iseqto \ _offset \ _cached \ _pos \ _gets \ _bytes \ _received \ _plus \ _offset \ _and \ _data \ _bytes \ _increasesby \ _bytes \ _received \ _return \ _0 this pointer likely points at a stack location from the \ _previous \ _ test function ( whatever last set the msg pointer ) . therefore the memory it points to at the time these tests execute is no longer valid . if anything writes to this memory , it will corrupt the local stack and potentially segfault / crash the test ."
"cf unit tests use incorrect dummy buffers <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf unit tests use incorrect dummy buffers _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : the cf unit tests contain an oft - repeated sequence to initialize a message pointer , for example : /* arrange */ pdu \ _r \ _msg \ _t dummy \ _ph ; int local \ _result ; cf \ _appdata . engine . in . msg = ( <allcaps> cfe </allcaps> \ _sb \ _buffer \ _t <wink> & dummy \ _ph ; this sequence is not valid for two reasons : <number> . because the <code> instance is not aligned appropriately to be cast to a <allcaps> cfe </allcaps> \ _sb \ _buffer \ _t * . this invalid cast generates a warning on many compilers . <number> . because the <code> instance does not contain any additional data beyond the pdu \ _header \ _t value . almost all cf calls will read beyond this header , depending on what the function call is , and some will write too . in the case of writing , this results in stack smashing , and the test may segfault / crash . recommendation is to create a union for the message buffer , which can address the alignment problem and also be used to reserve some extra space for data beyond the header that many calls do access . it looks like this was done at one point in the "" pdu \ _t "" type ( in cfdp . h ) but this was commented out . recommend reinstating this and using it in unit tests as it will be more correct ."
"cf_cfdp_playbackdir_ declared with fixed - length array parameters <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf_cfdp_playbackdir_ declared with fixed - length array parameters _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : typically , functions which accept a zero - terminated string are passed a pointer to the string . however , cf \ _cfdp \ _playbackdir \ _ is declared as accepting a fixed - length array buffer , where the length is specified as cf \ _filename \ _max \ _len . for example : cf \ _cfdp \ _playbackdir \ _ ( playback \ _t *p , const char src \ _filename [ cf \ _filename \ _max \ _len ] , const char dst \ _filename [ cf \ _filename \ _max \ _len ] , cfdp \ _class \ _t cfdp \ _class , uint8 keep , uint8 chan , uint8 priority , cf \ _entity \ _id \ _t dest \ _id ) the problem with declaring it this way is that it implies the full length is required , and should \ _only \ _ be called with a fixed - length array of that size . calling it with a shorter buffer , such as cf \ _filename \ _max \ _path , is invalid , even if the buffer is null terminated . in cf , this function is invoked from cf \ _cfdp \ _processpollingdirectories , with a buffer of size cf \ _filename \ _max \ _path - which is not the same size . this results in an error / warning on compilers that check for this type of thing . recommend to change this to a <code>"
"cf code style and coding standards compliance <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf code style and coding standards compliance _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : there are a number of style aspects of the cf source code that should be cleaned up to better comply with <allcaps> gsfc </allcaps> coding standards : - inconsistent indentation / spaces , brace / comment style , lots of lines with trailing whitespace . - inline variable instantiations - variables and other symbols at global scope not properly named recommendations : - make a one - time pass through "" clang - format "" using same rules as applied to <allcaps> cfe </allcaps> framework to clean up whitespace - all local variables should be declared at function start - all global variables should be qualified with the app prefix ( e . g . <code> ) and ideally all application state should be consolidated into a single top - level global variable ( such that it can be memset to zero if / when application restarts ) ."
"cf c99 compliance and use of packed structures <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf c99 compliance and use of packed structures _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : cf currently uses the ' cf \ _pack ` attribute on many of its structure types , which translates to the gcc "" \ _ \ _attribute \ _ \ _ ( ( packed ) ) "" extension , without any provision for other compilers . this is a nonstandard / compiler - specific extension feature and makes the code <allcaps> not </allcaps> c99 - compliant . attempting to build this code with non - gcc compiler will likely fail as a result . application source code should be limited to standard c99 features , and should not rely on vendor - specific extensions ."
"cf_traversehistory string buffer handling <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf_traversehistory string buffer handling _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : this issue was originally reported by iv & v , creating jira issue to track its disposition and resolution . function cf \ _traversehistory ( ) in cf \ _utils . c in the cf app source code , writes some text to the buffer ' linebuf ' on line <number> . this buffer , however , is overwritten on line <number> before it is written to the file descriptor on line <number> . it is questionable whether this was the desired behavior ."
"unreachable code block in check for cf_send_no_msg <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] unreachable code block in check for cf_send_no_msg _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : this issue was originally reported by iv & v , creating jira issue to track its disposition and resolution . the code within the if block in cf \ _cfdp \ _s . c in the cf app source code , namely lines <number> - <number> will never be executed . the if block checks variable ' status ' if it is cf \ _send \ _no \ _msg on line <number> , this variable originates from the return value of cf \ _cfdp \ _sendfd ( ) , which can only return values cf \ _send \ _success and cf \ _send \ _error ."
"unreachable code block in check for cf_send_error <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] unreachable code block in check for cf_send_error _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : this issue was originally reported by iv & v , creating jira issue to track its disposition and resolution . the code within the <allcaps> else if </allcaps> block in cf \ _cfdp \ _s . c in the cf app source code , namely lines <number> - <number> will never be executed . the <allcaps> else if </allcaps> block checks variable ' sret ' if is is cf \ _send \ _error on line <number> , this value originates from the return value of <allcaps> cfdp </allcaps> \ _s \ _sendeof ( ) which can only return values cf \ _send \ _success and cf \ _send \ _no \ _msg ."
"cf use of static_cast without <allcaps> null </allcaps> checks <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf use of static_cast without <allcaps> null </allcaps> checks _originally submitted by_ : hickey , joseph p . ( <allcaps> gsfc </allcaps> - <number> ) [ <allcaps> vantage systems inc </allcaps> ] on tue <date> <time> <number> _original description_ : this issue was originally reported by iv & v , creating jira issue to track its disposition and resolution . there are <number> instances in the <allcaps> cfs cf </allcaps> app source code in which the <allcaps> pdu </allcaps> hedaer pointer ' ph ' can be a <allcaps> null </allcaps> value from a prior function call , and then it is passed into the function <allcaps> static </allcaps> \ _cast ( ) where it is eventually dereferenced without any checks . these calls to <allcaps> static </allcaps> \ _cast ( ) pass ' ph ' to cf \ _headersize ( ) which dereferences the pointer . cf \ _cfdp . c line <number> cf \ _cfdp . c line <number> cf \ _cfdp . c line <number> cf \ _cfdp . c line <number> cf \ _cfdp \ _r . c line <number> cf \ _cfdp \ _s . c line <number> cf \ _cfdp . c line <number>"
"cf method cf_headersize returns an int , but it should be a size_t <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf method cf_headersize returns an int , but it should be a size_t _originally submitted by_ : gibson , alan s . ( <allcaps> gsfc </allcaps> - <number> ) on mon <date> <time> <number> _original description_ : the cf \ _headersize function determines the header size of the given pdu \ _header \ _t and returns this value . however , it is using an int type as the return , but it should never be able to be negative and it returns a sizeof value . there is no reason for it to be an int return type ; initial unit tests did show that it can technically return values that are far too large and negative values that will crash the app . it should at a minimum be changed to a size \ _t , but recommend something more like a uint8 as the practicality of it returning something larger than <number> is not likely to happen ."
"cf method cf_cfdp_sendmd cannot get negative to return from cf_cfdp_copydatatolv <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf method cf_cfdp_sendmd cannot get negative to return from cf_cfdp_copydatatolv _originally submitted by_ : gibson , alan s . ( <allcaps> gsfc </allcaps> - <number> ) on wed <date> <time> <number> _original description_ : two times a ret value from cf \ _cfdp \ _copydatatolv is checked to see if it is negative ( < <number> ) and neither call appears to every be able to return a negative value . even the comments in the code allude to this fact : /* should not happen , since filename lengths are checked above */ _ ( link removed ) _ _ ( link removed ) _ if this cannot happen then there is no need for the code to check for it ? unsure how to proceed with this , but it cannot be tested with unit tests ."
"cf method cf_cfdp_receivemessage will always segfault on line <number> <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf method cf_cfdp_receivemessage will always segfault on line <number> _originally submitted by_ : gibson , alan s . ( <allcaps> gsfc </allcaps> - <number> ) on thu <date> <time> <number> _original description_ : line <number> : + + cf \ _appdata . hk . channel \ _hk [ t - > chan \ _num ] . counters . recv . dropped ; the only path to get into this line runs through an if ( t ) failure , which means t will always be <allcaps> null </allcaps> at this point . if it is changed to just chan \ _num ( a variable defined within the function ) it will not fail . however , it is not known if that is the intent . there is a previous <code> block that redefines the variable t , from a transaction \ _t * to a transaction \ _t , but its scope is only within that <code> block . thus when we reach line <number> , t is the transaction \ _t * type and will always be <allcaps> null </allcaps> . _ ( link removed ) _"
"cf method cf_assert call branches cannot be tested during unit testing <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf method cf_assert call branches cannot be tested during unit testing _originally submitted by_ : gibson , alan s . ( <allcaps> gsfc </allcaps> - <number> ) on wed <date> <time> <number> _original description_ : calls to cf \ _assert ( ) cannot be stubbed by unit testing . the reasons : <number> . cf \ _assert uses assert which will kill the running process and subsequently the unit test runner when called by code under test . <number> . cf \ _assert can be stubbed a . the stub cannot stop the return to the code under test . b . the value required to cover the branch will cause a segfault upon return - - as the intent of cf \ _assert is to kill the app before it takes cfs with it . c . there is currently no allowable way to have these branches tested during automated runs . d . it is possible to run ad hoc tests to show the assert occurs , but the unit test will stop and not return to the original test code as the automated tests do ."
"cf cf_cfdp_msgoutget method double checks msg for <allcaps> null </allcaps> <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf cf_cfdp_msgoutget method double checks msg for <allcaps> null </allcaps> _originally submitted by_ : gibson , alan s . ( <allcaps> gsfc </allcaps> - <number> ) on mon <date> <time> <number> _original description_ : the function cf \ _cfdp \ _msgoutget in cf \ _cfdp . c checks <code> ( line <number> ) as a top if block ; however , it then checks it again as part of the if block <code> ( starting on line <number> < - yep not a typo line <number> and <number> , funny ) , but there is nothing in between that could change it . it would appear that this check in the second <code> is not required ."
"cf method cf_cfdp_msgoutget returns 0x 1 0 when it should be <allcaps> null </allcaps> <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf method cf_cfdp_msgoutget returns 0x 1 0 when it should be <allcaps> null </allcaps> _originally submitted by_ : gibson , alan s . ( <allcaps> gsfc </allcaps> - <number> ) on fri <date> <time> <number> _original description_ : cf \ _cfdp \ _msgoutget has a path where it will return a 0x 1 0 if the cf \ _appdata . engine . out . msg is <allcaps> null </allcaps> . there are two if blocks after the msg <allcaps> null </allcaps> verification that if neither come back true the assignment on line <number> of cf \ _cfdp . c : <code> will make ret = = 0x 1 0 , not <allcaps> null </allcaps> . the description of the return statement shows that this is not correct : <code>"
"cf method cf_cfdp_sendnak ph value can never be <allcaps> null </allcaps> <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf method cf_cfdp_sendnak ph value can never be <allcaps> null </allcaps> _originally submitted by_ : gibson , alan s . ( <allcaps> gsfc </allcaps> - <number> ) on fri <date> <time> <number> _original description_ : the cf \ _cfdp \ _sendnak function receives it ' s header from <code> but even when cf \ _appdata . engine . out . msg = = <allcaps> null </allcaps> , ph is 0x 1 0 . the check if ph is <allcaps> null </allcaps> ( <code> ) will never be able to fire . the check should be changed to see if cf \ _appdata . engine . out . msg is <allcaps> null </allcaps> instead ; this will ensure that if / when it is <allcaps> null </allcaps> a ph value of 0x 1 0 will not be used . note : this is probably not possible in the field , a "" nack "" should never be able to be returned without msg being populated , but in that case there is no reason to verify ph is not <allcaps> null </allcaps> ."
"review use of ' unlikely ' <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] review use of ' unlikely ' _originally submitted by_ : gibson , alan s . ( <allcaps> gsfc </allcaps> - <number> ) on fri <date> <time> <number> _original description_ : in cf \ _assert . h the <allcaps> ndebug </allcaps> <hashtag> if def </hashtag> runs in ' <allcaps> buildtype </allcaps> = release ' mode which replaces cf \ _assert with if ( unlikely ( (x ) ) ) cf \ _handleassert ( \ _ \ _file \ _ \ _ , \ _ \ _line \ _ \ _ ) ; this line is incorrect , because the other path uses assert ( x ) however , assert does nothing when true , the unlikely path causes assert when true . this needs updated with ( ! x) also , there are calls to cf \ _assert using "" short - circuit "" boolean statements , these do not "" short - circuit "" because of the unlikely . unlikely is most commonly defined as : \ _ \ _builtin \ _expect ( ! <repeated> (x ) , <number> )"
"cf - <number> having a problem building unit tests with unlikely ( (x ) ) <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf - <number> having a problem building unit tests with unlikely ( (x ) ) _originally submitted by_ : gibson , alan s . ( <allcaps> gsfc </allcaps> - <number> ) on mon <date> <time> <number> _original description_ : when building with <code> and <code> defined i get a <code> error . determine if we need to keep <code> and if so , what needs done to get it to build with the unit tests ."
"cf doxygen documentation needs updates <section> _imported from_ : [ <allcaps> gsfccfs </allcaps> - <number> ] cf doxygen documentation needs updates _originally submitted by_ : timmons , elizabeth j . ( <allcaps> gsfc </allcaps> - <number> ) on wed <date> <time> <number> _original description_ : the cf doxygen documentation is inaccurate for v3 . <number> ."
"fix # <number> , initial pass through the format tool used by <allcaps> cfe </allcaps> framework this commit adjusts all white space in the cf source code to adhere to the rules applied to the other <allcaps> cfe </allcaps> framework components . this affects many lines , but only changes white space in the source files . no functionality changes are included here . fixes # <number>"
"cf source code needs format / whitespace scrub in the cf - <number> . <number> release candidate , the source code files have many formatting discrepancies from the <allcaps> cfe </allcaps> / <allcaps> cfs </allcaps> recommendations . before continuing development with other fixes , the source should be sent through the "" clang - format "" tool using the same rules as used for the <allcaps> cfe </allcaps> framework . this will establish a baseline for fixing other issues reported by cf users thus far . since this is likely to affect many lines , it must be done as an isolated commit , before any other code changes are done , as it will not be easy to merge / rebase with this type of change ."
<allcaps> summary </allcaps> : update with various fixes for stakeholders this summary commit includes a number of minor updates / fixes from initial users / stakeholders of the cf - <number> . <number> release candidate . this pr is intended to bring the public github repo into sync with the version of cf that has been deployed by some internal users . it includes a number of minor updates from the original cf - <number> open source release .
"compile errors with latest cfs it appears that the changes made in <url> result in cf no longer compiling due to depreciated code being removed . i am working on altering the cf source to get it to compile with these changes , but wanted to ensure that this was not already in progress ."
"length error for little - endian <url> the line above works for big - endian systems , however not consistent with the line below for little - endian systems . <code> calculated and checked below line w . r . t . big - endian , but the same calculation and check done above w . r . t . endianness of system . running the app in a little - endian system results in length error for check <code> after the line above . <url> <section> cf_app . c <hashtag> l 1023 </hashtag> : previous version : <code> next version : <code>"
"null pointer dereference in cf_callbacks . c <url> after the <code> check , the code continues with the check <code> . if <code> is <code> , accessing <code> causes etiher exception or invalid check . ` ` <code> cf_error ) { cf_appdata . hk . chan [ chan ] . successcounter + + ; queueentryptr = cf_findpbnodebytransnum ( chan , cf_pb_activeq , transinfo . trans . number ) ; if ( queueentryptr ! = <allcaps> null </allcaps> ) { queueentryptr - > status = cf_stat_success ; } } if ( queueentryptr - > preserve = = cf_delete_file ) { os_remove ( & transinfo . md . source_file_name [ <number> ]); } ` ` `"
"failures in sending files from cfs and ground software hi , about <number> months ago , i asked the same question , but i did not get any responses . so i am asking the question again . i have been using cf app ' s version <number> . i understand that <allcaps> nasa </allcaps> is going to release an updated version of cf app with major changes sometime next year , but i need to resolve the following issue soon . whenever i tried to send a file ( size of <number> bytes ) from cfs ( version <number> ) to ground software ( cosmos or yamcs ) , i can send only <number> times . here ' s example with sending a small size file ( it has <number> bytes ) <number> times in a row . at the 4 th try , cfs prints out "" started "" , but no "" success "" message after that . <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : outgoing trans started <number> . 2 4 _1 , src / cf / test . txt <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : outgoing trans success <number> . 2 4 _1 , src / cf / test . txt <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : outgoing trans started <number> . 2 4 _2 , src / cf / test . txt <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : outgoing trans success <number> . 2 4 _2 , src / cf / test . txt <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : outgoing trans started <number> . 2 4 _3 , src / cf / test . txt <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : outgoing trans success <number> . 2 4 _3 , src / cf / test . txt <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : outgoing trans started <number> . 2 4 _4 , src / cf / test . txt <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : cf : playback file cmd error , file is already pending or active <annoyed> cf / test . txt * if you try to send a file bigger than <number> bytes or so , this problem can occur at the second or 3 rd try . * when i try to send a file with more than <number> bytes to ground software , it does not work at all . * i experimented with a file that has <number> bytes . cfs was able to send the file to ground software , but with a file with <number> bytes , it could not . also after sending the <number> byte file , cfs can not send another file regardless of the file size . sending a file from ground software to cfs works fine , but cfs can not finish sending a file from cfs to ground software after that . overall , it is hard to predict what cfs would do when it comes to sending a file to ground software . did anyone have the same issue as me ? thanks , harry kim"
"file size limitation when sending files from cfs and ground software whenever i tried to send a file ( size of <number> bytes ) from cfs ( version <number> ) to ground software ( cosmos or yamcs ) , i can send only <number> times . at the 4 th try , cfs prints out "" started "" , but no "" success "" message after that . <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : outgoing trans started <number> . 2 4 _2 , src / cf / cf_test . txt <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : outgoing trans success <number> . 2 4 _2 , src / cf / cf_test . txt <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : outgoing trans started <number> . 2 4 _1 , src / cf / cf_test . txt <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : cf : playback file cmd error , file is already pending or active <annoyed> cf / cf_test . txt if you try to send a file bigger than <number> bytes or so , this problem can occur at the second or 3 rd try . also when i try to send a file with more than <number> bytes to ground software , it does not work at all . i experimented with a file that has <number> bytes and cfs was able to finish the job , but with a file with <number> bytes , it could not finish the job . also after sending the <number> byte file , cfs can not send another file regardless of the file size . sending a file from ground software to cfs works fine , but cfs can not finish sending a file from cfs to ground software after that . overall , it is hard to predict what cfs would do when it comes to sending a file to ground software . did anyone have the same issue as me ?"
"sending a text file from cosmos to cfs has failed due to size mismatch . hello , to test if i can send a simple text file from cosmos to cfs , i used a text file that contains one sentence "" this is a test file . "" i had the following error while testing with cf v6 . <number> although i did not have this error with v6 . <number> . <allcaps> evs </allcaps> port1 <number> / <number> / cf <number> : cfdp_engine : file size mismatch - - <number> / <phone> ( eof / received ) ) . this error was from apps / cf / fsw / src / <allcaps> pri </allcaps> / a <elongated> . c line <number> boolean aaa__is_file_size_valid ( <allcaps> machine </allcaps> * m ) { trans_status * mp = & ( m - > publik ) ; /* useful shorthand */ /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */ if ( mp - > received_file_size > m - > eof . file_size ) { e_msg__ ( "" cfdp_engine : file size mismatch - - % lu / % lu "" "" ( eof / received ) ) \ n "" , m - > eof . file_size , mp - > received_file_size ) ; return ( no ) ; } return ( <allcaps> yes </allcaps> ); } any idea why this error occurred ? thanks in advance ."
"cf is incompatible with recent <allcaps> osal api </allcaps> changes the cf_playback . c file calls the os_opendir , os_readdir , and os_closedir functions , which were removed in favor of the os_directoryopen , os_directoryread , and os_directoryclose functions . this is regarding <allcaps> osal </allcaps> <number> . <number> - bv ( git tag ) . i expect to see other issues as i make fixes to pass unit testing . i will post them here ."
"buffer overflow in machine_list . c <code> assume max_concurrent_transactions = <number> on the first iteration of the loop , m_is_this_slot_in_use [ i ] will access array index <number> , on the second pass array index <number> , and on the third pass the out - of - bounds index <number> , causing a buffer overflow . the following simple fix will short - circuit the while loop , preventing the buffer overflow : <code>"
"<allcaps> cfdp </allcaps> setup between two cfs projects hi , i have setup two cfs projects on a linux vm with cf running on each one with ci and to to test file transfer between the two projects as shown below : cfdp_issue_diagram <img> when i try to transfer file / cf / cf . so from one side to the other ( destination file name / cf / cf_sent . so ) i get the following result ( file sent from ppesim - cfs to pdpmep - fsw ) : <allcaps> cfdp </allcaps> file transfer attempt <img> when i change the code at cf_app . c line <number> from : cf_app_c_ln1030_changed <img> to : cf_app_c_ln1030 <img> the received packet ' s length is shown to be correct but the file still does not make it across . if i attempt to run the unchange cf code between the linux vm ( little endian machine ) and a powerpc ( big endian ) i get a segmentation fault ( most likely because the powerpc is running the cfs project as root which i confirmed by running the receiving end of the vm version as sudo and i got a segmentation fault as well ) . to start , is there anything i am missing with setting up two cf applications this way ? or is there any more information you might need me to provide ? thanks , ashraf ."
