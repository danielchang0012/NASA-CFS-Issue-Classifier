text
"fix # <number> , refactor <code> to remove multiple returns testing performed * * github ci actions all passing successfully ( incl . build + run , unit / coverage tests etc . ) . <section> no change to logic / behavior <section> avi weiss <user>"
refactor multiple return statements in <code> code snips * * <url> <section> single entry / exit point . <section> avi weiss <user>
"fix # <number> , convert <code> return codes and variables to <code> testing performed * * github ci actions all passing successfully . <section> no change to behavior . <code> is more expressive and improves consistency with cfe / cfs . <section> avi weiss <user>"
lc <code> return codes and variables should be converted to <code> expected behavior * * use the more expressive <code> and improve consistency with cfs . <section> avi weiss <user>
"fix # <number> , split configuration use the "" generate_config_includefile "" for all headers that can come from alternate source ( e . g . generated or mission - supplied ) . fixes # <number> <section> build and run lc in variety of configurations <section> better organization , more modular <section> debian <section> see nasa / hs # <number> for reference - this is basically the same change applied to lc , making it consistent . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use separate dispatcher for messages isolate the message verification and dispatch from the general message processing . functions in the "" cmds "" file now strictly handle the command content , and do not get involved in general validation . fixes # <number> <section> build and run <allcaps> cfe </allcaps> with lc , sanity check operation <section> no impact , just improves source unit organization <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use payload sub - structure put all cmd / tlm message content in a sub - structure named "" payload "" fixes # <number> <section> build and run <allcaps> cfe </allcaps> with lc , sanity check <section> no impact <section> debian <section> joseph hickey , vantage systems , inc ."
"split "" platform_cfg "" into external and internal components currently , all configurable items for the app are contained in a single <code> header file . this contains macro definitions that affect both the internal operation of the application ( such as operational limits ) as well as the external interface in <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> and table files . <section> split this header into two components , one that contains only public items ( i . e . those that affect <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> / table definitions ) and one that contains private / internal items that are only used within the local application code and do not affect the interface . <section> mainly a scoping concern , separate files for separate scopes . these files could also be generated in the future , but scope still needs to be consistent . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use cfe_msg_ptr macro and other name updates follow naming conventions for cmd / tlm data structures and use provided macros where appropriate . fixes # <number> <section> build and sanity check lc , run all tests <section> none <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use generated stubs separate the global variables into separate stub source units , then re - run the stub generator for all internal apis . the committed result here is the exact output of the tool , unmodified . fixes # <number> <section> build and run lc with all tests <section> none <section> debian <section> joseph hickey , vantage systems , inc ."
"use generated stubs lc unit testing currently uses a set of stubs for its internal units that are not generated by the tool <section> use the generated stubs directly whenever possible , as this makes future maintenance easier - when an <allcaps> api </allcaps> changes , just re - run the generator tool to update the stubs . <section> this requires some additional separation of items - global variable stubs should be in a separate compilation unit , as the tool does not generate these . <section> joseph hickey , vantage systems , inc ."
"apps should check / verify msg <allcaps> before </allcaps> calling handler this remains an area with coding pattern discrepancies between <allcaps> cfe </allcaps> core and <allcaps> cfs </allcaps> apps , and also different between <allcaps> cfs </allcaps> apps to some degree as well . the <allcaps> cfe </allcaps> core and sample app ( which is supposed to be the example of "" best practice "" ) do validation on the message before calling the handler . for example : <code> this is different from lc , which does a similar check , but done inside each handler , for example : <url> <section> <allcaps> cfs </allcaps> apps should follow the best practices / patterns set forth in the framework code . ( there are reasons for the pattern being recommended practice ) <section> the pattern recommended in the framework ( checking before calling , as done in sample_app ) has several advantages : <number> . each command handler function has a unique type - safe prototype , that cannot be interchanged with another handler without triggering a type mismatch compiler error . <number> . all typecasting / conversions are confined to one place , and it is nearby to the place that the verification is done - which eases maintainability because check and conversion are all in close proximity and any mismatches will be more visible . <number> . it spreads out the cyclomatic complexity . in the non - recommended pattern , there is a case where the length check fails , and the entire handler is essentially skipped . this adds to the cyclomatic complexity of every handler . in the recommended pattern , those checks are done prior to the invocation of the handler , so the handler can focus solely on its intended purpose - doing the command itself . <section> joseph hickey , vantage systems , inc ."
"all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message should put content in a "" payload "" sub - structure to match the patterns used in <allcaps> cfe </allcaps> and other modules , all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message definitions should put the content ( non - header ) parts into a separate struct called "" payload "" . <section> separate message content into a sub structure called "" payload "" . <section> this is benefit to tooling that can use the presence of this field to identify where the actual content starts ( e . g . something like <code> would work and be correct , as opposed to checking <code> which may not actually reflect where the content starts due to possible compiler - added padding between them ) . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , combine consecutive , mutually - exclusive status checks testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to logic . single evaluation instead of twice in this if block now . <section> avi weiss <user>"
"combine consecutive , mutually - exclusive status checks code snips * * <url> <section> combine into an <code> / <code> . <section> avi weiss <user>"
"fix # <number> , add break to default case of switch in lc_verifymsglength testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> purely a style / guidelines issue for consistency and future maintenance . no change to logic ( the <code> case would fall through to the bottom and exit the switch block even without a <code> statement ) . guidelines and cfs consistency dictate that all switch cases ( including <code> ) should be terminated by an unconditional <code> statement . <section> avi weiss <user>"
add break ; for switch default case in lc_verifymsglength ( ) code snips * * <url> <section> all switch cases ( including <code> ) should be terminated by an unconditional <code> statement . <section> avi weiss <user>
"add lc_sample_ap_all_mid to use a cmd w / no parameters to process all watchpoints lc_sample_ap_mid is out - of - family with *most* mids for doing simple processing ( like send_hk , etc ) in that it has parameters . this is fine until you try to send it from something like sch_lab which does not support command parameters . <section> add a simple lc_sample_ap_all_mid w / no parameters ( size <number> ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , simplify table defs remove use of compiler extension flag , simplify definition fixes # <number> <section> build and run all tests <section> no impact <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , update global symbol names for consistency this is a simple search and replace of nonconformant symbol names . mapping from the old symbol name to the new symbol name is put behind a deprecated compatibility switch fixes # <number> <section> build and run all unit tests <section> none - just a simple symbol rename <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , correct use of union type use <allcaps> iso c </allcaps> standard value conversion , do not rely on platform - dependent union access . fixes # <number> <section> build and run all tests , confirm <code> call is still working as expected . <section> none <section> debian <section> assigning ( by value ) between signed and unsigned values is defined by <allcaps> iso c </allcaps> and results are specified . in contrast , writing to one union member and reading from another does not have specified results ( although on a twos complement machine with typical implementation it happens to produce the same result . <repeated> ) <section> joseph hickey , vantage systems , inc ."
"improper use of unions in lc_getsizedwpdata the <code> function is not using the <code> union properly . it is writing to one member and then reading from another , different member of the same union . this is "" type punning "" and may not work in an optimized build . the new version of cppcheck reports this issue . <section> run cppcheck workflow to see issue . no known way to actually produce a failure though , as most platforms will behave as the code expects it to , its just not guaranteed to work . <section> should not read from a different union member than was written to . <section> this writes to <code> but then reads from <code> : <url> additionally , many cases write to <code> but only <code> is read here at the end : <url> <section> n / a <section> this code does work as intended but is not necessarily safe / portable across platforms in its current form , particularly when optimization is enabled . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , nan check use c99 standard math . h macros to check for nan and / or infinity . note that in addition to being platform independent , in an optimized build this will likely invoke a much more efficient <allcaps> cpu </allcaps> instruction to do the test as opposed to the bit - masking that was done before . fixes # <number> <section> build and run all tests <section> no impact to behavior . <section> debian <section> c99 provides standardized macros for these nan / infinity checks in <code> <section> joseph hickey , vantage systems , inc ."
"correct naming convention inconsistencies the following identifiers used in lc do not correctly follow the naming conventions for <allcaps> cfe </allcaps> / <allcaps> cfs </allcaps> symbols : - <code> : should be <code> , because the camelcase version is <code> , thus "" perm "" and "" off "" are separate words . - <code> : should be <code> , because its used as an enum and the other labels all start with <code> prefix - <code> : should be <code> , for the same reason as lc_action above . - <code> : should be <code> , same reason - <code> : should be <code> <section> rename these symbols for consistency . <section> these name mismatches become relevant when using generated header files . <section> joseph hickey , vantage systems , inc ."
"remove use of compiler extension in lc table file definitions the <code> is a <allcaps> gnu </allcaps> compiler extension flag and such constructs should be avoided in portable code . <section> remove <section> this flag is only in there to avoid a warning due to the use of <code> - but this object should not be static to begin with , then everything works without the use of special flags . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , correct buffer overflows in ut the default size of the "" eventtext "" string is <number> , but the unit test had hard coded string sizes of <number> chars , which will overflow the buffer . use "" sizeof "" operator to adjust to the actual size of the destination to correct the issue . fixes # <number> <section> steps taken to test the contribution : <number> . build steps ' . <repeated> ' <number> . execution steps ' . <repeated> ' <section> no more buffer overflow <section> debian bookworm <section> joseph hickey , vantage systems , inc ."
"fix # <number> , replace quotes with angle brackets in / inc fixes # <number> - replace quotes with angle brackets in / inc files . <section> <number> . performed build verification testing <number> . ci <section> dan knutsen <allcaps> nasa </allcaps> goddard"
replace quotes with angle brackets in <hashtag> include </hashtag> statements within / inc describe the solution you ' d like quotes should be replaced with angle brackets in <hashtag> include </hashtag> statements that reside in the / inc location . this will ensure that the preprocessor selects the files pre - designated to override the default files contained within the open source cfs build release - as opposed to selecting those located in the same directory . requester info dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , make lc_tbl . h public ci <section> dan knutsen <allcaps> nasa </allcaps> goddard"
make lc_tbl . h public lc_tbl . h defines macros used in table generation and should be made public . <section> dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , adds fsw / src to app target - fixes # <number> <section> make install <section> successful cert_testbed build <section> - ubuntu <number> <section> n / a <section> n / a <section> justin figueroa , vantage systems"
"add fsw / src to app target cannot build cert_testbed . <code> is needed to build tables , etc . revise cmakelists . txt <section> build in cert_testbed <section> error - free build <section> if applicable , add references to the software . <section> - ubuntu <number> <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , deletes duplicate header files in src - fixes # <number> <section> lcov make install <section> no impact to behavior <section> ubuntu <number> <section> n / a <section> if included , identify any third party code and provide text file of license <section> justin figueroa , vantage systems"
"delete duplicate headers files in src there are duplicate files "" fsw / src / lc_msg . h "" and "" fsw / src / lc_msgdefs . h "" that need to be removed . <section> view fsw directory <section> single file of each <section> if applicable , add references to the software . <section> - ubuntu <number> <section> bug introduced in <url> <section> justin figueroa , vantage systems"
"fix # <number> , moves interface definition files to inc - fixes # <number> <section> make install lcov <section> no expected behavior change . <section> - ubuntu <number> <section> n / a <section> if included , identify any third party code and provide text file of license <section> - justin figueroa , vantage"
"move interface definition files to "" inc "" location the interface definition files of all open source apps currently exist in the "" src "" directory . <section> create an "" inc "" dir to go with the "" src "" dir . move the interface definitions into this location : "" _msg . h "" , "" _msgdefs . h "" , "" _tbldefs . h "" , and "" _events . h "" . consider moving header files in both "" platform_inc "" and "" mission_inc "" to "" inc "" <section> leaving as is . <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , remove stray refs to old event type constants testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no impact on behavior . <section> avi weiss <user>"
"fix # <number> , externalize symbols in lc_test_utils . h make the table objects in this header "" extern "" and instantiate them in the c file instead . this solves the duplicate symbol linker errors . fixes # <number> <section> build and run all tests <section> tests will build , link , and execute successfully <section> ubuntu <number> <section> will submit a separate issue to consider adding <code> to the <allcaps> cfs ci </allcaps> workflows , as it masks this issue in ubuntu <number> . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , move variables declared mid - function to the top testing performed * * github ci actions all passing successfully . <section> all variables declared top of function as per cfs conventions / guidelines . <section> avi weiss <user>"
"fix # <number> , convert lc state macros to enums testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no impact on behavior . enums improve type - safety and ease debugging . <section> avi <user>"
"fix # <number> , apply consistent event id names to common events testing performed * * only github ci actions . <section> no impact on code behavior ( no logic changes ) . consistent event id names for the events which are common to all / most cfs components and apps will improve consistency and ease make code review / debugging easier . <section> avi weiss <user>"
"fix # <number> , remove redundant / inconsistent comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . testing performed * * none ( comment and whitespace changes only ) . <section> no impact on behavior . these updates will reduce clutter and inconsistency in the code , improving readability . <section> <user>"
"redundant comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . expected behavior * * remove redundant comments to reduce clutter and inconsistency in the code , and improve readability . <section> <user>"
"fix # <number> , remove ' return ; ' from last line of void functions . testing performed * * none , prior to submission . <section> no impact on behavior . <section> <user>"
"remove "" return ; "" from last line of void functions describe the solution you ' d like * * remove <section> <user>"
"fix # <number> , remove unnecessary parentheses around return values . fixes # <number> removes parentheses in return statements in lc that return a single value / term . this is aligns these return statements with the predominant style of cfs . <section> none , prior to submission of the pull request . <section> no impact on behavior . <section> <user>"
scrub use of ( ) in return statements reporter info * * <user>
"fix # <number> , removed mentions of <allcaps> asist </allcaps> from documentation fix # <number> , removed all mentions of <allcaps> asist </allcaps> from comments <section> n / a <section> no impact to behavior <section> n / a <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> # <number> , code coverage improvements - fix # <number> - fix # <number> <section> ci <section> none , just eliminates redundant conditions <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove cfe_psp_memset use for addresses in <allcaps> ram </allcaps> - fix # <number> <section> ci <section> none , just removes unnecessary <allcaps> api </allcaps> dependence <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> # <number> , add requirements rationale and clarify event message limit requirement - fix # <number> - fix # <number> <section> na - requirements updates only <section> none <section> na <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , added codeql - build . yml <section> * x] i reviewed the [ contributing guide <url> . * [x ] i signed and emailed the appropriate contributor license agreement to <email> and copied <email> . describe the contribution a clear and concise description of what the contribution is . added codeql to github workflows fix # <number> testing performed pushed to branch checked codeql ran successfully expected behavior changes no impact to behavior system ( s ) tested on browser additional context depends on <url> to run successfully third party code if included , identify any third party code and provide text file of license contributor info - all information <allcaps> required </allcaps> for consideration of pull request full name and company / organization / center of all contributors ( "" personal "" if individual work ) note <allcaps> cla </allcaps> ' s apply to software contributions ."
add codeql to repository use codeql for continuous integration <section> add codeql workflow <section> none <section> add any other context about the feature request here . <section> haven carlson
"fix # <number> # <number> , resolve static analysis warnings - fix # <number> - fix # <number> <section> ci + static analysis run <section> none , just squashes static analysis warnings <section> - hardware : vm - os : ubuntu <number> - versions : bundle main + apps + related static analysis resolution branches <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , resolve strict cppcheck style warnings - fix # <number> <section> ci <section> nothing , just squashes warnings <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
fill in missing requirements rationale there ' s a handful of missing requirements rationale . add . imported from <allcaps> gsfccfs </allcaps> - <number>
"resolve static analysis issues relative to unit tests many actual code issues ( uninitialized variables , buffer overruns , etc ) identified via static analysis in the unit tests . all actual "" bugs "" should be resolved . imported from <allcaps> gsfccfs </allcaps> - <number>"
"revisit coverage , update to <percent> code / branch or write issues where unreachable <section> other coverage failures : failure : coverage cs lines <percent> functions <percent> branches <percent> failure : coverage ds lines <percent> functions <percent> branches <percent> failure : coverage fm lines <percent> functions <percent> branches <percent> failure : coverage hs lines <percent> functions <percent> branches <percent> failure : coverage md lines <percent> functions <percent> branches <percent> failure : coverage sc lines <percent> functions <percent> branches <percent> fix where possible , elsewise issues should document all uncovered lines / branches and disposition ( why it ' s ok as - is ) imported from <allcaps> gsfccfs </allcaps> - <number>"
app requirement issues <number> . lc3002 . <number> & lc3002 . <number> - don ’ t see where event filter is able to be specified in action point or watchpoint definition tables . <number> . ds8000 – <allcaps> ds hk </allcaps> packet <number> . fm4000 – <allcaps> fm hk </allcaps> packet <number> . ds3000 - requirement incomplete imported from <allcaps> gsfccfs </allcaps> - <number>
"lc has duplicate conditions leading to untestable branches lc_validatewdt has duplicate conditions in its switch statement for both datatype and operatorid . this leads to branches that cannot be covered by unit testing . imported from <allcaps> gsfccfs </allcaps> - <number> <allcaps> edit </allcaps> : duplicate conditional in push_rpn_data , since the limit is checked before the push and can never be exceeded <url> setting <code> to true when <code> is true makes the checks redundant <url> <url> <url> <section> remove duplicate condions in lc_validatewdt , replace <code> with simple push , do not set <code> when <code> ."
"lc_tableinit has an if / else if without an else clause and its behavior is undefined so at the end of the lc_tableinit function there is an odd branching < pseudo coded here > if ( lc_cds_enabled ) { if ( lc_cds_restored ) { restored event } else if ( lc_cds_updated ) { default event } / / nothing else here ! <repeated> } else { <allcaps> cds </allcaps> disabled event } so , the question is : can we have a scenario where lc_cds_enabled is <allcaps> true </allcaps> , but both lc_cds_restored and lc_cds_updated are <allcaps> false </allcaps> ? and <allcaps> if so </allcaps> : what is the desired behavior here ? <repeated> this is a situation where the lack of an else clause on an "" else if "" most definitively is cause for concern . if that scenario cannot exist , then it would seem an "" else if "" is not required . unfortunately , due to the convoluted nature of this function and those that it calls , it is would be difficult to determine if the above scenario is a possibility . imported from <allcaps> gsfccfs </allcaps> - <number>"
"lc_sbinit casts every status to unsigned int in every event message lc_sbinit is casting the status in every event send to an unsigned int . the cast appears unnecessary , cfe_evs_sendevent takes a variable length of arguments because it does a formatting of the string with the values sent <allcaps> and </allcaps> the format in the send events is % 0 8 x ( print <number> characters in upper case hex ) . imported from <allcaps> gsfccfs </allcaps> - <number>"
"lc does not support double precision watchpoints lc does not currently support defining a watchpoint <url> for a double precision value . doubles are commonly used in <allcaps> gnc </allcaps> applications , and it would be helpful for lc to support monitoring those telemetry points , rather than requiring the upstream app to provide special telemetry for lc to monitor ."
updated version to <number> . <number>
