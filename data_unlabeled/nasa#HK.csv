text
"fix # <number> , refactor <code> and <code> to remove multiple returns <section> - fixes # <number> - <code> and <code> refactored to have a single exit point <section> github ci actions all passing successfully ( incl . build + run , unit / coverage tests etc . ) . <section> no change to function logic / behavior other than removing the early returns . <section> avi weiss <user>"
multiple returns in <code> and <code> can be refactored out <section> the only places multiple returns remain in hk are in <code> and <code> . this is unnecessary . <section> refactor to a single exit point . <section> avi weiss <user>
"fix # <number> , add packetnotfoundctr to hk appdata / tlm <section> - fixes # <number> - adds a new struct member ( <code> ) to <code> and <code> that tracks the number of times a packet was not found during traversal of the copy table in <code> . - split the <code> in half to create this counter , but could also just utilize the padding that is already there for this new member , and keep both sized at <code> if needed <section> github ci actions all passing successfully . <section> additional information tracking number of times packet not found available in tlm packets now . <section> avi weiss <user>"
"hk missing cfe_es_perflogentry ( hk_appmain_perf_id ) calls after cfe_sb_receivebuffer in hk_appmain <section> looks like hk is missing a couple of <code> calls after the <code> in <code> . <section> code inspection <section> every time the app wakes up , it should have an <code> call . every time the app wakes is about to block , it should have an <code> call . <section> <code> <section> - hardware : any - os : any - versions : i am looking at the draco rc4 release , but it looks like this is hk v2 . <number> <section> add any other context about the problem here . <section> keegan moore <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , convert <code> return codes and variables to <code> <section> - fixes # <number> - most <code> return codes converted over to <code> - <code> <code> / <code> variables holding cfe return codes converted to <code> <section> github ci actions all passing successfully . <section> no change to behavior . <code> is more expressive and improves consistency with cfe / cfs . <section> avi weiss <user>"
hk <code> return codes and variables should be converted to <code> <section> hk has quite a few return codes ( as well as local <code> / <code> variables which hold <allcaps> cfe </allcaps> return codes ) that can be easily converted over to the <code> typedef . <section> use the more expressive <code> and improve consistency with cfs . <section> avi weiss <user>
"split "" platform_cfg "" into external and internal components <section> currently , all configurable items for the app are contained in a single <code> header file . this contains macro definitions that affect both the internal operation of the application ( such as operational limits ) as well as the external interface in <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> and table files . <section> split this header into two components , one that contains only public items ( i . e . those that affect <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> / table definitions ) and one that contains private / internal items that are only used within the local application code and do not affect the interface . <section> mainly a scoping concern , separate files for separate scopes . these files could also be generated in the future , but scope still needs to be consistent . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use separate dispatcher for messages <section> isolate the message verification and dispatch from the general message processing . functions in the "" cmds "" file now strictly handle the command content , and do not get involved in general validation . the "" custom "" code isolation is also in a separate dispatcher . there is a separate issue to address this . fixes # <number> <section> build and run hk in <allcaps> cfe </allcaps> and run all tests <section> no change in actual implementation , splits up source files into smaller units only <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use payload structure <section> puts the <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> content in a member struct called "" payload "" . this makes it consistent with other <allcaps> cfe </allcaps> modules and provides a predictably named member for determining the position of non - header content . fixes # <number> <section> build and run all tests , sanity check app in <allcaps> cfe </allcaps> <section> none . <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use generated stubs <section> separate the global variables into separate stub source units , then re - run the stub generator for all internal apis . the committed result here is the exact output of the tool , unmodified . this eases future maintenance , when an internal <allcaps> api </allcaps> changes one just needs to re - run the stub generator tool to update it fixes # <number> <section> build and run all tests . ( affects ut only ) <section> stubs easier to maintain going forward . no changes in behavior . <section> debian <section> joseph hickey , vantage systems , inc ."
"apps should check / verify msg <allcaps> before </allcaps> calling handler <section> this remains an area with coding pattern discrepancies between <allcaps> cfe </allcaps> core and <allcaps> cfs </allcaps> apps , and also different between <allcaps> cfs </allcaps> apps to some degree as well . the <allcaps> cfe </allcaps> core and sample app ( which is supposed to be the example of "" best practice "" ) do validation on the message before calling the handler . for example : <code> this is different from hk , which does a similar check , but done inside each handler , for example : <url> <section> <allcaps> cfs </allcaps> apps should follow the best practices / patterns set forth in the framework code . ( there are reasons for the pattern being recommended practice ) <section> the pattern recommended in the framework ( checking before calling , as done in sample_app ) has several advantages : <number> . each command handler function has a unique type - safe prototype , that cannot be interchanged with another handler without triggering a type mismatch compiler error . <number> . all typecasting / conversions are confined to one place , and it is nearby to the place that the verification is done - which eases maintainability because check and conversion are all in close proximity and any mismatches will be more visible . <number> . it spreads out the cyclomatic complexity . in the non - recommended pattern , there is a case where the length check fails , and the entire handler is essentially skipped . this adds to the cyclomatic complexity of every handler . in the recommended pattern , those checks are done prior to the invocation of the handler , so the handler can focus solely on its intended purpose - doing the command itself . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove use of ' dummy ' in test code <section> fixes # <number> ' dummy ' removed from test code / text . redundant . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to behavior . simplifies test code . <section> avi weiss <user>"
"remove redundant use of "" dummy "" in test code <section> redundant use of the word "" dummy "" in some variables / text in the test code . all test variables code are ' dummy ' variables - no need to label it as such . <section> <url> <url> <section> simplifies test code . <section> avi weiss <user>"
"all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message should put content in a "" payload "" sub - structure <section> to match the patterns used in <allcaps> cfe </allcaps> and other modules , all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message definitions should put the content ( non - header ) parts into a separate struct called "" payload "" . <section> separate message content into a sub structure called "" payload "" . <section> this is benefit to tooling that can use the presence of this field to identify where the actual content starts ( e . g . something like <code> would work and be correct , as opposed to checking <code> which may not actually reflect where the content starts due to possible compiler - added padding between them ) . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use cfe_msg_ptr macro <section> this includes various naming convention updates to match patterns used elsewhere in <allcaps> cfe </allcaps> . fixes # <number> <section> build and run all tests , sanity check <section> no impact to behavior , updates symbol naming patterns to match other modules <section> debian <section> joseph hickey , vantage systems , inc ."
"default inputoffset in hk copy table needs update for new tlm hdr size * z ] i reviewed the [ contributing guide <url> . <section> the default copy table looks at byte offset <number> of the cfe messages . the new tlm secondary header padding for <number> - bit alignment causes the start of data to be at <number> bytes into the packet . <section> steps to reproduce the behavior : <number> . go to ' . <repeated> ' <number> . click on ' . <repeated> ' <number> . scroll down to ' . <repeated> ' <number> . see error <section> a clear and concise description of what you expected to happen . <section> currently : <code> the input offset for each should be <number> , and the output offset should start at <number> ( <number> , <number> , <number> , <number> , <number> ) . <section> - hardware : x64 ( but should work for any ) - os : pc - linux ( but should work for any ) - versions cfe draco rc4 <section> additionally ( optionally ) , the current table reads the first <number> bytes out of each packet . i think it would make more sense to only read the command count and command error count ( the first <number> bytes ) of each packet . if this also gets implemented , remember to update the numbytes accordingly . <section> keegan moore <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , correct uninitialized variable in ut <section> corrects an uninitialized variable warning - just <code> the object to zero . fixes # <number> <section> run all unit tests <section> no impact to behavior ( called <allcaps> api </allcaps> did not dereference the pointer , so it did not matter what was in it ) <section> debian bookworm <section> joseph hickey , vantage systems , inc ."
"fix # <number> , replace quotes with angle brackets in / inc <section> fixes # <number> - replace quotes with angle brackets in / inc files . <section> <number> . performed build verification testing <number> . ci <section> dan knutsen <allcaps> nasa </allcaps> goddard"
replace quotes with angle brackets in <hashtag> include </hashtag> statements within / inc describe the solution you ' d like quotes should be replaced with angle brackets in <hashtag> include </hashtag> statements that reside in the / inc location . this will ensure that the preprocessor selects the files pre - designated to override the default files contained within the open source cfs build release - as opposed to selecting those located in the same directory . requester info dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , adds fsw / src to app target <section> - fixes # <number> <section> make install <section> successful cert_testbed build <section> - ubuntu <number> <section> n / a <section> n / a <section> justin figueroa , vantage systems"
"add fsw / src to app target <section> cannot build cert_testbed . <code> is needed to build tables , etc . revise cmakelists . txt <section> build in cert_testbed <section> error - free build <section> if applicable , add references to the software . <section> - ubuntu <number> <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , moves interface definition files to inc <section> - fixes # <number> <section> make install lcov <section> no expected behavior change . <section> - ubuntu <number> <section> n / a <section> if included , identify any third party code and provide text file of license <section> - justin figueroa , vantage"
"move interface definition files to "" inc "" location <section> the interface definition files of all open source apps currently exist in the "" src "" directory . <section> create an "" inc "" dir to go with the "" src "" dir . move the interface definitions into this location : "" _msg . h "" , "" _msgdefs . h "" , "" _tbldefs . h "" , and "" _events . h "" . consider moving header files in both "" platform_inc "" and "" mission_inc "" to "" inc "" <section> leaving as is . <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , move variables declared mid - function to the top <section> fixes # <number> a few stray variables that were declared mid - function were moved to the top of their respective functions . <section> github ci actions all passing successfully ( excl . cppcheck issues being addressed in <url> <section> all variables declared top of function as per cfs conventions / guidelines . <section> avi weiss <user>"
variables declared mid - function <section> a few cases of variables declared mid - function left here . copy of <url> <section> all variables should be declared at the top of the function . <section> avi weiss <user>
"fix # <number> , remove initializations causing cppcheck failure <section> fixes # <number> note : all are local variables only . in order of the errors reported in the issue report : in the <code> function : <code> : <code> is assigned a value on line <number> , and is only used once on the line immediately after that , so the initialization at the top of the function is redundant . in the <code> function : <code> : <code> is used in <number> <code> loops , and it is assigned a value ( of zero ) each time in the init - statement . therefore the initialization at the top of the function can safely be changed to a declaration - only . <code> : <code> is assigned a value on line <number> and is used twice after that in <number> loops , both of which are covered by the assignment on line <number> . <code> : <code> is assigned a value on line <number> and is used twice after that in <number> loops , both of which are covered by the assignment on line <number> . <code> : <code> is assigned a value on line <number> and is only used immediately after that in a single <code> block . <code> : <code> is only used in the <code> block starting on line <number> , and it is assigned a value ( of <code> ) immediately preceding that line , thus the initialization at the top of the function is redundant ( and we can change it to a declaration - only ) . <code> : the assignment to <code> on line <number> and line <number> cover its use in the <code> blocks immediately following those assignments . in the <code> function : <code> : <code> is used in <number> <code> loops , and it is assigned a value ( of zero ) each time in the init - statement . therefore the initialization at the top of the function can safely be changed to a declaration - only . <code> : <code> is only used once in this function ( on line <number> ) and it is assigned a value preceding that use on line <number> . <code> : the assignment to <code> on line <number> covers its use in the mutually exclusive <code> / <code> block starting on the next line , which is the only place it is used in this function . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no impact on behavior . cppcheck now passes without error again . <section> avi <user>"
new cppcheck errors : ' [ unreadvariable ] ' <section> latest version of cppcheck is issuing the following failures for hk : <code> <section> run the current version of cppcheck on the current main branch hk source code . <section> cppcheck should pass without raising any errors . <section> avi <user>
"fix # <number> , apply consistent event id names to common events <section> - fixes # <number> - consistent event ids have been applied to the inconsistent cases to align them with a common event id naming convention . <section> only github ci actions . <section> no impact on code behavior ( no logic changes ) . consistent event id names for the events which are common to all / most cfs components and apps will improve consistency and ease make code review / debugging easier . <section> avi weiss <user>"
"inconsistent event id naming <section> copy of <url> after finding that there were <number> different event ids to indicate the same thing ( invalid message id ) in <url> i scrubbed the other common commands ( e . g . task initialisation [ <allcaps> init </allcaps> ] , <allcaps> noop </allcaps> , reset counters etc . ) and found the same issue there - almost every component / app had their own variation of the event id name for the exact same event . <section> apply consistent event id names to the events which are common to all / most components and apps . <section> invalid message id : <code> <code> <code> <code> <code> <code> <code> <code> <code> initialization : <code> <code> <code> <code> <code> <code> <code> <allcaps> noop </allcaps> : <code> <code> <code> <code> <code> <code> reset counters : <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> etc . <section> avi weiss <user>"
"fix # <number> , remove redundant / inconsistent comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . <section> fixes # <number> removes redundant and inconsistent comments ( e . g . <code> , <code> , function name in function header comments ) . there were also a few cases of unnecessary empty lines ( e . g . on the last line before the closing brace of a function ) and also missing empty lines ( e . g . between functions ) which were corrected . some of these empty lines trigger the ci format checks . i have left the commits separated for now to make life easier for whoever reviews this . i can squash them if / when this is ready for merge . <section> none ( comment and whitespace changes only ) . <section> no impact on behavior . these updates will reduce clutter and inconsistency in the code , improving readability . <section> <user>"
"redundant comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . <section> copy of <url> and <url> there are quite a few redundant comments in the code , such as : - <code> - type comments - <code> - type comments - function header comments which include the function name another minor issue has to do with empty lines : a ) _unnecessary_ empty lines ( e . g . first line after the opening brace of a function / struct , or the last line before the closing brace - the latter apparently sometimes triggers the ci format checks ) . b ) _missing_ empty lines between functions ( i . e . closing brace of last function , then next function beginning on the immediately next line without an empty line in between ) the unnecessary empty lines ( at the beginning or end of a function , for example ) represent a low single - digit percentage of the cases ( the vast majority of functions / structs do not have these extra empty lines ) , so there is an argument to remove them purely for consistency , not just due to them being redundant and triggering the ci format checks . <section> remove redundant comments to reduce clutter and inconsistency in the code , and improve readability . <section> <user>"
"fix # <number> , remove unnecessary parentheses around return values . <section> fixes # <number> removes parentheses in return statements in hk that return a single value / term . this is aligns these return statements with the predominant style of cfs . <section> none , prior to submission of the pull request . <section> no impact on behavior . <section> <user>"
scrub use of ( ) in return statements <section> unnecessary parentheses around return values in hk copy of <url> <section> <user>
"fix # <number> , change hk_inputmid_subscribed to <number> * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fix # <number> , change macro hk_inputmid_subscribed from 0 xff to <number> <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> # <number> , remove todos and minor cleanup <section> - fix # <number> - fix # <number> <section> ci <section> removes stray printf <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
remove ut todos and clean up related tests <section> <url> <section> remove <allcaps> todo </allcaps> and clean <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> , added codeql - build . yml * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . describe the contribution a clear and concise description of what the contribution is . added codeql to github workflows fix # <number> testing performed pushed to branch checked codeql ran successfully expected behavior changes no impact to behavior system ( s ) tested on browser additional context depends on <url> to run successfully third party code if included , identify any third party code and provide text file of license contributor info - all information <allcaps> required </allcaps> for consideration of pull request full name and company / organization / center of all contributors ( "" personal "" if individual work ) note <allcaps> cla </allcaps> ' s apply to software contributions ."
"fix # <number> , remove cfe_psp_memset use for addresses in <allcaps> ram </allcaps> <section> - fix # <number> <section> ci <section> none , just removes unnecessary <allcaps> api </allcaps> dependence <section> - ci - versions : bundle main + this commit + addition of app to build <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"add codeql to repository * x] i reviewed the [ contributing guide <url> . * x] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> use codeql for continuous integration <section> add codeql workflow <section> none <section> add any other context about the feature request here . <section> haven carlson"
"fix # <number> , resolve ut static analysis warnings <section> - fix # <number> <section> ci + static analysis run <section> none , just squashes static analysis warnings <section> - hardware : vm - os : ubuntu <number> - versions : bundle main + apps + related static analysis resolution branches <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , resolve strict cppcheck warnings <section> - fix # <number> <section> ci <section> none , justs squashes warnings <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"static analysis issues relative to flight code handful of static analysis issues in the "" red "" identified ( non - style issues ) . need to resolve these . filter : - file : elf - file : ut - file : cfe - file : os - file : cf_ - file : _lab_app . c ! ( significance : style ) should resolve and / or disposition the higher ranked ones at minimum . note license restricts publishing issues . imported from <allcaps> gsfccfs </allcaps> - <number>"
"resolve static analysis issues relative to unit tests many actual code issues ( uninitialized variables , buffer overruns , etc ) identified via static analysis in the unit tests . all actual "" bugs "" should be resolved . imported from <allcaps> gsfccfs </allcaps> - <number>"
"change hk_undefined_entry to an actual undefined value the current value of hk_undefined_entry in hk_utils . h is <number> , which is a potentially valid entry value . we should consider changing the definition to something that is actually an undefinable value , for example 0 xffff . imported from <allcaps> gsfccfs </allcaps> - <number>"
change hk_inputmid_subscribed to <number> in hk_utils . h suggest setting hk_inputmid_subscribed to <number> instead of 0 xff . finding in code review . imported from <allcaps> gsfccfs </allcaps> - <number>
"add hk_undefined_entry check to hk_verify . h hk_verify . h recommendation : hk_undefined_entry is <hashtag> define </hashtag> to <number> in hk_utils . h . i would consider , since any uninitialized entries in the table will be zeroed out , to put : <hashtag> if </hashtag> hk_undefined_entry ! = <number> <hashtag> error </hashtag> hk_undefined_entry must be set to <number> <hashtag> end if </hashtag> imported from <allcaps> gsfccfs </allcaps> - <number>"
