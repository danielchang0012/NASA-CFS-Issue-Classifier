text
"fix # <number> , cmd and tlm messages use payload sub - structure fix # <number> , adds payload substructure to all command and telemetry messages <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , moved command validation out of command functions fixes # <number> , validate command before calling the command function instead of after . <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , use <code> instead of <code> in tables / tlm / cmd structs testing performed * * github ci actions all passing successfully ( incl . build + run , unit / coverage tests etc . ) . <section> exposed structs will no longer change size based on the definition of <code> . <section> avi weiss <user>"
"fix # <number> , remove side - effects and superfluous initializations testing performed * * github ci actions all passing successfully ( incl . build + run , unit / functional tests etc . ) . <section> no change to behavior . code will be more readable , clearer and easier to maintain . <section> avi weiss <user>"
"superfluous assignments , side - effects . type updates etc . _and_ * * end up more readable - a couple of types can be updated ( <code> , <code> ) <section> can be <code> : <url> can be <code> : <url> several functions with multiple cs calls that could be made clearer and more compliant with an additional status / result variable . e . g . : <url> <section> clear up where it makes sense . <section> avi weiss <user>"
"fix # <number> , convert integers holding boolean truth values to <code> testing performed * * github ci actions all passing successfully . <section> no change to behavior . - intent of these variables is more clear - improved type - safety - eases future maintainability <section> avi weiss <user>"
integers representing boolean truth values should be converted to <code> code snips * * <url> <url> <section> integers representing boolean truth values should be converted <code> - this makes the intent clearer and improves maintainability . <section> avi weiss <user>
command code / enum naming convention inconsistencies code snips * * <code> <code> <code> ( should be <code> ) <code> <code> ( should be <code> ) . <repeated> and a couple more . <section> identifiers should conform to the cfs / cfe naming convention with regard to consistent use of underscores to make mnemonics clear and readable . <section> avi weiss <user>
"apps should check / verify msg <allcaps> before </allcaps> calling handler this remains an area with coding pattern discrepancies between <allcaps> cfe </allcaps> core and <allcaps> cfs </allcaps> apps , and also different between <allcaps> cfs </allcaps> apps to some degree as well . the <allcaps> cfe </allcaps> core and sample app ( which is supposed to be the example of "" best practice "" ) do validation on the message before calling the handler . for example : <code> this is different from cs , which does a similar check , but done inside each handler , for example : <url> <section> <allcaps> cfs </allcaps> apps should follow the best practices / patterns set forth in the framework code . ( there are reasons for the pattern being recommended practice ) <section> the pattern recommended in the framework ( checking before calling , as done in sample_app ) has several advantages : <number> . each command handler function has a unique type - safe prototype , that cannot be interchanged with another handler without triggering a type mismatch compiler error . <number> . all typecasting / conversions are confined to one place , and it is nearby to the place that the verification is done - which eases maintainability because check and conversion are all in close proximity and any mismatches will be more visible . <number> . it spreads out the cyclomatic complexity . in the non - recommended pattern , there is a case where the length check fails , and the entire handler is essentially skipped . this adds to the cyclomatic complexity of every handler . in the recommended pattern , those checks are done prior to the invocation of the handler , so the handler can focus solely on its intended purpose - doing the command itself . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , table processing fixes first check that table name is null - terminated before comparing any strings , then the normal strcmp ( ) can be safely used . this reverses the direction of the inner check loop , so it is reading entries that have been already validated otherwise , rather than reading entries that have not yet been checked at all . fixes # <number> fixes # <number> <section> build and run cs and all tests <section> un - terminated / long table names will be detected as part of validation . importantly , the code no longer invokes <code> on a string that has not been checked for null termination . <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , table processing fixes first check that table name is null - terminated before comparing any strings , then the normal strcmp ( ) can be safely used . this reverses the direction of the inner check loop , so it is reading entries that have been already validated otherwise , rather than reading entries that have not yet been checked at all . <section> build and run cs , run all tests . confirm table validation working as expected . <section> un - terminated / long table names will be detected as part of validation . importantly , the code no longer invokes <code> on a string that has not been checked for null termination . <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , simplify cs_attempttablereshare testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to behavior . function in simplified and more clear , easing future maintenance . <section> avi weiss <user>"
cs_attempttablereshare can be simplified code snips * * <url> <section> simplify function to improve clarity and ease future maintenance . <section> avi weiss <user>
"fix # <number> , combine consecutive , mutually - exclusive status checks testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to logic . single evaluation instead of twice in these if blocks now . <section> avi weiss <user>"
"combine consecutive , mutually - exclusive status checks code snips * * <url> <url> <section> combine into <code> / <code> constructs - clearer and reduces evaluations . <section> avi weiss <user>"
"fix # <number> , update function key in cs_recomputeappchildtask_test_defentryid testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> tests should pass at <percent> <section> avi weiss <user>"
"fix # <number> , replace quotes with angle brackets in / inc fixes # <number> - replace quotes with angle brackets in / inc files . <section> <number> . performed build verification testing <number> . ci <section> dan knutsen <allcaps> nasa </allcaps> goddard"
replace quotes with angle brackets in <hashtag> include </hashtag> statements within / inc describe the solution you ' d like quotes should be replaced with angle brackets in <hashtag> include </hashtag> statements that reside in the / inc location . this will ensure that the preprocessor selects the files pre - designated to override the default files contained within the open source cfs build release - as opposed to selecting those located in the same directory . requester info dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , adds fsw / src to app target - fixes # <number> <section> make install <section> successful cert_testbed build <section> - ubuntu <number> <section> n / a <section> n / a <section> justin figueroa , vantage systems"
"add fsw / src to app target cannot build cert_testbed . <code> is needed to build tables , etc . revise cmakelists . txt <section> build in cert_testbed <section> error - free build <section> if applicable , add references to the software . <section> - ubuntu <number> <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , moves interface definition files to inc - fixes # <number> <section> make install lcov <section> no expected behavior change . <section> - ubuntu <number> <section> n / a <section> if included , identify any third party code and provide text file of license <section> - justin figueroa , vantage"
"move interface definition files to "" inc "" location the interface definition files of all open source apps currently exist in the "" src "" directory . <section> create an "" inc "" dir to go with the "" src "" dir . move the interface definitions into this location : "" _msg . h "" , "" _msgdefs . h "" , "" _tbldefs . h "" , and "" _events . h "" . consider moving header files in both "" platform_inc "" and "" mission_inc "" to "" inc "" <section> leaving as is . <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , remove redundant / inconsistent comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . testing performed * * none ( comment and whitespace changes only ) . <section> no impact on behavior . these updates will reduce clutter and inconsistency in the code , improving readability . <section> <user>"
"redundant comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . expected behavior * * remove redundant comments to reduce clutter and inconsistency in the code , and improve readability . <section> <user>"
"fix # <number> , remove ' return ; ' from last line of void functions . testing performed * * none , prior to submission . <section> no impact on behavior . <section> <user>"
"remove "" return ; "" from last line of void functions describe the solution you ' d like * * remove <section> <user>"
"fix # <number> , remove unnecessary parentheses around return values . fixes # <number> removes parentheses in return statements in cs that return a single value / term . this is aligns these return statements with the predominant style of cfs . <section> none , prior to submission of the pull request . <section> no impact on behavior . <section> <user>"
scrub use of ( ) in return statements reporter info * * <user>
"fix # <number> , cs_recomputeappchildtask wrong function key"
"cs_recomputeappchildtask_test_defentryid sets up handler for wrong function key a clear and concise description of what the bug is . the cs_recomputeappchildtask_test_defentryid sets the handler <code> for the function key <code> when it should use the key <code> . the function under test , <code> does not call <code> , but rather cfe_es_getmoduleinfo , which in turn calls <code> . without the handler set for this function , some properties of <code> in the test may not be set and will cause the test to fail on some systems . <section> steps to reproduce the behavior : <number> . build as usual <number> . navigate to unit - tests of cs in build tree ( for me , <code> ) <number> . run <code> <number> . see test errors : <code> <section> the test should pass . <section> if applicable , add references to the software . <url> <section> - cs release tag draco - rc3 - hardware : x86_64 intel - os : centos <number> - versions : cfe draco - rc3 , <allcaps> osal </allcaps> draco - rc3 , <allcaps> psp </allcaps> draco - rc2 <section> add any other context about the problem here . <section> full name and company / organization if applicable isaac rowe , <allcaps> nasa jsc </allcaps> ( jacobs technology )"
"fix # <number> , resolve usersguide issues with doxygen <date> - fix # <number> <section> build doc with ubuntu <number> <section> successful doc build <section> - hardware : i5 / docker - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove empty else condition and stray <allcaps> todo </allcaps> - fix # <number> <section> ci <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove stray terminators - fix # <number> <section> ci <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , add library support to application checksum computing function . fixes # <number> <section> ci <section> cs_computeapp ( ) will now scrub libraries in addition to apps when computing the checksum . unit test updates ( all in cs_compute_tests . c ) : - separate nominal tests for checking an app vs . library - modified app id name error test to use invalid app and lib id - getmoduleinfo ( ) error test case ( instead of getappinfo ( ) ) <section> ci"
"fix # <number> # <number> , improve code coverage topics separate by commit but submitted together for <percent> coverage - fix # <number> - fix # <number> <section> ci <section> none , just eliminated redundant conditionals <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove cfe_psp_memset and cfe_psp_memcpy use - fix # <number> <section> ci <section> none <section> ci ( unit test and build run workflows cover it ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , add requirements rationale - fix # <number> <section> na - requirement rationale update only <section> none <section> na <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , added codeql - build . yml <section> * x] i reviewed the [ contributing guide <url> . * [x ] i signed and emailed the appropriate contributor license agreement to <email> and copied <email> . describe the contribution a clear and concise description of what the contribution is . added codeql to github workflows fix # <number> testing performed pushed to branch checked codeql ran successfully expected behavior changes no impact to behavior system ( s ) tested on browser additional context depends on <url> to run successfully third party code if included , identify any third party code and provide text file of license contributor info - all information <allcaps> required </allcaps> for consideration of pull request full name and company / organization / center of all contributors ( "" personal "" if individual work ) note <allcaps> cla </allcaps> ' s apply to software contributions ."
add codeql to repository use codeql for continuous integration <section> add codeql workflow <section> none <section> add any other context about the feature request here . <section> haven carlson
"fix # <number> # <number> , resolve static analysis warnings - fix # <number> - fix # <number> <section> ci + static analysis run <section> none , just squashes static analysis warnings <section> - hardware : vm - os : ubuntu <number> - versions : bundle main + apps + related static analysis resolution branches <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"cs seg faults when using memory definition table ( cs . defmemorytbl ) <section> on a <number> - bit system , cs will intermittently seg fault when it attempts to checksum an address defined by the memory definition table ( cs . defmemorytbl ) . further , when you dump the results table for a given address defined by the memory definition table - the address is byte swapped . <repeated> which i do not believe to be the expected result and may help in de - bugging this issue . <section> steps to reproduce the behavior : <number> . start cfs <number> . load / validate / activate a memory definition table with a non - zero address <number> . observe seg fault when cs attempts to checksum the entry with non - zero starting address . <section> oracle vm virtualbox os : ubuntu - <number> versions : cfs versions : cfe v7 . <number> - rc4 + dev96 , osal v6 . <number> - rc4 + dev66 , psp v1 . <number> - rc1 + dev14 . <section> dan knutsen <allcaps> nasa </allcaps> goddard"
"fix # <number> , remove implicit padding <section> fix # <number> updated cs_tbledefs . h to correct for implicit padding that gets added when running on a <number> - bit system . also updated default tables provided ( cs_apptbl . c , cs_eepromtbl . c , cs_memorytbl . c , and cs_tablestbl . c ) to remove positional dependency on table elements . <section> steps taken to test the contribution : <number> . started cfs <number> . enabled tlm <number> . dumped each structure <number> . interpreted binary dump data and confirmed expected padding <section> oracle vm virtualbox os : ubuntu - <number> versions : cfs versions : cfe v7 . <number> - rc4 + dev96 , osal v6 . <number> - rc4 + dev66 , psp v1 . <number> - rc1 + dev14 . <section> dan knutsen <allcaps> nasa </allcaps> goddard"
"cs has unreachable code and branches cs has several unreachable lines of code and branch conditions . unreachable code and branch in cs_appmain lines <number> - <number> : cs_createrestorestatesfromcds always returns cfe_success . unreachable branch in cs_utils . c : cs_backgroundeeprom line <number> : currententryintable is always cs_max_num_eeprom_table_entries when cs_findenabledeepromentry returns false . unreachable branches in cs_utils . c : cs_handleroutinetableupdates lines <number> , <number> , <number> : errorcode is always cfe_success due to initialization . imported from <allcaps> gsfccfs </allcaps> - <number>"
"create unit test to confirm cs will work on system with different cpuaddr sizes follow on to "" <allcaps> gsfccfs </allcaps> - <number> , replace <number> bit addresses with cpuaddr "" and this comment specifically : <url> basic concept would be to use "" real "" addresses and confirm cs handles them correctly vs just fake numbers . imported from <allcaps> gsfccfs </allcaps> - <number>"
"revisit coverage , update to <percent> code / branch or write issues where unreachable failure : coverage cs lines <percent> functions <percent> branches <percent> failure : coverage ds lines <percent> functions <percent> branches <percent> failure : coverage fm lines <percent> functions <percent> branches <percent> failure : coverage hs lines <percent> functions <percent> branches <percent> failure : coverage lc lines <percent> functions <percent> branches <percent> failure : coverage md lines <percent> functions <percent> branches <percent> failure : coverage sc lines <percent> functions <percent> branches <percent> fix where possible , elsewise issues should document all uncovered lines / branches and disposition ( why it ' s ok as - is ) imported from <allcaps> gsfccfs </allcaps> - <number>"
fill in missing requirements rationale there ' s a handful of missing requirements rationale . add . imported from <allcaps> gsfccfs </allcaps> - <number>
"fix <number> , incorrect data type in uts fix # <number>"
"fix <number> , missing table support fixed # <number>"
"fix <number> , missing table support fixed # <number>"
cmakelists . txt missing table support the cmakelists . txt file does not build the tables . i have attached a file that works . cmakelists . txt <url>
"incorrect data type in unit tests the cs_housekeepingcmd_test_nominal ( ) function in the cs_app_test . c file sets : cs_appdata . recomputeinprogress = <number> ; cs_appdata . oneshotinprogress = <number> ; the associated member attributes in the hk message are uint8 , but the member attribute in the cs_appdata struct is type boolean . this still compiles and passed with older versions of the <allcaps> osal </allcaps> , but with <allcaps> osal </allcaps> <number> . <number> - bv this compiles but fails unit test . i recommend changing assignments from <number> and <number> to both true , and the equality check from <number> and <number> to <number> . when this change is made , cs passes unit testing ."
