text
"create test a clear and concise description of what the contribution is . - include explicitly what issue it addresses [ e . g . fixes <hashtag> x </hashtag> ] <section> steps taken to test the contribution : <number> . build steps ' . <repeated> ' <number> . execution steps ' . <repeated> ' <section> a clear and concise description of how this contribution will change behavior and level of impact . - <allcaps> api </allcaps> change : x <elongated> ( if applicable ) - behavior change : x <elongated> ( if applicable ) - or no impact to behavior <section> - hardware : [ e . g . pc , sp0 , mcp750 ] - os : [ e . g . ubuntu <number> , <allcaps> rtems </allcaps> <number> , vxworks <number> ] - versions : [ e . g . cfe <number> , <allcaps> osal </allcaps> <number> , <allcaps> psp </allcaps> <number> for mcp750 , any related apps or tools ] <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - note clas apply to only software contributions ."
"fix # <number> , fixes errors in ic bundle workflow file addresses issue # <number> . <section> generated ic branch in fork . <section> no additional "" # "" is placed in front of "" <hashtag> define </hashtag> cfe_psp_impl_build_number . <repeated> "" in fsw / mcp750 - vxworks / inc / psp_version . h no additional "" # "" is placed in front of "" <hashtag> define </hashtag> cfe_psp_impl_build_number . <repeated> "" in fsw / pc - linux / inc / psp_version . h no additional "" # "" is placed in front of "" <hashtag> define </hashtag> cfe_psp_impl_build_number . <repeated> "" in fsw / pc - rtems / inc / psp_version . h <section> github <section> dylan z . baker / <allcaps> nasa gsfc </allcaps>"
"formatting issues with icbundle workflow <section> similar to nasa / cfe # <number> . there are some small formatting issues that should be corrected in the changelog / version . h updates made by the icbundle workflow : <number> . an additional "" # "" is placed in front of "" <hashtag> define </hashtag> cfe_psp_impl_build_number . <repeated> "" in fsw / mcp750 - vxworks / inc / psp_version . h <number> . an additional "" # "" is placed in front of "" <hashtag> define </hashtag> cfe_psp_impl_build_number . <repeated> "" in fsw / pc - linux / inc / psp_version . h <number> . an additional "" # "" is placed in front of "" <hashtag> define </hashtag> cfe_psp_impl_build_number . <repeated> "" in fsw / pc - rtems / inc / psp_version . h <section> steps to reproduce the behavior : <number> . push a code change to a user - owned feature branch <number> . submit a pull request for that code change <number> . go to the "" actions "" tab in github and run the "" integration candidate bundle generation "" workflow with the pr number as the input argument for the field labeled "" the pull request numbers to include ( comma separated ) : "" <number> . wait for the workflow to complete <number> . inspect the newly updated / generated "" integration - candidate branch "" <number> . observe the changes made to the fsw / mcp750 - vxworks / inc / psp_version . h , fsw / pc - linux / inc / psp_version . h , and fsw / pc - rtems / inc / psp_version . h files by the workflow <section> <number> . no additional "" # "" is placed in front of "" <hashtag> define </hashtag> os_build_number . <repeated> "" in fsw / mcp750 - vxworks / inc / psp_version . h <number> . no additional "" # "" is placed in front of "" <hashtag> define </hashtag> os_build_number . <repeated> "" in fsw / pc - linux / inc / psp_version . h <number> . no additional "" # "" is placed in front of "" <hashtag> define </hashtag> os_build_number . <repeated> "" in fsw / pc - rtems / inc / psp_version . h <section> github <section> dylan z . baker / <allcaps> nasa gsfc </allcaps>"
"implement vxworks sysmon <section> implement a vxworks sysmon to calculate <allcaps> cpu </allcaps> utilization . <section> none . <section> add any other context about the feature request here . <section> full name and company / organization if applicable anh van , <allcaps> gsfc nasa </allcaps>"
"fix # <number> , implement <allcaps> rtems </allcaps> sysmons a clear and concise description of what the contribution is . fixes <number> , implemented a rtems sysmon not fully tested for <allcaps> smp </allcaps> <section> steps taken to test the contribution : <number> . build with rtems <number> / <number> <number> . modify sample app to call and run rtems_sysmon <number> . make <allcaps> simulation </allcaps> = i686 - rtems6 / i686 - rtems5 prep <number> . make insall <number> . run on qemu <section> none <section> - simulated : - i686 - rtems5 / <number> <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - note clas apply to only software contributions . anh van , <allcaps> gsfc </allcaps>"
implement <allcaps> rtems sysmon </allcaps> <section> <section> implement a version of linux_sysmon for rtems <section> none <section> none <section> full name and company / organization if applicable anh van . <allcaps> gsfc </allcaps>
"<allcaps> rtems </allcaps> . cmake : add quotes around ${ rtems_bsp_c_flags } . without the quotes , only the first argument is actually passed to the compiler by rtems - syms . a clear and concise description of what the contribution is . - this change ensures that all flags from <code> are passed from <code> to the compiler . <section> steps taken to test the contribution : <number> . only tested to check if compilation succeeds . <section> a clear and concise description of how this contribution will change behavior and level of impact . - <allcaps> api </allcaps> change : n / a - behavior change : x <elongated> ( if applicable ) before : the only flag that <code> passes to the compiler is <code> . this causes a crash because the compiler assumes the wrong floating point <allcaps> abi </allcaps> . <code> after : all flags are correctly passed to the compiler . the floating point <allcaps> abi </allcaps> is correctly specified . <code> <section> - hardware : raspberry pi <number> . - os : building on ubuntu <number> for <allcaps> rtems </allcaps> <number> . - versions : <allcaps> psp </allcaps> <code> . <section> n / a <section> n / a <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - jacob killelea / personal"
static analysis warnings <section> several coding violations were flagged by software assurance . we need to adjudicate the warnings defined in the attached spreadsheet . staticanalysiswarnings . xlsx <url> <section> dan knutsen <allcaps> nasa </allcaps> goddard
"<allcaps> psp </allcaps> integration candidate : caelum - rc4 + dev47 - pr # <number> . addresses issue # <number> <section> cfs bundle checks <url> <allcaps> psp </allcaps> checks <url> <section> see prs <section> ubuntu <number> <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> <user>"
"fix # <number> , create workflow for ic bundle generation a clear and concise description of what the contribution is . - addresses issue # <number> . <section> generated ic branch in fork . <section> adds new workflow for integration candidate branch generation . <section> dylan z . baker / <allcaps> nasa gsfc </allcaps> <number>"
"<allcaps> psp </allcaps> integration candidate : caelum - rc4 + dev45 - pr # <number> . addresses issue # <number> <section> cfs bundle checks <url> <allcaps> psp </allcaps> checks <url> <section> see prs <section> ubuntu <number> <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> <user>"
"fix # <number> , replace hand - written function names with __func__ testing performed * * github ci actions all passing successfully and local cfs bundle tests confirm no issues . <section> no change to behavior . <section> avi weiss <user>"
a few hand - written function names in printf strings could be updated to use <code> code snips * * <url> <url> <section> use the <code> predefined identifier where possible to lower future dependencies to updating hand - written comments . <section> avi weiss <user>
"fix # <number> , adds generic driver interface and linux sysmon module defines an "" iodriver "" interface with a simple module id + opcode + argument interface , which can be extended as necessary for different purposes . also adds a "" linux_sysmon "" module that implements this interface to provide system monitoring capabilities . this includes , but is not limited to , the <allcaps> cpu </allcaps> utilization that hs needs . fixes # <number> <section> build and run <allcaps> cfe </allcaps> with ( patched ) hs , observe <allcaps> cpu </allcaps> utilization getting reported correctly via the <allcaps> psp </allcaps> module <section> adds "" iodriver "" pluggable / extendable interface , and "" linux_sysmon "" for health monitoring <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , replace exit ( <number> ) and exit ( - <number> ) with exit_failure macro testing performed * * github ci actions all passing successfully . tested locally to confirm no change to test outcomes or coverage . <section> no change to behavior . the macros are more expressive and potentially more portable . <section> intel ( r ) celeron ( r ) n4100 <allcaps> cpu </allcaps> @ <number> . 1 0 ghz x86_64 debian <allcaps> gnu </allcaps> / linux <number> ( bullseye ) current main branch of cfs . <section> avi weiss <user>"
replace exit ( <number> ) and exit ( - <number> ) with preferred macro exit_failure expected behavior * * recommend replacing with the more expressive and more portable <code> or ' exit_success ' macros . <section> <url> <url> <section> avi weiss <user>
"fix # <number> , cleanup and add doxygen for cfe_psp . h testing performed * * just github ci . <section> documentation changes only . <section> avi weiss <user>"
"fix # <number> , align mismatched function prototype / implem . parameter names testing performed * * github ci actions all passing successfully . local test build - <percent> tests passing successfully . <section> no change to behavior . code clarity and consistency improved . <section> intel ( r ) celeron ( r ) n4100 <allcaps> cpu </allcaps> @ <number> . 1 0 ghz x86_64 debian <allcaps> gnu </allcaps> / linux <number> ( bullseye ) current main branch of cfs . <section> avi weiss <user>"
scrub for mismatched function prototype / implementation parameter names expected behavior * * mismatched parameter names can be confusing for maintenance and application programming . best for them to match for the sake of code clarity . <section> avi weiss <user>
"must ' else if ' constructs always have a final ' else ' ? <section> do the coding guidelines ( or general cfs custom ) require all <code> constructs to have a final ' catch all ' <code> block ? if so , there are a couple of remaining cases here in <allcaps> psp </allcaps> that are missing one . <section> <url> <section> 1 st case can simply be replaced by an <code> ( there are only <number> options for the validity flag ) or just leave as is , but add an empty <code> at the end to make it explicit ) . screenshot <number> - <number> - <number> <number> <number> <number> <img> note : there is <number> more case in the test code <section> avi weiss <user>"
"<allcaps> psp </allcaps> integration candidate : caelum - rc4 + dev34 - pr # <number> . addresses issue # <number> - pr # <number> . addresses issue # <number> <section> cfs bundle checks <url> <allcaps> psp </allcaps> checks <url> <section> see prs <section> ubuntu <number> <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> <user>"
"fix # <number> , separate network logic in pc - rtems to support generic targets - fix # <number> <allcaps> note </allcaps> : really this is just a draft proof of concept to show this can be used generically if the network config is removed <section> spot checked with leon3 <allcaps> qemu </allcaps> . <section> eventually plan to use source selection to include platform specific config . <repeated> or consider making this generic in some other way . <allcaps> psp </allcaps> module would be nice but i am not aware of a way to select from a toolchain file or based on platform without making another psp . <section> leon3 <allcaps> qemu </allcaps> , see <url> <section> depends on an as - yet submitted toolchain file . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , squash constparameter warning in linux cfe_psp_memory . c - fix # <number> <section> ci <section> squash ci failure / cppcheck style warning <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove obsolete _using_rtems_includes_ - fix # <number> <section> ci <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , free ( close ) filedescriptor resource to avoid leak *checklist* * * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fixes # <number> added additional <code> for <code> which was missing before the end of the function . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> <code> freed ( closed ) before going out of scope , avoiding slight resource leak . <section> avi <user>"
"<allcaps> psp </allcaps> integration candidate : caelum - rc4 + dev26 - pr # <number> . addresses issue # <number> - pr # <number> . addresses issue # <number> <section> cfs bundle checks <url> <allcaps> psp </allcaps> checks <url> <section> see prs <section> ubuntu <number> <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> <user>"
"fix # <number> , remove redundant / inconsistent comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . testing performed * * none ( comment and whitespace changes only ) . <section> no impact on behavior . these updates will reduce clutter and inconsistency in the code , improving readability . <section> <user>"
"redundant comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . expected behavior * * remove redundant comments to reduce clutter and inconsistency in the code , and improve readability . <section> <user>"
"cfe_psp_watchdoginit method is not present in ut_psp_stub . c file <section> receiving an error during building unit tests that states "" undefined reference to ` cfe_psp_watchdoginit ' "" while testing a method that calls the cfe_psp_watchdoginit method . <section> steps to reproduce the behavior : <number> . find a production code method that uses the cfe_psp_watchdoginit <number> . write a unit test that tests that function <number> . attempt to build <number> . see error <section> build successfully , run tests with them able to use the stubbed behavior from cfe_psp_watchdoginit . <section> the production code declaration : <url> <section> - hardware : dell precision <number> - os : <allcaps> rhel </allcaps> <number> - versions : tag v1 . <number> - rc4 , also <section> branch <section> this is only one of many watchdog methods in <allcaps> psp </allcaps> ; none are present in the ut_psp_stubs . c file . i did not encounter the usage of any other of these watchdog methods , yet . <section> alan gibson <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> code <number>"
"fix # <number> , stop empty function catching ci workflow format checks quick fix of # <number> <section> none <section> empty function will stop catching up workflow check and causing its failure . <section> <user>"
"ci workflow check catching empty function > > <user> can you take a look at the format check workflow and fix the issue caught by it ? specifically about <code> . thank you ! > > it seems that the warning was deemed ignorable in this case , given that the pull request was merged , which is good because i was having trouble deciphering exactly what the error was referring to anyway . was it just due to the empty function ? the "" error on differences "" step of the format check workflow ( <url> looks something like this : <number> - void cfe_psp_setdefaultexceptionenvironment ( void ) <number> - { <number> - } <number> + void cfe_psp_setdefaultexceptionenvironment ( void ) { } the check recommends removing lines <number> - <number> by "" - "" before the line . the check recommends adding line <number> by showing "" + "" before the line . _originally posted by <user> in <url>"
"<allcaps> psp </allcaps> integration candidate : caelum - rc4 + dev23 <section> pr # <number> - fix # <number> , create changelog file pr # <number> - fix # <number> , remove unnecessary parentheses around return values . pr # <number> - fix # <number> , remove ' return ; ' from last line of void function . <section> <allcaps> psp </allcaps> checks < <url> cfs bundle checks < <url> <section> see prs <section> ubuntu <section> <user> <user>"
"fix # <number> , remove ' return ; ' from last line of void function . testing performed * * none , prior to submission . <section> no impact on behavior . <section> <user>"
"remove "" return ; "" from last line of void functions describe the solution you ' d like * * remove <section> <user>"
"fix # <number> , remove unnecessary parentheses around return values . fixes # <number> removes parentheses in return statements in <allcaps> psp </allcaps> that return a single value / term . this is aligns these return statements with the predominant style of cfs . <section> none , prior to submission of the pull request . <section> no impact on behavior . <section> <user>"
scrub use of ( ) in return statements reporter info * * <user>
"<allcaps> psp </allcaps> integration candidate : caelum - rc4 + dev16 <section> pr # <number> - fix # <number> , correct <allcaps> psp </allcaps> module ids and lookups <section> <allcaps> psp </allcaps> checks < <url> cfs bundle checks < <url> <section> see prs <section> ubuntu <section> <user>"
"pass extra ldflags to <allcaps> rtems </allcaps> . cmake <section> i am working on ti tms570lc4357 soc with <allcaps> rtems </allcaps> running cfs . this soc is a <code> device . during build process , the linker does not properly pass <code> flag , i suggest passing an extra <code> to allow additional flags here <url> is my proposal commit for it , but i am still not ready to send a pr yet . without extra <allcaps> linker flags </allcaps> , the link cmd will be <code> and reported error : <code> another corresponding commit <url> is the <code> needs <code> to wrap <code> to properly use all <allcaps> c flags </allcaps> <section> build for a big - endian device on <allcaps> rtems </allcaps> <section> a clear and concise description of what you expected to happen . <section> if applicable , add references to the software . <section> - hardware : 1 1 th gen intel ( r ) core ( tm ) i7 - 1 1 8 0 0 h - os : debian <number> - versions : cfe draco - rc2 , <allcaps> psp </allcaps> for custom tms570lc4357 <section> yang hongbo , qingdao iotpi information technology ltd ."
"fix # <number> , correct <allcaps> psp </allcaps> module ids and lookups correct the cfe_psp_module_findbyname and cfe_psp_module_getapientry lookups to use the correct length of the config data ' pspmodulelist ' . the internal variable that had been used reflected the total across two lists and thus was not a correct limit . rather than having these functions search both lists , this instead keeps it to only exposing the user - specified modules in pspmodulelist , it does not expose the built - in / base modules . this makes the change simpler , as typically the built in modules would not be accessed through these functions at all . fixes # <number> <section> boot <allcaps> cfe </allcaps> and confirm modules being initialized as expected . confirm that module lookup is working and returning correct module id . <section> - will not segfault if attempting to find a module that does not exist - will return the same id that the module was initialized with ( this was different and should not have been ) <section> ubuntu <number> <section> this pr does _not_ currently add a coverage test for this code , although that should be considered as a follow on . <section> joseph hickey , vantage systems , inc ."
"<allcaps> psp </allcaps> integration candidate : caelum - rc4 + dev13 <section> pr # <number> - fix # <number> , remove commented out code <section> cfe checks < <url> cfs bundle checks < <url> <section> see prs <section> ubuntu <section> <user>"
"fix # <number> , remove commented out code clean up code block that was ifdef ' d out fixes # <number> <section> build and run tests <section> none ; code was already disabled <section> <allcaps> rhel </allcaps> <number> <section> joseph hickey , vantage systems , inc ."
"remove commented out code <section> while developing other software i noticed some "" jphfix "" comment tags remaining . these should have been removed before commit but were missed ( mistake ) . <url> <section> remove commented out code <section> joseph hickey , vantage systems , inc ."
"fix # <number> , add cfe_psp_statustostring and cfe_psp_status_c - fix # <number> <section> added a few calls in cfe startup to exercise the function and it worked . <allcaps> psp </allcaps> coverage for shared does not look to be fully implemented so did not add tests yet . <section> none , just adds an a useful <allcaps> api </allcaps> <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this change + a few calls to exercise the new <allcaps> psp api </allcaps> <code> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"psp integration candidate : caelum - rc4 + dev10 pr # <number> - fix # <number> , resolve uninit var static analysis warning <section> <allcaps> psp </allcaps> checks <url> cfs bundle checks <url> <section> see prs <section> ubuntu <number> <section> part of < <url> format check workflow failure expected for integration candidates <section> if included , identify any third party code and provide text file of license <section> skliper"
"fix # <number> , resolve uninit var static analysis warning - fix # <number> <section> ci + static analysis run <section> none , just squashes static analysis warnings <section> - hardware : vm - os : ubuntu <number> - versions : bundle main + apps + related static analysis resolution branches <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"<allcaps> psp </allcaps> integration candidate : caelum - rc4 + dev9 pr # <number> - fix # <number> , update codeql workflow for reusable updates pr # <number> - fix # <number> , add cpu affinity example pr # <number> - fix # <number> , update <allcaps> rtems </allcaps> cmake platform file <section> rtems <number> , <number> ubuntu <number> <section> see prs <section> <allcaps> rtems </allcaps> <number> , <number> ubuntu <number> <section> part of <url> <section> none <section> skliper acudmore"
"fix # <number> , add cpu affinity example - fix # <number> <section> built and ran core , <code> replacing <allcaps> pid </allcaps> with the core - linux <allcaps> pid </allcaps> reported from top . confirmed cfe_ * tasks were all assigned to core <number> ( mask = = <number> ) , the rest floated ( mask = = ff ) . <section> tasks w / the name starting with cfe_ and their children are now assigned to core <number> <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit <section> note we would not actually have to merge this . <repeated> it ' s just an example . it works though , and merging it will ensure it does not rot . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , update <allcaps> rtems </allcaps> cmake platform file please note : this pr depends on cfe pr <number> : <url> - fixes # <number> updates the <allcaps> rtems </allcaps> . cmake platform file to account for : - differences in <allcaps> rtems </allcaps> <number> , <number> , <number> . x , and the gaisler provided <allcaps> rcc </allcaps> toolchain - building the cfe core as a standalone executable or a dynamically loaded module <section> i built pc - rtems for <allcaps> rtems </allcaps> <number> and <number> and ran them both on the ci containers . this was with : <url> applied <section> no impact on behavior to existing pc - rtems builds . <section> tested on <allcaps> rtems </allcaps> <number> and <allcaps> rtems </allcaps> <number> ci systems . ( pc - rtems ) <section> this enables upcoming <allcaps> rtems </allcaps> changes documented here : <url> <section> alan cudmore , <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> code <number>"
"support <allcaps> rtems </allcaps> <number> , gaisler <allcaps> rcc </allcaps> , and dynamically loaded cfe build in <allcaps> rtems </allcaps> . cmake platform file <section> a few minor modifications to the <allcaps> rtems </allcaps> . cmake platform file are needed to support <allcaps> rtems </allcaps> <number> , gaisler <allcaps> rcc </allcaps> ( <allcaps> rtems </allcaps> <number> ) , and dynamically loaded cfe core builds . <section> modify cmake / modules / platform / <allcaps> rtems </allcaps> . cmake to add : rtems_dynamic_load variable to select how the <allcaps> cmake </allcaps> executable rule is defined add a rtems_bsp_specs_flags variable in the rtems_sys_specs_flags define to allow of toolchain file customizations . this will allow existing <allcaps> rtems </allcaps> <number> and <allcaps> rtems </allcaps> <number> pc - rtems platforms to still build , while enabling <allcaps> rtems </allcaps> <number> , <allcaps> rcc </allcaps> , and other <allcaps> rtems </allcaps> platforms . <section> the alternative here would be to use separate cmake platform files , which creates more cmake files to maintain and makes it more confusing to setup a new <allcaps> rtems </allcaps> target . <section> depends on the following cfe issue for minor toolchain file updates : <url> <section> alan cudmore , <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> code <number>"
"fix # <number> , update codeql workflow for reusable updates - fix # <number> <section> ci <section> none , just fixes codeql workflow <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"add <allcaps> eeprom </allcaps> read and block read / write apis <section> no <allcaps> psp api </allcaps> ' s for <allcaps> eeprom </allcaps> write block , or any <allcaps> eeprom </allcaps> reads . <section> add cfe_psp_eepromwriteblock , read [ <number> | <number> | <number> | block ] <section> none <section> # <number> this would better support <allcaps> mm eeprom </allcaps> actions with specific apis for reading writing vs the former use of the generic cfe_psp_memcpy , cfe_psp_memset . could consider deprecating all the ram <allcaps> api </allcaps> ' s since they are not really useful , the calls are surrounded w / validity checks already so not really clear why they are necessary . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , relative strict - dir - list for static analysis workflow <section> - fix # <number> <section> needs nasa / cfs # <number> in main to actually test with ci <section> will work once nasa / cfs # <number> is in <section> ci <section> depends on nasa / cfs # <number> , similar update as what ' s implemented in nasa / cf # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"update static analysis workflow strict directory list for nasa / cfs # <number> <section> see # <number> , really <allcaps> psp </allcaps> was the only repo that worked right in the presence of the leading <code> applied within the shared workflow since it ' s a single directory . <section> provide directory relative to local repo such that a list will also work <section> none <section> nasa / cfs # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"apply latest contributor license agreement links <section> changes links from the old contributor license agreement location to its new location . <section> working links <section> depends on <url> <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"fix # <number> , apply latest contributor license agreement links <section> - fixes # <number> adds checklist for <allcaps> cla </allcaps> and contributing guide . <section> working links <section> depends on <url> <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"psp integration candidate : caelum - rc4 + dev7 <section> pr # <number> - fix # <number> , update copyright header pr # <number> - <allcaps> hotfix </allcaps> # <number> , standardize version information <section> psp checks < <url> cfs bundle checks < <url> <section> see prs <section> ubuntu <allcaps> rtems </allcaps> <section> part of nasa / cfs # <number> <section> none <section> <user>"
"<allcaps> hotfix </allcaps> # <number> , standardize versioning information <section> per conversation in <allcaps> ccb </allcaps> : <number> - <number> - <number> and in <url> ensuring <allcaps> revision </allcaps> number is set to <number> and mission_rev = 0 xff <section> text and documentation only <section> no behavior change <section> n / a <section> <url> <section> none <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps>"
"fix # <number> , update copyright header <section> - fix # <number> <section> documentation only , but built / ran unit tests <section> none <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"psp integration candidate : caelum - rc4 + dev4 <section> pr # <number> - fix # <number> , remove explicit filename doxygen comments pr # <number> - fix # <number> , apply header guard standard <section> psp checks < <url> cfs bundle checks < <url> <section> see prs <section> ubuntu <number> <allcaps> rtems </allcaps> <number> and <number> <section> part of <url> <section> none <section> <user>"
codeql workflow broken due to name change <section> merging <url> broke the components ' codeql workflow as expected . need to update the osal codeql workflows to match the patterns implemented in <url> <section> see failed workflows - <url> <section> workflow executes <section> none <section> github actions <section> none <section> gerardo e . cruz - ortiz <allcaps> nasa </allcaps>
"fix # <number> , remove explicit filename doxygen comments <section> - fix # <number> <section> make doc , observe no filename warnings <section> none <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , apply header guard standard <section> - fix # <number> <section> ci <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"cfe_psp_getcfetextsegmentinfo returns success even though it failed to get module info <section> when moduleinfoget ( ) function returns <allcaps> error </allcaps> , cfe_psp_getcfetextsegmentinfo ( ) returns cfe_psp_success <url> <section> i would think that if the <allcaps> cfe </allcaps> text segment cannot be retrieved , the function should return cfe_psp_error <section> - aitech sp0 - vxworks <number> - versions latest <section> claudio olmi - <allcaps> metecs </allcaps>"
"psp integration candidate : caelum + dev1 <section> pr # <number> from pavll / fix - <number> - sleep - before - exit - fix # <number> , sleep before exit when printing pr # <number> from jphickey / fix - <number> - stub - databuf - fix # <number> , check the address in <allcaps> psp </allcaps> get segment stubs <section> <allcaps> psp </allcaps> checks < <url> bundle checks < <url> <section> see prs <section> ubuntu <number> <allcaps> rtems </allcaps> <number> <allcaps> rtems </allcaps> <number> <section> part of < <url> <section> none <section> <user> <user>"
"fix # <number> , reuse codeql , static analysis , and format check <section> fixes # <number> <section> <allcaps> psp </allcaps> codeql reuse : <url> <allcaps> psp </allcaps> format check reuse : <url> <allcaps> psp </allcaps> static analysis : <url> <section> <allcaps> psp </allcaps> will reuse codeql , static analysis , and format checker that are held in cfs . these workflows will not work until nasa / cfs # <number> is merged . <section> ariel adams , <allcaps> asrc </allcaps> federal"
"reuse codeql , format checker , and static analysis workflows <section> when needing to change workflows , one must create an issue and pr for each submodule . this feature would reduce duplication . <section> to reuse workflows , the workflow simply uses <code> and the full path of the workflow . the cfs workflows , or targeted workflows , must include workflow_call and can include inputs seen below . <code> <section> keep it as is . <section> tested in forked cfs : <url> tested in forked <allcaps> osal </allcaps> : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal"
"static analysis workflow missing duplicate check and restricting to main push , remove - - quiet flag <section> missing duplicate check , overly restrictive to main push : <url> remove <code> flag so files processed will be listed : <url> <section> fix <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , check the address in <allcaps> psp </allcaps> get segment stubs <section> checks the correct local variable ( tempaddr ) to see if the data buffer address was set by the test case fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> , run all tests <section> none to <allcaps> fsw </allcaps> stub should work correctly in ut <section> ubuntu <section> joseph hickey , vantage systems , inc ."
"get text segment stubs seem to be bugged <section> looks like the stubs are checking input values vs successful ut_getdatabuffer , which does not make sense to me since it ' s used to decide if the buffer values should be used or not : <url> <url> <section> you will get an uninitialized error on the input pointer if not already set , if it ' s nonzero and you do not set the buffer that will utilize the temp values which does not make sense to me . <section> use buffer values if passed in , otherwise use local dummy segment . <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"replace _init and _fini references in pc - linux <allcaps> psp </allcaps> <section> when compiling the cfs main pc - linux target for ubuntu <number> on <allcaps> risc </allcaps> - v , the build fails with undefined references to the "" _init "" and "" _fini "" symbols . these symbols are used by the <allcaps> psp </allcaps> to get the cfe core text segment addresses . the build works on ubuntu <number> aarch64 . these symbols are deprecated on all targets and only still exist on the x86 and <allcaps> arm </allcaps> targets to support legacy software . the <allcaps> risc </allcaps> - v target does not include them . we can replace them with other symbols such as : __executable_start for _init , and __etext for _fini . <section> just build the main branch of cfs on ubuntu <number> on <allcaps> risc </allcaps> - v . i am using the sifive hifive unleashed board , but <allcaps> qemu </allcaps> can also be used . <section> - sifive hifive unleashed board - os : ubuntu <number> server - versions : main branch ( as of <date> ) <section> alan cudmore / <allcaps> nasa gsfc </allcaps>"
"typos in documentation , print statements , and comments <section> found multiple typos throughout the codebase <section> correct grammar and spelling errors <section> none <section> retroactively created for # <number>"
"psp integration candidate : <number> - <number> - <number> <section> pr # <number> - fix # <number> , check that module type is not invalid pr # <number> - fix # <number> , do not override add_psp_module for coverage test <section> psp checks < <url> cfs bundle checks < <url> <section> see prs <section> ubuntu <section> part of < <url> <section> none <section> <user>"
"fix # <number> , do not override add_psp_module for coverage test <section> implements a differently - named function instead , which does mostly the same thing as the override had done , but does not directly re - add the original subdirectory . this does repeat some info ( e . g . the list of <allcaps> fsw </allcaps> source files ) that was not repeated otherwise , but it works in general . fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> in a configuration that uses several <allcaps> psp </allcaps> modules for hardware access <section> cmake builds the <allcaps> fsw </allcaps> modules correctly <section> ubuntu <section> joseph hickey , vantage systems , inc ."
"override of "" add_psp_module "" for coverage test gets global scope <section> in order to ( attempt to ) implement coverage test for <allcaps> psp </allcaps> modules without redefining the sources for that module , the cmake script currently redefines the <code> function to do something different when building for coverage tests . problem is , this override ends up getting global scope , not directory scope . so in the event that multiple modules are specified and if the psp library gets built first ( which will include coverage test if enabled ) , then any modules built after the psp will fail , because they use the coverage test override function rather than the proper function as defined in <code> <section> create a project utilizing several <allcaps> psp </allcaps> modules / extensions for custom hw access . modules will fail to build when enable_unit_tests is set true , even if they do not contain a coverage test , because the <allcaps> fsw </allcaps> build is using the wrong definition of the <code> function . <section> should build successfully . <section> root of the problem is this override at : <url> <section> ubuntu <section> this function definition ends up getting global scope , not directory scope , so even after returning to the parent directory , this modified definition remains active . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , check that module type is not invalid <section> rather than only calling "" init "" on a "" <allcaps> simple </allcaps> "" module type , just check that it is not invalid instead . even extension types still have an init routine that needs to be called . fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> , including using some hw access extension modules <section> module gets initialized as it should <section> ubuntu <section> joseph hickey , vantage systems , inc ."
"fix # <number> , sleep before exit when printing <section> - fixes # <number> <section> - print before exit [# <number> ] <section> - considering if <number> milliseconds would be better than <number> to save time and have a print . - considering fflush ( stdout ) instead of os_taskdelay <section> paul oberosler , individual"
"fix # <number> , correct various typos in docs and comments <section> fixed various typos in <allcaps> readme </allcaps> docs , comments and explanatory text . - fix # <number> <section> none . all modifications are to non - executable code . <section> none ( minor text changes ) . code execution is unaffected . <section> n / a <section> n / a <section> n / a"
"support test override of <code> defined in <allcaps> psp </allcaps> stubs to support coverage <section> could improve coverage if the <code> could be defined by the test ( need a <allcaps> null </allcaps> case , valid case , and various error cases which can not be done all with one definition ) . <url> <section> provide a way to override / exclude the <allcaps> psp </allcaps> stub definition . <section> none <section> nasa / cfe # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"enable "" format check "" workflow for push to all branches <section> the format check workflow only runs for pull requests or for pushes to "" main "" so it will not run on work done in forks . <section> remove branch restriction for "" push "" trigger and add "" check for duplicates "" job <section> none"
"psp integration candidate : <number> - <number> - <number> # # testing psp checks < <url> cfs bundle checks < <url> # # context part of < <url> # # authors <user> <user> # # description # # # pr # <number> fix # <number> , implement coding standards in codeql # # # pr # <number> fix # <number> , rename doc to docs"
"fix # <number> , implement coding standards in codeql <section> fix # <number> added the duplicate jobs action to avoid duplicate jobs from running . added a separate job for coding standard queries . created two configuration files , one for default queries and security queries and another for jpl rules . <section> testing done on cfe forked repository , arielsadamsnasa / cfe which used the same files , but with different configuration paths . jobs were failing when the entire path of the configuration file were not used . have to use nasa / cfe / . github / codeql / config - name <user> - name . the branch must be included in the path . the codeql analysis workflow will fail for this pr since it is calling for a configuration file in main the main branch . it will not work until the configuration files are merged into main . in the screenshot is the same workflow as in this pull request , but the configuration path is changed to the forked repo and tested branch . image <img> <section> there should be one job for security queries and one job for <allcaps> jpl </allcaps> and <allcaps> misra </allcaps> queries . <section> skip duplicate workflows license : <url> codeql license : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal"
"implement coding standard rules in codeql <section> codeql does not use <allcaps> jpl </allcaps> rules , which is used in the upcoming coding standard . <section> implement <allcaps> jpl </allcaps> rules for codeql . continue using the security queries , but keep them separate from the <allcaps> jpl </allcaps> results . can use two different workflows , one for the coding standard and one for the security queries . <section> might be able to use one workflow , as long as the results can be easily identified as a coding standard issue or security issue . <section> <allcaps> jpl </allcaps> queries are found here : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal"
"format codes <section> a clear and concise description of what the contribution is . - include explicitly what issue it addresses [ e . g . fixes <hashtag> x </hashtag> ] <section> steps taken to test the contribution : <number> . build steps ' . <repeated> ' <number> . execution steps ' . <repeated> ' <section> a clear and concise description of how this contribution will change behavior and level of impact . - <allcaps> api </allcaps> change : x <elongated> ( if applicable ) - behavior change : x <elongated> ( if applicable ) - or no impact to behavior <section> - hardware : [ e . g . pc , sp0 , mcp750 ] - os : [ e . g . ubuntu <number> , <allcaps> rtems </allcaps> <number> , vxworks <number> ] - versions : [ e . g . cfe <number> , <allcaps> osal </allcaps> <number> , <allcaps> psp </allcaps> <number> for mcp750 , any related apps or tools ] <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - if <allcaps> nasa </allcaps> civil servant employee or <allcaps> gsfc </allcaps> contractor on <allcaps> ses ii </allcaps> - address / email / phone and contract / task information ( if applicable ) must be on file - else if company - <section> company <allcaps> cla </allcaps> must be on file ( once per release ) : company <allcaps> cla </allcaps> <url> - else if individual - <section> individual <allcaps> cla </allcaps> must be on file ( once per release ) : individual <allcaps> cla </allcaps> <url>"
"psp integration candidate : <number> - <number> - <number> # # describe the contribution # # # pr # <number> fix # <number> , use <allcaps> osal </allcaps> timebase for <allcaps> cfe </allcaps> timers cleans up stale code from the previous methods of generating 1 hz . adds a new <allcaps> psp </allcaps> module that instantiates an <allcaps> osal </allcaps> abstract timebase for use with cfe services . this single module is used across all psp implementations ( mcp750 , pc - linux , pc - rtems ) . results in 1 hz timing tick on mcp750 will be more accurate . no changes to linux or <allcaps> rtems </allcaps> # # # pr # <number> fix # <number> , modularize the ram , port , and eeprom access fixes segfaults when <code> routines are invoked on linux . converts <code> and <code> into modular components and removes from the "" shared "" directory . the existing implementations become the corresponding "" direct "" module , and are enabled based on the psp module selection . adds a "" notimpl "" variant where all the functions return <code> . this is used on linux or any other system where direct access is not possible . renames the existing <code> module to be <code> for consistency and to avoid confusion with the unit test stubs . # # # pr # <number> fix # <number> , psp module to implement timebase no impact to behavior . implements two <allcaps> psp </allcaps> modules to provide <code> and <code> , one for <allcaps> posix </allcaps> - compliant <allcaps> rtos </allcaps> using <code> and the other specifically for powerpc processors on vxworks that have the <code> routine . clarifies and documents the difference and use cases for <code> and <code> . adds a coverage test for the vxworks <allcaps> psp </allcaps> timebase module and provides an example of how this can be implemented for other modules . # # additional context part of < <url> # # tests psp checks < <url> cfs bundle < <url> # # third party code none # # authors"
"<allcaps> psp </allcaps> integration candidate : <number> - <number> - <number> # # change description and behavior impacts # # # pr # <number> fix # <number> , remove psp configdata global object removes unnecessary global config structure <code> and associated elements infavor of the new version <allcaps> api </allcaps> . # # # pr # <number> fix # <number> , cleanup memory range table the mem pool stats <allcaps> tlm </allcaps> command now works on <number> - bit linux and sends out the expected telemetry packet . converts <code> to internal object ( instead of external ) that should only be accessed via the <allcaps> psp api </allcaps> . replace <code> s with <code> . use full range ( size_max ) in the linux / <allcaps> rtems </allcaps> implementation . # # testing psp < <url> bundle < <url> # # context part of < <url> # # authors <user>"
"fix # <number> , remove psp configdata global object <section> cleans up unneeded global to simplify things . this global config structure is not really necessary . the original intent was to allow dependents ( e . g . <allcaps> cfe </allcaps> ) to get vars at runtime but keep them stored within <allcaps> psp </allcaps> . however for all those cases where <allcaps> cfe </allcaps> needs <allcaps> psp </allcaps> info , an <allcaps> api </allcaps> function is defined to get the info . there should not be any need to read this variable directly . fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> , run all unit tests <section> none <section> ubuntu <number> <section> co - dependent with nasa / cfe # <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use <allcaps> osal </allcaps> timebase for <allcaps> cfe </allcaps> timers <section> add a new <allcaps> psp </allcaps> module that instantiates an <allcaps> osal </allcaps> abstract timebase for use with cfe services . this single module is then used across all <number> implementations ( mcp750 , pc - linux , pc - rtems ) and does not need to be duplicated . cleans up stale code from the previous method ( s ) of generating 1 hz fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> , run all unit tests make sure 1 hz timing ticks are working as expected <section> 1 hz timing tick on mcp750 will be more accurate no changes to linux / <allcaps> rtems </allcaps> <section> mcp750 vxworks <number> ubuntu <number> <allcaps> rtems </allcaps> <number> . <number> ( qemu ) <section> joseph hickey , vantage systems , inc ."
"fix # <number> , psp module to implement timebase <section> implements two <allcaps> psp </allcaps> modules to provide cfe_psp_gettime and cfe_psp_gettimebase , one for <allcaps> posix </allcaps> - compliant <allcaps> rtos </allcaps> using <code> and the other specifically for powerpc processors on vxworks that have the <code> routine . this also clarifies and documents the difference / use cases for cfe_psp_gettime and cfe_psp_gettimebase . finally this includes a coverage test for the vxworks <allcaps> psp </allcaps> timebase module , providing an example of how this can be implemented for other modules . fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> , run all unit tests confirmed timebase operation on mcp750 <section> no impact to behavior <section> ubuntu <number> mcp750 / vxworks <number> <section> this included a fair bit of investigation as to what the cfe_psp_gettime and cfe_psp_get_timebase functions actually do on mcp750 , and why they both exist to begin with . for compatibility , this keeps things mostly as they were as far as <allcaps> api </allcaps> goes ( i . e . neither function is removed / deprecated at this time ) . however now that it is documented what the difference between these functions is , <allcaps> cfe </allcaps> should probably focus on using only cfe_psp_gettime ( ) since it is more platform - agnostic . once existing use cases of cfe_psp_get_timebase ( ) have been transitioned away , it would be a good idea to deprecate it . when using this implementation the time reported by cfe_psp_gettime ( ) is sourced by the same underlying function as cfe_psp_get_timebase ( ) uses . it no longer uses the separate countdown timer within the raven <allcaps> pci </allcaps> device on the mcp750 . this should be more efficient because vxtimebaseget ( ) simply reads a local <allcaps> cpu </allcaps> register , whereas reading the raven register requires <allcaps> pci </allcaps> access and obscure conversion logic . the other benefit is that it does not wrap every <number> seconds , thereby allowing <allcaps> cfe </allcaps> time to be simplified at a future date , too . <section> joseph hickey , vantage systems , inc ."
"ensure all functions in cfe_psp . h have a stub routine defined <section> it is possible ( or even likely ? ) that the set of stub functions in the stub library is not complete . <section> before next release should do a check to make sure all functions defined in cfe_psp . h have a stub implementation defined as well as the normal / real one . <section> see # <number> for recent issue . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , cleanup memory range table <section> a number of cleanup items related to the <allcaps> psp </allcaps> memory range <allcaps> api </allcaps> - make the table itself an internal object - should only be accessed via the <allcaps> psp api </allcaps> . - update to use size_t instead of uint32 - update the linux / <allcaps> rtems </allcaps> implementation to use full range ( size_max ) . fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> issue the mem pool stats <allcaps> tlm </allcaps> command on linux , confirm that the <code> call now succeeds <section> the mem pool stats <allcaps> tlm </allcaps> command now works on <number> - bit linux , and sends out the expected telemetry packet . <section> ubuntu <number> vxworks <number> on mcp750 <allcaps> rtems </allcaps> <number> . <number> on <allcaps> qemu </allcaps> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , modularize the ram , port , and eeprom access <section> this is another attempt at resolving the long - standing issue of platform - specific code in the shared directory which is not easy to replace / override . convert the current "" cfe_psp_ram . c "" and "" cfe_psp_port . c "" routines into modular components , and remove from "" shared "" dir . the existing implementations become the corresponding "" direct "" module , and are enabled based on the psp module selection . also added is a "" notimpl "" variant , where all the functions return cfe_psp_err_not_implemented . this is used on linux or any other system where direct access is not possible . note this also renames the existing "" eeprom_stub "" module to be "" eeprom_notimpl "" for consistency and to avoid any confusion with the unit test stubs . fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> on <allcaps> rtems </allcaps> , vxworks / mcp750 and native linux run all unit tests confirm that the "" direct "" implementation of port / <allcaps> ram </allcaps> access is used only on vxworks build confirm that the "" notimpl "" implementation is used on linux . <section> no longer segfaults if e . g . cfe_psp_port routines are invoked on linux . instead an error code is returned . <section> ubuntu <number> ( native ) mcp750 ( vxworks ) <allcaps> rtems </allcaps> <number> . <number> + <allcaps> qemu </allcaps> <section> joseph hickey , vantage systems , inc ."
"psp integration candidate : <number> - <number> - <number> # # # describe the contribution fix # <number> , add version file fix # <number> , adds a ut stub for cfe_psp_getkerneltextsegmentinfo # # # testing psp tests < <url> bundle tests < <url> <section> # # # pr # <number> includes <code> in the cmake source list , which was mistakenly omitted previously . # # # pr # <number> applied the patch and confirmed that cs cmake unit tests build . unit tests relying on <code> will build . # # # additional context part of < <url> # # # authors <user> <user>"
"fix # <number> , add version file <section> cfe_psp_version . c should have been included in the source list , but was mistakenly omitted in previous pr . fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> , run unit tests <section> references to version <allcaps> api </allcaps> will now successfully link <section> ubuntu <number> <section> corrects an omission from # <number> . required for nasa / cfe # <number> to work . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , add stub for cfe_psp_getkerneltextsegmentinfo <section> fix # <number> , adds a ut stub for cfe_psp_getkerneltextsegmentinfo <section> applied the patch and confirmed that cs cmake unit tests build . <section> unit tests relying on cfe_psp_getkerneltextsegmentinfo will build . <section> - ubuntu <number> - main branch of cfs bundle <section> - elizabeth timmons / <allcaps> nasa gsfc </allcaps>"
"unit test stub needed for cfe_psp_getkerneltextsegmentinfo <section> there is no unit testing stub for cfe_psp_getkerneltextsegmentinfo . this prevents unit testing the checksum ( cs ) application . <section> steps to reproduce the behavior : <number> . build cs cmake unit tests this produces the error "" undefined reference to ` cfe_psp_getkerneltextsegmentinfo ' "" . <section> unit tests should build . <section> if applicable , add references to the software . <section> - ubuntu <number> - "" eval - cert2 "" branch of the cfs repository <section> elizabeth timmons / <allcaps> nasa gsfc </allcaps>"
"psp integration candidate : <number> - <number> - <number> # # describe the contribution fixes # <number> - make <allcaps> psp </allcaps> more modular fix # <number> - use quotes for local includes fix # <number> , add contributing guide # # tests part of < <url> # # behavior changes # # # pr # <number> this is a very simple approach to addressing the issue of incompatible / non - portable code blobs in "" shared "" directory of the <allcaps> psp </allcaps> . it uses the same modular init pattern as is used elsewhere in <allcaps> cfe </allcaps> . cmake is used to generate a list of "" base "" modules correlating with the selected <allcaps> psp </allcaps> ( i . e . pc - linux , mcp750 - vxworks , etc ) . these modules are then initialized ( in order ) before the rest of <allcaps> psp </allcaps> runs . the "" direct write "" <allcaps> eeprom </allcaps> is not used unconditionally . instead the proper eeprom implementation module is selected based on which <allcaps> psp </allcaps> is selected . mcp750 uses direct write , pc - linux uses an mmap file , and pc - rtems uses a stub ( not implemented ) . it is currently not easy to override items in the "" shared "" directory even for platforms which it does not apply . for example , in the "" cfe_psp_ram . c "" and "" cfe_psp_port . c "" files this contains code that directly writes to physical memory addresses , which may work on mcp750 , but will likely segfault on an pc - linux system . the code should be better structured as modules so the "" correct "" implementation can be used for each system without breaking the other system . there really should not be much in the <code> directory ( the existence of such a directory implies its not platform - specific , but yet its in the <allcaps> psp </allcaps> ) . # # # pr # <number> replaces <code> used on non - system header <code> s with <code> # # # pr # <number> added a contributing guide that links to the main cfs contributing guide . # # additional context part of < <url> # # authors <user> <user> <user>"
"fix # <number> , use quotes for local includes <section> fix # <number> - use quotes for local includes <section> build / run unit tests <section> none <section> - hardware : cfs dev server - os : ubuntu <number> - versions : cfs bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"<allcaps> hotfix </allcaps> integration candidate : <number> - <number> - <number> <section> bump to v1 . <number> - rc1 + dev82 update readme , fix <allcaps> url </allcaps> for ic - <number> - <number> - <number> entry in changelog"
integration candidate : <number> - <number> - <number> <section> <allcaps> hotfix </allcaps> - for older cmake support <section> ci <section> see prs <section> ci <section> none <section> none <section> <user>
integration candidate : <number> - <number> - <number> <section> <allcaps> hotfix </allcaps> - for older cmake support <section> ci <section> see prs <section> ci <section> none <section> none <section> <user>
"fix # <number> , modular psp implementation <section> this is a very simple approach to addressing the issue of incompatible / non - portable code blobs in "" shared "" directory of the <allcaps> psp </allcaps> . it uses the same modular init pattern as is used elsewhere in <allcaps> cfe </allcaps> . cmake is used to generate a list of "" base "" modules correlating with the selected <allcaps> psp </allcaps> ( i . e . pc - linux , mcp750 - vxworks , etc ) . these modules are then initialized ( in order ) before the rest of <allcaps> psp </allcaps> runs . fixes # <number> <section> build and run <allcaps> cfe </allcaps> for pc - rtems and pc - linux confirm the correct / expected <allcaps> eeprom </allcaps> implementation was used <section> the "" direct write "" <allcaps> eeprom </allcaps> is not used unconditionally . instead the proper eeprom implementation module is selected based on which <allcaps> psp </allcaps> is selected . mcp750 uses direct write , pc - linux uses an mmap file , and pc - rtems uses a stub ( not implemented ) . <section> ubuntu <number> ( native ) <allcaps> rtems </allcaps> <number> . <number> <section> this pattern could be applied to much more of the <allcaps> psp </allcaps> stuff . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , add psp_module_api interface target <section> adds a new target for <allcaps> psp </allcaps> modules and use this to propagate the compile definitions and include directories for all <allcaps> psp </allcaps> code . this is basically analogous to the <code> interface library provided by <allcaps> cfe </allcaps> , but for <allcaps> psp </allcaps> code . it is used by <allcaps> psp </allcaps> internal components and extensions . the public / external <allcaps> psp api </allcaps> is still provided by the interface properties on the normal ( static ) <allcaps> psp </allcaps> library . fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> run all unit tests <section> no impact to behavior ( build system change only ) <section> ubuntu <number> <section> nasa / cfe # <number> will also require this . <section> joseph hickey , vantage systems , inc ."
"add "" psp_module_api "" interface target <section> <allcaps> psp </allcaps> should provide and use an interface library target for all of its own modules . this simplifies the build . <section> add a <code> interface library target to go along with the <code> interface target being added in nasa / cfe # <number> . fix remaining uses of directory - scope properties and change to target properties . <section> continuation of # <number> /# <number> - where # <number> just made <allcaps> psp </allcaps> work with <allcaps> cfe </allcaps> after <allcaps> cfe </allcaps> transitioned to interface libraries , this makes <allcaps> psp </allcaps> also use interface libraries internally and for all its components . <section> joseph hickey , vantage systems , inc ."
integration candidate : <number> - <number> - <number> <section> pr # <number> pr # <number> pr # <number> pr # <number> <section> ci <section> see prs <section> ci <section> none <section> none <section> <user> <user> <user>
"fix # <number> , add <allcaps> psp </allcaps> version <allcaps> api </allcaps> <section> add a <allcaps> psp </allcaps> implementation of the version <allcaps> api </allcaps> discussed in nasa / cfs # <number> fixes # <number> <section> build <allcaps> cfe </allcaps> and sanity check <section> adds an <allcaps> api </allcaps> to get version info rather than using macros / globals . this just returns the values of the globals . <section> ubuntu <number> <section> attempting to make the version info patterns consistent between all components . see nasa / cfs # <number> for full background . <section> joseph hickey , vantage systems , inc ."
"implement <allcaps> psp </allcaps> version functions <section> a simple <allcaps> api </allcaps> to get version info was discussed in nasa / cfs # <number> . <section> <allcaps> psp </allcaps> should implement the same <allcaps> api </allcaps> discussed there , to evolve the current macros / globals . <section> already implemented in nasa / osal # <number> - this will make <allcaps> psp </allcaps> consistent with that . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use cmake to publish interface details <section> use <code> and <code> to propagate the interface details for <allcaps> psp </allcaps> fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> , confirm building successfully <section> none <section> ubuntu <number> <section> this becomes required to support nasa / cfe # <number> <section> joseph hickey , vantage systems , inc ."
"update <allcaps> psp </allcaps> library to work with cmake interface logic <section> <allcaps> psp </allcaps> should "" publish "" its public <allcaps> api </allcaps> interface via cmake using target_include_directories and target_compile_definitions such that other modules that link to <allcaps> psp </allcaps> ( e . g . <allcaps> cfe </allcaps> core ) will automagically get the include dirs and definitions without having to hard - code them . <section> use "" target_include_directories "" and "" target_compile_definitions "" to advertise the interface <section> required for moving toward an interface - based build . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , fix comment style <section> fixes # <number> remove the unused code <section> build and run unit test <section> no impact to behavior <section> ubuntu <number> <section> alex campbell <allcaps> gsfc </allcaps>"
"implement "" cfe_psp_getversion ( ) "" function <section> as described in nasa / osal # <number> it is better to acquire version info strings / values at runtime rather than via a macro , because of where and how it will get evaluated . <allcaps> psp </allcaps> is actually in better shape than <allcaps> osal </allcaps> / <allcaps> cfe </allcaps> because <code> currently refers to a string which is stored in global_psp_configdata . but still , it would be better and more conventional to get this value via an <allcaps> api </allcaps> call . <section> implement <code> and related apis to get the various version strings . <section> leave in global object . <section> see details in nasa / osal # <number> <section> joseph hickey , vantage systems , inc ."
"<allcaps> psp </allcaps> integration candidate : <number> - <number> - <number> <section> fix # <number> , add workflow timeout and format check fix # <number> , apply standard formatting fix # <number> , add codeql analysis to workflow fix # <number> , add missing ' + dev ' string to development version report <section> see < <url> <section> pr # <number> - updates continuous integration workfow by adding static analysis with timeout and code format check . adds status badges to readme and removes old travisci artifacts . pr # <number> - adds codeql analysis to continuous integration pr # <number> - apply standard formatting to psp codebase . only changes whitespace . pr # <number> - adds missing "" + dev "" to development version output <section> ubuntu <number> <section> part of < <url> <section> none <section> <user> <user>"
"fix # <number> , add codeql analysis to workflow <section> fix # <number> - adds codeql analysis differences from bundle - just builds psp - pc - linux , has timeout <section> ran on fork <section> adds code ql analysis on push to main and pull requests ( to main ) <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , apply standard formatting <section> fix # <number> - apply standard formating <section> whitespace changes only , build confirmed <section> none <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> note - did refactor a couple comments which looked ugly after autoformat , trivial to redo in a way that looks good ( to me ) and works with the autoformatting <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , add workflow timeout and format check <section> fix # <number> - update static analysis with timeout and add format check into github workflow , includes badges in readme and removal of old travis config <section> ci <section> added format check in workflow and timeouts <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"support vxworks "" muncher "" for c + + <section> vxworks requires a tool called a "" muncher "" in order to generate stubs required for static destructors / constructors to run , when building for c + + . <section> run the muncher . an example implementation is below : in vxworks - <allcaps> cfe </allcaps> . cmake , change <code> to <code> somewhere in the target - specific <allcaps> psp </allcaps> cmakefiles or toolchain file , define something like ( the below is for sp0 - s , derived from the workbench - generated makefiles ) <code> <section> leave <code> unset so it can be overridden in the toolchain file . <section> n / a <section> john n pham , northrop grumman"
"psp integration candidate : <number> - <number> - <number> <section> fix # <number> , refactor ut_clearforcefail to ut_cleardefaultreturnvalue fix # <number> , refactor cfe_psp_moduletype_t enum fix # <number> , create security policy <section> see <url> <section> pr # <number> - add <code> with instructions on reporting vulnerabilities . pr # <number> - rename <code> as <code> to reflect < <url> pr # <number> - remove unused elements in <code> enum to avoids irregular enum warning <section> ubuntu <number> <section> part of <url> <section> none <section> <user> <user> <user>"
"fix # <number> , add missing + dev to development version string <section> fix # <number> , version string not reported correctly increase size of <code> element of <code> to char [ <number> ] and rename as <code> <section> ran on local linux host , cfe <allcaps> evs </allcaps> output now shows correct format for psp development version <code> <section> version report matches osal and cfe for development versions . increased structure <section> ubuntu <section> none <section> none <section> <user>"
"psp integration candidate : <number> - <number> - <number> <section> fix # <number> , use <allcaps> osal </allcaps> time conversion / access methods <section> see < <url> <section> pr # <number> - instead of accessing <code> member values directly , use the <allcaps> osal </allcaps> - provided conversion and access methods . this provides independence and abstraction from the specific <code> definition and allows <allcaps> osal </allcaps> to transition to a <number> bit value . <section> ubuntu <number> <section> part of < <url> <section> none <section> <user>"
fix # <number> create <allcaps> psp </allcaps> security policy
fix # <number> create <allcaps> psp </allcaps> security policy
"fix # <number> , refactor cfe_psp_moduletype_t enum <section> fix # <number> - avoids irregular enum warning <section> build bundle and unit test ( passed ) <section> none other than eliminates static analysis warning <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"<allcaps> psp </allcaps> integration candidate : <number> - <number> - <number> <section> fix # <number> , add cppcheck github action workflow <section> see github actions < <url> <section> pr # <number> - adds cppcheck github actions workflow file <section> ubuntu <number> <section> part of < <url> <section> none <section> <user>"
"fix # <number> , re - add automated static code analysis <section> fix # <number> <section> see action runs in fork : < <url> <section> static analysis workflow runs on pull requests and push . workflow saves log file as an artifact for analysis . <section> n / a <section> n / a <section> n / a"
"fix # <number> , use <allcaps> osal </allcaps> time conversion / access methods <section> instead of accessing <code> member values directly , use the <allcaps> osal </allcaps> - provided conversion and access methods . this provides independence / abstraction from the specific <code> definition and allows <allcaps> osal </allcaps> to transition to a <number> bit value . fixes # <number> <section> build and run tests , sanity check <allcaps> cfe </allcaps> <section> none <section> ubuntu <number> ( native ) <allcaps> rtems </allcaps> <number> . <number> + pc686 ( qemu ) <section> also adjusts the conversion factors within in <code> to get a more precise result on vxworks . linux / <allcaps> rtems </allcaps> are just pass - thru to <allcaps> osal </allcaps> anyway . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , refactor ut_clearforcefail to ut_cleardefaultreturnvalue <section> fixes # <number> rename ut_clearforcefail to ut_cleardefaultvalue <section> build and run unit test <section> no impact to behavior <section> ubuntu <number> <section> dependant on nasa / osal # <number> <section> alex campbell <allcaps> gsfc </allcaps>"
change ut_clearforcefail to ut_cleardefaultreturnvalue <section> ut_clearforcefail was refactored to ut_cleardefaultreturnvalue for nasa / osal # <number> . it needs to have its name changed here as well . <section> part of nasa / osal # <number> <section> alex campbell <allcaps> gsfc </allcaps>
"<allcaps> psp </allcaps> integration candidate : <number> - <number> - <number> <section> fix # <number> , updated readme file for pc - rtems <allcaps> psp </allcaps> and added a new readm … fix # <number> , remove obsolete os_taskregister comment <section> see <url> <section> pr # <number> - updates the readme for <allcaps> rtems </allcaps> and adds <code> . the changes include removing references to the <allcaps> cexp </allcaps> module loader , and describing the development environment setup for <allcaps> rtems </allcaps> <number> . pr # <number> - remove obsolete os_taskregister comment <section> ubuntu <number> <section> part of <url> <section> none <section> <user> <user>"
"cleanup <allcaps> rtems </allcaps> ifdefs using cmake <user> please flesh out , based on conversation from # <number> _originally posted by <user> in <url>"
reformat and refine readme for <allcaps> rtems </allcaps> - combine into a single readme and have the <allcaps> rtems </allcaps> <number> as an appendix - maybe reformat from . txt to markdown ( open a new issue ) _originally posted by <user> in <url>
"fix # <number> , remove obsolete os_taskregister comment <section> fix # <number> , remove obsolete os_taskregister comment ( really only called for es tasks . <repeated> remaining comment is what is important ) <section> none , comment only <section> none <section> n / a <section> nasa / osal # <number> <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"psp integration candidate : <number> - <number> - <number> <section> fix # <number> , refactoring ut_setforcefail to ut_setdefaultreturnvalue fix # <number> , use size_t in <allcaps> psp </allcaps> stubs <section> see events for "" github actions test "" at < <url> <section> pr # <number> - rename <code> to <code> since some functions that retain more than <number> value are not necessarily failing . pr # <number> - use of the size_t type instead of uint32 in unit - tests to avoid a compiler type mismatch error on some platforms . <section> ubuntu <number> <section> part of < <url> <section> none <section> <user> <user>"
"fix # <number> , update readme file for pc - rtems <allcaps> psp </allcaps> and added a new readme file for <allcaps> rtems </allcaps> <number> <section> fix # <number> this change updates the <allcaps> readme </allcaps> . txt file and adds a readme_rtems_5 . txt for the pc - rtems <allcaps> psp </allcaps> . no code changes in the <allcaps> psp </allcaps> were necessary to support <allcaps> rtems </allcaps> <number> for the pc - rtems <allcaps> psp </allcaps> . the changes include removing references to the <allcaps> cexp </allcaps> module loader , and describing the development environment setup for <allcaps> rtems </allcaps> <number> . <section> no testing is required for these <allcaps> readme </allcaps> changes , but i did create both the <allcaps> rtems </allcaps> <number> and <allcaps> rtems </allcaps> <number> development environments according to the <allcaps> readme </allcaps> files . i also tested building and running the cfs bundle on both <allcaps> rtems </allcaps> <number> and <allcaps> rtems </allcaps> <number> . <section> - no impact to behavior <section> - hardware : <allcaps> qemu </allcaps> i686 - os : <allcaps> rtems </allcaps> - versions : <allcaps> rtems </allcaps> <number> and <allcaps> rtems </allcaps> <number> <section> n / a <section> n / a <section> alan cudmore , <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> code <number>"
"fix # <number> , use size_t in <allcaps> psp </allcaps> stubs <section> recent <allcaps> api </allcaps> updates require use of the <code> type instead of <code> . this change is required at the same time as nasa / osal # <number> is merged ( dependency ) . fixes # <number> <section> build and run all unit tests . <section> none . no <allcaps> fsw </allcaps> changes , only ut stub update here . <section> ubuntu <number> <section> this is only ut stubs . <allcaps> fsw </allcaps> requires <allcaps> api </allcaps> change to use <code> and that will be a separate issue / pr . ( see # <number> ) <section> joseph hickey , vantage systems , inc ."
"refactor <allcaps> psp </allcaps> "" memory area "" <allcaps> api </allcaps> <section> <allcaps> psp </allcaps> implements dedicated apis to retrieve the pointer / size of special memory areas such as es reset area , <allcaps> cds </allcaps> , <allcaps> ram </allcaps> disk , etc . - [ ] cfe_psp_getuserreservedarea - [ ] cfe_psp_getvolatilediskmem - [ ] cfe_psp_getresetarea - [ ] cfe_psp_getkerneltextsegmentinfo - [ ] cfe_psp_getcfetextsegmentinfo - [ ] cfe_psp_getcdssize <section> - currently these apis use <code> type for sizes . this should change to <code> . - each memory area has a distinct / separate <allcaps> api </allcaps> . should change to a more extensible approach , allowing more memory blocks to be allocated without creating a new <allcaps> api </allcaps> for each one ( e . g . id based , where ids can be more easily added in the future , but functions stay the same ) . <section> creating a better <allcaps> api </allcaps> here can help clean up some issues in the <allcaps> cfe </allcaps> side where there is only one "" reset area "" that is part of es . however both <allcaps> evs </allcaps> and <allcaps> time </allcaps> core apps also store data here , and therefore this creates issues where these subsystems have to make their private data structs into public ones so they can be combined into this area . cleaning this up would help make the <allcaps> cfe </allcaps> core apps more independent and modular . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , refactor ut_setforcefail to ut_setdefaultreturnvalue describe the contribution fixes # <number> by changing ut_setforcefail to ut_setdefaultreturnvalue testing performed build and run unit test expected behavior changes no impact to behavior system ( s ) tested on ubuntu <number> additional context dependant on nasa / osal # <number> contributor info - all information <allcaps> required </allcaps> for consideration of pull request alex campbell - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"integration candidate : <number> - <number> - <number> <section> fix # <number> , set kernel task name for <allcaps> osal </allcaps> tasks <section> see framework - bundle ci : <url> <section> pr # <number> - use event callback mechanism to invoke pthread_setname_np ( ) such that the os kernel is informed of the <allcaps> osal </allcaps> task name . <code> filesystem on linux now has actual task name , instead of all being core - cpu1 . the <code> <allcaps> api </allcaps> requires <code> to be defined when compiling - this can be local to <allcaps> psp </allcaps> . <allcaps> hotfix </allcaps> - move variable declaration in fsw / pc - linux / src / cfe_psp_start . c <allcaps> hotfix </allcaps> - set <allcaps> revision </allcaps> to "" <number> "" to indicate development version in version . h <section> ubuntu on travis ci <section> part of <url> <section> none <section> <user>"
"fix # <number> , set kernel task name for <allcaps> osal </allcaps> tasks <section> use event callback mechanism to invoke <code> such that the os kernel is informed of the <allcaps> osal </allcaps> task name . fixes # <number> <section> build and sanity test <allcaps> cfe </allcaps> check <code> and confirm that the correct name is shown for <allcaps> cfe </allcaps> tasks e . g . cfe_evs , cfe_sb , etc . <section> <code> filesystem on linux has actual task name , instead of all being <code> . <section> ubuntu <number> <section> the <code> <allcaps> api </allcaps> requires <code> to be defined when compiling - this can be local to <allcaps> psp </allcaps> . <section> joseph hickey , vantage systems , inc ."
"integration candidate : <number> - <number> - <number> <section> fix # <number> <section> bundle ci : <url> <section> pr # <number> - improves the module id lookup when getting the <allcaps> cfe </allcaps> core text segment info . vxworks <allcaps> psp </allcaps> should use the real module name , not assume cfe - core . o when getting text segment info <section> ubuntu ci <section> part of < <url> <section> none <section>"
"add a functional test for cfe_psp_getcfetextsegmentinfo <section> related to # <number> - really need functional tests for all the apis , but there was a bug in this routine ( if executable file name did not match hardcoded value ) that wasn ' t noticed until verification testing a different app . <section> add a functional test , should check for proper behavior or not_implemented . <section> none <section> # <number> , functional test brought up in discussion for # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"ces1503 requirement compliance ( clear volatile file system ) relies on actual power cycle or wrapper logic not included in bundle <section> current requirement verbiage : upon a power - on reset , the cfe shall clear the volatile file system . when executing in the context in which a power on reset command does not actually cause a true power on reset ( typical when running locally in a development context from a command line ) the bundle does not autonomously cause a power cycle or clear the volatile file system due to the risks of doing this on a development platform . a "" wrapper "" or some other external action is necessary in this context to be compliant with ces1503 . typical real deployments have the wrapper logic to cause a power on reset ( which clears the volatile file system ) . note this also means processor resets and power on resets when running from the command line do not actually restart the software . typically there ' s a background service ( systemd or similar ) that would perform those actions . <section> on a linux system : <number> . place a file in the volatile file system - / dev / shm / osal : <allcaps> ram </allcaps> / <number> . start the software with - <allcaps> rpo </allcaps> ( power - on reset ) option . <number> . verify that the file still exists . <section> example wrapper logic should be included to demonstrate a pathway to compliance with this requirement . other potential solution - provide a setup ( docker ? vm ? ) in which this could be implemented / demonstrated . <section> os : ubuntu - <number> versions : cfe : v6 . <number> + dev295 ; osal : v5 . <number> + dev247 ; psp : v1 . <number> . <number> <section> dan knutsen <allcaps> nasa </allcaps> / goddard <allcaps> edit </allcaps> - updated per <allcaps> ccb </allcaps> discussions by jacob hageman"
"fix # <number> , do not assume a specific core name <section> improve the module id lookup when getting the <allcaps> cfe </allcaps> core text segment info . - ideally get the id directly from what was loaded by startcfecore - as a fallback use the actual <allcaps> cfe </allcaps> core name from the configdata do not use a hardcoded name . fixes # <number> <section> build and run unit tests <section> vxworks <allcaps> psp </allcaps> should use the real module name , not assume <code> when getting text segment info <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"integration candidate <number> - <number> - <number> <section> fix # <number> fix # <number> <section> see bundle pr - <url> <section> pr # <number> - use the osal_id_t typedef whenever dealing with an <allcaps> osal id </allcaps> value . pr # <number> - resolves build error regarding redefinition of <allcaps> ppc </allcaps> macros in the coverage test , when building on the actual ppc / vxworks target . <section> bundle ci , ubuntu <section> part of <url> <section> none <section> <user>"
"fix # <number> , redefinition of macros in <allcaps> ppc </allcaps> vxworks unit test build <section> fix # <number> resolves build error regarding redefinition of <allcaps> ppc </allcaps> macros in the coverage test , when building on the actual ppc / vxworks target . this is due to the fact that the system limits . h file implicitly provides these <allcaps> ppc </allcaps> symbols . it does not appear that there are any current test cases that depend on values of these symbols . <section> build verification only at this time ( resolves compile error ) <section> none <section> <allcaps> gsfc </allcaps> vxworks build machine ( gs582w - cfelnx ) <section> joseph hickey , vantage systems , inc ."
"no error message emitted when shmget ( ) fails . <section> on certain platforms , <code> may fail with <code> but the error handler does not call <code> . interestingly enough , replacing the <code> call with regular <code> worked and displays an error message . this happened to me with a raspberry pi zero when <code> was left at the default of <code> . this can be fixed by reducing the size to <code> . <section> steps to reproduce the behavior : <number> . clone cfs on an ubuntu <number> x86_64 host machine with <allcaps> arm </allcaps> cross compilers ( arm - linux - gnueabihf - gcc version <number> . <number> ) . <number> . copy the build config files for cpu1 to cpu2 and modify <code> for <allcaps> arm </allcaps> ( change architecture and compiler paths ) . <number> . edit <code> to compile for cpu2 . <number> . build for cpu2 , copy the directory <code> to the target machine <number> . run on the target machine ( a raspberry pi zero ) with <code> <number> . cfs exits with error code <number> ( - <number> as a signed integer ) , but no error message is observed . <section> cfs should either launch or fail with an error message . <section> cfs exits with error code - <number> but no error message . <code> <section> - raspberry pi zero - os : linux raspberrypi <date> + # <number> mon <date> <time> <allcaps> bst </allcaps> <number> armv6l <allcaps> gnu </allcaps> / linux - versions : current submodule versions listed in github . com / nasa / cfs on <date> . <section> jacob killelea"
"fix # <number> , update <allcaps> psp </allcaps> to use osal_id_t <section> use the osal_id_t typedef whenever dealing with an <allcaps> osal id </allcaps> value . fixes # <number> <section> build and sanity test <allcaps> cfe </allcaps> on all supported platforms <section> none <section> ubuntu <number> ( native ) <allcaps> rtems </allcaps> <number> . <number> / pc686 ( <allcaps> qemu </allcaps> ) on ubuntu <number> host vxworks <number> <section> this is for consistency with other components and to future proof against type changes . <section> joseph hickey , vantage systems , inc ."
"add support for vxworks <number> <section> cfs traditionally has supported vxworks <number> . there are projects interested in using vxworks <number> with cfs , so support must be added . this requires work in <allcaps> psp </allcaps> and <allcaps> osal </allcaps> . <section> an ideal solution is to support both vxworks <number> and <number> with as little cloning of old vxworks <number> as possible . on <allcaps> psp </allcaps> , the current work is to copy mcp750 - vxworks for the working platform . ( <number> ) <allcaps> osal </allcaps> ' s goal is to have the vxworks osal support both <number> and <number> . <section> <section> <section> steven seeger / embedded flight systmes , inc . / <allcaps> gsfc </allcaps> code <number>"
"integration candidate <number> - <number> - <number> <section> fix # <number> fix # <number> <section> bundle ci - <url> <section> pr # <number> - sets the stub config data spacecraft id to historical value 0x 4 2 , was <number> . pr # <number> - installs unit test to target directories . <section> ubuntu - ci <section> <url> <section> jacob hageman , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>"
"vxworks7 <section> this is changes for vxworks7 , built on top of a standalone branch to solve several wconversion warnings when compiling for the platform . <section> i built it and ran my environment with cf <number> on a <allcaps> ppc </allcaps> <number> with vxworks <number> . <section> none , but this branch suggests some small <allcaps> api </allcaps> typing changes . <section> powerpc <number> ( dual - core <number> - bit powerpc ) vxworks <number> <section> there were some issues building base stuff with conversion and cast - align issues with the vxworks7 <number> - bit powerpc toolchain . <section> steven seeger , <allcaps> gsfc </allcaps> - <number> . embedded flight systems , inc ."
"<number> . x <section> a clear and concise description of what the contribution is . - include explicitly what issue it addresses [ e . g . fixes <hashtag> x </hashtag> ] <section> steps taken to test the contribution : <number> . build steps ' . <repeated> ' <number> . execution steps ' . <repeated> ' <section> a clear and concise description of how this contribution will change behavior and level of impact . - <allcaps> api </allcaps> change : x <elongated> ( if applicable ) - behavior change : x <elongated> ( if applicable ) - or no impact to behavior <section> - hardware : [ e . g . pc , sp0 , mcp750 ] - os : [ e . g . ubuntu <number> , <allcaps> rtems </allcaps> <number> , vxworks <number> ] - versions : [ e . g . cfe <number> , <allcaps> osal </allcaps> <number> , <allcaps> psp </allcaps> <number> for mcp750 , any related apps or tools ] <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - if <allcaps> nasa </allcaps> civil servant employee or <allcaps> gsfc </allcaps> contractor on <allcaps> ses ii </allcaps> - address / email / phone and contract / task information ( if applicable ) must be on file - else if company - <section> company <allcaps> cla </allcaps> must be on file ( once per release ) : company <allcaps> cla </allcaps> <url> - else if individual - <section> individual <allcaps> cla </allcaps> must be on file ( once per release ) : individual <allcaps> cla </allcaps> <url>"
"fix # <number> , set stub spacecraft id to historical value ( 0x 4 2 ) <section> this is the pr copy of # <number> , just for the main branch ( via the integration - candidate branch ) . fix # <number> - set the stub config data spacecraft id to historical value 0x 4 2 , was <number> . <section> nominal build / test , passed . <section> anything using the stub config data will now get the default . the point is really to reduce confusion the mismatch could cause . nothing should actually be using this stub data directly . <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main ( + cfe / osal main ) + this change <section> nasa / cfe # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"integration candidate : <number> - <number> - <number> <section> fix # <number> fix # <number> <section> bundle ci - <url> <section> pr # <number> - adds <code> pr # <number> - removes classic make artifacts <section> ubuntu - ci <section> <url> <section> jacob hageman , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>"
"remove classic make artifacts <section> classic make no longer supported , * . mak files not used . <code> <section> remove <section> n / a <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"integration candidate <number> - <number> - <number> <section> pr # <number> <section> bundle ci - <url> <section> pr # <number> - provide a new framework and perform <allcaps> psp </allcaps> coverage tests . new coverage test executable is built and several files within <allcaps> psp </allcaps> are targeted . <section> ubuntu <section> part of nasa / cfs # <number> <section> none <section> joseph hickey , vantage systems , inc ."
"fix # <number> , reverted broken include path change <section> fix # <number> , broken include paths <section> build on vxworks host <section> builds without errors . <section> - cfs vxworks host - os : vxworks <number> - versions : bundle / w this change <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"resolve # <number> , add baseline and build to version . h <section> resolve # <number> <section> steps taken to test the contribution : built on top of current integration candidate built with other integration candidates as well as with nasa / osal # <number> and nasa / cfe # <number> <section> new macros defined . no changes on it ' s own . when combined with nasa / cfe # <number> and nasa / osal # <number> then startup reporting now looks like < img width = "" <number> "" alt = "" screen shot <number> - <number> - <number> at <number> <number> <number> am "" src = "" <url> < img width = "" <number> "" alt = "" screen shot <number> - <number> - <number> at <number> <number> <number> am "" src = "" <url> < img width = "" <number> "" alt = "" screen shot <number> - <number> - <number> at <number> <number> <number> am "" src = "" <url> <section> docker ubuntu - based gcc image on <allcaps> osx </allcaps> <section> also tested with nasa / osal # <number> and nasa / cfe # <number> <section> none <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>"
"integration candidate : <number> - <number> - <number> <section> fix # <number> <section> bundle ci - <url> <section> pr # <number> - restructure code to make more amicable for rebuilding in a unit test environment . no major changes , primarily just shifting code between locations / headers to support unit testing . pr # <number> - adds a char element <code> to <code> . defines new macros for the build number and the build baseline . <section> ubuntu - ci <section> part of <url> <section> none <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps> joseph hickey , vantage systems , inc ."
"integration candidate : <number> - <number> - <number> <section> fix # <number> <section> bundle ci : <url> <section> pr # <number> - store the size of the stored data into the exception record on mcp750 - vxworks platform . <section> ubuntu : bionic <section> part of nasa / cfs # <number> <section> none <section> joseph hickey , vantage systems , inc ."
"fix # <number> , <allcaps> psp </allcaps> coverage unit test <section> add a framework and example for coverage test of the <allcaps> psp </allcaps> code . fix # <number> <section> build and run unit test build and sanity check <allcaps> cfe </allcaps> ( no changes to <allcaps> fsw </allcaps> ) <section> new <allcaps> psp </allcaps> coverage test executable is built , and several files within <allcaps> psp </allcaps> are targeted . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , make separate targets for <allcaps> psp </allcaps> <section> restructure code to make more amicable for rebuilding in a unit test environment . no major changes , primarily just shifting code between locations / headers to support unit testing . fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> on <allcaps> rtems </allcaps> and linux run all unit tests and confirm passing . <section> no impact to behavior . <section> ubuntu <number> <allcaps> rtems </allcaps> <number> . <number> via <allcaps> qemu </allcaps> / pc686 <section> makes the code structure better for unit testing . <section> joseph hickey , vantage systems , inc ."
"integration candidate : <number> - <number> - <number> <section> fix # <number> <section> <url> <section> pr # <number> - this changes the <allcaps> psp </allcaps> reference to be compatible with the change in nasa / osal # <number> making the <allcaps> bsp </allcaps> modules more generic and changes the name . <section> ubuntu : bionic <section> part of nasa / cfs # <number> <section> joseph hickey , vantage systems , inc ."
"integration candidate : <number> - <number> - <number> <section> fix # <number> <section> bundle ci - <url> <section> pr # <number> - replace ' os_volumetable ' with <code> in all psps . <section> ubuntu bionic <section> part of nasa / cfs # <number> <section> joseph hickey , vantage systems , inc ."
"integration candidate <allcaps> combined </allcaps> <number> - <number> - <number> and <number> - <number> - <number> <section> fixes # <number> ans # <number> <section> see prs bundle ci - <url> <section> pr # <number> - removes non - termination string warnings when building with gcc9 . pr # <number> - exception handling is now implemented on <allcaps> posix </allcaps> . there is no longer a separate handler for <allcaps> sigint </allcaps> - it is now treated as an exception and goes through the normal process which ends up "" restarting "" <allcaps> cfe </allcaps> . on pc - linux causes the process to exit normally . there is now a mechanism to capture the <allcaps> ctrl </allcaps> + c exception code and use it during normal test cycles . <section> see prs <section> part of nasa / cfs # <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , implement exception storage in <allcaps> psp </allcaps> <section> implements exception capture and storage within the <allcaps> psp </allcaps> . provides a new <allcaps> api </allcaps> so that <allcaps> cfe </allcaps> can poll for exceptions at a later time and also record the information in the er log . <section> add a divide by zero "" bug "" to sample_app confirm that the <allcaps> psp </allcaps> captures the exception context correctly and it is later logged by <allcaps> cfe </allcaps> confirm <allcaps> sigint </allcaps> , <allcaps> sigquit </allcaps> , and <allcaps> sigterm </allcaps> are appropriately handled on <allcaps> posix </allcaps> <section> exception handling is now implemented on <allcaps> posix </allcaps> . the initial config will capture arithmetic errors ( <allcaps> sigfpe </allcaps> ) as well as <allcaps> sigint </allcaps> and <allcaps> sigterm </allcaps> . the latter is notable in that there is no longer a separate handler for <allcaps> sigint </allcaps> - it is now treated as an exception and goes through the normal process which ends up "" restarting "" <allcaps> cfe </allcaps> , which on pc - linux causes the process to exit normally . importantly , as <allcaps> ctrl </allcaps> + c is frequently used during testing , this means that there is now a mechanism through which the exception code will get used during normal test cycles . otherwise the code is very infrequently used and could suffer from bit - rot . <section> ubuntu <number> <allcaps> lts </allcaps> vxworks <number> on mcp750 i686 - rtems4 . <number> ( pc - rtems ) on <allcaps> qemu </allcaps> ( no exception handling here , just tested to ensure nothing broke ) <section> goes along with nasa / cfe # <number> , nasa / cfe # <number> <section> joseph hickey , vantage systems , inc ."
"many string truncation warnings with newer <allcaps> gcc </allcaps> <section> ubuntu has released <number> <allcaps> lts </allcaps> which includes <allcaps> gcc </allcaps> <number> . <number> . when using this compiler it implements a much stricter ( and often over - zealous ) checking of string ops . for instance : <code> <section> build code with default config using <allcaps> gcc </allcaps> <number> . <number> , with optimization enabled and full warnings . <section> code should build cleanly . <section> ubuntu <number> <allcaps> lts </allcaps> <number> bit . <section> joseph hickey , vantage systems , inc ."
"integration candidate <number> - <number> - <number> <section> fixes # <number> and # <number> <section> bundle ci : <url> see prs <section> <number> . pr # <number> - slightly slower calculation of microsecond conversiondepending on hardware , but exact ( to the resolution provided ) conversion <number> . pr # <number> - changes to documentation only <section> bundle ci - ubuntu : bionic see prs <section> part of <url> <section> jacob hageman , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps> leor bleier , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>"
"integration candidate : <number> - <number> - <number> <section> fixes # <number> , # <number> , and # <number> see bundle ic at <url> <section> see prs , bundle ci - <url> <section> pr # <number> <allcaps> rtems </allcaps> builds successfully without errors pr # <number> build script uses a proper cmakelists . txt instead of the aux_source directory pr # <number> code structure / linking change only . <section> see prs bundle ci <section> joseph hickey , vantage systems , inc . gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>"
"integration candidate <number> - <number> - <number> <section> integration candidate fixes # <number> <section> see pr # <number> bundle ci - <url> test log : <url> <section> no travis ci configuration warnings <section> bundle ci - ubuntu : bionice <section> jacob hageman , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>"
"fix # <number> , unify <allcaps> cfe psp </allcaps> with <allcaps> osal bsp </allcaps> <section> instead of redefining the basic entry point symbols , use the <allcaps> osal bsp </allcaps> and its abstractions . the <allcaps> cfe psp </allcaps> just becomes an extension to the <allcaps> osal bsp </allcaps> , and only needs to define the os_application_startup symbol like any other <allcaps> osal </allcaps> application . fixes # <number> <section> build code for all supported targets ( ppc - vxworks6 . <number> , i686 - rtems4 . <number> , native / x86 - <number> linux ) . verify clean build . confirm <allcaps> cfe </allcaps> boots and responds to commands as normal for <allcaps> rtems </allcaps> and native linux targets . <section> no behavior changes . code structure / linking change only . <section> ubuntu <number> <allcaps> lts </allcaps> <number> bit ( native , build host ) <allcaps> qemu </allcaps> for <allcaps> rtems </allcaps> <number> <section> vxworks testing pending on availability of test platform <section> joseph hickey , vantage systems , inc ."
"fix # <number> , add separate cmakelists . txt for each implementation <section> do not use aux_source_directory to assemble a list of source files . instead , put a proper cmakelists . txt file in each implementation and build the implementation separately from the shared / common parts . in addition to avoiding the aux_source_directory this allows <allcaps> psp </allcaps> - specific compile definitions to be set on a per - implementation basis because it is defined separately . fixes # <number> <section> build code for all supported targets ( ppc - vxworks6 . <number> , i686 - rtems4 . <number> , native / x86 - <number> linux ) . verify clean build . confirm <allcaps> cfe </allcaps> boots and responds to commands as normal . <section> no impact to behavior - changes build script only . <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit + <allcaps> gsfc </allcaps> vxworks build machine <section> joseph hickey , vantage systems , inc ."
"fix # <number> , microsec conversion lost resolution <section> full precision conversion implemented , and documented options for speed fix # <number> <section> steps taken to test the contribution : <number> . ci - <url> <section> slightly slower calculation depending on hardware , but exact ( to the resolution provided ) conversion <section> - hardware : <allcaps> amd </allcaps> - os : ubuntu <number> - versions : bundle w / this change <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , update <allcaps> rtems </allcaps> cmake module <section> addresses various compatibility / usability issues observed during testing - correctly set / export the cmake_exe_exports_c_flag - incorporate the system specs directly into the compile_object templates so these do not need to be specified by the toolchain or cmake_c_flags - similarly include the always - needed linker flags flags for entry point and relocation address into the linker command template fixes # <number> <section> build for i686 - rtems4 . <number> ( in combination with nasa / cfe # <number> ) . execute <allcaps> cfe </allcaps> and perform basic sanity check ( boots , accepts cmd msgs ) <section> <allcaps> rtems </allcaps> builds successfully without errors <section> ubuntu <number> <allcaps> lts </allcaps> <number> bit build host with cross tools for <allcaps> rtems </allcaps> <number> . <number> / pc686 built according to <allcaps> readme </allcaps> . <section> joseph hickey , vantage systems , inc ."
"integration candidate - <number> <section> fix # <number> <section> see pr # <number> integrated ic testing on cfs repo , see <url> <section> build for mcp750 using default config and procedure , confirm warnings are fixed ( others still exist in other modules , however ) . <section> - ci - ubuntu : bionic <section> see pr # <number> <section> jacob hageman - <allcaps> nasa gsfc </allcaps> gerardo e . cruz - ortiz - <allcaps> nasa gsfc </allcaps>"
ic - <number> <section> integration candidate <number> fixes # <number> see pr # <number> for details <section> ci only <section> see pr # <number> <section> see pr # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> gerardo e . cruz - ortiz - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
ic - <number> describe the contribution fix # <number> testing performed steps taken to test the contribution : current ci passes test <number> in enhanced ci in <url> expected behavior changes pr # <number> - simplifies array handling in ' fsw / mcp750 - vxworks / src / cfe_psp_memory . c ' system ( s ) tested on ci : ubuntu <number> additional context n / a third party code n / a contributor info - all information <allcaps> required </allcaps> for consideration of pull request gerardo e . cruz - ortiz - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"implement psps without relying on aux_source_directory <section> the cmake documentation presents the following caveat for <code> : > it is tempting to use this command to avoid writing the list of source files for a library or executable target . while this seems to work , there is no way for cmake to generate a build system that knows when a new source file has been added . <section> the targets should have a list of files that go into making the specific psps . <section> andrei zisu of planetary transportation systems ( berlin , germany ) ."
"fix # <number> : abstract out path to cfe_system_psppath <section> this change allows us to move custom psps out of tree , so that we do not have to keep a set of patches on top of upstream <allcaps> psp </allcaps> code . future forseeable changes : - a better , although more involved , solution might involve pulling the shared files in their own library , <code> , and allowing custom psps to be defined entirely out of tree while depending on <code> as a library . - using targets more extensively would also allow the elegant use of <code> with <code> , <code> and <code> descriptors . - making the build system less reliant on <code> . the cmake documentation presents the following caveat : > it is tempting to use this command to avoid writing the list of source files for a library or executable target . while this seems to work , there is no way for cmake to generate a build system that knows when a new source file has been added . <section> build of the sample cfs configuration . <section> <code> is introduced as a configuration variable in the build system . if not specified , it will fallback to previous behavior . <section> - pc , ubuntu <number> - current cfs master <section> andrei - costin zisu of planetary transportation systems gmbh ( berlin , germany ) . company - wide <allcaps> cla </allcaps> is being signed and will be sent soon ."
"integration candidate <number> <section> fix # <number> <section> steps taken to test the contribution : <number> . current ci passes <number> . enhanced ci in # <number> passes debug / with deprecated elements testing <section> resolved warnings <section> - ci : ubuntu <number> , ic bundle <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"integration candidate <number> <section> merge # <number> fix # <number> <section> <number> . checked out ic bundle <number> . built and ran cfs unit tests and <allcaps> osal </allcaps> coverage ( vxworks and shared ) <number> . all passed <number> . make osalguide to confirm it built <number> . ran core - cpu1 ( cfs ) , no errors / warnings / failures observed <section> none - cppcheck error cleanup <section> - cfs dev server <number> - os : ubuntu <number> - versions : ic branches <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"do not directly use a literal for char * members <section> fix # <number> instead of directly using a literal , declare a static <code> variable with the string and use that instead . this resolves a warning . <section> build for pc - <allcaps> rtems </allcaps> ( i686 - rtems4 . <number> ) and confirm warning is no longer triggered . execute <allcaps> cfe </allcaps> using <allcaps> qemu </allcaps> and confirm that network is functioning normally . <section> no impact to behavior <section> ubuntu <number> build host , i686 - rtems4 . <number> target using pc - rtems <allcaps> psp </allcaps> . <section> joseph hickey , vantage systems , inc . <section> you must attach a signed <allcaps> cla </allcaps> ( required for acceptance ) or reference one already submitted"
"<allcaps> rtems psp </allcaps> using string literal for non - const char * <section> when setting up the network driver , the pc - <allcaps> rtems psp </allcaps> is using string literals to assign <code> data types . this triggers a warning when compiling with strict warnings . <section> build for pc - <allcaps> rtems </allcaps> using strict compiler settings , including <code> . warnings are generated in <code> . <section> should build cleanly . <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit , building for i686 - rtems <number> ( pc - rtems ) <section> joseph hickey , vantage systems , inc ."
"integration candidate <number> <section> fix # <number> , fix # <number> <section> <number> . checked out all ic <number> branches <number> . built and ran cfs unit tests and <allcaps> osal </allcaps> coverage ( vxworks and shared ) <number> . all passed ( although osal_timer_ut occasionally still fails due to a test issue ) <number> . make cmdutils where cfs - groundsystem expects it <number> . cd tools / cfs - groundsystem / subsystems / cmdutil <number> . make <number> . started ground system <number> . python3 groundsystem . py <number> . enabled commands to <number> . <number> <number> . confirmed telemetry packets received <number> . sent es and <allcaps> time </allcaps> noop commands , confirmed noop message from cfs on port <number> <number> . sent es power on reset and observed cfs exit <section> see related pull requests <section> - cfs dev server <number> - os : ubuntu <number> - versions : ic - <number> branches <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
recommended lgtm issues : <section> recommended issue from lgtm : cfe_psp_module . h <code>
"# <number> , fix lgtm issue <section> fix lgtm issue . <section> steps taken to test the contribution : <number> . make prep <number> . make <number> . make install <number> . verify still run . <number> . mock pull request on dummy repository <number> . verify lgtm indicates issue has been resolve . <section> - hardware - ubuntu <number> - <allcaps> cfe </allcaps> <number> <section> anh van , <allcaps> nasa </allcaps> goddard"
"issue # <number> , adding travis . yml for cppcheck on flight <section> adding travis . yml for cppcheck on psp / fsw <section> anh van , <allcaps> nasa </allcaps> goddard"
"issue # <number> , resolved cppcheck warning <section> resolve <allcaps> psp </allcaps> cpp check warning <section> steps taken to test the contribution : <number> . cppcheck - - force - - inline - suppr - - std =c 9 9 - - language =c - - error - exitcode = <number> - - enable = warning , performance , portability , style - - inconclusive psp / fsw <number> > psp . txt <number> . verify warning is gone <number> . make prep <number> . make <number> . make install <number> . verify cfs still runs . <section> - hardware - ubuntu <number> - <allcaps> cfs </allcaps> <number> <section> anh van , <allcaps> nasa </allcaps> goddard"
"fix # <number> , simplified code to use just the array names where correct <section> fixes issue # <number> . made changes to file <code> in order to simply code to use just the array names when correct . used grep to find any instances as instructed . <section> zufishan ali , seneca college of applied arts & technology <section> pending : you must attach a signed <allcaps> cla </allcaps> ( required for acceptance ) or reference one already submitted"
"integration candidate <number> <section> fixes # <number> <section> steps taken to test the contribution : <number> . checked out bundle with ic - <number> branches <number> . make enable_unit_tests = <allcaps> true simulation </allcaps> = native prep <number> . make <number> . make install <number> . make test built without warnings , all tests passed except osal_timer_ut ( nominal result on linux ) executed cfe , successful startup with no warnings confirmed passed ci ( with cppcheck enforced ! ) <section> no functional changes , doxygen warning cleanup . <section> - cfs dev server - os : ubuntu <number> - versions : bundle ic - <number> branch <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , fix doxygen warning <section> fix # <number> , fix doxygen warning <section> steps taken to test the contribution : <number> . make usersguide <number> . very warning is gone <section> - hardware - ubuntu <number> - doxygen <date> , rc - <number> . <number> <section> anh van , <allcaps> nasa </allcaps> goddard <section> you must attach a signed <allcaps> cla </allcaps> ( required for acceptance ) or reference one already submitted"
"mark memcpy / set as deprecated as discussed related to # <number> and # <number> ( <date> <allcaps> ccb </allcaps> ) , see related discussions on those tickets ."
"redundant assignments one common anti - pattern in cfs is to call functions that return potential error codes , store the return values in variables , then never bother to check the value of the variable . cppcheck reports this as a redundant assignment . current cases in <allcaps> psp </allcaps> : { { { psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> : performance : variable ' return_code ' is reassigned a value before the old one has been used . psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> : performance : variable ' return_code ' is reassigned a value before the old one has been used . psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> : performance : variable ' return_code ' is reassigned a value before the old one has been used . psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> : performance : variable ' return_code ' is reassigned a value before the old one has been used . psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> : performance : variable ' return_code ' is reassigned a value before the old one has been used . psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> : performance : variable ' return_code ' is reassigned a value before the old one has been used . psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> : performance : variable ' return_code ' is reassigned a value before the old one has been used . psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> : performance : variable ' return_code ' is reassigned a value before the old one has been used . } } } not sure how we missed this in the <number> - <number> - <number> sweep ."
remove obsolete psps <allcaps> ccb </allcaps> meeting on <number> - <number> - <number> agreed that we can remove the following psps that have not been maintained lately : - mac - osx - mcf5235 - rtems - pc - cygwin
"<allcaps> psp </allcaps> <number> version description document review cycle attached <allcaps> psp </allcaps> <number> <allcaps> vdd </allcaps> is open for <allcaps> ccb </allcaps> review . please attach any tracked changes / comments with initials included in document filename i . e . "" <allcaps> osal </allcaps> <number> . <number> version description document - sls . docx "" . following the <allcaps> ccb </allcaps> review cycle , when all changes have been reviewed / accepted or rejected , the document will be open for signature and release ."
"<number> - <number> - <number> integration candidate <allcaps> ccb </allcaps> meeting on <number> - <number> - <number> authorized joe ' s changes currently merged in the <allcaps> cfe </allcaps> project , together with cmake support in all projects , as the next development branch . the final list of changesets is as follows : * [ changeset <happy> c29724 ] # <number> cmake support * [ changeset <happy> d3d2c5 ] # <number> change uint32 to cpuaddr * [ changeset : f633fda ] # <number> dependency management * [ changeset : 7 3 1 c533 ] # <number> pc - rtems <allcaps> psp </allcaps> * [ changeset : daf6ab4 ] intermediate merge of the above changes * [ changeset : cea350d ] # <number> ( rebased ) compatibility with <allcaps> cfe </allcaps> "" const "" <allcaps> api </allcaps> * [ changeset : 4 6 9 5 f60 ] # <number> ( rebased ) clean up build macros * [ changeset : 9 4 5 cb59 ] revised merge including the above changes"
"<number> - <number> - <number> integration candidate <allcaps> ccb </allcaps> meeting on <number> - <number> - <number> authorized inclusion of the cmake related changes as part of the next integration test and merge cycle . for the cfs_psp project , this includes * [ changeset <happy> c29724 ] # <number> enhanced build system"
"add <allcaps> psp </allcaps> unit tests currently , the <allcaps> jsc </allcaps> developed <allcaps> psp </allcaps> unit tests are not included in the <allcaps> cfs </allcaps> release . they currently work with pc - linux and orionscp psps . updates to so that they work with a vxworks target <allcaps> psp </allcaps> are in work ( ut699 - vxworks6 . <number> <allcaps> psp </allcaps> ) these updates are being tracked in the <allcaps> jsc </allcaps> subversion repo and need to be pushed into a proper git branch and further work continued from there ."
"release candidate <number> merge to master <section> bulk merge to <number> , plus bug fix # <number> and version update <section> steps taken to test the contribution : <number> . checked out cfs rc - <number> . <number> , updated to latest cfe / <allcaps> osal </allcaps> / <allcaps> psp </allcaps> rc branches and setup / built via standard instructions <number> . ran cfe and observed version update <code> <section> minor behavior changes will be documented in the <allcaps> vdd </allcaps> upon release ( no major / requirements updates ) <section> - cfs development server - ubuntu <number> . <number> , <number> . <number> - <number> - generic , x64 - <number> . <number> bundle <section> none <section> jacob hageman / <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps> <section> <allcaps> cla </allcaps> on file"
"added auto build capabilities using travis - ci <section> auto build capabilities added using travis - ci <section> steps taken to test the contribution : <number> . verified auto build performed when new code is pushed to github <section> - auto build will be performed whenever new code is pushed to github <section> - github - linux xenial distribution <section> none <section> travis wheatley - emergent space technologies <section> work performed for <allcaps> nasa </allcaps> "" task <number> """
switch <allcaps> psp </allcaps> to use <allcaps> osal </allcaps> timers rather than itimers [ ( this is the same as trac <number> in babelfish ) <allcaps> psp </allcaps> should use the <allcaps> osal </allcaps> timer <allcaps> api </allcaps> for the main ( 1 hz ) timer .
