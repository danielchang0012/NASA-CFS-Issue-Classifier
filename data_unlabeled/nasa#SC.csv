text
"fix # <number> , cmd and tlm messages use payload sub - structure fix # <number> , adds payload substructure to all command and telemetry messages <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> messages should put content in a "" payload "" sub - structure to match the patterns used in <allcaps> cfe </allcaps> and other modules , all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message definitions should put the content ( non - header ) parts into a separate struct called "" payload "" . <section> separate message content into a sub structure called "" payload "" . <section> this is benefit to tooling that can use the presence of this field to identify where the actual content starts ( e . g . something like <code> would work and be correct , as opposed to checking <code> which may not actually reflect where the content starts due to possible compiler - added padding between them ) . <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , unit tests read past array bounds and general cleanup - fix # <number> also consolidated "" result "" asserts using modern apis , removed low - value / high - maintenance checks on event string and type ( id is sufficient to confirm path ) . recommend a follow - on issue to replace the rest of the utassert_true uses . <section> ci ( including coverage ) <section> greatly reduced technical debt wrt unit tests ( large reduction in lines , and consistent table initialization ) <section> ci <section> note this should make the remaining bug fixes and updates easier , by reducing ut change overhead . could squash if <allcaps> ccb </allcaps> wants , just tried to break down the changes a little . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , moved command validation out of command functions fixes # <number> , validate command before calling the command function instead of after . <section> unit testing <section> no impact to behavior <section> os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"apps should check / verify msg <allcaps> before </allcaps> calling handler copy of <url> the <allcaps> cfe </allcaps> core and sample app ( which is supposed to be the example of "" best practice "" ) do validation on the message before calling the handler . for example : case sample_app_noop_cc : if ( sample_app_verifycmdlength ( & sbbufptr - > msg , sizeof ( sample_app_noopcmd_t ) ) ) { sample_app_noop ( ( sample_app_noopcmd_t <wink> sbbufptr ) ; } this is different from sc , which does a similar check , but done inside each handler , for example : <url> <section> <allcaps> cfs </allcaps> apps should follow the best practices / patterns set forth in the framework code . ( there are reasons for the pattern being recommended practice ) <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , make compiler - added padding in <code> explicit testing performed * * github ci actions all passing successfully ( incl . build + run , unit / functional tests etc . ) . <section> no change . <section> avi weiss <user>"
"fix # <number> , ut support for larger sc_rts_buff_size - fix # <number> ut change only . updates logic to properly test buffer fill cases . <section> ci + a setting with sc_rts_buff_size = <number> <section> none <section> - ubuntu <number> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
support larger sc_rts_buff_size configurations in unit test unit tests only work if <code> can be used up with < <number> packets of size <code> <section> support larger settings <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> , ut fix to support sc_last_rts_with_events = = sc_number_of_rts - fix # <number> <section> ci and tested with sc_last_rts_with_events = = sc_number_of_rts <section> none <section> - ubuntu <number> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
should <code> be called with <code> or <code> ? code snips * * <url> <section> avi weiss <user>
"fix # <number> , remove <code> - related macros testing performed * * github ci actions all passing successfully . <section> no change . <section> avi weiss <user>"
remove <code> - related macros expected behavior * * use the direct bit - check / manipulation expression rather than the abstracted macro which is being removed . <section> avi weiss <user>
"sc relative timing discards seconds , and accumulates error <url> sc nominally gets a <number> hz wakeup , but discards seconds . if the 1 hz is right around the subsecond rollover , relative timing could accumulate a second of error on a command . for example <number> hz at <number> , then <number> would look like <number> twice , delaying the relative command to the next frame . since the next command absolute time is not calculated until the current command is sent this error would accumulate every time it happens ( could be multiple seconds "" late "" by the end of the <allcaps> rts </allcaps> . <section> code review . just started looking at this so maybe i missed something . <section> bounded , predicable errors for <allcaps> rts </allcaps> timing . worst case over an entire <allcaps> rts i </allcaps> ' d think should be bounded by the wakeup rate . <section> see above . <section> n / a <section> - # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"sc relative timing logic based on <allcaps> cfe time </allcaps> which is not monotonic sc gets a version of cfe_time at the start of wakeup processing for calculating when to send the next command : <url> cfe time is subject to adjustments , which means <allcaps> rts </allcaps> ' s time offsets would be affected . for example , if you ask for a relative time offset of <number> seconds and adjust cfe time <number> seconds forward you will only get a relative time gap of <number> second . i ' d have thought <allcaps> rts </allcaps> ' s would use the monotonic <allcaps> psp </allcaps> time or a timer to avoid cfe time adjustment impacts . <section> just code inspection . <section> relative command times should be good to within a predicable , bounded accuracy . <section> above . <section> n / a <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
support better than <number> second resolution commanding currently <allcaps> rts </allcaps> and <allcaps> ats </allcaps> both can only command to a <number> second resolution <section> support higher resolution table time tags and check at whatever rate the wakeup is received <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> , use os_stat instead of os_opencreate to verify file existence testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> simplifies function and eases future maintenance . <section> avi weiss <user>"
"fix # <number> , split up multiple - variable declaration statements testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to behavior . eases future maintenance . <section> avi weiss <user>"
split up decl . statements that define multiple variables on the same line code snips * * <url> <url> <section> split up . declarations are clearer when kept to one definition per line . <section> avi weiss <user>
"fix # <number> , replace quotes with angle brackets in / inc a clear and concise description of what the contribution is . - include explicitly what issue it addresses [ e . g . fixes <hashtag> x </hashtag> ] <section> steps taken to test the contribution : <number> . build steps ' . <repeated> ' <number> . execution steps ' . <repeated> ' <section> a clear and concise description of how this contribution will change behavior and level of impact . - <allcaps> api </allcaps> change : x <elongated> ( if applicable ) - behavior change : x <elongated> ( if applicable ) - or no impact to behavior <section> - hardware : [ e . g . pc , sp0 , mcp750 ] - os : [ e . g . ubuntu <number> , <allcaps> rtems </allcaps> <number> , vxworks <number> ] - versions : [ e . g . cfe <number> , <allcaps> osal </allcaps> <number> , <allcaps> psp </allcaps> <number> for mcp750 , any related apps or tools ] <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - note <allcaps> cla </allcaps> ' s apply to software contributions ."
replace quotes with angle brackets in <hashtag> include </hashtag> statements within / inc describe the solution you ' d like quotes should be replaced with angle brackets in <hashtag> include </hashtag> statements that reside in the / inc location . this will ensure that the preprocessor selects the files pre - designated to override the default files contained within the open source cfs build release - as opposed to selecting those located in the same directory . requester info dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , include sc_msgdefs . h in sc_msg . h ci <section> dan knutsen <allcaps> nasa </allcaps> goddard"
include sc_msgdefs . h in sc_msg . h sc_msg . h includes macros defined in sc_msgdefs . h - which is not currently <hashtag> included </hashtag> . <section> dan knutsen <allcaps> nasa </allcaps> goddard
"add fsw / src to app target cannot build cert_testbed . <code> is needed to build tables , etc . revise cmakelists . txt <section> build in cert_testbed <section> error - free build <section> if applicable , add references to the software . <section> - ubuntu <number> <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , deletes duplicate header files - fixes # <number> <section> make install lcov <section> no impact to behavior <section> - ubuntu <number> <section> bug introduced in <url> this proposed pull request also restores lost comments from <url> <section> n / a <section> justin figueroa , vantage systems"
"delete duplicate header files there are duplicate files "" fsw / platform_inc / sc_msgids . h "" , "" fsw / src / sc_events . h "" , "" fsw / src / sc_msg . h "" , "" fsw / src / sc_msgdefs . h "" , and "" fsw / src / sc_tbldefs . h "" that need to be removed . <section> view fsw directory <section> no impact to behavior <section> if applicable , add references to the software . <section> - ubuntu <number> <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , moves interface definition files to inc - fixes # <number> <section> make install lcov <section> no expected behavior change . <section> - ubuntu <number> <section> n / a <section> if included , identify any third party code and provide text file of license <section> - justin figueroa , vantage"
"fix # <number> , re - acquire tbl data pointer in sc_managetable - updates sc_managetable to successfully re - acquire table data pointer [ fixes # <number> ] <section> build and run all tests ' <section> sc functions nominally <section> ubuntu <number> and <number> ( workflows ) <section> dan knusten <allcaps> nasa </allcaps> / goddard"
"move interface definition files to "" inc "" location the interface definition files of all open source apps currently exist in the "" src "" directory . <section> create an "" inc "" dir to go with the "" src "" dir . move the interface definitions into this location : "" _msg . h "" , "" _msgdefs . h "" , "" _tbldefs . h "" , and "" _events . h "" . consider moving header files in both "" platform_inc "" and "" mission_inc "" to "" inc "" <section> leaving as is . <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , remove initializations causing cppcheck errors testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no impact on code behavior . cppcheck now passes without error again . <section> avi <user>"
new cppcheck errors : ' [ unreadvariable ] ' to reproduce * * run the current version of cppcheck on the current main branch sc source code . <section> cppcheck should pass without raising any errors . <section> avi <user>
"fix # <number> , move table header definitions from sc_app . h to sc_tbldefs . h testing performed * * github ci build + run & unit tests . <section> no impact on behavior . <section> avi weiss <user>"
inconsistent event id naming expected behavior * * apply consistent event id names to the events which are common to all / most components and apps . <section> invalid message id : <code> <code> <code> <code> <code> <code> <code> <code> <code> initialization : <code> <code> <code> <code> <code> <code> <code> <allcaps> noop </allcaps> : <code> <code> <code> <code> <code> <code> reset counters : <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> etc . <section> avi weiss <user>
"fix # <number> , remove redundant / inconsistent comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . testing performed * * none ( comment and whitespace changes only ) . <section> no impact on behavior . these updates will reduce clutter and inconsistency in the code , improving readability . <section> <user>"
"redundant comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . expected behavior * * remove redundant comments to reduce clutter and inconsistency in the code , and improve readability . <section> <user>"
"fix # <number> , remove ' return ; ' from last line of void functions . testing performed * * none , prior to submission . <section> no impact on behavior . <section> <user>"
"remove "" return ; "" from last line of void functions describe the solution you ' d like * * remove <section> <user>"
scrub use of ( ) in return statements reporter info * * <user>
"unit test sc_sendhkpacket_test fails the <code> unit test fails . the expected <code> and <code> are not sent to the sb . <section> <number> . create a cfs bundle that includes a cfe , <allcaps> osal </allcaps> , <allcaps> psp </allcaps> , and sc as an app <number> . <code> <number> . <code> the <code> unit test will fail : <code> <section> this unit test should pass . i am not sure why the unit test is expecting <number> for the first and middle element and <number> for the last element in <code> . also not sure why the first and middle elements use different asserts compared to the last element but these do not appear to affect the behavior as they result in the same assert . <section> /* check first element */ utassert_true ( sc_operdata . hkpacket . rtsexecutingstatus [ <number> ] = = <number> , "" sc_operdata . hkpacket . rtsexecutingstatus [ <number> ] = = <number> "" ); / / fails utassert_true ( sc_operdata . hkpacket . rtsdisabledstatus [ <number> ] = = <number> , "" sc_operdata . hkpacket . rtsdisabledstatus [ <number> ] = = <number> "" ); / / fails /* check middle element */ utassert_true ( sc_operdata . hkpacket . rtsexecutingstatus [ <number> ] = = <number> , "" sc_operdata . hkpacket . rtsexecutingstatus [ <number> ] = = <number> "" ); / / fails utassert_true ( sc_operdata . hkpacket . rtsdisabledstatus [ <number> ] = = <number> , "" sc_operdata . hkpacket . rtsdisabledstatus [ <number> ] = = <number> "" ); / / fails /* check last element */ utassert_int32_eq ( sc_operdata . hkpacket . rtsexecutingstatus [ lastrtshkindex ] , <number> ); / / fails utassert_int32_eq ( sc_operdata . hkpacket . rtsdisabledstatus [ lastrtshkindex ] , <number> ); / / fails ` ` ` <section> - hardware - os : <number> . <number> - ubuntu - versions : cfe v7 . <number> - rc4 + dev143 , osal v6 . <number> - rc4 + dev87 , psp v1 . <number> - rc4 + dev41 <section> n / a <section> jeff st . jean <email>"
"unit test sc_startrtscmd_test_startrtsnoevents fails the <code> unit test fails . an informative <code> event is sent instead of the debug <code> event that is expected by the test . <section> <number> . create a cfs bundle that includes a cfe , <allcaps> osal </allcaps> , <allcaps> psp </allcaps> , and sc as an app <number> . <code> <number> . <code> the <code> unit test will fail : <code> <section> this unit test should pass . i believe this is due to the inclusive comparison on in fsw / src / sc_rtsrq . c <url> but i am not intimately familiar with the expected behavior here . <section> sc_rtsrq_tests . c <code> sc_rtsrq . c : <code> <section> - hardware - os : <number> . <number> - ubuntu - versions : cfe v7 . <number> - rc4 + dev143 , osal v6 . <number> - rc4 + dev87 , psp v1 . <number> - rc4 + dev41 <section> n / a <section> jeff st . jean <email>"
"fix # <number> , resolve usersguide issues with doxygen <date> - fix # <number> <section> build doc with ubuntu <number> <section> successful doc build <section> - hardware : i5 / docker - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , consolidate common patterns in sc_app . c fix # <number> , use loops to consolidate common code patterns in sc_app . c <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , consolidate functions for managing tables fix # <number> , consolidate <code> , <code> , and <code> <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , consolidate loops in sc_buildtimeindextable fix # <number> , combine <number> loops in sc_buildtimeindextable ( ) <section> unit testing <section> no impact to behavior <section> ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , removed mentions of <allcaps> asist </allcaps> from documentation <section> * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . describe the contribution fix # <number> , removed all mentions of <allcaps> asist </allcaps> from comments testing performed n / a expected behavior changes no impact to behavior system ( s ) tested on n / a contributor info - all information <allcaps> required </allcaps> for consideration of pull request haven carlson - <allcaps> nasa </allcaps>"
"fill in missing requirements rationale the following requirements have empty rationale : sc2000 . <number> , sc2002 . <number> , sc2005 . <number> , sc2007 , sc2007 . <number> , sc2008 , sc2008 . <number> , sc2008 . <number> , sc2008 . <number> , sc2008 . <number> , sc2008 . <number> , sc2008 . <number> , sc2008 . <number> , sc2009 , sc3000 , sc3001 . <number> , sc3003 , sc3003 . <number> , sc3003 . <number> , sc3003 . <number> , sc4001 . <number> , sc4001 . <number> , sc4003 , sc4004 , sc4005 or use query : <code> <section> fill in missing rationale <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove stray ut printf and clean related test - fix # <number> <section> ci <section> removed stray printf from test output <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
remove stray printfs in ut and clean related test <url> <section> clean up <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> , remove stray terminators - fix # <number> <section> ci <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
remove stray terminators <url> <section> remove <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"configuring basic sc example hello , i am rather new to cfs and trying to get a basic example of the sc application running , but i am unsuccessful in doing so . i was hoping to get any form of guidance here to get up and running with the application . i see out of the box the application comes with sc_ats1 . c and sc_rst001 . c to serve as baseline examples of stored commands that can be sent . i am trying to get those two example tables to work . my cfs build is a freshly cloned v6 . <number> . a to a ubuntu <number> vm . the <allcaps> sch </allcaps> application ( version rc - <number> . <number> ) has been installed and is up and running correctly . furthermore , the sc application version <number> . <number> was cloned into the apps directory . inside , the <allcaps> sch </allcaps> cfs / apps / sch / fsw / tables / sch_def_msgtbl . c file , i changed : <code> then in the cfs / apps / sch / fsw / tables / sch_def_schtbl . c file , i changed : <code> <code> in addition , my sc cmakelists . txt file is changed to the following : <code> after compiling the project , running the script . / core - cpu1 in build / exe / cpu1 i get the following output : <code> is there a step that i am missing or have done incorrectly up to this point ? i am noticing that there is no <allcaps> rts </allcaps> table loaded but i am unsure of the steps to follow to load one . any help is greatly appreciated . thank you !"
"fix # <number> # <number> # <number> , code coverage improvements topics separated by commit , but submitted together to achieve <percent> coverage - fix # <number> - fix # <number> - fix # <number> <section> ci <section> none , just refactors to remove redundant conditions <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , use real message types in tables - fix # <number> note so far this is just partial / example , is not backwards compatible with caelum framework and has a dependency on nasa / cfe # <number> . marking as draft for now . <section> ran with the cfe changes , confirmed noops were sent / received using the following cmds : <code> <section> behavior is the same , just makes table maintenance easier and slightly more portable across different endian systems and w / different header implementations . <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main + this commit / repo and additions to build / run sc as well as the commit that adds the macro header macro <section> depends on cfe update nasa / cfe # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove cfe_psp_memset use for addresses in <allcaps> ram </allcaps> - fix # <number> <section> ci <section> none , just removes unnecessary <allcaps> api </allcaps> dependence <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , added codeql - build . yml <section> * x] i reviewed the [ contributing guide <url> . * [x ] i signed and emailed the appropriate contributor license agreement to <email> and copied <email> . describe the contribution a clear and concise description of what the contribution is . added codeql to github workflows fix # <number> testing performed pushed to branch checked codeql ran successfully expected behavior changes no impact to behavior system ( s ) tested on browser additional context depends on <url> to run successfully third party code if included , identify any third party code and provide text file of license contributor info - all information <allcaps> required </allcaps> for consideration of pull request full name and company / organization / center of all contributors ( "" personal "" if individual work ) note <allcaps> cla </allcaps> ' s apply to software contributions ."
add codeql to repository use codeql for continuous integration <section> add codeql workflow <section> none <section> add any other context about the feature request here . <section> haven carlson
"fix # <number> # <number> , resolve static analysis warnings - fix # <number> - fix # <number> <section> ci + static analysis run <section> none , just squashes static analysis warnings <section> - hardware : vm - os : ubuntu <number> - versions : bundle main + apps + related static analysis resolution branches <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , <allcaps> rts </allcaps> not loaded event no longer implies failure in text - fix # <number> rewords event and simplifies unit test <section> ci <section> event text no longer implies failure <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , resolve strict cppcheck style warnings - fix # <number> <section> ci <section> none , just squashes strict cppcheck style warnings <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"resolve static analysis issues relative to unit tests many actual code issues ( uninitialized variables , buffer overruns , etc ) identified via static analysis in the unit tests . all actual "" bugs "" should be resolved . imported from <allcaps> gsfccfs </allcaps> - <number>"
"revisit coverage , update to <percent> code / branch or write issues where unreachable failure : coverage cs lines <percent> functions <percent> branches <percent> failure : coverage ds lines <percent> functions <percent> branches <percent> failure : coverage fm lines <percent> functions <percent> branches <percent> failure : coverage hs lines <percent> functions <percent> branches <percent> failure : coverage lc lines <percent> functions <percent> branches <percent> failure : coverage md lines <percent> functions <percent> branches <percent> failure : coverage sc lines <percent> functions <percent> branches <percent> fix where possible , elsewise issues should document all uncovered lines / branches and disposition ( why it ' s ok as - is ) imported from <allcaps> gsfccfs </allcaps> - <number>"
"sc untestable branch condition sc has an untestable branch condition in sc_state . c sc_updatenexttime . the function checks the rtsnumber using <= sc_number_of_rts . however , the sub function called before the check , sc_getnextrtstime , guarantees that the rtsnumber cannot ever exceed sc_number_of_rts . imported from <allcaps> gsfccfs </allcaps> - <number>"
