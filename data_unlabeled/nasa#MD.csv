text
"fix # <number> , cmd and tlm messages use payload sub - structure * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fix # <number> , adds payload substructure to all command and telemetry messages <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , explictly size md dwell table unit test string <section> - fix # <number> <section> ci <section> fixes build error identified in issue <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> messages should put content in a "" payload "" sub - structure * x] i reviewed the [ contributing guide <url> . * x] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> to match the patterns used in <allcaps> cfe </allcaps> and other modules , all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message definitions should put the content ( non - header ) parts into a separate struct called "" payload "" . <section> separate message content into a sub structure called "" payload "" . <section> this is benefit to tooling that can use the presence of this field to identify where the actual content starts ( e . g . something like <code> would work and be correct , as opposed to checking <code> which may not actually reflect where the content starts due to possible compiler - added padding between them ) . <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , combine multiple unnecessary <code> / <code> variables <section> - fixes # <number> - <number> cases of multiple unnecessary <code> / <code> variables holding returns from <code> have been combined <section> github ci actions all passing successfully . <section> no change to functional behavior . code is simplified - improving future maintainability . <section> avi weiss <user>"
"multiple unnecessary <code> / <code> variables can be combined <section> a few functions in <code> use multiple <code> / <code> variables which can be combined into one . <section> example : <url> the result of <code> is just assigned to <code> anyway , so they can be combined without any change to the functional behavior . <section> simplify code by removing unnecessary <code> / <code> variables . <section> avi weiss <user>"
"fix # <number> , combine consecutive , mutually - exclusive status checks <section> - fixes # <number> - consecutive , mutually - exclusive status checks combined into a single <code> / <code> . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to behavior . <section> avi weiss <user>"
"combine consecutive , mutually - exclusive status checks <section> <code> contains a couple of consecutive , mutually exclusive status checks . <section> <url> <url> <section> combine into an <code> / <code> - no need to do <number> evaluations . <section> avi weiss <user>"
"fix # <number> , convert <code> return codes and variables to <code> <section> - fixes # <number> - most <code> return codes converted over to <code> - <code> <code> / <code> variables holding cfe return codes converted to <code> <section> github ci actions all passing successfully . <section> no change to behavior . <code> is more expressive and improves consistency with cfe / cfs . <section> avi weiss <user>"
md <code> return codes and variables should be converted to <code> <section> md has quite a few return codes ( as well as local <code> / <code> variables which hold <allcaps> cfe </allcaps> return codes ) that can be easily converted over to the <code> typedef . <section> use the more expressive <code> and improve consistency with cfs . <section> avi weiss <user>
"fix # <number> , remove unintentionally repeated identical assert <section> - fixes # <number> - duplicate ( identical ) test removed . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . coverage unchanged : <code> <section> test code cleaner without unintentional ( and redundant ) duplicate assert . <section> avi weiss <user>"
identical assert repeated twice ( unintentionally ) <section> assert of <code> seems to have been pasted twice by mistake . <section> <url> <section> removing unintentionally repeated test will make cleaner test code . <section> avi weiss <user>
"md dwell table tests string error <section> while compiling the latest version of md with unit tests enabled , my build environment gave me the following error : <code> <section> the bug relates to this line and a few others with the same variable used for testing md signatures . it seems as though the compiler does not like that <code> is implicitly a <number> byte string as opposed to a <number> byte string , which is what the function <code> expects <url> for now , simply explicitly using the size of the array in the variable definition seems to work successfully . <code> after changing to this locally wherever it appeared , my build works fine ."
"fix # <number> , replace quotes with angle brackets in / inc <section> fixes # <number> - replace quotes with angle brackets in / inc files . <section> <number> . performed build verification testing <number> . ci <section> dan knutsen <allcaps> nasa </allcaps> goddard"
replace quotes with angle brackets in <hashtag> include </hashtag> statements within / inc describe the solution you ' d like quotes should be replaced with angle brackets in <hashtag> include </hashtag> statements that reside in the / inc location . this will ensure that the preprocessor selects the files pre - designated to override the default files contained within the open source cfs build release - as opposed to selecting those located in the same directory . requester info dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , adds fsw / src to app target <section> - fixes # <number> <section> make install <section> successful cert_testbed build <section> - ubuntu <number> <section> n / a <section> n / a <section> justin figueroa , vantage systems"
"add fsw / src to app target <section> cannot build cert_testbed . <code> is needed to build tables , etc . revise cmakelists . txt <section> build in cert_testbed <section> error - free build <section> if applicable , add references to the software . <section> - ubuntu <number> <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , moves interface definition files to inc <section> - fixes # <number> <section> make install lcov <section> no expected behavior change . <section> - ubuntu <number> <section> n / a <section> if included , identify any third party code and provide text file of license <section> - justin figueroa , vantage"
"move interface definition files to "" inc "" location <section> the interface definition files of all open source apps currently exist in the "" src "" directory . <section> create an "" inc "" dir to go with the "" src "" dir . move the interface definitions into this location : "" _msg . h "" , "" _msgdefs . h "" , "" _tbldefs . h "" , and "" _events . h "" . consider moving header files in both "" platform_inc "" and "" mission_inc "" to "" inc "" <section> leaving as is . <section> n / a <section> justin figueroa , vantage systems"
"fix # <number> , remove initializations causing cppcheck errors <section> fixes # <number> note : all are local variables only . in order of the errors reported in the issue report : md_cmds . c in the <code> function : <code> : <code> only has a single use ( on line <number> ) and it is assigned a value prior to this ( on line <number> ) , so this can safely be changed from an initialization to a declaration - only . <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . in the <code> function : <code> : <code> is assigned a value ( on line <number> ) and is used only once on the next line . given that this is a <code> function , there is no issue with this value being returned uninitialized if it does not get set somehow during the function logic or anything like that . <code> : <code> is assigned a value ( on line <number> ) before any and all of its references , so this can safely be converted from an initialization to a declaration - only at the top of the function . in the <code> function : <code> : <code> is used twice in this function and is assigned a value both times on the immediately preceding line ( on line <number> , and later on line <number> ) . <code> : <code> is just initialized to <code> , so can not be used in this state anyway . its variables are actually assigned values on line <number> and both of its uses are after this line and covered by it . <code> : <code> is only used inside the if block which starts on line <number> , and is assigned a value prior to any and all of its references on line <number> . in the <code> function : <code> : <code> is only used once ( on line <number> ) and is assigned a value on the line immediately before this use . md_dwell_pkt . c <code> : <code> is only used once ( on line <number> ) , and is assigned a value on the immediately preceding line . <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . <code> : <code> is assigned a value ( on line <number> ) before any and all of its references . md_dwell_tbl . c <code> : <code> is assigned a value ( on line <number> ) and is only used in the mutually exclusive <code> / <code> block which immediately follows this assignment . md_utils . c <code> : <code> is only used once ( on line <number> ) and is assigned a value on the immediately preceding line . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no impact on behavior . cppcheck now passes without error again . <section> avi <user>"
new cppcheck errors : ' [ unreadvariable ] ' <section> latest version of cppcheck is issuing the following failures for md : <code> <section> run the current version of cppcheck on the current main branch md source code . <section> cppcheck should pass without raising any errors . <section> avi <user>
"fix # <number> , add enum to remove magic number error codes from getdwelldata ( ) <section> fixes # <number> adds enum to represent error return codes from dwell address read functions . <section> github ci actions ( incl . build + run , md unit tests ) all passing successfully . <section> no change in logic . removes magic number error codes , making error types easier to identify . <section> avi weiss <user>"
"fix # <number> , apply consistent event id names to common events <section> - fixes # <number> - consistent event ids have been applied to the inconsistent cases to align them with a common event id naming convention . <section> only github ci actions . <section> no impact on code behavior ( no logic changes ) . consistent event id names for the events which are common to all / most cfs components and apps will improve consistency and ease make code review / debugging easier . <section> avi weiss <user>"
"inconsistent event id naming <section> copy of <url> after finding that there were <number> different event ids to indicate the same thing ( invalid message id ) in <url> i scrubbed the other common commands ( e . g . task initialisation [ <allcaps> init </allcaps> ] , <allcaps> noop </allcaps> , reset counters etc . ) and found the same issue there - almost every component / app had their own variation of the event id name for the exact same event . <section> apply consistent event id names to the events which are common to all / most components and apps . <section> invalid message id : <code> <code> <code> <code> <code> <code> <code> <code> <code> initialization : <code> <code> <code> <code> <code> <code> <code> <allcaps> noop </allcaps> : <code> <code> <code> <code> <code> <code> reset counters : <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> etc . <section> avi weiss <user>"
"fix # <number> , remove redundant / inconsistent comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . <section> fixes # <number> removes redundant and inconsistent comments ( e . g . <code> , <code> , function name in function header comments ) . there were also a few cases of unnecessary empty lines ( e . g . on the last line before the closing brace of a function ) and also missing empty lines ( e . g . between functions ) which were corrected . some of these empty lines trigger the ci format checks . i have left the commits separated for now to make life easier for whoever reviews this . i can squash them if / when this is ready for merge . <section> none ( comment and whitespace changes only ) . <section> no impact on behavior . these updates will reduce clutter and inconsistency in the code , improving readability . <section> <user>"
"redundant comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . <section> copy of <url> and <url> there are quite a few redundant comments in the code , such as : - <code> - type comments - <code> - type comments - function header comments which include the function name another minor issue has to do with empty lines : a ) _unnecessary_ empty lines ( e . g . first line after the opening brace of a function / struct , or the last line before the closing brace - the latter apparently sometimes triggers the ci format checks ) . b ) _missing_ empty lines between functions ( i . e . closing brace of last function , then next function beginning on the immediately next line without an empty line in between ) the unnecessary empty lines ( at the beginning or end of a function , for example ) represent a low single - digit percentage of the cases ( the vast majority of functions / structs do not have these extra empty lines ) , so there is an argument to remove them purely for consistency , not just due to them being redundant and triggering the ci format checks . <section> remove redundant comments to reduce clutter and inconsistency in the code , and improve readability . <section> <user>"
"fix # <number> , remove unnecessary parentheses around return values . <section> fixes # <number> removes parentheses in return statements in md that return a single value / term . this is aligns these return statements with the predominant style of cfs . <section> none , prior to submission of the pull request . <section> no impact on behavior . <section> <user>"
scrub use of ( ) in return statements <section> unnecessary parentheses around return values in md copy of <url> <section> <user>
"fix # <number> , resolve usersguide issues with doxygen <date> <section> - fix # <number> <section> build doc with ubuntu <number> <section> successful doc build <section> - hardware : i5 / docker - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , removed mentions of <allcaps> asist </allcaps> from documentation * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . describe the contribution fix # <number> , removed all mentions of <allcaps> asist </allcaps> from comments testing performed n / a expected behavior changes no impact to behavior system ( s ) tested on n / a contributor info - all information <allcaps> required </allcaps> for consideration of pull request haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , remove unreachable code <section> - fix # <number> removed unreachable code . <section> ci <section> none <section> ci <section> not eventually the command processing will likely be replaced w / <allcaps> api </allcaps> calls and generic support , so just doing minimal fixes here for coverage . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , remove stray terminators <section> - fix # <number> <section> ci <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , update code coverage for md_app_tests . c * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fix # <number> updated unit tests for md_app_tests . c for more coverage . <section> <number> . lcov - - capture - - rc lcov_branch_coverage = <number> - - directory build - - output - file coverage_test . info <number> . lcov - - rc lcov_branch_coverage = <number> - - add - tracefile coverage_base . info - - add - tracefile coverage_test . info - - output - file coverage_total . info <number> . genhtml coverage_total . info - - branch - coverage - - output - directory lcov <section> no impact to behavior <section> os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"uncovered lines / branches * x] i reviewed the [ contributing guide <url> . * [x ] i performed a cursory search to see if the bug report is relevant , not redundant , nor in conflict with other tickets . <section> - fix # <number> : found instances of branches that can never be reached by unit tests . <section> functions with statements that can never be reached : md_app . c : md_execrequest can not hit default case since command codes are already verified by <code> <url> md_app . c : md_searchcmdhndlrtbl can not reach this else statement because the message type can not be anything other than <code> or <code> <url> md_dwell_tbl . c : md_tablevalidationfunc <url> <section> <percent> coverage <section> see above <section> ci <section> none <section> haven carlson , <allcaps> nasa </allcaps>"
"fix # <number> , remove cfe_psp_memset use for addresses in <allcaps> ram </allcaps> <section> - fix # <number> <section> steps taken to test the contribution : ci <section> none , just removes unnecessary <allcaps> api </allcaps> dependence <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , add missing requirements rationale <section> - fix # <number> <section> na - requirements rationale updates only <section> none <section> na <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , gave md_tbl_val_null_ptr_err_eid unique id * x] i reviewed the [ contributing guide <url> . * [x ] i signed and emailed the appropriate contributor license agreement to <email> and copied <email> . <section> a clear and concise description of what the contribution is . changed the id of md_tbl_val_null_ptr_err_eid to <number> to be unique . fix # <number> <section> steps taken to test the contribution : <number> . push change <number> . check unit test output to confirm the event ' s new id <section> no impact to behavior <section> browser <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - note <allcaps> cla </allcaps> ' s apply to software contributions ."
"fix # <number> , added codeql - build . yml * x] i reviewed the [ contributing guide <url> . * [x ] i signed and emailed the appropriate contributor license agreement to <email> and copied <email> . describe the contribution a clear and concise description of what the contribution is . added codeql to github workflows fix # <number> testing performed pushed to branch checked codeql ran successfully expected behavior changes no impact to behavior system ( s ) tested on browser additional context depends on <url> to run successfully third party code if included , identify any third party code and provide text file of license contributor info - all information <allcaps> required </allcaps> for consideration of pull request full name and company / organization / center of all contributors ( "" personal "" if individual work ) note <allcaps> cla </allcaps> ' s apply to software contributions ."
"add codeql to repository * x] i reviewed the [ contributing guide <url> . * x] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> use codeql for continuous integration <section> add codeql workflow <section> none <section> add any other context about the feature request here . <section> haven carlson"
"fix # <number> , resolve ut uninit var static analysis warnings <section> - fix # <number> <section> ci + static analysis run <section> none , just squashes static analysis warnings <section> - hardware : vm - os : ubuntu <number> - versions : bundle main + apps + related static analysis resolution branches <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"md is unable to dwell on application - private symbols * x] i reviewed the [ contributing guide <url> . * x ] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> md is unable to get application symbols , due to changes in cfe to make application symbols private : <url> <section> using os_modulesymbollookup should be an option to peek / telemeter app - private symbols <section> leave as - is ; implementation of os_modulesymbollookup is the same as os_symbollookup on vxworks anyways , so it would appear this would only affect linux . <section> <url> <section> john pham , northrop grumman"
"fix # <number> , resolve strict cppcheck style warnings <section> - fix # <number> <section> ci <section> none , just squashes strict cppcheck warnings <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
fill in missing requirements rationale there ' s a handful of missing requirements rationale . add . imported from <allcaps> gsfccfs </allcaps> - <number>
"static analysis issues relative to flight code handful of static analysis issues in the "" red "" identified ( non - style issues ) . need to resolve these . filter : - file : elf - file : ut - file : cfe - file : os - file : cf_ - file : _lab_app . c ! ( significance : style ) should resolve and / or disposition the higher ranked ones at minimum . note license restricts publishing issues . imported from <allcaps> gsfccfs </allcaps> - <number>"
"resolve static analysis issues relative to unit tests many actual code issues ( uninitialized variables , buffer overruns , etc ) identified via static analysis in the unit tests . all actual "" bugs "" should be resolved . imported from <allcaps> gsfccfs </allcaps> - <number>"
"revisit coverage , update to <percent> code / branch or write issues where unreachable <section> other coverage failures : failure : coverage cs lines <percent> functions <percent> branches <percent> failure : coverage ds lines <percent> functions <percent> branches <percent> failure : coverage fm lines <percent> functions <percent> branches <percent> failure : coverage hs lines <percent> functions <percent> branches <percent> failure : coverage lc lines <percent> functions <percent> branches <percent> failure : coverage sc lines <percent> functions <percent> branches <percent> fix where possible , elsewise issues should document all uncovered lines / branches and disposition ( why it ' s ok as - is ) imported from <allcaps> gsfccfs </allcaps> - <number>"
incorrect unit tests are in this repository the unit tests in this repository are not the same as the tests on sourceforge and do not work correctly .
