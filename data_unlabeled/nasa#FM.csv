text
"fix # <number> , uninitialized filestats in fm_getvolumefreespace <section> - fix # <number> <section> ci <section> no static analysis uninitialized variable warnings <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
uninitialized filestats in fm_getvolumefreespace <section> uninitialized variable warning in codesonar : <url> from : <url> <section> run static analysis <section> no uninitialized variable warnings <section> static analysis <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> , consolidate hk variables that are duplicated in the global struct <section> - fixes # <number> - consolidates the variables common to both the global struct and the housekeeping packet to only exist ( and be updated / accessed ) in the housekeeping struct <section> github ci actions all passing successfully ( incl . build + run , unit / functional tests etc . ) . <section> no change to behavior other than storage location of the variables as outlined above . simpler pattern , reduces duplication and eases future maintenance . <section> avi weiss <user>"
"hk struct members that are duplicated in the global struct could be consolidated <section> all of the housekeeping struct members except <code> are duplicated ( identically ) in the global struct . <section> <url> <url> <section> consolidate duplicated struct members to only exist ( and be updated / accessed ) in the housekeeping struct . this more parsimonious approach is taken by several of the apps ( cf , cs , mm , sc ) as well as <allcaps> evs </allcaps> and sb in the cfe . <section> avi weiss <user>"
"fix # <number> , make padding explicit in <code> & <code> <section> - fixes # <number> - implicit padding being added in <code> & <code> has been made explicit <section> github ci actions all passing successfully ( incl . build + run , unit / functional tests etc . ) . <section> no change . <section> avi weiss <user>"
compiler - added implicit padding in <code> & <code> <section> it seems that there is implicit padding being added by the compiler in <code> & <code> . <section> <url> <url> <section> make implicit padding explicit . <section> avi weiss <user>
"fix # <number> , move variables declared mid - function to the top <section> fixes # <number> a few stray variables in the test code that were declared mid - function were moved to the top of their respective functions . <section> github ci actions all passing successfully . <section> all variables declared top of function as per cfs conventions / guidelines - eases future maintenance and improves consistency . <section> avi weiss <user>"
variables declared mid - function in test code <section> a few cases of variables declared mid - function in the test code . <section> all variables should be declared at the top of the function - eases future maintenance and improves consistency . <section> avi weiss <user>
"fix # <number> , remove redundant use of "" dummy "" in test code <section> - fixes # <number> - redundant use of the word "" dummy "" in test code variables / text has been removed <section> github ci actions all passing successfully ( incl . unit tests etc . ) <section> no change to behavior . test code is simpler and cleaner when redundant qualifiers are removed . <section> avi weiss <user>"
"remove redundant use of "" dummy "" in test code <section> - similar to <url> - redundant use of the word "" dummy "" in some variables / text in the test code . all test code variables are ' dummy ' variables - no need to label them as such . <section> simplify test code by removing redundant qualifiers . <section> avi weiss <user>"
"fix # <number> , update command handler function message pointers and return <section> - fixes # <number> - updated the command handler functions to use their specific command message types <code> <code> etc . ) rather than the generic <code> - converted return types of the command handler functions and other relevant functions to <code> ( also changed their <code> / <code> variables to <code> - added a general error return code <code> - used some of the new , more specific , <allcaps> cfe </allcaps> error return types : - converted the previous <code> returns from failures during <code> in the dispatch routines to the new <allcaps> cfe </allcaps> return code <code> - <code> and <code> in suitable locations instead of just using <code> question : _does something need to be done in terms of deprecation due to the change to the <allcaps> api </allcaps> ( the <code> <code> parameter type has changed ) ? _ <section> github ci actions ( incl . build and run , unit tests etc . ) all passing successfully . <section> behavior largely unchanged . compiler error is now thrown if the command handler functions are invoked with *any* type other than their own specific command type . using a defined set of error return macros and the <code> return type improves code clarity and makes fm more consistent with cfe and the other cfs apps . <section> avi weiss <user>"
"use <allcaps> cfe </allcaps> pattern for command handler functions <section> <allcaps> cfe </allcaps> has an established pattern for message dispatch routines in that : <number> . it returns a <code> ( standard return value ) <number> . it accepts a single argument which is a const pointer to the message , of the actual / unique message type ( e . g . <code> , etc ) . fm does not follow this pattern , its message processor functions return <code> and they accept the generic <allcaps> cfe sb </allcaps> message buffer rather than the specific message type . <section> make fm follow the <allcaps> cfe </allcaps> pattern <section> this makes every command handler prototype unique , so they cannot be inadvertently interchanged without a compile error ( this is a good thing ) . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , separate msg size verify <section> move the <allcaps> cmd </allcaps> message input size validation to a separate function , so the command handler does not do this itself . this allows the handler to focus on the real message action as opposed to the structure of the message itself . fixes # <number> <section> build and run all tests . run fm in <allcaps> cfe </allcaps> and send commands to check behavior . <section> no impact to behavior - improve source code structure / unit separation only <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , use size_t for ' size ' variables <section> fixes # <number> easy - to - find size variables converted to <code> type . all except the local variables in <code> and <code> were already of type <code> , so no real risk of signedness issues popping up . note : i did not scrub the entire app - if someone can suggest some additional variables to convert over to <code> i can add them to this pr . a few typos and spacing issues cleared up in the same files . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> variables representing size should use <code> where possible - more expressive and more compliant with the various ( relevant ) coding guidelines . <section> avi weiss <user>"
use size_t for ' size ' variables <section> most variables representing sizes in fm use size_t . there are a few that do not follow this custom and could be transitioned over . <section> <url> <url> <section> all size variables that can use size_t should do so - size_t is more expressive and more consistent with the relevant coding guidelines . <section> avi weiss <user>
"fix # <number> , use cfe_msg_ptr macro <section> use of cfe_msg_ptr requires objects and members to be named correctly per cfe_msg definitions . includes other remaining cleanup items . mainly : <number> . consistency in naming of header objects <number> . consistency in naming between command names and command handler functions ( fix missing words , fix mismatch abbreviations , etc ) fixes # <number> <section> build and run all tests <section> no impact to behavior . more future proof code . <section> debian <section> joseph hickey , vantage systems , inc ."
"fm should use generated stubs directly <section> fm appears to use generated stubs that have been modified or added to by hand . this makes it difficult when apis need to change and the stubs need an update , as the hand - edits will need manual propagation after regenerating the stubs . <section> use generated stubs directly and do not edit or modify the outputs if possible . move any extra stub objects into separate source files instead of editing the generated file . <section> this way , invoking the regenerate stubs script will not step on any of the hand - written files . <section> joseph hickey , vantage systems , inc ."
"apps should check / verify msg <allcaps> before </allcaps> calling handler <section> this remains an area with coding pattern discrepancies between <allcaps> cfe </allcaps> core and <allcaps> cfs </allcaps> apps , and also different between <allcaps> cfs </allcaps> apps to some degree as well . the <allcaps> cfe </allcaps> core and sample app ( which is supposed to be the example of "" best practice "" ) do validation on the message before calling the handler . for example : <code> this is different from fm , which does a similar check , but done inside each handler , for example : <url> <section> <allcaps> cfs </allcaps> apps should follow the best practices / patterns set forth in the framework code . ( there are reasons for the pattern being recommended practice ) <section> the pattern recommended in the framework ( checking before calling , as done in sample_app ) has several advantages : <number> . each command handler function has a unique type - safe prototype , that cannot be interchanged with another handler without triggering a type mismatch compiler error . <number> . all typecasting / conversions are confined to one place , and it is nearby to the place that the verification is done - which eases maintainability because check and conversion are all in close proximity and any mismatches will be more visible . <number> . it spreads out the cyclomatic complexity . in the non - recommended pattern , there is a case where the length check fails , and the entire handler is essentially skipped . this adds to the cyclomatic complexity of every handler . in the recommended pattern , those checks are done prior to the invocation of the handler , so the handler can focus solely on its intended purpose - doing the command itself . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , change evs_register failure from sendevent to writetosyslog <section> fixes # <number> <code> replaced by <code> on failure of <code> . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . coverage maintained at <percent> : <code> <section> failure can be successfully recorded somewhere even without the <allcaps> evs </allcaps> now . <section> avi weiss <user>"
fm tries to send an event message on failure of registering with <allcaps> evs </allcaps> <section> copy of <url> fm and ds are the only apps to ( attempt to ) utilize <code> even though the call to <code> failed . better update to <code> so failure can be recorded somewhere . this brings fm ( and ds ) in line with the other cfs apps . <section> <url> <section> <code> on failure . <section> avi weiss <user>
"fix # <number> , remove superfluous assignments at the top of functions <section> fixes # <number> extraneous assignments at the top of functions were removed . code is cleaner , and future maintainability is improved . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> no change to behavior . <section> avi weiss <user>"
"superfluous assignments at the top of functions <section> fm has a many extraneous assignments at the top of functions that are immediately ( or definitely before first use ) reassigned a value - many to <code> as in <url> but also other to <code> , <code> etc . <section> <url> <url> <url> <url> <section> remove / combine assignments - unnecessary code . <section> avi weiss <user>"
"fix # <number> , add payload submember for all cmd / tlm <section> adds a "" payload "" submember to all cmd / tlm structs . the message content is found in this sub - structure . this matches the patterns currently implemented in <allcaps> cfe </allcaps> . fixes # <number> <section> build and run all tests <section> none expected . this _may_ affect the padding in some circumstances , but should not change anything if the headers were properly aligned to begin with . <section> debian <section> this pattern of using a payload sub - structure matches <allcaps> cfe </allcaps> and keeps things more consistent . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove static from table definition <section> this is not needed , and it ends up also needing a compiler - specific attribute to avoid a warning . much simpler without it . fixes # <number> <section> build and run all tests <section> none <section> debian <section> <allcaps> fsb </allcaps> coding standards restrict use of compiler - specific attributes - should limit to standard <allcaps> ansi </allcaps> / <allcaps> iso c </allcaps> . this makes it comply . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , compression selectable at source file level <section> adds a cmake option for compression sub - component implementation . this replaces the fm_include_decompress option in fm_platform_cfg . h . currently available options are : - fslib ( should be equivalent to fm_include_decompress set ) - none ( should be equivalent to fm_include_decompress unset ) - zlib ( stub for future work ) this lays the groundwork to support compression in addition to decompression , using an external 3 rd part library if desired . fixes # <number> <section> build and run all tests <section> compression option no longer in header file - now in a cmake option with source selection . basically equivalent though . <section> debian <section> all conditional compilation ( <code> ) around compression has been removed . this comprised a fair bit of code in fm that was not being tested in any workflow because compression is usually disabled . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , generate stubs for internal functions <section> regenerate the stubs for fm_child , fm_cmds , and fm_tbl internal units using the ut assert stub generator tool . fixes # <number> <section> build and run all tests <section> none ( but see notes ) <section> debian <section> other apis have been changed in parallel prs so those stubs are <allcaps> not </allcaps> updated here . those stubs will be updated with their respective prs ( avoids merge conflict ) . this also requires the changes from nasa / osal # <number> in order to deal with the differently - sized return values . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , move app global to internal include <section> global data structures should not be defined in the public include files , they should be private to the local source directory . unit test is justified in accessing this file directly , so provisions are also made to permit this . fixes # <number> <section> build and run all tests . sanity check on fm running in <allcaps> cfe </allcaps> . <section> no impact to behavior . private struct that was in public_inc is now back in a private header . <section> debian <section> joseph hickey , vantage systems , inc ."
"fix # <number> , update const - ness of inputs <section> correct the const qualifiers on functions in fm_cmd_utils . c . most of these functions do not modify their inputs , but were not const , except for the one function that _was_ marked const and _did_ modify its inputs ( backwards ) . fixes # <number> <section> build and run tests <section> nothing visible externally . message processors no longer modify input buffers . <section> joseph hickey , vantage systems , inc ."
"conditional compile of decompress file cmd <section> there is a substantial amount of code that is conditionally compiled based on the <code> platform config option . while the intent is reasonable - to not require the dependency on ( large ) compression routines for users that do not need this feature - the problem is that this is disabled in the default config thus in all build and test workflows - and a significant chunk of code goes untested as a result . the <code> option disables two entire <allcaps> fsw </allcaps> functions , plus <number> - <number> more ut functions , which is quite substantial . code in any of these functions can become stale / invalid due to changes elsewhere in the <allcaps> fsw </allcaps> as fm is maintained . <allcaps> gsfc </allcaps> coding practices discourage large chunks of "" compiled - out "" code for this reason . <section> reduce the amount of code that is disabled by <code> . when this is disabled , dispatch tables probably should still include the cc and go through the basic motions , call the handler , put it in the work queue , etc . generally , only the actual call to <code> needs to be disabled . <section> this could potentially be done as a cmake compile - time option , with a source file selection . this is the way many optional components are implemented in other modules such as <allcaps> osal </allcaps> ( e . g . network sockets ) . <section> trying a basic compile of fm with <code> enabled looks like its already broken . fm itself seems ok but the fs_lib is already stale and does not compile with draco . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , replace quotes with angle brackets in / inc * ] i reviewed the [ contributing guide <url> . * ] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fixes # <number> - replace quotes with angle brackets in / inc files . <section> <number> . performed build verification testing <number> . ci <section> dan knutsen <allcaps> nasa </allcaps> goddard"
replace quotes with angle brackets in <hashtag> include </hashtag> statements within / inc describe the solution you ' d like quotes should be replaced with angle brackets in <hashtag> include </hashtag> statements that reside in the / inc location . this will ensure that the preprocessor selects the files pre - designated to override the default files contained within the open source cfs build release - as opposed to selecting those located in the same directory . requester info dan knutsen <allcaps> nasa </allcaps> goddard
"fix # <number> , adds fsw / src to app target <section> - fixes # <number> <section> make install <section> successful cert_testbed build <section> - ubuntu <number> <section> n / a <section> n / a <section> justin figueroa , vantage systems"
"add fsw / src to app target <section> cannot build cert_testbed . <code> is needed to build tables , etc . revise cmakelists . txt <section> build in cert_testbed <section> error - free build <section> if applicable , add references to the software . <section> - ubuntu <number> <section> n / a <section> justin figueroa , vantage systems <section> full name and company / organization if applicable"
"fix # <number> , moves interface definition files to inc <section> - fixes # <number> <section> make install lcov <section> no expected behavior change . <section> - ubuntu <number> <section> n / a <section> if included , identify any third party code and provide text file of license <section> - justin figueroa , vantage"
"move interface definition files to "" inc "" location <section> the interface definition files of all open source apps currently exist in the "" src "" directory . <section> create an "" inc "" dir to go with the "" src "" dir . move the interface definitions into this location : "" _msg . h "" , "" _msgdefs . h "" , "" _tbldefs . h "" , and "" _events . h "" . consider moving header files in both "" platform_inc "" and "" mission_inc "" to "" inc "" <section> leaving as is . <section> n / a <section> justin figueroa , vantage systems"
"remove <code> designation from cfe_tbl_filedef objects <section> having a global declared as <code> is supposed to be for cases where the symbol is not to be referenced outside of that compilation unit ( that is , it makes the symbol "" hidden "" , so to speak ) . it prevents other compilation units being linked with this unit from seeing the symbol . somewhere along the way , this keyword got applied to table definitions in many <allcaps> cfs </allcaps> apps . this is not required and even a bad idea for several reasons : <number> . technically , the <code> tool does need to find the symbol . ( thus if it is truly "" hidden "" it will not work - this seems to rely on the name still appearing in the <allcaps> elf </allcaps> but simply as a different type of symbol ) <number> . tables are not linked with other compilation units ( and thus no reason / justification on why the symbol name would ever need to be hidden ) <number> . <section> ( because it is a global that does not appear to be used anywhere , at least in the compiler ' s view ) <number> . in order to get around the previous issue and fix the warning , an <code> was added . attributes like this are a non - standardized extension , and these are not supposed to be used in <allcaps> fsw </allcaps> code . <section> just make it a regular ( non - static ) symbol with no special attributes - everything "" just works "" this way . <section> see <url> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , clean up strncpy calls <section> call "" strncpy "" with the size parameter indicating the size of the destination buffer , rather than the input string length . a buffer overflow was avoided due to a length check already in the code , but calling the function properly should avoid a warning . fixes # <number> <section> build and run all tests send the <code> and <code> and confirm correct behavior . <section> no compiler warnings . no change to functionality . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc ."
"fix # <number> , remove initializations causing cppcheck errors <section> fixes # <number> both seem fine to change from initialization at the top of the function to a plain declaration . <code> is used in only one <code> block , and it is assigned a value at its first use in the init - statement of the <code> loop on line <number> . subsequent references to <code> all logically follow this assignment , so the initialization at the top of the function block ( line <number> ) is redundant and can safely be converted to a plain declaration . the same goes for <code> . it is used in only one <code> block , and is assigned a value there at its first use in the init - statement of the <code> loop on line <number> . the initialization on line <number> can thus be converted to a simple declaration . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully if separate issue <url> is suppressed image <img> the log from the successful build ( with the <allcaps> gcc </allcaps> suppressions that can not be included in this pr ) can be viewed here : <url> <section> no impact on code behavior . cppcheck now passes without error again . <section> avi <user>"
new <allcaps> gcc </allcaps> warnings causing build failure [ - werror = stringop - overflow <happy> <section> i believe these are newly triggered <allcaps> gcc </allcaps> warnings ( treated as errors ) that are now causing the standard fm build + run workflow to fail . <code> <section> run the build + run github action on the current main branch fm source code . <section> build + run workflow should run without errors . <section> avi <user>
new cppcheck errors : ' [ unreadvariable ] ' <section> latest version of cppcheck is issuing the following failures for fm : <code> <section> run the current version of cppcheck on the current main branch fm source code . <section> cppcheck should pass without raising any errors . <section> avi <user>
"fix # <number> , add monitor table <section> replace the "" free space "" table with a more general disk monitoring table , which can have entries for volume free space ( which is what was there ) as well as an estimate of directory usage . table and <allcaps> tlm </allcaps> was renamed accordingly . this changes the definition of the <allcaps> tlm </allcaps> report to include the extra info , so it requires a ground system update . fixes # <number> <section> build and run fm in <allcaps> cfe </allcaps> , issue "" monitor "" command ( <number> ) and confirm correct / expected <allcaps> tlm </allcaps> is sent run all tests , confirm <percent> coverage <section> the "" free space "" command is replaced with a more general "" monitor "" command that allows for multiple types / flavors of monitoring . the volume_free_space type implements the same logic as the original free space table / command , and the newly added directory_estimate type implements the request in # <number> . <section> ubuntu <number> <section> this is effectively replacing the old free space <allcaps> tlm </allcaps> packet ( fm_free_space_tlm_mid ) with a monitor report <allcaps> tlm </allcaps> that is more general . notably , it contains a type indicator , and it can report either space used or space free depending on type . <section> joseph hickey , vantage systems , inc ."
"fix # <number> , apply consistent event id names to common events <section> - fixes # <number> - consistent event ids have been applied to the inconsistent cases to align them with a common event id naming convention . <section> only github ci actions . <section> no impact on code behavior ( no logic changes ) . consistent event id names for the events which are common to all / most cfs components and apps will improve consistency and ease make code review / debugging easier . <section> avi weiss <user>"
"fix # <number> , remove redundant / inconsistent comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . <section> fixes # <number> removes redundant and inconsistent comments ( e . g . <code> , <code> , function name in function header comments ) . there were also a few cases of unnecessary empty lines ( e . g . on the last line before the closing brace of a function ) and also missing empty lines ( e . g . between functions ) which were corrected . some of these empty lines trigger the ci format checks . i have left the commits separated for now to make life easier for whoever reviews this . i can squash them if / when this is ready for merge . <section> none ( comment and whitespace changes only ) . <section> no impact on behavior . these updates will reduce clutter and inconsistency in the code , improving readability . <section> <user>"
"redundant comments (/* end of function */ , /* end if */ etc . ) and clean up empty lines . <section> copy of <url> and <url> there are quite a few redundant comments in the code , such as : - <code> - type comments - <code> - type comments - function header comments which include the function name another minor issue has to do with empty lines : a ) _unnecessary_ empty lines ( e . g . first line after the opening brace of a function / struct , or the last line before the closing brace - the latter apparently sometimes triggers the ci format checks ) . b ) _missing_ empty lines between functions ( i . e . closing brace of last function , then next function beginning on the immediately next line without an empty line in between ) the unnecessary empty lines ( at the beginning or end of a function , for example ) represent a low single - digit percentage of the cases ( the vast majority of functions / structs do not have these extra empty lines ) , so there is an argument to remove them purely for consistency , not just due to them being redundant and triggering the ci format checks . <section> remove redundant comments to reduce clutter and inconsistency in the code , and improve readability . <section> <user>"
"fix # <number> , remove unnecessary parentheses around return values . <section> fixes # <number> removes parentheses in return statements in fm that return a single value / term . this is aligns these return statements with the predominant style of cfs . <section> none , prior to submission of the pull request . <section> no impact on behavior . <section> <user>"
scrub use of ( ) in return statements <section> unnecessary parentheses around return values in fm copy of <url> <section> <user>
"fix # <number> , added function to verify the given state of a file * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fix # <number> , created function to verify the given state of a file or sends an error event message . <section> unit testing <section> no impact to behavior <section> ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , use cfe_fs_initheader ( ) to initialize <allcaps> cfe </allcaps> header * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fix # <number> <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"gateway managed storage support telemetry <section> we need to maintain current usage tracking on a directory - by - directory bases . if fm is used to modify the contents of our directories , our tracking would not be accurate which could lead to a loss of data . for most commands to fm , we can gain the needed information by subscribing to the fm commands and querying <allcaps> osal </allcaps> directly . however , fm_delete_cc , fm_delete_all_cc , and fm_decompress_cc commands are a problem because we would not have foreknowledge of the files size before the command is executed by fm . this would cause us to traverse an entire directory to correct the usage tracking . we will have multiple remote drives . with potentially terabyte drives , traversing the directories on a remote drives is too <allcaps> cpu </allcaps> and network intensive . <section> fm_delete_cc : typedef struct { cfe_msg_telemetryheader_t tlmheader ; /* *< \ brief telemetry header */ uint32 filesize ; /* *< \ brief size of the file deleted */ char filename [ os_max_path_len ] ; /* *< \ brief delete filename */ } fm_deletefiletel_t ; fm_delete_cc : typedef struct { cfe_msg_telemetryheader_t tlmheader ; /* *< \ brief telemetry header */ uint64 freed ; /* *< \ brief bytes freed in directory */ char directory [ os_max_path_len ] ; /* *< \ brief directory name */ } fm_deletealltel_t ; fm_decompress_cc : typedef struct { cfe_msg_telemetryheader_t tlmheader ; /* *< \ brief telemetry header */ uint32 sourcesize ; /* *< \ brief size of the compressed file */ uint32 tagetsize ; /* *< \ brief size of the uncompressed file */ char source [ os_max_path_len ] ; /* *< \ brief source filename */ char target [ os_max_path_len ] ; /* *< \ brief target filename */ } fm_decompresstel_t ; <section> similar feedback telemetry on following would be nice but not required fm_copy_cc fm_move_cc fm_concat_cc maybe there a way to have a common telemetry packet that include function code . <section> add any other context about the feature request here . <section> nathan lynch <allcaps> jsc </allcaps> - er611"
"fix # <number> , resolve usersguide issues with doxygen <date> <section> - fix # <number> <section> build doc with ubuntu <number> <section> successful doc build <section> - hardware : i5 / docker - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , initialize dirlistdata with zeros before using * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fix # <number> , zero out dirlistdata buffer in fm_childdirlistfileloop <section> unit testing <section> dirlistdata . entryname will not have garbage values . <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , remove return statements from void functions * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fix # <number> removed unnecessary return statements from void functions <section> build and run unit tests <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>"
"fix # <number> , remove unrequired internal delete command handling <section> - fix # <number> <section> ci <section> no longer supports fm_delete_int_cc or the related strange ( out of family ) logic . fm is operator interface to file management ( even the design document says it does not do "" automated "" actions ) . <section> ci <section> could have deprecated , but can not find any external references to it so put in this pr to see if there is support for a direct removal . it did not behave as described to begin with . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> # <number> # <number> # <number> , ut cleanup , remove unreachable code , initialize filemode on os_stat failure <section> - fix # <number> - fix # <number> - fix # <number> - fix # <number> <section> ci <section> will now initialize filemode on os_stat failure ( will not write uninitialized data ) <section> ci <section> can break up if needed , but easier to submit together since they resolve related coverage and ut issues . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"unreachable code in fm_child . c , entrylength never larger than sizeof ( dirlistdata . entryname ) <section> since both dirlistdata . entryname and tempname are both os_max_path_length , and and the os_dirent_t filename is limited by os_max_file_name , the first condition below can never be false : <url> <section> remove , the second condition is sufficient ( add comment ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
directory entries are read even after packet is full ( not necessary ) <section> could simplify logic and avoid looping through entire directory even after packet is full : <url> <section> <code> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>
"fix # <number> , updated code coverage limits * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fixes # <number> , recomputed coverage and updated the limits in the code - coverage workflow <section> pushed changes and observed results from unit test and coverage workflow <section> no impact to behavior <section> browser <section> haven carlson - <allcaps> nasa </allcaps>"
"update code - coverage count and add to workflow * ] i reviewed the [ contributing guide <url> . * ] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [ ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> n / a <section> when # <number> and # <number> are merged , recompute coverage and update the limits in the code - coverage workflow <section> none <section> none <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps>"
"fix # <number> , remove redundant conditional to support full coverage <section> - fix # <number> removes the redundant length check . <section> ci <section> none , the element sizes are already sufficient to fit . <repeated> can not fail check without overflowing local variables . <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
remove random numbers from unit tests <section> several unit tests use the ut_utils_any_ * function to introduce randomness to tests that do not need it ( and might actually be hurt by it ) . see for example : <url> and following searches <url> <url> <url> <url> <url> <section> remove use of these macros where unnecessary <section> none <section> none <section> gerardo e . cruz - ortiz | <allcaps> nasa </allcaps>
"fm_child . c has an unreachable branch <section> <code> is immutable in testing code coverage . therefore , full branch coverage starting on line <number> below is not possible . example code coverage result : <code> <section> the following expression can not be achieved : <code> ) <url> <section> <percent> coverage . <section> see code snip above <section> continuous integration <section> add any other context about the problem here . <section> justin figueroa , <allcaps> asrc </allcaps> federal"
"part # <number> , update code coverage increases code coverage for fm_child_tests . c and fm_cmds_tests . c <section> a clear and concise description of what the contribution is . - part # <number> <section> <number> . lcov - - capture - - rc lcov_branch_coverage = <number> - - directory build - - output - file coverage_test . info <number> . lcov - - rc lcov_branch_coverage = <number> - - add - tracefile coverage_base . info - - add - tracefile coverage_test . info - - output - file coverage_total . info <number> . genhtml coverage_total . info - - branch - coverage - - output - directory lcov <section> none <section> - os : ubuntu <number> <section> none <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - note <allcaps> cla </allcaps> ' s apply to software contributions ."
"fm_cmd_utils . c has branches that can not be reached ( <number> / <number> ) <section> looking at code coverage for <url> there are several functions in fm_cmd_utils . c that have else statements that can never be reached . these functions check the return value of fm_getfilenamestate . total uncovered here is <number> lines <number> branches . <section> functions with else statements that can never be reached : - fm_verifyfileclosed <url> - fm_verifyfileexists <url> - fm_verifyfilenoexists <url> - fm_verifyfilenotopen <url> - fm_verifydirexists <url> - fm_verifydirnoexists <url> function if an if statement that can not be reached - searchopenfiledata <url> <section> <percent> coverage <section> see above <section> ci <section> none <section> haven carlson , <allcaps> nasa </allcaps>"
"fix # <number> , update code coverage for fm_cmd_utils . c * x] i reviewed the [ contributing guide <url> . * [x ] i signed and emailed the appropriate contributor license agreement to <email> and copied <email> . <section> - part # <number> updated unit tests for fm_cmd_utils . c to cover loadopenfiledata , searchopenfiledata , and branches . <section> steps taken to test the contribution : <number> . lcov - - capture - - rc lcov_branch_coverage = <number> - - directory build - - output - file coverage_test . info <number> . lcov - - rc lcov_branch_coverage = <number> - - add - tracefile coverage_base . info - - add - tracefile coverage_test . info - - output - file coverage_total . info <number> . genhtml coverage_total . info - - branch - coverage - - output - directory lcov <section> no impact to behavior <section> - os : ubuntu <number> <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - note <allcaps> cla </allcaps> ' s apply to software contributions ."
"fix # <number> , remove cfe_psp_memset use on <allcaps> ram </allcaps> <section> - fix # <number> <section> ci <section> none , just removes unnecessary <allcaps> api </allcaps> dependence <section> - ci - versions : bundle main + this commit + added app <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> # <number> , add missing rationale and allow for multiple command counters in requirements <section> - fix # <number> - fix # <number> <section> na , requirements updates only <section> none <section> na <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , added codeql - build . yml * x] i reviewed the [ contributing guide <url> . * [x ] i signed and emailed the appropriate contributor license agreement to <email> and copied <email> . describe the contribution a clear and concise description of what the contribution is . added codeql to github workflows fix # <number> testing performed pushed to branch checked codeql ran successfully expected behavior changes no impact to behavior system ( s ) tested on browser additional context depends on <url> to run successfully third party code if included , identify any third party code and provide text file of license contributor info - all information <allcaps> required </allcaps> for consideration of pull request full name and company / organization / center of all contributors ( "" personal "" if individual work ) note <allcaps> cla </allcaps> ' s apply to software contributions ."
"add codeql to repository * x] i reviewed the [ contributing guide <url> . * x] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> use codeql for continuous integration <section> add codeql workflow <section> none <section> add any other context about the feature request here . <section> haven carlson"
"fix # <number> # <number> , resolve static analysis warnings <section> - fix # <number> - fix # <number> <section> ci + static analysis run <section> none , just squashes static analysis warnings <section> - hardware : vm - os : ubuntu <number> - versions : bundle main + apps + related static analysis resolution branches <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
"fix # <number> , resolve strict cppcheck warnings <section> - fix # <number> <section> ci <section> none , just resolves workflow failures <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
fill in missing requirements rationale there ' s a handful of missing requirements rationale . add . imported from <allcaps> gsfccfs </allcaps> - <number>
"resolve static analysis issues relative to unit tests many actual code issues ( uninitialized variables , buffer overruns , etc ) identified via static analysis in the unit tests . all actual "" bugs "" should be resolved . imported from <allcaps> gsfccfs </allcaps> - <number>"
"revisit coverage , update to <percent> code / branch or write issues where unreachable failure : coverage cs lines <percent> functions <percent> branches <percent> failure : coverage ds lines <percent> functions <percent> branches <percent> failure : coverage fm lines <percent> functions <percent> branches <percent> failure : coverage hs lines <percent> functions <percent> branches <percent> failure : coverage lc lines <percent> functions <percent> branches <percent> failure : coverage md lines <percent> functions <percent> branches <percent> failure : coverage sc lines <percent> functions <percent> branches <percent> fix where possible , elsewise issues should document all uncovered lines / branches and disposition ( why it ' s ok as - is ) imported from <allcaps> gsfccfs </allcaps> - <number>"
app requirement issues <number> . lc3002 . <number> & lc3002 . <number> - don ’ t see where event filter is able to be specified in action point or watchpoint definition tables . <number> . ds8000 – <allcaps> ds hk </allcaps> packet <number> . fm4000 – <allcaps> fm hk </allcaps> packet <number> . ds3000 - requirement incomplete imported from <allcaps> gsfccfs </allcaps> - <number>
"fm_delete_int_cc appears to be redundant with fm_delete_cc the doxygen comment for fm_delete_int_cc states : "" this is a special version of the <hashtag> fm delete cc </hashtag> command for use when the command is sent by another application , rather than from the ground . this version of the command will not generate a success event , nor will the command increment the command success counter . the intent is to avoid confusion resulting from telemetry representing the results of delete commands sent by other applications and those sent from the ground . "" however , this does not appear to be the case . both fm_delete_int_cc and fm_delete_cc call the same functions . it appears that fm_delete_int_cc does increment the command success counter , but does not send an event message from the child task . i think that the need for fm_delete_int_cc needs to be reevaluated and if it is needed , it should be updated to match its description . imported from <allcaps> gsfccfs </allcaps> - <number>"
"replace fm internal command code with internal <allcaps> mid </allcaps> instead currently , the fm app has an "" internal "" command code defined for a delete file request that originates from another app instead of the ground . however , the definition for that command code ( fm_delete_int_cc ) is located in a the header file fm_msgdefs . h , which is located in the app ' s "" fsw / src "" directory , and strictly speaking , not accessible by other apps . instead of using an internal command code , fm could use an internal message id ( e . g . , fm_internal_cmd_mid ) that can be defined in fm_msgids . h , which is located in the platform_inc directory . other cfs apps could then access that command <allcaps> mid </allcaps> and send the internal delete command to the fm app without reaching into what should be an fm - local header file . imported from <allcaps> gsfccfs </allcaps> - <number>"
"clarify command counter requirements allow for multiple contexts ( tasks ) <section> some of the command acceptance check requirements are implemented at in the child task . for those requirements , it ' s the child task command error counter that increments instead of the main task command error counter . this is not really clear in fm1004 which implies a single error counter . <section> since the concept is the same and it ' s somewhat implementation dependent ( there ' s no requirement for a child task ) the suggestion is to update the rationale to state this can be the case . <section> could update each requirement that is handled by the child task , but also could result in over - specifying the design . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>"
