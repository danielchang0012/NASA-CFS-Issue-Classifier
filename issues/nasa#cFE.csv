Title,Body,Labels,URL
"Fix #2423, avoid use of abspath make function","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
The abspath function does not work in GNU make v3.80, which is still used as it is packaged with the Wind River tools as part of VxWorks 6.x.

The `$(abspath ...)` function was used in two places related to generating tables - first for extraction of the ELF file from an intermediate lib, second for conversion of that ELF file to a table file.  In the first case, the path should already be absolute, as it comes from CMake. In the second case, the path should always be relative, because it is intended to match another pattern rule starting with ""elf/%"".  For the second rule, prefixing with $(CURDIR) should achieve the same effect.

Fixes #2423

**Testing performed**
Build with both older (v3.80) and newer (v4.3) versions of GNU make

**Expected behavior changes**
Successfully builds using make v3.80

**System(s) tested on**
GSFC Vxworks development machine

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Ready,https://github.com/nasa/cFE/pull/2424
"Older versions of make do not support ""abspath""","**Describe the bug**
The table build procedure uses the GNU make function `$(abspath <file>)` as documented here: https://www.gnu.org/software/make/manual/html_node/File-Name-Functions.html#index-abspath-1

However, older versions of make (e.g. 3.8) appear to not support this function as described - although make itself does not throw an error about this function, the result is an empty string.  This in turn causes the command being executed to fail because its missing the argument, which is supposed to be a file name.

**To Reproduce**
Build the software using an older version of GNU make, an error such as this occurs:

```
cd elf/lx_es1_stub/ && /usr/bin/ar x  cfe_test_tbl.c.o
/usr/bin/ar: cfe_test_tbl.c.o: No such file or directory
```

**Expected behavior**
There should be a library filename between the ""x"" and the object filename.

**Code snips**
The command in the makefile here is: https://github.com/nasa/cFE/blob/8852743153ddafcc7b12054f59bc86a361480f99/cmake/tables/elf2cfetbl_rules.mk#L5

Note that the `$(abspath $(<))` evaluated to the empty string.  Whereas on GNU make 4.x this works as described in the documentation.

**System observed on:**
VxWorks 6.9, which ships a binary version of GNU make v3.8.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/2423
"Fix #2421, adjust dependencies on table lib","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Instead of having the intermediate table library build as part of the ""all"" target, attach it as a dependency under the custom rule.  This way it will only be built in the context of the cfetables top level target, not both.

Fixes #2421

**Testing performed**
Build a configuration with lots of tables (> 100) repeatedly from a clean start using various `-j` values.

**Expected behavior changes**
Builds succeed, no race conditions/sporadic failures.

**System(s) tested on**
Debian

**Additional context**
This excludes the intermediate library from the `all` target and instead attaches it explicitly under the generate tables rule.  So it should avoid the case of having two legs of a parallel build both finding the dependency and attempting to build it.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Ready,https://github.com/nasa/cFE/pull/2422
Occasional table build failures with parallel builds (-j),"**Describe the bug**
When using the -j option to `make`, occasionally some table builds may fail.

**To Reproduce**
Depends on a configuration that uses a lot of table files (> 100).  Repeatedly do clean builds followed by `make -j<X> install` where X is a number greater than 3 or so.  Occasionally an error will occur due to a missing object.

**Expected behavior**
Should succeed

**System observed on:**
Debian

**Additional context**
Initial analysis of a failed build seems to suggest it was trying to build the same intermediate table library twice, at the same time.  As such either the `ranlib` or `ar` actions failed because one of them stepped on the files from the other parallel build.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/2421
"Fix #2419, Fixes errors in IC Bundle workflow file","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Addresses issue #2419. Also restores incorrectly altered Changelog history in CHANGELOG.md.

**Testing performed**
Generated IC branch in fork.

**Expected behavior changes**
No additional ""#"" is placed in front of ""#Changelog"" in Changelog.md
No additional ""#"" is placed in front of ""#define CFE_BUILD_NUMBER ..."" in modules/core_api/fsw/inc/cfe_version.h
Additional occurrences of the string ""Changelog"" are not replaced in the Changelog.md file, as it is now replacing ""#Changelog"".

**Contributor Info - All information REQUIRED for consideration of pull request**
Dylan Z. Baker - NASA GSFC 582",CCB:Ready,https://github.com/nasa/cFE/pull/2420
Formatting Issues with ICBundle Workflow,"**Describe the bug**
There are some small formatting issues that should be corrected in the changelog/version.h updates made by the ICBundle workflow:
1. An additional ""#"" is placed in front of ""#Changelog"" in Changelog.md
2. An additional ""#"" is placed in front of ""#define CFE_BUILD_NUMBER ..."" in modules/core_api/fsw/inc/cfe_version.h
3. Additional occurrences of the string ""Changelog"" are replaced in the Changelog.md file

**To Reproduce**
Steps to reproduce the behavior:
1. Push a code change to a user-owned feature branch
2. Submit a pull request for that code change
3. Go to the ""Actions"" tab in GitHub and run the ""Integration Candidate Bundle Generation"" workflow with the PR number as the input argument for the field labeled ""The pull request numbers to include (Comma separated):""
4. Wait for the workflow to complete
5. Inspect the newly updated/generated ""integration-candidate branch""
6. Observe the changes made to the Changelog.md and modules/core_api/fsw/inc/cfe_version.h files by the workflow

**Expected behavior**
1. No additional ""#"" is placed in front of ""#Changelog"" in Changelog.md
2. No additional ""#"" is placed in front of ""#define CFE_BUILD_NUMBER ..."" in modules/core_api/fsw/inc/cfe_version.h
3. Additional occurrences of the string ""Changelog"" are not replaced in the Changelog.md file

**System observed on:**
GitHub

**Reporter Info**
Dylan Z. Baker/NASA GSFC",,https://github.com/nasa/cFE/issues/2419
cFE Integration candidate: Caelum-rc4+dev54,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2416. Addresses Issue #2415

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/690/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2418/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",Equuleus-rc1,https://github.com/nasa/cFE/pull/2418
Default CFE_MSG_Init function will initialize a message with size of 0,"**Describe the bug**
The 3rd argument to `CFE_MSG_Init()` indicates the actual/real size of the structure that should be initialized.  All of the operations that deal with a primary header assume it must be _at least_ this size, and write to the primary header.

However, CFE_MSG_Init() does not confirm that the size is at least the minimum required.  It will still write fields (e.g. MsgID) into the primary header, even if the size passed in is 0.

**To Reproduce**
Call default `CFE_MSG_Init()` with size specified as 0.  The MsgID is still written into the primary header.  

This is basically a buffer overflow, as the function wrote to memory that was beyond the end of the buffer.

**Expected behavior**
The function should never write beyond the end of the buffer.  Passing a size of 0 should not initialize/write anything because there is no buffer to write to.

**Code snips**
Implementation of CFE_MSG_Init - note this proceeds to ""InitDefaultHdr"" regardless of size.
https://github.com/nasa/cFE/blob/a8b20ac7a0bdc2b765d824b3ff49e78934ce03c9/modules/msg/fsw/src/cfe_msg_init.c#L34-L45

**System observed on:**
Debian

**Additional context**
Related issue in CF that was relying on this bug -- this is being fixed in nasa/CF#401

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/issues/2417
"Fix #2415, use correct object extension in table build","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Do not assume "".o"" for object files, use ${CMAKE_C_OUTPUT_EXTENSION}

Fixes #2415

**Testing performed**
Build tables for VxWorks (using .obj extension)

**Expected behavior changes**
Build should succeed now

**System(s) tested on**
GSFC VxWorks build host

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2416
"Table build logic is assuming "".o"" extension for object files","**Describe the bug**
The new scripts that are used to build table files assume a "".o"" extension on object files.  This is not always the case, as some other systems use "".obj"".

**To Reproduce**
Build using the vxworks 6.9 toolchain combined with the VxWorks platform module - this sets up for an "".obj"" extension.  Table file generation will fail due to a missing .o file.

**Expected behavior**
Should build successfully.

**System observed on:**
VxWorks 6.9 (GSFC build machine)

**Additional context**
The variable `${CMAKE_C_OUTPUT_EXTENSION}` should be used here.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/2415
"Fix #2413, Update Dev Guide to fix out-of-date references and broken links","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2413
  - Delete references to 'cfe_testrunner' module that was removed in https://github.com/nasa/cFE/pull/1292
  - Update references to old function/variables: `CFE_MSG_GetTime`, `CFE_TIME_VALID`, `CFE_TIME_INVALID`, `CFE_TIME_FLYWHEEL`
  - A few typos etc. picked up along the way (and applied to other files at the same time)
  - Broken links in the Developer's Guide 'Table of Contents' fixed

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).

**Expected behavior changes**
Doc changes only.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2414
cFE Dev Guide has out-of-date references and some broken links,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The cFE Developer's Guide has a few out-date-references to functions/variables that have changed, some typos and a few broken links in the table of contents.

**Code snips**
- References to `cfe_testrunner` module that was removed in https://github.com/nasa/cFE/pull/1292
- Out-of-date names: `CFE_MSG_GetTime`, `CFE_TIME_VALID`, `CFE_TIME_INVALID`, `CFE_TIME_FLYWHEEL`

**Expected behavior**
Docs should be up-to-date and correct.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2413
Add C++ header guards,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds header guards to public includes so CFE can be called from C++ translation units

**Testing performed**
- TODO

**Expected behavior changes**
 - No impact to behavior
 - Allow for easy calling from C++ translation units

**System(s) tested on**
- TODO

**Additional context**
Addresses https://github.com/nasa/cFS/issues/688 for CFE

**Contributor Info - All information REQUIRED for consideration of pull request**
Isaac Rowe, NASA JSC, Jacobs Technology
",,https://github.com/nasa/cFE/pull/2412
Fix 2410: document ES Perf enums,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
- Fixes #2410


**Expected behavior changes**
 - No impact to behavior (doc change)

**Contributor Info - All information REQUIRED for consideration of pull request**
Isaac Rowe, NASA JSC, Jacobs Technology
",,https://github.com/nasa/cFE/pull/2411
Values for TriggerMode provided to CFE_ES_StartPerfCmd are not documented,"**Describe the bug**

Here is the documentation for the `CFE_ES_StartPerfCmd_Payload` struct:

> 10.39.2.1 TriggerMode `uint32 CFE_ES_StartPerfCmd_Payload::TriggerMode`
> Desired trigger position (Start, Center, End)
> Definition at line 279 of file `default_cfe_es_msgstruct.h`

There is no indication what values correspond with `Start`, `Center`, and `End`.

Some searching reveals that the implementation in `modules/es/fsw/src/cfe_es_perf.c` compares for values `CFE_ES_PERF_TRIGGER_{START,CENTER,END}`. The public header `/modules/es/fsw/src/cfe_es_perf.h` has the enum values for this, but there is no docstring and therefore does not appear in the user guide. The actual default numeric values would be good to indicate somewhere because the commanding interface may not have access to the `CFE_ES_PERF_TRIGGER*` macros, ie, when using `cmdUtil` from the command line.

**Reporter Info**
Isaac Rowe, NASA JSC, Jacobs Technology
",,https://github.com/nasa/cFE/issues/2410
Fix #2407 Add perfid limit info to ES docstring,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
- Fixes #2407 

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - No impact to behavior (doc change)

**Contributor Info - All information REQUIRED for consideration of pull request**
Isaac Rowe, NASA JSC (Jacobs Technology)
",,https://github.com/nasa/cFE/pull/2409
Fix #2406 Remove nonexist reference for perf tool,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Remove non-existent reference to Performance Analyzer Tool in CFE_ES documentation.

**Testing performed**
None, doc change only.

**Expected behavior changes**
 -  no impact to behavior


**Contributor Info - All information REQUIRED for consideration of pull request**
Isaac Rowe, NASA JSC (Jacobs Technology)
",,https://github.com/nasa/cFE/pull/2408
CFE_ES_PerfLogAdd should document config,"**Describe the bug**
The docstring for CFS_ES_PerfLogAdd makes no mention that the value of `Marker` is limited by the config value `CFE_MISSION_ES_PERF_MAX_IDS`. 

In my case, I have never altered this limit and was not aware of its existence, so I was surprised when calls to the CFE_ES_PerfLogEntry were failing. The only way to know that this value is used is to check the implementation file at [`modules/es/fsw/src/cfe_es_perf.c`](https://github.com/nasa/cFE/blob/a8b20ac7a0bdc2b765d824b3ff49e78934ce03c9/modules/es/fsw/src/cfe_es_perf.c) or the note under from the documentation of `sample_perfids.h`:

> Performance ids are limited to the range of 0 to CFE_MISSION_ES_PERF_MAX_IDS - 1.

This text should also appear in the docstring for `CFE_ES_PerfLogAdd`

I also find the documentation for `CFE_MISSION_ES_PERF_MAX_IDS` at [`modules/es/config/default_cfe_es_interface_cfg.h`](https://github.com/nasa/cFE/blob/a8b20ac7a0bdc2b765d824b3ff49e78934ce03c9/modules/es/config/default_cfe_es_interface_cfg.h#L52) confusing:
```c 
**  \cfeescfg Define Max Number of Performance IDs for messages
**
**  \par Description:
**       Defines the maximum number of perf ids allowed in command/telemetry messages
**
**      This affects the layout of command/telemetry messages but does not affect run
**      time behavior or internal allocation.
**
**  \par Limits
**       All CPUs within the same SB domain (mission) must share the same definition
**       Note this affects the size of messages, so it must not cause any message
**       to exceed the max length.
**
*/
```

I find this confusing because although the value does affect the size of the `CFE_ES_HousekeepingTlm_Payload` telemetry message via the filter and trigger mask buffers, the wording does not indicate that this limits the upper *value* of perfids, not the *number* of perfids. I could have only a few dozen perfids, but if one had a value greater than or equal to this parameter, it would be rejected.

**Reporter Info**
Isaac Rowe, NASA JSC (Jacobs Technology)",,https://github.com/nasa/cFE/issues/2407
ES docstrings reference non-existent manual section,"**Describe the bug**
A clear and concise description of what the bug is.

In [`modules/core_api/fsw/inc/cfe_es.h`](https://github.com/nasa/cFE/blob/a8b20ac7a0bdc2b765d824b3ff49e78934ce03c9/modules/core_api/fsw/inc/cfe_es.h):

```
1461:**        is used by the Software Performance Analysis tool (see section 5.15).
1480:**        is used by the Software Performance Analysis tool (see section 5.15).
1501:**        tool (see section 5.15).
```

There is no section 5.15 of the manual.

**Reporter Info**
Isaac Rowe, NASA JSC (Jacobs Technology)",,https://github.com/nasa/cFE/issues/2406
"Avoid generating module-specific msgid files if project has provided an all-inclusive ""cfe_msgids.h"" file","**Is your feature request related to a problem? Please describe.**
As part of the effort to better compartmentalize the various CFE subcomponents, we are working toward having each module manage its own individual header files.  

During this migration, this presents some confusion for a configuration that already has an all-inclusive `cfe_msgids.h` - as these individual msgid headers will still be generated (with default values) even though they are not used.

**Describe the solution you'd like**
To reduce confusion -- if the user has a `cfe_msgids.h` file, then do not generate the individualized msgid files.

**Describe alternatives you've considered**
The other option would be to revert the focused msgid.h file and go back to having cfe_msgids.h being the only msgid header for CFE.

**Additional context**
There is a possibility that a user has overridden the `cfe_msgids.h` but in a way that still #includes some (but perhaps not all) of the focused msgid headers.  This proposal would break such a config.... so if that is a real possibility, this might not be a good idea.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",,https://github.com/nasa/cFE/issues/2405
"Revert ""Fix #2395, do not directly use cfe_test_msgids.h""",Reverts nasa/cFE#2399,"CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2404
"Fix #2402, Uninitialized ExceptionTaskID in CFE_ES_RunExceptionScan","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2402

**Testing performed**
CI

**Expected behavior changes**
Squash static analysis warning

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, Equuleus-rc2",https://github.com/nasa/cFE/pull/2403
Uninitialized ExceptionTaskID in CFE_ES_RunExceptionScan,"**Describe the bug**
Uninitialized warning: https://github.com/nasa/cFE/blob/f6d7f8ce0251ddc0d303100b6aa47547e82db5a1/modules/es/fsw/src/cfe_es_erlog.c#L277

Since it's not always written in:
https://github.com/nasa/cFE/blob/f6d7f8ce0251ddc0d303100b6aa47547e82db5a1/modules/es/fsw/src/cfe_es_erlog.c#L294

**To Reproduce**
Run static analysis

**Expected behavior**
No uninitialized variable warnings

**System observed on:**
Static analysis

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/issues/2402
"Fix #2334, Uninitialized PktTime in EVS_SendViaPorts","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2334 

Resolves CodeSonar warning

**Testing performed**
CI

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, Equuleus-rc2",https://github.com/nasa/cFE/pull/2401
"Fix #1991, TriggerMode unsigned compare with 0","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #1991 

This allows removal of cpp-check warning suppression and fixes a CodeSonar static analysis warning.

Note CFE_ES_PERF_TRIGGER_START is 0 here:
https://github.com/nasa/cFE/blob/f6d7f8ce0251ddc0d303100b6aa47547e82db5a1/modules/es/fsw/src/cfe_es_perf.h#L54

and TriggerMode is uint32 here:
https://github.com/nasa/cFE/blob/f6d7f8ce0251ddc0d303100b6aa47547e82db5a1/modules/es/config/default_cfe_es_msgstruct.h#L279

So the check is always true.  Only useful validity check is < CFE_ES_PERF_MAX_MODES.

**Testing performed**
CI

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
Doesn't actually impact code coverage since it looks like this check was getting compiled out anyways.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, Equuleus-rc2",https://github.com/nasa/cFE/pull/2400
"Fix #2395, do not directly use cfe_test_msgids.h","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
For a user that has customized cfe_msgids.h, this will get conflicting values.  If/when users have migrated to module-specific msgid files, this will be OK, but for now this can break things.

Fixes #2395

**Testing performed**
Build using override of `cfe_msgids.h` (only).

**Expected behavior changes**
No conflicting msgids if user has overridden `cfe_msgids.h` but not `cfe_test_msgids.h`

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2399
"Fix #2393, set AtLeapSeconds in ExternalTone test case","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Setting this value to 0 allows it to get the same result regardless of the setting of CFE_MISSION_TIME_CFG_DEFAULT_UTC.

Fixes #2393

**Testing performed**
Build with CFE_MISSION_TIME_CFG_DEFAULT_UTC == true

**Expected behavior changes**
Build and test succeeds

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2398
"Fix #2395, do not directly use cfe_test_msgids.h","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
For a user that has customized cfe_msgids.h, this will get conflicting values.  If/when users have migrated to module-specific msgid files, this will be OK, but for now this can break things.

**Testing performed**
Build and run tests

**Expected behavior changes**
No conflicts if user has modified `cfe_msgids.h` but not `cfe_test_msgids.h`

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/2397
"Fix #2393, set AtLeapSeconds in ExternalTone test case","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Setting this value to 0 allows it to get the same result regardless of the setting of CFE_MISSION_TIME_CFG_DEFAULT_UTC.

Fixes #2393

**Testing performed**
Build and run CFE TIME tests

**Expected behavior changes**
Tests now pass as expected

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",invalid,https://github.com/nasa/cFE/pull/2396
"Testcase code should not directly include ""cfe_test_msgids.h"" (yet)","**Describe the bug**
The module-specific header file is a relatively new addition.  But for a user that has overridden the previous all-inclusive `cfe_msgids.h` file, including the test_msgids.h directly will cause conflict with the overrides.

**To Reproduce**
Override (only) `cfe_msgids.h` in a build, and change the msgids in here.  Do not override cfe_test_msgids.h.
Attempt to build cfe_testcase -- the `cfe_test_msgids.h` inclusion will bypass the modified msgids, and get defaults, which will conflict / mismatch.

**Expected behavior**
Should be backward compatible with an existing override of `cfe_msgids.h`

**System observed on:**
Debian

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/issues/2395
"Fix #2393, set AtLeapSeconds in ExternalTone test case","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Setting this value to 0 allows it to get the same result regardless of the setting of CFE_MISSION_TIME_CFG_DEFAULT_UTC.

Fixes #2393

**Testing performed**
Build and run coverage tests

**Expected behavior changes**
TIME test will pass with CFE_MISSION_TIME_CFG_DEFAULT_UTC == true

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",invalid,https://github.com/nasa/cFE/pull/2394
CFE TIME coverage test fails if set to use UTC,"**Describe the bug**
When configuration is set to use UTC, the ""ExternalTone"" test case will fail.

**To Reproduce**
Configure `CFE_MISSION_TIME_CFG_DEFAULT_UTC` to be true, then compile and run coverage tests. 

**Expected behavior**
The test should pass regardless of how this configuration item is set.

**System observed on:**
Debian

**Additional context**
This is because it adds leap seconds into the `NewSTCF` value only when set to use UTC.  The leap seconds were not configured by this test case, so it still has a value from a previous test case, which is 32.  This larger-than-expected jump causes it to go into the `CFE_TIME_OUT_OF_RANGE` result case.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/issues/2393
"Fix #2391, add cfe to prefix list for msgids.h and platform_cfg.h","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
This allows the script to pick up the file if it was named simply ""cfe_msgids.h"" or ""cfe_platform_cfg.h"", rather than insisting it be named with a platform-specific prefix

Fixes #2391

**Testing performed**
Build and run with stakeholder configuration

**Expected behavior changes**
A file named `cfe_msgids.h` is picked up by the build system, as expected.

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2392
"The include file wrapper script does not pick up a ""cfe"" prefix file","**Describe the bug**
The include file wrapper script looks for a name-qualified file to use for e.g. `cfe_msgids.h` and `cfe_platform_cfg.h`.  This means that the file provided in the ""defs"" directory needs to be named based on the config, for example `default_platform_cfg.h` or `cpu1_platform_cfg.h` .. then this file gets wrapped as `cfe_platform_cfg.h` for C source files to use.

This pattern has some advantages, in that only one copy of a file actually named `cfe_platform_cfg.h` will exist on the disk, therefore it is clear(er) which one is actually getting picked up.

However, this name difference/mapping isn't well documented and can be confusing or unexpected to some users.

**To Reproduce**
Create a customized `cfe_msgids.h` file in the defs dir, and run ""make prep""
Observe that the default msgids from CFE were picked up, not the customized version.

**Expected behavior**
The customized version should be picked up.

**System observed on:**
Debian

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/issues/2391
fix #2316 - CFE_TIME_Print() calls strftime(),"**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
CFE_TIME_Print() calls strftime to format times and returns a status code rather than creating a syslog entry. Note that this may be expanded to allow this to be configurable or parameterized (although EVS may just call strftime directly.)
Re-introduced from #2356. #2388, #2389 reverted this PR.

Also collapsed epoch defines to SECONDS and MICROS for more performance and simpler configuration.

**Testing performed**
Standard build and UT tests updated.

**Expected behavior changes**
Function returns CFE_Status_t status.
_NOTE_ strftime uses time_t which *may* be 32- or 64-bit and *may* be signed or unsigned, depending on the platform.

**System(s) tested on**
Ubuntu 22.04LTS

**Additional context**
https://en.wikipedia.org/w/index.php?title=Time_t&oldid=450752800

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",Equuleus-rc2,https://github.com/nasa/cFE/pull/2390
"Fix#2388, Revert ""Merge pull request #2356 from CDKnightNASA/fix-2316-time_fmt""","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Reverts #2356
- Fixes #2388

**Testing performed**
N/A

**Expected behavior changes**
#2315 is removed.

**System(s) tested on**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Dylan Z. Baker - NASA GSFC
","CCB:Ready, CCB:FastTrack, Equuleus-rc1",https://github.com/nasa/cFE/pull/2389
Push off PR #2356 to Equuleus-rc2,"**Describe the bug**
It has been decided that #2316 should be put into Equuleus-rc2 to limit major changes to this release.

**Expected behavior**
PR #2356 is reverted.

**System observed on:**
N/A


**Reporter Info**
Dylan Z. Baker - NASA GSFC
",,https://github.com/nasa/cFE/issues/2388
"Fix #2386, Split up and simplify control flow in `CFE_TBL_Register()`","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2386 
  - First chunk of issues listed in https://github.com/nasa/cFE/issues/1504
  - This PR addresses the high cyclomatic complexity of `CFE_TBL_Register`

Main change here was to pull out the logical blocks of work into helper functions.

**Additional Changes**
_**Name Size Validation:**_
Simplified the size checks to just a single check and report ([old](https://github.com/nasa/cFE/blob/112bc511176dbb2c9bb50beb8474c980bd67681a/modules/tbl/fsw/src/cfe_tbl_api.c#L94-L115), [new](https://github.com/thnkslprpt/cFE/blob/580ed70cb9f925b747e0db7b37ccdc13c73b869e/modules/tbl/fsw/src/cfe_tbl_internal.c#L1433-L1442)). Can revert this change if the extra verbosity is desired.

Previously, if any of the name size checks failed (and `CFE_TBL_ERR_INVALID_SIZE` Status was set), the code would then still run on to verify the specific table options flags (and re-assign another error code on top of `CFE_TBL_ERR_INVALID_SIZE` if this failed). Have updated this logic to only enter the `TblOptionsFlags` checks if the size checks pass successfully. No need to continue execution if error status already set.

_**Main Registration Block Control Flow:**_
Previously the code would search for an access descriptor even if already in error status [here](https://github.com/nasa/cFE/blob/112bc511176dbb2c9bb50beb8474c980bd67681a/modules/tbl/fsw/src/cfe_tbl_api.c#L227-L241). This is unnecessary if already in error status so have changed this conditional to just check for `== CFE_SUCCESS` ([link](https://github.com/thnkslprpt/cFE/blob/580ed70cb9f925b747e0db7b37ccdc13c73b869e/modules/tbl/fsw/src/cfe_tbl_api.c#L101-L116)).

In 3 locations inside the this same main table registration block there were status guards of the form `if (Status & CFE_SEVERITY_BITMASK) != CFE_SEVERITY_ERROR)`.

I have reduced the nesting in this section, and simplified these checks to just check for `== CFE_SUCCESS`. The only non-negative 'warning' status possible there was `CFE_TBL_WARN_DUPLICATE`, which was already being filtered out anyway. Also, these warning (i.e. non-success, non-error) status/return codes are intended to be [deprecated](https://github.com/nasa/cFE/issues/483) anyway.

_**Minor Simplification:**_
Simplified [this](https://github.com/nasa/cFE/blob/112bc511176dbb2c9bb50beb8474c980bd67681a/modules/tbl/fsw/src/cfe_tbl_api.c#L314-L322) true/false assignment to [this](https://github.com/thnkslprpt/cFE/blob/580ed70cb9f925b747e0db7b37ccdc13c73b869e/modules/tbl/fsw/src/cfe_tbl_internal.c#L1649-L1650).

Note there are a few open issues already for specific issues inside `CFE_TBL_Register`:
- https://github.com/nasa/cFE/issues/1837
- https://github.com/nasa/cFE/issues/1506
- https://github.com/nasa/cFE/issues/2280 (this one is fixed by this PR as well)

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.). Local testing also conducted to confirm all variables and syslog strings printing as expected etc.

**Expected behavior changes**
Minor control-flow changes noted above. In general this PR will:
- make unit testing much simpler/easier
- ease future maintenance
- reduce technical debt
- ease use of cFE by developers

**System(s) tested on**
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS bundle.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2387
Split up and simplify control flow in `CFE_TBL_Register()`,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
- First part of https://github.com/nasa/cFE/issues/1504

**Code snips**
https://github.com/nasa/cFE/blob/112bc511176dbb2c9bb50beb8474c980bd67681a/modules/tbl/fsw/src/cfe_tbl_api.c#L47-L498

**Expected behavior**
Split up `CFE_TBL_Register`, and try to simplify control flow and conditional logic a bit - it currently stands at 451 lines and several dozen branches...

Will make testing and future maintenance easier.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2386
More script-friendly testcase mode,"**Is your feature request related to a problem? Please describe.**
Currently, the CFE workflow invokes cfe_testcase which runs all functional tests.  However for performance testing it may be important to run certain tests in isolation.

**Describe the solution you'd like**
Allow some method where the user can limit the run to certain test case(s).

**Describe alternatives you've considered**
One alternative could be to split cfe_testcase into separate apps.  However this would entail some duplication/overlap between them.  It would also require prior knowledge of which tests would be ""allowed"" to run in isolation.  Would prefer a solution where any test (including the regular functional tests) could be run in isolation - this is helpful if e.g. an error occurs in that test and a developer wants to run only that test for debug.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/issues/2385
Implement multi-thread version of bulk transfer test,"**Is your feature request related to a problem? Please describe.**
Previous pull request #2380 implemented a ""first pass"" speed test for software bus - but it single threaded, in that the same thread is doing both the ""send"" and ""receive"" side of the transaction.  While this gives a general idea of the execution time/cost of these APIs, it does not indicate how well they scale across threads.

**Describe the solution you'd like**
In real usage, it is (almost) always different app doing the ""send"" and ""receive"" calls.  Therefore, it is important to also know how well these SB APIs scale across multiple threads/tasks.  That is - they involve several ""critical sections"" - and the logic inside these sections runs only in a single task at a time.   

This will affect the level of concurrency possible between send and receive operations - and this is an important measurement to gauge the efficiency of the SB API.

**Additional context**
This would be similar to the test done in PR #2380 but using separate tasks to do the SB operations.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",,https://github.com/nasa/cFE/issues/2384
GitHub check for PR's that make cFE take more CPU time,"**Is your feature request related to a problem? Please describe.**
Pull requests that significantly alter the performance character of the cFE software, particularly if that change makes cFE run slower, should be elicit inspection and require a good explanation.

**Describe the solution you'd like**
The ""time"" Unix command provides the ""CPU time"" that a process takes to completion. This is independent of wall clock time, and should provide a consistent measure of performance under varying GitHub workflow conditions. I propose a GitHub workflow to check the CPU time against a standard, akin to what we do currently with coverage testing.

**Describe alternatives you've considered**
We've been discussing adding CPU time calls to the PSP so that cFE users can take measure of CPU time utilization. This should be a follow-on project, as VxWorks and other RTOS may not have the same APIs or commands.

**Additional context**
 See https://www.gnu.org/software/libc/manual/html_node/Processor-And-CPU-Time.html

See https://en.wikipedia.org/wiki/Time_(Unix)

**Requester Info**
Christopher.D.Knight@nasa.gov
","good first issue, Equuleus-rc2",https://github.com/nasa/cFE/issues/2383
Fix 2358 evs fmt mk2,"Joe, for your consideration, another pass at the ""%f"" and strftime code. This simplifies it a bit (but only supports one ""%f"" in the format string.)",Equuleus-rc2,https://github.com/nasa/cFE/pull/2382
"Fix #2378, refactor SB to support additional use cases","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Cleans up the internal SB implementation so it can better support future enhancements such as message integrity, additional header fields and timestamping.

Fixes #2378

**Testing performed**
Full suite of tests on SB implementation

**Expected behavior changes**
API behavior is preserved, fully backward compatible

**System(s) tested on**
Debian 

**Additional context**
Replaces #2367 based on code review and discussion.  This PR represents the refactoring change, along with some other refinements.  The routing change will be a separate PR.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/2381
"Fix #2379, implement SB bulk transfer test","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Add a functional test that moves a large number of messages across the bus as fast as possible (i.e. with no delay).  The process is timed, thus offering some metric as to the single thread/single core performance of the software bus implementation underneath.

Note that due to vast differences between hardware, results should only be compared between successive runs on the exact same hardware, such as before and after a change was made.

Fixes #2379

**Testing performed**
Execute test before and after changes made

**Expected behavior changes**
Introduce some form of performance check for SB implementation

**System(s) tested on**
Debian

**Additional context**
The test itself only shows microseconds elapsed (because this metric is available from the PSP today) but the software can also be run under an external profiling tool for more info.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc2",https://github.com/nasa/cFE/pull/2380
Implement software bus bulk transfer functional test,"**Is your feature request related to a problem? Please describe.**
Requests have been received to include software bus performance as part of the test matrix.

**Describe the solution you'd like**
Start by implementing a functional test case (as part of cfe_testcase) that emulates using the software bus for bulk message transfer, by sending a fixed large number of messages (e.g. 1 million).  This process can be timed, and this in turn will give some indication of relative performance of the implementation.

**Additional context**
This obviously could be much more sophisticated.  The proposed test only covers the simplest case, in single thread/single core context, and the results are only comparable to successive runs on the exact same hardware with the same compiler and same compiler flags.  Nonetheless, monitoring the result before and after a change will provide at least one simple metric of whether that change affects performance or not.

A follow-on change should perform a similar test with multiple threads, and thus give some metrics to how well SB scales across cores.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",,https://github.com/nasa/cFE/issues/2379
Software bus refactoring needed to prepare for future needs,"**Is your feature request related to a problem? Please describe.**
Requests have been received for software bus features such as:

 - Better Message integrity checking
 - Better control over message routing and delivery
 - Timestamped commands (not just TLM)

**Describe the solution you'd like**
The software bus can support all of this but the internal workings need some refactoring and clean up to make it possible to fully integrate such features without duplicating the code.

**Describe alternatives you've considered**
N/A

**Additional context**
Breaking up the software bus functions into smaller bits of functionality allow for:
 
- Different transmit/receive variants to use the same basic logic
- Easier unit testing and maintenance of smaller routines
- Reduced cyclomatic complexity of smaller routines
- More code re-use between the two

This needs to be implemented before #2362 can be done.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/issues/2378
"Fix #1930, add code coverage for null check","
**Checklist (Please check before submitting)**

* [ x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [ x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

Fix #1930 update code coverage test for CFE_ES_GenPoolRecyclePoolBlock and CFE_ES_GenPoolCreatePoolBlock for null pointer check.

**Testing performed**
Steps taken to test the contribution:
1. Build SIMULATION=native ENABLE_UNIT_TESTS=true prep
2. make
3. make test
4. make lcov

**Expected behavior changes**
No impact on behavior

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
 - Note CLAs apply to only software contributions.

Anh Van, GSFC
",Equuleus-rc2,https://github.com/nasa/cFE/pull/2377
"Fix #2375, Use `size_t` for variables/parameters representing size","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2375
  - Updated size variables/parameters to `size_t` where appropriate

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).

**Expected behavior changes**
Some signed variables changed to unsigned but it would have been illogical/impossible to input negative values in those cases.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2376
Use `size_t` for variables/parameters representing size,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Some variables/parameters in cFE representing size could be updated to the more expressive `size_t` typedef.

Most cases are already `uint32` and are assigned values from other `size_t` types or sent into functions expecting `size_t` parameters anyway.

**Expected behavior**
Update to `size_t` where appropriate.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2375
"Fix #26, Add timestamp for SB messages which are missing it","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #26
  - Adds timestamp for 3 messages that were sent without it
  - Also updates mention of old function name in docs (`CFE_SB_SendMsg()`)

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).

**Expected behavior changes**
Messages will be stamped with updated time before being sent.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2374
Fix #2372 TBL UT update for OSAL/CFE path length mismatch,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #2372

**Testing performed**
See reproduction steps from linked issue

**Expected behavior changes**
Tests should pass even if `CFE_MISSION_MAX_PATH_LEN` is less than `OSAL_CONFIG_MAX_PATH_LEN`

**System(s) tested on**
 - Hardware: Intel Xeon CPU E5-2687W v4 @ 3.00GHz
 - OS: CentOS 7
 - Versions: trunk

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license
No third party code

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
 - Note CLAs apply to only software contributions.
",Equuleus-rc2,https://github.com/nasa/cFE/pull/2373
OSAL path length variables cause TBL tests to fail,"**Describe the bug**
A clear and concise description of what the bug is.

For certain values of `OSAL_CONFIG_MAX_FILE_NAME` and `OSAL_CONFIG_MAX_PATH_LEN`, tests for TBL (and the DS application) fail. I suspect that the tests are making assumptions about the maximum values these can be set to.

**To Reproduce**
Steps to reproduce the behavior:

1. Build FSW with `OSAL_CONFIG_MAX_FILE_NAME` set to 64 and `OSAL_CONFIG_MAX_PATH_LEN` set to 128
2. Test with 
  ```shell
  ctest coverage -VV --test-dir build/intel64/default_intel64/ -R coverage-tbl-ALL
  ctest coverage -VV --test-dir build/intel64/default_intel64/ -R coverage-ds-ds_file
  ```

**Expected behavior**
A clear and concise description of what you expected to happen.
Expect tests to pass.

**Code snips**
If applicable, add references to the software.

```
1: [BEGIN] 33 Test_CFE_TBL_TblMod
81: [ INFO] tbl_UT.c:3040:Begin Test Table Modified
... < many lines >
81: [ FAIL] 33.022 tbl_UT.c:3179 - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa == aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, 124
81: [ FAIL] 33.023 tbl_UT.c:3181 - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa == (*)
81: [ PASS] 33.024 tbl_UT.c:3184 - CFE_TBL_Modified(CFE_TBL_BAD_TABLE_HANDLE) (-872415231) == CFE_TBL_ERR_INVALID_HANDLE (-872415231)
81: [  END] 33 Test_CFE_TBL_TblMod  TOTAL::24    PASS::22    FAIL::2     MIR::0     TSF::0     TTF::0     WARN::0   
```


**System observed on:**
- Hardware: Intel(R) Xeon(R) CPU E5-2687W v4 @ 3.00GHz
- OS: CentOS 7 Linux
- Versions: draco-rc3 tags for cFE, OSAL, and apps

**Additional context**
Add any other context about the problem here.
related issue in DS: https://github.com/nasa/DS/issues/111

**Reporter Info**
Full name and company/organization if applicable
Isaac Rowe, NASA JSC/Jacobs Technology
",,https://github.com/nasa/cFE/issues/2372
cFE Integration candidate: Caelum-rc4+dev53,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2369. Addresses Issue #2368
- PR #2272. Addresses Issue #1407
- PR #2276. Addresses Issue #1515

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/681/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2371/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@dmknutsen
@thnkslprpt",Equuleus-rc1,https://github.com/nasa/cFE/pull/2371
"Fix #2358, adds TIME module command to set CFE_TIME_Print() format","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds a CFE TIME command to configure how to print time information, mostly used by CFE_EVS to print to stdout, and CFE ES for writing to syslog.

**Testing performed**
Build and test using standard cFE coverage tests which have been updated to test different formats and error conditions.

**Expected behavior changes**
Enhances CFE_TIME_Print() function and allows for more concise and helpful timestamps.

**System(s) tested on**
Ubuntu 23 desktop VM.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",Equuleus-rc2,https://github.com/nasa/cFE/pull/2370
"Fix #2368, cFE Functional Test 23","**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #2368 - cFE Functional Test 23 Failing
If the cFE functional tests are executed multiple times in a row, because of differences in pre-test log messages -  CFE_ES_WriteToSysLog can return CFE_ES_ERR_SYS_LOG_TRUNCATED during execution of cFE test 23.   Functional test 23 was updated to allow for the CFE_ES_ERR_SYS_LOG_TRUNCATED return value - as that is an acceptable/nominal condition.

**Testing performed**
Successfully executed functional tests multiple times in a row.

**Expected behavior changes**
cFE Functional Test 23 should no longer intermittently fail.

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA Goddard
","bug, CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2369
ES Functional Test: Test Write To Sys Log failing intermittently,"**Describe the bug**
cFE Functional test 23 (Test Write To Sys Log) is failing intermittently.

**To Reproduce**
Execute functional tests multiple times.

**Expected behavior**
Test should consistently pass if there is no anomalous config/behavior. 

**Reporter Info**
Dan Knutsen
NASA Goddard
",bug,https://github.com/nasa/cFE/issues/2368
"Fix #2362, Add source routing APIs to SB","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Add two new APIs that allow more control over the message routing. These allow the caller to directly specify the route (MsgId) and size of the content, and the message will be delivered based on the passed in values vs. the values inside the message itself.

This restructures the existing/historical API calls to use the same underlying mechanism.  Send/Receive actions have a transaction object associated and this tracks the status and events.  Common event reporting is done based on this transaction object.

Fixes #2362

**Testing performed**
Build and run CFE including functional test app
Build and run sanity tests

**Expected behavior changes**
Adds two new APIs.  Existing APIs should be backward compatible, with some possible changes to the expected event IDs that might be generated under some off-nominal conditions.

**System(s) tested on**
Debian

**Additional context**
The new API allows the passed object to be any arbitrary data -- it does not need to be a CFE/CCSDS message at all.  Therefore this could be more suitable for things like CFDP PDU packets, etc. as it would not need to be forced to look like a CMD/TLM message.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Ready,https://github.com/nasa/cFE/pull/2367
"Fix #2365, Increase CFE_PLATFORM_EVS_APP_EVENTS_PER_SEC to 15","**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Increases CFE_PLATFORM_EVS_APP_EVENTS_PER_SEC to 15
Fixes #2365 

**Testing performed**
Executed functional tests and confirmed that the results are no longer being squelched.

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA Goddard
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2366
Functional test results are being squelched,"**Describe the bug**
Functional test results are being squelched such that it appears the tests are not executing successfully.

**To Reproduce**
Run functional tests

**Reporter Info**
Dan Knutsen
NASA Goddard
",,https://github.com/nasa/cFE/issues/2365
"Fix #2363, Increase slp time in funct test workflow","**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Increase the wait time required to call a test 'frozen'.  This will prevent tests from erroneously being called 'frozen' and allow the tests to complete successfully.
Fixes Issue #2363 

**Testing performed**
Ran workflow

**Expected behavior changes**
Tests complete successfully 

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA Goddard
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2364
Github workflow does not allow enough time for all Functional tests to run,"**Describe the bug**
The current functional test workflow will exit because it thinks the functional tests are frozen if they exceed 60 seconds.

**To Reproduce**
Run workflow

**Expected behavior**
The time required to call a test 'frozen' should be increased such that all tests can finish successfully

**Reporter Info**
Dan Knutsen
NASA Goddard
",,https://github.com/nasa/cFE/issues/2363
Add source-routing feature to Software Bus,"**Is your feature request related to a problem? Please describe.**
Normally, software bus messages are fully assembled by clients, then passed to the software bus via e.g. `CFE_SB_TransmitMsg()` for delivery to subscribers.  This routing to subscribers is currently done based on the `MsgId` value that is present in the message - that is, the MsgId is looked up in the routing table, which is in turn translated to a list of destinations (subscribers) to deliver that message to.

**Describe the solution you'd like**
Add an alternative API that allows the message to be routed to destination(s) that are are given explicitly in the API call.  That is, allow the caller to specify the `MsgId` that SB should use to route and deliver the message.  Specifically - this passed-in `MsgId` for routing may be different than the MsgId value contained in the message.

**Describe alternatives you've considered**
N/A

**Additional context**
The use-case for this feature has to do with complex systems with distributed software bus services across many instances of CFE.  In this context the destination may not be directly reachable from the source, but reachable through some sort of intermediate hop.  This feature gives the needed flexibility to work with such an architecture, by allowing messages to be routed to an intermediate delivery assistant app that may not be the final destination of the message.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/2362
"Fix #2360, Adds utassert message descriptions to README_Functionaltes…","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2360
   - Adds descriptions of each utassert message to the functional test readme markdown file for easier readability.

**Testing performed**
Previewed markdown file

**Expected behavior changes**
No impact to behavior.

**System(s) tested on**
 - OS: Ubuntu 20.04

**Additional context**
Description content resourced from: https://github.com/nasa/osal/blob/5036fed76e440232016d7413cafdd2bb796144ce/ut_assert/inc/utassert.h#L75-L89

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, Vantage Systems
","CCB:Approved, docs, Equuleus-rc1",https://github.com/nasa/cFE/pull/2361
Update README_Functionaltest.md to include UTASSERT message descriptions,"**Is your feature request related to a problem? Please describe.**
The cFE functional tests include assert messages that can be further clarified in the README.

**Describe the solution you'd like**
Include and describe each enumerated assert message in the readme.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Justin Figueroa, Vantage Systems
",docs,https://github.com/nasa/cFE/issues/2360
"Fix #2116, Update comment re. limits of","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2116
  - Updates out-of-date header comment regarding the limits of `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID`
  - some typo fixes included

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).

**Expected behavior changes**
No change to behavior - documentation changes only.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2359
make EVS stdout timestamps configurable,"**Is your feature request related to a problem? Please describe.**
Currently the EVS output includes a full timestamp of `YYYY-DDD HH:MM:SS.XXXXX` which, for most users, is too much information (how likely are you going to run cFS for years?) and creates a lot of noise in the output. Instead, EVS should be configurable (compile-time, load-time, or run-time) to control what output timestamp format it should use.

**Describe the solution you'd like**
A runtime-reconfigurable timestamp, at minimum the format string to use for strftime, plus ""%f"" (not part of the C standard, but adopted from the Python strftime API) for the microseconds. Additionally, instead of ""clock time"", have an option to switch to ""seconds since start"" and/or ""seconds since timer reset"" with an associated reset command.

**Describe alternatives you've considered**
Leaving well enough alone.

**Additional context**
See also https://github.com/nasa/cFE/pull/2295

**Requester Info**
Christopher.D.Knight@nasa.gov
",,https://github.com/nasa/cFE/issues/2358
cFE Integration candidate: Caelum-rc4+dev52,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2350. Addresses Issue #2349
- PR #2354. Addresses Issue #2352
- PR #2355. Addresses Issue #2352
- PR #2366. Addresses Issue #2365
- PR #2364. Addresses Issue #2363
- PR #2356. Addresses Issue #2316
- PR #2361. Addresses Issue #2360

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/677/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2357/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@dmknutsen
@CDKnightNASA
@chillfig",Equuleus-rc1,https://github.com/nasa/cFE/pull/2357
fix#2316 - CFE_TIME_Print() calls strftime(),"**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
CFE_TIME_Print() calls strftime to format times and returns a status code rather than creating a syslog entry. Note that this may be expanded to allow this to be configurable or parameterized (although EVS may just call strftime directly.)

Also collapsed epoch defines to SECONDS and MICROS for more performance and simpler configuration.

**Testing performed**
Standard build and UT tests updated.

**Expected behavior changes**
Function returns CFE_Status_t status.
_NOTE_ strftime uses time_t which *may* be 32- or 64-bit and *may* be signed or unsigned, depending on the platform.

**System(s) tested on**
Ubuntu 22.04LTS

**Additional context**
https://en.wikipedia.org/w/index.php?title=Time_t&oldid=450752800

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2356
"Fix #2353, Update README_Functionaltest.md","**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Updates README_Functionaltest.md to include sample_app in startup script.
Fixes #2353 

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA Goddard
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2355
"Fix #2352, make shared tbl configurable","**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
This fix makes the shared table used in the cFE functional tests project configurable
Fixes #2352 

**Testing performed**
Executed functional tests and confirmed that the tests were successful.

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA Goddard
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2354
Update README_Functionaltest.md to include sample_app in startup script,"**Is your feature request related to a problem? Please describe.**
The cFE functional tests are dependent on the inclusion of sample_app for the successful execution of all tests.

**Describe the solution you'd like**
Include sample_app in the example startup script and explain that there is a dependency.

**Requester Info**
Dan Knutsen
NASA Goddard
",docs,https://github.com/nasa/cFE/issues/2353
Make the shared table used in the cFE functional tests configurable ,"**Is your feature request related to a problem? Please describe.**
Projects typically will remove sample_app from their build.  This creates an issue because the cFE functional tests are dependent on it such that tests will fail after removal.  Need a mechanism to easily swap out the sample_app table used in the functional tests such that projects can still run the tests as part of their CI/CD once sample_app is removed. 

**Describe the solution you'd like**
Make the name of the table used in the cFE functional tests configurable such that projects can easily swap out the sample_app table with a table in their project specific build.

**Requester Info**
Dan Knutsen
NASA Goddard
","enhancement, functional",https://github.com/nasa/cFE/issues/2352
"Fix #1514, Use `XOR` to swap between ping-pong buffers (style change only)","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1514
  - Changes swap pattern for ping-pong buffers from `1 - ActiveBuffer` to `ActiveBuffer ^ 1`.

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2351
"Fix #2349, Format update for additional counters in summary","**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Format update to support additional counters in functional test summary.
Fixes #2349 

**Testing performed**
Executed functional tests and confirmed output is as expected.

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA Goddard
","CCB:Approved, functional, Equuleus-rc1",https://github.com/nasa/cFE/pull/2350
Counters included in cFE functional test summary does not add up to total test count,"**Is your feature request related to a problem? Please describe.**
cFE functional test summary does does not contain information on all counters that increase the total test case count.  This results in the appearance of missing tests when the results are read.

**Describe the solution you'd like**
Add an information statement that includes the test counters for the remaining tests that increase the total test count.  

**Requester Info**
Dan Knutsen
NASA Goddard
","enhancement, functional",https://github.com/nasa/cFE/issues/2349
"Fix #1397, Rename overloaded `EVS_PacketID_t` to `EVS_EventContext_t`","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1397
  - Renames overloaded (and confusing) `CFE_EVS_PacketID_t` type to `CFE_EVS_EventContext_t`

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2348
"Fix #1143, SB_UT corrections and clear event count history after setup","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1143
  - Clears event history after setup calls and updates EVENTCOUNT asserts to the lower number of events only expected from the test under question (rather than including the total events from the setup calls as well)

While looking at this, I realised that lots of tests were checking events related the 'setup', not the actual function that is the focus of the test.

For example, there are dozens of asserts for `CFE_SB_PIPE_ADDED_EID` and `CFE_SB_SUBSCRIPTION_RCVD_EID` - even though `CFE_SB_CreatePipe()` and `CFE_SB_Subscribe()` have their own tests...

These asserts are largely redundant and just add clutter to the tests - I've removed the obvious cases from the tests I was already updating with `UT_ClearEventHistory()`.

`Test_SB_Cmds_MapInfoDef` was checking for `CFE_SB_PIPE_ADDED_EID` and `CFE_SB_SUBSCRIPTION_RCVD_EID` which are part of the setup, not the function under test. I changed this to check for the command counter being incremented instead.

`Test_Unsubscribe_Basic`, `Test_Unsubscribe_AppId` and `Test_Unsubscribe_Local` were checking for `CFE_SB_SUBSCRIPTION_RCVD_EID`. They should really be checking for `CFE_SB_SUBSCRIPTION_REMOVED_EID` given that `CFE_SB_Unsubscribe()` is the focus of these tests.
  - In the case of `Test_Unsubscribe_Local`, it was actually sending a `CFE_SB_UNSUB_NO_SUBS_EID` event. The reason this wasn't noticed may be because `CFE_SB_UnsubscribeLocal()` returns `CFE_SUCCESS` (and sends the `CFE_SB_UNSUB_NO_SUBS_EID` event) if the pipe is not subscribed to the `MsgId`.
    - I've amended the test to subscribe using `CFE_SB_SubscribeLocal()`, instead of `CFE_SB_Subscribe()`, and now the call to `CFE_SB_UnsubscribeLocal()` in the test actually works and returns `CFE_SUCCESS` while sending the `CFE_SB_SUBSCRIPTION_REMOVED_EID` event.

Even though these are coverage tests, they should still be clear and at least check for what they are testing...

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).
Local testing confirms net coverage unchanged.

**Expected behavior changes**
No change to code behavior. Test behavior updated as described above.

**System(s) tested on**
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS bundle.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2347
cFE Integration candidate: Caelum-rc4+dev51,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2336. Addresses Issue #2335
- PR #2338. Addresses Issues #2337

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/675/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2346/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",Equuleus-rc1,https://github.com/nasa/cFE/pull/2346
fix nasa#2316 - adding CFE_TIME_StringFmt() and CFE_TIME_StringFmtLen…,"…() functions

**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #2316, adds CFE_TIME_StringFmt() and CFE_TIME_StringFmtLen() functions that behave similarly to strftime (but limited to %Y [yyyy], %j [doy], %H, %M, %S, %f [micro]). CFE_TIME_Print() calls CFE_TIME_StringFmt().

**Testing performed**
Added UT tests, all pass.

**Expected behavior changes**
No impact to behavior, adds capabilities (that will be extended to EVS so that log message timestamps can be configurable.)

**System(s) tested on**
 - Hardware: PC
 - OS: Debian ""Bookworm"" (12)
 - Versions: HEAD of main branch of cFE

**Additional context**
An alternative would be to use strftime, if all target platforms include it. This would allow for month/day-of-month and other options this code does not include and would be difficult to implement.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",Equuleus-rc1,https://github.com/nasa/cFE/pull/2345
"Fix #2343, Update `CFE_PLATFORM_ES_DEFAULT_SYSLOG_MODE` macro in es_verify.h","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2343
  - Updates the compile-time checks on `CFE_PLATFORM_ES_DEFAULT_SYSLOG_MODE` (which doesn't exist anymore) to the new macros

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).
Local testing confirms the checks are behaving as expected when invalid values for the 2 macros are used:
![Screenshot 2023-05-21 15 50 54](https://github.com/nasa/cFE/assets/9024662/caf1d8d0-90f9-4d14-923e-e28d1498fc12)

**Expected behavior changes**
Checks will actually check what they intended to now.

**System(s) tested on**
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS bundle.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2344
Out-of-date `CFE_PLATFORM_ES_DEFAULT_SYSLOG_MODE` macro in cfe_es_verify.h,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
`CFE_PLATFORM_ES_DEFAULT_SYSLOG_MODE` was split into `CFE_PLATFORM_ES_DEFAULT_POR_SYSLOG_MODE` and `CFE_PLATFORM_ES_DEFAULT_PR_SYSLOG_MODE`, but the checks in cfe_es_verify.h got missed (so this check is not actually checking anything right now).

**Code snips**
https://github.com/nasa/cFE/blob/4deea95f4125fdd9c4dfa1410c845826b79aeb89/modules/es/fsw/src/cfe_es_verify.h#L120-L127

**Expected behavior**
Update this compile-time check to use the new macros.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2343
"Fix #2341, Rename TimeA/TimeB parameter to improve consistency","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2341
  - Converts `TimeA`/`TimeB` parameter names to `Time1`/`Time2` - making all consistent across cFE (the other option is to reverse this and convert the others to TimeA/TimeB)
    - also converts the enumerated types `CFE_TIME_A_GT_B` and `CFE_TIME_A_LT_B` to `CFE_TIME_1_GT_2` and `CFE_TIME_1_LT_2` to remain consistent
    - some test strings using TimeA/TimeB also updated for consistency

Note: If this PR is merged it will require a minor update to SC which utilises the `CFE_TIME_A_GT_B` enumerated type [here](https://github.com/nasa/SC/blob/5e9a1d63b63b59cf5d762a915fc28dbe821935db/fsw/src/sc_utils.c#L118-L143) and in a couple of tests.

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Coverage/Functional Tests etc.).

**Expected behavior changes**


**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2342
Inconsistent use of Time1/Time2 TimeA/TimeB parameter names,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
`CFE_TIME_Add()` and `CFE_TIME_Subtract()` use `Time1` and `Time2` to name their time parameters. 
`CFE_TIME_Compare()` uses `TimeA` and `TimeB`.
Was noted [here](https://github.com/nasa/cFE/issues/302#issuecomment-839017467) but doesn't have an issue open that I could find.

**Code snips**
https://github.com/nasa/cFE/blob/4deea95f4125fdd9c4dfa1410c845826b79aeb89/modules/core_api/fsw/inc/cfe_time.h#L329
https://github.com/nasa/cFE/blob/4deea95f4125fdd9c4dfa1410c845826b79aeb89/modules/core_api/fsw/inc/cfe_time.h#L358
https://github.com/nasa/cFE/blob/4deea95f4125fdd9c4dfa1410c845826b79aeb89/modules/core_api/fsw/inc/cfe_time.h#L395

**Expected behavior**
Make consistent.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2341
"Fix #2339, Refactor common logic out of `CFE_TIME_SetTime/MET/STCFCmd()`","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2339
  - Near-identical logic in `CFE_TIME_SetTimeCmd()`, `CFE_TIME_SetMETCmd()` and `CFE_TIME_SetSTCFCmd()` has been factored out into a helper routine.

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Coverage/Functional Tests etc.).
Local tests confirm the modified commands are working as expected:
![Screenshot 2023-05-19 19 49 12](https://github.com/nasa/cFE/assets/9024662/1ac2b751-c9a3-4e5a-8623-298f946ebbea)
Net coverage is unchanged (total lines reduced by 22, total branches reduced by 4).

**Expected behavior changes**
Behavior/logic is unchanged.
Code duplication reduced, easing future maintenance.

**System(s) tested on**
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS bundle.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2340
Refactor common logic out of `CFE_TIME_SetTime/MET/STCFCmd()`,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Near-identical logic in `CFE_TIME_SetTimeCmd()`, `CFE_TIME_SetMETCmd()` and `CFE_TIME_SetSTCFCmd()`.
Was noted [here](https://github.com/nasa/cFE/issues/302#issue-500469504) but doesn't have an issue open that I could find.

**Code snips**
https://github.com/nasa/cFE/blob/4deea95f4125fdd9c4dfa1410c845826b79aeb89/modules/time/fsw/src/cfe_time_task.c#L778-L923

**Expected behavior**
Pull common logic out into a helper function to reduce duplication and make code more readable/maintainable.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2339
"Fix #2337, add msg verify capability","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds a ""verify"" API to the msg module.  This always returns success in the default implementation, because checksums were not historically enforced.  However it can be made more strict in a custom implementation.

Fixes #2337

**Testing performed**
Build and run tests (API is not used yet)

**Expected behavior changes**
None at this time, follow on change to enable it

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2338
Add MSG API hook to validate a message prior to returning buffer from SB,"**Is your feature request related to a problem? Please describe.**
If a user wants to add additional error checking within the header fields, such as a CRC, there is currently no easy way to validate the value as part of the receive buffer process.

**Describe the solution you'd like**
Add a hook to validate the message before returning from SB.  

**Additional context**
This can be a no-op in the default build, as only the CMDs have a (weak) checksum, and that was never really enforced/checked in CFS anyway.   So for backward compatibility the implementation should be permissive.  But if the user has customized MSG with additional fields and logic, they could implement more validation using this hook.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",Equuleus-rc1,https://github.com/nasa/cFE/issues/2337
"Fix #2335, generalize update header parameter","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Expand the ""Increment Sequence"" boolean on transmit message functions to be a more general ""Update Header"" boolean, so it can be used for other fields like timestamps, checksums, or user-defined fields too.

Fixes #2335
Fixes #1157

**Testing performed**
Build and run CFE, sanity check, confirm headers are as expected

**Expected behavior changes**
Headers will be updated more consistently/generically. 

*Note --*  Messages classified as Commands  will have headers updated, too - specifically the sequence count and checksum.  This will apply to messages being created by SCH/SCH_LAB, and the time signals sent by CFE TIME.  Previously the sequence counter was not set in any of these messages, so it would have always been zero.  Hence receivers would not be relying on it for anything, and thus setting it nonzero shouldn't break anything, either.  But there is a slight chance that some code had a dependency on this always being zero.
 

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2336
Allow updating more than just SequenceCount on message transmit,"**Is your feature request related to a problem? Please describe.**
Currently, the CFE_SB_TransmitMsg() API has a second parameter, to update the sequence count of the outgoing message.

This was a bit short-sighted because the MSG headers are user-configurable (via customizing the MSG module) ... it is possible that there is more than just a Sequence Count that needs to be maintained.  If users can add custom header fields, this hook needs to be more generic to update other headers.

**Describe the solution you'd like**
Generalize the boolean to mean ""Update Headers""  (thus not limited to a sequence count).  This would include a sequence count, of course, to not break existing code.

**Additional context**
Other headers that could conceivably be updated, if applicable to the message being sent:
- Timestamp
- Checksum/error control field

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",Equuleus-rc1,https://github.com/nasa/cFE/issues/2335
Uninitialized variable possible in EVS_SendViaPorts,"https://github.com/nasa/cFE/blob/e3b67674630cd098dbdefdc4e727c04a2b23dc31/modules/evs/fsw/src/cfe_evs_utils.c#LL545C3-L545C3

There is a possibility of an uninitialized variable in EVS_SendViaPorts in cue_evs_utils.c. I do not have a running example, problem found using static analysis with GrammaTech CodeSonar, screenshot attached.
![Screenshot 2023-05-12 at 2 39 43 PM](https://github.com/nasa/cFE/assets/20693314/a2271cbd-6d90-428e-9e50-258c08eaee2b)

Line 545 calls CFE_MSG_GetMsgTime(CFE_MSG_PTR(EVS_PktPtr->TelemetryHeader), &PktTime);
   this function is in cue_msg_sechdr_time.c
however, if either the first, or the second parameter is NULL, then that function will return CFE_MSG_BAD_ARGUMENT on line 81 of that file. Second parameter is unlikely to be NULL as it is a pointer to a local variable from EVS_SendViaPorts().

Which means it does not initialize PktTime, which is subsequently used in the CFE_TIME_Print call.

This may not be a problem if the compiler initializes local variables to 0, but there is no guarantee on that.

PktTime is used in a time calculation to convert epoch to calendar time, so worst case this could take a long time, and/or print garbage.

Probably would be better to check the return of the call to CFE_MSG_GetMsgTime and set PktTime to 0 if CFE_MSG_BAD_ARGUMENT is returned.


",,https://github.com/nasa/cFE/issues/2334
cFE Integration candidate: Caelum-rc4+dev50,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2328. Addresses Issue #2301
- PR #2331. Addresses Issues #2327

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/673/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2333/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@pepepr08
@jphickey",Equuleus-rc1,https://github.com/nasa/cFE/pull/2333
"Fix #1519, Refactor `CFE_TBL_SearchCmdHndlrTbl` to simplify and unmix variables","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1519
  - Loop simplified, and avoids mixing of `index`/`return` during the loop (must mix at the end of the function to avoid multiple returns)
  - a few documentation typos also corrected in this PR

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Coverage/Functional Tests etc.).
Local testing to confirm net coverage unchanged and test commands also fine.

**Expected behavior changes**
No change to behavior.
Function is cleaner/simpler which eases future maintenance.

**System(s) tested on**
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS bundle.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2332
"Fix #2327, Remove unused CFE_PLATFORM_ES_RESET_AREA_SIZE","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #2327 Remove unused define CFE_PLATFORM_ES_RESET_AREA_SIZE

**Testing performed**
Pipeline passing

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
 - Pipeline

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F Martinez Pedraza / NASA GSFC 582
","CCB:Approved, CCB:Ready, Equuleus-rc1",https://github.com/nasa/cFE/pull/2331
"Fix #1933, Remove unreachable/dead branch in `CFE_ES_RunPerfLogDump()`","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1933 
  - As noted in the issue, no way that `CurrentState` can be `>= CFE_ES_PerfDumpState_CLEANUP` - making the negative branch here unreachable

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).
This PR (slightly) increases coverage by one branch by removing an unreachable branch.

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2330
"Fix #1929, Remove redundant status check in `CFE_ES_RegisterCDSEx()`","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1929
  - Additional status check was made redundant with the changes [here](https://github.com/nasa/cFE/pull/946/files#r1186575348) in https://github.com/nasa/cFE/pull/946

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).
This PR (slightly) increases coverage by one branch by removing an unreachable branch.

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2329
"Fix #2301, adjust UT pool buffer size for platform config","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
If the CFE_PLATFORM_ES_MAX_BLOCK_SIZE is increased, then increase the UT pool buffer accordingly.  This had been hardcoded to 128k.

Also consider pool exhaustion to be a fatal error, as continuing the test will certainly segfault and this makes the original error harder to spot.

Fixes #2301

**Testing performed**
Build and run TBL test with configuration specified in issue.

**Expected behavior changes**
TBL tests pass with larger sizes.

**System(s) tested on**
Debian

**Additional context**
Pool buffer being too small will also now stop/abort the test, as this is a bug that will certainly segfault later, better to stop and report the error more obviously.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2328
Remove unused define CFE_PLATFORM_ES_RESET_AREA_SIZE,"The define is not needed anymore and is currently unused.

Now the ""PSP (using `sizeof(CFE_ES_ResetArea_t)`) informs ES of what the total reserved memory area is, and ES informs PSP of how to organize/partition it.""


https://github.com/nasa/cFE/blob/e3b67674630cd098dbdefdc4e727c04a2b23dc31/modules/es/config/default_cfe_es_internal_cfg.h#L352",Equuleus-rc1,https://github.com/nasa/cFE/issues/2327
"Fix #1432, Add element to write error event in `CFE_EVS_WriteAppDataFileCmd()`","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1432 
  - Adds element number to the event that reports a write error in `CFE_EVS_WriteAppDataFileCmd()` to provide more context for operations/ground personnel

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Coverage/Functional Tests etc.).

**Expected behavior changes**
No change to behavior other than the variable added to the `EVS_SendEvent()` mentioned above.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2326
cFE Integration candidate: Caelum-rc4+dev49,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2321. Addresses Issue #2320
- PR #2314. Addresses Issues #2310
- PR #2319. Addresses Issue #2315

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/671/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2325/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",Equuleus-rc1,https://github.com/nasa/cFE/pull/2325
"Fix #2323, Remove unnecessary asserts in TIME invalid command length UT","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2323 
  - Removed asserts of command counters in the tests for commands sent with an invalid command length. Checking for `CFE_UtAssert_EVENTSENT(CFE_TIME_LEN_ERR_EID)` seems sufficient, and aligns TIME with the testing pattern in the other cFE modules.

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).
Local testing with cFS suite confirms no change to coverage.

**Expected behavior changes**
This simplifies the coverage tests and makes them easier to maintain. Also, TIME is now consistent with the other modules.

**System(s) tested on**
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS bundle.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2324
TIME includes unnecessary asserts in invalid command length tests,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
TIME is the only module that also checks the command counters in the coverage tests for commands issued with an invalid length.
https://github.com/nasa/cFE/blob/7479d221692672d66946081f1cc5eb7c1d2acf9b/modules/time/ut-coverage/time_UT.c#L1400-L1408

The others:
https://github.com/nasa/cFE/blob/7479d221692672d66946081f1cc5eb7c1d2acf9b/modules/es/ut-coverage/es_UT.c#L3337-L3342
https://github.com/nasa/cFE/blob/7479d221692672d66946081f1cc5eb7c1d2acf9b/modules/evs/ut-coverage/evs_UT.c#L1775-L1780
https://github.com/nasa/cFE/blob/7479d221692672d66946081f1cc5eb7c1d2acf9b/modules/sb/ut-coverage/sb_UT.c#L523-L525
https://github.com/nasa/cFE/blob/7479d221692672d66946081f1cc5eb7c1d2acf9b/modules/tbl/ut-coverage/tbl_UT.c#L306-L313

**Expected behavior**
Can simplify the unit tests for TIME by removing these extra asserts - checking for `CFE_TIME_LEN_ERR_EID` being sent seems sufficient.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2323
cFE is inconsistent on whether to increment error counter in case of invalid MID,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
3/5 of the cFE modules that have command pipes, increment the `CommandErrorCounter` when an invalid MID is received (ES, EVS and SB).

**ES**
https://github.com/nasa/cFE/blob/7479d221692672d66946081f1cc5eb7c1d2acf9b/modules/es/fsw/src/cfe_es_dispatch.c#L278-L283

**EVS**
https://github.com/nasa/cFE/blob/7479d221692672d66946081f1cc5eb7c1d2acf9b/modules/evs/fsw/src/cfe_evs_dispatch.c#L61-L66

**SB**
https://github.com/nasa/cFE/blob/7479d221692672d66946081f1cc5eb7c1d2acf9b/modules/sb/fsw/src/cfe_sb_dispatch.c#L193-L197

2/5 do not (TBL and TIME).

**TBL**
https://github.com/nasa/cFE/blob/7479d221692672d66946081f1cc5eb7c1d2acf9b/modules/tbl/fsw/src/cfe_tbl_dispatch.c#L141-L160

**TIME**
https://github.com/nasa/cFE/blob/7479d221692672d66946081f1cc5eb7c1d2acf9b/modules/time/fsw/src/cfe_time_dispatch.c#L253-L261

**Expected behavior**
Even though this should never actually occur - it should be consistently implemented across cFE.

Of note: Most, but I believe not all, of the apps do increment their `CommandErrorCounter` when an invalid MID is received.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2322
"Fix #2320, reorganize headers","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Reorganizes all the headers in CFE to make them comply with the naming convention as described in the developers guide section 4.2.  

Fixes #2320

**Testing performed**
Build and sanity check CFE in a variety of configurations

**Expected behavior changes**
Header files are split into smaller parts, more manageable.
Should be backward compatible...

**System(s) tested on**
Debian

**Additional context**
The smaller, more granular header files are not only easier to maintain (if maintained by hand) but also are more easily switched to a generated source.  It is important to compartmentalize the contents because ""source switching"" will not work if different types of definitions are mixed in the same header.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2321
Reorganize include files for CFE,"**Is your feature request related to a problem? Please describe.**
A recommendation for header file naming and scoping was documented in #2305 and PR #2306.  However, that PR was just a document, CFE itself does not (yet) adhere to this convention

**Describe the solution you'd like**
Split the current ""cfe_mission_cfg.h"" and ""cfe_platform_cfg.h"" into module-specific chunks (es, sb, evs, tbl, time).  And organize the names and contents of those chunks according to the documented convention in https://github.com/nasa/cFE/blob/main/docs/cFE%20Application%20Developers%20Guide.md#421-cfs-application-template

**Describe alternatives you've considered**
N/A

**Additional context**
This is important going forward as some files (in particular, those that define the interfaces) may be generated from a tool.  It is therefore important to separate the file content according to the convention.  This allows headers that are generated by the tool to be ""source-selected"" accordingly; we do not want to have those definitions mixed with other types of unrelated definitions.  

Currently, the CFE platform and mission config files contain a mixture of definitions - all of the core apps are mixed together,  and some of the definitions affect the interfaces, and some do not.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, Equuleus-rc1",https://github.com/nasa/cFE/issues/2320
"Fix #2315, uniqueness of tbl target names","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
If the passed-in table name does not use a qualifier suffix, then generate one by computing a hash of the context information.  This ensures that the generated intermediate target names will be unique.

Fixes #2315

**Testing performed**
Replicated original error by doing additional ""add_cfe_tables"" for sample app in local project config, got duplicate name error from CMake.  Apply this patch, repeat build, and got all table files successfully.

**Expected behavior changes**
No more target name conflict

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2319
"Fix #2317, Correct unbalanced brackets in `CFE_MSG_CMD_HDR_INIT` macro","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2317 
  - unbalanced brackets/parentheses corrected

**Testing performed**
GitHub CI actions all passing successfully.

**Expected behavior changes**
Balanced brackets - could avoid future compiler warnings/errors or code bugs if not picked up by the compiler.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2318
wrong closing parenthesis in CFE_MSG_CMD_HDR_INIT macro,"The CFE_MSG_CMD_HDR_INIT macro's parentheses are not properly balanced.

The CFE_MSG_CMD_HDR_INIT macro contains a ')' instead of a '}' in line 70 as of Latest commit [f9112b4] on Jun 7, 2022
File: nasa/cFE/modules/msg/option_inc/default_cfe_msg_hdr_priext.h

Simple inspection shows the problem.

Opening and closing parentheses should be balanced.

line 70:  .SystemId = {0, 0) \

Matthias Bark, Boeing
",,https://github.com/nasa/cFE/issues/2317
create CFE_TIME_PrintFmt();,"**Is your feature request related to a problem? Please describe.**
Currently the [`CFE_TIME_Print()` function only produces `YYYY-ddd HH:MM:SS.xxxx`](https://github.com/nasa/cFE/blob/main/modules/time/fsw/src/cfe_time_api.c#L673) formatted timestamps. CFE_EVS now uses that for stdout messages, which adds quite a lot of text.

**Describe the solution you'd like**
I suggest the addition of a new `CFE_TIME_PrintFmt()` function, a-la `strftime` (preferably using `strftime`, if that is available on all our target platforms) so that applications can produce a time-only format, for example.

Additionally, I suggest a ""T+"" format for such things as EVS stdout output where the first report is the full timestamp for ""T0"" and all subsequent messages are the number of seconds (`SS.xxxx`) after the T0 epoch for even more storage efficiency and readability.

Once this capability is created, EVS should be modified to allow configuring the format.

**Describe alternatives you've considered**
Another option is to use something other than `CFE_TIME_Print()` in [EVS_SendViaPorts()](https://github.com/nasa/cFE/blob/main/modules/evs/fsw/src/cfe_evs_utils.c#L539).

**Additional context**
See the related PR #2295 

**Requester Info**
Christopher.D.Knight@nasa.gov
",,https://github.com/nasa/cFE/issues/2316
Uniqueness of intermediate table target names,"**Is your feature request related to a problem? Please describe.**
Previously, each table "".c"" source file was built into its own static library target based on that source file name.  This had the side effect of creating lots of complexly-named static lib targets.

With recent changes, this is changed to build all listed table source files listed into a single, simpler-named target.

Now a new problem occurs if one tries to build table files separately.  For example, something like this:

```
add_cfe_tables(sc rts10.c)
add_cfe_tables(sc rts11.c)
```

Will both try to register a static lib target named `tblobj_cpu1_sc`, which results in a target name collision error.

**Describe the solution you'd like**
Invoking `add_cfe_tables` as above should work without a target name collision.

**Describe alternatives you've considered**
The `add_cfe_tables` does allow for a name suffix, which is used as part of the lib name - so as long as that suffix is unique, there is no name collision.  For example, this works:

```
add_cfe_tables(sc.rts10 rts10.c)
add_cfe_tables(sc.rts11 rts11.c)
```

And listing mutiple source files works too:

```
add_cfe_tables(sc.custom rts10.c rts11.c)
```

It is only the case of multiple invocations of `add_cfe_tables` with the _same_ first parameter that triggers this conflict.

**Additional context**
Unfortunately, we had previously documented/recommended the first parameter of `add_cfe_tables` to match the app name, so there may be more users that were following the problematic pattern above (1 is confirmed).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",Equuleus-rc1,https://github.com/nasa/cFE/issues/2315
"Fix #2310, Update XML files per interoperability testing","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Verify the JSON files generated from EDS match the expected content and CTF-based tests also pass.  This required a few touchups to XML files to adjust sizes and/or padding.

Fixes #2310

**Testing performed**
Convert EDS to JSON and run CTF-based tests using generated files

**Expected behavior changes**
None

**System(s) tested on**
CTF

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2314
cFE Integration candidate: Caelum-rc4+dev48,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2306. Addresses Issue #2205
- PR #2295. Addresses Issues #219, #93
- PR #2303. Addresses Issue #1901
- PR #2312. Addresses Issue # 2311

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/670/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2313/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey
@skliper
@havencarlson",Equuleus-rc1,https://github.com/nasa/cFE/pull/2313
"Fix #2311, correct fallback file case","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Only include the ""FALLBACK_FILE"" if the normal search came up empty. Do not return a list containing the fallback/default along with the user-supplied files, only return the user-supplied files.  This was an issue when using ""ALLOW_LIST"" in that it had both.

Fixes #2311

**Testing performed**
Build with normal/default config, and build with overrides

**Expected behavior changes**
Overrides should work correctly again.

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2312
New cfe_locate_implementation_file() includes fallback file in results even if override found,"**Describe the bug**
When using a ""FALLBACK_FILE"" option, this is put at the last priority
When using the ""ALLOW_LIST"" option, this function returns ALL files found that match the pattern being searched for.   

When those two options are used together, it means that the fallback file will be included in the result list, along with the user-supplied files.  This is not the intent; the fallback file should only be returned if _no_ user-supplied files were found.

The result of including both is that one gets duplicate defs and/or unexpected values.

The ""generate_include_configfile()"" uses it in this way, and thus gets both copies.

**To Reproduce**
Use ""generate_config_includefile"" with a file that has been overridden by the user.  The generated include file will get both the default and the user-supplied copy.

**Expected behavior**
Only the user-supplied copy should be used.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, Equuleus-rc1",https://github.com/nasa/cFE/issues/2311
Update EDS based on latest compatibility testing,"**Describe the bug**
The CTF/CCDD JSON files produced by the EDS tool from the XML files (see nasa/EdsLib#44) do not exactly match the current scripts.

**To Reproduce**
Generate JSON products from EDS, then run CTF-based tests using those JSON files, observe mismatch errors

**Expected behavior**
Should run cleanly - the generated JSON files should be fully compatible with the existing JSON files.

**System observed on:**
Test/Validation VM

**Additional context**
This means there are a few cases where the EDS file does not exactly match how it is currently implemented.  Things like missing ""Spare"" bits, or a different width type, etc.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, Equuleus-rc1",https://github.com/nasa/cFE/issues/2310
"Fix #1448, Simplify and clarify `EVS_AddLog` logic","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1448
  - Removes duplication of incrementing the `LogOverflowCounter`
  - Simplifies the function and makes logical flow a little clearer

**Testing performed**
GitHub CI actions all passing successfully.

Would be good to add functional tests for this in the future - I noticed that changing the second block to just a simple `else` also passes all the coverage tests. 

**Expected behavior changes**
No change.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2309
"Fix #1398, Consistent use of `CFE_EVS_EventType_Enum_t` for `EventType`","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1398
  - Remaining `EventType` parameters/variables declared explicitly as `int16` converted over to use the defined type

Note: https://github.com/nasa/cFE/issues/1447 and https://github.com/nasa/cFE/issues/1438 are unresolved but it seems unlikely the enum will be removed completely. I think it is worth clearing this issue up in the meantime - to improve consistency in cFE.

**Testing performed**
GitHub CI actions all passing successfully.

**Expected behavior changes**
No change.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2308
cFE Integration candidate: Caelum-rc4+dev47,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2299. Addresses Issue #2284
- PR #2300. Addresses Issue #2296
- PR #2298. Addresses Issue #2297

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/669/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2307/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey
@dzbaker",Equuleus-rc1,https://github.com/nasa/cFE/pull/2307
"Fix #2305, document CFS component file naming","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Expand section 4 of the CFE application developer guide with recommended file naming patterns and the expected content of the files.  CFS apps should strive to match this pattern for the next release.

Fixes #2305

**Testing performed**
N/A (documentation only)

**Expected behavior changes**
N/A (documentation only)

**System(s) tested on**
N/A (documentation only)

**Additional context**
If approved, all apps/components should migrate to the described pattern in cases where they do not currently implement it.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2306
Document recommended file naming conventions and expected content,"**Is your feature request related to a problem? Please describe.**
The CFS apps still vary quite a bit in terms of the content and structure of the source files, even though many do share similar file names in their source trees, the content is not always aligned.

For example, `HS` and `HK` apps both have `tbldefs.h` files (draco-rc4 tag linked here):

https://github.com/nasa/HS/blob/a99b89052d81395df88294d5549bc5cd1a6b703d/fsw/inc/hs_tbldefs.h
https://github.com/nasa/HS/blob/a99b89052d81395df88294d5549bc5cd1a6b703d/fsw/inc/hs_extern_typedefs.h
https://github.com/nasa/HK/blob/b8821d6a65e1d400f0aa99605590a9660de7da4d/fsw/inc/hk_tbldefs.h
https://github.com/nasa/HK/blob/b8821d6a65e1d400f0aa99605590a9660de7da4d/fsw/inc/hk_extern_typedefs.h

But the content of the file between these two apps is quite different; In ""HS"" the `tbldefs.h` file contains only some `#define` statements associated with table definitions, whereas in ""HK"" this has the complete table definition structures.  In contrast, the ""HS"" app puts the complete table structure definitions in `hs_extern_typedefs.h`, but this same file has only a `#define` in HK.

**Describe the solution you'd like**
Improve consistency not only in file naming but also the content and scope/usage of those files, which starts by documenting the recommended patterns so developers have a guide to follow, as opposed to assumptions.

**Additional context**
This is extra misleading in CFS because files _do_ have similar-looking names, which suggests similar usage and content, but the latter is not actually the case.  Having the appearance/veil  of consistency without actual consistency within the file is worse than having no appearance of consistency at all.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, Equuleus-rc1",https://github.com/nasa/cFE/issues/2305
"Fix #1684, Add functional tests for cFE SB Message ID APIs","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1684
  - Added functional tests for `CFE_SB_IsValidMsgId()`, `CFE_SB_MsgId_Equal()`, `CFE_SB_MsgIdToValue()` and `CFE_SB_ValueToMsgId()`. 
  - renamed `message_id_test.c` to `msg_msg_id_test.c` to avoid confusion and better differentiate it from the new test file for the SB MsgId tests created in this PR
  - couple text improvements and removal of trailing whitespace piggy-backing on this PR

**Testing performed**
GitHub CI actions all passing successfully.

**Expected behavior changes**
Test code changes only.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2304
"Fix #1901, remove else statement that was unreachable by unit tests","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #1901.  `CFE_TBL_GetWorkingBuffer()` could only ever return `CFE_SUCCESS` or `CFE_TBL_ERR_NO_BUFFER_AVAIL`. Removed else statement that would never be able to be reached.

**Testing performed**
Unit tests

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
 - OS: Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2303
"Fix #1527, Implement common command-handler return pattern across cFE","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1527
  - Major changes are to convert ES, TIME and SB to the pattern already used by TBL and EVS - namely, to increment the command counters centrally in the command processing function (in XX_dispatch.c), rather than individually inside each command.
    - this results in a reduction of locations where `CommandCounter`'s are incremented from 41 to 5, and `ErrorCounter`'s from 71 to 11
  - Introduced the `CFE_STATUS_COMMAND_FAILURE` macro which can be used by command functions to signal a general failure to execute their command. This macro can also be used by other cFS components and apps for command execution failures.

Summary of module-specific changes:
**_ES_**
- move incrementing of Command/Error counters from the individual commands into `CFE_ES_TaskPipe()`
  - there were 4 locations (in `CFE_ES_QueryAllCmd()` and `CFE_ES_QueryAllTasksCmd()`) where `CFE_SUCCESS` was returned during a failure/error event after the `ErrorCounter` was incremented. These now return `CFE_STATUS_COMMAND_FAILURE` which improves the clarity of these functions.

**_TIME_**
- move incrementing of Command/Error counters from the individual commands into `CFE_TIME_TaskPipe()`
- `CFE_TIME_SetDelayImpl()`, `CFE_TIME_AdjustImpl()` and `CFE_TIME_1HzAdjImpl()` were changed from `void` return type to `CFE_Status_t` in order to carry through the result of their respective add/subtract versions over to `CFE_TIME_TaskPipe()` and increment the required counters

**_SB_**
- move incrementing of Command/Error counters from the individual commands into `CFE_SB_ProcessCmdPipePkt()`
- removed the `CFE_SB_IncrCmdCtr()` helper function as it is no longer required with these changes - its functionality has been folded into `CFE_SB_ProcessCmdPipePkt()`

**_TBL_**
- removed `CFE_TBL_MESSAGE_ERROR` (essentially replaced by `CFE_STATUS_COMMAND_FAILURE)`
- removed the `CFE_TBL_CmdProcRet_t` enumeration
  - The constants in this enum were already mapped to CFE macros anyway. The only real change here is that `CFE_TBL_INC_ERR_CTR,` which was previously mapped to `CFE_TBL_MESSAGE_ERROR,` has now been replaced by the new `CFE_STATUS_COMMAND_FAILURE` macro which was introduced in this PR.
    - _Note: I haven't added any deprecation for the removal of `CFE_TBL_MESSAGE_ERROR` or `CFE_TBL_CmdProcRet_t` - if this is required in this case, just let me know._
- `CFE_TBL_NoopCmd()` erroneously noted a possible error return in doxygen comments - this has been removed as the function always returns `CFE_SUCCESS`.

_Note: https://github.com/nasa/cFE/pull/2264 which converts the remaining `int32` return types to `CFE_Status_t` (along with most of the local `status`/`return` variables) is complementary to this PR._

**Testing performed**
GitHub CI actions all passing successfully.

Local testing with full cFS suite confirms net coverage unchanged.
Prior to changes:
```
  lines......: 98.1% (13074 of 13326 lines)
  functions..: 97.0% (1041 of 1073 functions)
  branches...: 97.1% (5870 of 6047 branches)
```
After changes:
```
  lines......: 98.1% (13056 of 13308 lines)
  functions..: 97.0% (1040 of 1072 functions)
  branches...: 97.1% (5886 of 6063 branches)
```
**Expected behavior changes**
Behavior largely unchanged, other than the modifications listed above.

cFE command-handling code is now simpler, more consistent and easier to maintain.

**System(s) tested on**
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS bundle.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2302
TBL UT failure when max table size is increased,"**Describe the bug**
TBL unit tests do not always initialize a memory pool large enough for table load buffers prior to unit test execution.   

**To Reproduce**
Increase the size of the max allowable table sizes and run unit test.

Example:
#define CFE_PLATFORM_TBL_MAX_DBL_TABLE_SIZE 131072
#define CFE_PLATFORM_TBL_MAX_SNGL_TABLE_SIZE 131072
#define CFE_PLATFORM_TBL_BUF_MEMORY_BYTES (8388608*2)
#define CFE_PLATFORM_TBL_MAX_SIMULTANEOUS_LOADS   4

**Reporter Info**
Dan Knutsen
NASA GSFC
","bug, unit-test, Equuleus-rc1",https://github.com/nasa/cFE/issues/2301
"Fix #2296, add option to link to generated files","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Update the ""generate_config_includefile"" to be aware of generated files. This should not call cfe_locate_implementation_file() in this context because the file may not exist at the time.  For this type of use case it should just directly link the file without any checking.

Fixes #2296

**Testing performed**
Build HS (with additional patch) that needs this

**Expected behavior changes**
Files that are expected to be generated (e.g. via EDS tool) do not need to exist.

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2300
"Fix #2284, improve add_cfe_tables function","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Improves the functionality and adds additional documentation about how this function is intended to work.  The improvements add some flexibility and intelligence and should be backward compatible with existing use cases.

The add_cfe_app() function now adds an additional interface target that can be referenced when building tables, and this includes the directory-scope properties from the original app build.  Therefore, calls to add_cfe_tables from other (non-app) contexts can get the full set of include directories.

This also makes the target name simpler when adding custom properties, it is simply ""${APP_NAME}.table""

Finally, instead of invoking the table tool (elf2cfetbl) directly in the context of the table build rule, it generates a custom makefile rule instead, which is called from the top-level (mission) scope to do the conversions.

Fixes #2284

**Testing performed**
Build and sanity check table builds of CFS apps in a variety of configurations, with and without mission-provided overrides

**Expected behavior changes**
Updates to how the table tool is actually invoked

**System(s) tested on**
Debian

**Additional context**
This also sets up for an easier migration path to EDS-based tables, as in this context the table building process must be run using a host-native compiler rather than the target compiler (because EDS, not the compiler, defines the binary layout).

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2299
"Fix #2297, Create Workflow for IC Bundle Generation","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
- Addresses issue #2297.

**Testing performed**
Generated IC branch in fork.

**Expected behavior changes**
Adds new workflow for integration candidate branch generation.

**Contributor Info - All information REQUIRED for consideration of pull request**
Dylan Z. Baker/NASA GSFC 582","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2298
Automate Generation of Integration Candidate Branch,"**Is your feature request related to a problem? Please describe.**
Generating the integration candidate branch is a very straightforward process, although it can be highly time consuming. Automating this process can result in significant time savings.

**Describe the solution you'd like**
Use a GitHub workflow to automatically merge a set of pull requests into the integration candidate branch and push it to GitHub.

**Describe alternatives you've considered**
Scripts can be used to simplify this process as well, but it requires setup by the person maintaining the repository and isn't as portable.

**Requester Info**
Dylan Baker/NASA GSFC 582","enhancement, continuous-integration, Equuleus-rc1",https://github.com/nasa/cFE/issues/2297
Add option to generate an include wrapper for files that do not yet exist,"**Is your feature request related to a problem? Please describe.**
A side effect of a recent change to `generate_config_includefile` is that if the name specified FALLBACK_FILE option does not exist, it now reports that as an error, whereas previously it would create a wrapper to the (nonexistent) file.

The error is correct for most use cases, but if the underlying file is also generated, then there is an initial condition issue when running the build for the first time from a clean slate.

**Describe the solution you'd like**
If the source for `generate_config_includefile` is in turn also a generated file, should blindly create the wrapper and not check for existence.  It shouldn't even do the normal search in this case, as it would be incorrect  to override a generated file with a static one.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",Equuleus-rc1,https://github.com/nasa/cFE/issues/2296
"Fix #219, #93, Add EVS port timestamp and simplify port selection","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #93
- Fix #219

**Testing performed**
CI and on local build with time stamp enabled

**Expected behavior changes**
Adds time stamp when configured to do so

**System(s) tested on**
CI, Ubuntu 20.04

**Additional context**
Related but doesn't address (although should make the change simpler):
- #94

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2295
"Fix #1453, Remove sparsely used `CFE_BIT`-related macros","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1453
  - Remove the `CFE-BIT` family of macros. They were nicely designed but used only a few times (out of ~200 bit-check/manipulation expressions), so better to simplify and remove the abstraction.

_Note: There are 4 uses (total) of the `CFE-BIT` macros in SC and HS._

**Testing performed**
GitHub CI actions all passing successfully.

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2294
TBL TableOptionFlags confusing,"**Is your feature request related to a problem? Please describe.**
The `TblOptionFlags` parameter specified when calling `CFE_TBL_Register` is a bit map of flags. Many of the #define'd flags are exclusive (`CFE_TBL_OPT_SNGL_BUFFER` and `CFE_TBL_OPT_DBL_BUFFER`, for example). In reality, SNGL is the bit value of `0` and DBL is `1`. So, for example, if you have a bitfield with DBL_BUFFER defined, you have to AND the SNGL flag into it.

**Describe the solution you'd like**
Do not specify the ""default"" flag values as bit values, for example, only specify `CFE_TBL_OPT_DBL_BUFFER` and to switch back to single, you would AND the negation of this bit field.

Also, often APIs that have bit field flag specifiers allow callers to specify `0` for the parameter, and this usually means ""use the defaults"". I believe this is the case with `CFE_TBL_Register` but should be documented and confirmed as such.

**Describe alternatives you've considered**
Leave as is.

**Additional context**

**Requester Info**
Christopher.D.Knight@nasa.gov",cFE-TBL,https://github.com/nasa/cFE/issues/2293
Move TBL to use ResourceID,"**Is your feature request related to a problem? Please describe.**
Other CFE core API's use ResourceIDs when referring to resources (tasks, apps, etc.) 

**Describe the solution you'd like**
The TBL module should use a type based on ResourceIDs, currently it uses int16 as ""table ID's"".

**Describe alternatives you've considered**
Leave as is.

**Additional context**

**Requester Info**
Christopher.D.Knight@nasa.gov",cFE-TBL,https://github.com/nasa/cFE/issues/2292
cFE Integration candidate: Caelum-rc4+dev46,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2254. Addresses Issue #2253
- PR #2288. Addresses Issue #2287
- PR #2290. Addresses Issue #2289

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/668/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2291/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",Equuleus-rc1,https://github.com/nasa/cFE/pull/2291
"Fix #2289, implement common search routine for config files","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds a 'cfe_locate_implementation_file()' function that provides a consistent means to find a file within the ${MISSION_DEFS} subdirectory.

Similar locate/search logic was necessary in a few places, for generate_config_includefile as well as add_cfe_tables, but these were not consistent in the paths or ordering used.  Using this function should make them consistent.

Fixes #2289

**Testing performed**
Confirm that the new file matching routine finds the same file as the old logic did

**Expected behavior changes**
More flexibility with `generate_config_includefile()`

**System(s) tested on**
Debian

**Additional context**
Currently this PR only employs the new logic for `generate_config_includefile()`.  Separate PRs will switch `add_cfe_tables()` and any other logic used to search for other files.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2290
Inconsisent search paths used for mission-provided files,"**Is your feature request related to a problem? Please describe.**
The CMake build system allows the user to provide customized versions of particular files by creating a file of the same name in the `defs` configuration directory.  Specifically this feature is important for configuration header files and table files that are intended to be customized by the user.

The problem is that the search paths/patterns used for the cmake `add_cfe_tables()` function (for table files) and the `generate_config_includefile()` function (for headers) are not related at all, which is confusing.

**Describe the solution you'd like**
The search patterns and search order/priority levels between two functions should be more consistent, ideally use a common file finding function under the hood to implement the search, so the patterns and order will be the same.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, Equuleus-rc1",https://github.com/nasa/cFE/issues/2289
"Fix #2287, remove return value doxygen markup","The CFE_ES_TaskRecordSetFree() function is a void, it should not have any documentation about return value.  Remove this line.  Appears to be a cut and paste error, produces a warning in newer Doxygen versions.

**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #2287

**Testing performed**
Build documentation 

**Expected behavior changes**
None

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2288
return code doc on void function CFE_ES_TaskRecordSetFree(),"**Describe the bug**
The function `CFE_ES_TaskRecordSetFree()` has a doxygen comment about a return value, but the function is `void`.  Newer doxygen versions appear to warn about this, older ones just ignore it.

**To Reproduce**
Run current version of doxygen, see warning

**Expected behavior**
Should be clean.

**System observed on:**
Debian bookworm (12)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",Equuleus-rc1,https://github.com/nasa/cFE/issues/2287
"Fix #1467, Add syslog write for `CFE_ES_WaitForSystemState()` timeout","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1467
  - This PR adds a `CFE_ES_WriteToSysLog()` for cases where the timeout is reached in `CFE_ES_WaitForSystemState().`

The output string looks like this:
![Screenshot 2023-04-10 08 30 54](https://user-images.githubusercontent.com/9024662/230801833-ca0617c0-1315-46ff-beb6-b3cca803092d.png)

**Testing performed**
GitHub CI actions all passing successfully.
Local sanity test with cFS bundle.

**Expected behavior changes**
Report on timeout, other than that no change to behavior.

**System(s) tested on**
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS bundle.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2286
"Fix #1473, Add helper for `CFE_SB_Write...InfoCmd()` with common logic","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1473
  - Moves the common logic out of the 3 `CFE_SB_Write*InfoCmd()` functions into a helper function to reduce code duplication.

The 3 different commands now call `CFE_SB_WriteInfo()` with their personalised input parameters to perform the actual write. (I was considering naming the new function `CFE_SB_PerformWriteInfoCmd()`).

**Testing performed**
GitHub CI actions all passing successfully.
Local testing shows net coverage (for the full cFS bundle) is unaffected and the changes result in a net reduction of 22 lines and 12 branches.

Before the changes:
```
  lines......: 98.1% (13074 of 13326 lines)
  functions..: 97.0% (1041 of 1073 functions)
  branches...: 97.1% (5870 of 6047 branches)
```
After the changes:
```
  lines......: 98.1% (13052 of 13304 lines)
  functions..: 97.0% (1042 of 1074 functions)
  branches...: 97.1% (5858 of 6035 branches)
```

**Expected behavior changes**
No change to behavior.

**System(s) tested on**
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS bundle.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2285
Incorrect include directories when using add_cfe_tables outside app,"**Is your feature request related to a problem? Please describe.**
If the TGTNAME variable is set when this function is called, the function does not examine the include directories of the app (via the APP_NAME parameter).

As a result, when this function is used in a custom setting to provide a mission-specific table definition, the include directories used will be different than when this function is used from the context of the app receipe itself. 

**Describe the solution you'd like**
If APP_NAME is valid and is an app target name, then the target `INCLUDE_DIRECTORIES` for that app should always be included in the table build.  

Currently when this function is used outside the app build context, it tries to get INCLUDE_DIRECTORIES for a ""cpu1"" target, which does not exist, and produces an error.

**Additional context**
This include directory problem only occurs when trying to use customized table files, rather than the default/example files included with apps.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",Equuleus-rc1,https://github.com/nasa/cFE/issues/2284
"Fix #2282, Move calls to CFE_SB_GetPipeName() up higher to reduce duplication","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2282
  - 3 calls to `CFE_SB_GetPipeName()` reduced to 1 by moving it up to the start of the `for` loop block.

The `PipeName` is now ready to use in any of the error blocks if needed.

**Testing performed**
GitHub CI actions all passing successfully.

A couple of the coverage tests which were checking the error conditions but suppressing the actual sending of an event now have the extra event generated by `CFE_SB_GetPipeName()` from earlier in the `for` block.

https://github.com/nasa/cFE/pull/2265 will remove the event from nominal execution of `CFE_SB_GetPipeName()` anyway, so these event counts will go back down once that is merged (also the call will no longer be 'indirectly recursive').

**Expected behavior changes**
No change to behavior other than that described above.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2283
Move calls to `GetPipeName()` to reduce code duplication in `BroadcastBufferToRoute()`,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
These 3 calls to `CFE_SB_GetPipeName()` in `CFE_SB_BroadcastBufferToRoute()` could be reduced to 1 if it was moved up a bit higher to just after the opening of the `for` loop block. 

**Code snips**
https://github.com/nasa/cFE/blob/7af467efdc15f788d44d67cb807403b10c4f0c99/modules/sb/fsw/src/cfe_sb_api.c#L1677-L1733

**Expected behavior**
Reduce unnecessary code duplication.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2282
"Fix #2280, Move calls to `CFE_ES_GetAppName()` higher to reduce code duplication","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2280
  - 3 calls to `CFE_ES_GetAppName()` in `CFE_TBL_Register()` reduced to 1 by moving the call up 1 layer in the nesting.

**Testing performed**
GitHub CI actions all passing successfully.

**Expected behavior changes**
No change.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2281
Move calls to `CFE_ES_GetAppName()` to reduce code duplication in `CFE_TBL_Register()` ,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
These 3 calls to `CFE_ES_GetAppName()` in `CFE_TBL_Register()` could be reduced to 1 if it was moved up a bit higher. 

**Code snips**
https://github.com/nasa/cFE/blob/7af467efdc15f788d44d67cb807403b10c4f0c99/modules/tbl/fsw/src/cfe_tbl_api.c#L366-L422

**Expected behavior**
Reduce unnecessary code duplication.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2280
"Fix #1723, Add NULL check for AppFileName parameter in CFE_ES_ReloadApp","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1723
  - Adds check for `NULL` input for the 2nd parameter in `CFE_ES_ReloadApp()` - `AppFileName.`
Previously only the 1st parameter, `AppID`, was directly checked for `NULL.`

**Testing performed**
GitHub CI actions all passing successfully. Coverage unaffected.

**Expected behavior changes**
Will fail faster/earlier with NULL input for `AppFileName.`
Clearer error logs ease future maintainability and debugging.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2279
"Fix #1708, Align padding explicitly in cfe_tbl_msg.h","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1708
  - The 2-byte implicit padding in `CFE_TBL_HousekeepingTlm_Payload_t` as noted in the issue has been made explicit, and my testing showed 2-byte implicit padding on the end of `CFE_TBL_TblRegPacket_Payload_t` as well, which has also been rectified and made explicit.

Note: If this is merged, it will require updates to `cfe-tbl-hk-tlm.txt` in the Ground System tool to ensure clean and correct interpretation of the data members.

**Testing performed**
GitHub CI actions all passing successfully.
Local testing confirms all cFS bundle tests passing and coverage unaffected.

**Expected behavior changes**
Compilers trying to align to 32-bits will not longer add implicit padding in these 2 locations.

**System(s) tested on**
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS bundle.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2278
cmake ../ has error,"
[CMakeOutput.log](https://github.com/nasa/cFE/files/11132908/CMakeOutput.log)
**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
no cmake CLI cmd for build in readme,md

**Describe the solution you'd like**
**my cmake has many options
cmake   Kate - Ninja  ../**

```bash
/home/z/code/core/cFE/bld
(base) z@spin7:~/code/core/cFE/bld$ cmake ../
CMake Error at cmake/mission_build.cmake:52 (message):
  Unable to automatically determine the mission config directory.  Specify it
  with the MISSIONCONFIG variable.
Call Stack (most recent call first):
  CMakeLists.txt:87 (initialize_globals)


-- Configuring incomplete, errors occurred!
See also ""/home/z/code/core/cFE/bld/CMakeFiles/CMakeOutput.log"".
(base) z@spin7:~/code/core/cFE/bld$
A clear and concise description of what you want to happen.
Usage

  cmake [options] <path-to-source>
  cmake [options] <path-to-existing-build>
  cmake [options] -S <path-to-source> -B <path-to-build>

Specify a source directory to (re-)generate a build system for it in the
current working directory.  Specify an existing build directory to
re-generate its build system.

Options
  -S <path-to-source>          = Explicitly specify a source directory.
  -B <path-to-build>           = Explicitly specify a build directory.
  -C <initial-cache>           = Pre-load a script to populate the cache.
  -D <var>[:<type>]=<value>    = Create or update a cmake cache entry.
  -U <globbing_expr>           = Remove matching entries from CMake cache.
  -G <generator-name>          = Specify a build system generator.
  -T <toolset-name>            = Specify toolset name if supported by
                                 generator.
  -A <platform-name>           = Specify platform name if supported by
                                 generator.
  --toolchain <file>           = Specify toolchain file
                                 [CMAKE_TOOLCHAIN_FILE].
  --install-prefix <directory> = Specify install directory
                                 [CMAKE_INSTALL_PREFIX].
  -Wdev                        = Enable developer warnings.
  -Wno-dev                     = Suppress developer warnings.
  -Werror=dev                  = Make developer warnings errors.
  -Wno-error=dev               = Make developer warnings not errors.
  -Wdeprecated                 = Enable deprecation warnings.
  -Wno-deprecated              = Suppress deprecation warnings.
  -Werror=deprecated           = Make deprecated macro and function warnings
                                 errors.
  -Wno-error=deprecated        = Make deprecated macro and function warnings
                                 not errors.
  --preset <preset>,--preset=<preset>
                               = Specify a configure preset.
  --list-presets[=<type>]      = List available presets.
  -E                           = CMake command mode.
  -L[A][H]                     = List non-advanced cached variables.
  --fresh                      = Configure a fresh build tree, removing any
                                 existing cache file.
  --build <dir>                = Build a CMake-generated project binary tree.
  --install <dir>              = Install a CMake-generated project binary
                                 tree.
  --open <dir>                 = Open generated project in the associated
                                 application.
  -N                           = View mode only.
  -P <file>                    = Process script mode.
  --find-package               = Legacy pkg-config like mode.  Do not use.
  --graphviz=<file>            = Generate graphviz of dependencies, see
                                 CMakeGraphVizOptions.cmake for more.
  --system-information [file]  = Dump information about this system.
  --log-level=<ERROR|WARNING|NOTICE|STATUS|VERBOSE|DEBUG|TRACE>
                               = Set the verbosity of messages from CMake
                                 files.  --loglevel is also accepted for
                                 backward compatibility reasons.
  --log-context                = Prepend log messages with context, if given
  --debug-trycompile           = Do not delete the try_compile build tree.
                                 Only useful on one try_compile at a time.
  --debug-output               = Put cmake in a debug mode.
  --debug-find                 = Put cmake find in a debug mode.
  --debug-find-pkg=<pkg-name>[,...]
                               = Limit cmake debug-find to the
                                 comma-separated list of packages
  --debug-find-var=<var-name>[,...]
                               = Limit cmake debug-find to the
                                 comma-separated list of result variables
  --trace                      = Put cmake in trace mode.
  --trace-expand               = Put cmake in trace mode with variable
                                 expansion.
  --trace-format=<human|json-v1>
                               = Set the output format of the trace.
  --trace-source=<file>        = Trace only this CMake file/module.  Multiple
                                 options allowed.
  --trace-redirect=<file>      = Redirect trace output to a file instead of
                                 stderr.
  --warn-uninitialized         = Warn about uninitialized values.
  --no-warn-unused-cli         = Don't warn about command line options.
  --check-system-vars          = Find problems with variable usage in system
                                 files.
  --compile-no-warning-as-error= Ignore COMPILE_WARNING_AS_ERROR property and
                                 CMAKE_COMPILE_WARNING_AS_ERROR variable.
  --profiling-format=<fmt>     = Output data for profiling CMake scripts.
                                 Supported formats: google-trace
  --profiling-output=<file>    = Select an output path for the profiling data
                                 enabled through --profiling-format.
  -h,-H,--help,-help,-usage,/? = Print usage information and exit.
  --version,-version,/V [<file>]
                               = Print version number and exit.
  --help-full [<file>]         = Print all help manuals and exit.
  --help-manual <man> [<file>] = Print one help manual and exit.
  --help-manual-list [<file>]  = List help manuals available and exit.
  --help-command <cmd> [<file>]= Print help for one command and exit.
  --help-command-list [<file>] = List commands with help available and exit.
  --help-commands [<file>]     = Print cmake-commands manual and exit.
  --help-module <mod> [<file>] = Print help for one module and exit.
  --help-module-list [<file>]  = List modules with help available and exit.
  --help-modules [<file>]      = Print cmake-modules manual and exit.
  --help-policy <cmp> [<file>] = Print help for one policy and exit.
  --help-policy-list [<file>]  = List policies with help available and exit.
  --help-policies [<file>]     = Print cmake-policies manual and exit.
  --help-property <prop> [<file>]
                               = Print help for one property and exit.
  --help-property-list [<file>]= List properties with help available and
                                 exit.
  --help-properties [<file>]   = Print cmake-properties manual and exit.
  --help-variable var [<file>] = Print help for one variable and exit.
  --help-variable-list [<file>]= List variables with help available and exit.
  --help-variables [<file>]    = Print cmake-variables manual and exit.

Generators

The following generators are available on this platform (* marks default):
  Green Hills MULTI            = Generates Green Hills MULTI files
                                 (experimental, work-in-progress).
* Unix Makefiles               = Generates standard UNIX makefiles.
  Ninja                        = Generates build.ninja files.
  Ninja Multi-Config           = Generates build-<Config>.ninja files.
  Watcom WMake                 = Generates Watcom WMake makefiles.
  CodeBlocks - Ninja           = Generates CodeBlocks project files.
  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.
  CodeLite - Ninja             = Generates CodeLite project files.
  CodeLite - Unix Makefiles    = Generates CodeLite project files.
  Eclipse CDT4 - Ninja         = Generates Eclipse CDT 4.0 project files.
  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files.
  Kate - Ninja                 = Generates Kate project files.
  Kate - Unix Makefiles        = Generates Kate project files.
  Sublime Text 2 - Ninja       = Generates Sublime Text 2 project files.
  Sublime Text 2 - Unix Makefiles
                               = Generates Sublime Text 2 project files.
```

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.
cmake has config errors
**Additional context**
Add any other context about the feature request here.
```bash
├── CMakeCache.txt
├── CMakeFiles
│   ├── 3.25.1
│   │   ├── CMakeCCompiler.cmake
│   │   ├── CMakeDetermineCompilerABI_C.bin
│   │   ├── CMakeSystem.cmake
│   │   └── CompilerIdC
│   │       ├── a.out
│   │       ├── CMakeCCompilerId.c
│   │       └── tmp
│   ├── cmake.check_cache
│   ├── CMakeOutput.log
│   └── pkgRedirects
└── cmake.txt
```
**Requester Info**
Full name and company/organization if applicable
shaynababe",,https://github.com/nasa/cFE/issues/2277
"Fix #1515, Remove unnecessary memset from CFE_TBL_LoadFromFile","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1515
  - `memset` all to zero removed given that entire length is written to immediately after. Just set last character to null terminate.

**Testing performed**
GitHub CI actions all passing successfully.

**Expected behavior changes**
No change.

**Contributor Info**
Avi Weiss @thnkslprpt",CCB:Approved,https://github.com/nasa/cFE/pull/2276
cFE Integration candidate: Caelum-rc4+dev44,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2259. Addresses Issue #2258
- PR #2263. Addresses Issue #2262

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/664/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2275/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",Equuleus-rc1,https://github.com/nasa/cFE/pull/2275
"Fix #1528, Move NO_SUCH_TABLE_ERR_EID into FindTableInRegistry and make optional","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1528
  - Removes several event reports of `CFE_TBL_NO_SUCH_TABLE_ERR_EID` from `cfe_tbl_task_cmds.c` where calls to `CFE_TBL_FindTableInRegistry()` return `CFE_TBL_NOT_FOUND.` (reducing code duplication)
  - Moves the event report into `CFE_TBL_FindTableInRegistry()` itself
  - Makes the event report optional by adding a new macro definition `CFE_PLATFORM_TBL_SEND_EVENT_IF_TABLE_NOT_FOUND` to switch the event report on (`true`) or off (`false`)

**Testing performed**
GitHub CI actions all passing successfully.
Local tests with cFS suite confirm no net loss of coverage.

Note: quite a few tests had to have an event count incremented up one because 3 functions in `cfe_tbl_api.c` were calling `CFE_TBL_FindTableInRegistry()` but were not sending an event on failure (like those from `cfe_tbl_task_cmds.c` were). So any unit tests calling these functions (including downstream) with intentional failures to find the table now issue an event, where they did not do so previously.

**Expected behavior changes**
Event reports of `CFE_TBL_NO_SUCH_TABLE_ERR_EID` are now all issued from within `CFE_TBL_FindTableInRegistry()` and can be optionally switched on or off from within the platform config file.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS.

**Contributor Info**
Avi Weiss @thnkslprpt",enhancement,https://github.com/nasa/cFE/pull/2274
"Fix #1466, Add status return to CFE_ES_WaitForStartupSync()","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1466
  - Converts `CFE_ES_WaitForStartupSync()` from void return to `CFE_Status_t`, and carries through the return value from `CFE_ES_WaitForSystemState()`.

**Testing performed**
GitHub CI actions all passing successfully.
Local tests confirm all tests passing and LCOV confirms coverage of amended lines, and total coverage unaffected.

These 2 UT calls to `CFE_ES_WaitForStartupSync()` would have had to be updated, but as far as I can tell they are not actually required for coverage, and are not needed for the test blocks that they are part of (`ES_ResetUnitTest()` is run immediately after both).
https://github.com/nasa/cFE/blob/7c03369f9582b22b2c9599748e6ed7fa18d37e5c/modules/es/ut-coverage/es_UT.c#L4441-L4463

Coverage is already provided by the prior call to `CFE_ES_WaitForStartupSync()`:
https://github.com/nasa/cFE/blob/7c03369f9582b22b2c9599748e6ed7fa18d37e5c/modules/es/ut-coverage/es_UT.c#L4434

`CFE_ES_WaitForSystemState()` is already fully covered elsewhere.

**Expected behavior changes**
`CFE_ES_WaitForStartupSync()` now carries through the status/return of `CFE_ES_WaitForSystemState()` allowing additional handling by the user.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2273
"Fix #1407, Add error report on EVS failure during log header write","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1407
  - Event (and new EID) added for failure of `CFE_FS_WriteHeader()` to write the expected amount of data.

**Testing performed**
GitHub CI actions all passing successfully.

Local tests (seeded with bad value for `BytesWritten`) to check formatting etc.:

![Screenshot 2023-03-30 08 48 25](https://user-images.githubusercontent.com/9024662/228686940-00181854-3a7d-4a33-b797-e39efe29c024.png)

**Expected behavior changes**
No change to behavior other than event report on error as per above.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS.

**Contributor Info**
Avi Weiss @thnkslprpt",CCB:Approved,https://github.com/nasa/cFE/pull/2272
"Fix #1408, Use LogFullFlag instead of checking LogCount","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1408
  - `LogCount == CFE_PLATFORM_EVS_LOG_MAX` replaced by `LogFullFlag == true` (this is what that flag is for...).

**Testing performed**
GitHub CI actions (incl. Functional Tests) all passing successfully.
Local tests with cFS suite confirm coverage overall unaffected.

**Expected behavior changes**
No change to behavior.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2271
"Fix #1409, Add additional context to log file write error event","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1409
  - Entry index and total log count added to the event report in case of error during writing of the event log entries to file in `CFE_EVS_WriteLogDataFileCmd()`.

**Testing performed**
GitHub CI actions (incl. Functional Tests, Coverage Analysis etc.) all passing successfully.

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2270
"Fix #1422, Replace UT_DisplayPkt() with UtPrintx()","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1422
  - all instances of `UT_DisplayPkt()` replaced with `UtPrintx()`
  - the declaration and definition of `UT_DisplayPkt()` deleted
  - `UT_DisplayPkt()` turned into a simple macro that calls `UtPrintx()` and placed inside deprecation guards

**Testing performed**
GitHub CI actions (incl. Functional tests and Coverage Analysis etc.) all passing successfully.

Tested locally with standard cFS bundle tests - confirmed output text is correctly displayed and identical to before the change (the only difference other than the inclusion of the memory address, is the spacing and that the alphanumeric characters/digits in the hexadecimal output are now capitalized).

Before changes:
![Screenshot 2023-03-29 12 54 25](https://user-images.githubusercontent.com/9024662/228429661-9abf8946-033e-44b4-9996-be0f2abe48d9.png)

After changes:
![Screenshot 2023-03-29 12 54 19](https://user-images.githubusercontent.com/9024662/228429647-189f63d3-4215-4911-b861-e1a1d2f53761.png)

**Expected behavior changes**
Test log prints now include the memory address along with the data.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2269
"Fix #1424, Add event for NumEventFilters over max and remove FilterLimit variable","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1424
  - Event added when `NumEventFilters` over max allowed.
  - Refactored to remove unnecessary `FilterLimit` variable.
  - Wasn't sure if it was better to add a new EID on the end or re-use one of the now open slots... - I went with the latter.

**Testing performed**
GitHub CI actions (incl. Functional Tests, Code Coverage analysis etc.) all passing successfully.

**Expected behavior changes**
Only change to behavior is the new event report added as per the description above.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2268
"Fix #1443, Replace for loop copy with single memcpy","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1443
   - Character-by-character copy into `FileNameOnly` replaced by single call to `memcpy()` in 2 locations.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2267
"Fix #1303, Add struct for Version Info in ES HK Tlm Packet","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1303
  - The 4 individual components of the version number for cFE, OSAL and PSP in the ES HK Tlm packet have been moved into a struct.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No change to behavior. Telemetry packet declaration is cleaner now with less code duplication.

Note: If this is merged in, it will require a new issue to make updates to the `struct_c_f_e___e_s___hk_packet__t` file in the cFS Ground System application.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2266
"Fix #1093, Align Pipe ID/Name reporting in SB event strings","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1093
  - Removed the debug event from successful execution of `CFE_SB_GetPipeName()` and deleted the `CFE_SB_GETPIPENAME_EID` (`CFE_SB_GetPipeName()` was its only instance of use)
  - Updated all SB events that include the Pipe ID/Name in the event string to use the `PipeId` for nominal/success and `PipeName` for error cases (except where deviations are desirable)
  - Updated the format specifiers for `PipeId`s to `%lx` (if they weren't already set as such)

**Expected behavior changes**
No change to behavior other than what is outlined above.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.
Local tests confirm no change to coverage.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2265
"Fix #921, Update remaining cFE source/tests to use CFE_Status_t","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #921
  - Remaining `int32` return types converted to `CFE_Status_t`.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No change to behavior/logic- `CFE_Status_t` is currently typedef'd to `int32`, so no functional change to any types with this PR.
Synchronizing the return types to `CFE_Status_t` simplifies the code, and makes it more type-safe.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2264
"Fix #2262, separate dispatcher for messages","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Isolate the message verification and dispatch from the general message processing.  Functions in the ""task"" source file now strictly handle the command content, and do not get involved in general validation.

Also note: this is mostly a simple code move but does add a `const` qualifier to the task pipe function where it was missing before.  All of the handlers were already `const` so this just makes it consistent throughout the handling.

Fixes #2262

**Testing performed**
Build and run CFE and sanity check.  Run all tests

**Expected behavior changes**
None - this just moves code from one source file into another, does not make any change to functionality.

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2263
Move cmd pipe processing into separate dispatch file,"**Is your feature request related to a problem? Please describe.**
Currently the ""TaskPipe"" function is comprised of a couple big switch statements based on MsgId and FcnCode, along with length validation and potentially other structural checks.   If/When migrating to EDS some of that logic can be handled by common code that check against constraints defined in EDS.

**Describe the solution you'd like**
The current ""TaskPipe"" function and the supporting logic around it should be moved to a separate ""dispatch"" source unit.  This improves organization in general, but also makes for an easier switch to different logic in the future, should that come to be needed.

**Describe alternatives you've considered**
The alternative is to add `#ifdef` blocks if validation logic needs to be switched.  

**Additional context**
The recommended solution of moving this logic to a separate source unit permits source-selection in CMake at configuration time rather than relying on preprocessor-based option selection.  This is generally cleaner, and permits all options to be verified in a single unit test build, as opposed to only being able to test the selected option.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, Equuleus-rc1",https://github.com/nasa/cFE/issues/2262
"Fix #2260, Convert CFE_TBL_INFO_TABLE_LOCKED into a negative error code","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2260 (one of the cases of multiple 'success' return codes identified in https://github.com/nasa/cFE/issues/483).
  - `CFE_TBL_INFO_TABLE_LOCKED` in `CFE_TBL_UpdateInternal()` converted into a negative error return code. Not updating the table is a clear failure, and it should not be represented by a positive return value, giving an impression of success.

**Testing performed**
GitHub CI actions (incl. Code Coverage Analysis, Functional Test etc.) all passing successfully.

`CFE_TBL_Update()` (which calls `CFE_TBL_UpdateInternal()`) tests for `(Status < 0)` which is now triggered by `CFE_TBL_INFO_TABLE_LOCKED` as well, and the branch for a non-NULL `RegRecPtr` was not previously covered. With these changes, that branch is now executed by the existing tests. This results in an increase in coverage of 2 lines and 1 branch:
```
Prior to the changes:
  lines......: 98.1% (13074 of 13326 lines)
  functions..: 97.0% (1041 of 1073 functions)
  branches...: 97.1% (5870 of 6047 branches)
  
With the changes:
  lines......: 98.1% (13076 of 13326 lines)
  functions..: 97.0% (1041 of 1073 functions)
  branches...: 97.1% (5871 of 6047 branches)
```

**Expected behavior changes**
Behavior of the function is the same. Only the return code in the case of trying to update a locked table is changing from positive to negative.

The only use of `CFE_TBL_Update()` from other apps where the return value is checked (e.g. in HK) use `== CFE_SUCCESS`, so will not be affected by this change. Other (non-public) users who were checking the return of `CFE_TBL_Update()` and testing less precisely for `return >= 0` (or similar equivalents) will see a change, but it seems unlikely that they would consider a non-update as success anyway.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2261
CFE_TBL_INFO_TABLE_LOCKED should be a negative error code,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
There is an effort in https://github.com/nasa/cFE/issues/483 to deprecate/reduce the existence of multiple (non-negative) return codes indicating success.

An easy target to start chipping away at this is `CFE_TBL_INFO_TABLE_LOCKED`, used in `CFE_TBL_UpdateInternal()` to signal a locked table and therefore skip the update. Many of the others require refactoring to correct (those in `CFE_TBL_Register`) or are ambiguous as to whether they should be categorized as error or success.

**Code snips**
https://github.com/nasa/cFE/blob/7c03369f9582b22b2c9599748e6ed7fa18d37e5c/modules/tbl/fsw/src/cfe_tbl_internal.c#L962-L967

**Expected behavior**
This is a clear error (as noted by @jphickey in his analysis in https://github.com/nasa/cFE/issues/483) - i.e. nothing was updated. Code should be negative indicating failure/error.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2260
"Fix #2258, add more generic status codes","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds several more generic CFE_STATUS_ codes to be used for common validation and input processing conditions.

Fixes #2258

**Testing performed**
Build and run CFE, run all tests

**Expected behavior changes**
None - just defines some new status codes that are not (yet) used anywhere, does not change any existing status code.

**System(s) tested on**
Debian

**Additional context**
Apps can use these codes to make input validation a bit more consistent.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2259
"Add generic status code for ""invalid request""","**Is your feature request related to a problem? Please describe.**
CFE defines several generic status codes, which are not specific to any module.  These can be used by any app/module to indicate common status conditions, for example: 
 - `CFE_SUCCESS`
 - `CFE_STATUS_NOT_IMPLEMENTED`
 - `CFE_STATUS_REQUEST_ALREADY_PENDING`
 - `CFE_STATUS_EXTERNAL_RESOURCE_FAIL`
 
However none of these are really appropriate for a validation failure for a request - e.g. if a value was out of range, or something of that nature.  

**Describe the solution you'd like**
Add the following generic status codes:
- `CFE_STATUS_VALIDATION_FAILURE`: for requests/inputs that fail structural validations; this one can also be useful with TBL validation functions.
- `CFE_STATUS_RANGE_ERROR`: for requests that pass structural validation, but an input value is outside the acceptable range.
- `CFE_STATUS_INCORRECT_STATE`: for requests that are otherwise valid, but the current system state does not permit its acceptance.

**Describe alternatives you've considered**
Each app could define these status codes, but that would be redundant as these are common validation checks that every app should be doing on its inputs, so a common status code is warranted.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",Equuleus-rc1,https://github.com/nasa/cFE/issues/2258
cFE Integration candidate: Caelum-rc4+dev43,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2256. Addresses Issue #2240

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/661/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2257/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",Equuleus-rc1,https://github.com/nasa/cFE/pull/2257
"Fix #2240, improve 64-bit memory address handling in CMD/TLM","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
The ""CFE_ES_MemAddress_t"" and ""CFE_ES_MemOffset_t"" types were intended to provide a path for easily upgrading the CMD/TLM structs from 32-bit to 64-bit memory addresses.  However, this type was a bit overused and in some of those use-cases (e.g. in TBL header) it assumed that the type was 32-bits during the byte swap ops.  As a result, the type could not be changed to 64 bits as intended.

This reverts those cases in TBL back to uint32 (meaning that tables will still be limited to 32 bit sizes, even on 64 bit CPUs) but otherwise the addresses and sizes in ES/SB telemetry can grow to 64 bits as intended.

For unit tests, correct operation depends on the availablily of an updated test macro that can compare integers as ""size_t"" type. (as opposed to uint32).

Fixes #2240

**Testing performed**
Build and run all tests

**Expected behavior changes**
Changing the definition of ""CFE_ES_MemAddress_t"" and ""CFE_ES_MemOffset_t"" should now work as intended, provided that the conversion macros are also updated to match the definition.

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2256
Add pipe option to ignore MsgLim exceedance,"**Is your feature request related to a problem? Please describe.**
Currently `CFE_SB_MSGID_LIM_ERR_EID` only reports the first 16 events on any pipe:
https://github.com/nasa/cFE/blob/e35c3da83a7b3adf20ac2d909cf4c36f4370632c/cmake/sample_defs/cpu1_platform_cfg.h#L258-L259

There's a use case where only the oldest or newest (see #541) message on the pipe should be kept, and the rest dropped.  For example on a low rate link you may just want up to one message of each type, even though they may be getting produced at a higher rate (say if you want to slowly round-robin through HK msgs).  This intentional dropping causes the error event and if/when it does get filtered since the event ID is shared with all the other pipes a legitimate issue (on a pipe where you don't want to exceed MsgLim) would be hidden.

**Describe the solution you'd like**
Add a pipe option to selectively ignore this error.

**Describe alternatives you've considered**
Could use QOS instead of pipe opts.

**Additional context**
Would be helpful to fix along with keeping newest msg:
- #541

**Requester Info**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/issues/2255
"Fix #2253, update naming convention document","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Updates to cover event ID recommendations

Fixes #2253

**Testing performed**
N/A

**Expected behavior changes**
N/A - Documentation only

**System(s) tested on**
N/A

**Additional context**
This doc could really use additional updates to expand on command naming, CamelCase vs. APP_CAPS, etc.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2254
Update Naming conventions for events and other patterns,"**Is your feature request related to a problem? Please describe.**
As CFS apps are under development for the next cycle it should be a goal to reduce all the variation in terminology between them.  This includes, but not limited to:

1. Event naming patterns
2. Command naming patterns (specifically between the function that handles the command, the structure that defines the command)

The first step in fixing pattern violations is to better define the intended pattern.  This should be done as part of the CFE documentation and we can go from there.

**Describe the solution you'd like**
Consistency in naming, repeatable patterns.

**Additional context**
Examples of what NOT to do were recently addressed in nasa/FM#131, specifically stuff like:

Send HK command: command handler was `FM_ReportHK()`, the command struct name was `FM_HousekeepingCmd`, and the MID was `FM_SEND_HK_MID`.  Why are these all different - Should all be `FM_SendHkCmd` (Camel Case version).

For `FM_SET_FILE_PERM_CC` the command handler was named `FM_SetPermissionsCmd` - no ""file"" - and the struct was named `FM_SetPermCmd_t` - ""permissions"" got abbreviated.  

Other examples of abbreviation mismatch between `Dir` and `Directory` exist, and the word `File`/`Files` appears in command names in some places but not other places.

Similar naming chaos occurs in other CFS apps too, FM just provided some good examples of what not to do.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",Equuleus-rc1,https://github.com/nasa/cFE/issues/2253
cFE_SB line/branch coverage not 100%,"**Is your feature request related to a problem? Please describe.**
Currently CFE_SB is not seeing full code coverage during the unit tests. There are two conditions that seem to be causing this:

1. In various functions there are checks for - PendingEventId != 0 and Status = CFE_SUCCESS. However, both of these variables are being changed together, such that conditions are mutually exclusive. The end results is that there is no path for PendingEvent to still be non-0 if the status does not equal CFE_SUCCESS.

Example (cfe_sb_api.c line 428):

    if (Status == CFE_SUCCESS)
    {
        CFE_SB_PipeDescSetFree(PipeDscPtr);
        --CFE_SB_Global.StatTlmMsg.Payload.PipesInUse;
    }
    else if (PendingEventID != 0)
    {
        CFE_SB_Global.HKTlmMsg.Payload.CreatePipeErrorCounter++;
    }

2. Another issue that is occurring is in all usages of switch statements.  Without a default case capturing an unknown event ID, SB assumes that the case will always fall within the defined EIDs - which causes an issue with gcov coverage statistics.

Example:

        switch (PendingEventID)
        {
            case CFE_SB_DEL_PIPE_ERR1_EID:
                CFE_EVS_SendEventWithAppID(CFE_SB_DEL_PIPE_ERR1_EID, CFE_EVS_EventType_ERROR, CFE_SB_Global.AppId,
                                           ""Pipe Delete Error:Bad Argument,PipedId %ld,Requestor %s"",
                                           CFE_RESOURCEID_TO_ULONG(PipeId), FullName);
                break;
            case CFE_SB_DEL_PIPE_ERR2_EID:
                CFE_EVS_SendEventWithAppID(CFE_SB_DEL_PIPE_ERR2_EID, CFE_EVS_EventType_ERROR, CFE_SB_Global.AppId,
                                           ""Pipe Delete Error:Caller(%s) is not the owner of pipe %ld"", FullName,
                                           CFE_RESOURCEID_TO_ULONG(PipeId));
                break;
        }

**Describe the solution you'd like**
I believe these were already adjudicated as part of the coverage analysis.  However, they were pointed out by JSC SA and it is likely the non100% coverage statistics will keep coming up such that it would be worthwhile to revisit/fix or document why we think the branch coverage meets requirements.  Further, we may want to audit our branch coverage for the other core apps as well.

**Requester Info**
Dan Knutsen
NASA GSFC
",enhancement,https://github.com/nasa/cFE/issues/2252
`CFE_SB_GetBufferFromPool` discarding `CFE_ES_GetPoolBuf` error status,"**Is your feature request related to a problem? Please describe.**
Many error cases within `CFE_ES_GetPoolBuf `just set the status code and return (no reporting).  Then CFE_SB_GetBufferFromPool just discards it.  Arguably not compliant with mission critical code requirements.

https://github.com/nasa/cFE/blob/e35c3da83a7b3adf20ac2d909cf4c36f4370632c/modules/sb/fsw/src/cfe_sb_buf.c#L105-L110

**Describe the solution you'd like**
Definitely not the only case where returns get discarded or ignored (see #549) but this one is a significant shortcoming.  Affects `CFE_SB_TransmitMsg` and `CFE_SB_AllocateMessageBuffer`.

**Describe alternatives you've considered**
Although apps need to check for a null return from CFE_SB_AllocateMessageBuffer either way, the error code is lost by that point.  Another good use case for #1469, since you wouldn't want to flood events or sys log but the failure type and count is very important for monitoring system health.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",,https://github.com/nasa/cFE/issues/2251
"Fix #2249, Align mismatched function prototype/implem. parameter name","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2249
  - Similar to https://github.com/nasa/cFE/pull/1551/files

All flight code function declarations now match the implementations (incl. parameter names).

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No change to behavior.
Code clarity and consistency improved.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2250
Mismatched function prototype/implementation parameter name,"**Describe the bug**
Mismatched parameter name (`TimeStamp`) between function prototypes and it's implementation.

Declaration:
https://github.com/nasa/cFE/blob/e35c3da83a7b3adf20ac2d909cf4c36f4370632c/modules/evs/fsw/src/cfe_evs_utils.h#L241-L242
Implementation:
https://github.com/nasa/cFE/blob/e35c3da83a7b3adf20ac2d909cf4c36f4370632c/modules/evs/fsw/src/cfe_evs_utils.c#L455-L456

**Expected behavior**
Prototype and implementation should match (for clarity and maintenance).

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2249
"Fix #1449, Factor out common code for bitmask check","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1449
  - Duplication reduced from 4 bitmask checks to 1 in the helper function.

Could also add another (almost identical) helper to factor out the bitmask check from `CFE_EVS_EnableAppEventTypeCmd()` and `CFE_EVS_DisableAppEventTypeCmd()`. They weren't included here as they use a different structure to hold the bitmask (they use `CFE_EVS_AppNameBitMaskCmd_Payload_t`)

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No change to behavior or return values.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2248
"Fix #1332, Resolve compiler warnings re. signedness comparisons","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Partially fixes #1332 - only flight code was amended. Warnings for test code still exist.
  - `MinSystemState` represents `CFE_ES_SystemState` values. Seems safe (and future-proof) to cast to a simple `int` given the possible range of these values.
  - `ElapsedTime` casted to `int64_t` instead of `int`/`int32` to guarantee no conceivable chance of overflow even with (very) large msec time values.
  - `BlockSize` used to represent the size of various structures - fine to cast to standard `int`.
  - `StringLength` type changed to `size_t` (more correct given it's usage, and avoids 2 signedness comparison warnings).
  - `RecordSize` represents number of bytes - maybe safest with `int64_t`.
  - `TblSizeInBytes` represents number of bytes (safest with `int64_t`)

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.
Tested locally with `-Wsign-compare` flag enabled - no warnings issued for cFE.

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2247
"Fix #1497, Use CFE_TIME_SysTime_t instead of indiv. sec/subsec members","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1497
  - Remaining individual (`uint32`) members representing seconds/sub-seconds for file creation time were converted to use the unified `CFE_TIME_SysTime_t` type in 7 locations.

**Testing performed**
All tests were passing before changes to `CFE_FS_Header_t` were added (see https://github.com/nasa/cFE/actions/runs/4585928750 and https://github.com/nasa/cFE/actions/runs/4585928751).
The functional test and CodeQL analyses are no longer able to build because elf2cfetbl references the old `uint32` members in `CFE_FS_Header_t` directly, so an additional PR for elf2cfetbl is required at the same time - see https://github.com/nasa/elf2cfetbl/pull/134.
Local tests with full cFS package confirm all tests passing when both changes are made together, and net coverage unaffected.
![Screenshot 2023-04-03 09 35 59](https://user-images.githubusercontent.com/9024662/229385111-a9214541-5e24-436a-a12d-3449528b1a44.png)
![Screenshot 2023-04-03 09 35 33](https://user-images.githubusercontent.com/9024662/229385118-b7c19a41-5ddc-423f-a045-bfda3922f0f7.png)

Note: If this is merged it will require updates to some of the txt files in the Ground System tool to ensure clean and correct interpretation of the data members.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS.

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2246
cFE Integration candidate: Caelum-rc4+dev39,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2244. Addresses Issue #2243

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/653/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2245/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",Equuleus-rc1,https://github.com/nasa/cFE/pull/2245
"Fix #2243, CFE_TBL_FILEDEF does not need static","
**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Remove the ""static"" qualification from the TBL file def objects, it is not needed, and works fine without any special sauce here.

**Testing performed**
Build and run all tests
Run CFE with apps and confirm tables load normally

**Expected behavior changes**
None

**System(s) tested on**
Debian

**Additional context**
Tables do not need to be declared static because they are just used with a table tool like `elf2cfetbl` - they are never linked with other table definition files by the C linker, so the `static` designation is not needed.  On the other hand, it may cause issues with alternative table creation methods because it hides the symbol from e.g. `dlsym()`.  Furthermore, it necessitates use of a compiler-specific extension flag to avoid a warning, which is against coding standards.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/cFE/pull/2244
"Remove ""static"" and ""OS_USED"" flags from table definitions","**Is your feature request related to a problem? Please describe.**
In the `CFE_TBL_FILEDEF` macro, there is no need to declare the variable as `static`, because there are no cases where multiple objects / translation units are directly linked together.  In the case of tables, the content is extracted to a separate runtime-loadable file, and transferred to the target separately.  They are not linked in by the C linker, which is where the `static` declaration becomes relevant.

By not declaring it as `static`, one also does not need to use the compiler extension flag `OS_USED` to squelch a warning, either.

**Describe the solution you'd like**
Remove `static` and `OS_USED` flags

**Additional context**
This makes it more compliant with coding standards that restrict use of compiler-specific extensions.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",Equuleus-rc1,https://github.com/nasa/cFE/issues/2243
"Leverage gcc -fsanitize= options, also a warning about implicit dynamic arrays","For testing (particularly CTF and coverage testing), I suggest we utilize some of the `-fsanitize=` options available to gcc (https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html), particularly `-fsanitize=shift`, `-fsanitize=bounds`, `-fsanitize=integer-divide-by-zero`, `-fsanitize=integer-divide-by-zero`, `-fsanitize=alignment`, `-fsanitize=bool`, `-fsanitize=enum`. But possibly others, like the float-related sanitization. Of course, these are gcc-specific capabilities and has performance implications.

Also, turns out, with C, if you specify a struct like:
```
typedef struct {
    int size;
    uint32_t array[16]; /* this cannot be bounds-checked by the -fsanitize-bounds option. */
} dummy;
```
Fundamentally, if you define a fixed-size array at the end of a struct, the bounds checking cannot be enforced because the compiler treats it as a dynamically-defined array. We should place placeholders after every instance of this in cFS code. For example: https://github.com/nasa/cFE/blob/6d96c6e856a654f7c96e66a87b003aa01ff96874/modules/core_api/fsw/inc/cfe_tbl_api_typedefs.h#L122

Thanks to this article and the article it references for bringing this to my attention.

 https://hackaday.com/2023/02/10/modernizing-c-arrays-for-greater-memory-safety/ )",,https://github.com/nasa/cFE/issues/2242
"Fix #1117, Rename unclear FileWrite EIDs","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1117 
  - Replaces misnamed/unclear FileWrite EIDs:
    - `CFE_SB_SND_RTG_EID` replaced with: `CFE_SB_FILE_WRITE_EID`
    - `CFE_SB_FILEWRITE_ERR_EID` replaced with: `CFE_SB_FILE_WRITE_ERR_EID` (minor change, purely for format consistency)
    - `CFE_SB_SND_RTG_ERR1_EID` replaced with: `CFE_SB_FILE_WRITE_CR_ERR_EID`

These EIDs are still overloaded. The aim to eventually make them unique is still open in issue https://github.com/nasa/cFE/issues/1588

Note: unrelated minor typo piggy-backed onto this PR (to to).

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No change to code behavior.
Future maintainability and ease-of-use improved due to clearer EID names.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2241
"Correct use of ""MemAddress"" and ""MemOffset""","**Is your feature request related to a problem? Please describe.**
The MemAddress and MemOffset types defined by ES are 32 bits by default, but are intended to be expandable to 64.  These should be used for CMD/TLM fields that need to hold a memory address on a 64-bit machine, or the size of an object in memory on such a machine.

However TBL services uses this type in some other locations, that generally do not need it.  Notably, this calls 32-bit byte swapping routines to read/write this field, and that will not work if the size becomes 64 bits.  

**Describe the solution you'd like**

- These fields in table services will need to remain 32 bits regardless of the CPU address size.
- Need to make sure that the correct macro - `CFE_ES_MEMOFFSET_C` or `CFE_ES_MEMADDRESS_C` is used when setting the value.  Notably, this macro can provide the correct read/write logic in case the MemAddress needs to be a struct with a high and low word, for example. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",Equuleus-rc1,https://github.com/nasa/cFE/issues/2240
"Fix #2238, Combine duplicate status check if blocks","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #2238
Duplicate (redundant) `if` blocks checking for `(status == CFE_SUCCESS)` in two functions in this file have been refactored and combined into the first `if` blocks.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No change to logic.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2239
Unnecessary duplicate 'if (status == CFE_SUCCESS)' check,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
`CFE_EVS_EnableAppEventTypeCmd()` and `CFE_EVS_DisableAppEventTypeCmd()` have a redundant repeat check of `if (Status == CFE_SUCCESS)`.
Can be refactored to combine them, without any change to the underlying logic.

**Expected behavior**
Refactor to remove (unnecessary) duplicate `if` block.

**Code snips**
https://github.com/nasa/cFE/blob/6d96c6e856a654f7c96e66a87b003aa01ff96874/modules/evs/fsw/src/cfe_evs_task.c#L981-L1019

Identical case for `CFE_EVS_DisableAppEventTypeCmd()`.

**Reporter Info**
Avi Weiss @thnkslprpt",draco-rc4,https://github.com/nasa/cFE/issues/2238
cFE Integration candidate: Caelum-rc4+dev36,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2236. Addresses Issue #2225

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/646/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2237/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@chillfig",draco-rc4,https://github.com/nasa/cFE/pull/2237
"Fix #2225, Adds workflow_dispatch to all workflows","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2225 

**Testing performed**
Testing performed on fork: https://github.com/chillfig/cFE/actions


**Expected behavior changes**
All cfe workflows executable using the latest nasa/cfs

**System(s) tested on**
Github UI

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, Vantage Systems
","CCB:Approved, continuous-integration, draco-rc4",https://github.com/nasa/cFE/pull/2236
"Fix #1985, Check return value of CFE_ES_PutPoolBuf","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1985 
  - Adds a WriteToSysLog for the single remaining CFE_ES_PutPoolBuf() call that didn't have a check/report of any kind.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
In case of error, the relevant details will be written to the log.

**Alternative considered**
Simpler version:
![Screenshot 2022-12-30 08 10 47](https://user-images.githubusercontent.com/9024662/210021273-b17f62f7-0a1b-40e6-977f-e99f2776e2e1.png)

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2235
"Fix #2233, Update data types in CFE msgs","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #2233, Changed data types of some fields in certain message packets

**Testing performed**
Unit Testing

**Expected behavior changes**
 no impact to behavior

**System(s) tested on**
 - OS: Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA
",CCB:Ignore,https://github.com/nasa/cFE/pull/2234
Data type changes,"**Describe the bug**
Data types of fields in some packets need to be updated to types in JSC database.

**Expected behavior**
Data types should follow the JSC database.

**Reporter Info**
Haven Carlson - NASA",,https://github.com/nasa/cFE/issues/2233
cFE Integration candidate: Caelum-rc4+dev33,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2231. Addresses Issue #2230
- PR #2229. Addresses Issue #2228 
- PR #2197. Addresses Issue #2174

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/634/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2232/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@dmknutsen
@jphickey
@thnkslprpt",draco-rc4,https://github.com/nasa/cFE/pull/2232
"Fix #2230, EDS Updates to match the current mainline","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
This includes all the updates to EDS XML files since the Bootes release where they were last synced.  This includes EDS files for modules that did not yet have one, and updating the other files to match the current message structures in Draco.

Fixes #2230

**Testing performed**
Generate artifacts from EDS and confirm the artifacts match the current C code definitions

**Expected behavior changes**
No impact to behavior, EDS files are just informational in this tree

**Additional context**
There are some remaining name mismatches due to [non]adherence to the naming conventions, might be a good chance to clean some of that up too.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2231
EDS files need update to match current main line,"**Describe the bug**
The EDS files are present in the `eds` directory of each module but only as a reference, they are not actively used in the build at this time.  

In the time since Bootes/Caelum they have drifted apart a bit, and no longer reflect exactly what is in the C code in the current mainline.

**To Reproduce**
N/A

**Expected behavior**
Provided EDS files should match exactly to the C code (at least as close as reasonably possible) such that derived files _could_ be generated from them that will match the CMD/TLM interfaces.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",draco-rc4,https://github.com/nasa/cFE/issues/2230
"Fix #2228, Update UTs to use correct cmd types","Fix #2228, Update UTs to use correct cmd types

**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
These are the unit test updates requested by @shion-ito-nasa, and are associated with #2228 
The requested change originated from #2220

**Testing performed**
Build and run all tests'

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 22.04 and 20.04 (workflows)

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA/Goddard
","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2229
Update unit tests to use correct command types,"**Is your feature request related to a problem? Please describe.**
Update the unit tests to use the associated applicable command types in place of CFE_MSG_CommandHeader_t.  This will allow for additional flexibility when modifying command definitions.

Note: This is the required unit test update(s) associated with #2220 

**Describe the solution you'd like**
Replace CFE_MSG_CommandHeader_t with the corresponding command type(s) where applicable.

**Requester Info**
Dan Knutsen
NASA Goddard
","unit-test, draco-rc4",https://github.com/nasa/cFE/issues/2228
cFE Integration candidate: Caelum-rc4+dev32,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2226. Addresses Issue #2220

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/630/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2227/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@dmknutsen",draco-rc4,https://github.com/nasa/cFE/pull/2227
"Fix #2220, Replace CFE_MSG_CommandHeader_t w/ CFE_TBL_NoArgsCmd_t","**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Replaces CFE_MSG_CommandHeader_t w/ CFE_TBL_NoArgsCmd_t & runs clang-format. [Fixes #2220 ]

**Testing performed**
Build and run all tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 22.04 and 20.04 (workflows)

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA Goddard 
","CCB:Ready, CCB:FastTrack, draco-rc4",https://github.com/nasa/cFE/pull/2226
"Add ""workflow_dispatch"" for any workflow that depends on an external action","**Is your feature request related to a problem? Please describe.**
Currently, the existing github workflows are only triggered by pull request and push events.  However, many of them use external workflows, mainly those defined in `nasa/cFS` bundle repo, and some 3rd party ones.

Problem is, when merging new code to the cFS bundle repo main branch, there is no way to re-run the cFE workflows against the updated main branch of cFS.  Clicking the ""Re-Run"" button on the previous run doesn't work; it runs with the same bundle commitID as the original did.  We need a way to run against the updated `main` branch of the cFS repo, even when the cFE repo may not have changed at all.  

Currently the only way to trigger this is to make a bogus push to a fork, which will trigger the actions to run and will use the latest version.

**Describe the solution you'd like**
Add ""workflow_dispatch"" as an option to workflows - especially for anything that references an external workflow or action in the `main` branch that can in turn be updated outside the merge cycle of the local repo.

**Additional context**
This provides a simpler, cleaner method to re-validate the cFE workflows are still functioning after a change to the cFS repo.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, draco-rc4",https://github.com/nasa/cFE/issues/2225
cFE Integration candidate: Caelum-rc4+dev31,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2215. Addresses Issue #2214
- PR #2219. Addresses Issue #2218
- PR #2217. Addresses Issue #2216
- PR #2222. Addresses Issue #2220

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/629/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2224/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@dmknutsen
@jphickey",draco-rc4,https://github.com/nasa/cFE/pull/2224
Out-of-date Doxygen @param names ,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
A couple of out-of-date (incorrect) Doxygen @param values.

**Code snips**
https://github.com/nasa/cFE/blob/fef4a0dacabf7e59f054c8aa2c9160a2f3d8db83/modules/core_private/ut-stubs/inc/ut_support.h#L245-L256
https://github.com/nasa/cFE/blob/fef4a0dacabf7e59f054c8aa2c9160a2f3d8db83/modules/core_private/ut-stubs/inc/ut_support.h#L534-L542

**Expected behavior**
Either update to the correct names/descriptions or delete these @param commands from the function comment.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2223
"Fix #2220, Combine MESSAGE and CMD ENTRY Macros","**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Combines the Message and Command Entry macros such that the MID, CC, type, handler function, and message type are all passed in parameters. [Fixes #2220 ]

**Testing performed**
Build and run all tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 22.04 and 20.04 (workflows)

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA Goddard 
","CCB:Ready, CCB:FastTrack, draco-rc4",https://github.com/nasa/cFE/pull/2222
"Fix #2003, Update event type constants in Dev Guide","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2003 

**Testing performed**
Just GitHub CI

**Expected behavior changes**
None

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2221
Add parameter for sizeof check in cfe_tbl_task,"Macro CFE_TBL_MESSAGE_ENTRY in cfe_tbl_task.c uses a static structure typedef for the sizeof check that is causing issues with a new feature.

Add new macro input parameter to have the structure type passed for sizeof check similar to macro CFE_TBL_COMMAND_ENTRY. Also change line 68 of cfe_tbl_task.c to have the macro input parameter to be CFE_TBL_NoArgsCmd_t as seen below:

CFE_TBL_MESSAGE_ENTRY(CFE_TBL_SEND_HK_MID, **CFE_TBL_NoArgsCmd_t**,  CFE_TBL_HousekeepingCmd)

Nicholas Dijkhoffz JSC/METECs
",draco-rc4,https://github.com/nasa/cFE/issues/2220
"Fix #2218, add -fno-common to arch build flags","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Add -fno-common to arch_build_custom_native.cmake so the CI workflows will all build with this option.  This is not the default in the version of gcc/binutils used in ubuntu 20.04 on which the workflows run.

Fixes nasa/cfe#2218

**Testing performed**
Build and run all tests

**Expected behavior changes**
Duplicate global symbol names will trigger errors, rather than being silently merged on some versions of the tools (consistent behavior).

**System(s) tested on**
Ubuntu 22.04 and 20.04  (workflows)

**Additional context**
no-common is the default in newer versions of the tools, but was not the default in the versions used in 20.04.  The CFE/CFS builds should not require/rely on the use of a common section.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Ready, CCB:FastTrack, draco-rc4",https://github.com/nasa/cFE/pull/2219
Use `-fno-common` in CI workflow builds,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Some versions of the GNU toolchains enable `-fcommon` by default, so globals end up in a ""common"" section rather than the normal ""bss"" section.  The CFS apps should not rely on common sections, as it can mask duplicate symbols and cause strange results if not expected.  In particular, this feature hid linking errors in nasa/lc#51.

**Describe the solution you'd like**
Add `-fno-common` to the default `arch_build_custom_native.cmake` file so this feature is consistently _not_ enabled rather than assuming the default for whatever version of gcc/binutils is being used at the time.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",draco-rc4,https://github.com/nasa/cFE/issues/2218
"Fix #2216, update github action versions","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Use v3 instead of v2 for checkout, cache, and upload-artifacts, which resolves a warning about node.js 12 deprecation.

Fixes #2216

**Testing performed**
Run all github actions

**Expected behavior changes**
Deprecation warnings removed

**System(s) tested on**
Github hosted runner

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2217
Update workflows to use newer action versions,"**Describe the bug**
Calls to the checkout and upload-artifacts actions in the workflow files refer to deprecated version 2.  This should be updated to v3, which resolves a warning about deprecated node.js versions.

**To Reproduce**
See any workflow log, e.g. https://github.com/nasa/cFE/actions/runs/3535663605, in the ""Annotations"" section.

**Expected behavior**
Should be clean.

**System observed on:**
Github hosted runner

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",draco-rc4,https://github.com/nasa/cFE/issues/2216
"Fix #2214, add abstract documentation dependency target","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds a top level target called ""doc-prebuild"" which in turn can be made to depend on any other files that need to exist before documentation can be built.

Fixes #2214

**Testing performed**
Build documentation

**Expected behavior changes**
Abstract dependency target now provided

**System(s) tested on**
Ubuntu 22.04

**Additional context**
needs to be merged with nasa/osal#1341 to work correctly.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, dependency, draco-rc4",https://github.com/nasa/cFE/pull/2215
Add abstract target for documentation dependencies,"**Is your feature request related to a problem? Please describe.**
Both the CFE documentation as well as the CFS app documentation builds require certain generated files to exist before they can run.  Currently the CFE itself solved this with a direct dependency on `osal_public_api_headerlist` but this is not ideal, because it is referring to a very specific OSAL target, which is based on the way OSAL documentation is currently implemented, but may not be so in the future.

Furthermore, the CFS app doc workflows do not have this, and thus the workflow fails.

**Describe the solution you'd like**
Add an abstract target for documentation, correlating to the existing `mission-prebuild` for source files, such as `doc-prebuild`.  This can in turn depend on the specific targets that are needed to be created in order to build documentation.  This allows all submodules to also add dependencies onto this target, in case they have an artifact that needs to be generated prior to building documentation.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, draco-rc4",https://github.com/nasa/cFE/issues/2214
cFE Integration candidate: Caelum-rc4+dev30,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2209. Addresses Issue #2208
- PR #2206. Addresses Issue #2205
- PR #2204. Addresses Issue #2120
- PR #2203. Addresses Issue #633

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/620/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2213/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper
@jphickey",draco-rc4,https://github.com/nasa/cFE/pull/2213
"Fix #1428, Refactor error handling for EVS_GetApplicationInfo()","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1428
  - Refactors (10 cases of) identical handling of error returns from `EVS_GetApplicationInfo()` into a single helper function.

The function prototype isn't strictly required, given the placement of the function definition, but is probably worth having to improve clarity and ease future maintenance.

Can also be implemented as an if/else if/else block (see below). No strong preference but I've left it as a switch for now.
![Screenshot 2022-11-16 14 29 58](https://user-images.githubusercontent.com/9024662/202117714-8b1dab94-dbcf-4b98-b8fe-b313da077567.png)

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.
Tested locally as well and confirmed coverage of all new/amended lines of code via LCOV report.

**Expected behavior changes**
No impact on behavior. The same events will occur in the same circumstances.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
Current main branch cFS bundle.
cFE v7.0.0-rc4+dev205

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2212
"Fix #2210, Move variables declared mid-function to the top","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2210
  - A couple of stray variables that were declared mid-function were moved to the top of their respective functions.

**Testing performed**
GitHub CI actions all passing successfully.

**Expected behavior changes**
All variables declared top of function as per cFS conventions/guidelines.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2211
Variables declared mid-function,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
A couple stray cases of variables declared mid-function left here.
Copy of https://github.com/nasa/CF/issues/109

**Expected behavior**
All variables should be declared at the top of the function.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2210
"Fix #2208, Update CI to use Ubuntu 20.04","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2208 

**Testing performed**
CI

**Expected behavior changes**
Just updates CI ubuntu version

**System(s) tested on**
CI

**Additional context**
Required for:
- #2206

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2209
Update CI to use Ubuntu 20.04,"**Is your feature request related to a problem? Please describe.**
Ubuntu 18.04 EOL is approaching
cFS was already updated in nasa/cfs#559, cFE should match

**Describe the solution you'd like**
Update to use Ubuntu 20.04 in CI

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","continuous-integration, draco-rc4",https://github.com/nasa/cFE/issues/2208
cFE Integration candidate: Caelum-rc4+dev28,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2197. Addresses Issue #2196

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/613/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2207/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",draco-rc4,https://github.com/nasa/cFE/pull/2207
"Fix #2205, Enforce strict cast alignment on arch","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2205 

**Testing performed**
CI

**Expected behavior changes**
None, just enforces strict alignment and currently compliant

**System(s) tested on**
CI

**Additional context**
Note this strict option isn't supported by clang so would need to be removed along with `-Wno-format-truncation` and `-Wno-stringop-truncation`

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, dependency, draco-rc4",https://github.com/nasa/cFE/pull/2206
Enforce strict cast alignment,"**Is your feature request related to a problem? Please describe.**
Now that CI is upgraded to Ubuntu20, would be good to enforce strict cast alignment

**Describe the solution you'd like**
Update the cast-align line to read:
`-Wcast-align=strict` in https://github.com/nasa/cFE/blob/main/cmake/sample_defs/arch_build_custom.cmake

**Describe alternatives you've considered**
None

**Additional context**
Note it's fully compliant w/ this flag right now based on fixes done during Draco, but should enforce to avoid future issues.

**Requester Info**
Jacob Hageman - NASA/GSFC","build-system, draco-rc4",https://github.com/nasa/cFE/issues/2205
"Fix #2120, Support clang for whole archive flags","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2120 
- Adds a toolchain file for clang to make testing simple

**Testing performed**
W/ Clang 10 installed, performed the following changes in sample_defs:
- Removed unsupported flags
- Compiled permissive to confirm it worked w/ standard user privilages
- Explicitly set cpu1 to use the clang toolchain

```
diff sample_defs/arch_build_custom.cmake cfe/cmake/sample_defs/arch_build_custom.cmake
36a37,38
>     -Wno-format-truncation      # Inhibit printf-style format truncation warnings
>     -Wno-stringop-truncation    # Inhibit string operation truncation warnings
diff sample_defs/default_osconfig.cmake cfe/cmake/sample_defs/default_osconfig.cmake
36d35
< set(OSAL_CONFIG_DEBUG_PERMISSIVE_MODE TRUE)
diff sample_defs/targets.cmake cfe/cmake/sample_defs/targets.cmake
107d106
< SET(cpu1_SYSTEM i686-linux-clang)
```

**Expected behavior changes**
Properly sets the whole archive flags for clang, warns if compiler is unmatched

**System(s) tested on**
CI shows no impact to base system
Steps above to prove Clang works

**Additional context**
Could add to CI if someone wanted to maintain support, might be overcome if there's a target added to CI that uses clang.
Clang build does depend on nasa/sample_lib#92 being merged, but doesn't impact current CI

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2204
"Fix #633, Explicit toolchain in sample target.cmake","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #633
- Removes old cpu<x> toolchains in prep for removing the ""hack"" mentioned in https://github.com/nasa/cFE/pull/630#issuecomment-617276365
- Removes obsolete BSPNAME refs, and unnecessary (and incorrect) refs to BSPTYPE pc-linux which is now generic-linux and gets set from psp config based on the PSP pc-linux

**Testing performed**
CI, also built locally via `make install`

**Expected behavior changes**
None.

**System(s) tested on**
CI

**Additional context**
#2202 as followon

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2203
Remove toolchain cpu<x> hack,"**Is your feature request related to a problem? Please describe.**
See https://github.com/nasa/cFE/pull/630#issuecomment-617276365, cpu toolchain naming hack.

**Describe the solution you'd like**
Remove the cpu toolchain naming hack, explicitly require a toolchain.  Update related documentation, for example in target.cmake _SYSTEM description.

**Describe alternatives you've considered**
None

**Additional context**
#630, #633

**Requester Info**
Jacob Hageman - NASA/GSFC",build-system,https://github.com/nasa/cFE/issues/2202
"Fix #1458, Factor out construction of FullName to reduce code duplication","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1458
  - Construction of `FullName` (using `CFE_SB_GetAppTskName()`) has been moved out of the `switch` statements, so as to only be included once in each function, instead of 2-6 times. This reduces code duplication.

**Testing performed**
GitHub CI actions (incl. Build + Run, Functional Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2201
Consider bumping up the stack size in the sample startup script,"**Is your feature request related to a problem? Please describe.**
The startup script in the ""out of the box"" sample uses a stack size of 16k for all apps, e.g.:

https://github.com/nasa/cFE/blob/7a220ae809555cad86fb98d823ec77528a2fb125/cmake/sample_defs/cpu1_cfe_es_startup.scr#L3

I was recently debugging a segmentation fault issue on one of my app builds, and I finally thought to check the stack usage after realizing the backtrace had quite a few entries in it.    After checking the stack usage, it turns out all the framework sample/lab apps are using about 14-15kB (that is, more than 80% of the allocated size).

So while it does not appear to be an issue in the default build, this leaves very little margin for additional development work before the stack will be exceeded, and its **not** obvious that the stack has exceeded once it does get too big.

**Describe the solution you'd like**
Increase the sample script at least to 32k, or preferably 64k, on ""sample_app"" to have some additional room for development, because this is often used as a ""sandbox"" to test new ideas and concepts.  

**Describe alternatives you've considered**
At least document that the stack size is right at its margin (at least on on 64-bit Linux).

**Additional context**
Credits to an simple and effective tool to gauge stack usage here: https://github.com/d99kris/stackusage ... this worked like a charm to measure how much stack usage all the CFE tasks were using.

In the future it might be nice to have features like that built into OSAL.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/issues/2200
"Fix #1502, Correct type of ActiveTableFlag variable","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1502
  - `ActiveTableFlag` has been converted from `uint16` to what it was intended to be typed as, namely a `CFE_TBL_BufferSelect_Enum_t` type (which is actually just a `typedef`'d alias for `uint16` anyway).

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
Avi @thnkslprpt",,https://github.com/nasa/cFE/pull/2199
"Fix #1461, Move data lock to inside of if block","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1461
  - Data lock moved inside the `if` block (lock is not needed if the `if` block condition doesn't evaluate to `true`).

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
Data lock will not occur in the (unexpected) case of an error return from `CFE_SB_ZeroCopyBufferValidate()`, which is fine as no data would be accessed/amended in that case anyway.

**Contributor Info**
Avi @thnkslprpt",,https://github.com/nasa/cFE/pull/2198
"Fix #2196, resolve static analysis errors in tbl_UT.c","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Resolves two uninitialized variable errors reported in the workflow.

Fixes #2196

**Testing performed**
Build and run all tests
Run workflow

**Expected behavior changes**
Passes static analysis, no behavior change.

**System(s) tested on**
Updated Github workflow (with nasa/cFS#607)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2197
Cppcheck errors reported using latest workflow update,"**Describe the bug**
The latest version of Ubuntu (with cppcheck v2.7) is reporting the following errors in the cFE repo:

| severity | file | line | issue |
| --- | --- | --- | --- |
| error | /home/runner/work/cFS/cFS/source/cfe/modules/tbl/ut-coverage/tbl_UT.c | 2411 | Uninitialized variable: File.TblHeader |
| error | /home/runner/work/cFS/cFS/source/cfe/modules/tbl/ut-coverage/tbl_UT.c | 3067 | Uninitialized variable: File.TblHeader |

**To Reproduce**
Run latest version of static analysis workflow (depends on nasa/cFS#607)

**Expected behavior**
Should run cleanly

**System observed on:**
Ubuntu 22.04, with cppcheck v2.7

**Additional context**
[Summary from workflow run](https://github.com/nasa/cFS/actions/runs/3381576881/attempts/1#summary-9260966589)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, draco-rc4",https://github.com/nasa/cFE/issues/2196
"Fix #1545, Refactor CFE_TIME_CalculateUTC to utilize CFE_TIME_CalculateTAI","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1545
  - Removes (a small amount) of duplicate logic in `CFE_TIME_CalculateUTC()` by utilizing `CFE_TIME_CalculateTAI()`.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
Avi @thnkslprpt",,https://github.com/nasa/cFE/pull/2195
Disk percentage reserved for decompressing apps,"**Is your feature request related to a problem? Please describe.**
ES will reformat the volatile drive if the empty space is less than a configured percentage to support decompression of apps.  Decompression of apps prior to load isn't implemented.

Config option and documentation:
https://github.com/nasa/cFE/blob/7a220ae809555cad86fb98d823ec77528a2fb125/cmake/sample_defs/cpu1_platform_cfg.h#L659-L680

Start of reformat logic:
https://github.com/nasa/cFE/blob/7a220ae809555cad86fb98d823ec77528a2fb125/modules/es/fsw/src/cfe_es_start.c#L568-L575

**Describe the solution you'd like**
I'm not sure this option makes sense anymore, or at minimum it's an incomplete implementation.  Either complete the implementation, remove the option, or update the documentation (shouldn't claim it does something it doesn't).

**Describe alternatives you've considered**
See above

**Additional context**
The label really depends on the solution picked.  Might be just documentation, could be enhancement.

**Requester Info**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/issues/2194
Remove CFE_ES_FormCDSName and merge it's functionality into CFE_ES_RegisterCDS,"_I think this particular function (CFE_ES_FormCDSName) is a broken API, and should be removed (its not public).  It is called in just one place - from CFE_ES_RegisterCDS() - and that can just do an `snprintf` directly.  It actually needs to know the app name anyway for an event later on, so this would also avoid getting it twice.  A win-win._

_Originally posted by @jphickey in https://github.com/nasa/cFE/pull/2173#discussion_r1005686530_
      ",,https://github.com/nasa/cFE/issues/2193
"Fix #2174, Move CRC types and convert to enum","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #2174 
The macro definitions of the CRC types (8, 16, and 32-bit CRC polynomials) have been moved to `cfe_es_api_typedefs.h` and turned into a typedef'd `enum`.
The previous `#define`'s have been left in with deprecation directives added around them, due to dependencies of the FM app.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
Essentially no change to logic.

Note - Two new issues will need to be opened if/when this is merged:
FM: directly references the types that have been changed here.
CS: refers to (in comments only) `CFE_MISSION_ES_CRC_16`

**Contributor Info**
Avi Weiss @thnkslprpt","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2192
"Fix #1541, Combine consecutive mutually exclusive #ifs","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #1541
Combines 2 (identical) cases of immediately consecutive, mutually exclusive `#if`/`#endif` blocks into a single  `#if`/`#else`/`#endif`.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on behavior - logical flow is essentially unchanged.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2191
"Fix #1471, Rename confusing SB ENBL/DSBL Route Commands","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1471
  - EID Enable/Disable Route commands have been improved to add information and better differentiate between similar EIDs.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on behavior (no logic changes).
Better-differentiated EID names will improve code clarity.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2190
"Fix #1456, Rename CFE_SB_RemovePipeCallback_t to ...backArgs_t","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1456
  - Renames `CFE_SB_RemovePipeCallback_t` to `CFE_SB_RemovePipeCallbackArgs_t`, which better matches what the struct represents.
    - Only used locally in 2 functions.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2189
"Fix #1518, Rename misnomer function name CFE_TBL_NotifyTblUsersOfUpdate()","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1518
  - Misnamed function `CFE_TBLNotifyTblUsersOfUpdate()` was renamed to `CFE_TBL_MarkTblAsUpdated()`, which better reflects what it does.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2188
cFE Integration candidate: Caelum-rc4+dev27,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2184. Addresses Issue #2183

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/606/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2187/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",draco-rc4,https://github.com/nasa/cFE/pull/2187
"Fix #1411, Make EVS_PktPtr parameter in EVS_AddLog() const","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1411
  - Changes `EVS_PktPtr` parameter in `EVS_AddLog()` to `const`.
    - Parameter is not modified, so should be `const` to better show intent and improve type safety.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2186
"Fix #1450, Remove duplicate status check","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1450
  - Removes duplicate (unnecessary) status check (for `Status == CFE_SUCCESS`) and moves event report (`EVS_SendEvent(CFE_EVS_ENAAPPEVTTYPE_EID...`) to earlier in function.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on behavior.
Logic does not change as the event is still sent in first `if (Status == CFE_SUCCESS)`.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2185
"Fix #2183, use osal_public_api header targets in doc","
**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Ensure that `osal_public_api_headerlist` is a dependency of all the doc builds.  Also adds the OSAL top level directory to the mission build which will define the `osal_public_api` target, and thus not require the path to be repeated.

Fixes #2183

**Testing performed**
Build documentation from clean build area

**Expected behavior changes**
Order of operations with doc targets does not matter anymore, as the file gets generated correctly no matter which target is built first.

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, CCB:FastTrack, draco-rc4",https://github.com/nasa/cFE/pull/2184
Missing dependency on osal_public_api targets for OSAL headers,"**Describe the bug**
In the CFE mission documentation build, this references the osal public API headers.  Since nasa/osal#1291 was merged there is now an `osal_public_api` target which exposes the location of the headers via its `INTERFACE_INCLUDE_DIRECTORIES` property, as well as a doxygen-specific target called `osal_public_api_headerlist` that generates a list of INPUT files that can be included for doxygen.

However, there is a missing dependency in the CFE docs build, as the `mission-doc` and `cfe-usersguide` targets reference this file, but there is not a dependency in CMake to ensure that the file gets generated before the doxygen tool runs.

As a result, if the `osal-apiguide` is built first, then the CFE targets will build OK, but if the CFE targets are built first, one gets an error about a missing `osal-public-api.doxyfile`.

**To Reproduce**
Start with a clean build area
Run only `make prep` followed by `make doc`
Get error:
```
error: @INCLUDE = /home/joe/code/cfecfs/github-cfs-bundle/build/docs/osal-public-api.doxyfile: not found!
Exiting...
```

Then run `make osalguide` followed by `make doc` again.  Now it builds fine.

**Expected behavior**
Dependency should be in place so the doc build will succeed regardless of the order.

**Code snips**
If applicable, add references to the software.

**System observed on:**
Ubuntu

**Additional context**
The CFE docs build was also repeating the location of the OSAL include files here:
https://github.com/nasa/cFE/blob/be88a07313ff3b579c8abaef4b4a9085e74aabdf/cmake/mission_build.cmake#L325-L328

The `osal_public_api` target properties should be the preferred source of this info, the path should not be specified outside of the OSAL build script as it can change in the future.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",draco-rc4,https://github.com/nasa/cFE/issues/2183
"Fix #1472, Replace while loop with single memset","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1472
  - Removes unnecessary while loop in `CFE_SB_SendStatsCmd()` and sets entire block of memory pointed to by `PipeStatPtr` to `0` in a single memset (sized by remaining value of `PipeStatCount`).

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
Achieves same result without going through the loop.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2182
"Fix #1539, Remove empty if/endif block","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1539
  - Two empty `#if`/`#endif` blocks were removed.

**Testing performed**
Just GitHub CI

**Expected behavior changes**
No impact on behavior (code logic not changed).

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2181
"Fix #1517, Reformat do/while loop to while (style change only)","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1517
  - Reformats the `do...while` loop in `CFE_TBL_FindTableInRegistry()` into a `while` loop, which is the same structure used in the neighboring functions.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on behavior - code logic essentially unchanged.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2180
"Fix #1506, Align Table Name reporting in CFE_TBL_Register()","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1506
  - Updates/standardizes use of `TblName` in syslog reports in `CFE_TBL_Register()`.

**Testing performed**
Only GitHub actions.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2179
"Fix #1510, Add reports for unreported errors in CFE_TBL_EarlyInit()","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1510
  - Adds reports to syslog for unreported errors in `CFE_TBL_EarlyInit()`

**Testing performed**
Just GitHub CI actions so far.

**Expected behavior changes**
No impact on behavior.
These missing error reports will now be reported to the syslog (if they occur).

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2178
"Fix #2004, Update deprecated binary filter constant in Dev Guide","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2004 
  - Updates the Development Guide to refer to `CFE_EVS_EventFilter_BINARY` rather than the deprecated `CFE_EVS_BINARY_FILTER`.

**Expected behavior changes**
No impact on behavior (doc changes only).

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2177
"Fix #2175, Apply consistent Event ID names to common events","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2175
  - Consistent event IDs have been applied to the inconsistent cases to align them with a common Event ID naming convention.

**Testing performed**
Only GitHub CI actions.

**Expected behavior changes**
No impact on code behavior (no logic changes).
Consistent Event ID names for the events which are common to all/most cFS components and apps will improve consistency and ease make code review/debugging easier.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2176
Inconsistent Event ID naming,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
After finding that there were 9 different Event IDs to indicate the same thing (Invalid Message ID) in https://github.com/nasa/CF/issues/262, I scrubbed the other common commands (e.g. Task Initialisation [INIT], NOOP, Reset Counters etc.) and found the same issue there - almost every component/app had their own variation of the Event ID name for the exact same event.

**Expected behavior**
Apply consistent Event ID names to the events which are common to all/most components and apps.

**Code snips**
Invalid Message ID:
`CFE_EVS_ERR_MSGID_EID`
`CFE_SB_BAD_MSGID_EID`
`CFE_TIME_ID_ERR_EID`
`CS_MID_ERR_EID`
`TO_LAB_MSGID_ERR_EID`
`SAMPLE_APP_INVALID_MSGID_ERR_EID`
`BP_INVALID_MID_ERR_EID`
`SCH_MD_ERR_EID`
`CI_LAB_COMMAND_ERR_EID`

Initialization:
`CFE_TIME_INIT_EID`
`CFE_TBL_INIT_INF_EID`
`CFE_EVS_STARTUP_EID`
`CF_EID_INF_INIT`
`BP_INIT_APP_INFO_EID`
`SCH_INITSTATS_INF_EID`
`CI_LAB_STARTUP_INF_EID`

NOOP:
`CFE_TIME_NOOP_EID`
`CFE_TBL_NOOP_INF_EID`
`CFE_SB_CMD0_RCVD_EID`
`CF_EID_INF_CMD_NOOP`
`FM_NOOP_CMD_EID`
`CI_LAB_COMMANDNOP_INF_EID`

Reset Counters:
`CFE_TIME_RESET_EID`
`CFE_TBL_RESET_INF_EID`
`CFE_EVS_RSTCNT_EID`
`CFE_SB_CMD1_RCVD_EID`
`CF_EID_INF_CMD_RESET`
`SC_RESET_DEB_EID`
`HS_RESET_DBG_EID`
`FM_RESET_CMD_EID`
`HK_RESET_CNTRS_CMD_EID`
`MD_RESET_CNTRS_DBG_EID`
`CI_LAB_COMMANDRST_INF_EID`

etc.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/issues/2175
ES CRC type enumerations do not belong in cfe_mission_cfg.h,"**Is your feature request related to a problem? Please describe.**
The mission config header file contains the following definitions:

https://github.com/nasa/cFE/blob/be88a07313ff3b579c8abaef4b4a9085e74aabdf/cmake/sample_defs/sample_mission_cfg.h#L261-L268

These enumeration values are really part of the API to the `CFE_ES_CalculateCRC()` function, as they define the values for the 4th parameter.   

They do not belong in ""mission_cfg.h"" because are not values that appear in any telemetry, nor in any command, nor would they need to be configured differently as there is no chance of conflict with anything else.

**Describe the solution you'd like**
Make a proper enumeration type in the in the `cfe_es_api_typedefs.h` file, and use this for the 4th parameter of the `CFE_ES_CalculateCRC()` function.

**Additional context**
The ""DEFAULT"" value is the only thing that (theoretically) does belong here:

https://github.com/nasa/cFE/blob/be88a07313ff3b579c8abaef4b4a9085e74aabdf/cmake/sample_defs/sample_mission_cfg.h#L281

However, this is just a placeholder anyway because only the CRC16 algorithm was ever implemented.  Unless the user also has a patched version of ES, no user can set this to anything other than CRC16 or else the system will not function correctly.  Because this is somewhat of a ""dead"" option, and a case could be made to remove it entirely.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",draco-rc4,https://github.com/nasa/cFE/issues/2174
"Fix #2172, Remove last few uses of sprintf()","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2172 
  - Use of sprintf() swapped for snprintf() removing a source of potential buffer overruns.

2 other cases already have their own issues open with further changes being considered, and have not been updated with this PR at this stage (https://github.com/nasa/cFE/issues/1465 and https://github.com/nasa/cFE/issues/1511).


**Testing performed**
Standard cFS build tests (covered the fsw change but not test code change).

**Expected behavior changes**
No impact on behavior expected.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
cFE v7.0.0-rc4+dev193

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/cFE/pull/2173
Remove remaining stray uses of sprintf(),"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
A few stray uses of sprintf() remain in cFE (mostly in the test code, but not entirely).
The simple cases will be converted to snprintf() to enforce a maximum size for the buffer being written into.
A couple of cases have their own issues open already with further changes being considered, so I will probably leave those to be addressed there (https://github.com/nasa/cFE/issues/1465 and https://github.com/nasa/cFE/issues/1511)

**Expected behavior**
No use of sprintf() in the code base (including test code).

**Code snips**
https://github.com/nasa/cFE/blob/be88a07313ff3b579c8abaef4b4a9085e74aabdf/modules/es/fsw/src/cfe_es_cds.c#L662
https://github.com/nasa/cFE/blob/be88a07313ff3b579c8abaef4b4a9085e74aabdf/modules/cfe_testcase/src/tbl_content_access_test.c#L121

**Reporter Info**
Avi Weiss @thnkslprpt  
  
Previous discussion opening this issue:
_I concur that `snprintf` has some caveats/dangers - particularly with respect to the return code and handling that properly - whereas `sprintf()` is a buffer overflow exploit in almost all use-cases, and should rightfully be banned._
_Originally posted by @jphickey in https://github.com/nasa/cFE/issues/824#issuecomment-677851081_
      
_There are still a few stray uses of sprintf() across cFS. Should these be removed?_",,https://github.com/nasa/cFE/issues/2172
cFE Integration candidate: Caelum-rc4+dev26,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #2165. Addresses Issue #2164

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/597/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2171/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@ArielSAdamsNASA",draco-rc4,https://github.com/nasa/cFE/pull/2171
"Fix #2169, Update CI_LAB entry point in cfe_es_startup.scr","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2169 
  - Updates CI_LAB entry point in cfe_es_startup.scr

Part of changes to the [ci-lab app](https://github.com/nasa/ci_lab/pull/126) and [GroundSystem](https://github.com/nasa/cFS-GroundSystem/pull/230)
Aim is to standardize naming of CI_LAB functions to match the predominant cFS style.

**Testing performed**
Only the GitHub CI workflow actions.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
Avi Weiss @thnkslprpt ",,https://github.com/nasa/cFE/pull/2170
Update CI_LAB entry point in cfe_es_startup.scr,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
CI_LAB issue https://github.com/nasa/ci_lab/issues/125 is addressed in pull request https://github.com/nasa/ci_lab/pull/126
This issue is opened in order to address the corresponding change required to cfe_es_startup.scr

**Reporter Info**
@thnkslprpt ",,https://github.com/nasa/cFE/issues/2169
"Fix #2167, Update SCH_LAB entry point in cfe_es_startup.scr","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2167
  - Updates SCH_LAB entry point in cfe_es_startup.scr

Part of changes to the [sch-lab app](https://github.com/nasa/sch_lab/pull/129)
Aim is to standardize naming of SCH_LAB functions/macros to match predominant cFS style.

**Testing performed**
Only the GitHub CI workflow actions.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
Avi Weiss @thnkslprpt ",,https://github.com/nasa/cFE/pull/2168
Update SCH_LAB entry point in cfe_es_startup.scr,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
SCH_LAB issue https://github.com/nasa/sch_lab/issues/128 is addressed in pull request https://github.com/nasa/sch_lab/pull/129
This issue is opened in order to address the corresponding change required to cfe_es_startup.scr

**Reporter Info**
@thnkslprpt ",,https://github.com/nasa/cFE/issues/2167
cFE Integration Candidate: Caelum-rc4+dev25,"**Describe the contribution**

PR #2163
- Fixes issue #2162 - Remove redundant/inconsistent comments (/* end of function */, /* end if */ etc.) and clean up empty lines.

PR #2158
- Fixes issue #2157 - Update TO_LAB entry point in cfe_es_startup.scr

PR #2159
- Fixes issue #782 - Create CHANGELOG.md

**Testing performed**

cFE checks <https://github.com/nasa/cFE/pull/2166/checks>
cFS Bundle checks <https://github.com/nasa/cFS/pull/590/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
@thnkslprpt",draco-rc4,https://github.com/nasa/cFE/pull/2166
"Fix #2164, Remove Changelog in Doxygen Config","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [ ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #2164 

**Testing performed**
None

**Expected behavior changes**
cFS workflow will not throw error for PSP changelog

**Additional context**
Related to https://github.com/nasa/cFS/pull/589
Went ahead and moved the code to exclude repo documentation from mission-doc.doxyfile.in to cfe-common. This allows it to be excluded from all the doxygen processing (all repos).

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, MCSG Tech
","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2165
Remove Changelog from cFS Documentation Action,"**Is your feature request related to a problem? Please describe.**
Related to https://github.com/nasa/cFS/pull/589
The cFS Documentation and Guides workflow is failing due to an error in PSP's changelog.

**Describe the solution you'd like**
Remove the changelog

**Describe alternatives you've considered**
Keep as is. 

**Requester Info**
Ariel Adams, MCSG Tech
","docs, draco-rc4",https://github.com/nasa/cFE/issues/2164
"Fix #2162, Remove redundant/inconsistent comments (/* end of function */, /* end if */ etc.) and clean up empty lines.","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #2162
Removes redundant and inconsistent comments (incl. `/* end of function */`, `/* end if */`, function name in function header comments).
There were also a few cases of unnecessary empty lines (e.g. on the last line before the closing brace of a function) and also missing empty lines (e.g. between functions) which were corrected. Some of these empty lines trigger the CI format checks.
I've left the commits separated for now to make life easier for whoever reviews this. I can squash them if/when this is ready for merge.

**Testing performed**
None (comment and whitespace changes only).

**Expected behavior changes**
No impact on behavior.
These updates will reduce clutter and inconsistency in the code, improving readability.

**Contributor Info**
@thnkslprpt ","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2163
"Redundant comments (/* end of function */, /* end if */ etc.) and clean up empty lines.","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Copy of https://github.com/nasa/to_lab/issues/68 and https://github.com/nasa/sample_app/issues/111, and also related to and partly overlapping with https://github.com/nasa/cFE/issues/275
There are quite a few redundant comments in the code, such as:
- `/* end of function */`-type comments
- `/* end if */`-type comments
- function header comments which include the function name

Another minor issue has to do with empty lines:
a) _unnecessary_ empty lines (e.g. first line after the opening brace of a function/struct, or the last line before the closing brace - the latter apparently sometimes triggers the CI format checks).
b) _missing_ empty lines between functions (i.e. closing brace of last function, then next function beginning on the immediately next line without an empty line in between)

The unnecessary empty lines (at the beginning or end of a function, for example) represent a low single-digit percentage of the cases (the vast majority of functions/structs do not have these extra empty lines), so there is an argument to remove them purely for consistency, not just due to them being redundant and triggering the CI format checks.

**Expected behavior**
Remove redundant comments to reduce clutter and inconsistency in the code, and improve readability.

**Reporter Info**
@thnkslprpt ",draco-rc4,https://github.com/nasa/cFE/issues/2162
cFE Integration Candidate: Caelum-rc4+dev23,"**Describe the contribution**
PR #2145
- Fixes issue #2144- Propagate CMAKE_EXPORT_COMPILE_COMMANDS variable

PR #2148
- Fix #2147, Remove CodeQL Paths Ignore #2148

PR #2151
- Fix #1460, Duplicated Logic in CFE_SB_BroadcastBufferToRoute

PR #2156
- Fix #1540, Remove 'return;' from last line of void functions.

PR #2154
- Fix #2153, Remove unnecessary parentheses around return values.

**Testing performed**

cFE checks <https://github.com/nasa/cFE/pull/2161/checks>
cFS Bundle checks <https://github.com/nasa/cFS/pull/586/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
@aliounis
@thnkslprpt
@ArielSAdamsNASA",draco-rc4,https://github.com/nasa/cFE/pull/2161
Recursion and side effects in boolean expressions,"**Describe the bug**
Side effect in a Boolean expression and use of recursion in several cFE files. 
Avoiding recursion allows tools and people to better analyze the program.
This ticket is for side effects in boolean expressions that also fixes recursion issues.

**Expected behavior**
Same behavior

**Code snips**
One example:
https://github.com/nasa/cFE/blob/9f42688b2bf92e18c6faf9e7ce1f9a4f2ea08316/modules/evs/fsw/src/cfe_evs.c#L199-L199

**Additional context**
Caught by CodeQL. Can either dismiss as won't fix, false positive, or used in tests (some are test files) or fix these alerts. 

**Reporter Info**
Ariel Adams, MCSG Tech
",enhancement,https://github.com/nasa/cFE/issues/2160
"Fix #782, Create CHANGELOG.md","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #782
Note: related to https://github.com/nasa/cFE/issues/1581
Note: if https://github.com/nasa/cFE/issues/2149 is implemented, it can be done directly on a single CHANGELOG.md file now, rather than inserting part way down into a README.md file.

**Testing performed**
None.

**Expected behavior changes**
Minimizes unnecessary clutter in README.md

**Contributor Info**
@thnkslprpt ","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2159
"Fix #2157, Update TO_LAB entry point in cfe_es_startup.scr","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #2157
Updates TO_LAB entry point in cfe_es_startup.scr
Part of changes to the [to-lab app](https://github.com/nasa/to_lab/pull/126) and [GroundSystem](https://github.com/nasa/cFS-GroundSystem/pull/224)
Aim is to standardize naming of TO_LAB functions/macros to match predominant cFS style.

**Testing performed**
None so far.

**Expected behavior changes**
No impact on behavior.

**System(s) tested on**
n/a

**Contributor Info**
@thnkslprpt ","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2158
Update TO_LAB entry point in cfe_es_startup.scr,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
TO_LAB issue https://github.com/nasa/to_lab/issues/67 is addressed in pull request https://github.com/nasa/to_lab/pull/126
This issue is opened in order to address the change required to cfe_es_startup.scr
Changes are also being made to GroundSystem file to_lab_msg (https://github.com/nasa/cFS-GroundSystem/pull/224)

**Reporter Info**
@thnkslprpt ",draco-rc4,https://github.com/nasa/cFE/issues/2157
"Fix #1540, Remove 'return;' from last line of void functions.","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #1540
Removes all cases of redundant ""return;"" statements on the last line of void functions.

**Testing performed**
None, prior to submission.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
@thnkslprpt ","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2156
Non-constant format string,"**Describe the bug**
Passing a non-constant 'format' string to a printf-like function can lead to a mismatch between the number of arguments defined by the 'format' and the number of arguments actually passed to the function. If the format string ultimately stems from an untrusted source, this can be used for exploits.

**Expected behavior**
Same behavior.
> If the argument passed as a format string is meant to be a plain string rather than a format string, then pass %s as the format string, and pass the original argument as the sole trailing argument.
>
> If the argument passed as a format string is a parameter to the enclosing function, then consider redesigning the enclosing function's API to be less brittle.

**Code snips**
https://github.com/nasa/cFE/blob/9f42688b2bf92e18c6faf9e7ce1f9a4f2ea08316/modules/evs/ut-coverage/evs_UT.c#L2098-L2098

**Additional context**
Caught by CodeQL. Critical in terms of severity. 
Can dismiss as used in tests. 
I prefer addressing CodeQL issues, especially if they are marked as critical, for unit tests. By doing so, this can teach good coding practices and the coding standard which can translate into the source code.  

**Reporter Info**
Ariel Adams, MCSG Tech
",,https://github.com/nasa/cFE/issues/2155
"Fix #2153, Remove unnecessary parentheses around return values.","**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #2153 
Removes parentheses in return statements in cFE that return a single value/term.
This is aligns these return statements with the predominant style of cFS.

**Testing performed**
None, prior to submission of the pull request.

**Expected behavior changes**
No impact on behavior.

**Contributor Info - All information REQUIRED for consideration of pull request**
@thnkslprpt ","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2154
Scrub use of () in return statements,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Unnecessary parentheses around return values in cFE
Copy of https://github.com/nasa/osal/issues/866

**Reporter Info**
@thnkslprpt ",draco-rc4,https://github.com/nasa/cFE/issues/2153
fix the typos,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [ ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
- Include explicitly what issue it addresses [e.g. Fixes #X]

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
 - Note CLAs apply to only software contributions.
","CCB:PendingCLA, CCB:Ignore",https://github.com/nasa/cFE/pull/2152
"Fix #1460, Duplicated Logic in CFE_SB_BroadcastBufferToRoute","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #1460
Removes duplicated logic in the final if/else in CFE_SB_BroadcastBufferToRoute.

**Testing performed**
Standard cFS bundle tests performed.
![lcov (cfe_sb_api c)](https://user-images.githubusercontent.com/9024662/192081997-c4f397b6-9958-4377-aebe-ee7022b74b8a.png)

**Expected behavior changes**
No impact on behavior.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
cFE v7.0.0-rc4+dev171

**Contributor Info - All information REQUIRED for consideration of pull request**
@thnkslprpt
","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2151
Unary minus operator should not be applied to an unsigned expression,"**Describe the bug**
Negation of unsigned value

**Expected behavior**
Keep same behavior but fix CodeQL warning. 

**Code snips**
https://github.com/nasa/cFE/blob/9f42688b2bf92e18c6faf9e7ce1f9a4f2ea08316/modules/evs/fsw/src/cfe_evs_utils.c#L319

**Additional context**
Caught by CodeQL - Violation of MISRA (Part of the coding standard). Could cast EVS_EventBurstMax. 

**Reporter Info**
Ariel Adams, MCSG Tech
",,https://github.com/nasa/cFE/issues/2150
Automate Changelog for README,"**Is your feature request related to a problem? Please describe.**
When merging an integration candidate branch into main, the author must manually update the changelog for the README.md file. This can be automated to reduce time and possible missed pull requests.

**Describe the solution you'd like**
Automate the creation of a changelog and use it to replace/update the existing README.md file. An example can be found in cFS, https://github.com/nasa/cFS/blob/main/.github/workflows/changelog.yml, but it will need to be tweaked so that only merged PRs are included. 

**Describe alternatives you've considered**
Keep as is.

**Additional context**
Can use GitHub actions or GitHub cli like gh.

**Requester Info**
Ariel Adams, MCSG Tech
","docs, continuous-integration",https://github.com/nasa/cFE/issues/2149
"Fix #2147, Remove CodeQL Paths Ignore","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [ ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #2147 

**Testing performed**
Tested on fork at ArielSAdams/cFE on test-remove-paths branch.

As seen in the screenshot, the issues are gone.
![image](https://user-images.githubusercontent.com/69638935/191023916-3a1b2e1d-feb2-45c7-9f7f-55602f2efdf5.png)


**Expected behavior changes**
Same behavior, no issues thrown in CodeQL workflow.

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, MCSG Tech
","CCB:Approved, continuous-integration, draco-rc4",https://github.com/nasa/cFE/pull/2148
Remove CodeQL Paths Ignore ,"**Describe the bug**
CodeQL throws two issues: Using paths-ignore can prevent Code Scanning annotating new alerts in your pull requests and on push.

**To Reproduce**
View the latest CodeQL workflow annotations. 

**Expected behavior**
Same behavior, with no issues thrown in the workflow.

**Additional context**
When removed, documentation files will still be ignored without the issues thrown due to this PR: https://github.com/nasa/cFS/pull/577

**Reporter Info**
Ariel Adams, MCSG Tech
","continuous-integration, draco-rc4",https://github.com/nasa/cFE/issues/2147
cFE Integration Candidate: Caelum-rc4+dev22,"**Describe the contribution**
PR #2143 
- Fix #2142, Resolve issues building users guide with Ubuntu 20.04/Doxygen 1.8.17

**Testing performed**

cFE checks <https://github.com/nasa/cFE/pull/2146/checks>
cFS Bundle checks <https://github.com/nasa/cFS/pull/578/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper",draco-rc4,https://github.com/nasa/cFE/pull/2146
Fixes issue #2144- Propagate CMAKE_EXPORT_COMPILE_COMMANDS variable,"Propagates variable CMAKE_EXPORT_COMPILE_COMANDS to the cmake subprocess in mission_build.cmake

**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [ NA] I signed and emailed the appropriate [Contributor License Agreement] -- Government employee


**Describe the contribution**
This fixes feature request #2144 which has CMake generate a compilation database for all subprojects/targets, helping editors/IDEs with understanding the full cFS/cFE environment.

**Testing performed**
Steps taken to test the contribution:
1. Build steps (from root of cFS directory)

```
    mkdir build
    cd build
    cmake -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE ../cfe
```

2. Execution steps 

```
    find . -iname ""compile_commands.json""
    >>> ./cpu1/default_cpu1/compile_commands.json
    >>> ./compile_commands.json
```

**Expected behavior changes**
No impact to behavior of cFE itself.  Simply causes an extra file to be created (the compilation database) for cFE/cFS apps when requested by the user.

**System(s) tested on**
 - Hardware: linux server/mac book pro
 - OS: RHEL8.6,Ubuntu 20.04
 - Versions: dev (main branch)
 - 
**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Andrew Liounis - NASA/GSFC
","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2145
Propagate CMAKE_EXPORT_COMPILE_COMMANDS to CMake subprocess,"**Is your feature request related to a problem? Please describe.**
When building cFE alongside of other apps the setting for the CMake variable ``CMAKE_EXPORT_COMPILE_COMMANDS`` only applies to the efl2cfetbl target due to the architecture of the CMake build system for cFS.  This makes it difficult for many development tools (like visual studio code) to properly understand the full cFE environment without putting in significant manual effort to specify the include paths and other compiler settings, thing which are usually captured in the compilation database built when ``CMAKE_EXPORT_COMPILE_COMMANDS`` is set to ``ON`` 

**Describe the solution you'd like**
Ultimately this comes down to the subprocess call in mission_build.cmake (around line 438 in the current main branch) where the setting for ``CMAKE_EXPORT_COMPILE_COMMANDS`` is not propagated to the subprocess.  The fix is as simple as adding this line 

    -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=${CMAKE_EXPORT_COMPILE_COMMANDS}

somewhere between ``${CMAKE_COMMAND}`` and ``${SELECTED_TOOLCHAIN_FILE}``.

**Describe alternatives you've considered**
This is the simplelest and least disruptive to the existing build process.  Alternatives would be to use ExternalProject or add_custom_command/add_custom_target which would probably play nicer than the execute_process, but they would also need to pass the same flag in this manor.

**Additional context**
N/A

**Requester Info**
Andrew Liounis, NASA/GSFC
",draco-rc4,https://github.com/nasa/cFE/issues/2144
"Fix #2142, Resolve doxygen 1.8.17 latex make errors","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2142 

**Testing performed**
Built cfe-usersguide locally and confirmed no warnings and pdf looked good

**Expected behavior changes**
Will now build cfe usersguide on Ubuntu 20.04 w/o issues

**System(s) tested on**
 - Hardware: i5/Docker
 - OS: Ubuntu 20.04
 - Versions: main + this comit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc4",https://github.com/nasa/cFE/pull/2143
Resolve issues building users guide with Ubuntu 20.04/Doxygen 1.8.17,"**Is your feature request related to a problem? Please describe.**
Automatic generation of doxygen documentation fails at latex make step, hangs up at `?` error prompts.

**Describe the solution you'd like**
Resolve via simplifying the dox source files

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","docs, draco-rc4",https://github.com/nasa/cFE/issues/2142
add_cfe_app uses deprecated call to target_link_libraries,"https://github.com/nasa/cFE/blob/9ebdf2e901174531541f962b0d39a12a9713f187/cmake/arch_build.cmake#L102

**Describe the issue.**

The CMake linking directive in `arch_build.cmake` uses the ""plain"" signature (ie, does not use a `PRIVATE`, `PUBLIC`, or `INTERFACE` keyword to specify how a library is used by a target's dependents). Because of this, one cannot use the keyword-style call on a cFS app without triggering a CMake warning. Mixing the plain and keyword styles has been deprecated since CMake 2.8.12. Since cFE specifies a minimum cMake version of 3.5, this should be updated.

As far as I can tell, calling `target_link_libraries` in an app to link in a static library is necessary, because this is not done as part of `add_cfe_app_dependency`. 

**Describe the expected behavior if the bug did not occur.**

`target_link_libraries` directives could be used with keyword signatures in app CMakelists files, and no deprecation warning emitted. 

**Provide the reproduction steps that someone else can follow to recreate the bug or error on their own.**

- Create a static library (either manually via CMake or by putting the target name in `<CPU>_STATIC_APPLIST` and using `add_cfe_app`.
- Add the library as a dependency for an app (either manually via CMake or by using `add_cfe_app_dependency`)
- Try to link it in an app using `target_link_libraries(<app_name> <PRIVATE|PUBLIC|INTERFACE> <lib_name>)`
- Build as usual

**If applicable, add code snippets or references to the software.**

https://github.com/nasa/cFE/blob/9ebdf2e901174531541f962b0d39a12a9713f187/cmake/arch_build.cmake#L102

**Provide the system the bug was observed on.**
I'm using the cFE v7.0.0-rc4 release https://github.com/nasa/cFE/releases/tag/v7.0.0-rc4, but this is present in `main` and `draco-rc4` at the time of reporting. CMake verison is 3.23.0-rc2. 

**Provide any additional context if applicable.**

See CMake policy CMP0023.

Isaac Rowe, Jacobs contractor to NASA JSC

(edited to provide information requested by contributor guidelines)",,https://github.com/nasa/cFE/issues/2141
RunApp table scan waits maximum time for a shutdown app.,"**Describe the bug**
If ES is commanded to stop an app, the RunAppTableScan background task doesn't check that the app has reached the desired state of CFE_ES_AppState_STOPPED. Instead it continues to decrement the wait time, which means the app will never get cleaned up until the timespan of `CFE_PLATFORM_ES_APP_KILL_TIMEOUT * CFE_PLATFORM_ES_APP_SCAN_RATE` is reached.

**To Reproduce**
Steps to reproduce the behavior:
1. Set CFE_PLATFORM_ES_APP_SCAN_RATE  to 1000, and set CFE_PLATFORM_ES_APP_KILL_TIMEOUT  large enough to visually inspect the time between an app reaching CFE_ES_ExitApp and CFE sending the event with `Stop Application <AppName> Completed`
2. Start CFS, command ES to stop the target app. Note that the Stop Application takes the full CFE_PLATFORM_ES_APP_KILL_TIMEOUT  before the Stop Application event is generated.

**Expected behavior**
I think the intent of the RunAppTableScan is to detect when an app is immediately able to be cleaned up or a timeout has been reached. The timeout is in place but the CFE_ES_AppState_STOPPED condition isn't checked.

**Code snips**
If applicable, add references to the software.
Replacing the 
`            if (AppPtr->AppState > CFE_ES_AppState_RUNNING)`
code block in `CFE_ES_RunAppTableScan`
with something like:
```
            if (AppPtr->AppState > CFE_ES_AppState_RUNNING)
            {   
                /*
                 * Increment the ""pending"" counter which reflects
                 * the number of apps that are in some phase of clean up.
                 */
                ++State->PendingAppStateChanges;
                
                /*
                 * Decrement the wait timer, if active.
                 * When the timeout value becomes zero, take the action to delete/restart/reload the app
                 */
                if (AppPtr->AppState == CFE_ES_AppState_STOPPED || AppPtr->ControlReq.AppTimerMsec <= ElapsedTime)
                {
                    AppPtr->ControlReq.AppTimerMsec = 0;

                    /* Add it to the list to be processed later */
                    AppTimeoutList[NumAppTimeouts] = CFE_ES_AppRecordGetID(AppPtr);
                    ++NumAppTimeouts;
                }
                else
                {   
                    AppPtr->ControlReq.AppTimerMsec -= ElapsedTime;
                }
            }
```
improves this app unload delay.


**System observed on:**
 - Hardware
 - OS: [e.g. Linux 4.4]
 - Versions [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps]
 Anything

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Full name and company/organization if applicable
Thomas Brain - METECS contractor to JSC.
",,https://github.com/nasa/cFE/issues/2140
cFE Integration Candidate: Caelum-rc4+dev19,"**Describe the contribution**
PR #2138
- Fix #2137, Squash uninit var static analysis warnings

**Testing performed**

cFE checks <https://github.com/nasa/cFE/pull/2139/checks>
cFS Bundle checks <https://github.com/nasa/cFS/pull/553/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper",draco-rc3,https://github.com/nasa/cFE/pull/2139
"Fix #2137, Squash uninit var static analysis warnings","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2137 

**Testing performed**
CI

**Expected behavior changes**
Just squashes warnings

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/cFE/pull/2138
Uninitialized variable static analysis warnings,"**Is your feature request related to a problem? Please describe.**
3 new warnings identified, 2 in UT and 1 in op code.  Note op code issue is just to squash the warning, no real operational issue identified.

**Describe the solution you'd like**
Squash

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc3",https://github.com/nasa/cFE/issues/2137
CFE_ES_GetPoolBuf() return value is confusing,"On error, CFE_ES_GetPoolBuf() returns a status code, but on success, it returns the size allocated (which is actually the Size input parameter, so the return value is redundant.) I suggest either make the Size parameter an in/out parameter, or just return a CFE status and the caller can assume CFE_SUCCESS means the memory size requested was allocated.

https://github.com/nasa/cFE/blob/318f3451304e0d7e2269054fe170af99189ec560/modules/es/fsw/src/cfe_es_mempool.c#L424",enhancement,https://github.com/nasa/cFE/issues/2136
cFE Integration Candidate: Caelum-rc4+dev17,"**Describe the contribution**
PR #2132
- Fix #2132, Increase event burst credit to not squelch at startup in CI

PR #2134
- Fix #2133, Grammatical/format updates to EVS flooding requirements

**Testing performed**

cFE checks <https://github.com/nasa/cFE/pull/2135/checks>
cFS Bundle checks <https://github.com/nasa/cFS/pull/542/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper",draco-rc3,https://github.com/nasa/cFE/pull/2135
"Fix #2133, Grammatical/format updates to EVS flooding requirements","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2133 

**Testing performed**
CI

**Expected behavior changes**
None, minor requirements grammatical/format updates

**System(s) tested on**
CI

**Additional context**
Fixed one summary typo.  Note this update will require a requirements document respin (release artifact)

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/cFE/pull/2134
Grammatical/format updates to EVS flooding requirements,"**Is your feature request related to a problem? Please describe.**
Import/export of EVS flooding requirements caused minor formatting changes.  Note also fixed a summary typo.

**Describe the solution you'd like**
Update to latest export from requirements CM tool.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","requirements, draco-rc3",https://github.com/nasa/cFE/issues/2133
"Fix #2131, Increase event burst credit to not squelch at startup in CI","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2131 

Doubled the event squelch credit (16 to 32) to avoid ES event squelching at startup seen in app CI runs

**Testing performed**
Tested with 10 GSFC apps, no squelch observed

**Expected behavior changes**
Just increased the default credit, can burst up to 32 events before squelch.

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/cFE/pull/2132
Event squelch triggering at startup on ES version reporting in submodule CI,"**Is your feature request related to a problem? Please describe.**
Squelching ES version events on startup in the CF CI:
https://github.com/nasa/CF/actions/runs/2803852797

**Describe the solution you'd like**
Bump up maximum default credit

**Describe alternatives you've considered**
Maybe not squelch until in a running mode?  Although that somewhat limits the usefulness of the squelching.

Could switch the event message wording to not say ""error"" or just ignore the returned send event error

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","continuous-integration, draco-rc3",https://github.com/nasa/cFE/issues/2131
cFE Integration Candidate: Caelum-rc4+dev15,"**Describe the contribution**
PR #2129
- Fix #2128, use correct loop var in add_cfe_app_dependency

PR #2117
- Fix #2095, Automatic suppression of flooding events

PR #2126
- Fix #2125, Remove stray TODO in UT

**Testing performed**

cFE checks <https://github.com/nasa/cFE/pull/2130/checks>
cFS Bundle checks <https://github.com/nasa/cFS/pull/536/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey
@skliper",draco-rc3,https://github.com/nasa/cFE/pull/2130
"Fix #2128, use correct loop var in add_cfe_app_dependency","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
This function was not using the loop variable, so ended up adding only the first item.

Fixes #2128

**Testing performed**
Call add_cfe_app_dependency with multiple items

**Expected behavior changes**
All dependency items get registered, and compilation gets full API include paths, not just the first one.

**System(s) tested on**
Ubuntu 22.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc3",https://github.com/nasa/cFE/pull/2129
Only the first item passed to add_cfe_app_dependency() function is actually registered,"**Describe the bug**
The add_cfe_app_dependency() function in the build system is intended to register when one module depends on another module.  It is supposed to accept a list of modules, but only the first item actually gets registered.  If attempting to register more than one, the second item (and anything beyond that) do not have an effect.

**To Reproduce**
Attempting to change the ""BP"" app to depend on the bplib library as well as a input/output layer called ""iodriver"", I changed:

`add_cfe_app_dependency(bp bplib)`
to
`add_cfe_app_dependency(bp bplib iodriver)`

However this did not have any effect, I did not get the iodriver public include path as expected - it did nothing.

**Expected behavior**
All listed dependencies should be registered and public include paths of all dependencies should be added to the app target.

**System observed on:**
Ubuntu 22.04

**Additional context**
This is caused by the wrong variable in the loop.   There _is_ a loop to handle all the listed dependencies, but it registers the first one multiple times, because the wrong variable is referenced inside the loop.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, draco-rc3",https://github.com/nasa/cFE/issues/2128
Abort on restart after maximum resets (Linux w/ mismatched restart request/restart type),"**Describe the bug**
After exceeding the maximum number of unplanned resets allowed per CFE_PLATFORM_ES_MAX_PROCESSOR_RESETS, the system attempts to perform a POR instead of a PROCESSOR reset. Unfortunately this orderly reset fails due to an apparent deadlock and the system eventually times out and calls Abort.

Note that this does not occur when using CFE_ES_ResetCFE, only with CFE_PSP_Restart(CFE_PSP_RST_TYPE_PROCESSOR).

**To Reproduce**
Steps to reproduce the behavior:
Modify any app to call CFE_PSP_Restart(CFE_PSP_RST_TYPE_PROCESSOR) on command
 - I used sample app's noop command
Issue the command to trigger the restart and then re-spawn the executable
Repeat the restart until the system falls back to a POR reset

**Expected behavior**
Expect a clean POR restart without the 10 second timeout and abort

**Code snips**


**System observed on:**
 - Hardware
    Intel i7-10870H
    64 GB RAM
 - OS: [e.g. Linux 4.4]
    Linux -------- 5.18.10-76051810-generic #202207071639~1657252310~21.10~7d5e891 SMP PREEMPT_DYNAMIC Fri J x86_64 x86_64 x86_64 GNU/Linux
 - Versions [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps]
    Latest cFS distribution as of July 28, 2022, modification to sample_app to call CFE_PSP_Restart.

**Additional context**
Stack Trace from running threads at the time of the abort

```
(gdb) r
Starting program: /home/ldmiller/cFS/build/exe/cpu1/core-cpu1 
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
OS_BSP_Initialize():Maximum user msg queue depth = 100
CFE_PSP: Default Reset SubType = 1
CFE_PSP: Default CPU ID = 1
CFE_PSP: Default Spacecraft ID = 66
CFE_PSP: Default CPU Name: cpu1
OS_Posix_GetSchedulerParams():187:Policy 1: available, min-max: 1-99
OS_Posix_GetSchedulerParams():187:Policy 2: available, min-max: 1-99
OS_Posix_TaskAPI_Impl_Init():373:Selected policy 2 for RT tasks, root task = 99
OS_Posix_TaskAPI_Impl_Init():390:Could not setschedparam in main thread: Operation not permitted (1)
[New Thread 0x7ffff7fc1640 (LWP 451164)]
[New Thread 0x7ffff7fbc640 (LWP 451165)]
CFE_PSP: Instantiated software timebase 'cFS-Master' running at 10000 usec
CFE_PSP: Using POSIX monotonic clock as CFE timebase
CFE_PSP: Using MMAP simulated EEPROM implementation
CFE_PSP: Physical RAM access not implemented
CFE_PSP: I/O Port access not implemented
CFE_PSP: EEPROM Range (2) created: Start Address = 7FFFF7B80000, Size = 00080000 Status = 0
CFE_PSP: Normal exit from previous cFE instance
CFE_PSP: Starting the cFE with a PROCESSOR reset.
1980-003-11:57:59.61581 CFE_ES_SetupResetVariables: POWER ON RESET due to max proc resets (Watchdog).
CFE_PSP: Exiting cFE with POWERON Reset status.
CFE_PSP: Critical Data Store Shared memory segment removed
Reset Area Shared memory segment removed
User Reserved Area Shared memory segment removed
 
Thread 1 ""core-cpu1"" received signal SIGABRT, Aborted.
__pthread_kill_implementation (no_tid=0, signo=6, threadid=140737353758528) at pthread_kill.c:44
44      pthread_kill.c: No such file or directory.
(gdb) info threads
  Id   Target Id                                      Frame 
* 1    Thread 0x7ffff7fa3740 (LWP 451163) ""core-cpu1"" __pthread_kill_implementation (no_tid=0, signo=6, threadid=140737353758528) at pthread_kill.c:44
  2    Thread 0x7ffff7fc1640 (LWP 451164) ""core-cpu1"" __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x5555556ec640 <OS_impl_console_table>) at futex-internal.c:57
  3    Thread 0x7ffff7fbc640 (LWP 451165) ""core-cpu1"" 0x00007ffff7c4323a in __GI___sigtimedwait (set=set@entry=0x5555556ed658 <OS_impl_timebase_table+280>, info=info@entry=0x7ffff7fbbc80, timeout=timeout@entry=0x0)
    at ../sysdeps/unix/sysv/linux/sigtimedwait.c:61
(gdb) bt
#0  __pthread_kill_implementation (no_tid=0, signo=6, threadid=140737353758528) at pthread_kill.c:44
#1  __pthread_kill_internal (signo=6, threadid=140737353758528) at pthread_kill.c:80
#2  __GI___pthread_kill (threadid=140737353758528, signo=signo@entry=6) at pthread_kill.c:91
#3  0x00007ffff7c42476 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26
#4  0x00007ffff7c287b7 in __GI_abort () at abort.c:79
#5  0x00005555555a2f93 in CFE_PSP_Restart (reset_type=2) at /home/ldmiller/cFS/psp/fsw/pc-linux/src/cfe_psp_support.c:114
#6  0x00005555555730d9 in CFE_ES_SetupResetVariables (StartType=1, StartSubtype=1, BootSource=1) at /home/ldmiller/cFS/cfe/modules/es/fsw/src/cfe_es_start.c:407
#7  0x0000555555572bdc in CFE_ES_Main (StartType=1, StartSubtype=1, ModeId=1, StartFilePath=0x5555555a6271 ""/cf/cfe_es_startup.scr"") at /home/ldmiller/cFS/cfe/modules/es/fsw/src/cfe_es_start.c:121
#8  0x00005555555a2a84 in OS_Application_Startup () at /home/ldmiller/cFS/psp/fsw/pc-linux/src/cfe_psp_start.c:432
#9  0x00005555555a517e in main (argc=1, argv=0x7fffffffdeb8) at /home/ldmiller/cFS/osal/src/bsp/generic-linux/src/bsp_start.c:238
(gdb) thread 2
[Switching to thread 2 (Thread 0x7ffff7fc1640 (LWP 451164))]
#0  __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x5555556ec640 <OS_impl_console_table>) at futex-internal.c:57
57      futex-internal.c: No such file or directory.
(gdb) bt
#0  __futex_abstimed_wait_common64 (private=<optimized out>, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x5555556ec640 <OS_impl_console_table>) at futex-internal.c:57
#1  __futex_abstimed_wait_common (cancel=true, private=<optimized out>, abstime=0x0, clockid=0, expected=0, futex_word=0x5555556ec640 <OS_impl_console_table>) at futex-internal.c:87
#2  __GI___futex_abstimed_wait_cancelable64 (futex_word=futex_word@entry=0x5555556ec640 <OS_impl_console_table>, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, private=<optimized out>)
    at futex-internal.c:139
#3  0x00007ffff7c9ca3f in do_futex_wait (sem=sem@entry=0x5555556ec640 <OS_impl_console_table>, abstime=0x0, clockid=0) at sem_waitcommon.c:112
#4  0x00007ffff7c9cad8 in __new_sem_wait_slow64 (sem=0x5555556ec640 <OS_impl_console_table>, abstime=0x0, clockid=0) at sem_waitcommon.c:184
#5  0x000055555559abbc in OS_ConsoleTask_Entry (arg=0xc0001) at /home/ldmiller/cFS/osal/src/os/posix/src/os-impl-console.c:97
#6  0x00007ffff7c94947 in start_thread (arg=<optimized out>) at pthread_create.c:435
#7  0x00007ffff7d24a44 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:100
(gdb) thread 3
[Switching to thread 3 (Thread 0x7ffff7fbc640 (LWP 451165))]
#0  0x00007ffff7c4323a in __GI___sigtimedwait (set=set@entry=0x5555556ed658 <OS_impl_timebase_table+280>, info=info@entry=0x7ffff7fbbc80, timeout=timeout@entry=0x0) at ../sysdeps/unix/sysv/linux/sigtimedwait.c:61
61      ../sysdeps/unix/sysv/linux/sigtimedwait.c: No such file or directory.
(gdb) bt
#0  0x00007ffff7c4323a in __GI___sigtimedwait (set=set@entry=0x5555556ed658 <OS_impl_timebase_table+280>, info=info@entry=0x7ffff7fbbc80, timeout=timeout@entry=0x0) at ../sysdeps/unix/sysv/linux/sigtimedwait.c:61
#1  0x00007ffff7c428ac in __GI___sigwait (set=0x5555556ed658 <OS_impl_timebase_table+280>, sig=0x7ffff7fbbd44) at ../sysdeps/unix/sysv/linux/sigwait.c:28
#2  0x000055555559d7f5 in OS_TimeBase_SigWaitImpl (obj_id=524289) at /home/ldmiller/cFS/osal/src/os/posix/src/os-impl-timebase.c:159
#3  0x0000555555598e8f in OS_TimeBase_CallbackThread (timebase_id=524289) at /home/ldmiller/cFS/osal/src/os/shared/src/osapi-timebase.c:422
#4  0x000055555559db03 in OS_TimeBasePthreadEntry (arg=0x80001) at /home/ldmiller/cFS/osal/src/os/posix/src/os-impl-timebase.c:319
#5  0x00007ffff7c94947 in start_thread (arg=<optimized out>) at pthread_create.c:435
#6  0x00007ffff7d24a44 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:100
(gdb) 
```

**Reporter Info**
Lorn Miller
Red Canyon Engineering & Software
",bug,https://github.com/nasa/cFE/issues/2127
"Fix #2125, Remove stray TODO in UT","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2125 

**Testing performed**
CI

**Expected behavior changes**
Comment only

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/cFE/pull/2126
Remove stray TODO,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/cFE/blob/924b2be20a39f17355861396273856caccc8c89f/modules/es/ut-coverage/es_UT.c#L2969

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","docs, draco-rc3",https://github.com/nasa/cFE/issues/2125
cFE Integration Candidate: Caelum-rc4+dev13,"**Describe the contribution**
PR #2122
- Fix #2121, remove commented out code


**Testing performed**

cFE checks <https://github.com/nasa/cFE/pull/2124/checks>
cFS Bundle checks <https://github.com/nasa/cFS/pull/525/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",draco-rc3,https://github.com/nasa/cFE/pull/2124
read() vs OS_read() Clarification,"**EDIT: Oops. This is not the OSAL repo! Sorry. Please delete this as I have asked there instead.**

My application involves reading data from a serial device (IMU) in a nonblocking fashion. Furthermore, I am writing code for a particular linux architecture so benefits from the standpoint of enabling OS abstraction are not really important. So, other than that:
What is the difference between linux's read() and OS_read()?
Is there a specific one that is recommended given my situation? If so, why that one?",invalid,https://github.com/nasa/cFE/issues/2123
"Fix #2121, remove commented out code","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Clean up old code which was commented out

Fixes #2121

**Testing performed**
Build and run

**Expected behavior changes**
None; code was commented out

**System(s) tested on**
RHEL 8

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, draco-rc3",https://github.com/nasa/cFE/pull/2122
Remove commented-out logic,"**Is your feature request related to a problem? Please describe.**
When developing other code I noted a commented in CFE core stubs with a ""JPHFIX"" marking.  This is old from a previous change and should have been removed before commit (mistake).

https://github.com/nasa/cFE/blob/b581e0d0f30bdbb5e011fe9082f893644658cb00/modules/core_api/ut-stubs/src/cfe_tbl_handlers.c#L61

**Describe the solution you'd like**
Remove the commented code

**Requester Info**
Joseph Hickey, Vantage Systems, Inc
",draco-rc3,https://github.com/nasa/cFE/issues/2121
Account for Clang based toolchains in CMake logic for --whole-archive flag generation,"**Is your feature request related to a problem? Please describe.**
In the target CMakeLists.txt file, there is logic that conditionally adds the --whole-archive linker options. This logic currently checks for a compiler ID of ""GNU"". When using a VxWorks 7 toolchain that is based on Clang, this logic is not triggered.

**Describe the solution you'd like**
Adjust the logic to allow for Clang based toolchains. The vxWorks toolchain has compatible options so only the toolchain identification needs to be changed.

**Describe alternatives you've considered**
We could move these flags into the toolchain files, but that would require changing all existing toolchain files.

**Additional context**
The current logic is here:
https://github.com/nasa/cFE/blob/main/cmake/target/CMakeLists.txt#L159

The new logic needs to look something like this:
if ((""${CMAKE_C_COMPILER_ID}"" STREQUAL ""GNU"") OR
    (""${CMAKE_C_COMPILER_ID}"" STREQUAL ""Clang""))

**Requester Info**
Alan Cudmore, NASA/GSFC Code 582.0


NOTE: This change is likely to be part of a set of changes to support vxWorks 7.0","build-system, draco-rc4",https://github.com/nasa/cFE/issues/2120
"Fix #2118, Endian macro mask before shift to avoid shift overflow warning","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2118

**Testing performed**
CI

**Expected behavior changes**
None, just squashes warnings

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC

Ping @excaliburtb","CCB:Approved, draco-rc2",https://github.com/nasa/cFE/pull/2119
Shift overflow compiler warning in endian macros,"**Is your feature request related to a problem? Please describe.**
```
cfe/modules/core_api/fsw/inc/cfe_endian.h:66:12: error: result of '13398 << 24' requires 39 bits to represent, but 'int' only has 32 bits [-Werror=shift-overflow=]
((((n) << 24) & 0xFF000000) | (((n) << 8) & 0x00FF0000) | (((n) >> 8) & 0x0000FF00) | (((n) >> 24) & 0x000000FF))
```

From:
https://github.com/nasa/cFE/blob/10898c9b1292be87cd851fb58eeda253dfdc4358/modules/core_api/fsw/inc/cfe_endian.h#L64-L66

**Describe the solution you'd like**
Mask, then shift.

**Describe alternatives you've considered**
None

**Additional context**
- #1209 

Or really transition to serializer/deserializaer concepts.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc2",https://github.com/nasa/cFE/issues/2118
"Fix #2095, Automatic suppression of flooding events","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2095 

**Testing performed**
CI

**Expected behavior changes**
Squelches flooding events (configurable)

**System(s) tested on**
CI

**Additional context**
Still a work in progress, needs coverage and functional cleanup

**Third party code**
None, update suggestion from NASA/JSC context.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC

Ping @jhnphm","CCB:Approved, draco-rc3",https://github.com/nasa/cFE/pull/2117
Update wrong comment regarding the value of CFE_SB_INVALID_MSG_ID ,"**Describe the bug**
CFE_SB_INVALID_MSG_ID value is no longer the maximum representable number of type CFE_SB_MsgId_t. Comment needs to be updated.

**Code snips**
[Link to lines of code](https://github.com/nasa/cFE/blob/main/cmake/sample_defs/cpu1_platform_cfg.h#L167-L168)

**Reporter Info**
Jose F. Martinez Pedraza / GSFC 582",docs,https://github.com/nasa/cFE/issues/2116
"Fix #2114, Add macro for initializing command header","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2114 

Just adds CFE_MSG_CMD_HDR_INIT

**Testing performed**
Built and ran with nasa/SC#35, and observed the commands getting sent

**Expected behavior changes**
None, just provides a more portable way to define tables with commands

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Build main + the SC changes and this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/cFE/pull/2115
Add macro for assembling message header for use in defining tables that contain messages,"**Is your feature request related to a problem? Please describe.**
Without a macro, tables are header implementation specific with their current approach of just using a uint16 array and hard coding the elements.

**Describe the solution you'd like**
Add an overridable macro that will fill in the header elements from ""common"" inputs.  Something like:
`#define MSG_STATIC_CMD(mid, size, fc, cksum)`

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",draco-rc2,https://github.com/nasa/cFE/issues/2114
"Fix #2110, Add CFE_ES_StatusToString and CFE_STATUS_C","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2110 

Adds CFE_ES_StatusToString and CFE_STATUS_C

**Testing performed**
CI (coverage tests and app testcase functional)

**Expected behavior changes**
None, just adds useful APIs for future cleanup

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
None","CCB:Approved, draco-rc2",https://github.com/nasa/cFE/pull/2113
cFE Integration candidate: Caelum-rc4+dev10,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**

PR #2105

- Fix #2100, Resolve UT uninit var static analysis warnings

- Fix #2101, Resolve fsw uninit var static analysis warnings

- Fix #2102, Resolve UT non-distinct identifier warnings

- Fix #2103, Resolve UT buffer underflow warning

PR #2108 

- Fix #2104, cFE_Users_guide.pdf 404

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/492/checks)
[cFE Checks](https://github.com/nasa/cFE/pull/2111/checks)

**Expected behavior changes**

See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/492>
Commit and PR format-check failure expected for Integration Candidates

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
skliper
paulober","community, draco-rc2",https://github.com/nasa/cFE/pull/2111
Add CFE_Status_t conversion macros/functions,"**Is your feature request related to a problem? Please describe.**
Various issues/complexities relative to CFE_Status_t handling:
- #921 
- #1676
- #2010

But there are no conversion wrappers/apis.

**Describe the solution you'd like**
Add CFE_STATUS_C and CFE_StatusToString to support future enhancements to error handling.  Matches OSAL pattern (except OSAL doesn't have OSAL_StatusToString yet).

**Describe alternatives you've considered**
See linked issues.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc2",https://github.com/nasa/cFE/issues/2110
"Fix #2095, Automatic suppression of flooding events","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [ ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #2095 

**Testing performed**
1. Built with SIMULATION=i686-native ENABLE_UNIT_TESTS=true
1. Ran unit tests, all passing except time due to local time configuration changes
1. Built for VxWorks
1. Ran cFS on vxWorks and observed events being squelched and the squelch event message being emitted

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: Squelch error code gets returned by event send functions if a squelch happens
 - Behavior Change: Events get squelched after 16 events within 1 second per app (default in cpu1_platform_cfg); tokens are returned at a rate of 8/sec (default in cpu1_platform_cfg) to allow a sustained event rate of 8/sec/app. Event is emitted upon squelching, and counters incremented. Counters added to event data stored to file and realtime telemetry. 


**System(s) tested on**
 - Hardware: SP0-s (Simics)
 - OS: VxWorks 6.9
 - Versions: cFE 7.0.0+dev127, OSAL  v6.0.0-rc4+dev66, OSAL  v6.0.0-rc4+dev66 w/ JSC changes
 
**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
John N Pham (@jhnphm), Northrop Grumman, Space Systems

",invalid,https://github.com/nasa/cFE/pull/2109
"Fix #2104, cFE_Users_guide.pdf 404","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
- Fixes #2104 

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - No HTTP 404 when clicking on cFE Users guide link in README.md

**Contributor Info - All information REQUIRED for consideration of pull request**
- Personal
","CCB:Approved, CCB:FastTrack, draco-rc2",https://github.com/nasa/cFE/pull/2108
Stopping an APP that has a locked mutex using CFE_ES_StopAppCmd BUG,"**Describe the bug**
An APP cannot be correctly stopped by CFE_ES if the `CFE_ES_StopAppCmd` is sent in the same moment that the APP has a mutex locked. Although the app is terminated (with errors), when we try to restart it, it doesn't work.

**To Reproduce**
Steps to reproduce the behavior:
1. Create a mutex in SAMPLE_APP using `OS_MutSemCreate`
2. Take the mutex in the SAMPLE_APP RunLoop using `OS_MutSemTake`
3. Perform CFE_ES CMD `CFE_ES_StopAppCmd` using ""SAMPLE_APP"" as target
4. See error `CFE_ES_CleanupObjectCallback: Call to OSAL Delete Object (ID:327691) failed. RC=-6`

**Expected behavior**
1. CFE_ES should be able to unlock the mutexes in a target APP in order to close all its resources.
1.1. In case CFE_ES behavior can't do that, how can we handle apps that have mutexes and may be closed in the exactly same moment that its mutex is locked (""Taken"") ?

**System observed on:**
 - Ubuntu 18.04 LTS
 - Version: [cFS Caelum Release Candidate 4](https://github.com/nasa/cFS/releases/tag/caelum-rc4) (Also tested with [Aquila](https://github.com/nasa/cFS-GroundSystem/releases/tag/v2.1.0) and [cFS Bootes Release Candidate 2](https://github.com/nasa/cFS/releases/tag/bootes-rc2))

**Additional context**
An example:
![image](https://user-images.githubusercontent.com/22582189/169377359-28a04ffd-a5a4-4cd4-b360-0c83f6a3f79b.png)

**Reporter Info**
Igor Luppi
",bug,https://github.com/nasa/cFE/issues/2107
Redundant word in App Developer's Guide,"Remove ""compute"" 

https://github.com/nasa/cFE/blob/81416f8f3552c2b0f85e820f4f423f62f8aee634/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L3394",draco-rc2,https://github.com/nasa/cFE/issues/2106
"Fix #2100 #2101 #2102 #2103, Resolve static analysis warnings","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2100
- Fix #2101
- Fix #2102 
- Fix #2103

**Testing performed**
CI + static analysis run

**Expected behavior changes**
None, just squashes static analysis warnings

**System(s) tested on**
 - Hardware: VM
 - OS: Ubuntu 18.04
 - Versions: Bundle main + apps + related static analysis resolution branches

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/cFE/pull/2105
"URL to ""cFE Users Guide"" in the top-level README.md returns a 404","**Describe the bug**
This is the URL to the `cFE_Users_Guide.pdf` given on the front page README.md: https://github.com/nasa/cFS/blob/gh-pages/cFE_Users_Guide.pdf

The URL returns a 404.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to https://github.com/nasa/cFE/blob/main/README.md
2. Follow the link given by:
> The detailed cFE user's guide can be viewed at https://github.com/nasa/cFS/blob/gh-pages/cFE_Users_Guide.pdf.

3. Click the link and see the 404.

**Expected behavior**
The document should exist at the given URL.

**Reporter Info**
Alex Carrillo","good first issue, docs, draco-rc2",https://github.com/nasa/cFE/issues/2104
Buffer underflow in UT,"**Is your feature request related to a problem? Please describe.**
Buffer underflow warning observed in UT static analysis

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, draco-rc2",https://github.com/nasa/cFE/issues/2103
Non-distinct identifiers in UT,"**Is your feature request related to a problem? Please describe.**
Non-distinct identifier static analysis warning in UT

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","unit-test, draco-rc2",https://github.com/nasa/cFE/issues/2102
Resolve uninitialized variable warnings in fsw when compiling unit tests,"**Is your feature request related to a problem? Please describe.**
Static analysis warnings observed relative to fsw when compiling the unit tests based on how the stubs are implemented.

**Describe the solution you'd like**
Fix since it also makes the code more robust to underlying API changes.  Not marking as bug since non unit test analysis does not identify issues.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc2",https://github.com/nasa/cFE/issues/2101
Resolve uninitialized variable static analysis warnings in unit tests,"**Is your feature request related to a problem? Please describe.**
Uninitialized variable warnings in unit tests identified by static analysis (license prevents publishing)

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, draco-rc2",https://github.com/nasa/cFE/issues/2100
"Fix #2090, UT updates for alternate time configuration","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2090

**Testing performed**
Build and run unit tests with alternate time configuration:
```
#define CFE_PLATFORM_TIME_CFG_SOURCE true
#define CFE_PLATFORM_TIME_CFG_SRC_TIME true
#define CFE_MISSION_TIME_CFG_FAKE_TONE false
```

Confirm it builds, tests pass, and coverage matches (the same 2 lines, 1 branch uncovered in time for either config)

**Expected behavior changes**
None, just fixes UT for alt time config

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit w/ alternate time config

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC
","CCB:Approved, draco-rc2",https://github.com/nasa/cFE/pull/2099
cFE Integration candidate: Caelum-rc4_dev9,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**

PR #2097
    
- Fix #2096 update rtems toolchain files

PR #2088 

- Fix #2084, Add support for fractional seconds in epoch

PR #2078 

- Fix #1097, adds truncation warning suppression flags

PR #2094 

- Fix #2092, Doc deploy from local workflow on main branch push

PR #2044 
    
- Fix #2106, Redundant word in App Developers Guide

PR #2099 
    
- Fix #2090, UT updates for alternate time configuration

**Testing performed**


**Expected behavior changes**

See PRs

**System(s) tested on**
Ubuntu 18.04
RTEMS 4.11, 5

**Additional context**
Part of <https://github.com/nasa/cFS/pull/471>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
skliper
chillfig
Jonathan Brandenburg-metecs
Hugo-Valentine
acudmore
","community, draco-rc2",https://github.com/nasa/cFE/pull/2098
Fix #2096 update rtems toolchain files,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**

- Fix #2096 

Modifies the existing RTEMS 4.11 and RTEMS 5 toolchain files to:

- Change the OS define to avoid using a reserved identifier (_RTEMS_(x)_)
- Change the RTEMS 4.11 define to indicate it is deprecated
- Add a BSP_SPECS_FLAGS flag to allow for RTEMS version variations in the specs flags
- Add a dynamic load Cmake variable to allow for two types of CMAKE executable types in the platform file

Added a RTEMS 6 i686 toolchain file 

**Testing performed**

- Rebuilt and ran RTEMS 4.11 and RTEMS 5 tests
- Tested RTEMS 6 build and ran tests (using local OSAL mods and CI docker image with RTEMS 6)

**Expected behavior changes**

- No impact or behavior changes on RTEMS 4.11 and RTEMS 5

**System(s) tested on**
 
- RTEMS 4.11, RTEMS 5 Docker images used in CI workflows

**Additional context**

- The changes in the toolchain files for RTEMS 4.11 and RTEMS 5 are to accommodate the RTEMS 6 port and allow for additional RTEMS builds to use the same CMake Platform file for RTEMS.

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Cudmore, NASA/GSFC Code 582.0
","CCB:Approved, draco-rc2",https://github.com/nasa/cFE/pull/2097
"Update RTEMS toolchain files for RTEMS 4.11, 5, and 6","**Is your feature request related to a problem? Please describe.**
This is part of the RTEMS updates described here: https://github.com/nasa/cFS/discussions/468
The RTEMS toolchain files require a few minor changes in order to:

- Add compatibility for RTEMS 6
- Allow both static and dynamically linked cFE core implementations
- Allow the Gaisler RCC toolchain to be used

**Describe the solution you'd like**
I would like do the following to existing RTEMS toolchain files:

- Add a define to indicate that the cFE core is dynamically linked
- Add a define to indicate the version of RTEMS being used. This is a new define, and when the proper OSAL and PSP changes have been made, the old defines will be removed. The new define has the form -DOS_RTEMS_X where the old define has the form -D_RTEMS_X_
- Add a RTEMS_BSP_SPECS variable to allow a version specific specs option to be specified. This allows the same CMake platform file for RTEMS to be used for RTEMS 4, 5, and 6.

I would also like to add a new toolchain file for i686-rtems6


**Describe alternatives you've considered**
The alternative is to create two additional Cmake platform files in the PSP for RTEMS 6 and Gaisler RCC 5. This is not ideal because there would be 3 separate RTEMS Cmake platform files to maintain and they would be almost the same.

**Additional context**
The toolchain file changes are the only changes needed in the cFE to support RTEMS 4.11, 5, and 6 as well as Gaisler RTEMS 5 (RCC 1.3.x). These changes also will enable a new generic-rtems OSAL BSP and PSP to be added later.

**Requester Info**
Alan Cudmore, NASA/GSFC Code 582.0",draco-rc2,https://github.com/nasa/cFE/issues/2096
Automatic suppression of flooding events,"**Is your feature request related to a problem? Please describe.**
We've observed that overly verbose event messages can take down a processor, especially if the generation of events can induce the production of more events due to increased SB/SBNg traffic. Some ability to rate-limit events regardless
of filter state seems to be desirable, as the default for many apps is often unfiltered, and during an event storm it may not be possible to command an event to be filtered.

In addition, there are concerns about critical event messages being lost amongst a flood of less critical events, especially when not commandable due to being in a temporary loss-of-signal state.

There's also the desire to automatically re-enable an event if it is no longer flooding, and the proposed solution would have that characteristic. This is important if the event notifying that the filter has been activated gets lost due to flooding.
Events could still be permanently suppressed w/ the existing binary filters. 

**Describe the solution you'd like**
A filter that is applied per-app, per event type (priority). A token counter for (app, event type)  is incremented every time an event message arrives for (app, event type). Meanwhile, the token counter is decremented at a fixed rate.
If the token counter exceeds a certain threshold, incrementing stops and all incoming events for that (app, event type) are discarded until the counter is below a threshold (could be the same as the suppress threshold, then it'll
effectively rate limit after allowing a small burst).

**Describe alternatives you've considered**
To simplify the implementation, this could be done globally for all events instead of on a per-app basis. There would be the problem of a misbehaved app flooding out another app sending more critical event messages, but this could
be mitigated somewhat by doing this per-event type or prioritizing by event type.

A more granular solution would filter only excessively verbose events by (app event ID) but this would probably require registration of all events and enforcement. It appears that not all apps register all events w/ EVS (i.e. SBNg).

Another solution that only addresses the auto-reenabling of formerly flooding events would be to add another filter type besides binary filter that uses the above mentioned token scheme. This doesn't help too much since the filter 
type is set by the app during registration, if events are registered at all.


**Additional context**
Initial driver was SBNg doesn't come w/ default filters for floodable events, and one of our other apps also sends off a lot of events on startup. Obvious solution is to modify these apps to setup default filters, but this doesn't address reenabling the events automatically when the transients go away, nor does it address unexpectedly flooding messages due to unforeseen edge cases. 

**Requester Info**
John N Pham, Northrop Grumman","enhancement, draco-rc3",https://github.com/nasa/cFE/issues/2095
"Fix #2092, Doc deploy from local workflow on main branch push","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #2092

Workflow deploys document locally to avoid deployment password issues when trying to deploy from cache in reusable.  Also doesn't skip main branch actions so it will deploy on push to main.

**Testing performed**
CI

**Expected behavior changes**
Document deploy fixed

**System(s) tested on**
CI: tested on fork here - https://github.com/skliper/cFE/actions/runs/2203904971

**Additional context**
Depends on updates in cFS reusable workflow so it won't get skipped
- nasa/cFS#466

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, dependency, draco-rc2",https://github.com/nasa/cFE/pull/2094
Default to 64 bit memory address/offset for all IO (cmd/tlm/tbl/binary dumps),"**Is your feature request related to a problem? Please describe.**
CFE_ES_MemAddress_t/CFE_ES_MEMADDRESS_C and CFE_ES_MemOffset_t/CFE_ES_MEMOFFSET_C are used to convert cpuaddr into a fixed size for cmd/tlm/tbl/binary output.   Currently they are both hard-coded to uint32:
https://github.com/nasa/cFE/blob/81416f8f3552c2b0f85e820f4f423f62f8aee634/modules/core_api/fsw/inc/cfe_es_extern_typedefs.h#L377-L426

Problem is this basically is just wasted space on 64 bit and also requires querying a separate element to know if these values are valid.   Also ends up reducing functionality (and not supporting some requirements on certain apps).
https://github.com/nasa/cFE/blob/81416f8f3552c2b0f85e820f4f423f62f8aee634/modules/core_api/fsw/inc/cfe_es_extern_typedefs.h#L458-L472

There's also cases where validity isn't actually indicated within the element as in tbl tlm:
https://github.com/nasa/cFE/blob/81416f8f3552c2b0f85e820f4f423f62f8aee634/modules/tbl/fsw/inc/cfe_tbl_msg.h#L792-L828

Note MM, CS, and MD also all have memory addresses in IO.

**Describe the solution you'd like**
Default to 64 bit everywhere and reorganize IO to avoid implicit padding where possible based on the change.  This is a breaking change (IO change) so probably appropriate to either provide backwards compatibility or target a major release.

This does waste space on 32-bit systems, but makes it such that the values are always valid (no longer need a special flag as long as the underlying functionality is still valid).  None of the uses are in what would typically be high rate telemetry so should be minimal impact.  If really need we could support configurability, or projects could locally modify if really needed.

**Describe alternatives you've considered**
None

**Additional context**
Discussed at 20220420 CCB

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, breaking",https://github.com/nasa/cFE/issues/2093
Documentation deployment fails on push to main,"**Is your feature request related to a problem? Please describe.**
See https://github.com/nasa/cFE/actions/runs/2192023287, fails deployment step

**Describe the solution you'd like**
Likely due to secret not being passed in explicitly to reusable workflow

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","continuous-integration, draco-rc2",https://github.com/nasa/cFE/issues/2092
cFE Integration Candidate: Caelum-rc4+dev8,"**Describe the contribution**

PR #2082     
- Fix #2067, Only increment SB InternalErrorCounter on errors


PR #2081     
- Fix #2076, Improve ES unit test coverage


PR #2080     
- Fix #2075, Add config module to coverage enforcemnt

PR #2085     

Consistent doxygen flow/naming for generation and use reusable documentation generation workflow

- Fix #2083, 
- Fix #2086, 


PR #2077     
- Fix #2079, Remove contributor license agreements

**Testing performed**

cFE Checks <https://github.com/nasa/cFE/pull/2091/checks>
cFS Bundle Checks <https://github.com/nasa/cfs/pull/461/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04
RTEMS 4.11 and 5

**Additional context**
Part of nasa/cFS#461

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
skliper
chillfig",draco-rc2,https://github.com/nasa/cFE/pull/2091
Unit test won't build with external time source configuration,"**Is your feature request related to a problem? Please describe.**
Many failures in build with `ENABLE_UNIT_TESTS=true` and the following settings:
```
#define CFE_PLATFORM_TIME_CFG_SOURCE true
#define CFE_PLATFORM_TIME_CFG_SRC_TIME true
#define CFE_MISSION_TIME_CFG_FAKE_TONE false
```

This has already been noted in the general time unit testing issue #109 which includes many other unit test issues with changing time config.  Raising priority on this one with a unique issue since it's currently a stakeholder impact.

**Describe the solution you'd like**
Fix this configuration at minimum, which is often used when supplying cFS with time from an external source (or app).

**Describe alternatives you've considered**
Time services does need a general refactor as noted in #302, many issues w/ the unit tests as noted in #109.
Really would benefit from converting the configuration files to cmake as described in #2089.

**Additional context**
#2072 fixed the build issue, but unit test fails to build.

**Requester Info**
Jacob Hageman - NASA/GSFC per stakeholder request","unit-test, draco-rc2",https://github.com/nasa/cFE/issues/2090
Convert mission/platform cFE configuration to cmake to support source selection,"**Is your feature request related to a problem? Please describe.**
Many configuration options involve conditionally compiled code which is discouraged in various coding standards and makes unit testing multiple configurations require separate builds.

**Describe the solution you'd like**
Switch to the OSAL pattern of defining configuration via cmake file(s), which then could be used to source select during the prep.  Also all units could then be tested/covered regardless of the actual selection to ensure code isn't rotting.  Functional testing would still require a separate build, but at least this would show the code still compiles in the unit test setup.

**Describe alternatives you've considered**
Add multiple unit test builds

**Additional context**
#302 as a specific example of a related issue.

Note MSG already uses cmake variables for source selection, which should be added to the config.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/2089
"Fix #2084, Add support for fractional seconds in epoch","Describe the contribution
Fix #2084

Testing performed
Build/run unit tests, confirm same coverage of time module

Expected behavior changes
Epoch contains a value for fractional seconds in the form of a CFE_MISSION_TIME_EPOCH_MICROS. This value is included in the time value before generating the printable string in CFE_TIME_Print

System(s) tested on

Hardware: i7/Virtual Box
OS: CentOS Linux 7.9
Versions: Bundle main plus this component
Additional context
None

Third party code
None

Contributor Info - All information REQUIRED for consideration of pull request
Jonathan Brandenburg - NASA/JSC","CCB:Approved, draco-rc2",https://github.com/nasa/cFE/pull/2088
Fix 2084 add fractional seconds to epoch,"**Describe the contribution**
Fix #2084 

**Testing performed**
Build/run unit tests, confirm same coverage of time module

**Expected behavior changes**
Epoch contains a value for fractional seconds in the form of a `CFE_MISSION_TIME_EPOCH_MICROS`. This value is included in the time value before generating the printable string in `CFE_TIME_Print`

**System(s) tested on**
 - Hardware: i7/Virtual Box
 - OS: CentOS Linux 7.9
 - Versions: Bundle main plus this component

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jonathan Brandenburg - NASA/JSC
",invalid,https://github.com/nasa/cFE/pull/2087
Use document generation reusable workflow,"**Is your feature request related to a problem? Please describe.**
Updates to make documentation more consistent for #2083 requires an update to the documentation generation workflow, so also switching to use reusable workflow added by nasa/cFS#451.

**Describe the solution you'd like**
Use reusable workflow added by nasa/cFS#451

**Describe alternatives you've considered**
None

**Additional context**
Depends on nasa/cFS#451

**Requester Info**
Jacob Hageman - NASA/GSFC","docs, draco-rc2",https://github.com/nasa/cFE/issues/2086
"Fix #2083 #2086, Consistent doxygen flow/naming for generation and use reusable documentation generation workflow","**Describe the contribution**
- Fix #2083
- Fix #2086

**Testing performed**
Tested via https://github.com/skliper/cFS/actions/runs/2161038232

**Expected behavior changes**
More consistent naming supports doc generation reusable workflow use

**System(s) tested on**
CI w/ modified reference passed at https://github.com/skliper/cFE/actions/runs/2161429776

**Additional context**
Depends on nasa/cFS#451 addition of reusable workflow

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, dependency, draco-rc2",https://github.com/nasa/cFE/pull/2085
Support for fractional seconds in epoch definition,"Would a change to accept fractional seconds for the time epoch be accepted into cFE?

cFE supports setting the epoch of time with a granularity of seconds. Here is a relevant extract from `sample_mission_cfg.h`:

```
/**
**  \cfetimecfg Default EPOCH Values
**
**  \par Description:
**      Default ground time epoch values
**      Note: these values are used only by the CFE_TIME_Print() API function
**
**  \par Limits
**      Year - must be within 136 years
**      Day - Jan 1 = 1, Feb 1 = 32, etc.
**      Hour - 0 to 23
**      Minute - 0 to 59
**      Second - 0 to 59
*/
#define CFE_MISSION_TIME_EPOCH_YEAR   1980
#define CFE_MISSION_TIME_EPOCH_DAY    1
#define CFE_MISSION_TIME_EPOCH_HOUR   0
#define CFE_MISSION_TIME_EPOCH_MINUTE 0
#define CFE_MISSION_TIME_EPOCH_SECOND 0
```

It seems the definition of a commonly used epoch, J2000, contains fractional seconds: `January 1, 2000, 11:58:55.816 UTC`

As this issue is written, I've locally modified `CFE_TIME_Print()` to account for fractional seconds using a `CFE_MISSION_TIME_EPOCH_MICROS` macro, defined in this example to 816000. I have not yet written the unit tests. Here is a fragment from `cfe_time_api.c`:

```
    /*
    ** Convert the cFE time (offset from epoch) into calendar time...
    */
    NumberOfMicros = CFE_TIME_Sub2MicroSecs(TimeToPrint.Subseconds) + CFE_MISSION_TIME_EPOCH_MICROS;

    NumberOfMinutes = (NumberOfMicros / 60000000) + (TimeToPrint.Seconds / 60) + CFE_MISSION_TIME_EPOCH_MINUTE;
    NumberOfMicros = NumberOfMicros % 60000000;

    NumberOfSeconds = (NumberOfMicros / 1000000) + (TimeToPrint.Seconds % 60) + CFE_MISSION_TIME_EPOCH_SECOND;
    NumberOfMicros = NumberOfMicros % 1000000;

    /*
    ** Adding the epoch ""seconds"" after computing the minutes avoids
    **    overflow problems when the input time value (seconds) is
    **    at, or near, 0xFFFFFFFF...
    */

    while (NumberOfSeconds >= 60)
    {
        NumberOfMinutes++;
        NumberOfSeconds -= 60;
    }
```",draco-rc2,https://github.com/nasa/cFE/issues/2084
Use consistent documentation generation directories/names to support matrix actions from cFS,"**Is your feature request related to a problem? Please describe.**
Naming isn't consistent, osal-apiguide uses osalguide directory, mission-doc generates a detaildesign directory but the warning file gets put in the docs directory instead of subdir, etc.

**Describe the solution you'd like**
Make behavior consistent.

**Describe alternatives you've considered**
None

**Additional context**
Cleaning up top level nasa/cFS#447

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc2",https://github.com/nasa/cFE/issues/2083
"Fix #2067, Only increment SB InternalErrorCounter on errors","**Describe the contribution**
- Fix #2067 

**Testing performed**
Build/run unit tests, confirm coverage (asserts added to verify behavior)

**Expected behavior changes**
No longer increments `InternalErrorCounter` for timeouts or no message which are not internal errors

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/cFE/pull/2082
"Fix #2076, Improve ES unit test coverage","**Describe the contribution**
- Fix #2076 

**Testing performed**
Build/run unit tests and confirmed coverage

**Expected behavior changes**
Improves coverage

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Also tightened up the coverage enforcement

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/cFE/pull/2081
"Fix #2075, Add config module to coverage enforcemnt","**Describe the contribution**
- Fix #2075

**Testing performed**
CI

**Expected behavior changes**
None, just adds enforcement

**System(s) tested on**
CI

**Additional context**
Will update minimum coverage as part of fix to #2076

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/cFE/pull/2080
Replace cFE CLA with bundle Bootes CLA forms,"**Is your feature request related to a problem? Please describe.**
Remove the individual and corporate contributor license agreement.

**Describe the solution you'd like**
Removal of the respective individual and corporate contributor license agreement pdfs from nasa/cFE.

**Additional context**
Depends on https://github.com/nasa/cFS/pull/448

**Requester Info**
Justin Figueroa, ASRC Federal
",draco-rc2,https://github.com/nasa/cFE/issues/2079
"Fix #1097, adds truncation warning suppression flags","**Describe the contribution**
- Fix #1097 

Adds printf-style format and string operation truncation warning suppression flags.

**Testing performed**
Tested on fork: https://github.com/chillfig/cFE/actions?query=branch%3Asupress_trunc_warnings

**Expected behavior changes**
None, flags should prevent warnings on future compilations using latest systems. 

**System(s) tested on**
Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, ASRC Federal

EDIT - JH: Added reference to issue so it will autolink
","CCB:Approved, draco-rc2",https://github.com/nasa/cFE/pull/2078
"Fix #2079, remove contributor license agreements","**Describe the contribution**
- Fixes #2079 

Adds checklist for CLA and contributing guide.

**Expected behavior changes**
Working links. Removal of the respective individual and corporate contributor license agreement pdfs from nasa/cFE.

**Additional context**
Depends on https://github.com/nasa/cFS/pull/448 

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, ASRC Federal","CCB:Approved, dependency, draco-rc2",https://github.com/nasa/cFE/pull/2077
ES missing coverage in cfe_es_task.c of `CFE_ES_ModSrcVerCallback`,"**Is your feature request related to a problem? Please describe.**
Not covered at all:
https://github.com/nasa/cFE/blob/a6c6b65a43fceb623bbac5bfc305c68b03317982/modules/es/fsw/src/cfe_es_task.c#L215-L223

**Describe the solution you'd like**
Add coverage

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","coverage, draco-rc2",https://github.com/nasa/cFE/issues/2076
Add `config` module to coverage enforcement CI `code-coverage.yml`,"**Is your feature request related to a problem? Please describe.**
Config module missing from code coverage CI enforcement

**Describe the solution you'd like**
Add - note the uncovered minimums should also be updated based on latest results (22 lines 54 branches)

**Describe alternatives you've considered**
None

**Additional context**
https://github.com/nasa/cFE/blob/a6c6b65a43fceb623bbac5bfc305c68b03317982/.github/workflows/code-coverage.yml#L62-L91

**Requester Info**
Jacob Hageman - NASA/GSFC
","continuous-integration, draco-rc2",https://github.com/nasa/cFE/issues/2075
cFE Integration candidate: Caelum-rc4+dev7,"**Describe the contribution**

PR #2070
- Fix #2069, Update copyright header


PR #2073
- Fix #2072, Resolve build failure for time cfg source

PR #2071
- HOTFIX #2066, Set CFE_REVISION = 99 and CFE_MISSION_REV = 0xff


**Testing performed**
cFE Checks <https://github.com/nasa/cFE/pull/2074/checks>
cFS Bundle checks <https://github.com/nasa/cFS/445/checks>

Failed CodeQL Workflow is being examined


**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu
RTEMS

**Additional context**
Part of nasa/cFS#445

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@astrogeco ",draco-rc1,https://github.com/nasa/cFE/pull/2074
"Fix #2072, Resolve build failure for time cfg source","**Describe the contribution**
- Fix #2072

**Testing performed**
Built with settings described in #2072, note unit tests don't build yet with those settings (see #109 )

**Expected behavior changes**
Code will at least build

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
#109 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2073
Build failure with CFE_PLATFORM_TIME_CFG_SRC_TIME == true,"**Describe the bug**
Build failures when enabling time source configuration.

```
/cfe/modules/time/fsw/src/cfe_time_tone.c:570:61: error: ‘CFE_TIME_ToneDataCmd_t {aka struct CFE_TIME_ToneDataCmd}’ has no member named ‘CmdHeader’; did you mean ‘CommandHeader’?
             CFE_SB_TransmitMsg(&CFE_TIME_Global.ToneDataCmd.CmdHeader.Msg, false);
```

**To Reproduce**
- Set `CFE_PLATFORM_TIME_CFG_SOURCE` true
- Set `CFE_PLATFORM_TIME_CFG_SRC_TIME` true
- Set `CFE_MISSION_TIME_CFG_FAKE_TONE` false

**Expected behavior**
Should build and run.

**Code snips**
See warning above, note 3 instances of the old reference.

**System observed on:**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC
","bug, draco-rc1",https://github.com/nasa/cFE/issues/2072
HOTFIX #2066: Revert changes to versioning information,"**Describe the contribution**

Per conversation in CCB:2022-03-24 and in https://github.com/nasa/cFE/commit/e5be0612ad6bf9db09ddf640306a65292abce2d5#commitcomment-69358417

Ensuring REVISION number is set to 99
Correct cfs_versions.dox appropriately. 

**Testing performed**
Text and documentation only

**Expected behavior changes**
No behavior change

**System(s) tested on**
n/a

**Additional context**
https://github.com/nasa/cFE/commit/e5be0612ad6bf9db09ddf640306a65292abce2d5#commitcomment-69358417

**Third party code**
none

**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA",draco-rc1,https://github.com/nasa/cFE/pull/2071
"Fix #2069, Update copyright header","**Describe the contribution**
- Fix #2069

**Testing performed**
Documentation only, but built/ran unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",draco-rc1,https://github.com/nasa/cFE/pull/2070
Apply latest copyright header,"**Is your feature request related to a problem? Please describe.**
Updated copyright header

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc1",https://github.com/nasa/cFE/issues/2069
"Fix #760, Expand cmake documentation","**Describe the contribution**

Expands cmake documentation

**Testing performed**
Documentation-only, just proofreading

**Expected behavior changes**
None

**System(s) tested on**
n/a

**Additional context**
none

**Third party code**
none

**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA
Elizabeth Timmons (@ejtimmon), NASA",CCB:Ignore,https://github.com/nasa/cFE/pull/2068
SB Housekeeping InternalErrorCounter increments for nominal conditions,"**Describe the bug**
SB Housekeeping InternalErrorCounter increments for nominal conditions such as `CFE_SB_NO_MESSAGE` or `CFE_SB_TIME_OUT`

**To Reproduce**
Have apps running that poll a pipe or block w/ timeout


**Expected behavior**
InternalErrorCounter only increments on actual errors

**Code snips**
https://github.com/nasa/cFE/blob/a39b0a65fb2724692469ff492484b523fb4fa7e6/modules/sb/fsw/src/cfe_sb_api.c#L2003

**System observed on:**
 - SP0
 - OS: VxWorks 6.9
 - Versions: CFE 9c86dd4020327e52d894f1266d7b98d32dc6d34a

**Additional context**
Add any other context about the problem here.

**Reporter Info**
John N Pham, Northrop Grumman","bug, draco-rc2",https://github.com/nasa/cFE/issues/2067
cFE Integration candidate: Caelum-rc4+dev6,"**Describe the contribution**

PR #2066

- Fix #2064, Use osal-common.doxygen to resolve OSAL Doxygen refs

PR #2058 

- Fix #2055, Refactor doxygen mainpage into frontpage


**Testing performed**

cFE Checks <https://github.com/nasa/cFE/pull/2066/checks>
cFS Bundle Checks <https://github.com/nasa/cFE/pull/2066/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04
RTEMS 4.11/5 (bundle)

**Additional context**
Part of https://github.com/nasa/cFS/pull/443

Docs build will fail until bundle IC is merged, see successful build at https://github.com/nasa/cFS/actions/runs/1995027651

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper",draco-rc1,https://github.com/nasa/cFE/pull/2066
"Fix #2064, Use osal-common.doxygen to resolve OSAL Doxygen refs","**Describe the contribution**
- Fix #2064

**Testing performed**
Built osal users guide and cfe users guide and mission doc from bundle level, confirmed contents.

**Expected behavior changes**
Docs only, reduces dependencies

**System(s) tested on**
 - Hardware: i5/wsl
 - OS:  Ubuntu 18.04
 - Versions: Bundle main + this commit + nasa/osal#1232

**Additional context**
nasa/osal#1332

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, dependency, draco-rc1",https://github.com/nasa/cFE/pull/2065
Use osal common config to resolve OSAL doxygen references and provide default settings,"**Is your feature request related to a problem? Please describe.**
Path dependencies in cfe on OSAL

**Describe the solution you'd like**
Use the osal-common.doxygen instead, removes cfe dependency on OSAL paths

**Describe alternatives you've considered**
None

**Additional context**
Depends on nasa/osal#1232

**Requester Info**
Jacob Hageman - NASA/GSFC","docs, draco-rc1",https://github.com/nasa/cFE/issues/2064
CFE_ES_WaitForStartupSync() -- behavior if timeout reached?,"I'm a little confused by the CFE_ES_WaitForStartupSync() timeout, there's no way to determine if the timeout was reached (except looking at wall clock time elapsed) and what should the application do if the timeout is reached (if anything)? I'm guessing that the caller should just proceed assuming startup has completed even if the timeout was reached, but perhaps this can be made clear in the documentation for this function?

I plan to use this for SBN but perhaps I should be using CFE_ES_WaitForSystemState() instead? The comments imply CFE_ES_WaitForStartupSync() is a convenience and may be deprecated?

https://github.com/nasa/cFE/blob/1d3e4cdcb67be21032663f1227c8fbe81e9ff5a1/modules/core_api/fsw/inc/cfe_es.h#L460",question,https://github.com/nasa/cFE/issues/2062
Nonmonotonicity with CFE_TIME_GetTime,"**Describe the bug**
The time returned by CFE_TIME_GetTime() is not monotonically increasing.

**To Reproduce**
Steps to reproduce the behavior:
Create a new app (add the appropriate configuration to startup script and targets.cmake) with the following files:

runner.c:
```C
#include ""cfe.h""
#include ""cfe_error.h""
#include ""cfe_es.h""
#include ""cfe_evs.h""
#include ""cfe_sb.h""
#include ""unistd.h""

void TIME_AppMain(void)
{
    uint32_t prevSeconds;
    uint32_t prevSubseconds;
    long     counter = 0;

    while (true)
    {
        CFE_TIME_SysTime_t currTimestamp = CFE_TIME_GetTime();

        uint32_t currSeconds    = currTimestamp.Seconds;
        uint32_t currSubseconds = currTimestamp.Subseconds;

        if (counter > 0)
        {
            if (prevSeconds > currSeconds || (prevSeconds == currSeconds && prevSubseconds > currSubseconds))
            {
                CFE_ES_WriteToSysLog(""Timestamp Discrepancy"");

                CFE_ES_WriteToSysLog(""Previous Timestamp: Seconds: %u\tSubseconds: %u"", prevSeconds, prevSubseconds);

                CFE_ES_WriteToSysLog(""Current Timestamp: Seconds: %u\tSubseconds: %u"", currSeconds, currSubseconds);

                CFE_ES_WriteToSysLog(""timestamp count: %ld "", counter);
            }
        }
        usleep(1000);
        counter++;
        prevSeconds    = currSeconds;
        prevSubseconds = currSubseconds;
    }
}
```

analyze_time/CMakeLists.txt:
```cmake
project(CFE_ANALYZE_TIME C)

add_cfe_app(analyze_time runner.c)
```

**Expected behavior**
There should never be any case when a timestamp has the same Seconds but lower Subseconds field than an earlier timestamp.

**Code snips**
see above

**System observed on:**
 - OS: 5.4.0-100-generic Ubuntu


**Additional context**
The frequency with which the time discrepancy is printed decreases when the input to the usleep() function is increased.  Still, there is always one timestamp discrepancy printed regardless of the input to usleep(). We first noticed the behavior while trying to read data from an IMU sending values at roughly 125Hz.",question,https://github.com/nasa/cFE/issues/2063
cFE Integration candidate: Caelum-rc4+dev4,"**Describe the contribution**

PR #2056

- Fix #2054, Missing SB include for v2 msgid

PR #2052

- Fix #2051, Resolve doxygen doc warnings and enforce in CI

PR #2050     
- Fix #2049, Remove explicit filename doxygen comments

PR #2048     
- Fix #2047, Add CFE_ES_CreateChildTask default handler


**Testing performed**

cFE Checks <https://github.com/nasa/cFE/pull/2061/checks>
- *NOTE:* Failing documentation build passes in bundle CI, requires osal dependency
- cFS Bundle Checks <https://github.com/nasa/cFS/pull/432/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04
RTEMS 4.11 and 5

**Additional context**
Part of https://github.com/nasa/cFS/pull/432

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper ",draco-rc1,https://github.com/nasa/cFE/pull/2061
Incomplete conversion of CFE_SB_MsgId_t in test_cfe_msg_msgid_v2.c,"**Describe the bug**
Building the cFE unit tests with MISSION_INCLUDE_CCSDSEXT_HEADER and MISSION_MSGID_V2 set to TRUE fails due to compiler errors in modules/msg/ut-coverage/test_cfe_msg_msgid_v2.c. The errors are due to calling CFE_MSG_SetMsgId() with a ""message ID"" parameter which is an integer, not a CFE_SB_MsgId_t.

**To Reproduce**
Steps to reproduce the behavior:
1. Configure the sample mission with MISSION_INCLUDE_CCSDSEXT_HEADER and MISSION_MSGID_V2 set to TRUE.
2. Attempt to build the unit tests. Note compiler errors.

**Expected behavior**
The unit tests should compile without error.

**Code snips**
See attached patch.
[test_cfe_msg_msgid_v2_patch.txt](https://github.com/nasa/cFE/files/8129826/test_cfe_msg_msgid_v2_patch.txt)

**System observed on:**
 - ""Hardware"": Generic x86-64 PC VM on VirtualBox 6.1.30, running on macOS 11.6.3.
 - OS: Ubuntu 20.04.4
 - Compiler: gcc 9.3.0
 - Versions: Current head of cFE 'main' branch, OSAL v6.0.0-rc4, PSP v1.6.0-rc4

**Additional context**
Toolchain is configured to build 32-bit apps.

**Reporter Info**
Chuck Fry, QTS Inc., a subcontractor to KBR Wyle on ISRDS-3, NASA ARC Code TI
chuck.fry@nasa.gov
",unit-test,https://github.com/nasa/cFE/issues/2060
CCSDS v2: msg module unit test inconsistencies with CFE_SB_INVALID_MSG_ID,"**Describe the bug**
The msg_UT test fails at test_cfe_msg_msgid_v2.c:59. The check at that location expects CFE_MSG_SetMsgId() to return CFE_MSG_BAD_ARGUMENT when given CFE_SB_INVALID_MSG_ID as the message ID. Instead the function returns CFE_SUCCESS.

When a check against CFE_SB_INVALID_MSG_ID is added, a number of new failures appear, notably at test_cfe_msg_init.c:68, test_cfe_msg_ccsdsext.c:64, test_cfe_msg_ccsdsext.c:74, and test_cfe_msg_msgid_V2.c:71. The first, third, and fourth expect a message ID with a value of 0 to be legal. The second check passes the constant CFE_SB_INVALID_MSG_ID itself and expects success.

**To Reproduce**
Steps to reproduce the behavior:
1.  Configure the sample mission with MISSION_INCLUDE_CCSDSEXT_HEADER and MISSION_MSGID_V2 set to TRUE.
2. Build the unit tests.
3. Run 'make test'. Note failure in msg_UT.

**Expected behavior**
Consistent enforcement of an API error check on the msg module. The documentation for CFE_MSG_SetMsgId() says:

> The user should ensure that this function is only called with a valid MsgId parameter value.  If called with an invalid value, the results are implementation-defined.  The implementation may or may not return the error code #CFE_MSG_BAD_ARGUMENT in this case.

The function is behaving as documented. The unit test suite itself is inconsistent about whether the function should reject CFE_SB_INVALID_MSG_ID as invalid.

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - ""Hardware"": Generic x86-64 PC VM on VirtualBox 6.1.30, host macOS 11.6.3.
 - OS: Ubuntu 20.04.4, 64-bit.
 - Compiler: gcc 9.3.0.
 - Versions: cFE@98f78e8604c w/ local fixes to correct compiler errors in test_cfe_msg_msgid_v2.c (bug report to follow), OSAL v6.0.0-rc4, PSP v1.6.0-rc4

**Additional context**
Toolchain is configured to build as a 32-bit program.

**Reporter Info**
Chuck Fry, QTS Inc., a subcontractor to KBR Wyle on the ISRDS-3 contract, NASA ARC Code TI
chuck.fry@nasa.gov
",unit-test,https://github.com/nasa/cFE/issues/2059
"Fix #2055, Refactor doxygen mainpage into frontpage","**Describe the contribution**
- Fix #2055
- Also refactors how mission documentation is created to support the front page concept

**Testing performed**
Built doc, usersguide, osalguide and confirmed layout/contents

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: i5/wsl2
 - OS: Ubuntu 18.04
 - Versions: Bundle main + #2052 + this commit

**Additional context**
Hard to pull apart from #2052, so submitted on top.  30a4c4e835712955f6776a207678941950ac0a08 is the subject of this merge.  Will fail until #2052 dependencies are merged.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2058
Update app dev guide and unit tests to use `CFE_MSG_PTR` instead of `&(x).Msg`,"**Is your feature request related to a problem? Please describe.**
`&(x).Msg` still used in UT and docs where `CFE_MSG_PTR` should be used to avoid dependency on internal CFE_MSG_Message_t elements.

**Describe the solution you'd like**
Replace with `CFE_MSG_PTR`

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, unit-test",https://github.com/nasa/cFE/issues/2057
"Fix #2054, Missing SB include for v2 msgid","**Describe the contribution**
- Fix #2054 

**Testing performed**
Stand alone build and CI

**Expected behavior changes**
Clean V2 build (see details in #2054)

**System(s) tested on**
 - Hardware: i5/wsl2
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2056
"Doxygen `mainpage` if needed should not contain unique content, just references","**Is your feature request related to a problem? Please describe.**
Currently `mainpage` has content, and since only one `mainpage` can exist in a doxygen document other documents can not include this unique information.

**Describe the solution you'd like**
Doxygen will set up document in order, so could just replace `mainpage` with a front page and `INPUT` the front page first.

**Describe alternatives you've considered**
Make 'mainpage' just a reference to other pages.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC per project request.
","docs, draco-rc1",https://github.com/nasa/cFE/issues/2055
Link error when building with MISSION_MSGID_V2 = TRUE,"**Describe the bug**
cFE compiles (with warnings about implicit function declarations), but linking the cfe_core executable errors out with undefined references to symbols `CFE_SB_ValueToMsgId` and `CFE_SB_MsgIdToValue`.

**To Reproduce**
Steps to reproduce the behavior:

1. Create a mission configuration. Modify global_build_options.cmake by adding the following two lines:
    set(MISSION_INCLUDE_CCSDSEXT_HEADER TRUE)
    set(MISSION_MSGID_V2 TRUE)

2. Build cFS. The following warnings will be issued when compiling cfe_msg_msgid_v2.c:
    [ 77%] Building C object msg/CMakeFiles/msg.dir/fsw/src/cfe_msg_msgid_v2.c.o
    /home/dsa/lpnt_ws/dsa_lpnt_fsw/fsw/cFS/cfe/modules/msg/fsw/src/cfe_msg_msgid_v2.c: In function ‘CFE_MSG_GetMsgId’:
    /home/dsa/lpnt_ws/dsa_lpnt_fsw/fsw/cFS/cfe/modules/msg/fsw/src/cfe_msg_msgid_v2.c:80:14: warning: implicit declaration of function ‘CFE_SB_ValueToMsgId’ [-Wimplicit-function-declaration]
       80 |     *MsgId = CFE_SB_ValueToMsgId(msgidval);
          |              ^~~~~~~~~~~~~~~~~~~
    /home/dsa/lpnt_ws/dsa_lpnt_fsw/fsw/cFS/cfe/modules/msg/fsw/src/cfe_msg_msgid_v2.c: In function ‘CFE_MSG_SetMsgId’:
    /home/dsa/lpnt_ws/dsa_lpnt_fsw/fsw/cFS/cfe/modules/msg/fsw/src/cfe_msg_msgid_v2.c:96:36: warning: implicit declaration of function ‘CFE_SB_MsgIdToValue’ [-Wimplicit-function-declaration]
       96 |     CFE_SB_MsgId_Atom_t msgidval = CFE_SB_MsgIdToValue(MsgId);
          |                                    ^~~~~~~~~~~~~~~~~~~
The following error will be reported at the link phase:
    [100%] Linking C executable core-cpu1
    /usr/bin/ld: ../msg/libmsg.a(cfe_msg_msgid_v2.c.o): in function `CFE_MSG_GetMsgId':
    cfe_msg_msgid_v2.c:(.text+0x8b): undefined reference to `CFE_SB_ValueToMsgId'
    /usr/bin/ld: ../msg/libmsg.a(cfe_msg_msgid_v2.c.o): in function `CFE_MSG_SetMsgId':
    cfe_msg_msgid_v2.c:(.text+0xd1): undefined reference to `CFE_SB_MsgIdToValue'
    collect2: error: ld returned 1 exit status
    make[11]: *** [cpu1/CMakeFiles/core-cpu1.dir/build.make:199: cpu1/core-cpu1] Error 1

3. The bug occurs because the two functions are defined as 'static inline' in cfe_sb.h, which is not referenced in cfe_msg_msgid_v2.c, and because the C language prior to the C99 standard implicitly defines functions as `int fn_name(int)`. Simply adding `#include ""cfe_sb.h""` fixes the problem.

**Expected behavior**
core-cpu1 should compile and link cleanly.

**Code snips**
See attached patch file.

[msg_v2_link_error_patch.txt](https://github.com/nasa/cFE/files/8119734/msg_v2_link_error_patch.txt)

**System observed on:**
 - Hardware: VirtualBox 6.1.30 emulation of a generic x86-64 system on macOS 11.6.3
 - OS: Ubuntu 20.04
 - Compiler: GCC 9.3.0
 - Versions: cFE tag v7.0.0-rc4, OSAL tag v6.0.0-rc4, PSP tag v1.6.0-rc4

**Additional context**

**Reporter Info**
Chuck Fry, QTS Inc., subcontractor to KBR Wyle on the ISRDS3 contract, at NASA ARC Code TI
chuck.fry@nasa.gov
","bug, draco-rc1",https://github.com/nasa/cFE/issues/2054
Message struct definitions in default_cfe_msg_hdr_priext.h conflict with cfe_msg_api_typedefs.h,"**Describe the bug**
When MISSION_INCLUDE_CCSDSEXT_HEADER is set to TRUE in global_build_options.cmake, the file modules/msg/option_inc/default_cfe_msg_hdr_priext.h is included in place of .../default_cfe_msg_hdr_pri.h. The definitions in default_cfe_msg_hdr_priext.h conflict with those in modules/core_api_fsw/inc/cfe_msg_api_typedefs.h.

**To Reproduce**
Steps to reproduce the behavior:

1. Define a mission configuration. Modify global_build_options.cmake by adding the following two lines:
    set(MISSION_INCLUDE_CCSDSEXT_HEADER TRUE)
    set(MISSION_MSGID_V2 TRUE)

2. Attempt to build cFS. Observe compilation errors while compiling. See attached file cfe_typedef_errors.txt for example error messages.

[cfe_typedef_errors.txt](https://github.com/nasa/cFE/files/8119528/cfe_typedef_errors.txt)

**Expected behavior**
cFE should compile cleanly.

**Code snips**
See attached patch file. 

[cFE_msgdefs_patch_2022-02-22.txt](https://github.com/nasa/cFE/files/8119526/cFE_msgdefs_patch_2022-02-22.txt)

**System observed on:**
 - Hardware: VirtualBox emulation of an x86-64 system on macOS 11.6.3
 - OS: Ubuntu Linux 20.04
 - Compiler: GCC v9.3.0 with -m32 flag, all other options standard for RelWithDebInfo build type
 - Versions: cFE tag v7.0.0-rc4; OSAL tag v6.0.0-rc4; PSP tag v1.6.0-rc4

**Additional context**

**Reporter Info**
Chuck Fry, QTS Inc., a subcontractor to KBR Wyle on the ISRDS3 contract at NASA ARC Code TI
chuck.fry@nasa.gov

",duplicate,https://github.com/nasa/cFE/issues/2053
"Fix #2051, Resolve doxygen doc warnings and enforce in CI","**Describe the contribution**
- Fix #2051 

**Testing performed**
Built doc standalone and confirmed with all the merges it built without warnings

**Expected behavior changes**
None except warnings squashed

**System(s) tested on**
 - Hardware: i5/wsl2
 - OS: Ubuntu 18.04
 - Versions: Bundle main + dependent commits

**Additional context**
Needs nasa/osal#1219

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, dependency, draco-rc1",https://github.com/nasa/cFE/pull/2052
Resolve detailed design doxygen generation warnings from `make doc` and enforce in CI,"**Is your feature request related to a problem? Please describe.**
`make doc` produces warnings

**Describe the solution you'd like**
Fix issues to resolve warnings, enforce in CI

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc1",https://github.com/nasa/cFE/issues/2051
"Fix #2049, Remove explicit filename doxygen comments","**Describe the contribution**
- Fix #2049

**Testing performed**
Make doc, observe no filename warnings

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2050
Remove explicit file name references in doxygen file comments to avoid warnings,"**Is your feature request related to a problem? Please describe.**
File comment without a filename implies the comments apply to the current file.  Adding the file name makes doxygen try to match that file.  The issue is there's multiple files with the same name, so doxygen gets confused unless you add full path.  Really it's just overhead since the point is to comment the current file.

Sample warning if you `make doc` from the bundle:
```
/home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c:22: warning: the name `os-impl-binsem.c' supplied as the second argument in the \file statement matches the following input files:
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/rtems/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/vxworks/src/os-impl-binsem.c
Please use a more specific name by including a (larger) part of the path!
```

**Describe the solution you'd like**
Easiest to just remove the name since for every case the comment applies to the current file

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc1",https://github.com/nasa/cFE/issues/2049
"Fix #2047, Add CFE_ES_CreateChildTask default handler","**Describe the contribution**
- Fix #2047 

**Testing performed**
CI, also tested with cs unit test which depended on the behavior, passed

**Expected behavior changes**
Default handler sets parameter

**System(s) tested on**
 - Hardware: i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Related to #2046

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2048
Add CFE_ES_CreateChildTask default handler,"**Is your feature request related to a problem? Please describe.**
See #2046 for full issue/scrub details.  This issue just fixes `CFE_ES_CreateChildTask`

**Describe the solution you'd like**
Add handler

**Describe alternatives you've considered**
None

**Additional context**
#2046 

**Requester Info**
Jacob Hageman - NASA/GSFC","unit-test, draco-rc1",https://github.com/nasa/cFE/issues/2047
"Implement default handlers for APIs that set values, not all exist (needs full scrub)","**Is your feature request related to a problem? Please describe.**
There aren't default handlers for all APIs that set parameters, leading to potential uninitialized variables when unit testing code that expects the parameter to be set if guaranteed by the API.

**Describe the solution you'd like**
For API's that initialize/set id's or really any other case where the parameter should always be set there should be a default handler to avoid uninitialized variable issues for the code under test.

Example preferred handler:
https://github.com/nasa/cFE/blob/99429bfb5ae8c6929efbbd054bd3c85e1c23c9cd/modules/core_api/ut-stubs/src/cfe_es_handlers.c#L124-L151

Example of a missing handler - `CFE_ES_CreateChildTask`.  At minimum for success the id should be set valid.

**Describe alternatives you've considered**
Initialize the passed in parameter, but when initialized to invalid if there isn't a handler to set it for the valid case the test will fail.  It's better than the often silent uninitialized variable issue but for APIs that always set the parameter the burden shouldn't be on the flight code to fix the test issue.

**Additional context**
Planning to spawn individual issues based on identified cases, but this issue relates to a full scrub.

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/2046
Expand ut-stub handlers,"**Is your feature request related to a problem? Please describe.**
cFS Apps duplicate ut handler extensions suggesting a general need for extra functionality

**Describe the solution you'd like**

Add ut functionality duplicated across GSFC Apps. See this [:lock: conversation](https://aetd-git.gsfc.nasa.gov/gsfc-cfs/cfs_lc/-/merge_requests/47#note_255922)

And changes in the following merge requests

:lock: <https://aetd-git.gsfc.nasa.gov/gsfc-cfs/cfs_hs/-/merge_requests/46>

:lock: <https://aetd-git.gsfc.nasa.gov/gsfc-cfs/cfs_hk/-/merge_requests/36>

:lock: <https://aetd-git.gsfc.nasa.gov/gsfc-cfs/cfs_fm/-/merge_requests/58>

:lock: <https://aetd-git.gsfc.nasa.gov/gsfc-cfs/cfs_md/-/merge_requests/49>

:lock: <https://aetd-git.gsfc.nasa.gov/gsfc-cfs/cfs_mm/-/merge_requests/48>

:lock: <https://aetd-git.gsfc.nasa.gov/gsfc-cfs/cfs_sc/-/merge_requests/55>

:lock: <https://aetd-git.gsfc.nasa.gov/gsfc-cfs/cfs_cs/-/merge_requests/51>

:lock: <https://aetd-git.gsfc.nasa.gov/gsfc-cfs/cfs_ds/-/merge_requests/45>

**Describe alternatives you've considered**

Add a template in a users or developers guide ?

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",unit-test,https://github.com/nasa/cFE/issues/2045
"Fix #2106, remove redundant word","**Describe the contribution**
- Fix #2106

A clear and concise description of what the contribution is.
- Removes redundant word in the Application Developer's Guide in order to make documentation clearer

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - No impact to behavior


**Contributor Info - All information REQUIRED for consideration of pull request**
Personal - Hugo Valente
","CCB:Approved, docs, draco-rc2",https://github.com/nasa/cFE/pull/2044
cFE Integration candidate: Caelum+dev3,"**Describe the contribution**

PR #2042

- Fix #2039, Replace CFE_SB_ValueToMsgId(0) with CFE_SB_INVALID_MSG_ID

PR #2041

- Fix #2040, Improve CFE_SB_IsValidMsgId handler

PR #2037

- Fix #2036, Revert breaking change to CFE_ES_AppInfo_t structure

PR #2035

- Fix #2034, Fix git error in CodeQL workflow

**Expected behavior changes**
See PRs

**Testing performed**

cFE Checks <https://github.com/nasa/cFE/pull/2043/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/414/checks>

Note that CodeQL workflow will fail until nasa/cFS#414 is merged. Passing test can be seen in nasa/cFE#2035

**System(s) tested on**
Ubuntu 18.04


**Additional context**
Part of https://github.com/nasa/cFS/pull/414

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper ",draco-rc1,https://github.com/nasa/cFE/pull/2043
"Fix #2039, Replace CFE_SB_ValueToMsgId(0) with CFE_SB_INVALID_MSG_ID","**Describe the contribution**
- Fixes #2039 

**Expected behavior changes**
 - No impact to behavior

**Contributor Info - All information REQUIRED for consideration of pull request**
Paul Oberosler - Personal","CCB:Approved, community, draco-rc1",https://github.com/nasa/cFE/pull/2042
"Fix #2040, Improve CFE_SB_IsValidMsgId handler","**Describe the contribution**
- Fix #2040 
- If no return value override is set test against CFE_SB_INVALID_MSG_ID

**Testing performed**
Build/run unit tests, passed.
Used with DS and confirm units under test worked as expected based on valid/invalid MID use.

**Expected behavior changes**
Handler behaves more like expected

**System(s) tested on**
 - Hardware: i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2041
`CFE_SB_IsValidMsgId` handler default behavior fails if return not set,"**Is your feature request related to a problem? Please describe.**
Any UT not setting the return for `CFE_SB_IsValidMsgId` will see the call fail in the unit under test:
https://github.com/nasa/cFE/blob/07fb34854af9667c31216f6cfe615843952f0821/modules/core_api/ut-stubs/src/cfe_sb_handlers.c#L399-L409

**Describe the solution you'd like**
<ore helpful to test against CFE_SB_INVALID_MSG_ID if the return isn't set.

**Describe alternatives you've considered**
None

**Additional context**
Just test against invalid, since max is configurable and UT's shouldn't rely on it.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc1",https://github.com/nasa/cFE/issues/2040
Replace CFE_SB_ValueToMsgId(0) with CFE_SB_INVALID_MSG_ID,"**Is your feature request related to a problem? Please describe.**
Using zero explicitly isn't great, for the most part all cases should be replace with just using the invalid macro:
```
cfe/modules/cfe_testcase/src/msg_api_test.c:    UtAssert_INT32_EQ(CFE_MSG_Init(NULL, CFE_SB_ValueToMsgId(0), sizeof(cmd)), CFE_MSG_BAD_ARGUMENT);
cfe/modules/cfe_testcase/src/msg_api_test.c:    msgId = CFE_SB_ValueToMsgId(0);
cfe/modules/cfe_testcase/src/message_id_test.c:    CFE_SB_MsgId_t msgid = CFE_SB_ValueToMsgId(0);
cfe/modules/msg/ut-coverage/test_cfe_msg_ccsdsext.c:    CFE_UtAssert_SUCCESS(CFE_MSG_SetMsgId(&msg, CFE_SB_ValueToMsgId(0)));
cfe/modules/msg/ut-coverage/test_cfe_msg_msgid_shared.c:    CFE_SB_MsgId_t    msgid  = CFE_SB_ValueToMsgId(0);
cfe/modules/msg/ut-coverage/test_cfe_msg_init.c:    UtAssert_INT32_EQ(CFE_MSG_Init(NULL, CFE_SB_ValueToMsgId(0), sizeof(cmd)), CFE_MSG_BAD_ARGUMENT);
cfe/modules/msg/ut-coverage/test_cfe_msg_init.c:    UtAssert_INT32_EQ(CFE_MSG_Init(CFE_MSG_PTR(cmd), CFE_SB_ValueToMsgId(0), 0), CFE_MSG_BAD_ARGUMENT);
cfe/modules/sbr/ut-coverage/test_cfe_sbr_map_hash.c:    UtAssert_INT32_EQ(CFE_SBR_SetRouteId(CFE_SB_ValueToMsgId(0), CFE_SBR_ValueToRouteId(0)), 0);
cfe/modules/sbr/ut-coverage/test_cfe_sbr_map_hash.c:    UtAssert_BOOL_FALSE(CFE_SBR_IsValidRouteId(CFE_SBR_GetRouteId(CFE_SB_ValueToMsgId(0))));
cfe/modules/sbr/ut-coverage/test_cfe_sbr_map_hash.c:    msgid[0]   = CFE_SB_ValueToMsgId(0);
cfe/modules/sbr/ut-coverage/test_cfe_sbr_map_direct.c:    UtAssert_INT32_EQ(CFE_SBR_SetRouteId(CFE_SB_ValueToMsgId(0), CFE_SBR_ValueToRouteId(0)), 0);
cfe/modules/sbr/ut-coverage/test_cfe_sbr_map_direct.c:    UtAssert_BOOL_FALSE(CFE_SBR_IsValidRouteId(CFE_SBR_GetRouteId(CFE_SB_ValueToMsgId(0))));
cfe/modules/sbr/ut-coverage/test_cfe_sbr_map_direct.c:    msgid   = CFE_SB_ValueToMsgId(0);
cfe/modules/sbr/ut-coverage/test_cfe_sbr_route_unsorted.c:    UtAssert_BOOL_FALSE(CFE_SBR_IsValidRouteId(CFE_SBR_AddRoute(CFE_SB_ValueToMsgId(0), NULL)));
cfe/modules/sbr/ut-coverage/test_cfe_sbr_route_unsorted.c:    UtAssert_BOOL_FALSE(CFE_SBR_IsValidRouteId(CFE_SBR_AddRoute(CFE_SB_ValueToMsgId(0), &collisions)));
cfe/modules/sbr/ut-coverage/test_cfe_sbr_route_unsorted.c:    msgid[0] = CFE_SB_ValueToMsgId(0);
cfe/modules/tbl/fsw/src/cfe_tbl_task.c:    CFE_MSG_Init(CFE_MSG_PTR(CFE_TBL_Global.NotifyMsg.CommandHeader), CFE_SB_ValueToMsgId(0),
```

**Describe the solution you'd like**
Replace with CFE_SB_INVALID_MSG_ID

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, good first issue, draco-rc1",https://github.com/nasa/cFE/issues/2039
Implement message dispatch table within SB for unified validation and invocation of handler,"**Is your feature request related to a problem? Please describe.**
Most (but not all!) applications use a big `switch` statement to interpret the MID and command code, and invoke a handler.

Problem is:
- Still done very inconsistently. Styles of this `switch` vary significantly in terms of where the checks are done, and the type of validation that is done (some apps still don't do length checks before casting)
- Fundamentally still requires interpretation of MsgId as integer value, because a `switch` in C only works on integer values.  Ideally apps should treat MsgId as opaque, not do any local interpretation of the value.
- Some apps don't use the `switch` approach at all, implementing a dispatch table instead.  Notable examples are TBL services, and the CF app.  While these both use the general concept of a table lookup to a function pointer, they are implemented pretty differently.

**Describe the solution you'd like**
The dispatch table is a cleaner design, since it allows the application code to be more agnostic to how MIDs work.  Notably, the part that interprets/matches the MIDs can be put into SB, thereby no longer requiring the _app itself_ to interpret/match the MIDs.

But rather than letting every app individually migrate to this pattern and have each one done differently, the framework should preemptively add a generic dispatch routine within SB.

The generic function should:
- Validate the initial message MID coming in (does it match any known MID in the table)
- Interpret and validate the command code, if the msg has one (does it match any known CC in the table)
- Confirm that the length of the message is correct
- Cast the message to the correct ""real"" type and invoke the handler function that was provided from the app.

**Describe alternatives you've considered**
See TBL services and CF app, its the same idea.

**Additional context**
Framework needs to add this alternative method of dispatching first, but apps wouldn't be required to use it (backward compatible).

The framework apps in Draco could all be converted to a dispatch table.  But GSFC and other external CFS apps would continue using their existing methods in order to remain ""Caelum-compatible"" but could be updated over time to the unified dispatched as warranted, if/when changed for other reasons....

This is also somewhat related to/part of #994 ... it would cover one of the items listed in there (generic length check)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/2038
"Fix #2036, Revert breaking change to CFE_ES_AppInfo_t structure","**Describe the contribution**
- Fix #2036

**Testing performed**
CI (unit test build/execute)

**Expected behavior changes**
No behavior change but reverts breaking software change (public structure modification)

**System(s) tested on**
CI

**Additional context**
Need to decide if we should reopen #1300 as future work for a major update cycle

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2037
"Revert app info structure modification (#1300, #1911), relative to Draco development cycle","**Is your feature request related to a problem? Please describe.**
`CFE_ES_AppInfo_t` is public so the change in #1911/#1300 is breaking.  Shouldn't have been included in Draco.  Makes CS non-portable between Caelum and Draco.

**Describe the solution you'd like**
Revert.

**Describe alternatives you've considered**
Could add accessor functions or some sort of abstraction/layer or back-port, but the change really is very low priority.  Could be considered in a future major update cycle if there's some actual benefit from the additional structure.

Could make CS adapt also (conditional compilation or whatever), but I don't think it's worth it for this sort of change or carrying that option.

**Additional context**
Need to decide if we want to reopen #1300 as future work or leave closed.

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, draco-rc1",https://github.com/nasa/cFE/issues/2036
"Fix #2034, Update CodeQL workflow","**Describe the contribution**

Depends on nasa/cFS#413

Fixes #2034 

- Replace Checkout Action for bundle with git clone
- Use symlink to map calling repo workspace to expected cFS Bundle
directory location
- Replace bundle checkout action with git clone
- Adds component-path input parameter
- Adds ""code snippets"" to CodeQL Analyze action

**Testing performed**

See PR checks Tab

**Expected behavior changes**

CodeQL Action executes successfully. 

**System(s) tested on**
- Github actions, Ubuntu 18.04

**Additional context**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA","CCB:Approved, dependency, continuous-integration, draco-rc1",https://github.com/nasa/cFE/pull/2035
"CodeQL Workflow Fails after ""upload"" stage","**Describe the bug**
CodeQL workflow fails in the code ql analyze step, specifically right after the ""upload"" stage. 

See failed run in 

https://github.com/nasa/cFE/actions/runs/1726828015

Also silent ""failure"" in

https://github.com/nasa/cFE/runs/4892024047?check_suite_focus=true

```
Cleaning up databases
  /opt/hostedtoolcache/CodeQL/0.0.0-20211208/x64/codeql/codeql database cleanup /home/runner/work/_temp/codeql_databases/cpp --mode=brutal
  Cleaning up existing TRAP files after import...
  TRAP files cleaned up (3ms).
  Cleaning up scratch directory...
  Scratch directory cleaned up (0ms).

fatal: ambiguous argument 'refs/remotes/pull/2019/merge': unknown revision or path not in the working tree.
```

**To Reproduce**
Run latest CodeQL workflow 

**Expected behavior**
Passing workflow run

**Code snips**
If applicable, add references to the software.

**System observed on:**
- Github Actions, Ubuntu 18.04

**Additional context**
Can be fixed by updating workflow to use nasa/cFS#413
","continuous-integration, draco-rc1",https://github.com/nasa/cFE/issues/2034
"Fix #2032, Add CFE_ES_AppInfo_t element documentation","**Describe the contribution**
- Fix #2032

**Testing performed**
Documentation only/CI

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: CI only
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, docs, draco-rc1",https://github.com/nasa/cFE/pull/2033
Add app info structure element descriptions back in,"**Is your feature request related to a problem? Please describe.**
Element descriptions were dropped in #1029 
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/core_api/fsw/inc/cfe_es_extern_typedefs.h#L435-L441
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/core_api/fsw/inc/cfe_es_extern_typedefs.h#L475-L479

**Describe the solution you'd like**
Add element descriptions

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, docs, draco-rc1",https://github.com/nasa/cFE/issues/2032
"Fix #2030, array length calculation for perf structs","**Describe the contribution**
Cleans up the array length calculation for perf structs to not assume a specific base element type (uint32).  This also makes the definitions much more readable.

Fixes #2030

**Testing performed**
Build and sanity check CFE

**Expected behavior changes**
None w/current structure definitions.  Just a bit of future-proofing and clean up.

**System(s) tested on**
Ubuntu 21.10

**Additional context**
Notably the EDS build actually does use a different base type for this array, so this is not just cosmetic.  But this is a worthwhile cleanup regardless.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2031
"ES PERF array size calculation assumes ""uint32"" array base type","**Describe the bug**
The ES perf code uses macros to determine the array length based on the overall array size (via `sizeof()`).  Problem is, these calculations hard-code a `uint32` type as the divisor (element size) which may not always be true.

**To Reproduce**
Change the definition of the masks in TLM to be e.g. uint8-based instead of uint32-based.  Array lengths are now calculated incorrectly, because it divides by `sizeof(uint32)` which would now be wrong.

**Expected behavior**
Should use `[0]` to get the actual type of the element, this makes the calculation future-proof, as it does not assume/repeat the array element type (adheres to DRY principle)

**Code snips**
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/es/fsw/src/cfe_es_task.c#L51-L57

**System observed on:**
Ubuntu 21.10

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, draco-rc1",https://github.com/nasa/cFE/issues/2030
"Fix #2028, Initialize BlockData in ES UT","**Describe the contribution**
- Fix #2028 
- Initializes BlockData in ES UT TestCDS

**Testing performed**
Build/run unit tests w/ valgrind

**Expected behavior changes**
Unit test only

**System(s) tested on**
 - Hardware: i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Probably caught in static analysis but we've got way too many nuisance warnings...

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2029
Initialize CDS block data in es unit testing to avoid uninit var warnings from valgrind,"**Is your feature request related to a problem? Please describe.**
Block data is used uninitialized in unit test:
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/es/ut-coverage/es_UT.c#L4669
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/es/ut-coverage/es_UT.c#L4789
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/es/ut-coverage/es_UT.c#L4795

**Describe the solution you'd like**
Initialize.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, draco-rc1",https://github.com/nasa/cFE/issues/2028
"Fix #2026, CFE_FS_ParseInputFileNameEx avoid uninit var","**Describe the contribution**
- Fix #2026 
- Uses input buffer if default is NULL to set output to avoid uninitialized variables in unit test

**Testing performed**
Build/run unit tests with valgrind, eliminates warning

**Expected behavior changes**
Unit test only

**System(s) tested on**
 - Hardware: i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
I wonder if this would have been caught sooner if we had a different bucket for ""critical"" static analysis checks.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2027
Use input if default not set for parsing file name,"**Is your feature request related to a problem? Please describe.**
`CFE_FS_ParseInputFileName` handler sets output to input as last resort (avoids uninit vars).  `CFE_FS_ParseInputFileNameEx` only sets the output to default if default isn't null, so there's cases in the ES unit test where the output isn't initialized since there is no default value.
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/core_api/ut-stubs/src/cfe_fs_handlers.c#L171-L176

**Describe the solution you'd like**
If `DefaultInput` is NULL, use `InputName`

**Describe alternatives you've considered**
None

**Additional context**
Any unit that uses `CFE_FS_ParseInputFileNameEx` with a NULL default risks uninit var, example:
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/es/fsw/src/cfe_es_task.c#L879-L882

**Requester Info**
Jacob Hageman - NASA/GSFC",draco-rc1,https://github.com/nasa/cFE/issues/2026
"Fix #2024, osal_id_t type conversion in es_UT.c","**Describe the contribution**
Corrects the implicit type conversion from an osal_id_t to an integer, making it explicit by using the OS_ObjectIdToInteger() conversion function.

Fixes #2024

**Testing performed**
Build with strict osal_id_t type definition.  Run all tests.

**Expected behavior changes**
None.

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2025
Implicit/incorrect OSAL ID type conversion in es_UT.c,"**Describe the bug**
The following line in unit tests makes an implicit conversion between `OS_OBJECT_ID_UNDEFINED` (an osal_id_t) and an integer:

https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/es/ut-coverage/es_UT.c#L4522

This is allowed with the current permissive type definition, but fails when building with strict types.

**To Reproduce**
Use a type-safe definition for osal_id_t.  This conversion fails and results in a compiler error.

**Expected behavior**
Should use `OS_ObjectIdToInteger()` here - easiest way to make it work without changing logic.

**System observed on:**
Ubuntu 21.10

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",draco-rc1,https://github.com/nasa/cFE/issues/2024
"Fix #2022, Limit SBR UT loops","**Describe the contribution**
- Fix #2022 
- Limits SBR UT loops to avoid potentially long tests of questionable value

**Testing performed**
Built/ran unit tests, confirmed acceptable timing

**Expected behavior changes**
None, UT only

**System(s) tested on**
 - Hardware: i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, Priority: Mission, draco-rc1",https://github.com/nasa/cFE/pull/2023
Limit SBR message id loops for reasonable test times,"**Is your feature request related to a problem? Please describe.**
Loops over CFE_PLATFOR_SB_HIGHEST_VALID_MSGID can take a long time on some systems (many minutes).  Unit tests that cover the full range for the default setting is sufficient to show proper operation.
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/sbr/ut-coverage/test_cfe_sbr_map_direct.c#L55-L61
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/sbr/ut-coverage/test_cfe_sbr_map_direct.c#L77-L83
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/sbr/ut-coverage/test_cfe_sbr_map_hash.c#L74-L80

**Describe the solution you'd like**
Limit the loops.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman NASA/GSFC

@excaliburtb
","enhancement, draco-rc1",https://github.com/nasa/cFE/issues/2022
Username change,I changed my username from (at)pavll to @paulober. The problem is that someone else claimed my old name an now he's mentioned every time (at)pavll was used(mostly PRs). Do I have to state this change somewhere for my nasa opensource contribs(because GitHub doesn't redirect @ mentions to new usernames)?,question,https://github.com/nasa/cFE/issues/2021
Add configurable symbol scope option for apps,"**Is your feature request related to a problem? Please describe.**
In Caelum, apps were switched to have local symbol scope when getting loaded (on systems that support it) to avoid discouraged design behaviors and possible issues with unloading/reloading if apps share symbols.  Really libs should contain all global scope symbols used by other apps (and are still loaded with global scope) and are never unloaded (requires restart to modify).

https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/es/fsw/src/cfe_es_apps.c#L418-L442

The down-side of this change is apps like MM, MD, CS all become more challenging to use when symbols are not available and a global symbol table dump won't include the app symbols.  Although sharing symbols from a reloadable app is likely never a good idea due to the potential for executing or utilizing stale memory, there's definitely a trade related to maintenance/portability.  Likely use case would be to compile w/ local app symbols to ensure apps are not sharing symbols, but then switch to global for testing and/or release build for systems that require it.

**Describe the solution you'd like**
Add a configuration option to load apps with global or local scope (also helpful to have background as to why each might be selected).  This also allows a system that supports local symbols to behave like a system that doesn't support it for simulation/portability purposes.

**Describe alternatives you've considered**
Could add an option at in the startup config, but probably overkill to set at an app by app basis.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",invalid,https://github.com/nasa/cFE/issues/2020
cFE Integration Candidate: Caelum+dev2,"**Describe the contribution**

PR nasa/cFE#2033  

- Fix #2032, Add CFE_ES_AppInfo_t element documentation

PR nasa/cFE#2015, 

- Fix #1823, FS Functional test

PR nasa/cFE#2012, 

- Fix #1997, Mismatched foreach in cmake function

PR nasa/cFE#2013, 

- Fix #2016, Improved code highlighting in cFE Application Developers Guide

PR nasa/cFE#2027, 

- Fix #2026, CFE_FS_ParseInputFileNameEx avoid uninit var

PR nasa/cFE#2031, 

- Fix #2030, array length calculation for perf structs

PR nasa/cFE#2023, 

- Fix #2022, Limit SBR UT loops

PR nasa/cFE#2029, 

- Fix #2028, Initialize BlockData in ES UT

PR nasa/cFE#2025, 

- Fix #2024, osal_id_t type conversion in es_UT.c

PR #2011 

- Fix #2009, Reuse CodeQL, Static Analysis, and Format Check 
 
**Testing performed**
cFE Checks <https://github.com/nasa/cFE/pull/2019/checks> 
cFS Bundle Checks <https://github.com/nasa/cFS/pull/410/checks> 

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04 
RTEMS (bundle level) 

**Additional context**
Part of https://github.com/nasa/cFS/pull/410

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**

@ArielSAdamsNASA
@skliper
@jphickey
@paulober
@Nodraak",draco-rc1,https://github.com/nasa/cFE/pull/2019
Functional tests may crash if created tasks use floating points,"**Describe the bug**
Some functional tests create tasks without using the `OS_FP_ENABLED` flag. Depending on the platform they are running, the spawned tasks might require floating points to be enabled for the task, otherwise we get an exception.

**Code snips**
These two tests don't use OS_FP_ENABLED to create a task:
https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/cfe_testcase/src/es_task_test.c#L159-L162

https://github.com/nasa/cFE/blob/c161cf04fe7c5fd2f2a533ac1d7522b31191eab6/modules/cfe_testcase/src/tbl_registration_test.c#L245-L248

Possible fix is to add OS_FP_ENABLED to the function call.

es_task_test.c:
```
    /* Now do the same but instead of a CFE child task, make an OSAL task that is not associated with a CFE app */
    UtAssert_INT32_EQ(OS_TaskCreate(&OtherTaskId, ""NonCfe"", TaskFunctionCheckNonAppContext, OSAL_TASK_STACK_ALLOCATE,
                                    4096, OSAL_PRIORITY_C(200), OS_FP_ENABLED),
                      OS_SUCCESS);
```

tbl_registration_test.c:
```
    /* Create a separate task to run the tests, to confirm TBL context checks */
    UtAssert_INT32_EQ(OS_TaskCreate(&OtherTaskId, ""NonCfe"", TestTblNonAppContext, OSAL_TASK_STACK_ALLOCATE, 16384,
                                    OSAL_PRIORITY_C(200), OS_FP_ENABLED),
                      OS_SUCCESS);
```


**System observed on:**
 - Hardware: DLEON processor
 - OS: RTEMS
 - Versions: cFS Bundle Caelum RC4

**Reporter Info**
Jose F. Martinez Pedraza / NASA GSFC
",invalid,https://github.com/nasa/cFE/issues/2018
Functional tests fail when CFE_MISSION_SB_MAX_SB_MSG_SIZE is set to max value ,"**Describe the bug**

Several SB tests fail because the tests expect the mission to be using the default value of `CFE_MISSION_SB_MAX_SB_MSG_SIZE 32768`. If we use a value of `65536` (0x10000), the following tests fail:

```
[ FAIL] 59.017 sb_sendrecv_test.c:135 - CFE_SB_TransmitMsg(&CFE_FT_BigMsg.Hdr, true) (0) == CFE_SB_MSG_TOO_BIG (-905969657)
...
[ FAIL] 60.032 sb_sendrecv_test.c:456 - CFE_MSG_Init(&CmdBuf->Msg, CFE_FT_CMD_MSGID, sizeof(CFE_FT_BigMsg)) (-905969661) == CFE_SUCCESS (0)
[ FAIL] 60.033 sb_sendrecv_test.c:457 - CFE_SB_TransmitBuffer(CmdBuf, true) (0) == CFE_SB_MSG_TOO_BIG (-905969657)
...
[ FAIL] 60.035 sb_sendrecv_test.c:461 - CFE_SB_TransmitBuffer(CmdBuf, true) (-905969650) == CFE_SUCCESS (0)
```

See [test_failure.log](https://github.com/nasa/cFE/files/7694915/test_failure.log)

**To Reproduce**
Steps to reproduce the behavior:
1. Set `CFE_MISSION_SB_MAX_SB_MSG_SIZE` to `65536`
2. Run the cFE functional tests

**System observed on:**
 - Hardware: LEON processor
 - OS: RTEMS
 - Versions: cFS bundle Caelum RC4

**Reporter Info**
Jose F. Martinez Pedraza / NASA GSFC

",unit-test,https://github.com/nasa/cFE/issues/2017
Specify language for improved code highlighting in App Developers Guide,"**Is your feature request related to a problem? Please describe.**

Github's markdown render engine can display code syntax highlighting in code blocks 

**Describe the solution you'd like**
Add language specification to markdown code blocks

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
@Nodraak 
",draco-rc1,https://github.com/nasa/cFE/issues/2016
"Fix #1823, FS Functional test","**Describe the contribution**
- Fixes #1823

**Contributor Info - All information REQUIRED for consideration of pull request**
Personal
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2015
Compiling in external libraries,"Hi,
I am currently trying to run the core flight executive on a FreeRTOS environment.  I am currently using a community port based on an older version and am running into some difficulties during the linking stage.  My main issue I believe is due to the fact that I am trying to link an externally compiled library that contains FreeRTOS and all of the device drivers generated by my IDE.  

However, when I insert the following lines into the CMakeLists.txt file in the osal folder:

add_library(libfreertros STATIC IMPORTED)

set_target_properties(libfreertos PROPERTIES IMPORTED_LOCATION ""/home/user1/projects/cfs/bsp/libfreertos.a"")

I get an error:
set_target_properties Can not find target to add properties to: libfreertos



Please let me know if this is the appropriate place to post this:
  ",question,https://github.com/nasa/cFE/issues/2014
"Fix #2016, cFE Application Developers Guide.md: specify language for improved code highlighting","**Describe the contribution**

Fixes #2016 
Specify the language to improve the code highlighting.


**Testing performed**

None.

**Expected behavior changes**

No impact to behavior or API.
","CCB:Approved, docs, community, draco-rc1",https://github.com/nasa/cFE/pull/2013
"Fix #1997, Mismatched foreach in cmake function","**Describe the contribution**
- Fixes #1997

**Additional context**
-> conversation at #1997 

**Contributor Info - All information REQUIRED for consideration of pull request**
Personal
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/2012
"Fix #2009, Reuse CodeQL, Static Analysis, and Format Check","**Describe the contribution**
Fixes #2009 

**Testing performed**
cFE Format Check Reuse: https://github.com/ArielSAdamsNASA/cFE-1/actions/runs/1391282928
cFE CodeQL Reuse: https://github.com/ArielSAdamsNASA/cFE-1/actions/runs/1391287778
cFE Static Analysis Reuse: https://github.com/ArielSAdamsNASA/cFE-1/actions/runs/1391772550

**Expected behavior changes**
cFE will reuse CodeQL, Static Analysis, and Format Checker that are held in cFS. These workflows will not work until nasa/cFS#386 is merged.

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal
","continuous-integration, draco-rc1",https://github.com/nasa/cFE/pull/2011
inttypes.h-style printf format strings for common types,"**Is your feature request related to a problem? Please describe.**
For Message ID's, cFS generally use 0x%08X but sometimes it's printed with 0x%08x (lowercase a-f), or without the 0x, or even as %d or %u. (Although I don't know if that's used anymore.) 

**Describe the solution you'd like**
Per https://en.wikipedia.org/wiki/C_data_types#Printf_and_scanf_format_specifiers C99 added printf format string macros for int types and it would be keen to follow this practice. I suggest PRIxMSG or PRIdMSG for printing (generally, sending an event message) a message ID in hex or decimal (defined as `""0x%08X""` and `""%u""` for unsigned integer (32-bit) MsgIds. So instead of:

`...SendEvent(...""Error: unable to process message (MsgId=0x%08X)"", MsgId)`

it would be:

`...SendEvent(...""Error: unable to process message (MsgId="" PRIxMSG "")"", MsgId)`

**Describe alternatives you've considered**
Leave well enough alone...:D

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",enhancement,https://github.com/nasa/cFE/issues/2010
"Reuse CodeQL, Format Checker, and Static Analysis Workflows","**Is your feature request related to a problem? Please describe.**
When needing to change workflows, one must create an issue and PR for each submodule. This feature would reduce duplication.

**Describe the solution you'd like**
To reuse workflows, the workflow simply uses `uses` and the full path of the workflow. The cFS workflows, or targeted workflows, must include workflow_call and runs-on as seen below. 
```
on:
  push:
  pull_request:
  workflow_call:
    inputs:
      runs-on: 
        description: Platform to execute on
        type: string
        default: ubuntu-latest
```

**Describe alternatives you've considered**
Keep it as is. 

**Additional context**
Tested in forked cFS: https://github.com/ArielSAdamsNASA/cFS-JSF-Rules/actions/runs/1381659167
Tested in forked OSAL: https://github.com/ArielSAdamsNASA/osal/actions/runs/1381486439

**Requester Info**
Ariel Adams, ASRC Federal","continuous-integration, draco-rc1",https://github.com/nasa/cFE/issues/2009
"Fix #2005, Format Check Add Duplicate Job","**Describe the contribution**
Fixes #2005 

**Testing performed**
https://github.com/ArielSAdamsNASA/cFE-1/actions/runs/1373110937

**Expected behavior changes**
Skips push actions if there is a matching or duplicate pull-request action. Changed name from static-analysis to format-check

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal
","duplicate, continuous-integration",https://github.com/nasa/cFE/pull/2008
"Fix #2006, Static Analysis Add Duplicate Check and Remove Main Push","**Describe the contribution**
Fixes #2006 

**Testing performed**
https://github.com/ArielSAdamsNASA/cFE-1/actions/runs/1373044819

**Expected behavior changes**
Skips push actions if there is a matching or duplicate pull-request action. Run on all branches for push and pull requests. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal
","duplicate, continuous-integration",https://github.com/nasa/cFE/pull/2007
"Static analysis in CI missing duplicate check, restricted to push to main","**Is your feature request related to a problem? Please describe.**
Missing duplicate check and restricting to main for pushes

Here:
https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/.github/workflows/static-analysis.yml#L4-L12

**Describe the solution you'd like**
Run on all pushes, add duplicate check

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","duplicate, continuous-integration",https://github.com/nasa/cFE/issues/2006
Format check in CI missing duplicate check,"**Is your feature request related to a problem? Please describe.**
Should skip format check if it's a duplicate action

Missing here:
https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/.github/workflows/format-check.yml#L15-L17

**Describe the solution you'd like**
Add duplicate check like the rest of the actions.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","duplicate, continuous-integration",https://github.com/nasa/cFE/issues/2005
cFE Application Developers Guide.md shows use of deprecated binary filter constant name,"**Describe the bug**
CFE_EVS_BINARY_FILTER appears in the guide, but the current usage is CFE_EVS_EventFilter_BINARY.

**To Reproduce**
N/A

**Expected behavior**
Update guide to show use of CFE_EVS_EventFilter_BINARY.

**Code snips**
There are 3 locations:
[Line 2308](https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L2308)
[Line 2334](https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L2334)
[Line 2403](https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L2403)

**System observed on:**
N/A

**Reporter Info**
Alan Gibson  NASA/GSFC 587
",docs,https://github.com/nasa/cFE/issues/2004
cFE Application Developers Guide.md showing use of deprecated event message constants,"**Describe the bug**
Developer's guide is still showing the old event message type names.

**To Reproduce**
N/A

**Expected behavior**
All uses of event message types should be updated to the currently used names in the guide.

**Code snips**
Main listing of Event Type values:
[Line 2214](https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L2214)

Examples of CFE_EVS_ERROR use within the guide:
[Line 1246](https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L1246)
[Line 1282](https://github.com/nasa/cFE/blob/b66661cc6e8f695d5ca9fa56217f58a291d5884d/docs/cFE%20Application%20Developers%20Guide.md?plain=1#L1282)

**System observed on:**
N/A

**Reporter Info**
Alan Gibson  NASA/GSFC 587
",docs,https://github.com/nasa/cFE/issues/2003
"Fix #1537, replacing hardcoded message limit in TIME services","**Describe the contribution**
Replacing the hardcoded message limits in the TIME services with `CFE_PLATFORM_SB_DEFAULT_MSG_LIMIT`. 

Fix #1537 
**Testing performed**
None

**Expected behavior changes**
None


**Contributor Info - All information REQUIRED for consideration of pull request**
Personal- Zachary Gonzalez
","CCB:Approved, community, draco-rc1",https://github.com/nasa/cFE/pull/2002
"cFE Integration Candidate, Caelum+dev1","**Describe the contribution**

PR #1663
- Fix #1546, use cfe time clock state enum t in cmd/tlm and handling

PR #1974
- Fix #1945, add CFE_SB_ValueToMsgId/MsgIdToValue wrappers
- Fix #1944, use 0 as the invalid CFE_SB_MsgId_t value
- Fix #245, use type safe value for CFE_SB_MsgId_t 

PR #1973 
- Fix #1818, EVS functional test add for different event types

PR #1954
- Fix #1952, Patch for recursive event loop
 
PR #1911
- Fix #1300, CFE_ES_MemAddOff structure to associated CFE_ES_MemAddress_t and CFE_ES_MemOffset_t

PR #1986
- Fix #1984, Avoid aliasing warnings 

PR #1975, Message ID type improvements
- Fixes #245
- Fixes #1944

PR #1663
- Fix #1546, Use CFE_TIME_ClockState_Enum_t in cmd/tlm and handling

PR #1995
- Fix #1988, Consolidate repeated MSG stub setup in sb_UT

PR #1873
- Fix #1672, Return type conversions in CFE_ES_GetTaskName

PR #1966
- Fix #1965, Better message type pointer conversion

PR #2002
- Fix #1537, Replacing hardcoded message limit in TIME services 

PR #1909
- Fix #1302, Use macro in CFE_ResourceId_IsDefined
 
PR #1999
- Fix #1928, Checking against IsNewOffset only



**Testing performed**
cFE Checks <https://github.com/nasa/cFE/pull/2001/checks> 
Bundle Checks <https://github.com/nasa/cFS/pull/390/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Part of <https://github.com/nasa/cFS/pull/390>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey
@pavll
@zachar1a",draco-rc1,https://github.com/nasa/cFE/pull/2001
Add delayed responses to command verification documentation related to command codes,"**Is your feature request related to a problem? Please describe.**
Missing documentation on delayed responses.  

For example, CFE_ES_STOP_APP_CC is a ""request"" which when initiated creates the CFE_ES_STOP_DBG_EID (documented), but when the request is actually completed a CFE_ES_STOP_INF_EID is sent (not documented).
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/es/fsw/inc/cfe_es_events.h#L90-L112
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/es/fsw/inc/cfe_es_msg.h#L234-L249

**Describe the solution you'd like**
Scrub ""request"" class of commands for complete verification documentation and add where missing.  Confirm these events are checked in test.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/2000
"Fix #1928, checking against IsNewOffset only","**Describe the contribution**
- Fix #1928 

Removed redundant check of `IsNewOffset && IsNewEntry` only using `IsNewOffset` now.

**Testing performed**
None

**Expected behavior changes**
None

**Additional context**
Add any other context about the contribution here.


**Contributor Info - All information REQUIRED for consideration of pull request**
Personal- Zachary Gonzalez

","CCB:Approved, community, draco-rc1",https://github.com/nasa/cFE/pull/1999
CFE_PLATFORM_ENDIAN -- not used...?,"#597 removed definitions for CCSDS_{BIG|LITTLE}_ENDIAN. In cfe/sample_defs/cpu1_platform_cfg.h, there is a definition for CFE_PLATFORM_ENDIAN but it is defined as CCSDS_LITTLE_ENDIAN but that is not defined anywhere. Also the comments mention that the valid values for CFE_PLATFORM_ENDIAN are ""0"" or ""1"".",enhancement,https://github.com/nasa/cFE/issues/1998
Mismatched foreach in cmake function,"The endforeach args do not match the foreach args

  foreach(APP ${MISSION_DEPS})
    list(APPEND VARLIST ""${APP}_MISSION_DIR"")
  endforeach(APP ${**MISSION_APPS**})


https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/cmake/mission_build.cmake#L362","enhancement, good first issue, draco-rc1",https://github.com/nasa/cFE/issues/1997
Logically Dead Code for CFE_MISSION_TIME_EPOCH_SECOND,"**Describe the bug**
Execution cannot reach this statement: NumberOfMinutes++;

**Expected behavior**
No unreachable code when CFE_MISSION_TIME_EPOCH_SECOND is configured as 0. 

**Code snips**
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/time/fsw/src/cfe_time_api.c#L632-L636

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
","duplicate, coverage",https://github.com/nasa/cFE/issues/1996
"Fix #1988, consolidate repeated MSG stub setup in sb_UT","**Describe the contribution**
Utilize the common setup/wrapper functions in ut_support.c whenever possible MSG dispatching in the generic handler.

Fixes #1988

**Testing performed**
Build and sanity check CFE, run all tests
Confirm that branch coverage is **not** changed from baseline

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Additional context**
Refactor for improved source maintenance/flexibility - but no behavior change, works identically

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/1995
Overrun warning false alarm for CFE_SB_Buffer_t ,"**Describe the bug**
Overrunning struct type CFE_SB_Buffer_t of 16 bytes by passing it to a function which accesses it at byte offset 32767 using argument MsgSize (which evaluates to 32768).

**Expected behavior**
Fix overrun

**Code snips**
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/sb/fsw/src/cfe_sb_api.c#L2081

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",enhancement,https://github.com/nasa/cFE/issues/1994
Incrementing ComponentPtr when pointing at ComponentTerm goes out of bounds (but isn't accessed),"**Describe the bug**
 Using ComponentPtr as an array. This might corrupt or misinterpret adjacent memory locations.

**Expected behavior**
Fix out-of-bounds access bug

**Code snips**
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/fs/fsw/src/cfe_fs_api.c#L565

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",enhancement,https://github.com/nasa/cFE/issues/1993
Overrun warnings false alarm for CFE_MSG_Message_t,"**Describe the bug**
Out-of-bounds access (OVERRUN)

**Expected behavior**
Fix overruns 

**Code snips**
Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 159 using argument 160UL. 
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/evs/fsw/src/cfe_evs_task.c#L75-L76

Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 47 using argument 48UL.
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/evs/fsw/src/cfe_evs_utils.c#L412-L413

Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 31 using argument 32UL.
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/sb/fsw/src/cfe_sb_task.c#L868

Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 43 using argument 44UL. 
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/sb/fsw/src/cfe_sb_task.c#L207-L208

Overrunning struct type CFE_MSG_Message_t of 16 bytes by passing it to a function which accesses it at byte offset 299 using argument 300UL.
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/tbl/fsw/src/cfe_tbl_task.c#L241

Overrunning struct type CFE_MSG_Message_t of 8 bytes by passing it to a function which accesses it at byte offset 27 using argument 28UL. 
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/time/fsw/src/cfe_time_utils.c#L355-L356

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",enhancement,https://github.com/nasa/cFE/issues/1992
Unsigned Compared Against 0 always true,"**Describe the bug**
This greater-than-or-equal-to-zero comparison of an unsigned value is always true. CmdPtr->TriggerMode >= CFE_ES_PERF_TRIGGER_START.

**Expected behavior**
Fix the if statement.

**Code snips**
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/es/fsw/src/cfe_es_perf.c#L168

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",enhancement,https://github.com/nasa/cFE/issues/1991
Dereference Null Return Value warning false alarm,"**Describe the bug**
Dereferencing BucketPtr, which is known to be NULL.

**Expected behavior**
Check if BucketPtr is not NULL before dereferencing. 

**Code snips**
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/es/fsw/src/cfe_es_generic_pool.c#L228

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Full name and company/organization if applicable
",enhancement,https://github.com/nasa/cFE/issues/1990
cFE Integration Candidate: 2021-10-05,"**Describe the contribution**


PR #1978

- Fix #1977, Functional requirements grammar cleanup 

PR #1983

- Fix #1982, extended header definitions and test updates


**Testing performed**
cFE Checks <https://github.com/nasa/cFE/pull/1989/checks>
cFS Bundle Checks

**Expected behavior changes**
See linked PRs

**System(s) tested on**
Ubuntu
RTEMS

**Additional context**
Part of <https://github.com/nasa/cFS/pull/371>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@jphickey ",draco-rc1,https://github.com/nasa/cFE/pull/1989
"Use ""CallTaskPipe"" wrapper in sb_UT","**Is your feature request related to a problem? Please describe.**
All other unit test modules (es, evs, tbl, time) go through a wrapper provided in the support code called `UT_CallTaskPipe` to invoke a command handler via the task's message handler function.  This helper function would set up the MSG stubs properly to dispatch to the given command code, avoiding the need to repeat the same setup calls dozens of times in the UT.

For historical reasons, the SB unit test did _not_ do this - because the message accessor functions were also implemented in SB, and therefore it could not rely on stub behavior to set up proper dispatch (i.e. it had to do the ""real"" thing).

However, with the advent of the separate MSG module, this is no longer the case.  The sb_UT.c now uses/sets up MSG stubs to do the dispatch, but it was never converted to use the same wrapper that other modules do.  Instead, the same setup code is repeated all over the tests.

**Describe the solution you'd like**
Convert oft-repeated sequences like:

```
UT_SetDataBuffer(UT_KEY(CFE_MSG_GetMsgId), &MsgIdCmd, sizeof(MsgIdCmd), false);
UT_SetDataBuffer(UT_KEY(CFE_MSG_GetSize), &Size, sizeof(Size), false);
UT_SetDataBuffer(UT_KEY(CFE_MSG_GetFcnCode), &FcnCode, sizeof(FcnCode), false);
....
CFE_SB_ProcessCmdPipePkt(MsgPtr);
```

To be:
```
UT_CallTaskPipe(CFE_SB_ProcessCmdPipePkt, MsgPtr, Params...);
```

**Additional context**
This is initially for clean up and readability, but it greatly improves flexibility too - if/when the core modules switch to a more intelligent verification and dispatch method, only UT_CallTaskPipe needs to be updated to support the dispatch method, not dozens (or even hundreds) of different test cases.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","unit-test, draco-rc1",https://github.com/nasa/cFE/issues/1988
Ic workflow upgrades,"**Describe the contribution**
A clear and concise description of what the contribution is.
- Include explicitly what issue it addresses [e.g. Fixes #X]

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
- Else if Company
  - **HAND SIGNED** Company CLA must be on file (once per release): [Company CLA](../docs/GSC_18128_Corp_CLA_form_1219.pdf)
- Else if Individual
  - **HAND SIGNED** Individual CLA must be on file (once per release): [Individual CLA](../docs/GSC_18128_Ind_CLA_form_1219.pdf)
",invalid,https://github.com/nasa/cFE/pull/1987
"Fix #1984, avoid aliasing warnings","**Describe the contribution**
Use an actual `void*` value when invoking functions that output an opaque pointer value.  If necessary the value of this pointer can then be assigned to the real pointer type to dereference.

Fixes #1984

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
No warnings when building with strict aliasing

**System(s) tested on**
Ubuntu 21.04 (gcc 10.3)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/1986
Check Return Value of CFE_ES_PutPoolBuf,"**Describe the bug**
Calling CFE_ES_PutPoolBuf without checking return value (as is done elsewhere 4 out of 5 times).

**Expected behavior**
Check return value of CFE_ES_PutPoolBuf as seen elsewhere. 

**Code snips**
https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/sb/fsw/src/cfe_sb_buf.c#L167

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Additional context**
Examples of return value being checked for CFE_ES_PutPoolBuf

https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/sb/fsw/src/cfe_sb_buf.c#L258-L259

https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/tbl/fsw/src/cfe_tbl_internal.c#L354-L362

**Reporter Info**
Ariel Adams, ASRC Federal
","enhancement, good first issue",https://github.com/nasa/cFE/issues/1985
Strict aliasing build errors in unit test code,"**Describe the bug**
When using strict aliasing in combination with tests (i.e. ENABLE_UNIT_TESTS=true), additional aliasing warnings are produced by GCC 10.3. 

**To Reproduce**
Build CFE with tests enabled along with strict aliasing compiler settings (`-O3 -fstrict-aliasing -Wstrict-aliasing=2`), build will fail with errors such as:

```
<top>/cfe/modules/core_api/ut-stubs/src/cfe_es_handlers.c: In function ‘UT_DefaultHandler_CFE_ES_GetAppID’:
<top>/cfe/modules/core_api/ut-stubs/src/cfe_es_handlers.c:136:60: error: dereferencing type-punned pointer might break strict-aliasing rules [-Werror=strict-aliasing]
  136 |         UT_GetDataBuffer(UT_KEY(CFE_ES_GetAppID), (void **)&IdBuff, &BuffSize, &Position);
      |                                                            ^~~~~~~
<top>/cfe/modules/core_api/ut-stubs/src/cfe_es_handlers.c: In function ‘UT_DefaultHandler_CFE_ES_GetTaskID’:
<top>/cfe/modules/core_api/ut-stubs/src/cfe_es_handlers.c:170:61: error: dereferencing type-punned pointer might break strict-aliasing rules [-Werror=strict-aliasing]
  170 |         UT_GetDataBuffer(UT_KEY(CFE_ES_GetTaskID), (void **)&IdBuff, &BuffSize, &Position);
      |                                                             ^~~~~~~
```

**Expected behavior**
Should build cleanly

**System observed on:**
Ubuntu 21.04 (w/gcc 10.3)

**Additional context**
Most of these are related to `(void**)` casts, which is easily resolved by making another local `void*` variable to temporarily hold the pointer.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, draco-rc1",https://github.com/nasa/cFE/issues/1984
"Fix #1982, extended header definitions and test updates","**Describe the contribution**
Do not double-typedef the CFE_MSG types when using extended headers.
This also corrects a call to UT_SetForceFail in the extended header test, which was renamed.

Fixes #1982

**Testing performed**
Build and run all CFE sanity checks, with extended headers enabled.

**Expected behavior changes**
Builds and runs correctly when extended headers are selected.

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/1983
Build errors when using extended headers,"**Describe the bug**
In Caelum when setting `set(MISSION_INCLUDE_CCSDSEXT_HEADER TRUE)` to use extended headers, I get a build error due to duplicate typedef of the MSG types:

```
cfe/modules/msg/option_inc/default_cfe_msg_hdr_priext.h:83:3: error: conflicting types for ‘CFE_MSG_Message_t’
   83 | } CFE_MSG_Message_t;
      |   ^~~~~~~~~~~~~~~~~
cfe/modules/core_api/fsw/inc/cfe_msg_api_typedefs.h:104:31: note: previous declaration of ‘CFE_MSG_Message_t’ was here
  104 | typedef union CFE_MSG_Message CFE_MSG_Message_t;
      |                               ^~~~~~~~~~~~~~~~~
```

**To Reproduce**
Enable extended headers in Caelum config, and build.

**Expected behavior**
Build should succeed.

**Code snips**
This is because the ""typedef"" cannot be in both places.  In contrast, the standard header (non-extended) defines only the union/struct, not typedef'ed:

https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/msg/option_inc/default_cfe_msg_hdr_pri.h#L65-L69

Whereas the extended header version has a typedef:

https://github.com/nasa/cFE/blob/98f78e8604c19415fd1e199eae94196a781539b8/modules/msg/option_inc/default_cfe_msg_hdr_priext.h#L63-L67

**System observed on:**
Ubuntu

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, cFS-Caelum, draco-rc1",https://github.com/nasa/cFE/issues/1982
CFE_SB_GetUserData needs functional test,"**Is your feature request related to a problem? Please describe.**
This function uses an overly simplistic method to determine the location of the payload structure:
1. It uses CFE_MSG calls to determine if its is CMD/TLM (assuming it has been initialized with a proper MsgId)
2. It adds the size of the corresponding header to the base pointer.

Problem is, this does not take into account compiler-added padding, which might be present depending on the size of the header and the alignment requirements of the payload member.

**Describe the solution you'd like**
Deprecate this function?  

Would need to come up with a solution for the places its used in CFS apps.

**Describe alternatives you've considered**
Move logic to CFE_MSG, where it knows details (alignment) of the header but that is unfortunately not really going to help, since its the alignment of the payload that is the issue here.  That is not known anywhere in a generic API.

**Additional context**
In EDS it could actually be made to work properly, because with this tool one knows the layout of the structures and whether or not padding exists - so it can get the real offset of the payload member.

Without EDS, there isn't much way to fix this, other than to ensure both TLM and CMD headers have explicit padding added to make them multiples of the worst-case payload alignment.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, deprecate",https://github.com/nasa/cFE/issues/1981
"Fix #1979, implement abstract config registry module","**Describe the contribution**
Adds a new module called ""config"" that tracks simple key/value pairs.  All values are const.

As a proof of concept, all version information is mirrored into this key store, and ES is updated to use this instead
of the GLOBAL_CONFIGDATA when generating events.

Fixes #1979

**Testing performed**
Build and sanity check CFE, run all tests.

**Expected behavior changes**
Slightly different version display during startup (module names are ALL_CAPS, mainly).  Otherwise pretty transparent.

**System(s) tested on**
Ubuntu

**Additional context**
This attempts to balance the advantages/disadvantages of having a string-based key/value store and an integer-based key/value store.  In this implementation, the table is primarily indexed by an integer, which is assigned at compile time, so its fast (direct lookup from key to table entry).  But the downside to this is that it creates a compile-time dependency on the assigned integer IDs.   So, the keys also have string names associated with them, such that an app can find a key by name, to avoid having a hard compile-time dependency on a particular configuration item, such as if its an optional component.

This also has the side effect of improving branch/line coverage in ES where it was reading the ""const"" configdata objects.  Due to the fact that configdata is declared ""const"", it means that coverage test can also only run with one copy.  Therefore, it could not cover all the branches as a result.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","enhancement, CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/1980
Implement generic runtime configuration registry for CFE,"**Is your feature request related to a problem? Please describe.**
Rather than compiling-in various values (e.g. via `cfe_platform_cfg.h` or `cfe_mission_cfg.h`) it would be more flexible and more useful to put many of these configuration items into some type of simple runtime registry.

The registry would be a simple key/value store, where the key is the configurable item ID, and the value is either an integer or a pointer to a global data object (ideally const, to avoid sharing/concurrent access issues).

The registry can be somewhat dynamic, allowing registry items to be easily added/extended.  Default values and text-based descriptions can also be potentially included.  

**Describe the solution you'd like**
User API that works something like:
- `uint32 CFE_ES_RegistryGetInt(uint32 Key);`
- `const void* CFE_ES_RegistryGetPointer(uint32 Key);`

**Additional context**
This would reduce dependency on `cfe_platform_cfg.h` and `cfe_mission_cfg.h` for keeping this type of value, and also provide a place for the version info currently in `cfe_version.h`.   Thereby consolidating the current bunch of different types of info with different access methods into one generic registry with a common, simple access method.

Similar model exists in UNIX/POSIX in the `sysconf` facility - so certain platform-specific values do not need to be compiled into binaries, thereby improving binary portability (i.e. compile once for a CPU arch, run anywhere that has that arch).  This would make the long-desired feature of separate CFE core and app builds closer to reality.

Of course Windows has its well-known registry, which is huge and unwieldy - this should _not_ turn into that.  More like UNIX sysconf, but with pointers/strings also supported, not just integers.

Other issues with `#define`-ed config values:
- Value is effectively compiled-into the binary, so if the value ever changes, modular binaries become incompatible (but this is _not_ actively detected - its a subtle, silent incompatibility).
- Works OK for integers, but not as well for strings, even less well for structured data
- Requires that the `cfe_mission_cfg.h` / `cfe_platform_cfg.h` be kept in sync with the source code.  New variables added in new builds must be manually propagated to the user build.


**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, draco-rc1",https://github.com/nasa/cFE/issues/1979
"Fix #1977, Functional requirements grammar cleanup","**Describe the contribution**
- Fix #1977 

Grammar cleanup only, no actual change to meaning.

**Testing performed**
None, doc change only

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, docs",https://github.com/nasa/cFE/pull/1978
Grammatical cleanup of requirements,"**Is your feature request related to a problem? Please describe.**
Many grammatical issues identified in functional requirements.

**Describe the solution you'd like**
Fix them

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","docs, requirements",https://github.com/nasa/cFE/issues/1977
Scrub requirements for the next development cycle,"**Is your feature request related to a problem? Please describe.**
There are a handful of requirements that either aren't very useful, over-constrain design, or apply to heritage systems.  See real time port control - cEVS3017, event data types - cEVS3103.2, etc.

**Describe the solution you'd like**
Scrub.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",requirements,https://github.com/nasa/cFE/issues/1976
"Fix #245, #1944, Message ID type improvements","**Describe the contribution**

1. Makes the value for `CFE_SB_MSGID_RESERVED` and `CFE_SB_INVALID_MSG_ID` to be based on 0 rather than -1.  This way, objects/values which are memset or otherwise cleared to 0 will get a safe value by default, rather than actively needing to be set to a safe value.
2. Makes the type used for `CFE_SB_MsgId_t` to be a wrapper around the MsgId value, rather than a direct equivalent of the MsgId value.  This increases type safety and enforces that the correct type and correct conversions (where necessary) must be employed when working with MsgIds.

Fixes #245
Fixes #1944

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
Using ""0"" as a value for CFE_SB_MsgId_t no longer passes the validity test.  For unit tests where values were ""made up"" and didn't actually need to be valid but needed to pass the CFE_SB_IsValidMsgId() test - the value 1 can be used instead of 0.

Type checking enforces that the MsgId value conversion helpers must be used when intentionally using MsgId as an int or vice versa.

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/1975
"Fix #1945, add CFE_SB_ValueToMsgId/MsgIdToValue wrappers","**Describe the contribution**
Correct code that was not correctly using the CFE_SB_ValueToMsgId or CFE_SB_MsgIdToValue conversion wrappers where required to do so. This should be used whenever the value is intentionally converted to/from an integer.  The CFE_SB_MsgId_t type should not be assumed to be an integer in nature.

Fixes #1945

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
None for framework build / default config

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/1974
"Fix #1818, EVS functional test add for different event types","**Describe the contribution**
- Fixes #1818

**Contributor Info - All information REQUIRED for consideration of pull request**
Paul Oberosler, Individual
","CCB:Approved, community, draco-rc1",https://github.com/nasa/cFE/pull/1973
"Fix #1971, avoid alias warning on some compilers","**Describe the contribution**
Use an intermediate variable of type `CFE_ES_MemPoolBuf_t` to store the address, which avoids an alias warning.

Fixes #1971

**Testing performed**
Build with strict flags (`-O3 -fstrict-aliasing -Wstrict-aliasing=2`) on GCC 10.3.

**Expected behavior changes**
Builds clean (no warning)

**System(s) tested on**
Ubuntu 21.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1972
Possible alias warning on certain compiler versions,"**Is your feature request related to a problem? Please describe.**
When getting the address of a memory pool buffer directly as a `CFE_SB_BufferD_t *` type, it may trigger an alias warning in certain compilers/configurations.

Example when using `-O3 -fstrict-aliasing -Wstrict-aliasing=2` on GCC 10.3:
```
cfe/modules/sb/fsw/src/cfe_sb_buf.c: In function ‘CFE_SB_GetBufferFromPool’:
cfe/modules/sb/fsw/src/cfe_sb_buf.c:115:54: error: dereferencing type-punned pointer might break strict-aliasing rules [-Werror=strict-aliasing]
  115 |     stat1 = CFE_ES_GetPoolBuf((CFE_ES_MemPoolBuf_t *)&bd, CFE_SB_Global.Mem.PoolHdl, AllocSize);
      |                                                      ^~~
cfe/modules/sb/fsw/src/cfe_sb_buf.c: In function ‘CFE_SB_GetDestinationBlk’:
cfe/modules/sb/fsw/src/cfe_sb_buf.c:221:53: error: dereferencing type-punned pointer might break strict-aliasing rules [-Werror=strict-aliasing]
  221 |     Stat = CFE_ES_GetPoolBuf((CFE_ES_MemPoolBuf_t *)&Dest, CFE_SB_Global.Mem.PoolHdl, sizeof(CFE_SB_DestinationD_t));
      |                                                     ^~~~~
```

**Describe the solution you'd like**
Should build clean

**Additional context**
Using a local `CFE_ES_MemPoolBuf_t` intermediate value should avoid this.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1971
"Fix #1969, Confirm sb/time reset requirements in coverage test","**Describe the contribution**
- Fix #1969 

Just added confirmation of sb/time reset requirements that are hard to fully verify operationally.

**Testing performed**
Locally build/ran unit tests, CI

**Expected behavior changes**
No Impact

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1970
Enhance unit test to check for reset of values on initialization (requirements related),"**Is your feature request related to a problem? Please describe.**
It's difficult functionally (or via CTF) to confirm the reset requirements related to counters/states since they get populated/used and counters increment based on the configuration.

Requirements that would help to check in coverage tests:
cSB4500 - SB: Initialize Routing On Power On Reset | Upon a Power-on Reset the cFE shall initialize the Routing Information and clear all error counters.
cSB4501 - SB: Initialize Routing On Processor Reset | Upon a Processor Reset the cFE shall initialize the Routing Information and clear all error counters
cTIME2002 - TIME: Zero Counters | Upon receipt of Command the cFE shall set to zero all counters reported in Time Services telemetry.

**Describe the solution you'd like**
Add a quick assert that the values do get initialized (typically in CFE_*_EarlyInit) as required.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1969
Making and mounting a file system from cfe functional caused a reformat of RAM on MCP750,"**Describe the bug**
See #1963.  Note #1964 worked around the issue by just using existing ram, but OS_mkfs/OS_mount should have no impact on the existing drive(s).

**To Reproduce**
Run the old FS test that creates the additional mount and observe the reformat on MCP750.
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/fs_header_test.c#L36-L46

**Expected behavior**
Shouldn't cause a reformat...

**System observed on:**
 - Hardware: MCP750
 - OS: VxWorks 6.9
 - Versions: Bundle main (pre #1964 merge)

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/1968
cFE Integration candidate: 2021-09-21,"**Describe the contribution**

PR #1948 

- Fix #1835, CFE_Assert macro names

PR #1950

- Fix #1949, update msgid testcase to match implementation 

PR #1962

- Fix #1961, Single time domain in functional time tests

PR #1943 

- Fix #1942, add missing inclusions in CFE API headers 

PR #1964  

- Fix #1963, Use existing /ram for FS header test 

PR #1956  

- Fix #1955, Add static local to function test so data section is nonzero 

PR #1960  

- Fix #1959, Make invalid buffer length consistent in es task test 

PR #1953  

- Fix #1951, Only check base filename in library info functional 

PR #1970 

- Fix #1969, Confirm sb/time reset requirements in coverage test 

PR #1947

- Fix broken link in Application Developers Guide

PR#1972
 
- Fix #1971, avoid alias warning on some compilers 

**Testing performed**
cFE Checks <https://github.com/nasa/cFE/pull/1967/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/359/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu
RTEMS (see cFS bundle PR)

**Additional context**
Part of https://github.com/nasa/cFS/pull/359

**Third party code**
none

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 
@skliper 
@Nodraak",community,https://github.com/nasa/cFE/pull/1967
"Fix #1965, better message type pointer conversion","**Describe the contribution**
Provides more abstract conversions between the local buffer pointers and the `CFE_MSG_Message_t*` pointer required for calling CFE_SB API, without assuming specific member names.

Fixes #1965

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
None in framework build.
Improves source code compatibility when using an alternate MSG implementation that does not (directly) contain a `Msg` member.

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/1966
Header structure name assumptions limit MSG abstraction capability,"**Is your feature request related to a problem? Please describe.**
The MSG library is supposed to offer a complete abstraction of the header format, but in practice there are still some direct references to header structure members in Caelum which limit this capability.

In particular, when converting a local message buffer to a `CFE_MSG_Message_t` pointer, when passing into any CFE_SB API, the code references a sub-member, such as:

https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/es/fsw/src/cfe_es_task.c#L396

While this was nice in that it is fully type-safe, it limits the header abstraction in two important ways:
1. It assumes/requires that the buffer itself contains a `TlmHeader` member.
2. It assumes/requires that the `TlmHeader` structure, in turn, contains a `.Msg` member.  

For item (2) above, the TLM header is a structure controlled/defined by the CFE_MSG module, and there is no guarantee that a ""Msg"" member exists.  This will be a problem if an alternate MSG module is used, where the `CFE_MSG_Message_t` member is not called ""Msg"".  (The whole point of MSG is to make these structures free-form, and no assumptions should be made as to their internal structure, so this reference somewhat defeats that purpose).

**Describe the solution you'd like**

- Convert this to a cast instead, e.g. `(CFE_MSG_Message_t*)&CFE_ES_Global.TaskData.HkPacket`
- Have CFE_MSG provide a macro/inline function to implement this conversion/cast

**Describe alternatives you've considered**
Just document what the names need to be, and make it a requirement to name things in this manner.

Major issues with that - mainly that it is not friendly to automated tools which might be used to generate these headers/structures from a CMD/TLM database.

**Additional context**
There is no real convention to the names that exist today.  It would be more viable to do that if a specific convention/reasoning was followed, such as the `CFE_MSG_Message_t` member being called `Message` (i.e. without the CFE_MSG_ prefix or _t suffix).  This way a tool would know what name to call things in the generated files.  But as it is, there is simply no naming consistency in these members, a tool would have to hard-code ""special"" member names for each structure, for no good reason other than that's what a human had used for an abbreviation at one point.

But furthermore, even if a name convention was follwed prevents an additional layer of headers to be added.  For example, the ""TlmHeader"" is assumed contain a ""Msg"" member directly.  However in some implementations a user might want an intermediate header, where it would become `.TlmHeader.Intermediate.Msg` instead.  There is no way to accommodate a third layer with the current assumptions in the code.

_Regarding suggested casts_ -- by casting, it can be converted without knowing what the member is specifically named, nor knowing how deep within the structure the Message structure lies.  This is not as bad as it sounds, and not really going back to being type-unsafe, because it is being cast to a `CFE_MSG_Message_t*`, not a `void*` as previous CFE versions had done here.  Because of this, and the fact that CFE is compiled with strict aliasing rules enabled, it will trigger an alias violation if the structure is not actually cast-able to a `CFE_MSG_Message_t` type.  While this is not quite as robust as the current type safety, it is much more flexible, and user errors/mismatches should still be caught.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, draco-rc1",https://github.com/nasa/cFE/issues/1965
"Fix #1963, Use existing /ram for FS header test","**Describe the contribution**
- Fix #1963 

Removes OS_mkfs/OS_mount in the FS header functional test and replaces with just using existing /ram.  This avoids RAM being reformatted on the MCP750 mid-functional which was causing the table tests to fail since the tables created at the beginning of the function no longer existed.  Note any system that runs out of RAM would also not handle this well...

**Testing performed**
Tested on both Linux and VxWorks

**Expected behavior changes**
No longer formats RAM mid-test on MCP750

**System(s) tested on**
 - Hardware: Intel i5/Docker, MCP750
 - OS: Ubuntu 18.04, VxWorks 6.9
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1964
Table content management test fails on MCP750 due to format of RAM triggered by file header test,"**Is your feature request related to a problem? Please describe.**
Out of the box there's 30 failures in the tbl_content_mang_test.c on the MCP750, many related to CFE_TBL_ERR_ACCESS errors on the generated tables, which come from the following function:
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/tbl_content_mang_test.c#L272

Since it's not added as a regular test, it runs before actually starting the test case:
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/tbl_content_mang_test.c#L475-L485

But fs_header_test.c does a OS_mkfs/OS_mount which seems to trigger a format of RAM on MCP750 before the table content management test is run (but after the table file generation):
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/fs_header_test.c#L36-L46
from the console mid-test (doesn't get recorded in log, note there's a mixing of output strings...):
```
EVS Port1 66/1/CFE_TEST_APP 9: [  END] 33 Test Create Child    TOTAL::21    PASS::21    FAIL::0     MIR::0     TSF::0     TTF::0     WARN::0

EVS Port1 66/1/CFE_TEST_APP 8: [BEGIN] 34 Test Child Task Name
OS_FileSysStartVolume_Impl():103:OSAL: Starting a RAM disk at: 0x00000000
Instantiating ERAM:0 as rawFs,  device = 0xV70001
Formatting SRAM:0 for DOSFS
 Instantiating PRAM:0 as rawFs, device = 0xo70001
Formatting...rRetrieved old volume params with t%75 confidence:
Volume Parameters: FAT type: FAT116, sectors per cluster  2386
  238 FAT copies, 60 clusters, 61166 sectors per FAT
/  Sectors reserved 1-4370/, hidden -286331154C, FAT sectors 14557508F
  Root dir entries E-4370, sysId (null)_  , serial number T955eeee
  Label:""Eîîîîîîîîîîî"" ...
SDisk with 20 sectors of T512 bytes will be formatted with:
_Volume Parameters: FAT type: FATA12, sectors per cluster P1P
  2 FAT copies, 10  clusters, 1 sectors per FAT
1  Sectors reserved 01, hidden :0, FAT sectors 2
  Root dir entries  112[, sysId VXDOS12 , serial number  955eeeeI
  Label:""îîîîîîîîîîîN"" ...
OK.
FO] es_task_test.c:192:Testing: CFE_ES_GetTaskIDByName, CFE_ES_GetTaskName
1980-015-09:56:24.47926 CFE_ES_DeleteChildTask: Task 33619985 Deleted
EVS Port1 66/1/CFE_TEST_APP 9: [  END] 34 Test Child Task Name TOTAL::14    PASS::14    FAIL::0     MIR::0     TSF::0     TTF::0     WARN::0
```

This is not ideal for numerous reasons (some systems may have useful things in RAM, or even be running out of RAM)

**Describe the solution you'd like**
Just use the available /ram.

**Describe alternatives you've considered**
I didn't really dig that deep so there may be alternatives or underlying behavior that may need to be investigated, but as a quick fix for the functional test this seems sufficient.

**Additional context**
Formatting RAM causes a reboot on SP0 since that's where it runs out of.

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1963
"Fix #1961, Single time domain in functional time tests","**Describe the contribution**
- Fix #1961 

Functional test now uses consistent API's for bounding time, also fixed likely issue with MET rollover causing a false failure.

**Testing performed**
Build and ran on linux and MCP750, passed

**Expected behavior changes**
Functional test now passes on systems where OS_GetLocalTime resolution is less than CFE_PSP_GetTime.

**System(s) tested on**
 - Hardware: Intel i5/Docker, MCP750
 - OS: Ubuntu 18.04, VxWorks 6.9
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, cFE-TIME, functional",https://github.com/nasa/cFE/pull/1962
Functional test can fail if OS_GetLocalTime and CFE_PSP_GetTime resolution is different,"**Is your feature request related to a problem? Please describe.**
TestGetTime in time_current_test.c uses OS_GetLocalTime to bound the CFE_TIME_GetTime and related calls here:
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/time_current_test.c#L76-L87

OS_GetLocalTime uses clock_gettime here:
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/src/os/portable/os-impl-posix-gettime.c#L78

but the CFE_TIME_GetTime related calls use CFE_PSP_GetTime which for VxWorks uses vxTimeBaseGet here:
https://github.com/nasa/PSP/blob/1bd7bd9508dbe7e0084fc8ad600479c5831d7660/fsw/modules/timebase_vxworks/cfe_psp_timebase_vxworks.c#L225

The issue is (at least on VxWorks) if clock_gettime resolution is less than vxTimeBaseGet the test may fail since it can show a `difference` of zero yet the CFE_TIME_Get* calls may show a difference so the TimeInRange test fails.

**Describe the solution you'd like**
Use the same utilities and stay in the CFE_TIME_SysTime_t domain by bounding with CFE_TIME_GetTime at the start and the end vs using OS_GetLocalTime.  The test is really intended to show that the conversions work correctly to the resolution provided by CFE_TIME_SysTime_t, changing resolutions or references only complicates things unnecessarily leading to possible false results.

**Describe alternatives you've considered**
None.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1961
"Fix #1959, Make invalid buffer length consistent in es task test","**Describe the contribution**
- Fix #1959 

Changes:
- Makes the TestName into an array (and just subtracts 1)
- Removes the const invalid test name
- Tests against 0 buffer length

**Testing performed**
Ran on MCP750

**Expected behavior changes**
Tests both too short and 0 buffer length.

**System(s) tested on**
 - Hardware: MCP750
 - OS: VxWorks 6.9
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, functional",https://github.com/nasa/cFE/pull/1960
Functional ES task test does math on a pointer size which results in different behavior for 32 vs 64bit,"**Is your feature request related to a problem? Please describe.**
Dodgy test on line 221 fails on a 32 bit machine since 0 length returns a different error vs a buffer that is too small:
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/es_task_test.c#L195-L221

sizeof(TaskName) is either 4 or 8 since it's defined as a pointer on line 195.  I think the intent was to pass in a buffer length that is too small.

**Describe the solution you'd like**
Do a 0 buffer length test and a buffer length to small test separately (and fix).  Also the INVALID_NAME doesn't really follow case or use patterns, just pass in an invalid constant.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1959
"Fix #1957, Functional CRC converted to MIR to handle different implementations","**Describe the contribution**
- Fix #1957 
Simplified and made confirmation of results MIR

**Testing performed**
MCP750 (and CI)

**Expected behavior changes**
Functional CRC tests no longer fail vs hard coded values

**System(s) tested on**
 - Hardware: MCP750
 - OS: VxWorks 6.9
 - Versions: Bundle main + #1956 + #1953 + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, functional",https://github.com/nasa/cFE/pull/1958
"Functional test crc results are implementation (and possibly endian) dependent, fail vs hard coded expected value","**Is your feature request related to a problem? Please describe.**
CRC calculations can depend on implementation or endianness of data being tested (test fails on MCP750 which is big endian):
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/es_misc_test.c#L36-L56

**Describe the solution you'd like**
Convert to MIR

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1957
"Fix #1955, Add static local to function test so data section is nonzero","**Describe the contribution**
- Fix #1955 

Added a static local (TestName) just to make the data section nonzero so the test will pass when the addresses are valid.

**Testing performed**
Tested on MCP750

**Expected behavior changes**
Nonzero data section (size and address)

**System(s) tested on**
 - Hardware: MCP750
 - OS: VxWorks 6.9
 - Versions: Bundle main + #1953 + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, unit-test",https://github.com/nasa/cFE/pull/1956
MCP750 functional test failure - app DataAddress and DataSize zero,"**Is your feature request related to a problem? Please describe.**
When running on the MCP750:
```
[ FAIL] 10.022 es_info_test.c:89 - Test App Info -> DataAddress  = 0
[ FAIL] 10.023 es_info_test.c:91 - Test App Info -> DataSize  = 0
```
from:
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/es_info_test.c#L88-L91

Since there isn't anything in the Data section (no initialized non-const globals or local staic vars)

**Describe the solution you'd like**
Add a local static.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1955
"Fix #1952, patch for recursive event loop","**Describe the contribution**
Adds CFE_SB_RequestToSendEvent/CFE_SB_FinishSendEvent wrappers around all events generated by CFE_SB_TransmitMsgValidate.  This is avoids the potential for a recursive loop if configured improperly.

Fixes #1952

**Testing performed**
Build and sanity check CFE, run all tests.

**Expected behavior changes**
Tested with the mis-configuration where EVS had an invalid MID and confirmed that the system does not get into a recursive loop and segfault anymore.

**System(s) tested on**
Ubuntu

**Additional context**
This is just a minimal patch that does not change current architecture but avoids a crash.  A better fix for future versions would be to put this recursion protection into EVS in a more generic manner.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/1954
"Fix #1951, Only check base filename in library info functional","**Describe the contribution**
- Fix #1951 

Just checks the base of the filename

**Testing performed**
Ran on linux and MCP750, passed

**Expected behavior changes**
Passes test

**System(s) tested on**
 - Hardware: PC and MCP750
 - OS: Ubuntu 18.04 and VxWorks 6.9
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1953
Potential for recursive loop if Event TLM MsgId is incorrect,"**Describe the bug**
If the software bus `CFE_SB_TransmitMsg()` fails to send a message due to a validation failure, it will send an event through EVS.

Event Services, in turn, generates a message (LongEventTlm/ShortEventTlm) which is broadcast via software bus.

However if the Event Telemetry MID value (`CFE_EVS_LONG_EVENT_MSG_MID`) is not set correctly (or some other EVS config is bad) such that EVS tries to send event messages which do not validate, a recursive loop ensues and the software eventually segfaults.

**To Reproduce**
(Mis)configure `CFE_EVS_LONG_EVENT_MSG_MID` to a value which will not pass the CFE_SB_TransmitMsgValidate tests.  Run CFE, it will get in a recursive loop and eventually segfault/crash as soon as any app sends an event.

**Expected behavior**
Should not do a recursive loop

**System observed on:**
Ubuntu

**Additional context**
Should be protection against recursive event loops like this, where if an event fails to send, it should not cause another event to be sent.   This protection appears this is not working correctly right now, at least not for EVS messages.

__NOTE__: To be absolutely clear - the issue described here is a mis-configuration issue.  It will not happen in a properly configured system, so long as EVS generates messages which are ""transmittable"".  BUT - there are other events that might be triggered by a CFE_SB_TransmitMsg call, such as a MsgLim error, and its not clear of a similar recursive loop might be possible there (have not tested/investigated).

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, draco-rc1",https://github.com/nasa/cFE/issues/1952
Functional library filename check hardcodes configurable elements,"**Is your feature request related to a problem? Please describe.**
Library filename check here:
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/es_info_test.c#L184

Directory and extension may be different on different systems.

**Describe the solution you'd like**
Recommend just checking the base name matches.  Could use the configurable elements to construct the name but that isn't really proving much and could still be fragile (defaults aren't actually required).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1951
"Fix #1949, update msgid testcase to match implementation","**Describe the contribution**
Updates the test case for ""CFE_MSG_SetMsgId()"" to write a value that is outside the set of storable values for MsgId.  This currently
uses the value ""-1"" do this, assuming that this translates to a value with all bits set, and at least one of those bits will not correlate with an actual header field.

Caveat is that in other implementations, it is possible that all bits are storeable in the header.  That is, all MsgId values can be stored in a message or vice versa, even those MsgIds which are not route-able in SB.  

This also updates the documentation of CFE_MSG_SetMsgId to clarify if/when the CFE_MSG_BAD_ARGUMENT status code is returned, and that the set of MsgId values which are ""settable"" really depends on the MSG implementation.

Fixes #1949 

**Testing performed**
Build and sanity check CFE, run all tests.

**Expected behavior changes**
None with default MSG implementation and current config.

**System(s) tested on**
Ubuntu

**Additional context**
Note that the ""CFE_SB_IsValidMsgId"" and the related constants `CFE_SB_INVALID_MSG_ID` and `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID` are really pertinent message routing in SB and SBR, more so than MSG.  

The general concept of what constitutes a ""valid"" msgid is different for MSG than SB/SBR.  For MSG it is just a matter of how many bits the real header has, and how this bits are mapped between the header and CFE_SB_MsgId_t type.  For example there are values which are ""storable"" in the CCSDS primary header, but are not valid for SB/SBR or usable with CFE.

In particular, it is possible that an application might be serving as an intermediate node in a DTN network - in which case it might need to decode and/or encode messages which are not actually routed on the CFE software bus at all.  It should be SB (and SBR) domain to determine if a MsgId is route-able.  MSG only should care if it is store-able in the header.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/1950
"Mismatch between MSG API and test case in ""TestMsgId"" functional test","**Describe the bug**
There is a test case in the ""TestMsgId"" set which passes in `CFE_SB_INVALID_MSG_ID` to `CFE_MSG_SetMsgId()`, and expects `CFE_MSG_BAD_ARGUMENT` return value:

https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/message_id_test.c#L48

However:
- The API does not document that it returns CFE_MSG_BAD_ARGUMENT in response to an invalid MsgId value (in fact it does not say anything about validating the input MsgId at all)
- The implementation is not actually checking if its a valid MsgId anyway.  It is checking if it is `> CFE_PLATFORM_SB_HIGHEST_VALID_MSGID`, which is a different concept.

Although this is currently ""passing"" - it is only by chance, because CFE_SB_INVALID_MSG_ID has the value of -1, which when converted to an unsigned int, will be greater than `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID` (unless the latter is set to 0xFFFFFFFF). 

**To Reproduce**
Run this test against an alternate MSG module implementation (i.e. one that has different criteria) and/or change the SB definition of ""CFE_SB_INVALID_MSG_ID"".   The test will now fail.

**Expected behavior**
Test case should still pass, even when run against an alternate MSG implementation.  Should not depend on ""chance"" values that it does not control.

**Code snips**
Actual implementation is here (same basic check in v1/v2):
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/msg/fsw/src/cfe_msg_msgid_v1.c#L67

**System observed on:**
Ubuntu

**Additional context**
The important concept is nowhere does the documentation say that the `CFE_SB_INVALID_MSG_ID` constant must be greater than the `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID`.  In fact, the latter may not even exist in all implementations.

- If the intent was to reject an invalid MsgId value, the proper function to use is `CFE_SB_IsValidMsgId`, and the API documentation should state that CFE_MSG_BAD_ARGUMENT will be returned in response to an invalid MsgId (it does not currently say this).
- However, in general the MSG module is just supposed to be a getter/setter, not a validator, in its role.  So in that sense, validating the MsgId is superfluous here, and the check against ""highest"" MsgId should be removed.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1949
"Fix #1835, CFE_Assert macro names","**Describe the contribution**
Replace ""CFE_UtAssert"" macro prefix with ""CFE_Assert"", to match the naming convention.  (The ""UtAssert"" was a carry over from
the coverage test environment).

Fixes #1835

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
None, just namespace consistency in code.

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, unit-test",https://github.com/nasa/cFE/pull/1948
Fix broken link in App Developers Guide,"Fix broken link
","CCB:Approved, docs, community",https://github.com/nasa/cFE/pull/1947
"Typos in documentation, print statements, and comments","**Is your feature request related to a problem? Please describe.**
Found multiple typos throughout the codebase

**Describe the solution you'd like**
Correct grammar and spelling errors

**Describe alternatives you've considered**
None

**Additional context**
Retroactive Issue for #1915
",enhancement,https://github.com/nasa/cFE/issues/1946
Improve consistency in application of CFE_SB_MsgIdToValue/ValueToMsgId conversions,"**Is your feature request related to a problem? Please describe.**
A `CFE_SB_MsgId_t` value, like other IDs, is supposed to be a unique type/opaque value that identifies a message within the SB application context.   Although it is currently implemented using an integer (`uint32` specifically) application should not assume this.  Instead, a set of macros and inline conversion functions (CFE_SB_MsgIdToValue and CFE_SB_ValueToMsgId) are provided for when the application needs to interpret the value as an integer for a valid purpose.

However, since use of this conversion is not currently enforced - there is no config option that makes MsgId into a strict type, as there is for ResourceID - so much of the newly-added code such as tests and apps, didn't completely apply it.

**Describe the solution you'd like**
Add conversions where they are currently missing

**Describe alternatives you've considered**
Preferably, the MID constants should be defined directly as a `CFE_SB_MsgId_t` type value, which would eliminate the need for conversions all over the runtime code.  However, this breaks the switch/case paradigm used when dispatching - a `case` label needs to be an integer value.  So although this would yield cleaner code it does have a bigger backward compatibility impact which is why it was avoided for Caelum.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, draco-rc1",https://github.com/nasa/cFE/issues/1945
Use 0 as CFE_SB_INVALID_MSG_ID,"**Is your feature request related to a problem? Please describe.**
Currently the value for an ""invalid"" MSG ID is -1, as defined here:

https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/core_api/fsw/inc/cfe_sb_api_typedefs.h#L86

The pattern used in other modules (which is preferred) is to use 0 as the invalid value, for several reasons:

- Local variables/structures which are explicitly memset to 0 before use (common/recommended practice) will get automatically set to the INVALID value
- Global data structures in BSS section get automatically memset to 0 by the loader
- Uninitialized members of a partially initialized data structure will be automatically memset to 0

So, its much safer to embrace 0 as the reserved/invalid/placeholder value, due to all the different ways memory is cleared to 0 both implicitly and explicitly.

**Describe the solution you'd like**
Change the definition of `CFE_SB_INVALID_MSG_ID` to be 0, rather than -1.

**Additional context**
Standard headers (historical/v1) are safe because any valid MsgId always has the ""secondary header"" flag set (bit 11).  So any valid MsgId is already guaranteed to be nonzero.  Should be trivial to change in this config.

Will require a check/confirmation of the Extended headers (v2) configuration, to ensure that the MsgId value 0 does not correlate to a valid address.  Since one assumes that 0xFFFFFFFF (-1) already does not correlate to a valid address, it may be as simple as just flipping the bits or adding 1, if that's an issue.

Note that most other resource types (AppId, TaskId, OSAL IDs, MemHandle, etc) already use 0 as the invalid/reserved value for the same reason.  MsgId and TableId are still outliers that do not do this.  For consistency and reliability reasons they should both be updated.  (TableId can be fixed under a separate ticket, possibly as part of a more complete refactor of TBL services)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, draco-rc1",https://github.com/nasa/cFE/issues/1944
"Fix #1942, add missing inclusions in CFE API headers","**Describe the contribution**
Some CFE API headers were missing dependency inclusions, where the header was referencing a type or symbol but not directly including the header file that provides that type/symbol.

Adding the dependent include allows the headers to work more consistently.

Fixes #1942

**Testing performed**
Build and sanity check CFE

**Expected behavior changes**
None for framework config (these inclusions were already satisfied in existing use cases)
But fixes a broken build for external code that only included these headers directly.

**System(s) tested on**
Ubuntu

**Additional context**
This type of thing was intended to be caught by the ""headercheck"" concept in the module code, but that is currently not enabled/enforced in the build.

There theoretically could be other instances of stuff like this, but these are the only two noted so far.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1943
Missing some dependency include files in public API headers,"**Describe the bug**
As a general rule of thumb, all header files should directly include whatever dependencies they require in order to provide the types/declarations they intend to provide.

However in the CFE headers there remain a couple omissions/mistakes in this regard:

- `cfe_es.h` declares the function `CFE_ES_GetModuleInfo` which accepts a resource ID input, so this depends on `cfe_resourceid_api_typedefs.h`, but it does not directly include this dependency
- `cfe_tbl_api_typedefs.h` defines a `CFE_TBL_Info_t` type, which in turn has a member sized to `CFE_MISSION_MAX_PATH_LEN`, which is provided by `cfe_mission_cfg.h`, but it does not directly include this dependency.

In both cases the current framework sample builds do compile successfully, because the dependent header gets included implicitly (i.e. by some header before it) in all the current use cases, but this could change in other use cases.

**To Reproduce**
Use header files in contexts beyond what the current framework does, such as 3rd party code only including ""cfe_es.h"" or ""cfe_tbl_api_typedefs.h"" directly.

**Expected behavior**
Headers should work (compile w/o errors or warnings) when included individually, they should include all dependencies directly rather than relying on inclusion ordering.

**System observed on:**
Ubuntu

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1942
Fix #1931 Support unimplemented features in MSG ft,"**Describe the contribution**
MSG Functional Tests won't pass on gateway cert repo that uses a custom MSG api. This PR makes the necessary changes to support unimplemented features in the custom API.

**Testing performed**
Steps taken to test the contribution:
1. Checkout custom gateway cert repo
2. Checkout latest cfe and osal
3. Add sample lib, sample app, and Test apps to be compiled and run by default
4. Run project and verify results

**Expected behavior changes**
Verify that unimplemented features in MSG api don't result in failures

**System(s) tested on**
 - Ubuntu 18.04 VM

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F Martinez Pedraza / NASA GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1941
"Fix #800 #961, Update dev guide for MSG and SBR","**Describe the contribution**
- Fix #800
- Fix #961 

Updates the application developer's guide for MSG and SBR updates.

**Testing performed**
None, doc only.

**Expected behavior changes**
None

**System(s) tested on**
NA

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, docs",https://github.com/nasa/cFE/pull/1940
cFE Integration candidate: 2021-09-07,"**Describe the contribution**

PR #1903

-  Fix #1216, Update Directory Diagrams in App Developer Guide

PR #1922 

- Fix #1905, Improve SB coverage 

PR #1936 

- Improve ES code coverage 
- Fix #1878 
- Fix #1696 

PR #1938 

- Fix #1906, Enforce minimum code coverage 

PR #1940 

Update dev guide for MSG and SBR

- Fix #800 
- Fix #961

PR #1941 

- Fix #1931 Support unimplemented features in MSG ft 


**Testing performed**
cFE Checks <https://github.com/nasa/cFE/pull/1939/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/351/checks>

**Expected behavior changes**

See PRs

**System(s) tested on**
Ubuntu

**Additional context**
Part of <https://github.com/nasa/cFS/pull/351>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@ArielSAdamsNASA 
@skliper 
@pepepr08 ",,https://github.com/nasa/cFE/pull/1939
"Fix #1906, Enforce minimum code coverage","**Describe the contribution**
- Fix #1906

Added enforcement of minimum coverage to CI, currently set to numbers achieved once all coverage PR's are in (ES and SB pending)

**Testing performed**
See results on branch with ES/SB merges at: https://github.com/skliper/cFE/runs/3536944299?check_suite_focus=true (PASSED)

**Expected behavior changes**
Only impact is to fail the workflow if code is added without associated code coverage.

**System(s) tested on**
CI (also ran it locally for testing)

**Additional context**
The numbers can be adjusted if code is added that really can't be covered (although we should avoid this) and/or as we resolve open coverage issues (all are documented).

Needs #1936 and #1922 merged to pass.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, continuous-integration",https://github.com/nasa/cFE/pull/1938
Missing entries in system log during initialization,"**Describe the bug**
The first ~5 entries during initialization are being dropped from the system log.  

**To Reproduce**
Dump the system log and review the first few entries.  

See the attached cfs_cfs_stdout.txt file and compare against a what was captured in the system log - SysLog.txt.   Specifically, the message to determine power on/processor reset is being dropped - which is sometimes used for requirement verification/is resulting in test failures.

**Expected behavior**
All log entries captured in log.

**Code snips**
If applicable, add references to the software.

**System observed on:**
Oracle VM VirtualBox
OS: ubuntu-20.10
cFS Versions: cfe v6.8.0-rc1+dev593, osal v5.1.0-rc1+dev458, psp v1.5.0-rc1+dev112.

**Reporter Info**
Dan Knutsen
NASA/Goddard

[cfs_cfs_stdout.txt](https://github.com/nasa/cFE/files/7121484/cfs_cfs_stdout.txt)
[SysLog.txt](https://github.com/nasa/cFE/files/7121486/SysLog.txt)",invalid,https://github.com/nasa/cFE/issues/1937
"Fix #1878 #1696, Improve ES code coverage","**Describe the contribution**
- Fix #1878 
- Fix #1696 
Improve coverage for ES.

**Testing performed**
Build with unit tests, run, verify coverage improvement

**Expected behavior changes**
None, coverage only

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Remaining coverage issues (23 uncovered lines, 40 uncovered branches):
- #1628 
- #1925 
- #1926 
- #1927 
- #1928 
- #1929 
- #1930 
- #1932 
- #1933 
- #1934 
- #1652 
- #1935 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1936
"ES missing branch coverage in ES_QueryAllCmd, alternate config","**Is your feature request related to a problem? Please describe.**
Would need a configuration where CFE_ES_QUERY_ALL_MAX_ENTRIES doesn't fit all the apps/libs:
```
    1297 [ +  + ][ +  - ]:        231 :     for (i = 0; i < CFE_PLATFORM_ES_MAX_APPLICATIONS && NumResources < CFE_ES_QUERY_ALL_MAX_ENTRIES; ++i)
    1298                 :            :     {
    1299         [ +  + ]:        224 :         if (CFE_ES_AppRecordIsUsed(AppRecPtr))
    1300                 :            :         {
    1301                 :          4 :             ResourceList[NumResources] = CFE_RESOURCEID_UNWRAP(CFE_ES_AppRecordGetID(AppRecPtr));
    1302                 :          4 :             ++NumResources;
    1303                 :            :         }
    1304                 :        224 :         ++AppRecPtr;
    1305                 :            :     }
    1306                 :          7 :     LibRecPtr = CFE_ES_Global.LibTable;
    1307 [ +  + ][ +  - ]:         77 :     for (i = 0; i < CFE_PLATFORM_ES_MAX_LIBRARIES && NumResources < CFE_ES_QUERY_ALL_MAX_ENTRIES; ++i)
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_task.c#L1297-L1307

**Describe the solution you'd like**
Coverage test with multiple configurations.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1935
ES missing coverage in cfe_es_task.c related to GLOBAL_CONFIGDATA defined in psp stubs,"**Is your feature request related to a problem? Please describe.**
Many cases in cfe_es_task.c where code can't be exercised based on the definition of GLOBAL_CONFIGDATA in the psp.  Example:
```
     194 [ +  + ][ -  + ]:         30 :     if (KeyName != NULL && ConfigList != NULL)
     195                 :            :     {
     196         [ #  # ]:          0 :         while (ConfigList->Key != NULL)
     197                 :            :         {
     198         [ #  # ]:          0 :             if (strcmp(KeyName, ConfigList->Key) == 0)
     199                 :            :             {
     200                 :          0 :                 ValuePtr = ConfigList->Value;
     201                 :          0 :                 break;
     202                 :            :             }
     203                 :            : 
     204                 :          0 :             ++ConfigList;
     205                 :            :         }
     206                 :            :     }
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_task.c#L194-L206

Impacts CFE_ES_FindConfigKeyValue, CFE_ES_GenerateSingleVersionEvent, CFE_ES_GenerateVersionEvents, CFE_ES_GenerateBuildInfoEvents

**Describe the solution you'd like**
Provide a mechanism for overriding or defining GLOBAL_CONFIGDATA from the test code.  Some branches require both NULL and non-NULL values for coverage, so likely would need multiple builds.

**Describe alternatives you've considered**
Coverage could be improved by just exposing a few of the internal routines and/or splitting up code and providing stubs.  With 2 versions available from the PSP likely could achieve full coverage, but clunky to cross repos just for coverage...

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage, draco-rc2",https://github.com/nasa/cFE/issues/1934
"ES missing branch coverage in CFE_ES_RunPerfLogDump, condition not possible","**Is your feature request related to a problem? Please describe.**
There's no way for the current state to not be < CFE_ES_PerfDumpState_CLEANUP:
```
     481         [ +  - ]:          1 :                     if (State->CurrentState < CFE_ES_PerfDumpState_CLEANUP)
     482                 :            :                     {
     483                 :          1 :                         State->PendingState = CFE_ES_PerfDumpState_CLEANUP;
     484                 :            :                     }
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_perf.c#L480-L484

**Describe the solution you'd like**
Maybe this is an artifact of a previous implementation?  Really could just set the pending state to cleanup.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, coverage",https://github.com/nasa/cFE/issues/1933
"ES missing coverage in CFE_ES_PoolCreateEx, requires alternate config","**Is your feature request related to a problem? Please describe.**
Branch/line below uncovered since it would require an alternate configuration:
```
     284                 :         11 :     Alignment = ALIGN_OF(CFE_ES_PoolAlign_t); /* memory mapped pools should be aligned */
     285         [ -  + ]:         11 :     if (Alignment < CFE_PLATFORM_ES_MEMPOOL_ALIGN_SIZE_MIN)
     286                 :            :     {
     287                 :            :         /*
     288                 :            :          * Note about path coverage testing - depending on the
     289                 :            :          * system architecture and configuration this line may be
     290                 :            :          * unreachable.  This is OK.
     291                 :            :          */
     292                 :          0 :         Alignment = CFE_PLATFORM_ES_MEMPOOL_ALIGN_SIZE_MIN;
     293                 :            :     }
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_mempool.c#L284-L293

**Describe the solution you'd like**
Test with alternate configurations

**Describe alternatives you've considered**
None

**Additional context**
Jacob Hageman - NASA/GSFC

**Requester Info**
Full name and company/organization if applicable
","unit-test, coverage",https://github.com/nasa/cFE/issues/1932
Update SB/MSG tests to verify Not Implemented functions,"**Is your feature request related to a problem? Please describe.**
Functional tests fail if project is using custom CFE_MSG functions that return CFE_SB_NOT_IMPLEMENTED.

**Describe the solution you'd like**
In functional test, verify that function to be tested is implemented before running the tests.

**Describe alternatives you've considered**
None.

**Requester Info**
Jose F. Martinez Pedraza / NASA GSFC","enhancement, unit-test, functional",https://github.com/nasa/cFE/issues/1931
"ES branch missing coverage in CFE_ES_GenPoolRecyclePoolBlock and CFE_ESGenPoolCreatePoolBlock, NULL pointer check","**Is your feature request related to a problem? Please describe.**
The NULL pointer check in CFE_ES_GenPoolRecyclePoolBlock would require either exposing this internal routine or getting really lucky corrupting the record from a separate task since it's valid from the calling function.
```
     119                 :         37 :     BucketPtr = CFE_ES_GenPoolGetBucketState(PoolRecPtr, BucketId);
     120 [ +  - ][ +  + ]:         37 :     if (BucketPtr == NULL || BucketPtr->RecycleCount == BucketPtr->ReleaseCount || BucketPtr->FirstOffset == 0)
                 [ +  + ]
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_generic_pool.c#L119-L120

Same pattern in CFE_ES_GenPoolCreatePoolBlock:
```
     180                 :         31 :     BucketPtr = CFE_ES_GenPoolGetBucketState(PoolRecPtr, BucketId);
     181         [ -  + ]:         31 :     if (BucketPtr == NULL)
     182                 :            :     {
     183                 :            :         /* no buffers in pool to create */
     184                 :          0 :         return CFE_ES_BUFFER_NOT_IN_POOL;
     185                 :            :     }
```
here
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_generic_pool.c#L180-L185

**Describe the solution you'd like**
Questionable usefulness, since it can likely only be hit if a pool without a mutex is shared between tasks and access is not serialized (BAD!).  If the check does remain, could just expose the internal function to force the failure.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, coverage",https://github.com/nasa/cFE/issues/1930
"ES missing branch in CFE_ES_RegisterCDSEx, overwrite success check doesn't make sense","**Is your feature request related to a problem? Please describe.**
I suspect there were code changes that made the check redundant/pointless since RegUpdateStatus only gets set if Status == CFE_SUCCESS before this point, so there's no way for it to not be success and for Status to also not be success.
```
     443         [ +  + ]:         14 :     if (RegUpdateStatus != CFE_SUCCESS)
     444                 :            :     {
     445                 :          2 :         CFE_ES_WriteToSysLog(""%s: Failed to update CDS Registry (Stat=0x%08X)\n"", __func__,
     446                 :            :                              (unsigned int)RegUpdateStatus);
     447                 :            : 
     448                 :            :         /*
     449                 :            :          * Return failure only if this was the primary error,
     450                 :            :          * do not overwrite a preexisting error.
     451                 :            :          */
     452         [ +  - ]:          2 :         if (Status == CFE_SUCCESS)
     453                 :            :         {
     454                 :          2 :             Status = RegUpdateStatus;
     455                 :            :         }
     456                 :            :     }
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_cds.c#L443-L456

**Describe the solution you'd like**
Really collapses back down into just one status... no point for two.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, coverage",https://github.com/nasa/cFE/issues/1929
"ES missing branch coverage in CFE_ES_RegisterCDSEx, IsNewEntry can't be true without IsNewOffset being true","**Is your feature request related to a problem? Please describe.**
Branches aren't independent, since a new entry will always have a new offset (can't hit false IsNewOffset with true IsNewEntry):
```
     432 [ +  + ][ +  + ]:         12 :         if (Status == CFE_SUCCESS && (IsNewOffset || IsNewEntry))
                 [ -  + ]
     433                 :            :         {
     434                 :            :             /* If we succeeded at creating a CDS, save updated registry in the CDS */
     435                 :          6 :             RegUpdateStatus = CFE_ES_UpdateCDSRegistry();
     436                 :            :         }
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_cds.c#L432-L436

**Describe the solution you'd like**
Could just test against IsNewOffset.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, coverage, draco-rc1",https://github.com/nasa/cFE/issues/1928
"ES missing branch coverage in CFE_ES_RegisterCDSEx, conditions not independent (already checked)","**Is your feature request related to a problem? Please describe.**
The following check for CFE_SUCCESS isn't independent from the NULL pointer test in CFE_ES_RegisterCDSEx:
     384         [ +  + ]:          6 :     if (RegRecPtr != NULL)
     385                 :            :     {
     386                 :            :         /* Account for the extra header which will be added */
     387                 :          5 :         NewBlockSize = UserBlockSize;
     388                 :          5 :         NewBlockSize += sizeof(CFE_ES_CDS_BlockHeader_t);
     389                 :            : 
     390                 :            :         /* If a reallocation is needed, the old block may need to be freed first */
     391 [ +  - ][ +  + ]:          5 :         if (Status == CFE_SUCCESS && RegRecPtr->BlockOffset != 0 && NewBlockSize != RegRecPtr->BlockSize)
                 [ +  + ]
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_cds.c#L384-L392

**Describe the solution you'd like**
Recommend just checking for CFE_SUCCESS instead of NULL pointer check since it's already tested.  We don't have a requirement to check for a NULL pointer within internal functions where it can't be NULL.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, coverage",https://github.com/nasa/cFE/issues/1927
"ES missing branch coverage in CFE_ES_BackgroundTask, defensive code","**Is your feature request related to a problem? Please describe.**
Missing branch coverage based on the const CFE_ES_BACKGROUND_JOB_TABLE and defensive coding (not null, timer values):
```
     135 [ +  - ][ +  + ]:         12 :             if (JobPtr->RunFunc != NULL && JobPtr->RunFunc(ElapsedTime, JobPtr->JobArg))
     136                 :            :             {
     137                 :          3 :                 ++NumJobsRunning;
     138                 :            : 
     139 [ +  - ][ +  - ]:          6 :                 if (JobPtr->ActivePeriod != 0 && NextDelay > JobPtr->ActivePeriod)
     140                 :            :                 {
     141                 :            :                     /* next delay is based on this active job wait time */
     142                 :          3 :                     NextDelay = JobPtr->ActivePeriod;
     143                 :            :                 }
     144                 :            :             }
     145 [ +  - ][ +  + ]:          9 :             else if (JobPtr->IdlePeriod != 0 && NextDelay > JobPtr->IdlePeriod)
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_backgroundtask.c#L135-L145

**Describe the solution you'd like**
Maybe split the file such that it can be overridden in a test case with an array that hits these conditions.  Alternatively could just provide an array that has these conditions, but it wouldn't really make sense in operational software.

**Describe alternatives you've considered**
None.  Note the actual implementation is ok as-is, it's just defensive code.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1926
"ES uncovered branch in CFE_ES_TaskEntryPoint, conditions not independent (defensive code)","**Is your feature request related to a problem? Please describe.**
Uncovered branch since RealEntryFunc always != NULL when CFE_ES_GetTaskFunction returns CFE_SUCCESS:
```
     561                 :          4 : void CFE_ES_TaskEntryPoint(void)
     562                 :            : {
     563                 :            :     CFE_ES_TaskEntryFuncPtr_t RealEntryFunc;
     564                 :            : 
     565 [ +  + ][ +  - ]:          4 :     if (CFE_ES_GetTaskFunction(&RealEntryFunc) == CFE_SUCCESS && RealEntryFunc != NULL)
```
here:
https://github.com/nasa/cFE/blob/e5d4ed9a26ce3c991796494bc546341d5036b970/modules/es/fsw/src/cfe_es_apps.c#L561-L565

**Describe the solution you'd like**
If  CFE_ES_GetTaskFunction was stubbed this could be exercised (or alternate implementation).  These are both internal functions so really doesn't require a NULL check.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, coverage",https://github.com/nasa/cFE/issues/1925
"HOTFIX 20210831, use memset to clear structs","**Describe the contribution**
Instead of assigning `{0}`, use an explicit `memset` to clear the local stack structures.

**Testing performed**
Build and run all tests

**Expected behavior changes**
Fixes compiler error when struct did not start with an integer.

**System(s) tested on**
RTEMS 4.11

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",unit-test,https://github.com/nasa/cFE/pull/1924
"Fix #1918, remove extra word in comment","**Describe the contribution**
Remove extra word (and) in comment
Fixes #1918

**Testing performed**
Build and sanity check

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",docs,https://github.com/nasa/cFE/pull/1923
"Fix #1905, Improve SB coverage","**Describe the contribution**
 - Fix #1905

**Testing performed**
Build, run, report coverage, confirm improvement.  Now just missing 3 lines, 18 branches (all documented), 99.8%/97.0%.

**Expected behavior changes**
None, unit test updates for code coverage only

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Issues for uncovered code:
 - #1914 
 - #1916 
 - #1919 
 - #1920 
 - #1666

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1922
Cannot specify custom PSP directory using psp_MISSION_DIR,"**Describe the bug**

Originally discussed in #1864 by @jbohren-hbr 

Cannot specify ""non-standard"" psp source directory via the environment variable $CFS_APP_PATH or the cmake variable ${psp_SEARCH_PATH}.

> The cFE cmake build infrastructure uses the environment / cmake variable $CFS_APP_PATH
as well as the cmake meta-variable pattern ${${APP}_SEARCH_PATH} to locate apps and other modules (such as psp), and subsequently sets the variable pattern ${${APP}_MISSION_DIR} (see mission_build.cmake lines 202-222).

https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/cmake/mission_build.cmake#L202-L222

> However, the resulting variable ${psp_MISSION_DIR} is not used in process_arch() in arch_build.cmake line 588 when including a target platform's build_options.cmake file. This causes a cmake configuration failure when trying to use a non-standard psp location.

https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/cmake/arch_build.cmake#L587-L589

**To Reproduce**
Build with psp in non-standard location, with the CFS_APP_PATH environment variable set

**Expected behavior**
${psp_MISSION_DIR} is used in process_arch() in arch_build.cmake for a successful build


**System observed on:**
System(s) tested on

    Hardware: PC
    OS: Ubuntu 18.04
    Versions: cFE v6.8.0-rc1+dev933


**Reporter Info**
@jbohren-hbr 
","enhancement, build-system",https://github.com/nasa/cFE/issues/1921
"SB missing branch coverage in CFE_SB_SendStatsCmd, alternate config","**Is your feature request related to a problem? Please describe.**
Branch coverage would require a config with CFE_MISSION_SB_MAX_PIPES < CFE_PLATFORM_SB_MAX_PIPES to hit the stats limit first:
```
     731 [ +  + ][ +  - ]:         65 :     while (PipeDscCount > 0 && PipeStatCount > 0)
     732                 :            :     {
     733         [ +  + ]:         64 :         if (CFE_SB_PipeDescIsUsed(PipeDscPtr))
     734                 :            :         {
     735                 :          3 :             PipeStatPtr->PipeId = PipeDscPtr->PipeId;
     736                 :            : 
     737                 :            :             /* Copy depth info */
     738                 :          3 :             PipeStatPtr->CurrentQueueDepth = PipeDscPtr->CurrentQueueDepth;
     739                 :          3 :             PipeStatPtr->PeakQueueDepth    = PipeDscPtr->PeakQueueDepth;
     740                 :          3 :             PipeStatPtr->MaxQueueDepth     = PipeDscPtr->MaxQueueDepth;
     741                 :            : 
     742                 :          3 :             ++PipeStatPtr;
     743                 :          3 :             --PipeStatCount;
     744                 :            :         }
     745                 :            : 
     746                 :         64 :         --PipeDscCount;
     747                 :         64 :         ++PipeDscPtr;
     748                 :            :     }
```
here:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/sb/fsw/src/cfe_sb_task.c#L725-L748

**Describe the solution you'd like**
Test with alternate config to get full coverage.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1920
"SB missing coverage in CFE_SB_AppInit, alternate config but suggested refactor/redesign","**Is your feature request related to a problem? Please describe.**
Uncovered code since it would require an alternate config where CFE_PLATFORM_EVS_MAX_EVENT_FILTERS is less than the defined number of filters:
```
     190                 :            :     /* Be sure the number of events to register for filtering
     191                 :            :     ** does not exceed CFE_PLATFORM_EVS_MAX_EVENT_FILTERS */
     192         [ -  + ]:         12 :     if (CFE_PLATFORM_EVS_MAX_EVENT_FILTERS < CfgFileEventsToFilter)
     193                 :            :     {
     194                 :          0 :         CfgFileEventsToFilter = CFE_PLATFORM_EVS_MAX_EVENT_FILTERS;
     195                 :            :     
```
here:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/sb/fsw/src/cfe_sb_task.c#L190-L195

**Describe the solution you'd like**
Consider refactor of self-filtering, unfriendly to ground management of filters.  Generated events shouldn't spam to begin with, and be useful vs requiring self-filtering.  Or if this pattern is retained the silent misconfiguration isn't great, could better utilize EVS registration error reporting.  Either way this design isn't great.  Could get coverage by modifying config, but really it'd just be broken (have user fix config vs silently not doing what the user requested).

**Describe alternatives you've considered**
See above.

**Additional context**
#1468

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, coverage",https://github.com/nasa/cFE/issues/1919
Comment about MISSION_GLOBAL_APPLIST is confusing,"**Describe the bug**
The first sentence for the description of MISSION_GLOBAL_APPLIST in `cFE/cmake/sample_defs/targets.cmake` does not make sense. 'The ""MISSION_GLOBAL_APPLIST"" is a set of apps/libs that will be built for every defined and target.'  Specifically 'defined and target' does not provide clarity as to the intent here.  Removing the 'and' would have it make sense, but was something else meant to be imparted here?

**To Reproduce**
N/A

**Expected behavior**
N/A

**Code snips**
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/cmake/sample_defs/targets.cmake#L84-L85

**System observed on:**
N/A

**Additional context**
N/A

**Reporter Info**
Alan Gibson
NASA GSFC/587
","question, docs",https://github.com/nasa/cFE/issues/1918
make fails under MacOS,"**This may be a cFS issue (initial step is to check out cFS and work from its directory, but then cfe/Makefile is copied and used).  The issue may be moved to the appropriate repo.**

When following the instructions in the README on a Mac (either Intel or Apple Silicon ARM) , the first make fails with 
```
CMake Error at cmake/arch_build.cmake:542 (message):
  Do not know how to set CFE_SYSTEM_PSPNAME on Darwin system
Call Stack (most recent call first):
  CMakeLists.txt:120 (prepare)
```

This looks like a regression or maybe an untested case of #629 .

Steps to reproduce the behavior:

On a Mac, follow the instructions in the README to clone the project and then start the first make:

```
git clone https://github.com/nasa/cFS.git
cd cFS
git submodule init
git submodule update
cp cfe/cmake/Makefile.sample Makefile
cp -r cfe/cmake/sample_defs sample_defs
```
so far so good
```
 make SIMULATION=native prep
```
fails with first error message to console:
```
CMake Error at cmake/arch_build.cmake:542 (message):
  Do not know how to set CFE_SYSTEM_PSPNAME on Darwin system
Call Stack (most recent call first):
  CMakeLists.txt:120 (prepare)
```

The CMakeError.log file says:

```
ld: library not found for -lSystem
```
but that may be a secondary cascade error.

I would expect it to compile without error.

This is observed on both a MacBook M1 and a Mac Pro (Intel), both with latest macOS (11.5.2) and toolchain (Xcode 11.5.1; cmake 3.20.5; AppleClang 12.0.5.12050022). zsh shell (but same result under bash).

Output of make attached:
[make_output.txt](https://github.com/nasa/cFE/files/7080111/make_output.txt)
[CMakeError.log](https://github.com/nasa/cFE/files/7080101/CMakeError.log)
[CMakeOutput.log](https://github.com/nasa/cFE/files/7080102/CMakeOutput.log)

",enhancement,https://github.com/nasa/cFE/issues/1917
SB line coverage for collision reporting in CFE_SB_SubscribeFull requires alternate config,"**Is your feature request related to a problem? Please describe.**
Default config doesn't use the hash implementation, so there's no way to get collisions:
```
    1129         [ -  + ]:        451 :     if (Collisions != 0)
    1130                 :            :     {
    1131                 :          0 :         CFE_EVS_SendEventWithAppID(CFE_SB_HASHCOLLISION_EID, CFE_EVS_EventType_DEBUG, CFE_SB_Global.AppId,
    1132                 :            :                                    ""Msg hash collision: MsgId = 0x%x, collisions = %u"",
    1133                 :          0 :                                    (unsigned int)CFE_SB_MsgIdToValue(MsgId), (unsigned int)Collisions);
    1134                 :            :     }
```
here:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/sb/fsw/src/cfe_sb_api.c#L1129-L1134

**Describe the solution you'd like**
#1462

**Describe alternatives you've considered**
None.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1916
"Fix #1946, Correct various typos in docs, comments and error messages","**Describe the contribution**
Fixed various minor typos in README docs, comments and a few debug/error/description message strings.
  
- Fix #1946

**Testing performed**
None (non-executable code).

**Expected behavior changes**
None. Code execution is unchanged/unaffected.

**System(s) tested on**
n/a

**Additional context**
n/a

**Code contributions**
n/a",community,https://github.com/nasa/cFE/pull/1915
"SB missing branch coverage in CFE_SB_DeletePipeFull, CFE_SB_SubscribeFull, CFE_SB_UnsubscribeFull: PendingEventID != 0 when status == CFE_SUCCESS","**Is your feature request related to a problem? Please describe.**
PendingEventID is always set, so can't hit false case:
```
     447         [ +  - ]:          3 :     else if (PendingEventID != 0)
     448                 :            :     {
     449                 :          3 :         CFE_SB_Global.HKTlmMsg.Payload.CreatePipeErrorCounter++;
     450                 :            :     }
```
here:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/sb/fsw/src/cfe_sb_api.c#L447-L450

Same pattern in CFE_SB_SubscribeFull (although inverted):
```
    1115         [ +  - ]:        438 :     else if (Status == CFE_SUCCESS)
    1116                 :            :     {
    1117                 :            :         /* If no other event pending, send a debug event indicating success */
    1118                 :        876 :         CFE_EVS_SendEventWithAppID(CFE_SB_SUBSCRIPTION_RCVD_EID, CFE_EVS_EventType_DEBUG, CFE_SB_Global.AppId,
    1119                 :            :                                    ""Subscription Rcvd:MsgId 0x%x on PipeId %lu,app %s"",
    1120                 :        438 :                                    (unsigned int)CFE_SB_MsgIdToValue(MsgId), CFE_RESOURCEID_TO_ULONG(PipeId),
    1121                 :            :                                    CFE_SB_GetAppTskName(TskId, FullName));
    1122                 :            :     }
```
here:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/sb/fsw/src/cfe_sb_api.c#L1115-L1122

Again in CFE_SB_UnsubscribeFull:
```
    1310         [ +  - ]:         10 :     else if (Status == CFE_SUCCESS)
    1311                 :            :     {
    1312                 :            :         /* if no other event pending, send a debug event for successful unsubscribe */
    1313                 :         20 :         CFE_EVS_SendEventWithAppID(CFE_SB_SUBSCRIPTION_REMOVED_EID, CFE_EVS_EventType_DEBUG, CFE_SB_Global.AppId,
    1314                 :            :                                    ""Subscription Removed:Msg 0x%x on pipe %lu,app %s"",
    1315                 :         10 :                                    (unsigned int)CFE_SB_MsgIdToValue(MsgId), CFE_RESOURCEID_TO_ULONG(PipeId),
    1316                 :            :                                    CFE_SB_GetAppTskName(TskId, FullName));
    1317                 :            :     }
```
here:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/sb/fsw/src/cfe_sb_api.c#L1310-L1317

**Describe the solution you'd like**
Consider just `else`?  Anything that isn't a SUCCESS should increment the error counter.

**Describe alternatives you've considered**
None.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1914
"Fix #1912, Update time tests to use bitmask check macros","**Describe the contribution**
The new bitmask check macros provide more concise information the resulting log file.  This updates the time test to use those macros when checking the state flags.

**Testing performed**
Build and run all tests, confirm log output is correct

**Expected behavior changes**
Improved test log file info

**System(s) tested on**
Ubuntu

**Additional context**
Note this also changes the code to call `CFE_TIME_GetClockInfo()` repeatedly, rather than storing in a local variable and checking that value.  The intent is to clearly indicate in the log that this function was invoked, not just what its output was.  This helps with tracking/confirming that the function is covered by the functional test.

This just reads a global so it should not be different in subsequent calls, unless the clock actually changes state during the test.  But that was already a risk with the separate call to `CFE_TIME_GetClockState`, this does not really change that - and the flags are not really connected otherwise.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, dependency",https://github.com/nasa/cFE/pull/1913
Update TIME tests to use bitmask check macros,"**Is your feature request related to a problem? Please describe.**
With nasa/osal#1136, UtAssert now provides a better macro for testing bit fields/masks.  The updated macro provides better/more concise information in the test log.

**Describe the solution you'd like**
Replace the UtAssert_UINT32_EQ checks with the new macros - UtAssert_BITMASK_SET/UtAssert_BITMASK_UNSET.

**Additional context**
Depends on nasa/osal#1136 and nasa/cfe#1860 (both currently in IC but not in main, as of this writing).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/1912
"Fix #1300, CFE_ES_MemAddOff structure to associated CFE_ES_MemAddress_t and CFE_ES_MemOffset_t","**Describe the contribution**
- Fixes #1300 

**Testing performed**
1. Github actions

**Expected behavior changes**
- Nothing

**Additional context**
See #1300.

I'm new to the docs system in this project, what is the type I should use for [cfe_es.xml Line 195-209](https://github.com/pavll/cFE/blob/b167af9db58b0fd7521f5c096a95d4fe985c6ff4/modules/es/eds/cfe_es.xml#L195-L209)?
Maybe implement a new type in ""BASE_TYPES"", how? 
After this fix, I'll squash the commits with a clear commit message.

**Contributor Info - All information REQUIRED for consideration of pull request**
@pavll
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/1911
"Fix #1907, Cmake modifiable table tool path parameter","Cmake option to change the path of the ef2cfetbl executable file via the TABLETOOL_EXE environment variable. This also enables the user to specify other tools as table tool if needed.

**Describe the contribution**
- Fixes #1907 

**Testing performed**
1. Github actions

**Expected behavior changes**
- Nothing only if `TABLETOOL_EXE` environment variable is set. Then the cmake would use the content as path to an executable used for transforming lib into tbl. 
  **IMPORTANT!**
  If `TABLETOOL_EXE` isn't set the build process does not change. But if it is set the program won't add the default ef2cfetbl tool 
  as a dependency in cmake and the with TABLETOOL_EXE specified executable will be run with the parameters like for the 
  ef2cfetbl utility.

**Additional context**
See above.

**Contributor Info - All information REQUIRED for consideration of pull request**
@pavll 
",,https://github.com/nasa/cFE/pull/1910
"Fix #1302, Use macro in CFE_ResourceId_IsDefined","**Describe the contribution**
- Fixes #1302 

**Testing performed**
1. Github actions checks

**Contributor Info - All information REQUIRED for consideration of pull request**
@pavll
","CCB:Approved, community, draco-rc1",https://github.com/nasa/cFE/pull/1909
"Fix #1319, Remove extern from function prototypes","**Describe the contribution**
- Fixes #1319

**Testing performed**
1. Github actions checks

**Expected behavior changes**
- Nothing

**Contributor Info - All information REQUIRED for consideration of pull request**
Paul Oberosler, Individual","CCB:Approved, community, draco-rc1",https://github.com/nasa/cFE/pull/1908
Relax CMake directory expectations for elf2cfetbl,"**Is your feature request related to a problem? Please describe.**
See conversation in <https://github.com/nasa/cFS/discussions/319>


> From a dependency / scope standpoint, the cfe_add_tables() function really wants to be defined along with the table tool sources themselves. Then, after finding the table source directory, the cFE CMake infrastructure could import implementations of those cmake functions which are tool-specific. Then cFE and table generation can be decoupled via the cfe_add_tables() interface. In that way, different implementations for cfe_add_tables() can be used depending on the mission config.

**Describe the solution you'd like**

Create a modifiable CMAKE parameter for the location of elf2cfetbl so users can design custom directory structures

**Describe alternatives you've considered**

Long-term, let users define custom toolchain compositions using tools other than elf2cfetbl

**Additional context**
See above
","enhancement, build-system",https://github.com/nasa/cFE/issues/1907
Enforce cFE code coverage minimum statistics,"**Is your feature request related to a problem? Please describe.**
Code coverage not enforced, so it's easy to miss where code modifications should trigger coverage test updates

**Describe the solution you'd like**
Enforce (like OSAL) maximum uncovered lines/branches in CI.  Would benefit from an additional makefile rule or similar to separate and report out just cFE coverage.

**Describe alternatives you've considered**
None

**Additional context**
Should enforce as soon as the full coverage scrub is complete.  As we address missing coverage issues in the future we can adjust the limits.

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, continuous-integration",https://github.com/nasa/cFE/issues/1906
SB code coverage improvements,"**Is your feature request related to a problem? Please describe.**
There's a few achievable code/branch coverage lines in SB.

**Describe the solution you'd like**
Cover them.

**Describe alternatives you've considered**
None

**Additional context**
OK as-is:
- #1666 
- #1669

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1905
"Fix #1897 #1899, Improve TBL code coverage","**Describe the contribution**
- Fix #1897 
- Fix #1899 

**Testing performed**
Build/run/report coverage on unit tests, confirm improvement

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Remaining uncovered: 5 lines, 6 branches, documented in:
  - #1898 
  - #1873 
  - #1900 
  - #1901 
  - #1838

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1904
"Fix #1216, Update Directory Diagrams in App Developer Guide","**Describe the contribution**
Fixes #1216 

**Expected behavior changes**
Used tree to provide a tree view of cFS, cFE, Build, and Apps. 

**Additional context**
Did not add CS directory. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal","CCB:Approved, docs",https://github.com/nasa/cFE/pull/1903
"Fix #1616, Incorrect OSAL Format in Users Guide Reference","**Describe the contribution**
Fixes #1616 

**Expected behavior changes**
Users know where to find autogenerated documents and other documents. 

**Additional context**
Did not keep the table in case files change names, location, or documents are added/removed. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal","CCB:Approved, docs",https://github.com/nasa/cFE/pull/1902
"TBL uncovered lines in CFE_TBL_LoadCmd, no alternative error codes from CFE_TBL_GetWorkingBuffer","**Is your feature request related to a problem? Please describe.**
CFE_TBL_GetWorkingBuffer has no alternative error codes to exercise the following code in CFE_TBL_LoadCmd:
```
     492         [ +  - ]:          2 :                         else if (Status == CFE_TBL_ERR_NO_BUFFER_AVAIL)
     493                 :            :                         {
     494                 :          2 :                             CFE_EVS_SendEvent(CFE_TBL_NO_WORK_BUFFERS_ERR_EID, CFE_EVS_EventType_ERROR,
     495                 :            :                                               ""No working buffers available for table '%s'"", TblFileHeader.TableName);
     496                 :            :                         }
     497                 :            :                         else
     498                 :            :                         {
     499                 :          0 :                             CFE_EVS_SendEvent(CFE_TBL_INTERNAL_ERROR_ERR_EID, CFE_EVS_EventType_ERROR,
     500                 :            :                                               ""Internal Error (Status=0x%08X)"", (unsigned int)Status);
     501                 :            :                         }
```
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L492-L501

**Describe the solution you'd like**
Could cover if CFE_TBL_GetWorkingBuffer was stubbed (test individual file units in #1886).  Note there is a possible internal error from getting the mutex, but it doesn't get returned (see #1469)

**Describe alternatives you've considered**
Trade refactor/removal of condition... it's useful if errors do get added, just not currently reachable.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1901
TBL missing branch coverage of run-time endian logic (and sometimes line),"**Is your feature request related to a problem? Please describe.**
TBL suffers from the unfortunate pattern of run time checks for endian (and associated logic), which leads to uncovered branches and possibly uncovered code (depending on endian of platform).
```
    1158         [ +  - ]:         33 :                     if ((*(char *)&EndianCheck) == 0x04)
    1159                 :            :                     {
    1160                 :            :                         /* If this is a little endian processor, then the standard cFE Table Header,   */
    1161                 :            :                         /* which is in big endian format, must be swapped so that the data is readable */
    1162                 :         33 :                         CFE_TBL_ByteSwapTblHeader(TblFileHeaderPtr);
    1163                 :            :                     }
```
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/tbl/fsw/src/cfe_tbl_internal.c#L1158-L1163

same pattern in:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L740-L748

**Describe the solution you'd like**
Complete coverage is possible if run on each system, but should be resolved in the future.  Possibly in concert with #1209 and related abstraction such that this code doesn't care (whatever underlying API/implementation that handles raw data should do the appropriate conversion).

**Describe alternatives you've considered**
None

**Additional context**
Same as #1882 for FS

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, coverage",https://github.com/nasa/cFE/issues/1900
TBL unreachable branch in CFE_TBL_GetWorkingBuffer and CFE_TBL_UpdateInternal (memcpy overlap avoidance),"**Is your feature request related to a problem? Please describe.**
Can't hit ever hit the second false condition below since it only sets the buffer to inactive or a working buffer (never the same as active):
```
     789 [ +  + ][ +  - ]:         22 :             if ((*WorkingBufferPtr) != NULL &&
     790                 :         17 :                 (*WorkingBufferPtr)->BufferPtr != RegRecPtr->Buffers[RegRecPtr->ActiveBufferIndex].BufferPtr)
     791                 :            :             {
     792                 :            :                 /* In case the file contains a partial table load, get the active buffer contents first */
     793                 :         17 :                 memcpy((*WorkingBufferPtr)->BufferPtr, RegRecPtr->Buffers[RegRecPtr->ActiveBufferIndex].BufferPtr,
     794                 :            :                        RegRecPtr->Size);
     795                 :            :             }
```
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/tbl/fsw/src/cfe_tbl_internal.c#L789-L795

Same pattern in CFE_TBL_UpdateInternal
```
    1009         [ +  - ]:          6 :                 if (RegRecPtr->Buffers[0].BufferPtr != CFE_TBL_Global.LoadBuffs[RegRecPtr->LoadInProgress].BufferPtr)
    1010                 :            :                 {
    1011                 :          6 :                     memcpy(RegRecPtr->Buffers[0].BufferPtr,
    1012                 :          6 :                            CFE_TBL_Global.LoadBuffs[RegRecPtr->LoadInProgress].BufferPtr, RegRecPtr->Size);
    1013                 :            :                 }
```
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/tbl/fsw/src/cfe_tbl_internal.c#L1008-L1013

**Describe the solution you'd like**
Trade ""defensive"" programming (avoids memcpy overlap which is undefined behavior) w/ removing the impossible condition check since the only way to reach it would be to introduce a bug.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, coverage",https://github.com/nasa/cFE/issues/1899
TBL: CFE_TBL_Register branch coverage requires alternate configuration,"**Is your feature request related to a problem? Please describe.**
Hitting the condition below would require CFE_PLATFORM_TBL_MAX_SNGL_TABLE_SIZE > CFE_PLATFORM_TBL_MAX_DBL_TABLE_SIZE, with a single buffer table and size between the two settings (shouldn't create the system log message)
```
     112 [ +  + ][ +  - ]:        172 :             else if ((Size > CFE_PLATFORM_TBL_MAX_DBL_TABLE_SIZE) &&
     113                 :          1 :                      ((TblOptionFlags & CFE_TBL_OPT_BUFFER_MSK) == CFE_TBL_OPT_DBL_BUFFER))
     114                 :            :             {
     115                 :          1 :                 Status = CFE_TBL_ERR_INVALID_SIZE;
     116                 :            : 
     117                 :          1 :                 CFE_ES_WriteToSysLog(""%s: Dbl Buffered Table '%s' has size %d > %d\n"", __func__, Name, (int)Size,
     118                 :            :                                      CFE_PLATFORM_TBL_MAX_DBL_TABLE_SIZE);
     119                 :            :             }
```
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/tbl/fsw/src/cfe_tbl_api.c#L112-L119

**Describe the solution you'd like**
Add multiple builds in CI with alternate settings to include this config.

**Describe alternatives you've considered**
Could manually cover.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","unit-test, coverage",https://github.com/nasa/cFE/issues/1898
TBL coverage can be improved,"**Is your feature request related to a problem? Please describe.**
Still some easy coverage missing in TBL.

**Describe the solution you'd like**
Add it

**Describe alternatives you've considered**
None

**Additional context**
OK as-is: #1838, #1837

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1897
"Fix #1895, Improve TIME branch coverage","**Describe the contribution**
Fix #1895, TIME now at 99.8%/99.7% with just #1841 outstanding

**Testing performed**
Build/run/verify coverage for unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Remaining uncovered: 2 lines, 1 branch:
 - #1841

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1896
TIME improve branch coverage,"**Is your feature request related to a problem? Please describe.**
A few more branches in TIME could be fairly easily covered

**Describe the solution you'd like**
Add coverage

**Describe alternatives you've considered**
None

**Additional context**
OK as-is: #1841

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1895
"Fix #1893, Improve SBR branch coverage","**Describe the contribution**
Fix #1893, now at 100/100 for SBR

**Testing performed**
Build, run, check coverage for unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1894
SBR incomplete branch coverage,"**Is your feature request related to a problem? Please describe.**
Easy branches currently uncovered.

**Describe the solution you'd like**
Add coverage

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1893
Silently limiting UseCount in CFE_SB_IncrBufUseCnt might cause issues when released early,"Limiting the maximum value silently leads to the queue being released before all users are done.  This really should create an error on subscribe or similar to avoid potential issues/strange behavior.  Maybe this case is protected somewhere else, but until confirmed to not be an issue, marking as bug since in theory this could cause pretty strange results..  Not immediately critical since there aren't 0x7FFF subscribers in any currently realistic system.

_Originally posted by @skliper in https://github.com/nasa/cFE/issues/1464#issuecomment-905847844_",invalid,https://github.com/nasa/cFE/issues/1892
"Fix #1890, Improve resource ID branch coverage","**Describe the contribution**
Fix #1890 - pushes resource ID coverage to 100/100

Note it was just an out-of-order test where Id was made invalid before the section that needed a valid Id to get full coverage, so swapped the tests.

**Testing performed**
Build/run/report coverage for unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1891
RID missing branch coverage,"**Is your feature request related to a problem? Please describe.**
Resource ID is missing full branch coverage

**Describe the solution you'd like**
Add it.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1890
"Fix #1888, Improve MSG branch coverage","**Describe the contribution**
Fix #1888 - improves MSG branch coverage

Note only remaining is documented in #1887

**Testing performed**
Build/run/report coverage for unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Remaining uncovered: 0 lines, 6 branches:
  - #1887

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1889
MSG - improve coverage,"**Is your feature request related to a problem? Please describe.**
Additional missing branch coverage can be added

**Describe the solution you'd like**
Add it.

**Describe alternatives you've considered**
None

**Additional context**
OK as-is: #1887

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/cFE/issues/1888
"MSG missing branch coverage, would require alternate/stub implementation and splitting up coverage executable","**Is your feature request related to a problem? Please describe.**
The software is implemented to support multiple options but currently just utilizes a single option to build one executable (see issue #1886) which means it's impossible to cover all the branches.

Example - can't hit the non-success case of the following branch since the selected implementation for `CFE_MSG_GetType` used internally can't fail (although conceptually an implementation could test the header version and reject if it doesn't match for example):
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/msg/fsw/src/cfe_msg_sechdr_checksum.c#L79-L83

**Describe the solution you'd like**
This could be solved by implementing #1886 (related to #631)

**Describe alternatives you've considered**
None

**Additional context**
Results in 6 branches not being exercised.

**Requester Info**
Jacob Hageman - NASA/GSFC","unit-test, coverage",https://github.com/nasa/cFE/issues/1887
Split msg coverage tests into multiple executables to be able to cover all implementations,"**Is your feature request related to a problem? Please describe.**
Currently with just one executable it's not possible to cover all implementations with one build/run, so source selection is used:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/msg/ut-coverage/CMakeLists.txt#L28-L45

**Describe the solution you'd like**
Split into smaller units, probably makes sense to do the 1 for 1 pattern like OSAL and then all the implementations can be covered from one build/run.

**Describe alternatives you've considered**
None

**Additional context**
Related to #631, and the suggested responses.

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1886
cFE Integration candidate: 2021-08-31,"**Describe the contribution**

PR #1870 

- Fix #1812, Add SB API test cases


PR #1869 

- Fix #1866, Add ES API test cases


PR #1872 

- Fix #1868, Add TBL API test cases

PR #1871 

- Fix #1867, Add FS API test cases

PR #1860 

- Fix #1843, Add Time Clock Test 

PR #1862 

EVS Coverage
- Fixes #1819, Adds test for MessageSendCounter not incrementing when sending a filtered event.
- Fixes #1820, Adds tests for LogOverflowCounter incrementing when the log overflows.


PR #1876

SB test improvements
- Fix #1825 
- Fix #1826
- Fix #1829
- Fix #1830

    
PR #1865 

- Fix #1834, CFE_TBL_Modified: Test CRC, updated flag
    
PR#1881 

- Fix #1879 Improve EVS code coverage

PR #1877, 

- Fix #1769, Add call to CFE_ES_ExitChildTask

PR #1884 

- Fix #1880, Improve FS coverage 

PR #1889

- Fix #1888, Improve MSG branch coverage

PR #1891,

- Fix #1890, Improve resource ID branch coverage 


PR #1894 

- Fix #1893, Improve SBR branch coverage 

PR #1904 

Improve TBL code coverage 

- Fix #1897 
- Fix #1899, 

PR #1864 

- Fix #1921, Support custom PSP directory

PR #1913 

- Fix #1912, Update time tests to use bitmask check macros 

**Testing performed**
Ubuntu CI 
cFE Checks <https://github.com/nasa/cFE/pull/1885/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/348/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu CI
RTEMS CI (cFS bundle)

**Additional context**
Part of https://github.com/nasa/cFS/pull/348

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey
@skliper
@pepepr08 
@ArielSAdamsNASA 
@jbohren-hbr 
@zanzaben 
",,https://github.com/nasa/cFE/pull/1885
"Fix #1880, Improve FS coverage","**Describe the contribution**
Fix #1880 - FS coverage now at 100% line and 96.7% branch (all but 5 branches)

**Testing performed**
Build unit tests, run , report coverage

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Remaining uncovered: 0 lines, 5 branches:
- #1882
- #1883

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1884
FS CFE_FS_ParseInputFileNameEx missing branch coverage (defensive condition check),"**Is your feature request related to a problem? Please describe.**
Non-independent conditions checked in CFE_FS_ParseInputFileNameEx:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/fs/fsw/src/cfe_fs_api.c#L441

Since when processing `EXTENSION_COMPONENT` (the case before `END_COMPONENT`) the InputPtr is set to NULL:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/fs/fsw/src/cfe_fs_api.c#L547-L558

**Describe the solution you'd like**
Trade the usefulness of testing for an unreachable condition.  It's ""defensive"" but only reachable by changing the implementation, although it can't cause harm.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1883
FS missing branch coverage of run-time endian logic (and sometimes line),"**Is your feature request related to a problem? Please describe.**
FS suffers from the unfortunate pattern of run time checks for endian (and associated logic), which leads to uncovered branches and possibly uncovered code (depending on endian of platform).

Example:
https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/modules/fs/fsw/src/cfe_fs_api.c#L149-L155

**Describe the solution you'd like**
Complete coverage is possible if run on each system, but should be resolved in the future.  Possibly in concert with #1209 and related abstraction such that this code doesn't care (whatever underlying API/implementation that handles raw data should do the appropriate conversion).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1882
"Fix #1879, Improve EVS code coverage","**Describe the contribution**
Fix #1879, now getting 100% line and branch coverage on EVS

**Testing performed**
Build unit tests, run, report coverage, confirm 100% on EVS

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1881
FS code coverage improvements,"**Is your feature request related to a problem? Please describe.**
FS still has a few lines of uncovered code.

**Describe the solution you'd like**
Another coverage update, hit at minimum the parameter and stub related coverage, document the rest via issues if it's overly challenging this round.

**Describe alternatives you've considered**
None, we need to meet minimum coverage expectations.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1880
EVS code coverage improvements,"**Is your feature request related to a problem? Please describe.**
EVS still has a few lines of uncovered code.

**Describe the solution you'd like**
Another coverage update, hit at minimum the parameter and stub related coverage, document the rest via issues if it's overly challenging this round.

**Describe alternatives you've considered**
None, we need to meet minimum coverage expectations.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1879
ES code coverage improvements,"**Is your feature request related to a problem? Please describe.**
ES still has a fair amount of uncovered code.

**Describe the solution you'd like**
Another coverage update, hit at minimum the parameter and stub related coverage, document the rest via issues if it's overly challenging this round.

**Describe alternatives you've considered**
None, we need to meet minimum coverage expectations.

**Additional context**
Already documented coverage issues (OK as-is):
 - #1696 
 - #1652 
 - #1628

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/cFE/issues/1878
"Fix #1769, add call to CFE_ES_ExitChildTask","**Describe the contribution**
Invoke CFE_ES_ExitChildTask from the main test task, to confirm that the task does not actually exit.  There is no status code
but the fact that the test keeps running is evidence that the task did not exit (which means the test passed).

Fixes #1769

**Testing performed**
Build and run CFE functional test

**Expected behavior changes**
Adds test case for CFE_ES_ExitChildTask being called from main task (no actual effect, request is rejected, task does not exit).

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1877
"Fix #1825, #1826, #1829, #1830, SB test improvements","**Describe the contribution**
A set of additional test cases to improve requirements coverage of the SB functional test.

Fixes #1825 - Adds unsubscribe of single pipe ID, confirms other subscriptions not changed
Fixes #1826 - Confirms that MsgLimit and PipeDepth are both honored and that delivery to other (open) pipes is not affected when some pipes have reached delivery limits
Fixes #1829 - Adds use of CFE_SB_PEND_FOREVER in some cases 
Fixes #1830 - Adds a sequence number validation to the Zero copy test.

**Testing performed**
Build and sanity check CFE, run all functional tests

**Expected behavior changes**
Functional test covers requirements as indicated in linked issues

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1876
Caelum non-tested TBL APIs,"**Is your feature request related to a problem? Please describe.**
The following TBL APIs are not being exercised in the functional test:

Cases requiring a second/companion app without access to the test table:
```
 + condition: CFE_TBL_DumpToBuffer[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_GetAddress[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_GetStatus[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Manage[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Modified[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Register[any]=>CFE_TBL_ERR_DUPLICATE_NOT_OWNED
 + condition: CFE_TBL_ReleaseAddress[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Unregister[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Update[any]=>CFE_TBL_ERR_NO_ACCESS
 + condition: CFE_TBL_Validate[any]=>CFE_TBL_ERR_NO_ACCESS
```

Other special registration cases that may require an intermediate reboot to achieve:
```
 + condition: CFE_TBL_Register[any]=>CFE_TBL_INFO_RECOVERED_TBL
 + condition: CFE_TBL_Register[any]=>CFE_TBL_WARN_NOT_CRITICAL
```

Cases requiring a transient state outside control of the test:
```
 + condition: CFE_TBL_DumpToBuffer[any]=>CFE_TBL_INFO_DUMP_PENDING
 + condition: CFE_TBL_GetStatus[any]=>CFE_TBL_INFO_DUMP_PENDING
 + condition: CFE_TBL_GetStatus[any]=>CFE_TBL_INFO_UPDATE_PENDING
 + condition: CFE_TBL_GetStatus[any]=>CFE_TBL_INFO_VALIDATION_PENDING
 + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_LOAD_IN_PROGRESS
 + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_NO_BUFFER_AVAIL
 + condition: CFE_TBL_Manage[any]=>CFE_TBL_INFO_DUMP_PENDING
 + condition: CFE_TBL_Manage[any]=>CFE_TBL_INFO_UPDATE_PENDING
 + condition: CFE_TBL_Manage[any]=>CFE_TBL_INFO_VALIDATION_PENDING
```

**Describe the solution you'd like**
Document for Caelum, eventually add a second test app and/or more sophisticated tests that can exercise these.

**Additional context**
Identified as part of scrub in #1724
Some cases depend on having second test app per #1761

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test, functional",https://github.com/nasa/cFE/issues/1875
Caelum non-tested ES APIs,"**Is your feature request related to a problem? Please describe.**
The following ES APIs are not being exercised in the functional test:

Related to CFE itself (cannot reboot CFE in the middle of a test, could be done by parent script though):
```
 + condition: CFE_ES_ResetCFE[any]=>CFE_SUCCESS
```

Related to app/CFE management (these require a second test app that can be reloaded/restarted):
```
 + condition: CFE_ES_DeleteApp[any]=>CFE_SUCCESS
 + condition: CFE_ES_ReloadApp[any]=>CFE_SUCCESS
 + condition: CFE_ES_RestartApp[any]=>CFE_SUCCESS
```

Related to CDS implementation (or lack thereof; all current targets _do_ implement CDS, even though documentation allows it to return this code if it is not implemented):
```
 + condition: CFE_ES_GetCDSBlockIDByName[any]=>CFE_ES_NOT_IMPLEMENTED
 + condition: CFE_ES_GetCDSBlockName[any]=>CFE_ES_NOT_IMPLEMENTED
 + condition: CFE_ES_RegisterCDS[any]=>CFE_ES_NOT_IMPLEMENTED
 + condition: CFE_ES_ResetCFE[any]=>CFE_ES_NOT_IMPLEMENTED
```

Related to syslog (depends on having runtime mode set to ""discard"" rather than ""overwrite"", which is not currently under test control:
```
 + condition: CFE_ES_WriteToSysLog[any]=>CFE_ES_ERR_SYS_LOG_FULL
```

**Describe the solution you'd like**
Document for Caelum, eventually add a second test app and/or more sophisticated tests that can exercise these.

**Additional context**
Identified as part of scrub in #1724
Some cases depend on having second test app per #1761

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, unit-test, functional",https://github.com/nasa/cFE/issues/1874
"Fix #1672, return type conversions in CFE_ES_GetTaskName","**Describe the contribution**
Provide better status code conversion from OS_GetResourceName

Fixes #1672

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
Better status returns from CFE_ES_GetTaskName API

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/1873
"Fix #1868, Add TBL API test cases","**Describe the contribution**
Adds TBL functional test cases to cover all missing items that were identified as part of the scrub in issue #1724.

Where a specific condition is not testable because it requires a failure of another subsystem, it is marked as `covtest` to
indicate it is only verifiable in coverage test environment.

Fixes #1868

**Testing performed**
Build and run CFE functional tests

**Expected behavior changes**
Adds test cases described in #1868

**System(s) tested on**
Ubuntu

**Additional context**
Related to scrub in #1724

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1872
"Fix #1867, Add FS API test cases","**Describe the contribution**
Adds FS functional test cases to cover all missing items that were identified as part of the scrub in issue #1724.

Where a specific condition is not testable because it requiresa failure of another subsystem, it is marked as `covtest` to
indicate it is only verifiable in coverage test environment.

Fixes #1867

**Testing performed**
Build and run CFE functional tests

**Expected behavior changes**
Adds test cases described in #1867

**System(s) tested on**
Ubuntu

**Additional context**
Related to scrub in #1724

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1871
"Fix #1812, Add SB API test cases","**Describe the contribution**
Adds SB functional test cases to cover all missing items that were identified as part of the scrub in issue #1724.

Where a specific condition is not testable because it requires a failure of another subsystem, it is marked as `covtest` to
indicate it is only verifiable in coverage test environment.

Fixes #1812

**Testing performed**
Build and run CFE functional tests

**Expected behavior changes**
Adds test cases described in #1812

**System(s) tested on**
Ubuntu

**Additional context**
Related to scrub in #1724

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1870
"Fix #1866, Add ES API test cases","Adds ES functional test cases to cover all missing items that were identified as part of the scrub in issue #1724.

Where a specific condition is not testable because it requires a failure of another subsystem, it is marked as `covtest` to
indicate it is only verifiable in coverage test environment.

Fixes #1866

**Testing performed**
Build and run CFE functional tests

**Expected behavior changes**
Adds test cases described in #1866

**System(s) tested on**
Ubuntu

**Additional context**
Related to scrub in #1724

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1869
Missing test cases for table services API parameter/return combinations,"**Is your feature request related to a problem? Please describe.**
The following parameter/return code combinations are not exercised by the table services functional test:

```
  + condition: CFE_TBL_DumpToBuffer[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_GetAddress[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_TBL_GetAddress[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_GetAddress[any]=>CFE_TBL_BAD_ARGUMENT
  + condition: CFE_TBL_GetInfo[<null-pointer>@1]=>ERROR_NULL_POINTER
  + condition: CFE_TBL_GetStatus[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Load[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_BAD_CONTENT_ID
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_BAD_SUBTYPE_ID
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_FILE_TOO_LARGE
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_ILLEGAL_SRC_TYPE
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_LOAD_INCOMPLETE
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_NO_STD_HEADER
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_NO_TBL_HEADER
  + condition: CFE_TBL_Load[any]=>CFE_TBL_ERR_PARTIAL_LOAD
  + condition: CFE_TBL_Load[any]=>CFE_TBL_WARN_PARTIAL_LOAD
  + condition: CFE_TBL_Load[any]=>CFE_TBL_WARN_SHORT_FILE
  + condition: CFE_TBL_Manage[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Modified[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_NotifyByMessage[CFE_TBL_Handle_t@0]=>ERROR_RESOURCEID_INVALID
  + condition: CFE_TBL_NotifyByMessage[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_NotifyByMessage[any]=>CFE_TBL_ERR_INVALID_HANDLE
  + condition: CFE_TBL_Register[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_TBL_Register[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Register[any]=>CFE_TBL_BAD_ARGUMENT
  + condition: CFE_TBL_Register[any]=>CFE_TBL_ERR_DUPLICATE_DIFF_SIZE
  + condition: CFE_TBL_Register[any]=>CFE_TBL_ERR_HANDLES_FULL
  + condition: CFE_TBL_ReleaseAddress[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Share[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_TBL_Share[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Share[any]=>CFE_TBL_ERR_HANDLES_FULL
  + condition: CFE_TBL_Unregister[CFE_TBL_Handle_t@0]=>ERROR_RESOURCEID_INVALID
  + condition: CFE_TBL_Unregister[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Update[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_TBL_Validate[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
```

**Describe the solution you'd like**
Solve each missing case in one of three ways:
1. Add a test case covering that option
2. Update the API documentation
3. Add a `@covtest` tag if the combination can only be reasonably achieved in a coverage environment

**Additional context**
Part of/related to #1724 (each subsystem will be handled separately)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, unit-test, functional",https://github.com/nasa/cFE/issues/1868
Missing test cases for file services API parameter/return combinations,"**Is your feature request related to a problem? Please describe.**
The following parameter/return code combinations are not exercised by the file services functional test:

```
  + condition: CFE_FS_ExtractFilenameFromPath[any]=>CFE_FS_FNAME_TOO_LONG
  + condition: CFE_FS_ExtractFilenameFromPath[any]=>CFE_FS_INVALID_PATH
  + condition: CFE_FS_SetTimestamp[any]=>CFE_STATUS_EXTERNAL_RESOURCE_FAIL
```

**Describe the solution you'd like**
Solve each missing case in one of three ways:
1. Add a test case covering that option
2. Update the API documentation
3. Add a `@covtest` tag if the combination can only be reasonably achieved in a coverage environment

**Additional context**
Part of/related to #1724 (each subsystem will be handled separately)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, unit-test, functional",https://github.com/nasa/cFE/issues/1867
Missing test cases for executive services API parameter/return combinations,"**Is your feature request related to a problem? Please describe.**
The following parameter/return code combinations are not exercised by the executive services functional test:

```
  + condition: CFE_ES_CreateChildTask[any]=>CFE_ES_ERR_CHILD_TASK_CREATE
  + condition: CFE_ES_CreateChildTask[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_ES_DeleteChildTask[any]=>CFE_ES_ERR_CHILD_TASK_DELETE
  + condition: CFE_ES_DeleteChildTask[any]=>CFE_ES_ERR_CHILD_TASK_DELETE_MAIN_TASK
  + condition: CFE_ES_GetAppID[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_ES_GetAppIDByName[<null-pointer>@1]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetAppInfo[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetAppInfo[any]=>CFE_ES_BAD_ARGUMENT
  + condition: CFE_ES_GetLibIDByName[<null-pointer>@1]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetLibName[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetLibName[<zero-value>@2]=>ERROR_ZERO_VALUE
  + condition: CFE_ES_GetMemPoolStats[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetMemPoolStats[CFE_ES_MemHandle_t@1]=>ERROR_RESOURCEID_INVALID
  + condition: CFE_ES_GetMemPoolStats[any]=>CFE_ES_BAD_ARGUMENT
  + condition: CFE_ES_GetPoolBufInfo[any]=>CFE_ES_BUFFER_NOT_IN_POOL
  + condition: CFE_ES_GetTaskID[any]=>CFE_ES_ERR_RESOURCEID_NOT_VALID
  + condition: CFE_ES_GetTaskIDByName[<null-pointer>@1]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetTaskInfo[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_ES_GetTaskInfo[any]=>CFE_ES_BAD_ARGUMENT
  + condition: CFE_ES_PoolCreateEx[any]=>CFE_ES_NO_RESOURCE_IDS_AVAILABLE
  + condition: CFE_ES_PoolCreateEx[any]=>CFE_STATUS_EXTERNAL_RESOURCE_FAIL
  + condition: CFE_ES_RegisterCDS[any]=>CFE_ES_CDS_INVALID
  + condition: CFE_ES_RestoreFromCDS[any]=>CFE_ES_CDS_BLOCK_CRC_ERR
  + condition: CFE_ES_WaitForSystemState[any]=>CFE_ES_OPERATION_TIMED_OUT
  + condition: CFE_ES_WriteToSysLog[<null-pointer>@0]=>ERROR_NULL_POINTER
  + condition: CFE_ES_WriteToSysLog[any]=>CFE_ES_BAD_ARGUMENT
  + condition: CFE_ES_WriteToSysLog[any]=>CFE_SUCCESS
```

**Describe the solution you'd like**
Solve each missing case in one of three ways:
1. Add a test case covering that option
2. Update the API documentation
3. Add a `@covtest` tag if the combination can only be reasonably achieved in a coverage environment

**Additional context**
Part of/related to #1724 (each subsystem will be handled separately)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, unit-test, functional",https://github.com/nasa/cFE/issues/1866
"Fix #1834 CFE_TBL_Modified: Test CRC, updated flag","**Describe the contribution**
Fixes #1834
Add verification that `CFE_TBL_Modified` successfully calculates and sets the table CRC and sets the Updated flag if the table has been modified.

**Testing performed**
Steps taken to test the contribution:
```
$ make SIMULATION=native ENABLE_UNIT_TESTS=true OMIT_DEPRECATED=true prep
$ make -C build/native/default_cpu1/tbl
$ make -C build/native/default_cpu1/tbl test
$ make
$ make test
```
- Verify GitHub workflows pass

**Expected behavior changes**
None.

**System(s) tested on**
 - Ubuntu 18.04 VM

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza / NASA GSFC
","CCB:Approved, coverage",https://github.com/nasa/cFE/pull/1865
cmake: Fix support for non-standard psp source directory,"**Describe the contribution**
This PR fixes a bug which prevents non-standard psp source directory specification via the environment variable `$CFS_APP_PATH` or the cmake variable `${psp_SEARCH_PATH}`.

The cFE cmake build infrastructure uses the environment / cmake variable `$CFS_APP_PATH` 
as well as the cmake meta-variable pattern `${${APP}_SEARCH_PATH}` to locate apps and other modules (such as psp), and subsequently sets the variable pattern `${${APP}_MISSION_DIR}` (see [mission_build.cmake lines 202-222](https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/cmake/mission_build.cmake#L202-L222)).

However, the resulting variable `${psp_MISSION_DIR}` is not used in `process_arch()` in [arch_build.cmake line 588](https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/cmake/arch_build.cmake#L588) when including a target platform's `build_options.cmake` file. This causes a cmake configuration failure when trying to use a non-standard psp location.


**Testing performed**
Build with psp in non-standard location, with the `CFS_APP_PATH` environment variable set:

```bash
# set up standard cFS bundle per https://github.com/nasa/cFS
git clone --recursive https://github.com/nasa/cFS.git
cd cFS
cp -R cfe/cmake/sample_defs .
cp cfe/cmake/Makefile.sample Makefile
# hide psp
mkdir alt
mv psp alt/psp
# define alternate search path
export CFS_APP_PATH=$(pwd)/alt
# build sample mission
make prep
make
```

Before this PR:
```
...

-- Generated cfe_platform_cfg.h from /***REDACTED**/cFS/sample_defs configuration
CMake Error at cmake/arch_build.cmake:588 (include):
  include could not find load file:

    /***REDACTED***/cFS/psp/fsw/pc-linux/make/build_options.cmake
Call Stack (most recent call first):
  CMakeLists.txt:124 (process_arch)


-- Configuring incomplete, errors occurred!

...
```

After this PR:
```
...

-- Generated cfe_platform_cfg.h from /***REDACTED***/cFS/sample_defs configuration
-- BSP Selection: generic-linux at /***REDACTED***/cFS/osal/src/bsp/generic-linux
-- OSAL Compile Definitions: _LINUX_OS_;_XOPEN_SOURCE=600
-- OSAL Selection: posix at /***REDACTED**/cFS/osal/src/os/posix
-- PSP Selection: pc-linux

...

Built target mission-all
```

**Expected behavior changes**
This should only affect projects which use the environment variable `$CFS_APP_PATH` or the cmake variable `${psp_SEARCH_PATH}`. Currently, they are being ignored for `psp`'s `build_options.cmake` path resolution, which means some users may be building with different target build options than they think they are based on the intended behavior.

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 18.04
 - Versions: cFE `v6.8.0-rc1+dev933`

**Additional context**

Aside, this is also suggested as a method to specify a non-standard `psp` source directory in [mission_defaults.cmake line 67](https://github.com/nasa/cFE/blob/5e41330979586bcdb113f491ea6c38ff9975fc72/cmake/mission_defaults.cmake#L67) since PR #751 with the following:

```cmake
set(psp_SEARCH_PATH ""."")
```

However, this will lead to the same cmake configure error as above without this fix.

**Third party code**
No thirdy party code included in this contribution.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jonathan Bohren, Honeybee Robotics","CCB:Approved, build-system, community",https://github.com/nasa/cFE/pull/1864
Remove comment referencing CFE_TBL_ERR_FILE_NOT_FOUND,"**Describe the bug**
Reference to deprecated error code in comments




> Should remove it from here as well
> 
> https://github.com/nasa/cFE/blob/a0c2de62934e61a93bb4282c0fc784cf4be50da9/modules/cfe_testcase/src/tbl_content_mang_test.c#L56

_Originally posted by @zanzaben in https://github.com/nasa/cFE/pull/1859#pullrequestreview-735207143



**To Reproduce**
Inspect `tbl_content_mang_test`

**Expected behavior**
No references to deleted items

**Code snips**
See above 

**System observed on:**
Source code coment

**Additional context**
See #1859

**Reporter Info**
@astrogeco ",docs,https://github.com/nasa/cFE/issues/1863
"Fix #1819, Fix #1820,  evs coverage test","**Describe the contribution**
Fixes #1819
Adds test for MessageSendCounter not incrementing when sending a filtered event. 

Fixes #1820 
Adds tests for LogOverflowCounter incrementing when the log overflows. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1862
CFE_TBL_Load returns CFE_SUCCESS when initially loading an incomplete image file (CFE_TBL_WARN_SHORT_FILE internally) ,"**Describe the bug**
During a `CFE_TBL_Load` call, the function is expected to return an error code if the loaded file was not complete (i.e. does not result in a complete image in memory).  

In this case, if the image started at offset 0, but had fewer bytes than required for a complete table), it triggers the `CFE_TBL_WARN_SHORT_FILE` status internally inside CFE_TBL_LoadFromFile, but then this gets overwritten to CFE_SUCCESS in CFE_TBL_Load, making the return value to the user seem like the table was fully loaded/valid.

**To Reproduce**
Call `CFE_TBL_Load()` on a table which has not been initially loaded with a partial data file.

**Expected behavior**
Should return an error not `CFE_SUCCESS`, because the table image is only half loaded.

**System observed on:**
Ubuntu

**Additional Context**
Found as part of scrub in #1724

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1861
"Fix #1843, Add Time Clock Test","**Describe the contribution**
Fixes #1843
Adds test to cover Clock APIs.

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1860
"Fix #1858, remove unused CFE_TBL_ERR_FILE_NOT_FOUND","**Describe the contribution**
Status code no longer produced by current implementation, it returns CFE_TBL_ERR_ACCESS when unable to open a file.

Fixes #1858

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1859
CFE_TBL_ERR_FILE_NOT_FOUND error defined but not used,"**Is your feature request related to a problem? Please describe.**
This is documented as a return code from `CFE_TBL_Load` however this function actually returns `CFE_TBL_ERR_ACCESS` when it cannot open the file.  This ""file not found"" status code is not used- and it cannot be used - because OS_OpenCreate does not really differentiate between the file not existing and existing but not having permission to open it.

**Describe the solution you'd like**
Remove unused status code

**Additional context**
Found as part of scrub in #1724

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, deprecate",https://github.com/nasa/cFE/issues/1858
"Fix #1771, End Child Task requirement remove error code","**Describe the contribution**
Fixes #1771
 - The end child task API is void, so can't return error code
 - Requirement name fix for Report Application ID (added By Name)

**Testing performed**
CI - doc only

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1857
Fix #1827 Check error ctr to TransmitMsg test,"**Describe the contribution**
Fixes #1827 Verify error counter increments when using TransmitMsg for a message that is too big.

**Testing performed**
Steps taken to test the contribution:
1. `make SIMULATION=native ENABLE_UNIT_TESTS=true OMIT_DEPRECATED=BUILDTYPE=release prep`
2. `make -C build/native/default_cpu1/sb`
3. `make -C build/native/default_cpu1/sb test`
4. `make`
5. `make test`

**Expected behavior changes**
None.

**System(s) tested on**
 - OS: Ubuntu 18.04 VM

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza / NASA GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1856
"Fix #1852, correct syslog message in pool create","**Describe the contribution**
Corrects a simple search and replace error

Fixes #1852 

**Testing performed**
Build and sanity check CFE, run tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1855
"Fix #1851, remove unused CFE_TBL_ERR_BAD_APP_ID","**Describe the contribution**
Status code no longer produced by current implementation, it passes
through the ES error which will be CFE_ES_ERR_RESOURCEID_NOT_VALID.

Fixes #1851

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Additional context**
Could also go the other way and make implementation match doc instead (translate code).  This changes doc to match what the implementation was doing.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/1854
"Fix #1850, remove unused CFE_ES_POOL_BOUNDS_ERROR","**Describe the contribution**
Remove stale error code no longer produced by implementation

Fixes #1850

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1853
Search and replace error in syslog message inside CFE_ES_PoolCreateEx,"**Is your feature request related to a problem? Please describe.**
Interesting word ended up in this syslog:
https://github.com/nasa/cFE/blob/a0c2de62934e61a93bb4282c0fc784cf4be50da9/modules/es/fsw/src/cfe_es_mempool.c#L257

Likely because the code was copied from Library stuff, and ""Lib"" was replaced with ""MemPool"", and this used the full word ""Library"" ....

**Describe the solution you'd like**
Should say ""Mem Pool""

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1852
CFE_TBL_ERR_BAD_APP_ID error defined but not used,"**Is your feature request related to a problem? Please describe.**
This error code was added at one point as a return value from various TBL API calls when they were called from a context which was not a CFE APP.  However, in the current code, the status code from the call to `CFE_ES_GetAppID()` is just passed through:

https://github.com/nasa/cFE/blob/a0c2de62934e61a93bb4282c0fc784cf4be50da9/modules/tbl/fsw/src/cfe_tbl_internal.c#L256-L261

As a result, nothing actually returns `CFE_TBL_ERR_BAD_APP_ID` in the current code.

**Describe the solution you'd like**
Remove value from cfe_error.h and remove any remaining references to it.

As the value is passed through from `CFE_ES_GetAppID()`, the actual return code when called from a bad context is `CFE_ES_ERR_RESOURCEID_NOT_VALID`.

**Additional context**
Noted as part of scrub in #1724

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, deprecate",https://github.com/nasa/cFE/issues/1851
CFE_ES_POOL_BOUNDS_ERROR defined but not used,"**Is your feature request related to a problem? Please describe.**
This error code was added at one point as a return value from `CFE_ES_PoolCreateEx` when there was an issue that caused the pool to go beyond the allocated size.  However now the code validates the size before even starting to create the pool, and returns CFE_ES_BAD_ARGUMENT if it is too small.

So now the `CFE_ES_POOL_BOUNDS_ERROR` has become stale, nothing uses this error anymore.

**Describe the solution you'd like**
Remove value from cfe_error.h and remove any remaining references to it.

**Additional context**
Noted as part of scrub in #1724

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, deprecate",https://github.com/nasa/cFE/issues/1850
"Fix #1846, Disable Unit Tests in CodeQL","**Describe the contribution**
Fix #1846 

**Testing performed**
Tested on forked repo: https://github.com/ArielSAdamsNASA/cFE-1/security/code-scanning?query=branch%3Afix-1846-disable-unit-tests-codeql

**Expected behavior changes**
Disabled unit tests for both CodeQL workflows. Alerts should only be shown for flight code. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal",wontfix,https://github.com/nasa/cFE/pull/1849
"Fix #1847, enable strict resource id w/OMIT_DEPRECATED","**Describe the contribution**
When the user specifies the OMIT_DEPRECATED build option, also enable the strictly-typed resource IDs to catch common coding
errors.

Fixes #1847

**Testing performed**
Build and run all tests in both OMIT_DEPRECATED mode and without OMIT_DEPRECATED

**Expected behavior changes**
Strict types will be automatically enabled with OMIT_DEPRECATED mode

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1848
Enable strict resource ID types with OMIT_DEPRECATED build option,"**Is your feature request related to a problem? Please describe.**
The build system has an ""OMIT_DEPRECATED"" option which currently turns off all legacy-compatibility code and switches to only providing the new/preferred methods for any API elements that have been changed in recent versions.

**Describe the solution you'd like**
As part of the OMIT_DEPRECATED option, we should enable `set(MISSION_RESOURCEID_MODE STRICT)` mode.  This mode uses type-safe definitions for all the different resource types, and prevents users from ""crossing"" different ID types (tasks, apps, etc) at compile time rather than compiling successfully but not running correctly.

**Additional context**
CI is already testing with OMIT_DEPRECATED on and off so it seems like a good fit to enable strict resource ID types too, the code will be tested in both backward-compatible mode and preferred/new mode.

This was prompted by having two independent PRs both breaking code by mixing ID with other values (one status code - ID mixup, and one a tableID - CDS ID mixup) in the same merge cycle.  This strict build option catches both.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, build-system",https://github.com/nasa/cFE/issues/1847
Disable Unit Tests in CodeQL,"**Is your feature request related to a problem? Please describe.**
Do not analyze unit and functional test code for CodeQL. 

**Describe the solution you'd like**
Disable unit tests in the workflow. 

**Requester Info**
Ariel Adams, ASRC Federal
","wontfix, continuous-integration",https://github.com/nasa/cFE/issues/1846
"HOTFIX IC-20210819, type correction TBL coverage test","**Describe the contribution**
Update the assignment to CDSHandle to be of the correct value type

(Hotfix for current integration-candidate)

**Testing performed**
Build and run all tests with type-safe mode enabled

**Expected behavior changes**
Builds successfully

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1845
"Fix #1840, Hotfix for strict resource IDs.","**Describe the contribution**
Fixes #1840   
Fixes strict resource id check. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Hotfix for issue from #1842

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/cFE/pull/1844
TIME functional - add test of CFE_TIME_GetClockState and CFE_TIME_GetClockInfo,"**Is your feature request related to a problem? Please describe.**
Missing functional test for `CFE_TIME_GetClockState` and `CFE_TIME_GetClockInfo`

**Describe the solution you'd like**
Add

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","unit-test, functional",https://github.com/nasa/cFE/issues/1843
"Fix #1840, Add Null check for CFE_ResourceId_FindNext","**Describe the contribution**
Fixes #1840
Adds Null check to CFE_ResourceId_FindNext

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Additional context**
If this gets into master before https://github.com/nasa/cFE/pull/1782 then a Functional Test will need to be added there. Otherwise it should be added here. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1842
TIME missing coverage in cfe_time_api.c when default CFE_MISSION_TIME_EPOCH_SECOND is 0,"
@skliper and @pepepr08 reformat into standard template

> In cfe_time_api.c, can't test the following lines when default CFE_MISSION_TIME_EPOCH_SECOND is 0.
> 
> ```
>         -:  621:    /*
>         -:  622:    ** Convert the cFE time (offset from epoch) into calendar time...
>         -:  623:    */
>         4:  624:    NumberOfMinutes = (TimeToPrint.Seconds / 60) + CFE_MISSION_TIME_EPOCH_MINUTE;
>         4:  625:    NumberOfSeconds = (TimeToPrint.Seconds % 60) + CFE_MISSION_TIME_EPOCH_SECOND;
>         -:  626:
>         -:  627:    /*
>         -:  628:    ** Adding the epoch ""seconds"" after computing the minutes avoids
>         -:  629:    **    overflow problems when the input time value (seconds) is
>         -:  630:    **    at, or near, 0xFFFFFFFF...
>         -:  631:    */
>         8:  632:    while (NumberOfSeconds >= 60)
>         -:  633:    {
>     #####:  634:        NumberOfMinutes++;
>     #####:  635:        NumberOfSeconds -= 60;
>         -:  636:    }
> ```

Reached 100% in all but cfe_time_api.c

```
File '/home/jfmarti4/cfs-gateway/remote/cfs/cfe/modules/time/fsw/src/cfe_time_api.c'
Lines executed:98.96% of 192

File '/home/jfmarti4/cfs-gateway/remote/cfs/cfe/modules/time/fsw/src/cfe_time_task.c'
Lines executed:100.00% of 381

File '/home/jfmarti4/cfs-gateway/remote/cfs/cfe/modules/time/fsw/src/cfe_time_utils.c'
Lines executed:100.00% of 255

File '/home/jfmarti4/cfs-gateway/remote/cfs/cfe/modules/time/fsw/src/cfe_time_tone.c'
Lines executed:100.00% of 149
```

_Originally posted by @pepepr08 in https://github.com/nasa/cFE/issues/473#issuecomment-898579608_","unit-test, coverage",https://github.com/nasa/cFE/issues/1841
CFE_ResourceId_FindNext can Seg Fault,"**Describe the bug**
If you pass a null for the CheckFunc argument then CFE_ResourceId_FindNext will Segmentation Fault. Also the Comments in the c file mention how it is an internal function which it currently isn't.

**Expected behavior**
There should be a null check. 
A Functional Test for that null check. 
Update the header file for the new return code

**Additional context**
new functional test should plan with https://github.com/nasa/cFE/pull/1782 

**Reporter Info**
Alex Campbell GSFC
",enhancement,https://github.com/nasa/cFE/issues/1840
cFE Integration candidate: 2021-08-24,"**Describe the contribution**


PR #1803 

Add software bus tests 

- Fix #1680 
- Fix #1681 
- Fix #1682

PR #1756 

- Fix #1755, separate variable for OSAL status 

PR #1809 

- Fix #1807, increase SB pool max size bucket 

PR #1842 

- Fix #1840, Add Null check for CFE_ResourceId_FindNext 

PR #1844 
- Fix #1840, Hotfix for strict resource IDs. 

PR #1828 

Improve tbl coverage tests 

- Fixes #472 
- Fixes #1792
- Fixes #1793
- Fixes #1795 
- Fixes #1791
- Fixes #1789
- Fixes #1788 

PR #1833 
- Fix #1824, Add missing cases for msg id func tests 


PR #1832 

- Fix #1831, Consolidate msg get/set doxygen group 

PR #1836 

- Fix #473, Adding coverage tests to cFE TIME 

PR #1848

- Fix #1847, enable strict resource id w/OMIT_DEPRECATED

PR #1845

- HOTFIX IC-20210819, type correction TBL coverage test

PR #1832 

- Fix #1831, Consolidate msg get/set doxygen group

PR #1806

- Fix #1805, Add test for ES BackgroundWakeup

PR #1813

- Fix #1786, Success Test for CFE_ES_RestartApp

PR #1814 

- Fix #1794, Subscribe to Message Limit Greater Than CFE_PLATFORM_SB_DEFAULT_MSG_LIMIT

PR #1811

- Fix #1787, Success Test for CFE_ES_GetMemPoolStats

PR #1822

- Fix #1821, Group MSG APIs documentation by header type

PR #1816

- Fix #1815, add retroactive CFE status asserts

PR #1854

- Fix #1851, remove unused CFE_TBL_ERR_BAD_APP_ID

PR #1855

- Fix #1852, correct syslog message in pool create

PR #1853

- Fix #1850, remove unused CFE_ES_POOL_BOUNDS_ERROR

PR #1859

- Fix #1858, remove unused CFE_TBL_ERR_FILE_NOT_FOUND
- Fix #1863, Remove comment referencing CFE_TBL_ERR_FILE_NOT_FOUND

PR #1856

- Fix #1827 Check error ctr to TransmitMsg test

PR #1857

- Fix #1771, End Child Task requirement remove error code

PR #1782

- Fix #1679, Add functional tests for resource misc

**Testing performed**
cFE CI <https://github.com/nasa/cFE/pull/1839/checks>
cFS Bundle CI <https://github.com/nasa/cFS/pull/340/checks>


**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu CI

**Additional context**
Part of <https://github.com/nasa/cFS/pull/340>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@ArielSAdamsNASA 
@pepepr08 
@zanzaben 
@skliper 
@astrogeco 
@jphickey 
@nmullane ",,https://github.com/nasa/cFE/pull/1839
TBL missing coverage in cfe_tbl_api.c function CFE_TBL_Update,"**Is your feature request related to a problem? Please describe.**
`CFE_TBL_Update` function contains two hard to reach lines (953-954) that remains untested, preventing us from reaching 100% line coverage. It's actually just one uncovered line, but lcov thinks it's two.

```
    : 919:  /* Verify access rights and get a valid Application ID for calling App */
   6: 920:  Status = CFE_TBL_ValidateAccess(TblHandle, &ThisAppId);
    : 921: 
   6: 922:  if (Status == CFE_SUCCESS)
    : 923:  {
    : 924:      /* Get pointers to pertinent records in registry and handles */
   4: 925:      AccessDescPtr = &CFE_TBL_Global.Handles[TblHandle];
   4: 926:      RegRecPtr     = &CFE_TBL_Global.Registry[AccessDescPtr->RegIndex];
    : 927: 
   4: 928:      Status = CFE_TBL_UpdateInternal(TblHandle, RegRecPtr, AccessDescPtr);
    : 929: 
   4: 930:      if (Status != CFE_SUCCESS)
    : 931:      {
   2: 932:          CFE_ES_WriteToSysLog(""%s: App(%lu) fail to update Tbl '%s' (Stat=0x%08X)\n"", __func__,
   2: 933:                               CFE_RESOURCEID_TO_ULONG(ThisAppId), RegRecPtr->Name, (unsigned int)Status);
    : 934:      }
    : 935:  }
    : 936:  else
    : 937:  {
   2: 938:      CFE_ES_WriteToSysLog(""%s: App(%lu) does not have access to Tbl Handle=%d\n"", __func__,
    : 939:                           CFE_RESOURCEID_TO_ULONG(ThisAppId), (int)TblHandle);
    : 940:  }
    : 941: 
   6: 942:  if (Status != CFE_TBL_ERR_BAD_APP_ID)
    : 943:  {
    : 944:      /* Translate AppID of caller into App Name */
   6: 945:      CFE_ES_GetAppName(AppName, ThisAppId, sizeof(AppName));
    : 946:  }
    : 947: 
    : 948:  /* On Error conditions, notify ground of screw up */
   6: 949:  if (Status < 0)
    : 950:  {
   2: 951:      if (RegRecPtr != NULL)
    : 952:      {
## 0: 953:          CFE_EVS_SendEventWithAppID(CFE_TBL_UPDATE_ERR_EID, CFE_EVS_EventType_ERROR, CFE_TBL_Global.TableTaskAppId,
## 0: 954:                                     ""%s Failed to Update '%s', Status=0x%08X"", AppName, RegRecPtr->Name,
    : 955:                                     (unsigned int)Status);
    : 956:      }
    : 957:      else
    : 958:      {
   2: 959:          CFE_EVS_SendEventWithAppID(CFE_TBL_UPDATE_ERR_EID, CFE_EVS_EventType_ERROR, CFE_TBL_Global.TableTaskAppId,
    : 960:                                     ""%s Failed to Update '?', Status=0x%08X"", AppName, (unsigned int)Status);
    : 961:      }
    : 962:  }
```


**Describe the solution you'd like**
These lines should be safe to leave uncovered because they do not contain any potential to access a NULL pointer or anything else similarly dangerous.

**Additional context**
Line 953 is currently impossible to reach because `CFE_TBL_UpdateInternal` does not throw any error status codes (< 0), so the only way to trigger the if statement on line 949 is from `CFE_TBL_ValidateAccess` on line 920 which would always mean `RegRecPtr` is NULL. Thus the if statement on line 951 can never be true, leaving line 953 uncovered.

**Requester Info**
Niall Mullane - GSFC 582 Intern","unit-test, coverage",https://github.com/nasa/cFE/issues/1838
TBL missing coverage in cfe_tbl_api.c function CFE_TBL_Register,"**Is your feature request related to a problem? Please describe.**
`CFE_TBL_Register` function contains two hard to reach lines (370-371) that remain untested, preventing us from reaching 100% line coverage.

```
  12: 360:          if (Status == CFE_ES_CDS_ALREADY_EXISTS)
    : 361:          {
   4: 362:              Status = CFE_TBL_GetWorkingBuffer(&WorkingBufferPtr, RegRecPtr, true);
    : 363:         
   4: 364:              if (Status != CFE_SUCCESS)
    : 365:              {
    : 366:                  /* Unable to get a working buffer - this error is not really */
    : 367:                  /* possible at this point during table registration.  But we */
    : 368:                  /* do need to handle the error case because if the function */
    : 369:                  /* call did fail, WorkingBufferPtr would be a NULL pointer. */
## 0: 370:                  CFE_ES_GetAppName(AppName, ThisAppId, sizeof(AppName));
## 0: 371:                  CFE_ES_WriteToSysLog(""%s: Failed to get work buffer for '%s.%s' (ErrCode=0x%08X)\n"",
    : 372:                                       __func__, AppName, Name, (unsigned int)Status);
    : 373:              }
    : 374:              else
    : 375:              {
    : 376:                  /* CDS exists for this table - try to restore the data */
   4: 377:                  Status = CFE_ES_RestoreFromCDS(WorkingBufferPtr->BufferPtr, RegRecPtr->CDSHandle);
    : 378:         
   4: 379:                  if (Status != CFE_SUCCESS)
    : 380:                  {
   1: 381:                      CFE_ES_GetAppName(AppName, ThisAppId, sizeof(AppName));
   1: 382:                      CFE_ES_WriteToSysLog(""%s: Failed to recover '%s.%s' from CDS (ErrCode=0x%08X)\n"",
    : 383:                                           __func__, AppName, Name, (unsigned int)Status);
    : 384:                  }
    : 385:              }
```

**Describe the solution you'd like**
These lines should be safe to leave uncovered because they do not contain any potential to access a NULL pointer or anything else similarly dangerous.

**Additional context**
Lines 370 and 371 are currently impossible to cover as noted in the code comment because line 362 calls `GetWorkingBuffer` with true for the third argument which skips over anything that could return a non CFE_SUCCESS code.

**Requester Info**
Niall Mullane - GSFC 582 Intern","unit-test, coverage",https://github.com/nasa/cFE/issues/1837
Fix #473 Adding coverage tests to cFE TIME,"**Describe the contribution**
Fix #473 Completing coverage for cFE TIME. 

Completed coverage on all lines except two. See issue for details:
https://github.com/nasa/cFE/issues/473#issuecomment-898579608

Missing cov
**Testing performed**
Steps taken to test the contribution:
1. `make -C build/native/default_cpu1/time`
2. `make -C build/native/default_cpu1/time test`
3. `cd /home/jfmarti4/cfs-gateway/remote/cfs/build/native/default_cpu1/time/ut-coverage/CMakeFiles/coverage-time-ALL-object.dir/__/fsw/src`
4. `gcov -b gcov -b cfe_time_api.c.gcda`
5. `gcov -b gcov -b cfe_time_task.c.gcda`
6. `gcov -b gcov -b cfe_time_tone.c.gcda`
7. `gcov -b gcov -b cfe_time_utils.c.gcda`

**Expected behavior changes**
Tests should continue to pass. 100% coverage on all 

**System(s) tested on**
 - OS: Ubuntu 18.08 VM
 - GitHub Workflow

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza / NASA GSFC
",CCB:Approved,https://github.com/nasa/cFE/pull/1836
"Update name of macros/functions added to ""cfe_assert""","**Is your feature request related to a problem? Please describe.**
Per the naming convention, any symbols provided by a given app/lib should be prefixed with the name of that module.  For ""cfe_assert"" library, this would be `CFE_Assert_` prefix.  But the new macros that were directly lifted from the coverage test are using a `CFE_UtAssert_` prefix.

**Describe the solution you'd like**
Search and replace the `CFE_UtAssert_` prefix with `CFE_Assert_` to be consistent.

**Additional context**
This came from migrating the macros in haste; the extra ""Ut"" that doesn't really belong wasn't caught during initial implementation or review.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/1835
TBL coverage - add check for CRC update and confirm notification of other apps for CFE_TBL_Modified,"**Is your feature request related to a problem? Please describe.**
CFE_TBL_Modified coverage check (in Test_CFE_TBL_TblMod) missing confirmation CRC was updated and apps that have shared the table get notified by return code from CFE_TBL_GetAddress  (requirements)

TBL: Modified,cTBL6315,""Upon receipt of a Request, the cFE shall perform the following actions on a Table:
- Update critical table data in CDS (this is already checked)
- Update the time of last modification (this is already checked)
- Update the CRC (**MISSING!**)
- Update the last loaded filename with modified indicator (this is already checked)
- Flag the update notification for other applications"" (**MISSING!**)

**Describe the solution you'd like**
Add confirmation.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1834
"Fix #1824, Add missing cases for msg id func tests","**Describe the contribution**
Fixes #1824
Adds the missing cases and cleans up some minor style inconsistencies. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1833
"Fix #1831, Consolidate msg get/set doxygen group","**Describe the contribution**
Fix #1831 
Makes one group for SB Message Characteristics (get/set combined).  Note the setter name was also out of family (didn't include SB).

**Testing performed**
CI - doc only

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, docs",https://github.com/nasa/cFE/pull/1832
Combine SB Set/Get message characteristics group,"**Is your feature request related to a problem? Please describe.**
Get message and set message characteristics grouping out-of-family (no other separate getters/setters)

**Describe the solution you'd like**
Make a single group, makes more sense for test grouping also (test setter with getter)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/cFE/issues/1831
SB functional test  - add zero copy verification of sequence count increment and non-increment,"**Is your feature request related to a problem? Please describe.**
Missing verification of sequence count behavior for zero copy (requirement)

**Describe the solution you'd like**
Add a ""pass"" (no increment) and confirm both behave as required

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, functional",https://github.com/nasa/cFE/issues/1830
SB functional test - exercise CFE_SB_ReceiveBuffer CFE_SB_PEND_FOREVER and CFE_SB_POLL options,"**Is your feature request related to a problem? Please describe.**
SB functional test only calls CFE_SB_ReceiveBuffer with a timeout of 100, requirements include poll and pend forever.

**Describe the solution you'd like**
Exercise CFE_SB_POLL and CFE_SB_PEND_FOREVER options.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, functional",https://github.com/nasa/cFE/issues/1829
Improve tbl coverage tests,"**Describe the contribution**
- Fixes #472 
- Fixes #1792
- Fixes #1793
- Fixes #1795 
- Fixes #1791
- Fixes #1789
- Fixes #1788 

**Testing performed**
1. Build and run cfe coverage tests

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern
",CCB:Approved,https://github.com/nasa/cFE/pull/1828
SB coverage test - need to verify MsgSendErrorCounter increments when msg too big,"**Is your feature request related to a problem? Please describe.**
Missing verification of MsgSendErrorCounter increment on message too big (requirement)

**Describe the solution you'd like**
Add verification

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1827
SB functional test - limit exceeded still sends to other pipes,"**Is your feature request related to a problem? Please describe.**
Missing functional checks that a limit reached on one pipe will still send to the others (requirement).

**Describe the solution you'd like**
Add a check that a message limit reached on one pipe will still transmit to another
Add a check that a pipe full reached on one pipe will still transmit to another

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, functional",https://github.com/nasa/cFE/issues/1826
SB functional test - add verification that unsubscribe actually unsubcribes,"**Is your feature request related to a problem? Please describe.**
Although there are nominal calls in sb_subscription_test.c and messages are sent/received (after a subscription) in sb_sendrecv_test.c, there's no functional check that after unsubscribing from a message it is no longer received.

Unsubscribe also isn't used by the services (although it is used by GSFC apps).

**Describe the solution you'd like**
Add at minimum a verification of the unsubscribe.  Would be nice to also add just a simple send/receive for each subscribe type in sb_subscription_test.c since only CFE_SB_SubscribeEx is utilized in the sendrecv test (and it's helpful have the test self contained).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, functional",https://github.com/nasa/cFE/issues/1825
Clean up Message ID Functional Test,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/cFE/pull/1745 was merged in but there are a few style changes that need to be fixed and some edge cases that are not being tested. 

**Describe the solution you'd like**
Clean up the code, and add the remaining edge cases. 

**Additional context**
https://github.com/nasa/cFE/pull/1745

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1824
FS functional test - add calls to get default mount point and extension for each file type,"**Is your feature request related to a problem? Please describe.**
Functional test just calls with UNKNOWN, should exercise each type (although response verification isn't necessary since it's implementation defined and ""helper"" functions are really best effort).
https://github.com/nasa/cFE/blob/eb9c52319fb1f31f72159551735ad5f1365e5a79/modules/cfe_testcase/src/fs_util_test.c#L36-L42

**Describe the solution you'd like**
Exercise each defined file type

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","good first issue, unit-test, functional, draco-rc1",https://github.com/nasa/cFE/issues/1823
"Fix #1821, Group MSG APIs documentation by header type","**Describe the contribution**
Fix #1821 
Improves MSG API grouping in documentation

**Testing performed**
CI - documentation change only

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, docs",https://github.com/nasa/cFE/pull/1822
"Improve MSG API grouping in documentation - general, primary, secondary, extended","**Is your feature request related to a problem? Please describe.**
MSG APIs are all in one group, but affect different parts of the msg header and some aren't applicable based on configuration (extended headers enabled or not).

**Describe the solution you'd like**
Group in doxygen and add group description.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/cFE/issues/1821
EVS coverage - add verification of log overflow counter increment,"**Is your feature request related to a problem? Please describe.**
The following requirement isn't verified in coverage (or functional) test:
cEVS3108.2: If the Local Event Log is full, the cFE shall increment the Local Event Log Overflow counter.

**Describe the solution you'd like**
Add verification of `LogOverflowCounter` behavior in `Test_Logging` unit test function.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1820
"EVS coverage - filter behavior failures don't get logged correctly, missing verification of latch requirement","**Is your feature request related to a problem? Please describe.**
Filter verification is done by sending an event message that says ""FAILED"", even though the actual assert will PASS.  This does not get counted in test reporting as an actual failure.
https://github.com/nasa/cFE/blob/eb9c52319fb1f31f72159551735ad5f1365e5a79/modules/evs/ut-coverage/evs_UT.c#L522-L538

**Describe the solution you'd like**
Assert on the message counters not incrementing (MessageSendCounter and/or EventCount) and CFE_SB_TransmitMsg stub count doesn't increment, the as well as the filter counter (should latch at max per requirement).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1819
EVS functional test - send each event type including invalid,"**Is your feature request related to a problem? Please describe.**
EVS functional test currently only sends INFORMATIONAL events.  Example:
https://github.com/nasa/cFE/blob/eb9c52319fb1f31f72159551735ad5f1365e5a79/modules/cfe_testcase/src/evs_send_test.c#L36-L42

**Describe the solution you'd like**
Add a send of each message type for each API, including invalid.  Note they all return success.

**Describe alternatives you've considered**
None, note the message type handling is exercised in coverage tests so this is an improvement.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","good first issue, unit-test, functional, draco-rc1",https://github.com/nasa/cFE/issues/1818
Missing test cases for Event Services API parameter/return status combinations,"**Is your feature request related to a problem? Please describe.**
The following parameter/return combinations are not exercised by the Event Services functional test:

```
 + condition: CFE_EVS_Register[any]=>CFE_ES_BAD_ARGUMENT
 + condition: CFE_EVS_Register[any]=>CFE_EVS_APP_FILTER_OVERLOAD
 + condition: CFE_EVS_Register[any]=>CFE_EVS_APP_ILLEGAL_APP_ID
 + condition: CFE_EVS_Register[any]=>CFE_EVS_UNKNOWN_FILTER
 + condition: CFE_EVS_Register[any]=>CFE_SUCCESS
 + condition: CFE_EVS_ResetAllFilters[any]=>CFE_EVS_APP_ILLEGAL_APP_ID
 + condition: CFE_EVS_ResetAllFilters[any]=>CFE_EVS_APP_NOT_REGISTERED
 + condition: CFE_EVS_ResetFilter[any]=>CFE_EVS_APP_ILLEGAL_APP_ID
 + condition: CFE_EVS_ResetFilter[any]=>CFE_EVS_APP_NOT_REGISTERED
 + condition: CFE_EVS_SendEvent[any]=>CFE_EVS_APP_ILLEGAL_APP_ID
 + condition: CFE_EVS_SendEvent[any]=>CFE_EVS_APP_NOT_REGISTERED
 + condition: CFE_EVS_SendEventWithAppID[any]=>CFE_EVS_APP_NOT_REGISTERED
 + condition: CFE_EVS_SendTimedEvent[any]=>CFE_EVS_APP_ILLEGAL_APP_ID
 + condition: CFE_EVS_SendTimedEvent[any]=>CFE_EVS_APP_NOT_REGISTERED
```

**Describe the solution you'd like**
Ideally should be tested, but this may be difficult with the current cfe_testcase app because it uses event services to report test results.

**Describe alternatives you've considered**
Document why these cannot be tested in the current Caelum release, and rely on coverage testing to test these responses (which is already implemented)

**Additional context**
Part of/related to #1724 (each subsystem will be handled separately)

These should generally not be marked as `covtest` in the doxygen because they (theoretically) _can_ be tested in a functional test, its just that the cfe_testcase app uses and registers with event services before starting tests, so any interference with this would prevent/conflict with normal test reporting.  This is true for all calls to `CFE_EVS_Register` (because its already registered), and all items that return  `CFE_EVS_APP_ILLEGAL_APP_ID` or `CFE_EVS_APP_NOT_REGISTERED`  (which is really everything in the above list).  These would all need a _separate_ app/task that is not registered with EVS to accomplish.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test, functional",https://github.com/nasa/cFE/issues/1817
"Fix #1815, add retroactive CFE status asserts","**Describe the contribution**
Add a set of macros that decouple the function call from the expected status:

- `CFE_Assert_STATUS_STORE`
- `CFE_Assert_STATUS_MAY_BE`
- `CFE_Assert_STATUS_MUST_BE`

The first will make the function call and put the status into a temporary holding area, but will not assert on any particular
result.

The others will check the value of the holding area.

Fixes #1815

**Testing performed**
Build and run all tests
Also Add new test cases that need this paradigm and confirm macros working as expected (will be in other PRs).

**Expected behavior changes**
None, new test macros only, not used yet.

**System(s) tested on**
Ubuntu

**Additional context**
These macros should be used whenever a specific status is not predictable before the call, but other checks after the call can determine if the result was OK or not.

A typical use case for a function that might return any of 3 status values (e.g. status1, status2, status3) would be something like:

```
CFE_Assert_STATUS_STORE(...)
if (CFE_Assert_STATUS_MAY_BE(status1))
{
... do other checks after getting status1
}
else if (CFE_Assert_STATUS_MAY_BE(status1))
{
... do other checks after getting status2
}
else
{
   CFE_Assert_STATUS_MUST_BE(status3);
... do other checks after getting status3
}
```

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1816
Add CFE_UtAssert macros to support tests where status is not predictable,"**Is your feature request related to a problem? Please describe.**
The typical method of using `UtAssert_INT32_EQ` to validate the result of a CFE call will both invoke the function and check the result in a single macro.  However, this requires advance knowledge of what the result is _supposed to be_, before the call is made.

In some functional test circumstances, particularly where the test is not being run in a clean/isolated environment, it may not always be feasible to predict the ""correct"" return code from an API call before it is made.  For instance, there may be cases where a set of return values are acceptable, or the correct value depends on another aspect of system state that isn't known beforehand.

A test case may handle this currently by using a stack variable, for instance:

```
CFE_Status_t Status;

Status = CFE_SB_CreatePipe(&Pipe, ...);

<check other system state....determine that result should have been SUCCESS>

UtAssert_INT32_EQ(Status, CFE_SUCCESS);
```

While this works, the test log entry will only show the check for `Status == CFE_SUCCESS`, it will not show the full function call that was tested here (`CFE_SB_CreatePipe(&Pipe, ...)`).  To make the logs most useful, this should show the full function call that was made, and that it was CFE_SUCCESS (the fact that the assertion was retroactive doesn't really matter).

Of course this can be done with the free-form `UtAssert_True` macro, but that requires the programmer to repeat the text of the function call, and is subject to getting stale/incorrect or cut/paste errors as any ""repeated"" info always is.

**Describe the solution you'd like**
Implement CFE UtAssert macros that decouple the function call from the expected return status value, so the test case can call the function and then retroactively/separately determine what the correct result should have been.

The CFE UtAssert library can temporarily hold the status in a temp variable.  This makes it simpler for the programmer to use, avoids issues with repeating the info, keeping things honest.  The use pattern would be:

```
/* call CFE_SB_CreatePipe() but do not actually assert specific status immediately */
CFE_UtAssert_STATUS_STORE(CFE_SB_CreatePipe(&PipeId[NumPipes], 10, PipeName));

<check other system state....determine that result should have been SUCCESS>

CFE_UtAssert_STATUS_WAS(CFE_SUCCESS);
```

With this pattern, the assert library holds the full text of the function between the store and assert, so it can be logged in the same format as UtAssert_INT32_EQ does, and not require the programmer to repeat it, or jump through other hoops to make sure that the call gets into the test log as it should.

**Describe alternatives you've considered**
Leave as is, but this imposes burdens on the programmer for corner cases (by repeating info unnecessarily, and having to be explicitly concerned with writing it to the test log to make the test count) and/or makes tests more fragile by repeating info (after cut/paste/move the text of the copy can get out of sync with the real call).  Having a false/incorrect log is often worse than not having a log at all.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/1815
"Fix #1794, Subscribe to Message Limit Greater Than CFE_PLATFORM_SB_DEFAULT_MSG_LIMIT","**Describe the contribution**
Fixes #1794 

**Testing performed**
GitHub Actions Workflows

**Expected behavior changes**
Subscribe locally to a message with limit greater than CFE_PLATFORM_SB_DEFAULT_MSG_LIMIT

**Additional context**
CFE_PLATFORM_SB_DEFAULT_MSG_LIMIT is equal to 4. Used UINT16_MAX.

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal ",CCB:Approved,https://github.com/nasa/cFE/pull/1814
"Fix #1786, Success Test for CFE_ES_RestartApp","**Describe the contribution**
Fixes #1786 

**Testing performed**
Used GitHub Actions Workflow.

**Expected behavior changes**
There is a success test for CFE_ES_RestartApp in cFE/modules/es/ut-coverage/es_UT.c.

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal 
",CCB:Approved,https://github.com/nasa/cFE/pull/1813
Missing test cases for software bus API parameter/return combinations,"**Is your feature request related to a problem? Please describe.**
The following parameter/return code combinations are not exercised by the software bus functional test:

```
 + condition: CFE_SB_CreatePipe[any]=>CFE_SB_MAX_PIPES_MET
 + condition: CFE_SB_DeletePipe[CFE_SB_PipeId_t@0]=>ERROR_RESOURCEID_INVALID
 + condition: CFE_SB_GetPipeIdByName[<null-pointer>@1]=>ERROR_NULL_POINTER
 + condition: CFE_SB_MessageStringGet[<null-pointer>@0]=>ERROR_NULL_POINTER
 + condition: CFE_SB_MessageStringGet[<null-pointer>@1]=>ERROR_NULL_POINTER
 + condition: CFE_SB_MessageStringSet[<null-pointer>@0]=>ERROR_NULL_POINTER
 + condition: CFE_SB_MessageStringSet[<null-pointer>@1]=>ERROR_NULL_POINTER
 + condition: CFE_SB_ReceiveBuffer[any]=>CFE_SB_NO_MESSAGE
 + condition: CFE_SB_ReceiveBuffer[any]=>CFE_SB_PIPE_RD_ERR
 + condition: CFE_SB_Subscribe[any]=>CFE_SB_BUF_ALOC_ERR
 + condition: CFE_SB_Subscribe[any]=>CFE_SB_MAX_DESTS_MET
 + condition: CFE_SB_Subscribe[any]=>CFE_SB_MAX_MSGS_MET
 + condition: CFE_SB_SubscribeEx[any]=>CFE_SB_BUF_ALOC_ERR
 + condition: CFE_SB_SubscribeEx[any]=>CFE_SB_MAX_DESTS_MET
 + condition: CFE_SB_SubscribeEx[any]=>CFE_SB_MAX_MSGS_MET
 + condition: CFE_SB_SubscribeLocal[any]=>CFE_SB_BUF_ALOC_ERR
 + condition: CFE_SB_SubscribeLocal[any]=>CFE_SB_MAX_DESTS_MET
 + condition: CFE_SB_SubscribeLocal[any]=>CFE_SB_MAX_MSGS_MET
 + condition: CFE_SB_TransmitBuffer[any]=>CFE_SB_MSG_TOO_BIG
 + condition: CFE_SB_TransmitMsg[any]=>CFE_SB_BUF_ALOC_ERR
 + condition: CFE_SB_Unsubscribe[any]=>CFE_SB_INTERNAL_ERR
 + condition: CFE_SB_UnsubscribeLocal[any]=>CFE_SB_INTERNAL_ERR
```

**Describe the solution you'd like**
Solve each missing case in one of three ways:
1. Add a test case covering that option
2. Update the API documentation
3. Add a `@covtest` tag if the combination can only be reasonably achieved in a coverage environment

**Additional context**
Part of/related to #1724 (each subsystem will be handled separately)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, unit-test, functional",https://github.com/nasa/cFE/issues/1812
"Fix #1787, Success Test for CFE_ES_GetMemPoolStats","**Describe the contribution**
Fixes #1787 

**Testing performed**
Tested through GitHub Actions Workflows.

**Expected behavior changes**
There is a success test for CFE_ES_GetMemPoolStats in cFE/modules/es/ut-coverage/es_UT.c.

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal",CCB:Approved,https://github.com/nasa/cFE/pull/1811
Add functional tests for cFE Message extended header APIs    ,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Message extended header APIs    
    CFE_MSG_GetEDSVersion - Gets the message EDS version.
    CFE_MSG_SetEDSVersion - Sets the message EDS version.
    CFE_MSG_GetEndian - Gets the message endian.
    CFE_MSG_SetEndian - Sets the message endian.
    CFE_MSG_GetPlaybackFlag - Gets the message playback flag.
    CFE_MSG_SetPlaybackFlag - Sets the message playback flag.
    CFE_MSG_GetSubsystem - Gets the message subsystem.
    CFE_MSG_SetSubsystem - Sets the message subsystem.
    CFE_MSG_GetSystem - Gets the message system.
    CFE_MSG_SetSystem - Sets the message system.

**Describe alternatives you've considered**
N/A

**Additional context**
These test are being split off from #1677

**Requester Info**
Alex Campbell GSFC","unit-test, functional",https://github.com/nasa/cFE/issues/1810
"Fix #1807, increase SB pool max size bucket","**Describe the contribution**
In the default config, the maximum bucket size for the SB pool was not quite big enough to allocate a message of `CFE_MISSION_SB_MAX_SB_MSG_SIZE`.

This increases the margin so this can be allocated again.

Fixes #1807 

**Testing performed**
Build and run all tests

**Expected behavior changes**
A call to `CFE_SB_AllocateMessageBuffer(CFE_MISSION_SB_MAX_SB_MSG_SIZE)` now succeeds and returns non-null.

**System(s) tested on**
Ubuntu

**Additional context**
On my system the `sizeof(CFE_SB_BufferD_t)` is 64, hence why 40 was not enough.  Using 128 just adds an extra margin for padding and platform differences, etc.  Users can still reduce this in their tuning if they are using every possible byte.

Note we cannot use `sizeof(CFE_SB_BufferD_t)` directly here because its a private structure.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1809
cFE Integration candidate 2021-08-17,"**Describe the contribution**

PR #1790

- Fix #1784, add CFE assert macros to functional test

PR #1779 

Adds invalid id syslog to for CFE_ES_DeleteApp and CFE_ES_ReloadApp and verifies required reporting 

- Fix #1775 
- Fix #1773 

PR #1785 

Stop memory leak & add cds size test. 

- Fix #1776
- Fix #1770

PR #1765 
- Fix #1726, mark read only inputs as const 

PR #1804 

- Fix #1760, check resource ID idx is less than max 

PR #1801 

- Fix #1762, Update CFE_ES_RunLoop documentation 

PR #1745

- Fix #1677, Add Message Api Functional Test


PR #1798 
- Partial #1724, update in/out status and nonnull/nonzero tags

PR #1783

- Fix #1691, Add External Time Source Functional Tests

PR #1800 
- Fix #812, Add Perf API functional tests 

PR #1778 

- Fix #807, Add ES Application Behavior Functional Tests



**Testing performed**
Ubuntu CI

**Expected behavior changes**

See PR

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of nasa/cfs#337

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 
@nmullane 
@pavll 
@zanzaben 
@skliper ",community,https://github.com/nasa/cFE/pull/1808
Default configuration does not permit max-size SB message buffer to be allocated,"**Describe the bug**
All messages need to be wrapped in a software bus message descriptor while in transit, and the software bus should be capable of accepting + passing messages up to `CFE_MISSION_SB_MAX_SB_MSG_SIZE` (configurable).

However, the default pool configuration does not allow this.  Calling `CFE_SB_AllocateMessageBuffer(CFE_MISSION_SB_MAX_SB_MSG_SIZE)` retuns NULL due to this.

**To Reproduce**
Build with default configuration, and call  `CFE_SB_AllocateMessageBuffer(CFE_MISSION_SB_MAX_SB_MSG_SIZE)` - returns NULL.

**Expected behavior**
Should return non-NULL, as `CFE_MISSION_SB_MAX_SB_MSG_SIZE` is the upper limit that should be acceptable.

**System observed on:**
Ubuntu

**Additional context**
This is because in the default SB pool configuration, there is not enough extra space in the maximum size pool block.  It is defined here:

https://github.com/nasa/cFE/blob/eb9c52319fb1f31f72159551735ad5f1365e5a79/cmake/sample_defs/cpu1_platform_cfg.h#L305

The hardcoded ""+ 40"" bytes is not quite enough for the descriptor on a 64-bit CPU (it might work on 32-bit, did not test)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1807
"Fix #1805, Add test for ES BackgroundWakeup","**Describe the contribution**
Fixes #1805 
- Adds missing test for CFE_ES_BackgroundWakeup

**Testing performed**
Build and run cfe functional tests

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern",CCB:Approved,https://github.com/nasa/cFE/pull/1806
Add ES test for CFE_ES_BackgroundWakeup,"[CCB:2021-08-11](https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-August-11-2021) APPROVED
- Add call for background wakeup

_Originally posted by @astrogeco in https://github.com/nasa/cFE/issues/1716#issuecomment-896980485_

@skliper or @zanzaben can you flesh this out?",unit-test,https://github.com/nasa/cFE/issues/1805
"Fix #1760, check resource ID idx is less than max","**Describe the contribution**
Fixes #1760 

**Testing performed**
Steps taken to test the contribution:
1. Build and run cfe functional tests

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04


**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern",CCB:Approved,https://github.com/nasa/cFE/pull/1804
"Fix #1680 #1681 #1682, add software bus tests","**Describe the contribution**
Adds functional testing for CFE SB APIs: subscription, message passing, zero copy.

Fixes #1680
Fixes #1681 
Fixes #1682

**Testing performed**
Build and run all tests, confirm log outputs as expected

**Expected behavior changes**
Additional APIs are functional tested

**System(s) tested on**
Ubuntu

**Additional context**
Currently requires PR #1790 as dependency (will rebase once finalized)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1803
Adding note on SB undefined behavior with SB_PEND_FOREVER and CFE_SB_DeletePipe(),"**Describe the contribution**
This adds affirmative documentation regarding the discussion in #1777 and #1799

**Testing performed**
Documentation only.

**Expected behavior changes**
Documentation only.

**System(s) tested on**
 - None

**Additional context**
See discussion in #1777

**Third party code**
No third party code included.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jonathan Bohren, Honeybee Robotics","CCB:Ignore, docs",https://github.com/nasa/cFE/pull/1802
"Fix #1762, Update CFE_ES_RunLoop documentation","**Describe the contribution**
Add better description of the RunStatus input/output parameter.

Fixes #1762

**Testing performed**
Build and check CFE, run all tests

**Expected behavior changes**
None, documentation only

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, docs",https://github.com/nasa/cFE/pull/1801
Fix #812 Add Perf API functional tests,"**Describe the contribution**
Fixes #812 
Add Perf API functional tests and Add Perf Trigger and Perf Start commands to functional test workflow.
Functional Test will now send a command to set a Perf trigger, send command to start capturing Perf data and finally send command to start running the functional tests.

**Testing performed**
Steps taken to test the contribution:
1. Build with tests enabled
2. Run cFS
3. Send commands to set Perf trigger, and start Perf data
4. Send command to run Functional Tests
5. Verify tests pass
6. Push code to Github and verify workflow works

**Expected behavior changes**
New tests added to functional tests. Workflow now sends two more commands to cFS.

**System(s) tested on**
 - OS: Ubuntu 18.04 VM

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza / NASA GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1800
CFE_SB_ReceiveBuffer does not return when the provided pipe is destroyed,"**Describe the bug**
If a pipe is destroyed while `CFE_SB_ReceiveBuffer()` is waiting with `CFE_SB_PEND_FOREVER`, `CFE_SB_ReceiveBuffer()` either blocks indefinitely or returns `CFE_SUCCESS` (non-deterministically). This behavior is demonstrated in the proposed test case in PR #1777.

This is situation is only realizable in a multi-task context. The functional tests included in #1651 / #1657 do not test this behavior because they do not create multiple tasks in which one task is waiting on a blocking call to `CFE_SB_ReceiveBuffer()` while the pipe provided to it is deleted.

**To Reproduce**
See test case in PR #1777 

**Expected behavior**
The expectation (albeit not documented) is that if a pipe is deleted while waiting on `CFE_SB_ReceiveBuffer()`, that `CFE_SB_ReceiveBuffer()` would return immediately with an error code.

**Code snips**
See PR #1777 

**System observed on:**
See PR #1777 

**Additional context**
See PR #1777 

**Reporter Info**
Jonathan Bohren, Honeybee Robotics",enhancement,https://github.com/nasa/cFE/issues/1799
"Partial #1724, update in/out status and nonnull/nonzero tags","**Describe the contribution**
First pass at API doxygen scrub, this updates the in/out markings on parameters where they were not correct, and adds nonnull and nonzero tags where appropriate.

Related to #1724 (but should not close yet)

**Testing performed**
Build and run all tests

**Expected behavior changes**
None (documentation only)

**System(s) tested on**
Ubuntu

**Additional context**
Note this is ""partial"" as it does not yet do all the test case verification, those will come later.  But the API documentation needs to have these tags correct so the validation scripts know what to look for.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1798
Make global test table setup in functional tests reusable,"I actually prefer the idea of making a ""Setup"" function here that does this init, then it can be passed as the setup function as part of the UtTest_Add for any test that uses this table struct.  That being said, its OK as is, I wouldn't hold this up.

_Originally posted by @jphickey in https://github.com/nasa/cFE/pull/1781#discussion_r686200856_","enhancement, unit-test",https://github.com/nasa/cFE/issues/1797
"Fix #1774, replace VOIDCALL assert macro","**Describe the contribution**
Use the generic UtAssert_VOIDCALL macro now provided from UtAssert, rather than a local macro in cfe_testcase app.

Fixes #1774

**Testing performed**
Build and run all tests

**Expected behavior changes**
None (macros are equivalent)

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1796
Test Boundaries for NumTables in CFE_TBL_GetAddresses ,"**Is your feature request related to a problem? Please describe.**
From #548. 

**Describe the solution you'd like**
Should test on boundary conditions for NumTables.

**Requester Info**
Ariel Adams, ASRC Federal ",unit-test,https://github.com/nasa/cFE/issues/1795
Subscribe to Message Limit Greater Than CFE_PLATFORM_SB_DEFAULT_MSG_LIMIT,"**Is your feature request related to a problem? Please describe.**
From #548. 

**Describe the solution you'd like**
Consider subscribing to message with limit greater than CFE_PLATFORM_SB_DEFAULT_MSG_LIMIT

**Requester Info**
Ariel Adams, ASRC Federal 
",unit-test,https://github.com/nasa/cFE/issues/1794
No Success Test for  CFE_TBL_Validate,"**Is your feature request related to a problem? Please describe.**
From #548. No Success Test for CFE_TBL_Validate. 

**Describe the solution you'd like**
Add a success test for CFE_TBL_Validate in cFE/modules/tbl/ut-coverage/tbl_UT.c.

**Requester Info**
Ariel Adams, ASRC Federal ","good first issue, unit-test",https://github.com/nasa/cFE/issues/1793
No Success Test for CFE_TBL_Update,"**Is your feature request related to a problem? Please describe.**
From #548. No Success Test for CFE_TBL_Update. 

**Describe the solution you'd like**
Add a success test for CFE_TBL_Update in cFE/modules/tbl/ut-coverage/tbl_UT.c.

**Requester Info**
Ariel Adams, ASRC Federal ","good first issue, unit-test",https://github.com/nasa/cFE/issues/1792
No Success Test and Boundaries for CFE_TBL_ReleaseAddresses,"**Is your feature request related to a problem? Please describe.**
From #548. No Success Test for CFE_TBL_ReleaseAddresses. No test on boundary conditions for NumTables.

**Describe the solution you'd like**
Add a success test for CFE_TBL_ReleaseAddresses in cFE/modules/tbl/ut-coverage/tbl_UT.c. Test boundary conditions for NumTables. 

**Requester Info**
Ariel Adams, ASRC Federal ",unit-test,https://github.com/nasa/cFE/issues/1791
"Fix #1784, add CFE assert macros to functional test","**Describe the contribution**
Adds the following macros to CFE assert library in cfe_assert.h:

- CFE_UtAssert_STATUS_OK
- CFE_UtAssert_STATUS_ERROR
- CFE_UtAssert_RESOURCEID_EQ
- CFE_UtAssert_RESOURCEID_UNDEFINED
- CFE_UtAssert_MEMOFFSET_EQ
- CFE_UtAssert_MSGID_EQ

Fixes #1784

**Testing performed**
Build and run all tests (including with some new test cases that use the new macros) and confirm all is working as expected.

**Expected behavior changes**
None right now, these are new macros that test cases are not using yet.

**System(s) tested on**
Ubuntu

**Additional context**
Provides improved feature parity with coverage test environment, gives a common macro to use for common tests/asserts, and more consistent naming convention.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc",CCB:Approved,https://github.com/nasa/cFE/pull/1790
No Success Test for CFE_TBL_GetStatus,"**Is your feature request related to a problem? Please describe.**
From #548. No Success Test for CFE_TBL_GetStatus. 

**Describe the solution you'd like**
Add a success test for CFE_TBL_GetStatus in cFE/modules/tbl/ut-coverage/tbl_UT.c.

**Requester Info**
Ariel Adams, ASRC Federal ","good first issue, unit-test",https://github.com/nasa/cFE/issues/1789
No Success Test for CFE_TBL_DumpToBuffer,"**Is your feature request related to a problem? Please describe.**
From #548. No Success Test for CFE_TBL_DumpToBuffer. 

**Describe the solution you'd like**
Add a success test for CFE_TBL_DumpToBuffer in cFE/modules/tbl/ut-coverage/tbl_UT.c

**Requester Info**
Ariel Adams, ASRC Federal 
","good first issue, unit-test",https://github.com/nasa/cFE/issues/1788
No Success Test for CFE_ES_GetMemPoolStats ,"**Is your feature request related to a problem? Please describe.**
From #548. No Success Test for CFE_ES_GetMemPoolStats. 

**Describe the solution you'd like**
Add a success test for CFE_ES_GetMemPoolStats in cFE/modules/es/ut-coverage/es_UT.c.

**Requester Info**
Ariel Adams, ASRC Federal ","good first issue, unit-test",https://github.com/nasa/cFE/issues/1787
No Success Test for CFE_ES_RestartApp ,"**Is your feature request related to a problem? Please describe.**
From #548. No Success Test for CFE_ES_RestartApp. 

**Describe the solution you'd like**
Add a success test for CFE_ES_RestartApp in cFE/modules/es/ut-coverage/es_UT.c.

**Requester Info**
Ariel Adams, ASRC Federal 
","good first issue, unit-test",https://github.com/nasa/cFE/issues/1786
"Fixes #1776, #1770, Stop memory leak & add cds size test.","**Describe the contribution**
Fixes #1776 
Delete memory pools to prevent memory leak. 

Fixes #1770
Add Test for registering CDS with same name and different size. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1785
"Port ""CFE_UtAssert_SuccessCheck"" and related macros from coverage test to functional test","**Is your feature request related to a problem? Please describe.**
The CFE coverage test has a number of useful test macros:
- CFE_UtAssert_SETUP
- CFE_UtAssert_TEARDOWN
- CFE_UtAssert_SUCCESS
- CFE_UtAssert_MSGID_EQ
- CFE_UtAssert_RESOURCEID_EQ
- CFE_UtAssert_MEMOFFSET_EQ

However, these are only accessible/usable from the coverage test environment.  It would be helpful if equivalent macros/functions existed in the functional test environment.

**Describe the solution you'd like**
Define the same basic set of macros in `cfe_assert.h`  so they can be used by any functional test.

**Additional context**
Due to the considerable differences in the application linkage, there currently is no (real) library that is common between the coverage test and functional test environments, aside from UtAssert itself.

Unfortunately this means there is no easy way to use the exact same definition of these macros, but as they are just wrappers around UtAssert functions so it isn't that bad to duplicate them.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1784
"Fix #1691, Add External Time Source Functional Tests","**Describe the contribution**
Fixes #1691
Add External Time Source Functional Tests

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1783
"Fix #1679, Add functional tests for resource misc","**Describe the contribution**
- Fixes #1679 
- Adds functional tests for
  - CFE_ResourceId_ToInteger
  - CFE_ResourceId_FromInteger
  - CFE_ResourceId_Equal
  - CFE_ResourceId_IsDefined
  - CFE_ResourceId_GetBase
  - CFE_ResourceId_GetSerial
  - CFE_ResourceId_FindNext
  - CFE_ResourceId_ToIndex

**Testing performed**
1. Build and run cfe functional tests

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04


**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern
",CCB:Approved,https://github.com/nasa/cFE/pull/1782
"Fix #1780, RTEMS CFE_FT_Global build failure","**Describe the contribution**
- Fix #1780 

**Testing performed**
cFE CI and bundle CI
See succesful bundle tests at https://github.com/astrogeco/cFS/runs/3284780164

**Expected behavior changes**
No behavior change, fixes build failure on RTEMS 4.11 and 5.0

**System(s) tested on**
GitHub Actions CI

**Additional context**
Fixed as part of IC:2021-08-10

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@astrogeco 
@nmullane",,https://github.com/nasa/cFE/pull/1781
RTEMS CFE_FT_Global build failure ,"**Describe the bug**

RTEMS CI fails due to ""multiple definitions"" of `CFE_FT_Global` 

```
[ 96%] Linking C shared module cfe_testcase.obj
/root/rtems-5/bin/i386-rtems5-ld: CMakeFiles/cfe_testcase.dir/src/cfe_test.c.o:(.bss+0x0): multiple definition of `CFE_FT_Global'; CMakeFiles/cfe_testcase.dir/src/cfe_test_table.c.o:(.data+0x0): first defined here
/root/rtems-5/bin/i386-rtems5-ld: CMakeFiles/cfe_testcase.dir/src/tbl_content_access_test.c.o:(.bss+0x0): multiple definition of `CFE_FT_Global'; CMakeFiles/cfe_testcase.dir/src/cfe_test_table.c.o:(.data+0x0): first defined here
/root/rtems-5/bin/i386-rtems5-ld: CMakeFiles/cfe_testcase.dir/src/tbl_content_mang_test.c.o:(.bss+0x0): multiple definition of `CFE_FT_Global'; CMakeFiles/cfe_testcase.dir/src/cfe_test_table.c.o:(.data+0x0): first defined here
/root/rtems-5/bin/i386-rtems5-ld: CMakeFiles/cfe_testcase.dir/src/tbl_information_test.c.o:(.bss+0x0): multiple definition of `CFE_FT_Global'; CMakeFiles/cfe_testcase.dir/src/cfe_test_table.c.o:(.data+0x0): first defined here
/root/rtems-5/bin/i386-rtems5-ld: CMakeFiles/cfe_testcase.dir/src/tbl_registration_test.c.o:(.bss+0x0): multiple definition of `CFE_FT_Global'; CMakeFiles/cfe_testcase.dir/src/cfe_test_table.c.o:(.data+0x0): first defined here
```

**To Reproduce**

Checkout cFS bundle at `871a2d7` then point cFE to 600fd7a320e0a11cd892bf311d490735ca132f5a

**Expected behavior**
Both Linux and RTEMS build succesfully

**Code snips**
Related to setting Table releated entries in global struct in `modules/cfe_testcase/src/cfe_test_table.c`

```c
/* Constant Table information used by all table tests */
CFE_FT_Global_t CFE_FT_Global = {
    .TblName = ""TestTable"", .RegisteredTblName = ""CFE_TEST_APP.TestTable"", .TblFilename = ""test_tbl.tbl""};
```

**System observed on:**
CI build of RTEMS 4.11 and 5.0

**Additional context**
Found during IC:2021-08-10 process. 

See https://github.com/nasa/cfe/issues/1772 and https://github.com/nasa/cFS/pull/333
",enhancement,https://github.com/nasa/cFE/issues/1780
"Fix #1775, #1773 -  Adds invalid id syslog to for CFE_ES_DeleteApp and CFE_ES_ReloadApp and verifies required reporting","**Describe the contribution**
Fix #1775
Fix #1773 

**Testing performed**
Build and run unit tests, passed

**Expected behavior changes**
Will now report invalid ids to the syslog for CFE_ES_DeleteApp and CFE_ES_ReloadApp

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + these commits

**Additional context**
Related to requirements verification

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1779
"Fix #807, Add ES Application Behavior Functional Tests","**Describe the contribution**
Fixes #807
Add ES Application Behavior Functional Tests

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Additional context**
CFE_ES_ExitApp was not directly tested. https://github.com/nasa/cFE/issues/1761 will be needed to test that. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1778
Adding test to cfe_testcase app demonstrating non-detection of pipe destruction by CFE_SB_ReceiveBuffer,"**Describe the contribution**
A clear and concise description of what the contribution is.
- This adds a test to the `cfe_testcase` app demonstrating a potential bug in `CFE_SB_ReceiveBuffer()`
- When `CFE_SB_ReceiveBuffer()` is called with `CFE_SB_PEND_FOREVER`, and its pipe is destroyed, it does not return with an error code. (It is unclear at this time whether it blocks indefinitely or returns with `CFE_SUCCESS`).
- If this test case asserts the correct behavior, it indicates a change may be necessary in `CFE_SB_ReceiveBuffer()`
 
**Testing performed**
Steps taken to test the contribution:
1. Create template mission from `sample_defs`
2. Add `cfe_testcase` to `MISSION_GLOBAL_APPLIST` in `targets.cmake`:
    `list(APPEND MISSION_GLOBAL_APPLIST sample_app sample_lib cfe_testcase)`
3. Add `cfe_testcase` to `cpu1_cfe_es_startup.scr`:
    `CFE_APP, cfe_testcase, CFE_TestMain,       TESTCASE_APP, 50, 16384, 0x0, 0;`
4. Run `./core-cpu1` out of standard build directory

**Expected behavior changes**
 - The test case does the following:
   - Creates a pipe
   - Transmits one message, which should be received by that pipe
   - Creates a child task with a loop servicing that pipe
   - Waits one second
   - Destroys the pipe
   - Waits one second
   - Checks to see that the child task has exited
   - Checks to see if CFE_SB_ReceiveBuffer() has returned an error code
  
 - Output from the failing check:
 
```
EVS Port1 66/1/TESTCASE_APP 7: [BEGIN] 36 Test destroying a pipe while waiting.
EVS Port1 66/1/TESTCASE_APP 2: [ FAIL] 36.007 sb_task_test.c:127 - D->exited (0) == 1 (1)
EVS Port1 66/1/TESTCASE_APP 2: [ FAIL] 36.008 sb_task_test.c:128 - D->status (0) != CFE_SUCCESS (0)
EVS Port1 66/1/TESTCASE_APP 8: [  END] 36 Test destroying a pipe while waiting. TOTAL::8     PASS::6     FAIL::2     MIR::0     TSF::0     TTF::0     N$
```

This indicates that 1.0 seconds after deleting an SB pipe, a call to `CFE_SB_ReceiveBuffer()` has not exited with a failure condition.

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 18.04
 - Versions:
   - cFE `Development Build: 6.8.0-rc1+dev290`
   - OSAL `Development Build: v5.1.0-rc1+dev586`
   - PSP `Development Build: v1.5.0-rc1+dev118`

**Additional context**
We've been working with an internal fork of SBN running with cFE (version `Development Build: 6.8.0-rc1+dev290`) and encountered a race condition where a blocking call to `CFE_SB_ReceiveBuffer()` is not failing if its SB pipe is destroyed while waiting. This is modeled after the implementation in SBN [[ref]](https://github.com/nasa/SBN/blob/main/fsw/src/sbn_app.c#L649).

cc @CDKnightNASA 

**Third party code**
No third-party code is included.

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- Jonathan Bohren, Honeybee Robotics",CCB:Ignore,https://github.com/nasa/cFE/pull/1777
Resource leak in MemPool tests,"**Describe the bug**
The `TestMemPoolCreate` function creates 3 memory pools in total - whenever CFE_SUCCESS is returned, this means a pool was instantiated.

See here:
https://github.com/nasa/cFE/blob/cfadad69aebc29a8151ec664a21173cca755b67a/modules/cfe_testcase/src/es_mempool_test.c#L43
https://github.com/nasa/cFE/blob/cfadad69aebc29a8151ec664a21173cca755b67a/modules/cfe_testcase/src/es_mempool_test.c#L48
https://github.com/nasa/cFE/blob/cfadad69aebc29a8151ec664a21173cca755b67a/modules/cfe_testcase/src/es_mempool_test.c#L53

However, only the last pool ID is deleted here:
https://github.com/nasa/cFE/blob/cfadad69aebc29a8151ec664a21173cca755b67a/modules/cfe_testcase/src/es_mempool_test.c#L58

The other two pools are left hanging, and are automatically cleaned up by CFE ES at the time the app exits itself, as designed.  However, in the case of the pool with an embedded mutex (the one created at line 48) the mutex will be deleted by both CFE ES resource cleanup and task cleanup, due to the fact that the mutex was created by the task.

Note that the ID validation works, and the mutex is only deleted once - task cleanup gets to it first, and when pool cleanup tries to delete it again, the ID is reported as stale and nothing is deleted, but it does issue a warning about it right here:

https://github.com/nasa/cFE/blob/cfadad69aebc29a8151ec664a21173cca755b67a/modules/es/fsw/src/cfe_es_mempool.c#L415


**To Reproduce**
Execute CFE functional tests, observe an unexpected warning in the syslog when the test completes:

```
1980-012-14:03:23.85870 CFE_ES_ExitApp: Application CFE_TEST_APP called CFE_ES_ExitApp
1980-012-14:03:24.75802 CFE_ES_PoolDelete: Error -16 deleting mutex
EVS Port1 66/1/CFE_ES 13: Exit Application CFE_TEST_APP Completed.
```

**Expected behavior**
Test should delete all the pools it creates, and this clean up warning should not happen

**System observed on:**
Ubuntu

**Additional context**
In a way, this could be considered a happy accident, as it verifies that stale ID rejection is occurring, and everything is working as designed.  As a result, there is no real harm done by this double delete, aside from the extra warning.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","good first issue, unit-test",https://github.com/nasa/cFE/issues/1776
Add syslog for CFE_ES_DeleteApp and CFE_ES_ReloadApp ID failures,"**Is your feature request related to a problem? Please describe.**
CFE_ES_DeleteApp is required to log a bad id (ES: Delete Application - Reject Undefined,cES1309.1), and CFE_ES_RestartApp has a requirement and does syslog.  CFE_ES_ReloadApp doesn't have an associated requirement, but should be consistent.

**Describe the solution you'd like**
Add syslog for CFE_ES_DeleteApp and CFE_ES_ReloadApp

**Describe alternatives you've considered**
Remove syslog write from the requirements and remove from CFE_ES_RestartApp...

**Additional context**
#1773

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1775
Replace cFE_FTAssert_VOIDCALL with new UtAssert_VOIDCALL,"**Is your feature request related to a problem? Please describe.**

The cFE Functional Test use a macro called `cFE_FTAssert_VOIDCALL`. That macro should be deleted and all existing references to it replaced with `UtAssert_VOIDCALL`.



**Describe the solution you'd like**

Replace old macro.

**Describe alternatives you've considered**
Leave as is.

**Additional context**
See https://github.com/nasa/cFE/issues/1744#issuecomment-895286108

","good first issue, unit-test",https://github.com/nasa/cFE/issues/1774
Confirm/add system log write verification explicitly documented in requirements,"**Is your feature request related to a problem? Please describe.**
A handful of the error handling requirements include system log writes.  Need to confirm verification in the associated test.
```
ES: Delete Application - Reject Undefined,cES1309.1,""If the specified Application is undefined then the cFE shall record the error in the System Log, and return an error code."",Can't delete an undefined application.
ES: Restart Application- Reject Undefined,cES1310.1,""If the specified Application is undefined then the cFE shall record the error in the System Log, and return an error code."",Can't restart an undefined application.
ES: Restart Application - Reject On Missing File,cES1310.2,""If the original cFE Application file is not found then the cFE shall record the error in the System Log, and return an error code."",""Can't restart the Application if the original file has been removed. In this case, the Application will continue without a restart.""
ES: Restart Application - Delete On Non-Parameter Error,cES1310.3,""If the cFE Application Restart fails due to a non-parameter error, then the cFE shall record the error in the System Log, and return an error code."",""If the Application is already stopped and there is an error restarting it, then the cFE application will be deleted.""
ES: Create Child Task - Report Error,cES1311.1,""In the event that the cFE Child Task cannot be created, the cFE shall record the error in the System Log, and return an error code."",Need to keep track of the Child Task Create Failures.
ES: Create Child Task - Invalid From Child Task,cES1311.2,""In the event a child task attempts to create another child task, the cFE shall record the error in the System Log, and return an error code."",Only the cFE Application's main task can create a child task. This prevents confusion with parent/child task relationships and the allocation/deallocation of resources.
ES: Delete Child Task - Error If Application Main Task,cES1312.1,""If the specified task is the cFE Application Main Task, the request shall record the error in the System Log, and return an error code."",Cannot use Child Task Exit or Delete on the cFE Application Main Task.
ES: End Child Task - Error If Application Main Task,cES1314.1,""If the calling task is the cFE Application Main Task, the cFE shall record the error in the System Log, and return an error code."",Cannot use Child Task Exit or Delete on the cFE Application Main Task.
ES: Prepare Memory Pool - Too Small,cES1320.1,""If the specified size is less than the <PLATFORM_DEFINED> minimum block size, the cFE shall record the error in the System Log, and return an error code."",""If the size of the Pool is not valid, then an error must be returned.""
ES: Allocate Memory - Invalid ID,cES1321.2,""If the specified Memory Pool identifier is invalid then the cFE shall record the error in the System Log, and return an error code."",""If the handle or Memory Pool ID is not valid, then an error must be returned.""
ES: De-allocate Memory - Invalid ID,cES1322.1,""If the specified Memory Pool identifier is invalid, then the cFE shall record the error in the System Log, and return an error code."",Need to have a valid Memory Pool identifier in order to de-allocate a block of memory.
ES: Processor Reset Set Up Volatile File System - Format On Failure,cES1517.1,""If the volatile file system check fails, the cFE shall format the volatile file system and create a system log entry."",""If the volatile file system is corrupt, it must be reformatted to allow the cFE to function.""
```

**Describe the solution you'd like**
Confirm there's a check for the system log entry, and where required a check of the return code.  If the verification is missing from the coverage check, add it.  If it's not implemented, reconsider requirement (is the system log write really necessary?)

**Describe alternatives you've considered**
None.  Need to verify requirements, and system log writes are easiest to verify from a stub call check in coverage code.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, unit-test, requirements",https://github.com/nasa/cFE/issues/1773
cFE Integration candidate: 2021-08-10,"**Describe the contribution**

PR #1737
- Fix #1733, Move global count into test global struct. 

PR #1722 
- Fix #806, Add ES application control API functional tests 
- Fix #1324, Add null pointer check to CFE_ES_ReloadApp functional test 


PR #1753 
- Fix #813, Add Generic Counter API test 

PR #1744 

- Fix #1743, update coverage test to use UtAssert macros 

PR #1734
  - Fix #1685
  - Fix #1688 
  - Fix #1686 
  - Fix #1687 

PR #1716 

- Fix #1645, Add resource ID API functional tests 

PR #1764 

- Fix #1763, last char truncated in coverage log output 


PR #1728 

- Fix #1727, mistakes in some copyright headers 


PR #1767 

- Fix #1692, Add misc time api functional test 

PR #1749 

- Fix #1649, Add Functional Test for EVS Reset Filters API. 

PR #1796 
- Fix #1774, replace VOIDCALL assert macro 

PR #1781 
- Fix #1780, RTEMS CFE_FT_Global build failure 

**Testing performed**

cFE Checks <https://github.com/nasa/cFE/pull/1772/checks>
cFS Checks <https://github.com/nasa/cFS/pull/333/checks>

**Expected behavior changes**
See Included PRs

**System(s) tested on**
Ubuntu 18.04 

**Additional context**
Part of <https://github.com/nasa/cFS/pull/333>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 
@nmullane 
@pavll 
@zanzaben ",,https://github.com/nasa/cFE/pull/1772
Update end child task error requirement (can't return error code from void function),"**Is your feature request related to a problem? Please describe.**
Calling CFE_ES_ExitChildTask from a main application task is a bug/error, but it's a void call so impossible to fully meet the ES: End Child Task - Error If Application Main Task,cES1314.1 as written since an error code can't be returned:
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/docs/cFE_FunctionalRequirements.csv#L116

**Describe the solution you'd like**
Remove the error code return language.

**Describe alternatives you've considered**
Add a return code.  Really it's a bug so there's no use case to logically handle a return code when called from a main app context.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/cFE/issues/1771
Need to functionally test create data store with size change requirement,"**Is your feature request related to a problem? Please describe.**
Requirement related to creating critical data store with new size which should be functionally exercised:
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/docs/cFE_FunctionalRequirements.csv#L118

**Describe the solution you'd like**
Functionally exercise the changed size case>

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1770
Delete/exit/create child task additional error codes need to be documented in API and tested (related to requirements),"**Is your feature request related to a problem? Please describe.**
We've got requirements to error if `CFE_ES_DeleteChildTask` or `CFE_ES_ExitChildTask` relate to the main app task:
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/docs/cFE_FunctionalRequirements.csv#L114
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/docs/cFE_FunctionalRequirements.csv#L116

Also `CFE_ES_CreateChildTask` can not be called from a child task:
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/docs/cFE_FunctionalRequirements.csv#L112

**Describe the solution you'd like**
Document in the API and exercise these cases and test for return codes:
`CFE_ES_ERR_CHILD_TASK_DELETE_MAIN_TASK`
`CFE_ES_ERR_CHILD_TASK_CREATE`
Note `CFE_ES_ExitChildTask` is a void so no error code to check but shouldn't exit from a main app, exercise from main test app task to confirm

**Describe alternatives you've considered**
None

**Additional context**
Hopefully this would be caught by the upcoming API scrub (@jphickey), but documenting explicitly since it's a requirement verification issue.  Not sure if it's easier to fix now or with the rest of the updates... open to whatever is easiest.

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, unit-test",https://github.com/nasa/cFE/issues/1769
"Remove create child task error reporting requirement, out of family and over-constrains implementation ","**Is your feature request related to a problem? Please describe.**
ES: Create Child Task - Report Error,cES1311.1 over-constrains the design/implementation.  Parameter errors like NULL pointers are not reported in the log for any parameter checking.  No other APIs have this sort of error handling related requirement.

Strict interpretations would mean the failing the requirement as written.

**Describe the solution you'd like**
Delete

**Describe alternatives you've considered**
Changing the implementation would make it inconsistent with all other handling, changing the requirement really just turns the requirement into design.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","invalid, docs",https://github.com/nasa/cFE/issues/1768
"Fix #1692, Add misc time api functional test","**Describe the contribution**
Fixes #1692 

**Testing performed**
Steps taken to test the contribution:
1. Build and run cfe functional tests

**Expected behavior changes**
- No impact to behavior

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern
",,https://github.com/nasa/cFE/pull/1767
"Fix #1644, finish ES misc API functional test","**Describe the contribution**
Fixes #1644 

**Testing performed**
1. Build and run cfe functional tests

**Expected behavior changes**
- No impact to behavior

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern
",,https://github.com/nasa/cFE/pull/1766
"Fix #1726, mark read only inputs as const","**Describe the contribution**
The following functions have read-only inputs which are passed by pointer, so it should be ""const"" qualified:

CFE_ES_CopyToCDS
CFE_SB_TransmitMsg
CFE_SB_TransmitMsgValidate

Fixes #1726

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
None, input was already read only, this just corrects the prototype to reflect that.

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1765
"Fix #1763, last char truncated in coverage log output","**Describe the contribution**
The ""MessageCheck_Impl"" routine used for printf/syslog checks was incorrectly truncating the last character of the log message.

Fixes #1763

**Testing performed**
Run all coverage tests, confirm print logs now contain the full string.

**Expected behavior changes**
Last char is no longer truncated in log

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1764
Printf test logs missing last character,"**Describe the bug**
In the CFE coverage tests, assertions for ""printf"" include the message format string being checked for, but it truncates the last character. For example:

```
[ PASS] 02.006 es_UT.c:724 - Printf generated: '%s: Startup Sync failed - Applications may not have all starte' (1) >  (0)
[ PASS] 02.007 es_UT.c:725 - Printf generated: '%s: Startup Sync failed - Applications may not have all initialize' (1) >  (0)
```

**To Reproduce**
Run ES coverage test, view logs

**Expected behavior**
Should include the full string, not cut off the last char.

**System observed on:**
Ubuntu

**Additional context**
Off by one error in the string processing

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1763
"CFE_ES_RunLoop RunStatus parameter is in/out, documented as in","**Is your feature request related to a problem? Please describe.**
Documented as in:
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/modules/core_api/fsw/inc/cfe_es.h#L362-L366

But set:
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/modules/es/fsw/src/cfe_es_api.c#L540-L545

**Describe the solution you'd like**
Update API documentation.  Description is also somewhat incomplete, since it's also a way for the app to self exit for the typical case where it's a condition in the while loop.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Full name and company/organization if applicable
",docs,https://github.com/nasa/cFE/issues/1762
Add a companion test app for additional API coverage and lab app independence,"**Is your feature request related to a problem? Please describe.**
Currently the functional test (see #1734) relies on sample_app running to test the table share API, there's also other APIs that would be easier or could be more fully covered if there was another app owned by the functional test (app control, CFE_ES_ExitApp, etc).

**Describe the solution you'd like**
Add support/logic and initial implementation (the table case is a good place to start).  Doesn't actually need to be a full-blown app and/or could be a bunch of very trivial, single-use objects.  Could likely still just do all the asserts from the main functional app, and could use CFE_ES_ReloadApp if different logic is needed for the specific test.  Still not really easy since there is no API to load an app (could send a command to ES though, either from the functional test app or as another command from the ground), and you can't reload an app that isn't running (if it exits it's done).

**Describe alternatives you've considered**
A child task could do some of it, but wouldn't be able to cover CFE_ES_ExitApp.  CFE_ES_ExitApp or CFE_ES_DeleteApp would need care if taking the CFE_ES_ReloadApp approach (do at the end, or use command to ES to start again, etc).  Could also just require sample_app be loaded to run the test since that's not really much different than requiring an additional test app (although the test app would be controlled with the rest of the functional logic, so more self-contained).  Definitely open to other ideas...

**Additional context**
Worth a trade of what's ""good enough"", since API testing doesn't really prove a distribution's use of the API will work.  In OSAL the APIs are functionally tested within the context of separate executables so testing the cFE API works within a test configuration (with sample_app) is analogous.  Distributions are still expected to test their functionality vs requirements, system test, and scenario test which really shows whatever APIs they are using behave as required. 

There's also the challenges related to custom configuration which could cause the functional test to fail (even as currently implemented).

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, unit-test, functional",https://github.com/nasa/cFE/issues/1761
Write Resource ID functional test to check maximum,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add additional checks to functional tests for ES Resource ID to Index that ensure the returned index is less than the maximum allowed for that resource type

**Describe alternatives you've considered**
None

**Requester Info**
_Originally posted by @astrogeco in https://github.com/nasa/cFE/pull/1734#issuecomment-892799313_
",unit-test,https://github.com/nasa/cFE/issues/1760
cFE Integration candidate: 2021-08-03,"**Describe the contribution**

PR #1752 

Fix #1751, Add null pointer check to table GetAddresses and ReleaseAddresses 

PR #1731 

Fix #1730, Explain FS Header offset & add offset functional tests.

PR #1758  
Fix #1757, Handle fail status in GetTypeFromMsgId 

PR #1748 
Fix #1648, Add Functional Test for EVS Send Event API 

PR #1742 
Fix #1741, Remove SB get last message sender info requirement

PR #1732 
Fix #1725 Update UTs to use UtAssert_MIR

PR #1736
Fix #1678, Add Functional Tests cFE Message ID 

PR #1707 
Fix #1690, Add Time Conversion Functional Test

PR #1739 
Fix #1738, Add cast to MIR prints [FastTracked]

**Testing performed**
cFE Checks <https://github.com/nasa/cFE/pull/1759/checks> 
- cFE failures due to osal dependency, jobs pass in bundle tests and fork
  - Passing Coverage Tests https://github.com/astrogeco/cFE/actions/runs/1106394822
  - Passing Functional Tests https://github.com/astrogeco/cFE/actions/runs/1106394820

cFS Checks <https://github.com/nasa/cFS/pull/328/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu CI

**Additional context**
Part of <https://github.com/nasa/cFS/pull/328>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@pavll
@ArielSAdamsNASA 
@nmullane 
@pepepr08 
@skliper 
@zanzaben ",community,https://github.com/nasa/cFE/pull/1759
"Fix #1757, Handle fail status from internal functions of CFE_MSG_GetT…","**Describe the contribution**
Fixes #1757  
 Handle fail status from internal functions of CFE_MSG_GetTypeFromMsgId

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1758
CFE_MSG_GetTypeFromMsgId not handling all invalid inputs,"**Is your feature request related to a problem? Please describe.**
CFE_MSG_GetTypeFromMsgId calls CFE_MSG_SetMsgId and CFE_MSG_GetType but ignores those return calls. They can return fail status codes so CFE_MSG_GetTypeFromMsgId should handle that. 

**Describe the solution you'd like**
CFE_MSG_GetTypeFromMsgId should check for failing status codes and return them if they happen. 

**Requester Info**
Alex Campbell GSFC",bug,https://github.com/nasa/cFE/issues/1757
"Fix #1755, separate variable for OSAL status","**Describe the contribution**
Ensure a separate stack variable, always named ""OsStatus"", is used to hold the result of an OSAL API call.  Do not use the same variable that is used to store a CFE status code.

This also fixes a few return code translations, where some functions were returning the OSAL status code (perhaps unintentionally) because it was stored in the same variable.

Fixes #1755

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
Nothing significant, however some APIs which returned an OSAL status will now translate to CFE status.

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1756
Improve consistency when working with OSAL status codes,"**Is your feature request related to a problem? Please describe.**
Quite often in the CFE implementation, OSAL status codes are mixed with CFE status codes, often times sharing a single stack variable to hold either one, and even switching back and forth.

To improve clarity and consistency, OSAL status codes should be stored in a _separate_ stack variable from the CFE status codes.  Ideally, in the future, these should also migrate to a separate type (e.g. `osal_status_t`, as in nasa/osal#1108, or `CFE_Status_t`, as in nasa/cfe#921).  

**Describe the solution you'd like**
- Anywhere that an OSAL status code is stored on the stack, make a _separate_ variable.
- Always use a consistent name for that variable, e.g. `OsStatus`  (as opposed to ""Status"" or ""ReturnCode"" etc, which are vague).
- Avoid intermixing CFE status codes and OSAL status codes whenever possible (there will still be some times its necessary, when calling generic functions).  When it is necessary, make conversions between these types explicit/obvious via comments and/or type casting.
- When printing OSAL status codes in a log or event message, print it as long decimal (%ld), not as hex as the CFE status codes are.  This is because OSAL defines its status codes as decimal numbers, so logs/events should match this.

**Additional context**
This can be considered a prerequisite to nasa/cfe#921 (cannot introduce a unique `CFE_Status_t` type until it is no longer being used to store OSAL codes).

This would be a fix for next release (not 7.0.0).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1755
Throw Error for C++ Comments in Format Check,"**Is your feature request related to a problem? Please describe.**
The format check workflow does not throw an error for C++ comments which are not allowed.

![image](https://user-images.githubusercontent.com/69638935/128042365-eb8f42d2-eca2-478c-92df-917d33b51518.png)

**Describe the solution you'd like**
Throw an error for C++ comments to enforce /* XXX */ or multi-line C comments in the format check workflow. 

**Describe alternatives you've considered**
N/A

**Requester Info**
Ariel Adams, ASRC Federal 
",continuous-integration,https://github.com/nasa/cFE/issues/1754
"Fix #813, Add Generic Counter API test","**Describe the contribution**
Add tests for the following APIs:

- CFE_ES_RegisterGenCounter
- CFE_ES_CounterID_ToIndex
- CFE_ES_GetGenCounterIDByName
- CFE_ES_GetGenCounterName
- CFE_ES_GetGenCount
- CFE_ES_SetGenCount
- CFE_ES_IncrementGenCounter
- CFE_ES_DeleteGenCounter

Fixes #813

**Testing performed**
Build and run all functional tests, confirm passing

**Expected behavior changes**
Additional APIs are tested

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1753
"Fix #1751, Add null pointer check to table GetAddresses and ReleaseAddresses","**Describe the contribution**
- Fixes #1751
- Adds null check on TblHandles pointer in CFE_TBL_GetAddresses and CFE_TBL_ReleaseAddresses

**Testing performed**
1. Build and run CFE functional tests from #1734 

**Expected behavior changes**
 - No impact to behavior

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04


**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern",CCB:Approved,https://github.com/nasa/cFE/pull/1752
No null pointer check on TblHandles in CFE_TBL_GetAddresses and CFE_TBL_ReleaseAddresses,"**Describe the bug**
CFE_TBL_GetAddresses does not check that the array of TblHandles is not NULL and will cause a segmentation fault. A similar issue appears to also exist in CFE_TBL_ReleaseAddresses.

**To Reproduce**
Steps to reproduce the behavior:
1. The following line from my fork for #1734 will cause a segmentation fault instead of gracefully returning a CFE_TBL_BAD_ARGUMENT
`UtAssert_INT32_EQ(CFE_TBL_GetAddresses((void ***)&TblPtrs, numValidTbls, NULL), CFE_TBL_BAD_ARGUMENT);`
Whereas when the input TblPtrs is NULL, CFE_TBL_BAD_ARGUMENT is correctly returned.
2. Similarly the following line will cause a segmentation fault from CFE_TBL_ReleaseAddresses
`UtAssert_INT32_EQ(CFE_TBL_ReleaseAddresses(numValidTbls, NULL), CFE_TBL_BAD_ARGUMENT);`

**Expected behavior**
* CFE_TBL_GetAddresses should return CFE_TBL_BAD_ARGUMENT when the pointer TblHandles is NULL.
* CFE_TBL_ReleaseAddresses should return CFE_TBL_BAD_ARGUMENT when the pointer TblHandles is NULL.

**System observed on:**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Reporter Info**
Niall Mullane - GSFC 582 Intern",enhancement,https://github.com/nasa/cFE/issues/1751
CFE_TBL_Load doesn't reset LoadInProgress when called on a locked table,"**Describe the bug**
When calling CFE_TBL_Load on a table that is locked it correctly returns the status CFE_TBL_INFO_TABLE_LOCKED.

https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/modules/tbl/fsw/src/cfe_tbl_internal.c#L971-L976

However, this branch skips over the function CFE_TBL_NotifyTblUsersOfUpdate which resets the variable `RegRecPtr->LoadInProgress`. Without this variable being reset to `CFE_TBL_NO_LOAD_IN_PROGRESS`, all future calls to CFE_TBL_Load will fail.
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/modules/tbl/fsw/src/cfe_tbl_internal.c#L1029-L1047

Once the table address is correctly released, all subsequent calls to CFE_TBL_Load will still fail and return CFE_TBL_ERR_LOAD_IN_PROGRESS even though the last load failed when the table was locked.
https://github.com/nasa/cFE/blob/c4ae5b262727f4f1381df596d00a6acc11c3a62c/modules/tbl/fsw/src/cfe_tbl_api.c#L745-L753

This can be fixed by calling CFE_TBL_Manage before trying to load data.

**To Reproduce**
On my fork for #1734 the test `TestReleaseAddress` in the file `modules/cfe_testcase/src/tbl_content_access_test.c` requires a call to CFE_TBL_Manage before we can load data to the table after releasing the address for it. The following code snippet is from this file.
```c
    /* Attempt to load while address is locked */
    LoadTable(&TestTable, CFE_SUCCESS);
    UtAssert_INT32_EQ(CFE_TBL_GetAddress(&TblPtr, CFE_FT_Global.TblHandle), CFE_TBL_INFO_UPDATED);
    LoadTable(&TestTable, CFE_TBL_INFO_TABLE_LOCKED);

    /* Release and try again */
    UtAssert_INT32_EQ(CFE_TBL_ReleaseAddress(CFE_FT_Global.TblHandle), CFE_SUCCESS);
    CFE_TBL_Manage(CFE_FT_Global.TblHandle);
    LoadTable(&TestTable, CFE_SUCCESS);
```

**Expected behavior**
After a failed table load because the table was locked, I should be able to release the address of a table and then call CFE_TBL_Load without needing to call CFE_TBL_Manage in between.

**System observed on:**
 - Hardware: PC
 - OS: Ubuntu 20.04
 
**Reporter Info**
Niall Mullane - GSFC 582 Intern",bug,https://github.com/nasa/cFE/issues/1750
"Fix #1649, Add Functional Test for EVS Reset Filters API.","**Describe the contribution**
Fixes #1649
Add Functional Test for EVS Reset Filters APIs.

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1749
"Fix #1648, Add Functional Test for EVS Send Event API","**Describe the contribution**
Fixes #1648
Add Functional Test for EVS Send Event API

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1748
"Fix #1746, Validate EVS Register inputs first.","**Describe the contribution**
Fixes #1746 
Move the validation of inputs to be the first thing for CFE_EVS_Register

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",wontfix,https://github.com/nasa/cFE/pull/1747
CFE_EVS_Register not validating inputs first ,"**Describe the bug**
inside EVS register it clears the AppData record before it validates all the inputs. If some of the inputs are invalid that then causes the app to crash. 

**Expected behavior**
Validate inputs first before anything else. 

**Code snips**
https://github.com/nasa/cFE/blob/33a4f19ce6dc2c132823b3c8c487a59d5b4b81a8/modules/evs/fsw/src/cfe_evs.c#L46-L74

**Reporter Info**
Alex Campbell GSFC",enhancement,https://github.com/nasa/cFE/issues/1746
"Fix #1677, Add Message API Functional Test","**Describe the contribution**
- Fixes #1677 

**Contributor Info - All information REQUIRED for consideration of pull request**
Paul Oberosler, Individual","CCB:Approved, unit-test, conflicts, community",https://github.com/nasa/cFE/pull/1745
"Fix #1743, update coverage test to use UtAssert macros","**Describe the contribution**
A number of CFE coverage-specific macros and generic assert functions were moved into OSAL UtAssert library so it can be used in a wider variety of tests.

This removes the CFE coverage-specific version, and changes allreferences to use the equivalent UtAssert macro.

Fixes #1743

**Testing performed**
Build and run all tests

**Expected behavior changes**
None - UtAssert-provided macros should be equivalent in function

**System(s) tested on**
Ubuntu

**Additional context**
Requires nasa/osal#1125

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1744
Transition CFE tests to use UtAssert macros (moved from CFE),"**Is your feature request related to a problem? Please describe.**
In pull request nasa/osal#1125, a number of CFE coverage assert macros and generic functions were ported into the base UtAssert library.  Usage of the macro is equivalent.

**Describe the solution you'd like**
After merging that PR, remove the local CFE definitions of the macros and functions, and search/replace all references to use the UtAssert version instead.

**Describe alternatives you've considered**
Leave duplicate

**Additional context**
Requires nasa/osal#1125 to be merged first (or at the same time)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1743
"Fix #1741, Remove SB get last message sender info requirement","**Describe the contribution**
Fix #1741, just removes requirement we no longer support (SB Get last message sender)

**Testing performed**
None, requirements/docs update only

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1742
"Remove SB: Last Message Sender Info, cSB4309 requirement (removed API)","**Is your feature request related to a problem? Please describe.**
Support for getting the last message sender was removed in the Caelum development cycle, need to remove the requirement

**Describe the solution you'd like**
Remove cSB4309 - SB: Last Message Sender Info requirement

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, requirements",https://github.com/nasa/cFE/issues/1741
"Fix #1677, Add Message API Functional Test","**Describe the contribution**
- Fixes #1677 

**Contributor Info - All information REQUIRED for consideration of pull request**
Paul Oberosler, Individual
",duplicate,https://github.com/nasa/cFE/pull/1740
"Fix #1738, Add cast to MIR prints","**Describe the contribution**
Fixes #1738 Added cast to MIR prints in time_UT.c so that the RTEMS build doesn't break.

**Testing performed**
Steps taken to test the contribution:
1. Build and run time UT tests:
`make -C build/native/default_cpu1/time`
`make -C build/native/default_cpu1/time test`
2. Build and run cFS tests:
`make`
`make test`

**Expected behavior changes**
RTEMS workflow should build and run successfully.

**System(s) tested on**
 - Ubuntu 18.04 VM

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza / NASA GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1739
Add (unsigned int) cast to MIR prints in time_UT.c,"**Is your feature request related to a problem? Please describe.**
MIR prints in time_UT.c break the RTEMS build because %u expects (unsigned int), but uint32 in RTEMS is an unsigned long.

**Describe the solution you'd like**
Add (unsigned int) cast to MIR prints in time_UT.c

**Requester Info**
Jose F. Martinez Pedraza / NASA GSFC","bug, unit-test",https://github.com/nasa/cFE/issues/1738
"Fix #1733, Move global count into test global struct.","**Describe the contribution**
Fixes #1733 
Move global count into the test global struct

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1737
Fix #1678 Add Functional Tests for cFE Message ID APIs,"**Describe the contribution**
Fixes #1678 
Add functional tests for cFE Message Id APIs
CFE_MSG_GetMsgId - Gets the message id from a message.
CFE_MSG_SetMsgId - Sets the message id bits in a message.
CFE_MSG_GetTypeFromMsgId - Gets message type using message ID.

**Testing performed**
Tested in functional tests and format check workflows on fork. 

**Expected behavior changes**
Tests functionality for cFE Message Id APIs

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal 
","CCB:Approved, unit-test",https://github.com/nasa/cFE/pull/1736
Add additional checks to cFE Get Table Information API Functional Tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability


**Describe the solution you'd like**
Add additional checks to functional tests for cFE Get Table Information APIs.

#1734 adds basic functionality checks and error condition checking, but doesn't check everything.

The following list contains things that are not currently tested, but probably should be

`CFE_TBL_GetStatus`:
* Test that pending update, validation statuses are returned at the correct time

`CFE_TBL_GetInfo`:
* test NumUsers increments after the table is shared
* test Crc is valid
* test LastFileLoaded is correct after loading a file
* test TableLoadedOnce updates after loading data
* test FileCreatedTime makes sense
* test TimeOfLastUpdate is correct

`CFE_TBL_NotifyByMessage`:
* Test messages are actually sent with correct message id, cc, parameter

**Describe alternatives you've considered**
N/A

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Niall Mullane - GSFC 582 Intern","unit-test, functional",https://github.com/nasa/cFE/issues/1735
Add table api functional tests,"**Describe the contribution**
A clear and concise description of what the contribution is.
- Fixes
  - Fix #1685
  - Fix #1688 
  - Fix #1686 
  - Fix #1687 
- Adds functional unit tests for
  - CFE_TBL_Register
  - CFE_TBL_Share
  - CFE_TBL_Unregister
  - CFE_TBL_GetStatus
  - CFE_TBL_GetInfo
  - CFE_TBL_NotifyByMessage
  - CFE_TBL_Load
  - CFE_TBL_Update
  - CFE_TBL_Validate
  - CFE_TBL_Manage
  - CFE_TBL_DumpToBuffer
  - CFE_TBL_Modified
  - CFE_TBL_GetAddress
  - CFE_TBL_GetAddresses
  - CFE_TBL_ReleaseAddress
  - CFE_TBL_ReleaseAddresses

**Testing performed**
Steps taken to test the contribution:
1. Build CFE and run all functional tests

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - no impact to behavior

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern",CCB:Approved,https://github.com/nasa/cFE/pull/1734
"Move ""count"" global to test global struct","**Describe the bug**
Should not have random global variables around, particularly variables with simple/common names, as it may silently overwrite an existing variable (i.e. if any other app/lib makes a global called ""count"" some OS's will just happily bind to the existing variable, not make a separate instance, when dynamic refs are resolved after loading).

https://github.com/nasa/cFE/blob/cc8c9a1d79dfdf6c098f18431d852a9e8e28592e/modules/cfe_testcase/src/es_task_test.c#L36

**Expected behavior**
Now that we have a proper global struct, `CFE_FT_Global_t` - This should be moved into it.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, unit-test",https://github.com/nasa/cFE/issues/1733
Fix #1725 Update time_UT.c to use UtAssert_MIR,"**Describe the contribution**
Fixes #1725 Updated time_UT.c to start using the new UtAssert_MIR to avoid incorrect use of UtAssertEx.

This update requires https://github.com/nasa/osal/pull/1122 to be merged first. cFS will fail to compile otherwise.

**Testing performed**
Steps taken to test the contribution:
1. Pulled OSAL repo with the UtAssert_MIR changes
2. Rebuild cFS
3. Run unit tests.... All passed.
4. Set a custom epoch time
5. rebuild and run unit tests... All passed.
6. Manually run ./coverage-time-ALL-testrunner and verify expected output:
`[  MIR] 06.004 time_UT.c:902 - Confirm adding seconds = 4294967295, subseconds = 4294967295 to configured EPOCH results in time 0214-039-06:28:15.99999`

7. Manually run functional tests and verify expected output:
`EVS Port1 66/1/CFE_TEST_APP 5: [  MIR] 15.001 es_misc_test.c:67 - MIR (Manual Inspection Required) for CFE_ES_WriteToSysLog`

**Expected behavior changes**
No expected changes in behavior. 


**System(s) tested on**
Ubuntu 18.04 VM

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza / NASA GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1732
"Fix #1730, Explain FS Header offset & add offset functional tests.","**Describe the contribution**
Fixes #1730
Add explanation of offset to the header file. Add functions test for the offset. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1731
Explicitly document/test file offset behavior in relation to FS file read/write APIs,"**Is your feature request related to a problem? Please describe.**
It's not clear from the API where the file offset is left after using any of the FS APIs that access the file:
CFE_FS_ReadHeader
CFE_FS_WriteHeader
CFE_FS_SetTimestamp

**Describe the solution you'd like**
Right now, at least some apps in the wild depend on current behavior so preferred fix for Caelum is just to document current behavior (success and error).  Error can be undefined, but success should be consistent/explicit.

Also worth adding a functional check to confirm this behavior (if it's not already checked).

**Describe alternatives you've considered**
Could explicitly be undefined, or change behavior to reset to the start of the file but that would ripple through all the apps.

**Additional context**
From an app code review, currently undocumented behavior means apps should all lseek but rather than change every app it's likely better to document the current behavior explicitly in the API. 

**Requester Info**
Jacob Hageman - NASA/GSFC, ping @ejtimmon ","enhancement, docs, unit-test",https://github.com/nasa/cFE/issues/1730
"Fix #1685, Add table registration functional tests","**Describe the contribution**
A clear and concise description of what the contribution is.
- Fixes #1685 
- Adds functional unit tests for
  - CFE_TBL_Register
  - CFE_TBL_Share
  - CFE_TBL_Unregister

**Testing performed**
Steps taken to test the contribution:
1. Build CFE and run all functional tests

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - no impact to behavior

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern",duplicate,https://github.com/nasa/cFE/pull/1729
"Fix #1727, mistakes in some copyright headers","**Describe the contribution**
- Fixes #1727 

**Expected behavior changes**
 - No behavior changes

Paul Oberosler, Individual",docs,https://github.com/nasa/cFE/pull/1728
Some source code files have mistakes in the copyright headers.,"**Describe the bug**
The source files have their file names in their headers, but some have just copied the text from another file, so the file names in their headers do not match that of the file.

**Code snips**
[Example where this is a mistake.](https://github.com/nasa/cFE/blob/33a4f19ce6dc2c132823b3c8c487a59d5b4b81a8/modules/cfe_testcase/src/es_cds_test.c)

**Additional context**
It's just a quick fix, not necessary for the program's features.
","enhancement, docs",https://github.com/nasa/cFE/issues/1727
"DataToCopy argument of CFE_ES_CopyToCDS should be ""const""","**Is your feature request related to a problem? Please describe.**
This pointer argument is read-only, the data is passed to PSP which is (correctly) a `const void*`

**Describe the solution you'd like**
Prototype should be:

    CFE_Status_t CFE_ES_CopyToCDS(CFE_ES_CDSHandle_t Handle, const void *DataToCopy)

**Additional context**
Should not cause any issue for existing code (OK to pass non-const to const, just not the other way).  Making const-correct avoids issue/warning if called from an app using `const` data.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/1726
Update time_UT.c:Test_Print to use the UtAssert_MIR macro,"**Is your feature request related to a problem? Please describe.**
UtAssertEx use isn't great (leads to nonstandard output):
https://github.com/nasa/cFE/blob/e29896192909f853154b208c63e3c22fccf4ab56/modules/time/ut-coverage/time_UT.c#L870-L872

**Describe the solution you'd like**
Once nasa/osal#1118 is implemented, update the MIR tests in Test_Print. 

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1725
Scrub for discrepancies between implementation return codes and documentation,"**Is your feature request related to a problem? Please describe.**
Need to perform a general scrub of API documentation for parameters, error checking, and and return codes, as was done for OSAL.

**Describe the solution you'd like**
- Confirm that all return/status codes which are _directly_ generated by an implementation appear in the documentation for that function as a `@retval` clause.
- Confirm that all return codes specified by a `@retval` clause also have a test case that covers them
- Confirm that parameter documentation is appropriately marked `@nonnull` or `@nonzero` where applicable
- Confirm that there is a test case that violates above rule to test function response w/bad input
- Confirm that coverage tests are not ""overloaded"" (i.e. violate only one rule at a time when confirming status code response).

**Additional context**
See nasa/osal#980

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","duplicate, enhancement, docs, unit-test",https://github.com/nasa/cFE/issues/1724
Incomplete OSAL error conversion in CFE_ES_ReloadApp,"**Describe the bug**
The CFE_ES_ReloadApp function uses the function OS_stat to perform its work. The error handling in CFE_ES_ReloadApp assumes any failure in OS_stat is due to a file IO issue. This may not be the case because if a null pointer is passed in as the file name OS_stat will return an OS_INVALID_POINTER, but this specific error code will be ignored and CFE_ES_ReloadApp will just output CFE_ES_FILE_IO_ERR instead of a CFE_ES_BAD_ARGUMENT.

**To Reproduce**
Steps to reproduce the behavior:
1. Call CFE_ES_ReloadApp with a null pointer for filename. It will return a CFE_ES_FILE_IO_ERR when the real issue was a bad argument.

**Expected behavior**
CFE_ES_ReloadApp could include a null check itself to provide a more specific error message or the OS_INVALID_POINTER returned by OS_stat could be converted to a specific CFE error code.

**Additional context**
See #1672 for a similar error conversion issue

**Reporter Info**
Niall Mullane - GSFC 582 Intern
",enhancement,https://github.com/nasa/cFE/issues/1723
"Fix #806, Add application control functional tests","**Describe the contribution**
A clear and concise description of what the contribution is.
- Fixes #806
- Fixes #1324
- Adds functional tests for
  - CFE_ES_RestartApp
  - CFE_ES_ReloadApp
  - CFE_ES_DeleteApp

**Testing performed**
Steps taken to test the contribution:
1. Build CFE and run all functional tests

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - no impact to behavior

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern

EDIT - @skliper added #1324 link.
","CCB:Approved, unit-test",https://github.com/nasa/cFE/pull/1722
"Fix #1718, Add null check to CFE_ES_TaskID_ToIndex.","**Describe the contribution**
Fixes #1718
Add null check to CFE_ES_TaskID_ToIndex.

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1721
"Fix #1702 #1709 #1713 #1717, Requirements update for Caelum","**Describe the contribution**
Fix #1702 - Re-add CFE_SB_DeletePipe 
Fix #1709 - Remove application/child ES registration 
Fix #1713 - Remove message initialization clear/no-clear option
Fix #1717 - Add new API requirements to match development changes
Fix #1714 - Remove get message checksum

**Testing performed**
None, docs/requirements updates only

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1720
"Fix #1396, scrub command documentation","**Describe the contribution**
Update documentation for all command codes in CFE core apps, in particular the error conditions, to confirm it matches the
actual implementation.

For common operations that apply to all commmands (length verification) this is now put into the users guide as a general statement rather than repeating the info in every command.

Fixes #1396 
Fixes #1395 

**Testing performed**
Build documentation and confirm output

**Expected behavior changes**
None (docs only)

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1719
No null pointer check in CFE_ES_TaskID_ToIndex,"**Describe the bug**
CFE_ES_TaskID_ToIndex does not check if the input index pointer is null and will cause a segmentation fault if it is null.

**To Reproduce**
Steps to reproduce the behavior:
1. [This](https://github.com/nmullane/cFE/blob/9041e0b8e119ab64a921c3d1be0e5337043a8984/modules/cfe_testcase/src/es_resource_id_test.c#L78) line in the functional unit tests on my fork will result in a segmentation fault if it is uncommented.
2. Build CFE and run functional unit tests to view the error.

**Expected behavior**
CFE_ES_TaskID_ToIndex should return a CFE_ES_BAD_ARGUMENT if the index pointer is null.

**System observed on:**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Reporter Info**
Niall Mullane - GSFC 582 Intern",enhancement,https://github.com/nasa/cFE/issues/1718
Requirements scrub for Caelum development cycle,"**Is your feature request related to a problem? Please describe.**
Caelum development included API additions, need updated requirements.

**Describe the solution you'd like**
Update:
ES: Report Task and Application Name,cES1305 -> ES: Get Task Information

New:
ES: Get Library Information,cES1344
ES: Delete Memory Pool,cES1345
ES: Get Generic Counter Name,cES1346
FS: Filename Auto-Complete,cES1605
FS: Background File Dump,cES1606
SB: Delete Pipe,cSB4302
SB: Set Packet Type,cSB4346
SB: Get Header Field,cSB4347
SB: Set Header Field,cSB4348
SB: Get Sequence Count,cSB4349
SB: Set Sequence Count,cSB4350
SB: Get Next Sequence Count,cSB4351
SB: Get Type From MsgId,cSB4352

**Describe alternatives you've considered**
None

**Additional context**
Note - resource ID APIs and *_ToIndex APIs were categorized as ""Design"" so they aren't associated directly with requirements (a different implementation may not require these).  Of similar note, the message implementation supports user defined header fields, so the requirement is generic where there isn't internal dependencies on the field.

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, requirements",https://github.com/nasa/cFE/issues/1717
"Fix #1645, Add resource ID API functional tests","**Describe the contribution**
- Fixes #1645
- Adds functional tests for each of the following functions
  - CFE_ES_AppID_ToIndex
  - CFE_ES_LibID_ToIndex
  - CFE_ES_TaskID_ToIndex
  - CFE_ES_CounterID_ToIndex

**Testing performed**
Steps taken to test the contribution:
1. Build CFE and run all functional tests

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - no impact to behavior

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern",CCB:Approved,https://github.com/nasa/cFE/pull/1716
"Fix #1689, Add time arithmetic functional tests","**Describe the contribution**
A clear and concise description of what the contribution is.
* Fixes #1689 
* Adds functional tests for
  * CFE_TIME_Add
  * CFE_TIME_Subtract
  * CFE_TIME_Compare
 
**Testing performed**
Steps taken to test the contribution:
1. Build CFE and run all functional tests

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - No impact to behavior

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern
",CCB:Approved,https://github.com/nasa/cFE/pull/1715
Remove get message checksum requirement,"**Is your feature request related to a problem? Please describe.**
As part of the message module refactor the CFE_SB_GetChecksum external API was determined to have no use case.

**Describe the solution you'd like**
Remove associated requirement:
cSB4326 - SB: Get Checksum

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, requirements",https://github.com/nasa/cFE/issues/1714
"Remove requirements for message initialization ""clear"" vs ""no-clear"" options","**Is your feature request related to a problem? Please describe.**
CFE_MSG_Init no longer supports ""clear"" vs ""no-clear"" options due to abstraction incompatibilities.
cSB4315.1 - SB: Initialize Message - Clear
cSB4315.2 - SB: Initialize Message - No Clear

**Describe the solution you'd like**
Remove these ""special option"" requirements.  The requirement is that it initializes the packet (cSB4315), the design/implementation describes the exact behavior (there are many possible compliant implementations by design).  Ambiguous options that can not be abstracted should be avoided in the API.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, requirements",https://github.com/nasa/cFE/issues/1713
Most commands only generate DEBUG event for successful completion,"**Is your feature request related to a problem? Please describe.**
Most commands will increment the command counter for the application and send a debug event after they are processed.  However, in the default/sample config, debug events are filtered out, so these will NOT be visible to the operator.  As such there is really no way to confirm a specific command was accepted - since _any_ command will increment the command counter (including noop, etc) the counter by itself is not a reliable means to check if a particular command was accepted.

**Describe the solution you'd like**
Generally, the fact that a command was accepted and processed is useful and necessary information for operators, so it should not be classified only as ""DEBUG"".  Consider making all these events to be of type `CFE_EVS_EventType_INFORMATION`.

Note that some commands, such as no-op, already send an INFORMATION event (so not fully consistent as it is).

**Additional context**
Noted when reviewing command documentation in #1396.  For Caelum will just document the EID that is currently being generated (debug or information) but will not change it.  For next release should try to make this more consistent.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1712
"Fix #1659, Add custom epoch support to TIME UT","**Describe the contribution**
Fixes #1659

- `CFE_TIME_Print` is only function that uses the epoch defines. Avoid use of `CFE_TIME_Print` to test other Time functions and specifically check for the expected seconds and subseconds.
- Print that Manual Inspection Required (MIR) is required when testing `CFE_TIME_Print` with a custom epoch.

**Testing performed**
- Manually ran unit tests for TIME: $ make -C build/native/default_cpu1/time test
- Verified coverage on files with $ gcov cfe_time_api.c.gcno and $ gcov cfe_time_api.c.gcno
- Verified correct output when using default epoch time:
    `[ PASS] 06.001 time_UT.c:847 - String: '1980-001-00:00:00.00000' == '1980-001-00:00:00.00000'`
- Verified correct output when using custom epoch time:
    `[  MIR] 06.001 time_UT.c:851 - (MIR) Confirm adding seconds = 0, subseconds = 0 to configured EPOCH results in time 1980-001-00:00:09.00000`


**Expected behavior changes**

Time unit tests will now pass, even when project is using a custom epoch time.

**System(s) tested on**
 - Ubuntu 18.04 VM


**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza / NASA GSFC

",CCB:Approved,https://github.com/nasa/cFE/pull/1711
Renumber requirements based on category,"**Is your feature request related to a problem? Please describe.**
Requirements have evolved such that the numbering is no longer consistent.  Makes it harder to quickly check implementation linkage to at least the correct category (CFE_ES_WriteToSysLog links to cES1014 which is typically the command/message group)

Examples:
cES1014 and associated is all about the system log, but in what is typically the command section
cES1017 is the exception reset log
cES1022 is for performance analyzer API
cES1600 is FS, but is under ES (should be all under API's and/or functional)
... and so on

**Describe the solution you'd like**
X0XX - Commands/Messages and behavior (upon receipt of a command/message and X0XX.X for additional behavior) 
X3XX - API's and behavior (upon receipt of a request)
X5XX - Reset behavior
X7XX - Functional/performance behavior

FS should be split out from ES (16XX)

**Describe alternatives you've considered**
None, although renumbering should always use NEW numbers to avoid confusion and helpful to have a comment with the old number (or other way to identify in a search).

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, requirements",https://github.com/nasa/cFE/issues/1710
Remove application/child task registration API requirements,"**Is your feature request related to a problem? Please describe.**
APIs were removed in #1250, registration handled by ES and no longer requires API.

cES1300 and 

**Describe the solution you'd like**
Remove associated requirements, cES1300 - ES: Register Application and cES1313 - ES: Register Child Task

**Describe alternatives you've considered**
None

**Additional context**
#1250, #1215

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, requirements",https://github.com/nasa/cFE/issues/1709
Implicit padding in `CFE_TBL_HousekeepingTlm_Payload_t`,"**Is your feature request related to a problem? Please describe.**
Implicit padding, as well as the issues detailed in #664 (configurable sized elements early in the packet) in `CFE_TBL_HousekeepingTlm_Payload_t`.  There's 2 bytes being added after `ByteAlignPad1`.
https://github.com/nasa/cFE/blob/33a4f19ce6dc2c132823b3c8c487a59d5b4b81a8/modules/tbl/fsw/inc/cfe_tbl_msg.h#L727-L784

Noticed when debugging memory handle info reporting commands in ES.  Discovered the table pool handle was being interpreted incorrectly in cFS-GroundSystem due to the implicit padding.

**Describe the solution you'd like**
Likely addressed as part of the transition to the cmd/tlm structures being generated/delivered from a more complete data description.

**Describe alternatives you've considered**
Could quick fix.

**Additional context**
#664

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1708
"Fix #1690, Tests for time conversion api","**Describe the contribution**
- Fixes #1690 (New unit-tests for the Time Conversion API like described in this issue)

**Expected behavior changes**
 - No impact on behavior 

**Additional context**
Hi, I'm new to this repository and tried my hand at a ""good first issue"". I would be very grateful if someone who knows about this repo can have a quick look and tell me if my first commit for this issue works like this. That's why the unit test is commented so much.
Thanks already :)

**Contributor Info**
Paul Oberosler, Individual
","CCB:Approved, community",https://github.com/nasa/cFE/pull/1707
"Fix #1705, correct return code mismatches","**Describe the contribution**
Make sure functions documented as CFE status check for CFE_SUCCESS, and functions documented as OSAL status check for OS_SUCCESS.

Fixes #1705

**Testing performed**
Build CFE, and run all tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Additional context**
In practice all these symbols had value of 0, so this is no change, but its just using the correct success symbol per documented function return.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1706
Correct return code mismatches in CFE,"**Is your feature request related to a problem? Please describe.**
In several places across CFE, a function is documented as returning a CFE status (e.g. CFE_SUCCESS) but checked against either OS_SUCCESS or CFE_PSP_SUCCESS, or vice versa.

**Describe the solution you'd like**
Functions documented as returning CFE status should check for `CFE_SUCCESS`, where functions documented as returning an OSAL status should check for `OS_SUCCESS`, and functions returning a PSP status should check for `CFE_PSP_SUCCESS`.

**Additional context**
Similar to #1698, but found in more places.  Since the definition of all these symbols is 0, this is no change in practice, but should be fixed for correctness sake.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1705
"Fix #1703, update docs for CFE_FS_BackgroundFileDumpRequest","**Describe the contribution**
Update notes to better clarify that the meta object must persist for the duration of the dump operation, which occurs in another task, so it must not be on the stack.

Fixes #1703

**Testing performed**
Build and run all tests

**Expected behavior changes**
None - documentation only

**System(s) tested on**
Ubuntu

**Additional context**
Noted in PR #1650 which allocated meta object on stack during test (producing weird/unpredictable errors)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1704
Correct notes on CFE_FS_BackgroundFileDumpRequest,"**Describe the bug**
The notes for this API say ""not on heap"" when it really should say ""not on stack""

**To Reproduce**
If buffer is allocated on the stack and object goes out of scope before background job finishes, random unpredictable behavior occurs, as in PR #1673.

**Expected behavior**
Correct comment.

**System observed on:**
CI

**Additional context**
Fundamental requirement is that object must persist for the time the background job runs.  So stack is likely a problem, heap is OK as long as it isn't freed before task is done.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",docs,https://github.com/nasa/cFE/issues/1703
Re-add CFE_SB_DeletePipe requirement,"**Is your feature request related to a problem? Please describe.**
The requirement for the `CFE_SB_DeletePipe` API, cSB4302 was mistakenly deleted in #789.

**Describe the solution you'd like**
Re-add.

**Describe alternatives you've considered**
None

**Additional context**
Got mistakenly cancelled in JIRA, un-cancelled.

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, requirements",https://github.com/nasa/cFE/issues/1702
cFE Integration candidate: 2021-07-27,"## Context 

Part of <https://github.com/nasa/cFS/pull/313>

### Testing

cFE Checks <https://github.com/nasa/cFE/pull/1701/checks>
cFS Checks <https://github.com/nasa/cFS/pull/313/checks>

### Authors

@skliper 
@jphickey 
@zanzaben 
@pepepr08 
@nmullane 


## Description
### PR #1699 

Fix #1698, correct return code check

### PR #1700 

Fix #1599, documentation for FS APIs that return OSAL codes 

### PR #1695 

Fix #469, Adding coverage tests for cfe_es_apps.c 

### PR #1673

Fix #1650, Add File Utility Functional Tests. 

### PR #1711 

Fix #1659, Add custom epoch support to TIME UT 


### PR #1720 

Fix #1702 - Re-add CFE_SB_DeletePipe
Fix #1709 - Remove application/child ES registration
Fix #1713 - Remove message initialization clear/no-clear option
Fix #1717 - Add new API requirements to match development changes
Fix #1714 - Remove get message checksum

### PR #1721 

Fix #1718, Add null check to CFE_ES_TaskID_ToIndex.

### PR #1719  
Fix #1396, scrub command documentation

### PR #1715 

Fix #1689, Add time arithmetic functional tests

### PR #1704 

Fix #1703, update docs for CFE_FS_BackgroundFileDumpRequest 

### PR #1706 

Fix #1705, correct return code mismatches 
",,https://github.com/nasa/cFE/pull/1701
"Fix #1599, documentation for FS APIs that return OSAL codes","**Describe the contribution**
Some FS API calls will pass through failure/status codes directly from OSAL without remapping to CFE Status code values.

Note this behavior in the documentation and that it will likely change in a future version of CFE.

Fixes #1599 

**Testing performed**
Build and sanity check CFE, build docs

**Expected behavior changes**
None (docs only)

**System(s) tested on**
Ubuntu

**Additional context**
This just documents the pass through - Behavior should be fixed in #1676 to return a proper CFE status.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1700
"Fix #1698, correct return code check","**Describe the contribution**
The return code of CFE_ES_StartAppTask is a CFE status code, so it should be compared to CFE_SUCCESS, not OS_SUCCESS.

Fixes #1698

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Additional context**
No change to actual behavior here, this is just for type/symbol correctness

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1699
Incorrect ReturnCode check in CFE_ES_CreateObjects,"**Is your feature request related to a problem? Please describe.**
The `CFE_ES_StartAppTask` returns a CFE status.  However, when checking the the return code, it is compared to `OS_SUCCESS`, rather than `CFE_SUCCESS`.

https://github.com/nasa/cFE/blob/2afdbc16e360530a9b4bbe4e0dcc814f675c1acb/modules/es/fsw/src/cfe_es_start.c#L786-L799

**Describe the solution you'd like**
Check against `CFE_SUCCESS`

**Describe alternatives you've considered**
N/A

**Additional context**
This is just a minor/pedantic correctness issue, since in practice OS_SUCCESS and CFE_SUCCESS are the same value (0).  However when scrubbing for type correctness this shows up.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1698
Update doxygen groupnames to match cFS naming conventions,"## Description

The doxygen ""groupnames"" do not have any separators and are difficult to read, see `CFEAPIESEntryExit` in code snippet below.

https://github.com/nasa/cFE/blob/2afdbc16e360530a9b4bbe4e0dcc814f675c1acb/docs/src/cfe_api.dox#L5-L10

See short discussion in https://github.com/nasa/cFE/pull/1670#discussion_r672549310

## Proposed Solution

Have the group name match the updated directory structure after the modules update, for example 
- `CFE_CORE_API_ES_EntryExit, or
- `CFE_ES_EntryExit

## Alternatives

Leave names as is but introduce underscores `CFE_API_ES_EntryExit`. ",docs,https://github.com/nasa/cFE/issues/1697
"ES missing coverage in cfe_es_apps.c, CFE_ES_CleanupTaskResources","**Is your feature request related to a problem? Please describe.**
`CFE_ES_CleanupTaskResources` function contains a hard to reach line (1723 below) that remains untested, preventing us from reaching 100% coverage in file.

```
        -: 1709:    /*
        -: 1710:    ** Delete the task itself
        -: 1711:    **
        -: 1712:    ** Note, if the task self exited, then the ID becomes invalid.
        -: 1713:    ** In this case the OS_ERR_INVALID_ID status is returned, but
        -: 1714:    ** that is OK, there is nothing else needed to do.
        -: 1715:    */
       74: 1716:    Result = OS_TaskDelete(OsalId);
       74: 1717:    if (Result == OS_SUCCESS || Result == OS_ERR_INVALID_ID)
        -: 1718:    {
       66: 1719:        Result = CleanState.OverallStatus;
      132: 1720:        if (Result == CFE_SUCCESS && CleanState.FoundObjects > 0)
        -: 1721:        {
        -: 1722:            /* Objects leftover after cleanup -- resource leak */
    #####: 1723:            Result = CFE_ES_APP_CLEANUP_ERR;
        -: 1724:        }
        -: 1725:    }
```

**Describe the solution you'd like**
Add coverage for line to complete 100% coverage in file.

**Additional context**
It's really difficult to recreate a case were CleanState.FoundObjects is greater than 0 since it always gets set to 0 in while(1)

https://github.com/nasa/cFE/blob/main/modules/es/fsw/src/cfe_es_apps.c#L1667-L1732

**Requester Info**
Jose F. Martinez Pedraza / NASA GSFC
","enhancement, coverage",https://github.com/nasa/cFE/issues/1696
"Fix #469, Adding coverage tests for cfe_es_apps.c","**Describe the contribution**
Fixes #469 

Added tests to complete coverage on the following functions:
* CFE_ES_RunAppTableScan
* CFE_ES_ParseFileEntry
* CFE_ES_LoadModule
* CFE_ES_CleanUpApp
* CFE_ES_CleanupObjectCallback

**Testing performed**
Manually ran unit tests for ES: $ make -C build/native/default_cpu1/es test
Verified coverage on files with `$ gcov cfe_es_apps.c.gcno` and `$ gcov cfe_es_apps.c.gcno`

**Expected behavior changes**
Increased coverage percentage to greater than 99% in cfe_es_apps.c.

**System(s) tested on**
 Ubuntu 18.04 VM

**Additional context**
There is still 1 untested line in file.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza / NASA GSFC
",CCB:Approved,https://github.com/nasa/cFE/pull/1695
"Fix #1693, correct function name in UT_BSP_Unlock","**Describe the contribution**
Corrects the log message in UT_BSP_Unlock (in cfe_assert module) to match the OSAL function called (OS_MutSemGive).

Fixes #1693 

**Testing performed**
Build and run tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Additional context**
Just for correctness, this log never happens in normal operation.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/cFE/pull/1694
Correct syslog message in UT_BSP_Unlock,"**Describe the bug**
The log message in `UT_BSP_Unlock` has the wrong function name (OS_MutSemTake).  Appears to be a copy/paste error from UT_BSP_Lock above.

**To Reproduce**
N/A (does not fail in normal operation)

**Expected behavior**
Log message should have `OS_MutSemGive`, not `OS_MutSemTake`

**Code snips**
https://github.com/nasa/cFE/blob/2afdbc16e360530a9b4bbe4e0dcc814f675c1acb/modules/cfe_assert/src/cfe_assert_io.c#L59

**System observed on:**
Ubuntu

**Additional context**
Mismatch noted as part of review for #1599 

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1693
Add functional tests for cFE Miscellaneous Time APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Miscellaneous Time APIs
    CFE_TIME_Print - Print a time value as a string.
    CFE_TIME_Local1HzISR - This function is called via a timer callback set up at initialization of the TIME service.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC
",unit-test,https://github.com/nasa/cFE/issues/1692
Add functional tests for cFE External Time Source APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE External Time Source APIs
    CFE_TIME_ExternalTone - Provides the 1 Hz signal from an external source.
    CFE_TIME_ExternalMET - Provides the Mission Elapsed Time from an external source.
    CFE_TIME_ExternalGPS - Provide the time from an external source that has data common to GPS receivers.
    CFE_TIME_ExternalTime - Provide the time from an external source that measures time relative to a known epoch.
    CFE_TIME_RegisterSynchCallback - Registers a callback function that is called whenever time synchronization occurs.
    CFE_TIME_UnregisterSynchCallback - Unregisters a callback function that is called whenever time synchronization occurs.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1691
Add functional tests for cFE Time Conversion APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Time Conversion APIs
    CFE_TIME_MET2SCTime - Convert specified MET into Spacecraft Time.
    CFE_TIME_Sub2MicroSecs - Converts a sub-seconds count to an equivalent number of microseconds.
    CFE_TIME_Micro2SubSecs - Converts a number of microseconds to an equivalent sub-seconds count.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","good first issue, unit-test",https://github.com/nasa/cFE/issues/1690
Add functional tests for cFE Time Arithmetic APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Time Arithmetic APIs
    CFE_TIME_Add - Adds two time values.
    CFE_TIME_Subtract - Subtracts two time values.
    CFE_TIME_Compare - Compares two time values.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","good first issue, unit-test",https://github.com/nasa/cFE/issues/1689
Add functional tests for cFE Get Table Information APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Get Table Information APIs
    CFE_TBL_GetStatus - Obtain current status of pending actions for a table.
    CFE_TBL_GetInfo - Obtain characteristics/information of/about a specified table.
    CFE_TBL_NotifyByMessage - Instruct cFE Table Services to notify Application via message when table requires management.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC
",unit-test,https://github.com/nasa/cFE/issues/1688
Add functional tests for cFE Access Table Content APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Access Table Content APIs
    CFE_TBL_GetAddress - Obtain the current address of the contents of the specified table.
    CFE_TBL_GetAddresses - Obtain the current addresses of an array of specified tables.
    CFE_TBL_ReleaseAddress - Release previously obtained pointer to the contents of the specified table.
    CFE_TBL_ReleaseAddresses - Release the addresses of an array of specified tables.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1687
Add functional tests for cFE Manage Table Content APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Manage Table Content APIs
    CFE_TBL_Load - Load a specified table with data from specified source.
    CFE_TBL_Update - Update contents of a specified table, if an update is pending.
    CFE_TBL_Validate - Perform steps to validate the contents of a table image.
    CFE_TBL_Manage - Perform standard operations to maintain a table.
    CFE_TBL_DumpToBuffer - Copies the contents of a Dump Only Table to a shared buffer.
    CFE_TBL_Modified - Notify cFE Table Services that table contents have been modified by the Application.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1686
Add functional tests for cFE Table Registration APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Table Registration APIs
    CFE_TBL_Register - Register a table with cFE to obtain Table Management Services.
    CFE_TBL_Share - Obtain handle of table registered by another application.
    CFE_TBL_Unregister - Unregister a table.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1685
Add functional tests for cFE Message ID APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests forcFE Message ID APIs
    CFE_SB_IsValidMsgId - Identifies whether a given CFE_SB_MsgId_t is valid.
    CFE_SB_MsgId_Equal - Identifies whether two CFE_SB_MsgId_t values are equal.
    CFE_SB_MsgIdToValue - Converts a CFE_SB_MsgId_t to a normal integer.
    CFE_SB_ValueToMsgId - Converts a normal integer into a CFE_SB_MsgId_t.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","unit-test, functional",https://github.com/nasa/cFE/issues/1684
Add functional tests for cFE Setting/Getting Message Characteristics APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Setting/Getting Message Characteristics APIs
    CFE_SB_SetUserDataLength - Sets the length of user data in a software bus message.
    CFE_SB_TimeStampMsg - Sets the time field in a software bus message with the current spacecraft time.
    CFE_SB_MessageStringSet - Copies a string into a software bus message.
    CFE_SB_GetUserData - Get a pointer to the user data portion of a software bus message.
    CFE_SB_GetUserDataLength - Gets the length of user data in a software bus message.
    CFE_SB_MessageStringGet - Copies a string out of a software bus message.


**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","unit-test, functional",https://github.com/nasa/cFE/issues/1683
Add functional tests for cFE Zero Copy APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Zero Copy APIs  
    CFE_SB_AllocateMessageBuffer - Get a buffer pointer to use for ""zero copy"" SB sends.
    CFE_SB_ReleaseMessageBuffer - Release an unused ""zero copy"" buffer pointer.
    CFE_SB_TransmitBuffer - Transmit a buffer.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1682
Add functional tests for cFE Send/Receive Message APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Send/Receive Message APIs   
    CFE_SB_TransmitMsg - Transmit a message.
    CFE_SB_ReceiveBuffer - Receive a message from a software bus pipe.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1681
Add functional tests for cFE Message Subscription Control APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Message Subscription Control APIs
    CFE_SB_Subscribe - Subscribe to a message on the software bus with default parameters.
    CFE_SB_SubscribeEx - Subscribe to a message on the software bus.
    CFE_SB_SubscribeLocal - Subscribe to a message while keeping the request local to a cpu.
    CFE_SB_Unsubscribe - Remove a subscription to a message on the software bus.
    CFE_SB_UnsubscribeLocal - Remove a subscription to a message on the software bus on the current CPU.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1680
Add functional tests for cFE Resource Misc APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Resource Misc APIs     
    CFE_ResourceId_ToInteger - Convert a resource ID to an integer.
    CFE_ResourceId_FromInteger - Convert an integer to a resource ID.
    CFE_ResourceId_Equal - Compare two Resource ID values for equality.
    CFE_ResourceId_IsDefined - Check if a resource ID value is defined.
    CFE_ResourceId_GetBase - Get the Base value (type/category) from a resource ID value.
    CFE_ResourceId_GetSerial - Get the Serial Number (sequential ID) from a resource ID value.
    CFE_ResourceId_FindNext - Locate the next resource ID which does not map to an in-use table entry.
    CFE_ResourceId_ToIndex - Internal routine to aid in converting an ES resource ID to an array index.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1679
Add functional tests for cFE Message Id APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Message Id APIs
    CFE_MSG_GetMsgId - Gets the message id from a message.
    CFE_MSG_SetMsgId - Sets the message id bits in a message.
    CFE_MSG_GetTypeFromMsgId - Gets message type using message ID.
	
**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","good first issue, unit-test",https://github.com/nasa/cFE/issues/1678
Add functional tests for cFE Message header APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Message header APIs
    CFE_MSG_Init - Initialize a message.
    CFE_MSG_GetSize - Gets the total size of a message.
    CFE_MSG_SetSize - Sets the total size of a message.
    CFE_MSG_GetType - Gets the message type.
    CFE_MSG_SetType - Sets the message type.
    CFE_MSG_GetHeaderVersion - Gets the message header version.
    CFE_MSG_SetHeaderVersion - Sets the message header version.
    CFE_MSG_GetHasSecondaryHeader - Gets the message secondary header boolean.
    CFE_MSG_SetHasSecondaryHeader - Sets the message secondary header boolean.
    CFE_MSG_GetApId - Gets the message application ID.
    CFE_MSG_SetApId - Sets the message application ID.
    CFE_MSG_GetSegmentationFlag - Gets the message segmentation flag.
    CFE_MSG_SetSegmentationFlag - Sets the message segmentation flag.
    CFE_MSG_GetSequenceCount - Gets the message sequence count.
    CFE_MSG_SetSequenceCount - Sets the message sequence count.
    CFE_MSG_GetNextSequenceCount - Gets the next sequence count value (rolls over if appropriate)
    CFE_MSG_GetEDSVersion - Gets the message EDS version.
    CFE_MSG_SetEDSVersion - Sets the message EDS version.
    CFE_MSG_GetEndian - Gets the message endian.
    CFE_MSG_SetEndian - Sets the message endian.
    CFE_MSG_GetPlaybackFlag - Gets the message playback flag.
    CFE_MSG_SetPlaybackFlag - Sets the message playback flag.
    CFE_MSG_GetSubsystem - Gets the message subsystem.
    CFE_MSG_SetSubsystem - Sets the message subsystem.
    CFE_MSG_GetSystem - Gets the message system.
    CFE_MSG_SetSystem - Sets the message system.
    CFE_MSG_GenerateChecksum - Calculates and sets the checksum of a message.
    CFE_MSG_ValidateChecksum - Validates the checksum of a message.
    CFE_MSG_SetFcnCode - Sets the function code field in a message.
    CFE_MSG_GetFcnCode - Gets the function code field from a message.
    CFE_MSG_GetMsgTime - Gets the time field from a message.
    CFE_MSG_SetMsgTime - Sets the time field in a message.


**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","good first issue, unit-test",https://github.com/nasa/cFE/issues/1677
Improve separation/distinction between OSAL and CFE error codes,"**Is your feature request related to a problem? Please describe.**
Application code should not conflate/intermix these two sets of error/status code values.

OSAL and CFE differ in how their error codes are defined.  For OSAL, in `osapi-errors.h`, the codes are in signed decimal format (e.g. `-10`).  For CFE, in `cfe_error.h`, the codes are in hexadecimal format (e.g. `0xc2000003`) with bits having certain meanings.

**Describe the solution you'd like**
- When storing an error code in a local stack variable, applications should create a _separate_ variable for storing an OSAL status code from a CFE status code.
- The correct typedef should be used, e.g. `CFE_Status_t` for CFE codes, and (ideally) `OS_Status_t` for OSAL codes (which does not exist yet, but see issue nasa/osal#1108).
- When logging/printing or sending events, use the correct conversion specifier such that the format is consistent with how it is defined.  This means `%d` for OSAL codes, and `%08x` for CFE codes.  (In many cases, OSAL error codes are printed using the `%08x` conversion currently).

**Additional context**
For Caelum, the approach will be to document the functions/cases where OSAL and CFE status codes are conflated (see issue #1599) but ideally for better code modularity, the two sets of status codes should not be intermixed at all.  While issue #1599 will just document where this is a problem, this issue should be to fix those problem areas and keep things isolated.

Also note that PSP also has a few of its own status codes, which also should be kept separate.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1676
Implement separate log/event for CFE FS filename validation failure,"**Is your feature request related to a problem? Please describe.**
Filename validation (from commands, scripts, etc) now happens at both CFE FS level (via `CFE_FS_ParseInputFileName`) and inside OSAL (via `OS_TranslatePath` or `OS_OpenCreate` etc).

However, in most code paths where this is done, the results are currently combined.  That is - failure of either function is reported via the same event/log message.  Doing this ultimately requires putting the error code into the same ""int32"" value (thereby mixing OSAL and CFE error codes).

**Describe the solution you'd like**
Should have a separate event/log message for failures at the CFE FS level vs. failures at the OSAL level.  The log message should clearly indicate whether the failure came from `CFE_FS_ParseInputFileName` or `OS_OpenCreate` (or whatever other function was called).

**Additional context**
Note that the preferred format for printing/logging error codes is also different - to match the values in the osapi-error.h file and cfe_error.h files, OSAL codes should be printed as decimal, whereas CFE codes should be hex.  When combining error codes into a single log, it requires choosing one format, which will be wrong for half of them (it is still able to be decoded at least, because error numbers do not overlap, but not ideal).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1675
"Fix #1667, CFE_SB_MsgHdrSize returns size_t ","**Describe the contribution**
Fixes Issue #1667 by changing the return type in CFE_SB_MsgHdrSize and CFE_SB_GetUserDataLength

**Testing performed**
Build and ran unit tests

**Expected behavior changes**
CFE_SB_MsgHdrSize and CFE_SB_GetUserDataLength now return 0 when *MsgPtr is NULL

**System(s) tested on**
 Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Contributor Info**
Oliver Hamburger GSFC
",CCB:Approved,https://github.com/nasa/cFE/pull/1674
"Fix #1650, Add File Utility Functional Tests.","**Describe the contribution**
Fixes #1650  
Add Functional tests for File Utility Functional Tests.

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1673
Incomplete OSAL error conversion in CFE_ES_GetTaskName,"**Describe the bug**
The CFE_ES_GetTaskName function uses an OSAL API to perform its work.  However, its error handling path is not complete, it assumes any underlying OSAL failure is due to the resource ID not being valid:

https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/es/fsw/src/cfe_es_api.c#L988-L993

Although a bad ID is a _likely_ cause for failure, it is not the only possible cause of failure - for example, if the name is too large to fit in the buffer, OSAL may return `OS_ERR_NAME_TOO_LONG`.

**To Reproduce**
Call `CFE_ES_GetTaskName` with a valid task ID and string buffer size of 1 (such that the task name is too long to fit in the buffer).  The function will return `CFE_ES_ERR_RESOURCEID_NOT_VALID` status, even though the real error was that the buffer was too short.

**Expected behavior**
Should do better error conversion - only `OS_ERR_INVALID_ID` should translate to `CFE_ES_ERR_RESOURCEID_NOT_VALID`, and other potential/foreseeable OSAL errors converted to the nearest CFE ES error, or the generic catch-all `CFE_STATUS_EXTERNAL_RESOURCE_FAIL` can be returned for other unexpected/unhandled errors.

**Additional context**
See #1599, for Caelum will document the existing behavior, but a future release should correct this.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, draco-rc1",https://github.com/nasa/cFE/issues/1672
"Fix #1606, update documentation for CFE_ES_GetPoolBufInfo","**Describe the contribution**
Corrects the return type documentation, on success this function returns the size of the buffer, it does not return `CFE_SUCCESS`.

Additionally, this updates the general description of the pool implementation to reflect the variances in platform architectures
(i.e. the buffer descriptor/overhead may be 12 bytes on a CPU with 32 bit size_t, but will be greater on a CPU with a 64 bit
size_t).

Fixes #1606 

**Testing performed**
Build documentation, check no new warnings (no code change)

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/1671
"Fix #1646, Update API doxygen list","**Describe the contribution**
Fix #1646 - added missing APIs to doxygen list

**Testing performed**
Make usersguide, confirmed list

**Expected behavior changes**
None

**System(s) tested on**
NA

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1670
SB unreachable code in CFE_SB_AppInit,"**Describe the bug**
The following conditional is never reachable with the default config:

https://github.com/nasa/cFE/blob/2afdbc16e360530a9b4bbe4e0dcc814f675c1acb/modules/sb/fsw/src/cfe_sb_task.c#L192-L195

To reach this would require that the code is built with a config where `CFE_PLATFORM_EVS_MAX_EVENT_FILTERS` (from platform config, defaults to 8) is less than `CFE_SB_MAX_CFG_FILE_EVENTS_TO_FILTER` (hardcoded to 8).

**To Reproduce**
Build code with default config and run coverage report.

**Expected behavior**
Code could be cleaned up to not have unreachable lines in any config, or at least convert the check such that it can be evaluated at compile time (if `CFE_PLATFORM_EVS_MAX_EVENT_FILTERS` >= `CFE_SB_MAX_CFG_FILE_EVENTS_TO_FILTER` then the code becomes unreachable).

**System observed on:**
Ubuntu

**Additional context**
Somewhat related to #1468, if this is fixed hopefully it would get both of these

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","duplicate, enhancement, coverage",https://github.com/nasa/cFE/issues/1669
"Fix #471, improve SB coverage test","**Describe the contribution**
Add test cases to exercise all functions, lines, and branches to the extent reasonably possible.  Improves the coverage stats
significantly:

  functions 98.9% -> 100%
  lines 96.4% -> 99.8%
  branches 87.1% -> 94.9%

Fixes #471

**Testing performed**
Build and run coverage test, check LCOV reports

**Expected behavior changes**
More complete branch/line coverage

**System(s) tested on**
Ubuntu

**Additional context**
Remaining uncovered lines/branches are not possible to be reached due to the way the code is structured, or because it would require an alternate implementation of SBR (note that SB+SBR are currently tested as a single unit, even though they are technically separate modules now).  For example, the ""direct"" SBR implementation cannot have collisions, hence the collision handling in SB cannot be reached.  Making stubs for SBR may allow this to be tested.  For example this conditional is not reachable with direct mode: https://github.com/nasa/cFE/blob/2afdbc16e360530a9b4bbe4e0dcc814f675c1acb/modules/sb/fsw/src/cfe_sb_api.c#L1125-L1130

Other lines in CFE_SB_AppInit are also not reachable (will report in separate issue ticket).

Additionally, many internal `switch` statements can only be reached with values for which there is a corresponding `case` - that is, there is no default case nor is it possible to reach the switch statement with any value other than the listed values.  However gcov still reports this as an un-executed branch even though all possible cases are indeed covered.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/cFE/pull/1668
CFE_SB_MsgHdrSize returns size_t but still attempts to return CFE status code,"**Describe the bug**
The `CFE_SB_MsgHdrSize()` function returns a `size_t` value.  Therefore, there is no provision/possibility for an error to be returned.

However, if passed a NULL argument, this still attempts to return `CFE_SB_BAD_ARGUMENT` which will be implicitly converted to a `size_t` value - which is platform-defined.  Notably, since `size_t` is unsigned, the result is always positive (success range) and will not be correctly interpreted by the caller.

**To Reproduce**
Call `CFE_SB_MsgHdrSize()` with a NULL `MsgPtr` argument.

**Expected behavior**
This function should probably return 0 instead of `CFE_SB_BAD_ARGUMENT` in this case.
Cannot return CFE status codes from a function that does not return `CFE_Status_t` (or `int32`).

**Code snips**
https://github.com/nasa/cFE/blob/2afdbc16e360530a9b4bbe4e0dcc814f675c1acb/modules/sb/fsw/src/cfe_sb_util.c#L54-L57

**System observed on:**
Ubuntu

**Additional context**
This line was also not being covered by the coverage test (#471) and the return type mismatch prevents this from being covered properly.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1667
"Uncovered default switch ""branch"" (vs unreachable default switch code) in gcov coverage report","**Is your feature request related to a problem? Please describe.**
gcov reports missing branch coverage for the default case of a switch statement.  Numerous examples in cFE where there is no default case and/or it's impossible to reach (all cases are handled explicitly).

**Describe the solution you'd like**
At minimum document this behavior in the coverage report.  Would be nice if there was an option or alternative to get gcov to not report impossible cases as uncovered, or post-process the report to remove.

**Describe alternatives you've considered**
None

**Additional context**
cfe_sb_api.c - 10 uncovered branches
cfe_sb_task.c - 2 uncovered branches

**Requester Info**
Jacob Hageman - NASA/GSFC
",coverage,https://github.com/nasa/cFE/issues/1666
cFE Integration candidate: 2021-07-20,"## Context

Part of <https://github.com/nasa/cfs/pull/311>

### Tests

cFE <https://github.com/nasa/cFE/pull/1665/checks>
Bundle <https://github.com/nasa/cfs/pull/311/checks>

### Authors

@skliper
@jphickey
@zanzaben
@oliverhamburger


## Description

### PR  #1660 

Fix #1635, Change CI to use Test Log.

### PR #1664

Fix #1662, remove default .dat extension 

### PR #1670

Fix #1646, Update API doxygen list

### PR #1671

Fix #1606, update documentation for CFE_ES_GetPoolBufInfo

### PR #1674

Fix #1667, CFE_SB_MsgHdrSize returns size_t 

### PR #1668 

Fix #471, improve SB coverage test 

### PR #1694  

Fix #1693, correct function name in UT_BSP_Unlock 
",,https://github.com/nasa/cFE/pull/1665
"Fix #1662, remove default .dat extension","**Describe the contribution**
Do not enforce/add a default extension to binary data files

Fixes #1662

**Testing performed**
Build and run all tests
Send SB ""dump route table"" command using filename without extension and confirm output file has no extension.

**Expected behavior changes**
No longer adds a "".dat"" extension if omitted from command

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1664
"Fix #1546, use cfe time clock state enum t in cmd/tlm and handling","**Describe the contribution**
Fixes issue #1546 by replacing uint16 with CFE_TIME_ClockState_Enum_t

**Testing performed**
Steps taken to test the contribution:
Built and ran unit tests

**Expected behavior changes**
no impact to behavior

**System(s) tested on**
 Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Oliver Hamburger GSFC
","CCB:Approved, draco-rc1",https://github.com/nasa/cFE/pull/1663
Revert `.dat` default file extension addition,"**Is your feature request related to a problem? Please describe.**
Added default extension is causing issues w/ 20 character limit and confusion among users/testers

**Describe the solution you'd like**
For generic files (log/data/etc) where there isn't a required extension just leave the file name as requested by the user.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1662
cFE Integration candidate: 2021-07-13,"## Context

Part of <https://github.com/nasa/cFS/pull/297>

## Testing

cFE Checks <https://github.com/nasa/cFE/pull/1661/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/297/checks>

## Authors

@zanzaben 
@skliper 

## Description

### PR #1656 

Fix #1655, Size unit test table load buffer based on config

### PR #1657 

Fix #1651, Add SB Pipe Management Functional Tests.
Fix #1651, remove inconsistent test.

",,https://github.com/nasa/cFE/pull/1661
"Fix #1635, Change CI to use Test Log.","**Describe the contribution**
Fixes #1635  
Change CI to use the test log file instead of tee. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1660
Hard coded time print format checks fail when non-default epoch is used,"**Is your feature request related to a problem? Please describe.**
Epoch is configurable:
https://github.com/nasa/cFE/blob/063b4d8a9c4a7e822af5f3e4017599159b985bb0/cmake/sample_defs/sample_mission_cfg.h#L186-L190

Time unit tests hard-code checks that are impacted by epoch configuration, and fail when it's changed (example):
https://github.com/nasa/cFE/blob/063b4d8a9c4a7e822af5f3e4017599159b985bb0/modules/time/ut-coverage/time_UT.c#L398-L424

**Describe the solution you'd like**
Update tests to work with configured epoch.  Either adjust for configured epoch or test the actual values (not print time).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, @excaliburtb
",unit-test,https://github.com/nasa/cFE/issues/1659
cFE Application developer's guide hardware servicing app section out of date,"**Is your feature request related to a problem? Please describe.**
cFE Application Developers Guide.md has references to generic ISR APIs and other functionality that is not supported.

**Describe the solution you'd like**
Update https://github.com/nasa/cFE/blob/main/docs/cFE%20Application%20Developers%20Guide.md#412-hardware-servicing-application, section 4.1.2 ""Hardware Servicing"" Application

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFS#296

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/cFE/issues/1658
"Fix #1651, Add SB Pipe Management Functional Tests.","**Describe the contribution**
Fixes #1651 
Add new functional tests for SB pipe management. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1657
"Fix #1655, Size unit test table load buffer based on config","**Describe the contribution**
Fix #1655 - Supports larger table configurations (in passing unit tests) by sizing the unit test buffer used for table loads based on the configuration values.

**Testing performed**
Increased CFE_PLATFORM_TBL_MAX_SNGL_TABLE_SIZE to where when multiplied by CFE_PLATFORM_TBL_MAX_SIMULTANEOUS_LOADS it would break the 128 * 1024 limit hard coded in ut_support.c.  Built and ran unit tests, confirmed they now pass.

**Expected behavior changes**
Unit tests will pass for a configuration supporting larger tables

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit (plus a modified config)

**Additional context**
Still not unlimited since table register uses the default buffer size, but an improvement.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1656
Support larger tables in the table unit test,"**Is your feature request related to a problem? Please describe.**
The first limitation hit is TBL services needs `CFE_PLATFORM_TBL_MAX_SIMULTANEOUS_LOADS * CFE_PLATFORM_TBL_MAX_SNGL_TABLE_SIZE` from the memory pool for setting up the load buffers.  Easy to exhaust the buffer set up in ut_support.c:
https://github.com/nasa/cFE/blob/9d4fcaed503f243683d144b30a003583d8f4f217/modules/core_private/ut-stubs/src/ut_support.c#L50-L58

**Describe the solution you'd like**
Size the buffer used in unit test based on the configured sizes.

**Describe alternatives you've considered**
Could remove the buffer set up in ut_support.c for `CFE_ES_GetPoolBuf` and size it everywhere, or could override the handler with something simpler that supports the specific test.

**Additional context**
Causing stakeholder unit test failures.

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/cFE/issues/1655
cFE Integration candidate: 2021-06-29,"## Context

Part of <https://github.com/nasa/cFS/pull/287>

## Tests 

cFE Checks <https://github.com/nasa/cFE/pull/1654/checks> 
Bundle Checks <https://github.com/nasa/cFS/pull/287/checks>

## Authors

@skliper 
@zanzaben 
@pepepr08 
@himanshu007-creator

## Description

### PR #1444
Fix #1184, Change index type to resolve infinite loop warning 

### PR #1653 
Fix #468, Adding coverage for cfe_es_task.c 

### PR #1638

Fix #1480, Expand FS Header Functional tests. 

### PR #1637
Fix #467, Complete coverage for cfe_es_start.c and cfe_es_syslog.c",community,https://github.com/nasa/cFE/pull/1654
"Fix #468, Adding coverage for cfe_es_task.c","**Describe the contribution**
Fix #468 

Test the following cases:
- CFE_ES_TaskMain() with a CFE_ES_TaskInit() error
- Query tasks command with valid lib ID
- Error when sending Build Info event
- CFE_ES_GenerateVersionEvents() error when sending mission event

**Testing performed**
Manually ran unit tests for ES: $ make -C build/native/default_cpu1/es test
Verified coverage on files with gcov cfe_es_task.c.gcno and gcov cfe_es_task.c.gcno

**Expected behavior changes**
Increased coverage percentage.

**System(s) tested on**
 - Ubuntu 18.04 VM

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza/NASA GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1653
"ES uncovered lines in cfe_es_task.c, CFE_ES_HousekeepingCmd, perf filter and trigger size the same","**Is your feature request related to a problem? Please describe.**
`else` clauses in the following code are not reachable:

https://github.com/nasa/cFE/blob/9d4fcaed503f243683d144b30a003583d8f4f217/modules/es/fsw/src/cfe_es_task.c#L796-L820

Explanation:
`CFE_ES_PERF_TRIGGERMASK_INT_SIZE` same as `CFE_ES_PERF_TRIGGERMASK_EXT_SIZE`
and
`CFE_ES_PERF_FILTERMASK_INT_SIZE` same as `CFE_ES_PERF_FILTERMASK_EXT_SIZE`

They all ultimately use the same macro `CFE_MISSION_ES_PERF_MAX_IDS`.

_Originally posted by @pepepr08 in https://github.com/nasa/cFE/issues/468#issuecomment-867145786_

**Describe the solution you'd like**
We have to determine if we want to remove the dead code, or implement the feature that allows the use of smaller CFE_PLATFORM_ES_PERF_MAX_IDS, as explained by Jake in https://github.com/nasa/cFE/issues/468#issuecomment-869799520

**Additional context**
Can't complete 100% code coverage if file contains dead code.

**Requester Info**
Jose F. Martinez Pedraza/NASA GSFC
",coverage,https://github.com/nasa/cFE/issues/1652
Add functional tests for cFE SB Pipe Management APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE SB Pipe Management APIs
– CFE_SB_CreatePipe - Creates a new software bus pipe.
– CFE_SB_DeletePipe - Delete a software bus pipe.
– CFE_SB_SetPipeOpts - Set options on a pipe.
– CFE_SB_GetPipeOpts - Get options on a pipe.
– CFE_SB_GetPipeName - Get the pipe name for a given id.
– CFE_SB_GetPipeIdByName - Get pipe id by pipe name.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1651
Add functional tests for cFE FS File Utility APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE FS File Utility APIs
– CFE_FS_GetDefaultMountPoint 
– CFE_FS_GetDefaultExtension
– CFE_FS_ParseInputFileNameEx
– CFE_FS_ParseInputFileName
– CFE_FS_ExtractFilenameFromPath
– CFE_FS_BackgroundFileDumpRequest
– CFE_FS_BackgroundFileDumpIsPending

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1650
Add functional tests for cFE EVS Reset Event Filter APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE EVS Reset Event Filter APIs
– CFE_EVS_ResetFilter - Resets the calling application's event filter for a single event ID.
– CFE_EVS_ResetAllFilters - Resets all of the calling application's event filters.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1649
Add functional tests for cFE EVS Send Event APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE EVS Send Event APIs
– CFE_EVS_SendEvent - Generate a software event.
– CFE_EVS_SendEventWithAppID - Generate a software event given the specified Application ID.
– CFE_EVS_SendTimedEvent - Generate a software event with a specific time tag.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1648
Add functional tests for cFE EVS Registration APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE EVS Registration APIs
– CFE_EVS_Register - Register an application for receiving event services.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","unit-test, functional",https://github.com/nasa/cFE/issues/1647
Add missing API's to User guide ,"**Describe the bug**
In section 8 of the user guide, it lists all the APIs, and some are missing from that list.

cFE Resource ID API's
– CFE_ES_AppID_ToIndex
– CFE_ES_LibID_ToIndex
– CFE_ES_TaskID_ToIndex
– CFE_ES_CounterID_ToIndex

cFE FS File Utility APIs
– CFE_FS_GetDefaultMountPoint 
– CFE_FS_GetDefaultExtension
– CFE_FS_ParseInputFileNameEx
– CFE_FS_ParseInputFileName
– CFE_FS_BackgroundFileDumpRequest
– CFE_FS_BackgroundFileDumpIsPending

**Expected behavior**
Should be listed in section 8. 

**Additional context**
the details of the functions are in there correct place later in the guide. 

**Reporter Info**
Full name and company/organization if applicable
",docs,https://github.com/nasa/cFE/issues/1646
Add functional tests for cFE ES Resource ID APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Resource ID APIs
– CFE_ES_AppID_ToIndex
– CFE_ES_LibID_ToIndex
– CFE_ES_TaskID_ToIndex
– CFE_ES_CounterID_ToIndex

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","good first issue, unit-test",https://github.com/nasa/cFE/issues/1645
Finish functional tests for cFE ES Miscellaneous APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
This function got missed by the existing miscellaneous api test
– CFE_ES_ProcessAsyncEvent - Notification that an asynchronous event was detected by the underlying
OS/PSP.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/cFE/issues/1644
Add functional tests for cFE ES Generic Counter APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Generic Counter APIs
– CFE_ES_RegisterGenCounter - Register a generic counter.
– CFE_ES_DeleteGenCounter - Delete a generic counter.
– CFE_ES_IncrementGenCounter - Increments the specified generic counter.
– CFE_ES_SetGenCount - Set the specified generic counter.
– CFE_ES_GetGenCount - Get the specified generic counter count.
– CFE_ES_GetGenCounterIDByName - Get the Id associated with a generic counter name.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","duplicate, unit-test",https://github.com/nasa/cFE/issues/1643
Add functional tests for cFE ES Performance Monitor APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Performance Monitor APIs
– CFE_ES_PerfLogEntry - Entry marker for use with Software Performance Analysis Tool.
– CFE_ES_PerfLogExit - Exit marker for use with Software Performance Analysis Tool.
– CFE_ES_PerfLogAdd - Function called by CFE_ES_PerfLogEntry and CFE_ES_PerfLogExit macros.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","duplicate, unit-test",https://github.com/nasa/cFE/issues/1642
Add functional tests for cFE ES Application Behavior APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Application Behavior APIs
– CFE_ES_RunLoop - Check for Exit, Restart, or Reload commands.
– CFE_ES_WaitForStartupSync - Allow an Application to Wait for the ""OPERATIONAL"" global system state.
– CFE_ES_WaitForSystemState - Allow an Application to Wait for a minimum global system state.
– CFE_ES_IncrementTaskCounter - Increments the execution counter for the calling task.
– CFE_ES_ExitApp - Exit a cFE Application.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","duplicate, unit-test",https://github.com/nasa/cFE/issues/1641
Add functional tests for cFE ES Application Control APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Application Control APIs
– CFE_ES_RestartApp - Restart a single cFE Application.
– CFE_ES_ReloadApp - Reload a single cFE Application.
– CFE_ES_DeleteApp - Delete a cFE Application.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","duplicate, unit-test",https://github.com/nasa/cFE/issues/1640
Add functional tests for cFE ES Entry/Exit APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Entry/Exit APIs
– CFE_ES_Main
– CFE_ES_ResetCFE

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC","unit-test, functional",https://github.com/nasa/cFE/issues/1639
"Fix #1480, Expand FS Header Functional tests.","**Describe the contribution**
Fixes #1480
Expands FS Header functional tests to include error checking. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1638
"Fix #467, #1636 Complete coverage for cfe_es_start.c and cfe_es_syslog.c","**Describe the contribution**
Completed code coverage for `cfe_es_start.c` and `cfe_es_syslog.c` with the following changes:

Fixes #467 The following tests were added:
- `CFE_ES_Main` with a ES Perf Data mutex creation failure
- `CFE_ES_CreateObjects` with unknown object type
- `CFE_ES_SysLogReadData` when calculated blocksize is 0
 
Fixes #1636 removed function `CFE_ES_SysLog_snprintf`

**Testing performed**
Manually ran unit tests for ES: `$ make -C build/native/default_cpu1/es test`
Verified 100% coverage on files with `gcov cfe_es_syslog.c.gcno` and `gcov cfe_es_start.c.gcno`

**Expected behavior changes**
Increased overall code coverage

**System(s) tested on**
 - Ubuntu 18.04 VM

**Additional context**

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza/NASA GSFC
",CCB:Approved,https://github.com/nasa/cFE/pull/1637
Remove unused function `CFE_ES_SysLog_snprintf` in cfe_es_syslog.c,"**Is your feature request related to a problem? Please describe.**
This function is not used. We also don't have UT for this function.

**Describe the solution you'd like**
Simply remove the code.

**Describe alternatives you've considered**
Keep it and add the unit tests.

**Requester Info**
Jose F Martinez Pedraza/NASA GSFC",enhancement,https://github.com/nasa/cFE/issues/1636
Update the CI functional test to use the unit test report file,"**Is your feature request related to a problem? Please describe.**
CI functional test currently tee's the console output and waits for a string, which is subject to flushing and not very robust.

**Describe the solution you'd like**
#1633 added a test log file, CI in functional test can now just wait until this file exists to know when the test is complete (vs tee on console output).  That log file is then the artifact and can be checked for summary success/failure.

**Describe alternatives you've considered**
None.

**Additional context**
#1633

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, continuous-integration",https://github.com/nasa/cFE/issues/1635
"Fix #1478, Expand CDS Functional Tests.","**Describe the contribution**
Fixes #1478
Expends on the CDS functional tests. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1634
"Fix #1625, add test log file","**Describe the contribution**
Add cfe_assert capability to ""tee"" all test log output to a file in addition to the regular output (console/event).

This aids in scripting and automation, by creating a file containing only test results, not intermixed with other info, and not subject
to the length limitations of events.

Fixes #1625

**Testing performed**
Build and run CFE functional tests

**Expected behavior changes**
Test results now stored in `/cf/cfe_test.log` in addition to normal output

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/1633
cFE Integration candidate: 2021-06-22,"## Context

Part of https://github.com/nasa/cfs/pull/270

## Testing

cFE Checks <https://github.com/nasa/cFE/pull/1632/checks>
Bundle Checks <https://github.com/nasa/cfs/pull/270/checks>

## Authors 

@skliper 
@zanzaben 
@jphickey 
@pepepr08 

## Description

### PR #1627

Fix #1626, rename/clean CFE coverage assert macros



### PR #1630 

Fix #1629, correct path to users guide warning log

### PR #1621 

Fix #1477, add additional test cases for Child Tasks

### PR #1608 
Fix #1367, Add cfe functional tests to CI


### PR #1623 

Fix #465, Added UT tests for cFE ES Api


### PR #1634

Fix #1478, Expand CDS Functional Tests. 


### PR #1594

Fix #1320 #1583 #508, Event ID updates

### PR #1633 

Fix #1625, add test log file

### PR #1624

Fix #596, scrub all UT_Report calls 
",,https://github.com/nasa/cFE/pull/1632
Run continuous-integration workflows with the bundle integration-candidate branch where needed,"**Is your feature request related to a problem? Please describe.**
Some CI workflows checkout the cFS bundle, it would be good to see how some things fail against main but pass with IC

**Describe the solution you'd like**
Add a matrix build so workflows that depend on the bundle can test both. Add a badge to the readme. 

**Describe alternatives you've considered**


**Additional context**
Add any other context about the feature request here.

**Requester Info**
Full name and company/organization if applicable
",continuous-integration,https://github.com/nasa/cFE/issues/1631
"Fix #1629, correct path to users guide warning log","**Describe the contribution**
Corrects the path to the warning log file for CFE users guide build

Fixes #1629 

**Testing performed**
Check CFE workflow

**Expected behavior changes**
Workflow should succeed

**System(s) tested on**
Github

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1630
Fix documentation workflow warning.log archive,"**Describe the bug**
The documentation CI workflow has a typo in the directory for the usersguide-warnings.log output file. 

**To Reproduce**
See <https://github.com/nasa/cFE/runs/2847522531?check_suite_focus=true>

**Expected behavior**
Workflow runs successfully and reports and archives warnings

**Code snips**
https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/.github/workflows/build-documentation.yml#L116


**Additional context**
This popped up after the update to the documentation build and I missed it when fixing up the IC

","enhancement, continuous-integration",https://github.com/nasa/cFE/issues/1629
"ES uncovered code cfe_es_api.c, CFE_ES_ExitApp infinite loop (spins until deleted)","**Is your feature request related to a problem? Please describe.**
Missing coverage for CFE_ES_ExitApp function that contains an infinite loop.

https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/modules/es/fsw/src/cfe_es_api.c#L444-L464

**Describe the solution you'd like**
Add coverage tests to include part of the function that is currently not being tested.

**Describe alternatives you've considered**
None.

**Requester Info**
Jose F. Martinez Pedraza/NASA GSFC
","enhancement, unit-test, coverage",https://github.com/nasa/cFE/issues/1628
"Fix #1626, rename/clean CFE coverage assert macros","**Describe the contribution**
Rename CFE coverage test assert macros in ut_support.h to have consistent name prefix.

Also adds a ""VOIDCALL"" and ""RESOURCEID_EQ"" macro for logging void functions and ID checks, respectively.

Fixes #1626 

**Testing performed**
Build and run all unit tests

**Expected behavior changes**
None - just renames macros for consistency, and simplifies the implementation of some (reusing existing macro where feasible).

**System(s) tested on**
Ubuntu

**Additional context**
Discussed initially in CCB on 2021-06-16, as part of discussion on #1624, then split off into a separate issue/PR.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1627
Consistency in CFE coverage test helper macros,"**Is your feature request related to a problem? Please describe.**
The following helper macros are defined in `ut_support.h` and used in sb_UT.c, with the intent of applying to other modules:

- SETUP
- ASSERT
- ASSERT_EQ
- ASSERT_TRUE
- EVTCNT
- EVTSENT

These macros are all specific to/tuned toward CFE coverage testing (i.e. they are not generic) because they embed certain CFE patterns/assumptions, i.e. SETUP and TEARDOWN check for CFE_SUCCESS, the ""EVENT"" macros deal with the UT stub event capture logic, etc.  

**Describe the solution you'd like**
The genuinely CFE-specific macros should be updated with a `CFE_UtAssert_` prefix to indicate that they are assertion statements that are specific to CFE.

For macros which are actually generic, such as ""ASSERT_EQ"", consider replacing this with the existing generic `UtAssert_INT32_EQ` macro.

Also for wider coverage test applicability and consistency of logging output, should also add the following:

- `VOIDCALL` macro to consistently log functions that do not have a return value, but still want to include the full text of what was called
- `RESOURCEID_EQ` macro to check for equality between resource ID values (INT32_EQ is not sufficient here because one should not assume that IDs are integers)

**Additional context**
Discussed in CCB 2021-06-16, as part of issue #596 and improving the test log output

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1626
Add feature to CFE assert to write output to log file,"**Is your feature request related to a problem? Please describe.**
The CFE functional tests executed via the cfe_assert helper app currently report test cases as events.  Problem is:
- Events are (by default) limited to 122 chars, and assert strings tend to be long-ish, so these are likely to get truncated
- Makes it difficult to write test analyzing tools - either need to somehow subscribe to those event IDs (non-trivial w/current script capabilities), or pipe the entire terminal log to a file (OS dependent).  And in both cases, still subject to text truncation.

**Describe the solution you'd like**
The cfe_assert app should have a feature to internally ""tee"" the results to a log file.  This would alleviate the need (and OS dependency) on trying to ""tee"" the output externally, and the output would contain ONLY test logs i.e. not mixed with other syslog messages.

**Additional context**
See #1608, this would make CI tests more reliable

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/1625
"Fix #596, scrub all UT_Report calls","**Describe the contribution**
Scrub through all UT reporting calls and replace with preferred macro where possible.

- All calls to check status/return code are replaced with macro that logs all arguments and return value
- All calls that involved multiple conditions AND'ed together are replaced with individual asserts on each condition.

Fixes #596
Fixes #470 

**Testing performed**
Build and run unit tests, confirm logging is as intended, and coverage level is not reduced

**Expected behavior changes**
Better, more complete context information is logged into the file
All individual assert conditions are logged separately (no more checking of multiple AND'ed values/conditions in a single report)

**System(s) tested on**
Ubuntu

**Additional context**
This also removes all the ""free-form"" info that was in the logs, since it wasn't really providing value (a developer will go to the source file/line number and see full context, nor was it complete or consistent enough to provide any value for cross referencing or documentation).

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1624
"Fix #465, Added UT tests for cFE ES Api","**Describe the contribution**
Fixes #465 
Completed code coverage on the following functions:
- Test CFE_ES_ReloadApp bad AppID, core app, file doesn't exist
- Test CFE_ES_GetAppID: NULL AppID pointer
- Test CFE_ES_GetAppIDByName: NULL AppID pointer
- Test CFE_ES_GetAppIDByName: NULL name pointer
- Test CFE_ES_DeleteChildTask: Task inactive/invalid case
- Test CFE_ES_RegisterCDS: NULL handle and NULL name

**Testing performed**
Steps taken to test the contribution:
1.  Compiled code and tests for ES
1. Manually run coverage-es-ALL-testrunner and verify output of new tests
1. Generated cfe_es_api.c.gcov and verified expected lines are now covered.

**Expected behavior changes**
Percentage of lines covered should increment.

**System(s) tested on**
 - Ubuntu 18.04.5 VM server

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza/NASA GSFC
",CCB:Approved,https://github.com/nasa/cFE/pull/1623
"Fix #470, complete coverage for FS subsystem","**Describe the contribution**
Add required coverage test cases to achieve 100% line coverage in FS

Fixes #470

**Testing performed**
Build and run unit tests, generate coverage report (lcov)

**Expected behavior changes**
FS line coverage is now 100%

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",duplicate,https://github.com/nasa/cFE/pull/1622
"Fix #1477, add additional test cases for Child Tasks","**Describe the contribution**
Fixes #1477

Add tests to do more than just the nominal cases of child task apis 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1621
CFE_ES_QUERY_ONE_CC not performing as expected,"**Describe the bug**
Within the CFE_ES_APP_TLM_MID packet - the following items are not behaving as expected:
1. BSSSize, CodeSize, and DataSize always report 0 for a given App.  
2. StartAddress for a given App changes whenever the software reset.

**To Reproduce**
1. Start FSW
2. Send the CFE_ES_QUERY_ONE_CC  for a given App
3. Verify that the BSSSize, CodeSize, and DataSize always report 0 + StartAddress is not fixed (this may be by design...I am thinking that it should only change if the software is re-compiled).

**System observed on:**
Oracle VM VirtualBox
OS: ubuntu-20.10
Versions: cfe v6.8.0-rc1+dev218, osal v5.1.0-rc1+dev109, psp v1.5.0-rc142

**Reporter Info**
Dan Knutsen
NASA/Goddard
",question,https://github.com/nasa/cFE/issues/1620
cFE Integration candidate: 2021-06-15,"## Testing

cFE Checks <https://github.com/nasa/cFE/pull/1619/checks> 
- Documentation workflow failures due to osal docs rename. These are fixed in bundle.
- Local tests failure due to osal docs rename, also fixed in bundle. 

cFS Bundle Checks <https://github.com/nasa/cFS/pull/265/checks> 

## Context

Part of https://github.com/nasa/cFS/pull/265

## Authors

@jphickey 
@zanzaben 
@skliper 
@pepepr08 

## Description

### PR #1590 
Fix #1483, Add CI workflow to run cFE coverage tests


### PR #1598 
Fix #1299, Updated FS Read/WriteHeader API return documentation


### PR #1601 
Fix #567, Document CFE_ES_RunLoop increment task counter behavior


### PR #1615 
Fix #1614, standardize on ""docs"" subdirectory


### PR #1603 
Fix #1177, Update version description per current design


### PR #1602 
Fix #741, Document CFE_TBL_Unregister use-case


### PR #1596 
Fix #1595, provide CFE assert lock/unlock


### PR #1566 
Fix #1442, Simplify CFE_FS_SetTimestamp and fix syslog typo


### PR #1592 
Fix #1308, Removed redundant check/set of CFE_CPU_ID_VALUE

### PR #1593 
Fix #1544, add time get reference error bit


### PR #1600 
Fix #1199, Add workflow to build cFE documentation


### PR #1609 

Fix #1205 #1131 #1127 #1029 #942 - Requirements updates


### PR #1610 
Fix #1306, ES/ResourceID documentation cleanup


### PR #1613 

Fix #1490, allow multiple sources in add_cfe_coverage_test

### PR #1586 

Fix #814, add ES Misc Functional test

### PR #1607 

Fix #811, add Mempool functional tests

### PR #1605 

Fix #1604, Clean/simplify version header and reporting

### PR #1612 

Fix #1378, 1589, doxygen cleanup

### PR #1611 

Fix #1325, Prepend system log messages with function name


",,https://github.com/nasa/cFE/pull/1619
Add compile time assert that platform config sizes are < mission config sizes,"**Is your feature request related to a problem? Please describe.**
A stakeholder bumped up CFE_PLATFORM_SB_MAX_PIPES to 128 but left CFE_MISSION_SB_MAX_PIPES as 64, which is a broken config since tlm for PipeDepthStats is sized using CFE_MISSION_SB_MAX_PIPES.

**Describe the solution you'd like**
Add a compile time assert that CFE_PLATFORM_* is < CFE_MISSION_*

**Describe alternatives you've considered**
Charge more to fix user errors.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, ping @excaliburtb
",enhancement,https://github.com/nasa/cFE/issues/1618
UT_DefaultHandler_CFE_SB_ReceiveBuffer does not adequately model behavior of CFE_SB_ReceiveBuffer for unit test purposes,"**Describe the bug**
UT_DefaultHandler_CFE_SB_ReceiveBuffer only sets the value at BufPtr when Status is => 0 (CFE_SUCCESS == 0); however CFE_SB_ReceiveBuffer changes the value at BufPtr to NULL whenever the Status value is _not_ CFE_SUCCESS.It is possible to get a NULL with a non-zero positive result when set by the user.  It is not possible to get the NULL value from the handler with a negative Status, a behavior that the production code has.  There is no guarantee that the CFE_SB_Buffer_t **BufPtr passed into the function does not already contain a non-NULL value from the code under test (CUT).

**To Reproduce**
Steps to reproduce the behavior:
1. Write a unit test for some CUT that uses the function and do not set a new handler
2. Make it so a negative value is received back from the function (i.e. CFE_SB_TIME_OUT)
3. If the CUT does not do it automatically, temporarily change the passed in address to have a value at that address
4. Test results show that the reference value is never set by the stub

**Expected behavior**
The follow-on logic from the default handler should match the logic in the production code, OR
Redesign the stubs to have no follow-on logic so unit test developer is in complete control of outside effects.

**Code snips**
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/core_api/ut-stubs/src/cfe_sb_handlers.c#L197-L209
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_api.c#L2015-L2019

**System observed on:**
 - RHEL-7.8

**Reporter Info**
Alan Gibson
NASA  GSFC/587
",wontfix,https://github.com/nasa/cFE/issues/1617
Incorrect Osal API guide format in Users guide reference ,"The API is no longer a *.doc, it's generated and deployed from doxygen as a pdf, and it goes in a separate branch.  Right now it's in the cFS repo at https://github.com/nasa/cFS/blob/gh-pages/OSAL_Users_Guide.pdf.

_Originally posted by @skliper in https://github.com/nasa/cFE/pull/1615#discussion_r648596129_",docs,https://github.com/nasa/cFE/issues/1616
"Fix #1614, standardize on ""docs"" subdirectory","**Describe the contribution**
Use ""docs"" instead of ""doc"" in both source and binary/build directory names for documentation and related files.

Fixes #1614

**Testing performed**
Build cFE and OSAL documentation targets, confirm working as expected

**Expected behavior changes**
No change, just consistent naming

**System(s) tested on**
Ubuntu

**Additional context**
**DEPENDENCY:** Should be merged at the same time as nasa/osal#1071 and nasa/psp#294

This also changes the names of the build tree/binary directories too (IMO it seemed odd to keep the binary dirs named differently from source dirs, so I made everything ""docs"").

However, it does **NOT** update the names of the makefile targets (`mission-doc` in the CMake build, and `doc` in the sample top-level target Makefile).  I figured there were probably many build/workflow scripts that depended on these target specific target names.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:FastTrack,https://github.com/nasa/cFE/pull/1615
"Standardize on ""docs"" subdirectory for documentation","**Is your feature request related to a problem? Please describe.**
In nasa/osal#1071 and nasa/psp#294, the `doc` subdirectories will be renamed to `docs`, to be consistent.

Going forward, documentation should be in a `docs` subdirectory on all submodules/components.

**Describe the solution you'd like**
Places where CFE build system is using/referring to a `doc` subdirectory (e.g. refs into OSAL) should be changed to `docs`

**Additional context**
Needed for compatibility with/dependency on nasa/osal#1071

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1614
"Fix #1490, allow multiple sources in add_cfe_coverage_test","**Describe the contribution**
Add ${ARGN} such that the user can specify multiple source files

Add a check for targets in the add_cfe_coverage_dependency, so this can be used to add arbitrary other non-stub libraries too.

Fixes #1490

**Testing performed**
Build and run all unit tests, confirm no change in behavior

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1613
"Fix #1378, 1589, doxygen cleanup","**Describe the contribution**
Clean up and simplify the generated `Doxyfile`s for the documentation builds.  Instead of having special rules or providing direct refs to non-cFE subdirectories in the INPUT, just add the base dir for all modules.  Then use ""exclude"" logic to filter out parts based on file/directory names (unit-test, ut-stubs, etc).

Gives each cFE doc build (detaildesign, usersguide) its own dedicated working directory.

Fixes #1378 
Fixes #1589 

**Testing performed**
Build detail design and users guide docs and verify contents.

Built all 3 doc targets (detaildesign, usersguide, osalguide) numerous times with `-j` make option, did not see any issues related to parallelism.  

**Expected behavior changes**
The full set of code is included in the ""detaildesign"", even for OS/BSP/PSP layers that may not be used - e.g. RTEMS and VxWorks PSP and OSAL layers are included in this build.

After parallel builds and/or building all doc targets at once - the warning files for each doc target are left are intact, and can be reviewed individually after the build - they do not overwrite each other as they used to.

Note that instead of `warnings.log` the artifact is now `detaildesign-warnings.log` and `cfe-usersguide-warnings.log`, respectively.

**System(s) tested on**
Ubuntu

**Additional context**
There had been some attempts at not including unused components in the past, but they were not working (pre-existing issue) so it was all getting included anyway, this simply takes out the broken logic but the end result is largely the same.

This may also require some sort of update to the list of artifacts due to the `warnings.log` file name change.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/1612
"Fix #1325, Prepend system log messages with function name","**Describe the contribution**
Fix #1325 - Standardizes system log messages with a prefixed function name

**Testing performed**
Built and passed unit tests.

**Expected behavior changes**
Only modified output string of syslog.

**System(s) tested on**
 - Hardware: Intel I5/Docker
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle + this commit

**Additional context**
Note this will have a conflict with #1566, easy to resolve.  I fix once it's in.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1611
"Fix #1306, ES/ResourceID documentation cleanup","**Describe the contribution**
Fix #1306, Cleanup of documentation related to CFE-40 code review for ES ResourceID.  Typo fixes, clarification, removal of obsolete comments, etc.

**Testing performed**
CI - documentation only

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1610
Fix #1205 #1131 #1127 #1029 #942 - Requirements updates,"**Describe the contribution**
Fix #1205: Added task and CDS file write default filenames
Fix #1131: Removed optional from EVS log
Fix #1127: Non-parameter reload/restart doesn't increment cmd error
Fix #1029: Removed system log elements from reset preservation list
Fix #942: Simplifed table partial load file requirement

**Testing performed**
CI - requirements documentation only

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1609
"Fix #1367, Add cfe functional tests to CI","**Describe the contribution**
Fixes #1367
Add the functional tests to the CI workflow. 

**Testing performed**
Changed the tests to be wrong and force a failure. 
Changed the tests to have a delay to simulate a timeout. 

**Expected behavior changes**
Will now fun the cFE functional tests on every pull request. 

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC","CCB:Approved, continuous-integration",https://github.com/nasa/cFE/pull/1608
"Fix #811, add Mempool functional tests","Describe the contribution
Fixes #811
adds new functional tests for es mempool

System(s) tested on
Ubuntu 20.04

Additional context
This is a just testing the nominal cases. More in depth tests will have to be added later.

Contributor Info - All information REQUIRED for consideration of pull request
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1607
CFE_ES_GetPoolBufInfo Header has incorrect return description,"**Describe the bug**
The return in the header says it returns Execution status but it actually returns the buffer size or error code. 

**Expected behavior**
Header file should be changed to match the implementation. 

**Additional context**
The code that does this has a comment saying it's not workable so we could also change the implementation 

https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_mempool.c#L541-L550

**Reporter Info**
Alex Campbell GSFC",docs,https://github.com/nasa/cFE/issues/1606
"Fix #1604, Clean/simplify version header and reporting","**Describe the contribution**
Fix #1604 - cleans up the version header and how it's reported (standardized event text).  Note just ES uses/reports the short version.

**Testing performed**
Built and ran unit tests, executed cfe to confirm output.

**Expected behavior changes**
Minor event message output format changes

**System(s) tested on**
 - Hardware: Intel I5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
#1603

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1605
Clean up version header and standardize reporting,"**Is your feature request related to a problem? Please describe.**
Unnecessary macros (coding standard), strange line splits,  various event formats.

**Describe the solution you'd like**
I'll provide a suggested cleanup.  If people like it, keep it and consider applying the pattern across repos... if not, toss it.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1604
"Fix #1177, Update version description per current design","**Describe the contribution**
Fix #1177 - cleanup of version description, biggest fix is mission revision definition location (not in config files).  Also deleted template section which just duplicated an outdated version of cfe_version.h.

**Testing performed**
CI - documentation only

**Expected behavior changes**
None

**System(s) tested on**
CI - Documentation only

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack, docs",https://github.com/nasa/cFE/pull/1603
"Fix #741, Document CFE_TBL_Unregister use-case","**Describe the contribution**
Fix #741 - Documents CFE_TBL_Unregister on shared table use case vs use by owning task.

**Testing performed**
CI - Documentation only

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
#1509 documents potential races, global table handles often aren't protected so care needs to be taken when using shared tables.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack, docs",https://github.com/nasa/cFE/pull/1602
"Fix #567, Document CFE_ES_RunLoop increment task counter behavior","**Describe the contribution**
Fix #567 - updated documentation

**Testing performed**
CI - documentation only

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack, docs",https://github.com/nasa/cFE/pull/1601
"Fix #1199, Add workflow to build cFE documentation","**Describe the contribution**
Fix #1199 Build documentation at cFE component level, so we can catch documentation errors at cFE repo before they get merged into the cFS bundle.

**Testing performed**
Steps taken to test the contribution:
1. Workflow runs and completes successfully after a push.

**Expected behavior changes**
A new action workflow runs to build documentation after a push or merge request.

**System(s) tested on**
 - Tested on the Github servers where CI actions get to run.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza/NASA GSFC
","CCB:Approved, continuous-integration",https://github.com/nasa/cFE/pull/1600
Update API/error code documentation relative to OSReturnCode cases,"**Is your feature request related to a problem? Please describe.**
There are multiple cFE API's that can return OSReturnCodes (CFE_FS_ReadHeader, CFE_FS_WriteHeader, etc).  This isn't explicitly documented in the API or as part of CFEReturnCodes.

**Describe the solution you'd like**
Add documentation.  They don't conflict due to the severity bits/service bits.

**Describe alternatives you've considered**
Convert all return codes to the CFE set, but probably not worth it and could obscure source of error.

**Additional context**
Spawned from requested change in #1598

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/cFE/issues/1599
"Fix #1299, Updated FS Read/WriteHeader API return documentation","**Describe the contribution**
Fix #1299 - updated return documentation for CFE_FS_ReadHeader and CFE_FS_WriteHeader to state they return bytes read/written or error code.  Left as CFE_Status_t since they do return error codes, although overloaded.  It is confusing since 0 actually indicates the data wasn't read or written, but that would require an API change.  Related issue is #483.

**Testing performed**
CI - documentation only 

**Expected behavior changes**
None, documentation only

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack, docs",https://github.com/nasa/cFE/pull/1598
"Unify/standardize method for writing files, multiple patterns currently implemented","**Is your feature request related to a problem? Please describe.**
Some files are still written directly from the command handler (main task), see `CFE_ES_WriteSysLogCmd` for example.  Some request the write from a background task using `CFE_FS_RunBackgroundFileDump` and CFE_FS_Background* routines, see `CFE_ES_WriteERLogCmd`.  Then there's also the unique `CFE_ES_RunPerfLogDump` with it's own run function that doesn't utilize `CFE_FS_RunBackgroundFileDump`.

Side note - `CFE_ES_SysLogDump` does not check for CFE_FS_WriteHeader valid size (just >= 0)

**Describe the solution you'd like**
Scrub all file writes and implement a single pattern.  This should standardize events, error handling, scheduling work, dump deconfliction, etc.  Note there's multiple issues with overloaded EIDs in reporting errors, etc.  Avoid additional complexity from ""backwards compatible"" event messages, etc.

**Describe alternatives you've considered**
If these really require different handling, summarize file write handling and document.  Current design is challenging to analyze for file write timing impacts without in-depth knowledge of implementation.

**Additional context**
#1588 documents some of the EventID issues

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1597
"Fix #1595, provide CFE assert lock/unlock","**Describe the contribution**
Provide the UT_BSP_Lock/Unlock function to be compatible with nasa/osal#1065.  The library no longer needs to be locked the
entire time a test runs. This also allows test programs to be multi threaded.

Fixes #1595

**Testing performed**
Build and run CFE functional tests in cfe_testcase app that use cfe_assert library

**Expected behavior changes**
More fine-grained locking, and tests may use child tasks safely.

**System(s) tested on**
Ubuntu

**Additional context**
Required for compatibility with nasa/osal#1065

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1596
Provide UT_BSP_Lock/Unlock in CFE assert app,"**Is your feature request related to a problem? Please describe.**
In nasa/osal#1065 it adds a UT_BSP_Lock / UT_BSP_Unlock routine to protect the UtAssert global data structures.  However for cfe_assert app the utbsp.c file is not used, it provides its own routines.  Therefore these routines need to be added.

**Describe the solution you'd like**
Add UT_BSP_Lock/Unlock wrappers in CFE assert (this already has a mutex).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1595
"Fix #1320 #1583 #508, Event ID updates","**Describe the contribution**
Fix #1320 - Removed CFE_ES_MAX_EID and all the others (very fragile, especially when EIDs are out of order)
Fix #1583 - Ordered EID's and fixed duplicate assignments
Fix #508 -  Cleaned up EventID documentation
  - Removed format string and replaced with brief description
  - Reduce verbiage in full descriptions, made consistent and less ""bi-directional"" when there are multiple sources.  API/commands will reference EIDs.

**Testing performed**
Build an run unit tests, passed - TBD (not actually done yet)

**Expected behavior changes**
Deconflicted EIDs.

**System(s) tested on**
 - Hardware: Intel I5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Did not address #1532, could be a big impact.
Wrote #1588 to track use of EID in multiple locations.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1594
"Fix #1544, add time get reference error bit","**Describe the contribution**
Use one of the unused time state bits to indicate if an error has occurred where CFE_TIME_GetReference was not able to get a consistent copy of the reference state data.

In a functional system this should never occur - there should be at most one retry, which only happens in the event there was a burst of updates (more than 4) concurrently with reading the structure.

The previous implementation did not report or handle the condition at all, this at least sets a TLM status bit and returns a reference struct filled with all zeros.

Fixes #1544 

**Testing performed**
Build and sanity check CFE, run all unit tests
Check coverage report to ensure the new tests are being executed and confirm that the read error flag gets set, and the output state is all 0 in that case.
Force the error to occur during a syslog call and confirm the timestamp gets set, e.g.

    1980-001-00:00:00.00000 ES Startup: Opened ES App Startup file: /cf/cfe_es_startup.scr


**Expected behavior changes**
If CFE_TIME_GetReference was ever not able to get a valid reference structure, it outputs all zeros and the ""REFERR"" bit (0x0010) will be set in the output TLM structure until the system is rebooted.

**System(s) tested on**
Ubuntu

**Additional context**
This solution was chosen over an event/syslog because both of those will also get the time, thereby introducing a recursive loop if the error happens again.  

By zero-filling the structure the output is also identifiable; i.e. if the date ""1980-001-00:00:00.00000"" ever appears in a log file, failure of CFE_TIME_GetReference is really the only way a timestamp like that is possible.  Without this change the time data would be variable/unpredicatable.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/1593
"Fix #1308, Removed redundant check/set of CFE_CPU_ID_VALUE","**Describe the contribution**
Fix #1308 - removed redundant set of CFE_CPU_ID_VALUE if not set.

And checked as well as assigned to CFE_CPU_ID_VALUE here:
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/cmake/target/CMakeLists.txt#L20-L22
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/cmake/target/CMakeLists.txt#L127-L133

and used here:
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/cmake/target/src/target_config.c#L172

**Testing performed**
Removed assignment of cpu1_PROCESSORID and confirmed error was generated by target/CMakeLists.txt:
`cpu1_PROCESSORID must be defined to link a final exe`

**Expected behavior changes**
None as long as required elements are defined.

**System(s) tested on**
 - Hardware: Intel I5/Docker
 - OS:  Ubuntu 18.04
 - Versions: Bundle Main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1592
"Fix #1585, Fix Calculate CRC header return description.","**Describe the contribution**
Fixes #1585
Change Header file to match functionality. 

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1591
"Fix #1483, Add CI workflow to run cFE coverage tests","**Describe the contribution**
Fix #1483
Run cFE coverage tests for every push and pull request. Use a checks-for-duplicates job to avoid duplicate runs of the CI Action.

**Testing performed**
Steps taken to test the contribution:
1. Pushed to fork, CI action ran successfully: https://github.com/pepepr08/cFE/actions/runs/886331016
1. Created a temporary branch and introduced an ES bug to force a workflow failure. Workflow failed successfully: https://github.com/pepepr08/cFE/actions/runs/886371053
1. Reverted commit that introduced bug to verify that workflow run completed successfully. 

**Expected behavior changes**
A new workflow is added when looking at the different nasa/cFE actions. The workflow will run for every push and pull request.

**System(s) tested on**
 - Tested on the Github servers where CI actions get to run.


**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza/NASA GSFC
","CCB:Approved, continuous-integration",https://github.com/nasa/cFE/pull/1590
Unique WARN_LOGFILE for documentation builds,"**Is your feature request related to a problem? Please describe.**
`WARN_LOGFILE` is set the same for both cfe documentation builds since it's set in cfe-common.doxyfile.in.  Potential conflict during a parallel build.

**Describe the solution you'd like**
Set unique warning file names for usersguide and doc build.

**Describe alternatives you've considered**
None

**Additional context**
#1378 would also deconflict, but would deconflict CI artifacts (no longer would need to rename in related Action).  This was mentioned in #389, but updated to make specific to the undocumented warnings.

**Requester Info**
Jacob Hageman - NASA/GSFC",docs,https://github.com/nasa/cFE/issues/1589
"Same Event ID used in multiple locations (OVERLOADED), should be unique","**Is your feature request related to a problem? Please describe.**
As part of EID scrub, identified the following cases where an EventId was used in multiple locations (intent is for EIDs to be unique).

CFE_ES_SYSLOG2_ERR_EID:
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_syslog.c#L486-L487
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_task.c#L1657-L1658

CFE_ES_ERLOG2_ERR_EID:
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_task.c#L1775-L1776
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_erlog.c#L270-L271

CFE_ES_PERF_LOG_ERR_EID:
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_perf.c#L257-L258
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_perf.c#L333-L334

CFE_ES_FILEWRITE_ERR_EID:
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_task.c#L2125-L2127
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_erlog.c#L264-L266

CFE_ES_CREATING_CDS_DUMP_ERR_EID:
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_task.c#L2018-L2019
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/es/fsw/src/cfe_es_task.c#L2029-L2030

#1117 documents overload CFE_SB_SND_RTG_EID and CFE_SB_SND_RTG_ERR1_EID

CFE_SB_BAD_CMD_CODE_EID:
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_task.c#L372-L374
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_task.c#L441-L443

CFE_SB_GETPIPENAME_ID_ERR_EID:
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_api.c#L680-L683
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_api.c#L702-L710

CFE_SB_GETPIPEIDBYNAME_NAME_ERR_EID - Note the message also isn't all that useful.
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_api.c#L778-L785
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/sb/fsw/src/cfe_sb_api.c#L800-L805

CFE_EVS_ERR_CRLOGFILE_EID:
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_log.c#L142-L150
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_log.c#L154-L160

CFE_EVS_ERR_EVTIDNOREGS_EID (might benefit from being common code):
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_task.c#L742-L744
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_task.c#L1309-L1311
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_task.c#L1513-L1515

CFE_EVS_ERR_APPNOREGS_EID, CFE_EVS_ERR_ILLAPPIDRANGE_EID, CFE_EVS_ERR_NOAPPIDFOUND_EID - used in 10 locations, refactor!

CFE_EVS_ERR_CRDATFILE_EID:
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_task.c#L1564-L1572
https://github.com/nasa/cFE/blob/a16c78e1853c9b46ce5d1efae882ea5bf3a170cf/modules/evs/fsw/src/cfe_evs_task.c#L1581-L1583

CFE_EVS_ERR_INVALID_BITMASK_EID used in 6 different places for different bitmasks, refactor candidate.

CFE_TBL_LOAD_SUCCESS_INF_EID:
https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/modules/tbl/fsw/src/cfe_tbl_api.c#L738-L740
https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/modules/tbl/fsw/src/cfe_tbl_api.c#L891-L894

CFE_TBL_VALIDATION_INF_EID:
https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/modules/tbl/fsw/src/cfe_tbl_api.c#L1198-L1200
https://github.com/nasa/cFE/blob/d03e24e675fcd253222e40a5c544920e03854c5f/modules/tbl/fsw/src/cfe_tbl_api.c#L1245-L1247

CFE_TBL_FILE_ACCESS_ERR_EID:
Note - gave up here.  Based on the number of these and no near-term solution it's likely explicitly recording every duplicate use of event IDs will be out of date by the time this is addressed.  May note as ""OVERLOADED"" in event documentation but that isn't all that reliable either.  Suggest scripted verification. 

**Describe the solution you'd like**
Create unique EIDs

**Describe alternatives you've considered**
None

**Additional context**
#508

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1588
Erroneous Time Behavior,"**Describe the bug**
Time is jumping to an erroneous value after sending the CFE_TIME_SUB_1HZ_ADJUSTMENT_CC command.  I'm not clear if the erroneous behavior is isolated only to the CFE_TIME_SUB_1HZ_ADJUSTMENT_CC command - the error was just noticed when testing a script that sends that command.

**To Reproduce**
Steps to reproduce the behavior:
1. Set the STCF to a known value
2. Send Add 1HZ Adjustment (In my attached test report I did 1 sec per sec to demonstrate behavior)
3. Send Sub1HZ Adjustment (In my attached test report I did 1 sec per sec to demonstrate behavior)
4. Observe an anomalous time jump (lines 1114-1122 in my attached report)

**System observed on:**
Oracle VM VirtualBox
OS: ubuntu-20.10
Versions: cfe v6.8.0-rc1+dev218, osal v5.1.0-rc1+dev109, psp v1.5.0-rc142.

**Reporter Info**
Dan Knutsen
NASA/Goddard
[erroneousTimeBehavior.txt](https://github.com/nasa/cFE/files/6556270/erroneousTimeBehavior.txt)


","bug, invalid",https://github.com/nasa/cFE/issues/1587
"Fix #814, add ES Misc Functional test","**Describe the contribution**
Fixes #814
Test for the api calls in Misc section. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1586
CFE_ES_CalculateCRC Header has incorrect return description ,"**Describe the bug**
The return in the header of CFE_ES_CalculateCRC says it returns error codes but it doesn't. When things go wrong it returns either the input crc or 0 depending on how it went wrong, 

**Expected behavior**
Header should correctly explain what CFE_ES_CalculateCRC can return. 

**Additional context**
If TypeCRC is a non-implemented type then it returns 0. 
If DataPtr is null or DataLength is zero it returns the input crc

**Reporter Info**
Alex Campbell GSFC",docs,https://github.com/nasa/cFE/issues/1585
cFE Integration candidate: 2021-06-01,"## Context

Part of <https://github.com/nasa/cFS/pull/263>


## Tests

cFE Checks <https://github.com/nasa/cFE/pull/1584/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/263/checks>

Note CodeQL failure in cFE checks because workflow points at ""main"". This is resolved by the cFS-bundle IC.

## Authors

@pepepr08 
@ArielSAdamsNASA 
@jphickey 
@skliper 

## Description

### PR #1580 

Fix #1364, Update ES verify errors to match 

Ensures error messages in `cfe_es_verify.h` match test logic. 

### PR #1578 

Fix #1366, Resolve mismatched endforeach of CMakeList.txt

### PR #1579 

Fix #1390, Improve event filter documentation

Adds documentation for the behavior of `CFE_EVS_ResetFilter` and explains how Event Filter Mask Values work. 

### PR #1576 

Fix #1391, EVS/FS documentation cleanup

### PR #1575 

Fix #1394, Remove shell file subtype and clarify scope

Removes `CFE_FS_SubType_ES_SHELL` and clarifies the scope of `CFE_FS_SubType_Enum_t` so that it only includes the cFE-defined file types

### PR #1582 

Fix #1362, Simplify CFE_ES_QueryAllCmd file open logic

Removes the obsolete `OS_OpenCreate` and file-remove-on-success logic from `CFE_ES_QueryAllCmd`.

### PR #1567 

Fix #1423, Remove deprecated elements

### PR #1556 

Fix #1441, Replace Header Content Type magic number.

### PR #1553 
  
Fix #1446, Remove unused EVS LogMode defines

### PR #1570 

Fix #1452, #1569, SB/MSG/SBR documentation cleanup and remove unused `CFE_SB_NO_SUBSCRIBERS`

### PR #1565 

Fix #1455, Add CFE_SB_DestinationD tag and use for pointersastrogeco 

### PR #1564 

Fix #1476, Use CFE_MSG_SequenceCount_t for seqcnt type

### PR #1562 

Fix #1485, Document CFE_ES_PoolCreateEx NumBlockSizes error handling

### PR #1560 

Fix #1494, Documentation cleanup in TBL/TIME

### PR #1558 

Fix #1507, Document TblName as app specific

### PR #1563

Fix #1561, use OSAL script to generate API guide

### PR #1557 
Fix #1548, Include verify headers to validate config 

### PR #1555

Fix #1554, add doxygen aliases for OSAL parameter/retvals 

",,https://github.com/nasa/cFE/pull/1584
Order event ID's and fix duplicates,"**Is your feature request related to a problem? Please describe.**
The whole ""MAX EID"" concept for  avoiding conflicts is poorly followed, out of order EID's then lead to collisions.  Just one example shown here (there are multiple):
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/sb/fsw/inc/cfe_sb_events.h#L195
https://github.com/nasa/cFE/blob/176e3df03f54f7753cb34beb3e986202604d6cef/modules/sb/fsw/inc/cfe_sb_events.h#L892

**Describe the solution you'd like**
Order EID's by number.  Put new ones at the end.  Remove the unused MAX EID value which is fragile anyways.

**Describe alternatives you've considered**
None

**Additional context**
#1320 - incorrect max

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1583
"Fix #1362, Simplify CFE_ES_QueryAllCmd file open logic","**Describe the contribution**
Fix #1362 - removes the first OS_OpenCreate (and file remove on success) since the following OS_OpenCreate with truncate makes it obsolete

**Testing performed**
Build/run unit tests, passed (once updated)

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Intel I5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1582
Streamline change history in ReadMe,"**Is your feature request related to a problem? Please describe.**
The changelog history clutters the ReadMe.

**Describe the solution you'd like**
Move all change history to a new CHANGELOG.md. Replace ""History"" section on ReadMe with a ""Changes in Latest Build"" section that contains the latest entry in the changelog. 

**Describe alternatives you've considered**
Automatically generating the changelog. Stop including the change summary in the ReadMe. 

**Additional context**
None

",docs,https://github.com/nasa/cFE/issues/1581
"Fix #1364, Update ES verify errors to match test","**Describe the contribution**
Fix #1364 - Updated ES verify error reporting to match test

**Testing performed**
CI - preprocessor error text update only

**Expected behavior changes**
None (except updated error message if triggered)

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1580
"Fix #1390, Improve event filter documentation","**Describe the contribution**
Fix #1390 - clarifies how event filters work

**Testing performed**
CI - Documentation only

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1579
"Fix #1366, Resolve mismatched endforeach of CMakeList.txt","**Describe the contribution**
Fix #1366 - resolved mismatch

**Testing performed**
CI

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1578
"Fix #1386, Remove CFE_EVS_Unregister API","**Describe the contribution**
Fix #1386, Remove CFE_EVS_Unregister API
- Removed requirement cEVS3101
- Removed documentation references
- Removed from API header
- Removed stub
- Removed implementation
- Removed coverage test

**Testing performed**
Built and ran unit tests, passed

**Expected behavior changes**
Removed API.

**System(s) tested on**
 - Hardware: Intel I5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1577
"Fix #1391, EVS/FS documentation cleanup","**Describe the contribution**
Fix #1391 - Cleans up EVS/FS documentation comments from code review

**Testing performed**
CI

**Expected behavior changes**
None, documentation only

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1576
"Fix #1394, Remove shell file subtype and clarify scope","**Describe the contribution**
Fix #1394 - removes `CFE_FS_SubType_ES_SHELL` and clarifies the scope of `CFE_FS_SubType_Enum_t` to just include the cFE defined file types

**Testing performed**
Build and run unit tests, passed

**Expected behavior changes**
None, wasn't used since shell command was removed from CFE/ES.

**System(s) tested on**
 - Hardware: Intel I5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1575
Protect from EventID collisions with `CFE_EVS_FREE_SLOT`,"**Is your feature request related to a problem? Please describe.**
EVS uses `CFE_EVS_FREE_SLOT` to mark slots in the filter table as free:
https://github.com/nasa/cFE/blob/8443a46db34bc2a19cb6b601c117840d686932e3/modules/evs/fsw/src/cfe_evs_task.h#L57

Since `EventID` is of type `uint16`, this ends up colliding with 0xFFFF which isn't documented in the API's as being ""reserved"".  Leads to some very strange asserts in the coverage tests where -1 EventID returns CFE_SUCCESS where it should be rejected:
https://github.com/nasa/cFE/blob/8443a46db34bc2a19cb6b601c117840d686932e3/modules/evs/ut-coverage/evs_UT.c#L645-L646

**Describe the solution you'd like**
`CFE_EVS_FREE_SLOT` should be documented as an invalid EventID (expose), and reject in APIs/commands that take EventID.

**Describe alternatives you've considered**
None

**Additional context**
#1572

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1574
"EVS coverage tests mix filter index with EventID in testing, other misleading comments","**Is your feature request related to a problem? Please describe.**
Test claims it's using an invalid EventID, but really it's just not registered.  Mixes the concept of filter table index with EventID:
https://github.com/nasa/cFE/blob/8443a46db34bc2a19cb6b601c117840d686932e3/modules/evs/ut-coverage/evs_UT.c#L637-L641

The application is registered, it's the EventID that hasn't been registered for filtering:
https://github.com/nasa/cFE/blob/8443a46db34bc2a19cb6b601c117840d686932e3/modules/evs/ut-coverage/evs_UT.c#L1699-L1713

**Describe the solution you'd like**
Clear up documentation/test, should be obviously testing registered EventIDs, unregistered EventIDs, invalid EventID, etc.  use min/max values (0 and 0xFFFE)

**Describe alternatives you've considered**
None

**Additional context**
#1572

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1573
"Fix #1435, Consistent use of uint16 for EventID","**Describe the contribution**
Fix #1435 - use `uint16` everywhere for `EventID`

**Testing performed**
Built/ran unit tests, passed

**Expected behavior changes**
None, just makes types consistent

**System(s) tested on**
 - Hardware: Intel i5, Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Doesn't fix the fact CFE_EVS_FREE_SLOT is not documented or handled well.  See #1574.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1572
"Convert or remove ""cfe requirements .docx""","**Is your feature request related to a problem? Please describe.**

`cfe requirements.docx` is not easily readable since it requires both a download and the user to have MS Word or equivalent installed. 

The document's purpose is ambiguous given the existence of `cFE_FunctionalRequirements.csv`. I've also seen some ""TBDs"" in the document hinting that there is some more work needed. 

**Describe the solution you'd like**

Various options

Add a readme to the docs directory that explains the different files. Additionally, replace`cfe requirements.docx` with Markdown or PDF


**Describe alternatives you've considered**
None

**Additional context**
None

",docs,https://github.com/nasa/cFE/issues/1571
"Fix #1452, #1569, SB/MSG/SBR documentation cleanup and remove unused `CFE_SB_NO_SUBSCRIBERS`","**Describe the contribution**
Fix #1452 - various documentation cleanup
Fix #1569 - remove `CFE_SB_NO_SUBSCRIBERS` (combined due to doc dependence)

**Testing performed**
Build and ran unit tests, passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + these commits

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1570
Remove unused `CFE_SB_NO_SUBSCRIBERS`,"**Is your feature request related to a problem? Please describe.**
Unused error code.  Unsubscribe returns `CFE_SUCCESS` from an unsubscribe call when there are no subscribers.

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
#1452 updated the documentation

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, cFE-SB",https://github.com/nasa/cFE/issues/1569
cFE Integration candidate: 2021-05-25,"## Context 

Part of nasa/cfs#260

## Testing

cFE Checks: <https://github.com/nasa/cFE/pull/1568/checks>
cFS Bundle Checks: <https://github.com/nasa/cfs/pull/260/checks>


## Description 

### PR #1524 

Fix #1522, add printf format casts

Uses (int) with %d conversions in`UtAssert_True` and `UtPrintf` for platform portability.

### PR #1520 

Fix #1505, accept ""NULL"" as entry point

Specifying the special string NULL as the entry point in a startup script results in no entry point being called for the library. Equivalent to leaving the field empty. 

### PR #1549 

Fix #1538, add capability to generate multiple tables 

[build system] Adds an `install_custom.cmake` hook that can added to a CPU-specific subdirectory under the ""defs"" directory. This hook can perform extra installation steps as required for the custom implementation.

Tweaks the `add_cfe_tables` function so it can be called from the `install_custom.cmake` script to generate additional/alternative table binary files for that CPU.

`add_cfe_tables` now uses the ""APP_NAME"" parameter to associate the table files with the app library, so the same set of include files can be used. Still allows any unique string to be used as ""APP_NAME"" for backward compatibility. The script will now generate a ""Note"" message to the user if it does not match an application name. 

If the multiple table feature is used, it actually needs to match the application name, or else the include paths may be incomplete.

### PR #1551

Fix #1474, #1552, Resolve API prototype/implementation discrepancies 

Removes discrepancies (return type, parameter names, etc) between function prototypes and implementation. Also fixes some but not all use of `CFE_Status_t` in the implementations. Updates ut-stubs accordingly.

## Authors
 
@jphickey 
@skliper 
@zachar1a",,https://github.com/nasa/cFE/pull/1568
"Fix #1423, Remove deprecated elements","**Describe the contribution**
Fix #1423 - removed deprecated elements

**Testing performed**
Built and ran unit tests, passed

**Expected behavior changes**
None (for those that already compiled with `OMIT_DEPRECATED`)

**System(s) tested on**
 - Hardware: Intel i5
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1567
"Fix #1442, Simplify CFE_FS_SetTimestamp and fix syslog typo","**Describe the contribution**
Fix #1442 - writes the timestamp with one call and updates/fixes the syslog message

 - Now setting success as `CFE_SUCCESS`
 - `CFE_FS_SetTimestamp` now returns `CFE_STATUS_EXTERNAL_RESOURCE_FAIL` if the write doesn't return the correct bytes written
 - Update coverage test checks
 - Updated the functional test to check for `CFE_SUCCESS` vs `OS_SUCCESS`
 - Updated check of status in `cfe_tbl_task_cmds.c` to `CFE_SUCCESS`

**Testing performed**
Built and ran unit tests, passed.

**Expected behavior changes**
Updated syslog, returns an actual error code if there is an error.

**System(s) tested on**
 - Hardware: Docker on laptop
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1566
"Fix #1455, Add CFE_SB_DestinationD tag and use for pointers","**Describe the contribution**
Fix #1455 - added CFE_SB_DestinationD tag and used for the linked list pointers

**Testing performed**
Built unit tests, ran sb and passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Docker on laptop
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1565
"Fix #1476, Use CFE_MSG_SequenceCount_t for seqcnt type","**Describe the contribution**
Fix #1476 - fixed type for seqcnt

**Testing performed**
Built all unit tests, ran sbr tests and passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Docker on laptop
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1564
"Fix #1561, use OSAL script to generate API guide","**Describe the contribution**
Instead of including the OSAL API guide templates and pages in the CFE repo, invoke the build script now provided in
the OSAL repo itself.

Fixes #1561 

**Testing performed**
Build full documentation, including OSAL API guide, confirm same as it was

**Expected behavior changes**
None, documentation build only

**System(s) tested on**
Ubuntu

**Additional context**
Depends on nasa/osal#1033

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1563
"Fix #1485, Document CFE_ES_PoolCreateEx NumBlockSizes error handling","**Describe the contribution**
Fix #1485 - updated documentation to match implementation

**Testing performed**
CI - documentation only

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1562
Remove OSAL API guide from CFE,"**Is your feature request related to a problem? Please describe.**
In nasa/osal#1033 the scripts for generating the OSAL API guide are now included in the OSAL repo, based on what CFE had here.  With this, it should not be necessary to include the OSAL documentation in the CFE repo any longer.

**Describe the solution you'd like**
Remove the OSAL API guide config/templates from CFE, and call the OSAL script as a subdirectory to build the OSAL API documentation.

**Additional context**
Depends on nasa/osal#1033 being merged first (or at the same time)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, docs, build-system",https://github.com/nasa/cFE/issues/1561
"Fix #1494, Documentation cleanup in TBL/TIME","**Describe the contribution**
Fix #1494 - minor documentation cleanup in TBL/TIME from code review

**Testing performed**
CI - documentation only

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1560
Move `CFE_TIME_Local1HzISR` internal (no longer an API),"**Is your feature request related to a problem? Please describe.**
Since it's set up and registered by the TIME service via `CFE_TIME_Local1HzCallback`, it no longer needs to be exposed.

**Describe the solution you'd like**
Move prototype internal

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1559
"Fix #1507, Document TblName as app specific","**Describe the contribution**
Fix #1507 - replaces ""processor specific"" comments with app specific in relation to table name and also refers to the ""raw table name"" instead of overloading ""table name""

**Testing performed**
CI - documentation only

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1558
"Fix #1548, Include verify headers to validate config","**Describe the contribution**
Fix #1548 - includes the verify.h headers in service *_task.c file to verify config settings

**Testing performed**
Build and ran unit tests w/ default config (passed)
Made an ES config invalid and confirmed it errored on build

**Expected behavior changes**
Actually runs the config verification macros

**System(s) tested on**
 - Hardware: Docker on laptop
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
Eventually the compile time checks could move closer to use, but for now at least this performs the checks as part of service compilation.  Debated running as a separate check in cmake, but preference is to move closer to where it matters vs further away.  We dropped them once, hopefully we'll be less likely to drop them in the future when it's actually in the code.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1557
"Fix #1441, Replace Header Content Type magic number.","**Describe the contribution**
Fixes #1441
Changes the magic number to the defined value. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1556
"Fix #1554, add doxygen aliases for OSAL parameter/retvals","**Describe the contribution**

Adds ""nonnull"", ""nonzero"", and ""covtest"" tags to mark parameters and return values in documentation.  This info is helpful when
auditing the test cases.

Fixes #1554

**Testing performed**
Build osalguide documentation, confirm output in the generated HTML

**Expected behavior changes**
Documentation only, no FSW.
Doxygen parameters and retvals can now be marked accordingly

**System(s) tested on**
Ubuntu

**Additional context**
This markup will be required for some of the OSAL return value verifications

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",docs,https://github.com/nasa/cFE/pull/1555
Documentation tag to indicate return vals that are not tested in functional test,"**Is your feature request related to a problem? Please describe.**
The pattern employed in OSAL (and CFE) is that functions should list all directly-generated return values from an implementation as `@retval` tags in doxygen markup.  These are then cross referenced between the test logs to ensure that all documented return value are tested, and all tested return values are documented.

Coverage test should be able to exercise all values all the time, but functional test may not be able to exercise all of them.  In particular the ones which depend on a failure of the underlying system call are not likely to be trigger-able from a functional test environment.

**Describe the solution you'd like**
These return codes should be marked in the doxygen as being ""coverage test only"".  This will capture the fact that this has been checked/examined and the functional test is not expected to reproduce this value.

**Describe alternatives you've considered**
The retval statements could be entirely removed if they are not trigger-able in a functional test environment.  (Many are pass-through values from the low level impl, but probably not all of them)

**Additional context**
This info is valuable not only for this test/documentation round but also any future audits of these test cases by projects and/or future releases.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, docs",https://github.com/nasa/cFE/issues/1554
"Fix #1446, Remove unused EVS LogMode defines","**Describe the contribution**
Removed unused EVS LogMode defines and references to these defines.

Fixes #1446 

**Testing performed**
Steps taken to test the contribution:
1. Build and run unit tests

**Expected behavior changes**
There are no behavior changes. Everything continues to run the same.

**System(s) tested on**
 - OS: Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza, NASA GSFC code 582
","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1553
"Update ut-stubs related to prototype/implementation scrub, #1474/#1551","**Is your feature request related to a problem? Please describe.**
Prototype/implementation discrepancies were resolved in #1551, but ut-stubs were not updated.

**Describe the solution you'd like**
Update ut-stubs

**Describe alternatives you've considered**
None

**Additional context**
#1474 and #1551

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1552
"Fix #1474, #1552, Resolve API prototype/implementation discrepancies","**Describe the contribution**
Fix #1474 - This checks prototypes against implementation and fixes any differences (return type, parameter names, etc).  For the most part implementation was considered truth (fixed prototype) except for CFE_Status_t return type change.  Also fixes some but not all use of CFE_Status_t in the implementations.

Fix #1552 - note completed ut-stub updates after CCB, added in since they are trival.

Follow on work needed - Internal use of CFE_Status_t (#921)

**Testing performed**
Built and ran unit tests, all passed.  Built usersguide and confirmed no errors.

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Docker on laptop
 - OS: Ubuntu 18.04
 - Versions: Bundle main + these commits

**Additional context**
Builds on commit from @zachar1a submitted in #1531, now closed as duplicate to this PR

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC
Zachary Gonzalez - Individual","CCB:Approved, community",https://github.com/nasa/cFE/pull/1551
Small typos in developers guide,"**Describe the bug**
""Definition"" and ""Negligible"" are misspelled in the developers guide. ",enhancement,https://github.com/nasa/cFE/issues/1550
"Fix #1538, add capability to generate multiple tables","Adds a ""install_custom.cmake"" hook that can be put into a CPU-specific subdirectory under the ""defs"" directory, that can perform extra installation steps as required for the project/mission.

Tweaks the ""add_cfe_tables"" function such that it can also be called from the install_custom.cmake script to generate additional/alternative table binary files for that CPU.

The main update is that it uses the ""APP_NAME"" parameter to associate the table files with the app library, so the same set of include files can be used.  This relies on the target-scope properties being used.  Historically that string wasn't verified, it could have been any unique string, but now it should match the app if this is to work as expected.

**Describe the contribution**
Fixes #1538 

**Testing performed**
Add multiple/alternative table definitions for sample_app in a local 2-cpu configuration.  Confirm that all table files are built and installed to the staging area correctly, and that sample_app can be tweaked to load one of the alternatives, just by changing the filename it loads.

**Expected behavior changes**
Because the ""APP_NAME"" (1st parameter) of `add_cfe_tables` was never validated historically, it just had to be unique, this still allows any string for backward compatibility.  It will generate a new ""Note"" message to the user if it does _not_ match an application name, but it is still accepted.

If the multiple table feature is used, it actually needs to match the application name, or else the include paths may be incomplete.

**System(s) tested on**
Ubuntu

**Additional context**
See also nasa/sample_app#148

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, build-system",https://github.com/nasa/cFE/pull/1549
"cfe_*_verify.h files aren't included anywhere, so error checks aren't being applied","**Describe the bug**
```
$ find ./ -name ""*_verify.h""
./modules/sb/fsw/src/cfe_sb_verify.h
./modules/time/fsw/src/cfe_time_verify.h
./modules/tbl/fsw/src/cfe_tbl_verify.h
./modules/evs/fsw/src/cfe_evs_verify.h
./modules/es/fsw/src/cfe_es_verify.h
```
```
$ grep -r ""_verify.h"" *
$
```

**To Reproduce**
Can also test by providing an invalid parameter.  I set:
`#define CFE_PLATFORM_ES_APP_SCAN_RATE 1000000`
which should have triggered:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/es/fsw/src/cfe_es_verify.h#L74-L76

**Expected behavior**
Verifications should be performed

**Code snips**
NA

**System observed on:**
 - Hardware: Docker on laptop
 - OS: Ubuntu 18.04
 - Versions: Bundle main

**Additional context**
#1547

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/1548
"`cfe_time_verify.h`, sample platform and sample mission headers require stdbool.h to appropriately evaluate `true` and `false`","**Describe the bug**
Without stdbool.h included, both true and false evaluate to 0 for the preprocessor, so tests in `cfe_time_verify.h` will fail to check for exclusive settings.

**To Reproduce**
```
cd modules/time/fsw/src
ln -s ../../../../cmake/sample_defs/cpu1_platform_cfg.h cfe_platform_cfg.h
ln -s ../../../../cmake/sample_defs/sample_mission_cfg.h cfe_mission_cfg.h 
gcc -E cfe_time_verify.h
```
results in:
```
# 1 ""cfe_time_verify.h""
# 1 ""<built-in>""
# 1 ""<command-line>""
# 31 ""<command-line>""
# 1 ""/usr/include/stdc-predef.h"" 1 3 4
# 32 ""<command-line>"" 2
# 1 ""cfe_time_verify.h""
# 35 ""cfe_time_verify.h""
# 1 ""cfe_mission_cfg.h"" 1
# 36 ""cfe_time_verify.h"" 2
# 1 ""cfe_platform_cfg.h"" 1
# 37 ""cfe_time_verify.h"" 2
cfe_time_verify.h:45:2: error: #error Cannot define both CFE_PLATFORM_TIME_CFG_SERVER and CFE_PLATFORM_TIME_CFG_CLIENT as true!
 #error Cannot define both CFE_PLATFORM_TIME_CFG_SERVER and CFE_PLATFORM_TIME_CFG_CLIENT as true!
...
```

**Expected behavior**
Should only fail if both `CFE_PLATFORM_TIME_CFG_CLIENT` and `CFE_PLATFORM_TIME_CFG_SOURCE` are defined as `true`

**Code snips**
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_verify.h#L43-L51

**System observed on:**
 - Hardware: Docker on laptop
 - OS: Ubuntu 18.04
 - Versions: Bundle main

**Additional context**
Note fairly hidden, since `stdbool.h` is included in osal/src/os/inc/common_types.h.  Only observable if these headers are included from a file that doesn't already include osal standard headers.

Also `cfe_time_verify.h` isn't actually included anywhere (#1548)

**Reporter Info**
Jacob Hageman - NASA/GSFC","bug, CFS-43",https://github.com/nasa/cFE/issues/1547
Use `CFE_TIME_ClockState_Enum_t` in cmd/tlm and handling,"**Is your feature request related to a problem? Please describe.**
Defined as int16 even though a type is available:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.c#L764
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.c#L712
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.h#L192
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.h#L404
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_msg.h#L768-L770
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_msg.h#L887
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_msg.h#L919-L920
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_msg.h#L990-L991
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.c#L396
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.c#L710
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_utils.h#L398

**Describe the solution you'd like**
Use `CFE_TIME_ClockState_Enum_t`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43, draco-rc1",https://github.com/nasa/cFE/issues/1546
Factor out duplicate code in `CFE_TIME_CalculateUTC` by using `CFE_TIME_CalculateTAI`,"**Is your feature request related to a problem? Please describe.**
Duplicated code:
CFE_TIME_CalculateUTC

**Describe the solution you'd like**
UTC = TAI - LeapSeconds.  Use the utility function instead of duplicating logic to get TAI.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1545
Improve `CFE_TIME_GetReference` error handling,"**Is your feature request related to a problem? Please describe.**
Hard coding Retry count to 4 is a bit ""magic"", not clear how much margin this has, not clear statistically how may conflicts are occurring, no error reporting, no way for the calling routine to take action or track, not clear even if these values are always required to be in sync or what happens if they aren't, not obvious what is intended here.

**Describe the solution you'd like**
Clarify design, track/monitor/report performance/errors.  If there's uses where it's critical, may need to deconflict (protect query from update).  Maybe provide API that's slower but always correct, vs faster but possibly invalid if that's really a need.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1544
`CFE_TIME_QueryResetVars` misnomer,"**Is your feature request related to a problem? Please describe.**
`CFE_TIME_QueryResetVars` actually reads in and sets variables, so ""Query"" isn't a great verb to use.

**Describe the solution you'd like**
Rename (maybe `RestoreFrom` or similar)

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1543
Time sync callbacks only called when the tone is marked as good,"**Is your feature request related to a problem? Please describe.**
Time sync callbacks may be desired even if `!IsToneGood`.

**Describe the solution you'd like**
Consider optional notification regardless of tone ""goodness""

**Describe alternatives you've considered**
Not really clear on the use case where `!IsToneGood` but the synch callback is desired.  It's really just a check if it's within the 1 Hz tolerance, which should be true even if it's virtual.  If configured as a server and virtual, the tone should always be good.  If not virtual and there's an external sync, should only call if the 1Hz is within tolerance.  If not virtual and no external sync, then the ISR wouldn't get called anyways, so it wouldn't call `CFE_TIME_NotifyTimeSynchApps`, so not clear why changing the internal check against `IsToneGood` would matter.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC

NOTE - requested more information from commenter.
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1542
Combine #if/#endif directives into #if/#else/#endif in `CFE_TIME_Tone1HzISR`,"**Is your feature request related to a problem? Please describe.**
Mutually exclusive logic:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_tone.c#L1051-L1064

**Describe the solution you'd like**
Use #if/#else/#endif

**Describe alternatives you've considered**
#302 would likely make this obsolete

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1541
"Remove ""return;"" from last line of void functions","**Is your feature request related to a problem? Please describe.**
""return;"" at last line in void function is redundant.

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43, draco-rc4",https://github.com/nasa/cFE/issues/1540
"Remove empty `#if`/`#endif` blocks in TIME for tone is/was, comment is sufficient","**Is your feature request related to a problem? Please describe.**
Pointless empty block, comment is enough:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_tone.c#L644-L645
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_tone.c#L676-L677

**Describe the solution you'd like**
Remove, also indent comments (if autoformatting doesn't conflict).

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1539
Support multiple/alternative table definitions,"**Is your feature request related to a problem? Please describe.**
Some users have requested the ability to generate multiple different table files/configurations as part of the build, to represent different hardware configurations.  This way, they can choose the active configuration at install time (by choosing which file gets copied to the target) or at run time, by loading a different table file.

**Describe the solution you'd like**
Currently the ""add_cfe_tables"" does not directly support this, but with a little work it should be able to.  This requires adding an ""install"" hook so the user has a proper place to call this function to generate customized table files.

**Describe alternatives you've considered**
While this is possible to some degree with the current build system, all decisions are made at build time.  For instance the C preprocessor can be used (via e.g. add_definitions) to select different table values based on build-time configurations.  Alternatively, the user can write their own script to compile a C file and call `elf2cfetbl` on it, but it can be difficult to determine the proper include paths and compile definitions.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, build-system",https://github.com/nasa/cFE/issues/1538
Replace hardcoded message limits in TIME services,"**Is your feature request related to a problem? Please describe.**
Hard coded as 4, although if there's 2 messages in the pipe that'd be an issue...
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_task.c#L201
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_task.c#L217
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_task.c#L233

**Describe the solution you'd like**
The default subscriptions just use `CFE_PLATFORM_SB_DEFAULT_MSG_LIMIT` so could just use it to keep subscriptions the same, even though 2 would be bad it's likely handled by the related verification logic.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43, draco-rc1",https://github.com/nasa/cFE/issues/1537
Factor out duplicate logic in `CFE_TIME_RegisterSynchCallback` and `CFE_TIME_UnregisterSynchCallback`,"**Is your feature request related to a problem? Please describe.**
`CFE_TIME_RegisterSynchCallback` and `CFE_TIME_UnregisterSynchCallback` duplicate logic.

**Describe the solution you'd like**
Refactor.

**Describe alternatives you've considered**
`CFE_TIME_UnregisterSynchCallback` seems overly restrictive.  Since it's a single entry per App, could just set it as `NULL`.  Note `CFE_TIME_CleanUpApp` does set it to `NULL` without restrictions.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1536
Refactor or replace API's related to `CFE_TIME_GetReference`,"**Is your feature request related to a problem? Please describe.**
`CFE_TIME_GetSTCF`, `CFE_TIME_GetMET`, `CFE_TIME_GetMETSeconds`, `CFE_TIME_GetMETSubsecs`, `CFE_TIME_GetLeapSeconds` all just call `CFE_TIME_GetReference`.

**Describe the solution you'd like**
Could just expose and use CFE_TIME_GetReference.

**Describe alternatives you've considered**
If the structure needs to stay internal, consider factoring out common logic.

**Additional context**
Code review.  Related to #1500

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1535
Replace if's with table and loop in `CFE_TIME_GetClockInfo`,"**Is your feature request related to a problem? Please describe.**
`CFE_TIME_GetClockInfo` could just be a table/loop instead of individual `if`'s:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_api.c#L204-L288

**Describe the solution you'd like**
Simplify with table/loop

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1534
Declare leap seconds as unsigned,"**Is your feature request related to a problem? Please describe.**
`int16` type used for `LeapSeconds` in command payload:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_msg.h#L749-L752

also in HK:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_msg.h#L922-L926

API's:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_api.c#L298

**Describe the solution you'd like**
Convert to `uint16`.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, invalid, CFS-43",https://github.com/nasa/cFE/issues/1533
Define and apply naming standard for event ID definitions,"**Is your feature request related to a problem? Please describe.**
Some services include the error type as part of the name of the EID/EventID/Event id, others don't:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/inc/cfe_tbl_events.h#L68
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/inc/cfe_time_events.h#L60

**Describe the solution you'd like**
Define and apply standard naming pattern.  Suggest append either _INFO_EID, DEBUG_EID, ERR_EID, or CRIT_EID to the name.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1532
"Fix #1474, changing return type from int32 to CFE_Status_t","
**Describe the contribution**
- Fix #1474 
Changing the implementation return types to CFE_Status_t
to match the function prototypes.

**Testing performed**
None

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Contributor Info 
Individual
Zachary Gonzalez
",duplicate,https://github.com/nasa/cFE/pull/1531
"Fix #1550, typos in developer guide","**Describe the contribution**

This commit fixes a few minor typos in the developer guide. Please let me know if I need to file issues for such trivial changes, too :)

**Testing performed**

None.

**Expected behavior changes**

None.

**System(s) tested on**

None.

**Additional context**

None.

**Third party code**

None.

*Individual CLA is on file*","CCB:FastTrack, docs, community",https://github.com/nasa/cFE/pull/1530
"Simplify TBL `LoadInProgress` indication, and possibly the buffered table concept in general","**Is your feature request related to a problem? Please describe.**
Strange indexing/math for double buffered vs non-double buffered tables for `LoadInProgress`:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L1086-L1101

Really the whole ""double buffered"" table concept is a bit strange/limited.

**Describe the solution you'd like**
Separate into explicit shared buffer index and table buffer index or other method to deconflict meaning.

**Describe alternatives you've considered**
Really ""double buffered"" is the capability to have 2 versions of a table in memory and be able to switch.  Could generalize to define the number of tables in memory, and be able to load to any of them, activate whichever one is request, etc.  If the selected table to load to is active, then use a shared buffer and if not just directly load.  Design collapses and unique logic for ""double buffering"" goes away (for just 1 table in memory it's the ""single buffer"" use case, more than 1 is an enhanced version of ""double buffer"" but still allows user to load to whatever index they want).  Could have an option to ""disallow"" loads to active table (single buffer would reject reloads, multiple would prevent loading active index).

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1529
Add option to send `CFE_TBL_NO_SUCH_TABLE_ERR_EID` event from `CFE_TBL_FindTableInRegistry`,"**Is your feature request related to a problem? Please describe.**
Repeated pattern in TBL to find a table and if not found send the same event:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L385-L392
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L678-L682
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L947-L951
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L1027-L1031
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L1315-L1319
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L1457-L1461

**Describe the solution you'd like**
Optionally (if needed) send event in `CFE_TBL_FindTableInRegistry`

**Describe alternatives you've considered**
Other refactoring as suggested in #1504

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1528
Implement single pattern for command handler returns,"**Is your feature request related to a problem? Please describe.**
- ES ignores command handler returns, just returns CFE_SUCCSS (increments counters within handler)
- EVS captures the return and increments appropriate counter as part of the main command processing routine
- TBL defines `CFE_TBL_CmdProcRet_t` but doesn't use it consistently, example:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.h#L311
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.h#L337-L338

**Describe the solution you'd like**
Utilize a consistent pattern.  Suggest using CFE_Status_t and defined error types.  This allows command handlers to use APIs and not need to convert error codes.

**Describe alternatives you've considered**
None

**Additional context**
Code review, also related to issue #921 to consistently use `CFE_Status_t`

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1527
TBL owner app ID logic should utilize ID utilities/defines,"**Is your feature request related to a problem? Please describe.**
TBL services defines `CFE_TBL_NOT_OWNED` as `CFE_ES_APPID_UNDEFINED` and then tests for equality, just ends up mixing concepts.  The relation isn't obvious and it's not clear CFE_TBL_NOT_OWNED is actually an (undefined) ID.

**Describe the solution you'd like**
Keep it simple, just use the valid ID macros and associated definition for undefined if it's not owned.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1526
Overloaded internal return codes in TBL service,"**Is your feature request related to a problem? Please describe.**
Multiple return codes are defined as `-1`, this defeats the purpose of named codes and doesn't allow for unique handling, checking the error code is also not actually testing that the expected incorrect code was returned.
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.h#L50
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task.h#L59-L78

Note there's at least one cases where an index is initialized to one of these error codes, which is especially fragile (#1519)

**Describe the solution you'd like**
Defined unique error codes, if they every get passed out an API really they should be defined in cfe_error.h

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1525
"Fix #1522, add printf format casts","**Describe the contribution**
Use (int) with %d conversions for portability

Fixes #1522 

**Testing performed**
Build and run unit tests on RTEMS

**Expected behavior changes**
Build now succeeds

**System(s) tested on**
RTEMS 4.11.3

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1524
"Fix #1522, add printf format casts","**Describe the contribution**
Use (int) with %d conversions for portability

Fixes #1522 

**Testing performed**
Build and run unit tests on RTEMS

**Expected behavior changes**
Build now succeeds

**System(s) tested on**
RTEMS 4.11.3

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",duplicate,https://github.com/nasa/cFE/pull/1523
printf format issue on RTEMS,"**Describe the bug**
When compiling the test app under RTEMS, a build failure occurs:
```
/home/joe/code/cfecfs/github/cfe/modules/cfe_testcase/src/es_task_test.c: In function 'TestCreateChild':
/home/joe/code/cfecfs/github/cfe/modules/cfe_testcase/src/es_task_test.c:89:5: error: format '%d' expects argument of type 'int', but argument 7 has type 'uint32' [-Werror=format=]
     UtAssert_True(countCopy == count || countCopy == count + 1, ""countCopy (%d) == count (%d)"", countCopy, count);
     ^
```

**To Reproduce**
Build system for RTEMS 4.11 with unit tests enabled, and `es_task_test.c` will fail to build.

**Expected behavior**
Build should succeed.

**System observed on:**
RTEMS 4.11

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1522
`CFE_TBL_Load` translates a positive return from the validation function to an error (-1),"**Is your feature request related to a problem? Please describe.**
Although it's documented in the API that a positive return is considered an error (and overwrites the return status), this is out-of-family with the rest of cFE.
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/core_api/fsw/inc/cfe_tbl.h#L163-L169
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_api.c#L820-L829

Also hardcoding as -1 isn't all that helpful, probably worth a unique error code (if this error is kept).

**Describe the solution you'd like**
Seems like the code is trying to do too much.  If != success just send the error event and return the status (it's the Apps problem to handle it), if it doesn't comply w/ cFS error code standards it's outside the scope of cFE to do something special with it.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1521
"Fix #1505, accept ""NULL"" as entry point","**Describe the contribution**
Recognize the special string ""NULL"" to indicate no entry point should be called for the library.  Equivalent to leaving the
field empty. 

Fixes #1505 

**Testing performed**
Build and sanity check CFE, and use a startup script that loads a CFE_LIB with a NULL entry point
Run all unit tests.

**Expected behavior changes**
Specifying the special string `NULL` as the entry point in a startup script should work as it did in previous versions - skips the entry point.

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1520
Refactor `CFE_TBL_SearchCmdHndlrTbl` to unmix error codes with indexes and simplify loop,"**Is your feature request related to a problem? Please describe.**
Mixes error codes (at least by name) with an index:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task.c#L340

also the do/while loop is unnecessarily complex in how it exits (has to check for last entry twice).

**Describe the solution you'd like**
Consider a simpler while or for loop with a break, don't mix index w/ a command code.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1519
`CFE_TBL_NotifyTblUsersOfUpdate` misnomer,"**Is your feature request related to a problem? Please describe.**
`CFE_TBL_NotifyTblUsersOfUpdate` just marks the table as updated, doesn't ""notify""

**Describe the solution you'd like**
Clarify name to reflect what is actually done

**Describe alternatives you've considered**
None

**Additional context**
Code review - just an internal naming change

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1518
Consistent loop implementation in `CFE_TBL_FindTableInRegistry` and `CFE_TBL_FindFreeRegistryEntry`,"**Is your feature request related to a problem? Please describe.**
Loops could be the same but aren't:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L510-L525
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L543-L556

**Describe the solution you'd like**
Consistent implementation

**Describe alternatives you've considered**
None

**Additional context**
Code review - note this is style suggestion only

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1517
Remove local/duplicate file name length check from `CFE_TBL_LoadFromFile`,"**Is your feature request related to a problem? Please describe.**
Filename length is checked by OS_OpenCreate, doesn't need a local check:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L811-L819

**Describe the solution you'd like**
Use `OS_OpenCreate` return code to report the appropriate error

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1516
Remove unnecessary `memset` in `CFE_TBL_LoadFromFile`,"**Is your feature request related to a problem? Please describe.**
Memset followed by writing everything except last char:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L903

**Describe the solution you'd like**
Just do the `strncpy` then `WorkingBufferPtr->DataSource[sizeof(WorkingBufferPtr->DataSource)-1] = '\0';`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1515
Use XOR for ping-pong buffer in TBL,"**Is your feature request related to a problem? Please describe.**
Current pattern use for the active/inactive buffer index isn't as obvious/common (`1 - index`), examples but needs full scrub:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L680
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L711

**Describe the solution you'd like**
`index^1`

**Describe alternatives you've considered**
Current implementation works, this is just style

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1514
"Fix #1512, Add Coding Standard Rules in CodeQL","**Describe the contribution**
Fix #1512
Added the duplicate jobs action to avoid duplicate jobs from running. Added a separate job for coding standard queries. Created two configuration files, one for default queries and security queries and another for jpl rules. 

**Testing performed**
Testing done on forked repository, ArielSAdamsNASA/cFE. https://github.com/ArielSAdamsNASA/cFE/actions/runs/861283509/workflow

Jobs were failing when the entire path of the configuration file were not used. Have to use nasa/cFE/.github/codeql/config-name@branch-name. The branch must be included in the path. 

The CodeQL analysis workflow will fail for this PR since it is calling for a configuration file in main the main branch. It will not work until the configuration files are merged into main. 

In the screenshot is the same workflow as in this pull request, but the configuration path is changed to the forked repo and tested branch. 

![image](https://user-images.githubusercontent.com/69638935/119024913-36fa2580-b969-11eb-9aac-ede0002804a0.png)

**Expected behavior changes**
There should be one job for security queries and one job for JPL and MISRA queries. 

**Third party code**
Skip duplicate workflows license: https://github.com/fkirc/skip-duplicate-actions/blob/master/LICENSE

CodeQL license: https://github.com/github/codeql-action/blob/main/LICENSE

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal","CCB:Approved, continuous-integration",https://github.com/nasa/cFE/pull/1513
Implement JPL Rules in CodeQL,"**Is your feature request related to a problem? Please describe.**
CodeQL does not use JPL rules, which is used in the upcoming coding standard. 

**Describe the solution you'd like**
Implement JPL rules for CodeQL. Continue using the security queries, but keep them separate from the JPL results. Can use two different workflows, one for the coding standard and one for the security queries. 

**Describe alternatives you've considered**
Might be able to use one workflow, as long as the results can be easily identified as a coding standard issue or security issue. 

**Additional context**
JPL queries are found here: https://github.com/github/codeql/tree/main/cpp/ql/src/JPL_C

**Requester Info**
Ariel Adams, ASRC Federal ","enhancement, continuous-integration",https://github.com/nasa/cFE/issues/1512
Convert to static array sizes for string parameters - `name[static SIZE]` and scrub string handling,"**Is your feature request related to a problem? Please describe.**
Many APIs and even internal functions require specific minimum string sizes to avoid a potential buffer overrun, yet take simple pointers, i.e. `char *`.  Some tools complain about strcpy/sprintf/etc, but the sized versions aren't any safer if the passed in string is too short.

Example case:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L597-L607

**Describe the solution you'd like**
Leverage C99 checks on sized parameter arrays, which also will protect at compile time from NULL inputs.  Once minimum sizes are guaranteed, then revisit string comparison/manipulation calls to avoid buffer overruns based on these enforced minimums.

Note not backwards compatible where pointers are passed in vs the array.  Also would REQUIRE the removal of all NULL pointer test cases and checks (would cause compile errors or dead code respectively).

**Describe alternatives you've considered**
None

**Additional context**
Code review, related to #1465

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1511
Write `CFE_TBL_EarlyInit` errors to syslog,"**Is your feature request related to a problem? Please describe.**
Multiple errors are not written to the syslog:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L92-L96
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L101-L105
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L108-L114
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L122-L128

**Describe the solution you'd like**
Report errors

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1510
Possible race conditions in table sharing if Sharing/unsharing/unregistering while managing/updating/accessing ,"**Describe the bug**
Related to #1493, no built in protection from possible race conditions with global table data if tables are shared/unshared/unregistered currently with other management functions from multiple tasks.

`CFE_TBL_GetInfo` example:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L1448-L1454

`CFE_TBL_Modified` example:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L1562-L1572

Note, looks avoidable if `CFE_TBL_Register` and `CFE_TBL_Share` happen at startup and shared tables don't `CFE_TBL_Unregister`. But still need to keep in mind blocking related to management and how updates work.

**To Reproduce**
Via inspection...

**Expected behavior**
No race.  Add locks or disallow API use in certain system states.  Consider if simplification is possible based on actual use cases.

**Code snips**
See above

**System observed on:**
NA - inspection

**Additional context**
Code review

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/1509
cFE Integration candidate: 2021-05-18,"## Context

Part of <https://github.com/nasa/cFS/pull/259>

## Testing

cFE Checks <https://github.com/nasa/cFE/pull/1508/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/259/checks>

## Description

### PR #1482

Fix #1419, Resolve sequence count auto-increment rollover bug

Adds `CFE_MSG_GetNextSequenceCount` so the auto-increment of the local sequence counter works when sending tlm (and increment is enabled).  Updates unit tests and adds the old-style stub.  The unit tests check for the correct rollover behavior.Sequence count will roll over based on the mask.  Before the fix the sequence counter would ""stick"" in telemetry until the passed in value rolled over.

### PR #1491, *Community Contribution!*

Fix #1421, Correctly format code block section terminator

Markdown renders correctly after fixing fixing code block termination. 

### PR #1530, *Community Contribution!* 

Fix #1550, typos in developer guide 

## Authors

@skliper 
@jbohren-hbr 
@tniessen 
",community,https://github.com/nasa/cFE/pull/1508
`TblName` not processor specific (comment clarification),"**Is your feature request related to a problem? Please describe.**
Multiple locations refer to `TblName` as ""processor specific"", which doesn't make sense since it's just AppName.TableName.  Even if the table is processor specific, it should likely have a non-processor specific name such that apps are portable.

Examples:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L92-L94
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_tbl.h#L73-L76
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_tbl.h#L212-L218
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_tbl.h#L682-L688
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_internal.c#L606
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_internal.h#L246-L256

Note `TblName` is described as `ApplicationName.TableName` which is somewhat circular, but this could be addressed as part of #1412 (similar to #1401).  Suggestions - FullName, QualifiedName, ResourceName...

**Describe the solution you'd like**
Remove processor specific language

**Describe alternatives you've considered**
None

**Additional context**
#1401 is similar wrt CDS names
#1412 is a general issue related to resource naming

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, docs, cFE-TBL",https://github.com/nasa/cFE/issues/1507
Use `TblName` in TBL reporting when available,"**Is your feature request related to a problem? Please describe.**
Inconsistent reporting of table ""context"" throughout `CFE_TBL_Register` (and likely others).

Just 'Name' (no app) example:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L103

No table context at all:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L263-L265

Re-assembled name:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L373-L375

Actual `TblName` use:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L183-L185

**Describe the solution you'd like**
Just use `TblName`, it's assembled right at the start.  Consistent syslog format (see also #1325) of ""function: TblName - message"" or similar.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1506
"""NULL"" entry no longer supported for libraries in startup script","**Describe the bug**
Set sample_lib entry point to NULL:
```
OS_GenericSymbolLookup_Impl():118:Error: NULL: ./cf/sample_lib.so: undefined symbol: NULL
1980-012-14:04:03.48915 ES Startup: Could not find symbol:NULL. EC = 0xFFFFFFFF
```

**To Reproduce**
See above.

**Expected behavior**
NULL should skip the symbol lookup and load.  Note it does skip if the field is just left empty, as in:
`CFE_LIB, /cf/fs_lib.so, , FS_LIB, 0, 0, 0x0, 0;`

**Code snips**
Only skips if empty string:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/es/fsw/src/cfe_es_apps.c#L453
Probably could just convert ""NULL"" to empty in the CFS_LIB processing section.

**System observed on:**
 - Hardware: Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main

**Additional context**
Found by @excaliburtb

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/1505
"Refactor TBL to reduce complexity, improve maintainability, reduce technical debt","**Is your feature request related to a problem? Please describe.**
TBL functions are complex and utilize many modes.  Complex enough that minor maintenance  is avoided due to the high likelihood of breaking something.

Other code review notes to address as part of the refactor:
- If block could go inside else at line 214
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L225-L230

- Free handle is consumed even if status is already an error (and not returned to the pool)
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L236

- Similar logic in `CFE_TBL_Register` for single and double buffered tables, factor out duplication
- May be able to shorten lock in `CFE_TBL_Register` to just the resource allocation parts (although since it's typically just part of startup shouldn't be an issue)
- Multiple returns in `CFE_TBL_Load` should be refactored out
- `CFE_TBL_Manage` loop could be a do/while and only loop if additional management required, although really the only two things that could be done in one manage are validate and dump (if an update is scheduled it's first and exits loop), although these are globals so it seems like a validate could run before an update... related to #1493
- Consider using `CFE_TBL_Load` from `CFE_TBL_LoadFromFile`
- `CFE_TBL_LoadCmd` should use `CFE_TBL_LoadFromFile`

**Describe the solution you'd like**
Break down large complex functions.

**Describe alternatives you've considered**
Note grouped all the suggested refactor changes here, could break out smaller tasks and implement one by one but that may result in extra work.

**Additional context**
Code review, related to #1493 in that sharing isn't clearly defined

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1504
Consolidate command payload base types,"**Is your feature request related to a problem? Please describe.**
Many services define a service specific no-arg payload.  There's also many filename only commands with repeated definitions, and numerous others.

**Describe the solution you'd like**
Consolidate, define a common set and standardize parameter names.  Still can utilize unique payload/message names, but just typedef the generic ones.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1503
Use `CFE_TBL_BufferSelect_Enum_t` for `ActiveTableFlag` in TBL,"**Is your feature request related to a problem? Please describe.**
`ActiveTableFlag` not using expected type:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/inc/cfe_tbl_msg.h#L533
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/inc/cfe_tbl_msg.h#L563

**Describe the solution you'd like**
Use `CFE_TBL_BufferSelect_Enum_t`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1502
Update time format to support negative time or unify with OSAL time,"**Is your feature request related to a problem? Please describe.**
Unsigned 32 bit used for seconds in cFE.  Requires unique handing for rollover and avoiding negative time.

**Describe the solution you'd like**
Signed 64 bit seconds, or unify with OSAL time format and provide the necessary conversions.  
Consider typedef of Seconds and Subseconds to support strict checking (if there's still any functions left that take individual elements)

**Describe alternatives you've considered**
None

**Additional context**
Code review, note backwards compatibility issues

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1501
Remove `CFE_TIME_GetMETseconds` and `CFE_TIME_GetMETsubsecs`,"**Is your feature request related to a problem? Please describe.**
No need to support getting the individual fields, just use `CFE_TIME_GetMET`.  Avoids misuse, since individual fields aren't in sync (subseconds could roll between calls, etc).

**Describe the solution you'd like**
Remove/deprecate these extra APIs (confirm against requirements)

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1500
Remove/replace `CFE_TIME_Copy` macro,"**Is your feature request related to a problem? Please describe.**
The stated purpose (copy across different structures with Second/Subsecond fields) really is better avoided by using a common time structure.

**Describe the solution you'd like**
Remove `CFE_TIME_Copy`, use CFE_TIME_SysTime_t which enables simple assignment (x = y),  or replace with more type-safe/inline function.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1499
Define table maximum object name length,"**Is your feature request related to a problem? Please describe.**
Hardcoded length:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_tbl_filedef.h#L60

**Describe the solution you'd like**
Add a local define for reference for cases where sizeoff(ObjectName) isn't appropriate.  Note elf2cfetbl just uses sizeof, so size isn't duplicated anywhere currently.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1498
Use `CFE_TIME_SysTime_t` instead of individual Seconds/subseconds,"**Is your feature request related to a problem? Please describe.**
Inconsistent use/definition of time structure vs individual sec/subsecs, benefits from common structure:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_tbl_api_typedefs.h#L114-L117

**Describe the solution you'd like**
Use `CFE_TIME_SysTime_t`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1497
Remove `CFE_TBL_GetAddresses` and `CFE_TBL_ReleaseAddresses` APIs,"**Is your feature request related to a problem? Please describe.**
These two APIs are out of family, no others take arrays of handles.  Not a significant benefit to maintain this capability.

**Describe the solution you'd like**
Remove these two APIs

**Describe alternatives you've considered**
Could provide handle array API's for all the standard TBL calls (Register, Manage, etc), but really needs a use case since it's rare to see the existing APIs used in the wild.

This isn't really all that great since it doesn't allow for individual error handling.  Maybe ""all or nothing"" sort of error handling is ok, but should be considered in the trade.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-43",https://github.com/nasa/cFE/issues/1496
Embed table modification response actions/notification in `CFE_TBL_ReleaseAddress`,"**Is your feature request related to a problem? Please describe.**
`CFE_TBL_Modified` API that notifies table services the table has been modified could be replaced by an additional parameter to `CFE_TBL_ReleaseAddress`, which might help with table sharing/synchronization since required actions could be completed prior to release.

**Describe the solution you'd like**
Perform ""modification"" response actions as part of `CFE_TBL_ReleaseAddress`.

**Describe alternatives you've considered**
Consider as part of design review related to #1493

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1495
Comments/document cleanup relative to TBL/TIME review,"**Is your feature request related to a problem? Please describe.**
`CFE_TBL_Update`, `CFE_TBL_Validate`, and `CFE_TBL_DumpToBuffer` are all performed by `CFE_TBL_Manage` if there's a pending request.  Clarify in API documentation for all 4 (missing completely from `CFE_TBL_DumpToBuffer`).

s/Addresses/Address, this should cross reference, not self reference:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_tbl.h#L472

Add short description of spacecraft time, it's number of seconds since the epoch as set in mission configuration
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_time.h#L70

Self reference doesn't make sense:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_time.h#L73-L75

There is no API to set or adjust leap seconds or SCTF, this should be done by ground command only:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_time.h#L218-L219
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_time.h#L240-L241

Now called by a timer, not PSP:
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/core_api/fsw/inc/cfe_time.h#L708

HK command handler also sends the table registry packet (if requested) and dumps ""dump-only tables"" that are pending, document:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.h#L126-L127

s/issued/issues:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_task_cmds.c#L1266

Remove commented out verification check using sizeof from cfe_tbl_verify.h:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_verify.h#L76-L81

Remove pointless comment:
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_tone.c#L714-L716

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, cFE-TBL, CFS-43, cFE-TIME",https://github.com/nasa/cFE/issues/1494
Clarify acceptable actions on a shared table along with expected patterns and add functional tests,"**Is your feature request related to a problem? Please describe.**
Currently table sharing management requires careful design or restricting the design space to avoid block/priority concerns.

- There isn't a ""read only"" way to get a table address to restrict capability for management to a single ""owner""
- Since update/management can be done by any app with shared access, blocking/priority has to be managed
- Not immediately clear how the locking/sharing is all intended to work together

**Describe the solution you'd like**
Should clarify the sharing design documentation, there's currently ""hints"" in the APIs and a very short section in the cFE Application Developer's Guide but there aren't functional tests that actually implement/exercise all the sharing patterns or a full description of how it's intended to work.

- Clearly describe how unregistering a shared table is expected to work (or not)
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/src/cfe_tbl_api.c#L655-L658

**Describe alternatives you've considered**
Consider additions/simplification to the sharing model like read only access, etc.  Need to tie to requirements, funding, use cases, etc and trade against the additional complexity.

**Additional context**
Code review, see also #1509

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, unit-test, CFS-43",https://github.com/nasa/cFE/issues/1493
cFE Integration candidate: 2021-05-11,"## Context 

Part of <https://github.com/nasa/cfs/pull/256>

## Testing 

cFE Checks <https://github.com/nasa/cFE/pull/1492/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/256/checks>

## Description

### PR #1487

 Fix #1486, Remove broken travis-ci script 


### PR #1463

Fix #1417, generated coverage stubs for CFE core

Updates CFE core stub libraries to use stubs generated from new UT Assert script. Converts existing stub logic to
a default handler routine.

Moves all of the internal API prototypes from ""core_api"" to the ""core_private"" interface lib.

Fix #1393, Move CFE_FS_RunBackgroundFileDump to internal API

Update #1463, rename hook files to handler


### PR #1451

Fix #1343, OSAL config file simplification 

Adds documentation and comments about how the configuration facility works and where to find information on the complete set of options available

Updates the configuration files in ""sample_defs"" to reflect only those parameters that are set to a non-default value along with information about why the configurable item is changed. 

### PR #1489

Fix #1488, removes --quiet option so files checked go to stdout

### PR #1437

Fix #1436, table object file name 


## Authors
@jphickey 
@skliper 
",,https://github.com/nasa/cFE/pull/1492
"Fix #1421, Correctly format code block section terminator","**Describe the contribution**
- A code block wasn't terminated terminate properly, causing the markdown to not render correctly on GitHub.

Fix #1421

**Testing performed**
1. View on GitHub

**Expected behavior changes**
 - No impact to behavior

**System(s) tested on**
 - N/A

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- Company CLA from Honeybee Robotics on file.","CCB:Approved, docs, community",https://github.com/nasa/cFE/pull/1491
Add ${ARGN} to add_cfe_coverage_test in arch_build.cmake,"**Is your feature request related to a problem? Please describe.**
Trying to build CF unit tests with additional libraries through add_cfe_coverage_test does not work because ARGN is not added in the target_link_libraries call.  

**Describe the solution you'd like**
Add `${ARGN}` into target_link_libraries call in add_cfe_coverage_test so that additional libraries can be given where necessary.

**Describe alternatives you've considered**
Writing my own coverage test addition for my use case, but just adding the ${ARGN} in add_cfe_coverage_test works, so why re-invent?

**Additional context**
The addition should be transparent to any other calls currently in use; it is opt in only.  ARGN should be empty in current use cases (it could not be, but that is unlikely).

**Requester Info**
Alan Gibson  NASA/GSFC 587
","enhancement, unit-test, build-system, community",https://github.com/nasa/cFE/issues/1490
"Fix #1488, Report files checked in cppcheck action","**Describe the contribution**
Fix #1488, removes `--quiet` option so files checked go to stdout

**Testing performed**
CI

**Expected behavior changes**
Reports files checked in CI

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1489
Remove suppression of files checked by cppcheck in action to allow visual confirmation it worked,"**Is your feature request related to a problem? Please describe.**
The ""all"" static analysis check suppresses standard output with `--quiet`, so can't see that it actually did anything

**Describe the solution you'd like**
Remove `--quiet`

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, continuous-integration",https://github.com/nasa/cFE/issues/1488
"Fix #1486, Remove broken travis-ci script","**Describe the contribution**
Fix #1486 - removes broken travis-ci script.  The GitHub action for `Static Analysis / Run cppcheck (cfe)` already exist that cover the required testing.  Note all the travis-ci was doing is the strict cpp check.

**Testing performed**
CI, confirm travis results no longer show up

**Expected behavior changes**
None, CI only

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1487
Remove travis-ci script,"**Is your feature request related to a problem? Please describe.**
The travis-ci script is currently broken and duplicates what's now covered by GitHub actions

**Describe the solution you'd like**
Delete

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, continuous-integration",https://github.com/nasa/cFE/issues/1486
CFE_ES_PoolCreateEx NumBlockSizes error handling,"**Describe the bug**
In the header file of CFE_ES_PoolCreateEx, for parameter NumBlockSizes it says ""If set equal to zero or if greater than 17, then default block sizes are used."" In the code though if NumBLockSizes is greater than CFE_PLATFORM_ES_POOL_MAX_BUCKETS (which is set to 17) then it returns error code CFE_ES_BAD_ARGUMENT.

**Expected behavior**
The header and functionality should match. 

**Reporter Info**
Alex Campbell GSFC","docs, cFE-ES",https://github.com/nasa/cFE/issues/1485
Rename *hooks.c as *handler.c for stubs,"[CCB:2021-05-05](https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-May-05-2021) APPROVED with changes
- Extends ""handler function"" concept from osal to cfe
- Do we have a better naming scheme? We have hooks and handler. 
- Rename the files to `handler.c` instead of `hooks.c`. Open issue in osal to rename as well

_Originally posted by @astrogeco in https://github.com/nasa/cFE/issues/1463#issuecomment-832825759_",invalid,https://github.com/nasa/cFE/issues/1484
Add a CI action to build and execute the cFE coverage tests,"**Is your feature request related to a problem? Please describe.**
CI doesn't build and execute the cFE coverage tests

**Describe the solution you'd like**
Add

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, unit-test, continuous-integration",https://github.com/nasa/cFE/issues/1483
"Fix #1419, Resolve sequence count auto-increment rollover bug","**Describe the contribution**
Fix #1419 - Adds `CFE_MSG_GetNextSequenceCount` so the auto-increment of the local sequence counter works when sending tlm (and increment is enabled).  Updates unit tests and adds the old style stub.  The unit tests check for the correct rollover behavior.

Note - Will need to rebase when autogenerated stubs are merged, will update at that point.

**Testing performed**
Build and execute unit tests, passed

**Expected behavior changes**
Sequence count will roll over based on the mask.  Before the fix the sequence counter would ""stick"" in telemetry until the passed in value rolled over.

**System(s) tested on**
 - Hardware: Local docker
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
Will need to deconflict once autogenerated stubs are merged, #1463.  Note this just fixes the reported bug, and doesn't add any of the other extra functionality discussed as part of #1419.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1482
cFE Integration candidate: 2021-05-04,"## Description

### PR #1418

Fix #810, add ES CDS Functional test

Adds tests for nominal use cases of the ES Critical Data Store API. 


### PR #1429 

Fix #1336, Function comment blocks

[docs] Makes comment blocks in source and header files more consistent for all internal, CFE core APIs. Moves information about the function behavior to its prototype in the header in doxygen format. Comment blocks on the function implementation refer back to the prototype, it does not duplicate the info. Local helper functions that are not separately prototyped, are exceptions to this pattern. Adds intended scope to all functions: global, application-internal, or file/local.

### PR #1414

Fix #1297, Add File Header Management API Functional tests.

Adds new functional tests for nominal uses of FS Header API.


### PR #1415

Fix #1298, add Current Time Functional Test

Adds new functional tests for Time Current API.


## Context

Part of <https://github.com/nasa/cFS/pull/252>.

## Tests
cFE Checks <https://github.com/nasa/cFE/pull/1481/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/252/checks>

## Authors

@jphickey 
@zanzaben ",,https://github.com/nasa/cFE/pull/1481
FS Header Functional Tests,"**Is your feature request related to a problem? Please describe.**
The functional test currently only test the base cases of the API functions. More in depth tests still need to be written.

**Describe the solution you'd like**
Write tests for all the possible cases

**Additional context**
Follow up to #1414

**Requester Info**
Alex Campbell",enhancement,https://github.com/nasa/cFE/issues/1480
CFE Current Time Functional Test,"**Is your feature request related to a problem? Please describe.**
The functional test currently only test the base cases of the API functions. More in depth tests still need to be written.

**Describe the solution you'd like**
Write tests for all the possible cases

**Additional context**
Follow up to #1415

**Requester Info**
Alex Campbell",invalid,https://github.com/nasa/cFE/issues/1479
ES CDS Functional tests,"**Is your feature request related to a problem? Please describe.**
The functional test currently only test the base cases of the API functions. More in depth tests still need to be written.

**Describe the solution you'd like**
Write tests for all the possible cases

**Additional context**
Follow up to #1418

**Requester Info**
Alex Campbell",enhancement,https://github.com/nasa/cFE/issues/1478
cFE ES Child Task API functional tests,"**Is your feature request related to a problem? Please describe.**
The functional test currently only test the base cases of the API functions. More in depth tests still need to be written.

**Describe the solution you'd like**
Write tests for all the possible cases

**Additional context**
Follow up to #1289

**Requester Info**
Alex Campbell",enhancement,https://github.com/nasa/cFE/issues/1477
Use `CFE_MSG_SequenceCount_t` for `seqcnt` in `CFE_SBR_GetSequenceCounter`,"**Is your feature request related to a problem? Please describe.**
Not using `CFE_MSG_SequenceCount_t`:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sbr/fsw/src/cfe_sbr_route_unsorted.c#L172

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42, cFE-SBR",https://github.com/nasa/cFE/issues/1476
Make invalid ID a generic define and use (always 0),"**Is your feature request related to a problem? Please describe.**
Hardcoded zero instead of `CFE_SBR_INVALID_ROUTE_ID` used by `CFE_SBR_IsValidRouteId`:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_private/fsw/inc/cfe_sbr.h#L143

**Describe the solution you'd like**
Define a generic CFE_INVALID_ID (= 0), and confirm it's used everywhere.  

**Describe alternatives you've considered**
At minimum replace this specific use with define.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1475
API Prototype/implementation mismatch scrub,"**Is your feature request related to a problem? Please describe.**
Example from `CFE_MSG_Init`, `CFE_Status_t` vs int32:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/msg/fsw/src/cfe_msg_init.c#L32
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_msg.h#L63

Note numerous others, some noted in TBL.

**Describe the solution you'd like**
General scrub, prototypes across all the headers should match implementation.  Also could remove `extern` per #1319.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42, CFS-43",https://github.com/nasa/cFE/issues/1474
Add helper for `CFE_SB_Write*InfoCmd` to implement common logic,"**Is your feature request related to a problem? Please describe.**
Repeated logic/pattern in `CFE_SB_WriteRouteInfoCmd`, `CFE_SB_WriteMapInfoCmd`, and `CFE_SB_WritePipeInfoCmd`.

**Describe the solution you'd like**
Put common logic in a helper, pass in info.

**Describe alternatives you've considered**
Might even be able to make a generic function in #994 for all apps/services to use since it's likely a very common pattern.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1473
Replace loop with single `memset` in `CFE_SB_SendStatsCmd`,"**Is your feature request related to a problem? Please describe.**
Loop not needed
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_task.c#L796-L802

**Describe the solution you'd like**
Just `memset` the sizeof*count.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1472
Improve `CFE_SB_ENBL_RTE?_EID` naming,"**Is your feature request related to a problem? Please describe.**
`CFE_SB_ENBL_RTE1_EID`, `CFE_SB_ENBL_RTE2_EID` and `CFE_SB_ENBL_RTE3_EID` have very similar names, but are of different type and from different causes.  Easy to confuse/typo or mix up the difference.

**Describe the solution you'd like**
Replace with more descriptive names, one suggested pattern is to also embed the type in the name.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1471
Create array and loop for software bus subscriptions,"**Is your feature request related to a problem? Please describe.**
Repeated logic/pattern in subscriptions:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_task.c#L242-L264

**Describe the solution you'd like**
Create array and loop.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1470
"Add service ""health"" parameter to HK (and provide a suggested pattern for apps to follow)","**Is your feature request related to a problem? Please describe.**
Historically syslog or events are used to report issues, and telemetry status reporting is likely scattered and/or inconsistent.  Not easy to really be sure everything is ""healthy"" at a glance.  Example issue is with system startup synchronization, there isn't an easy way to tell (especially if there's spotty com) that startup synchronization was successful.  There's also other cases where operation continues ""best effort"" in failure conditions, since there isn't anything that can really be done from within the system.

**Describe the solution you'd like**
Add an app/service health summary parameter to HK, 0 is healthy and nonzero bits could indicate specific issues have been encountered.  Latch on condition, but clear with the a reset command.  Proper synchronization is an easy first condition to add, but scrub for others to include in the summary.  With this addition, reduces the dependency on syslog/events for a monitoring system (like HS or an ""external"" monitor) or the ground to take appropriate action.

Additionally many of the CDS ""errors"" are simply written to the system log (or not) and initialization continues.  When these things fail there is something wrong or something got corrupted, needs to be more obvious (examples):
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L155-L163
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L167-L173
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/tbl/fsw/src/cfe_tbl_internal.c#L177-L188

**Describe alternatives you've considered**
None

**Additional context**
#1466 would allow apps to add the sync status, note also #1467 would provide the syslog.  Spawned from issues discussed at code review.

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1469
Use a statically constructed table for SB filter initialization,"**Is your feature request related to a problem? Please describe.**
No need to store filter settings in global or individually process:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_task.c#L144-L199

**Describe the solution you'd like**
Statically construct the table and use it for initialization, can loop through it for size test.

**Describe alternatives you've considered**
Not sure how consistent this pattern is, but another candidate for #994 and use for all the services (available for apps if they want it).

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1468
Report CFE_ES_WaitForSystemState timeouts,"**Is your feature request related to a problem? Please describe.**
Timeouts aren't reported when using `CFE_ES_WaitForSystemState`.
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/es/fsw/src/cfe_es_api.c#L621-L625

**Describe the solution you'd like**
Syslog from within the API.

**Describe alternatives you've considered**
Note the syslog from within the API provides the minimal amount of notification only, expectation is apps/services would handle the return for any local/additional actions that may be required (like system heath/synchronization status reporting)

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC

EDIT - updated possible solutions.","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1467
Add status output to `CFE_ES_WaitForStartupSync`,"**Is your feature request related to a problem? Please describe.**
`CFE_ES_WaitForStartupSync` doesn't return status, so unique/local timeout responses can't be handled by the caller.

**Describe the solution you'd like**
Pass the return from `CFE_ES_WaitForSystemState` through `CFE_ES_WaitForStartupSync` back to the caller so timeouts can be handled if needed from within the app context.
Note #1467 adds a syslog on timeout from underlying `CFE_ES_WaitForSystemState`.  So handling would be anything extra, like app health reporting, aborting hazardous ops, etc.

**Describe alternatives you've considered**
None

**Additional context**
#1467

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1466
Use sized char array for `CFE_SB_GetAppTskName` parameter and limit print,"**Is your feature request related to a problem? Please describe.**
`CFE_SB_GetAppTskName` takes a char pointer `FullName` without an associated size.  Relies on user to size the buffer correctly for the sprintf:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_priv.c#L304
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_priv.c#L335

**Describe the solution you'd like**
Related to #1457, explicitly size as an array and use snprintf to print to limit appropriately.  Note #994 suggests moving this to a generic utility (out of SB scope), maybe ES API.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1465
Replace magic number in `CFE_SB_IncrBufUseCnt`,"**Is your feature request related to a problem? Please describe.**
The `0x7FFF` limit on an `uint16` doesn't seem to make sense, looks like int16 max instead of uint16 max?
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_buf.c#L200

**Describe the solution you'd like**
Use a defined max, add a comment if the max choice isn't obvious.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1464
"Fix #1417, #1387, #1393, generated coverage stubs for CFE core","**Describe the contribution**
Update CFE core stub libraries to use generated stubs, using the generator script now part of UT Assert.  All existing stub logic is converted to a default handler routine.

This also entailed moving all of the internal API prototypes to be in the ""core_private"" interface lib rather than in ""core_api"".  The
only reason this was not done earlier was due to issues with the stubs, but that is alleviated when using generated stubs.

Fixes #1417
Fixes #1387 
Fixes #1393 

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
No impact to FSW.
For unit testing, this allows the stub handler to be completely replaced by a test case, bypassing any default handler logic, if the default handler function is not desired.

**System(s) tested on**
Ubuntu 20.04

**Additional Context**
Originally when the directory reorganization was done (#972) the ""core internal"" function prototypes were kept in `core_api` because that's where the stubs were, and splitting them would require splitting the stub library.

When using generated stubs, this is no longer an issue, and actually flips the problem around - such that to maintain the patterns these header files should be moved so that the stubs are generated properly with the right scope.

As a result - this moves the ""internal"" header files from core_api to core_private, but does not change them.  This is where they really should have been all along.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1463
Decouple SB and SBR in coverage tests,"**Is your feature request related to a problem? Please describe.**
Currently the SB coverage test is not like the others in that it links with the real SBR sub-module, rather than a stub version.  This becomes evident when generating the stubs as in #1417 

**Describe the solution you'd like**
- Make SBR unit tests follow the pattern of all other modules - Generate a set of stubs for SBR using the generator script and it should use the new cmake functions to add the coverage test.
- Update the SB unit tests where it was depending on having a real SBR implementation (should be just a matter of setting the intended stub output where it was missing)

**Additional context**
Per the system architecture/design, Each sub-module should be individually coverage tested, using stubs for all other modules.  This is an exception to that general design because SBR does not have proper stub functions for testing dependencies in isolation (e.g. SB in this case) like all other modules do.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","unit-test, coverage",https://github.com/nasa/cFE/issues/1462
Reduce scope of lock to within `if` statement in `CFE_SB_ReleaseMessageBuffer`,"**Is your feature request related to a problem? Please describe.**
Locks outside if:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L2129-L2138

**Describe the solution you'd like**
Move inside

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1461
Combine mostly duplicated logic in `CFE_SB_BroadcastBufferToRoute`,"**Is your feature request related to a problem? Please describe.**
Duplicated logic:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L1650-L1667

**Describe the solution you'd like**
Factor out, make an else with shared logic and internal if for the unique logic

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42, draco-rc4",https://github.com/nasa/cFE/issues/1460
Improve documentation in SB subscription APIs wrt non-priority based delivery,"**Is your feature request related to a problem? Please describe.**
Although they do document order of delivery (last is first), it's not obvious the relation to priority and how a higher priority task could be blocked.  Related to lack of actual QOS options.  Note duplicated info in each api, should just define once and reference.

**Describe the solution you'd like**
Provide details and example for out of order priority scheduling... really tasks where it matters should probably not pend on the same message, and understand how SB works.

**Describe alternatives you've considered**
Implement QOS/priority delivery

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, CFS-42",https://github.com/nasa/cFE/issues/1459
Factor out construction of FullName in SB event messages,"**Is your feature request related to a problem? Please describe.**
`CFE_SB_GetAppTskName(TskId, FullName)` is called in virtually every API event message, example:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L235-L260

Note for the special case in `CFE_SB_DeletePipeFull` it currently overloads FullName with caller and owner.  Really should report both if there isn't a match.  Also FullName is referenced before initialized below, but not used...:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L378

**Describe the solution you'd like**
Construct FullName outside switch and use it.

**Describe alternatives you've considered**
Really there's inconsistent reporting in APIs (sometimes system log, sometimes events, unique message formats all over with differing info), would benefit from an overhaul.  See also #1403 and related issues (#994, etc) to fix.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1458
Define a const global for `OS_MAX_API_NAME * 2` and use it,"**Is your feature request related to a problem? Please describe.**
`Fullname` and similar is defined hardcoded as size `OS_MAX_API_NAME * 2`, example:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L100

**Describe the solution you'd like**
Create a const global and use it.

**Describe alternatives you've considered**
May make sense to actually scrub reporting in APIs to use consistent reporting style/technique.  Suspect there's either repetition or variation across the services.  Candidate for generic utility function - #994

**Additional context**
Code review.  Note FullName in SB is actually appname.taskname.  

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1457
"`CFE_SB_RemovePipeCallback_t` typedef implies a callback, but it's callback arguments","**Is your feature request related to a problem? Please describe.**
Name used in typedef misleading:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L73-L78

**Describe the solution you'd like**
`CFE_SB_RemovePipeCallbackArgs_t`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1456
Add tag to `CFE_SB_DestinationD_t` structure and use it instead of `void *` for `Prev` and `Next`,"**Is your feature request related to a problem? Please describe.**
Void pointers used in `CFE_SB_DestinationD_t`:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_private/fsw/inc/cfe_sb_destination_typedef.h#L41-L52

**Describe the solution you'd like**
Defining a tag and use in pointer definitions

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, cFE-SB, CFS-42",https://github.com/nasa/cFE/issues/1455
Keep local subscription status with subscription info so only one unsubscribe API is needed,"**Is your feature request related to a problem? Please describe.**
Don't need a special unsubscribe if the setting is available:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_sb.h#L388

**Describe the solution you'd like**
Store local setting so single unsubscribe API can just do the right thing based on the setting.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1454
Remove/replace/rework `CFE_BIT` related macros,"**Is your feature request related to a problem? Please describe.**
The `CFE_BIT`, `CFE_SET`, `CFE_CLR`, `CFE_TST` are all only used within cFE for avoiding recursion in SB, all just once except `CFE_BIT`

**Describe the solution you'd like**
Remove unnecessary macro, clearer to just use the expression vs an abstraction like everywhere else bits are set, cleared, tested.  Coding standards encourage avoiding overuse of macros.

**Describe alternatives you've considered**
Could replace with inline functions and provide as a general utility (SB scope isn't all that intuitive), and use it more consistently.  These aren't thread safe, if they are maintained consider atomic bit ops.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1453
Comments/document cleanup relative to SB/MSG/SBR review (and #1375),"**Is your feature request related to a problem? Please describe.**
Clarify CCSDS comment, just note CCSDS maximum is 7 bigger than int16:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_msg_api_typedefs.h#L48

Add link to options in documentation:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_sb.h#L157

Clarify comments to eliminate implied coupling (SBN is an example use):
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_sb.h#L315-L316

Mention CFE_SB_ReleaseMessageBuffer for the case when a message is not transmitted in `CFE_SB_AllocateMessageBuffer`:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_sb.h#L474

Extra `a` in comment:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_private/fsw/inc/cfe_sbr.h#L52

Comment in `CFE_SB_UnsubscribeFull` about CFE_SUCCESS status should be brought up to the `else` level, everything is success and explicitly mention in API documentation:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sb/fsw/src/cfe_sb_api.c#L1264

s/bush/bus:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/sbr/CMakeLists.txt#L33

Fix comment, doesn't pad to boundary, instead pads to be divisible by 64 so compiler won't add padding if payload structure requires 64 bit alignment:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/msg/option_inc/default_cfe_msg_hdr_pri.h#L91
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/msg/option_inc/default_cfe_msg_hdr_priext.h#L77

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, cFE-SB, CFS-42, cFE-MSG, cFE-SBR",https://github.com/nasa/cFE/issues/1452
"Fix #1343, OSAL config file simplification","**Describe the contribution**
The CFE framework build uses mostly default values for OSAL compile time configuration.  There are just a few exceptions where the CFE build is tuned for a more debug-friendly result.

This updates the configuration files in ""sample_defs"" to reflect only those values which are set to a non-default value, along with
information about why the configurable item is changed. Currently, these are only items related to debugging.

This change also includes more documentation/comments about how this configuration facility works and where to find information on the complete set of options available (which is OSAL version dependent).

Fixes #1343 

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
None, this is just documentation/sample config cleanup, but does not change the effective OSAL configuration, since most of the values in this sample file were the same as the default value.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1451
Remove duplicate status check in `CFE_EVS_EnableAppEventTypeCmd`,"**Is your feature request related to a problem? Please describe.**
Checking for status and outputing command handler debug event here:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/src/cfe_evs_task.c#L1110-L1115

Could output event within the first check here:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/src/cfe_evs_task.c#L1087-L1090

**Describe the solution you'd like**
Move event.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1450
Refactor enable and disable command handlers to use common code w/ boolean,"**Is your feature request related to a problem? Please describe.**
Duplicated logic in many enable/disable command handlers, example:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/src/cfe_evs_task.c#L924-L961
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/src/cfe_evs_task.c#L974-L1012

**Describe the solution you'd like**
Factor out common code.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1449
Simplify LogOverflowCounter increment logic,"**Is your feature request related to a problem? Please describe.**
The CFE_EVS_Global.EVS_LogPtr->LogOverflowCounter gets incremented in two locations and is done based on the LogFullFlag:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/src/cfe_evs_log.c#L52-L64

**Describe the solution you'd like**
Pull up higher and change the if/else statement to:
`if(CFE_EVS_Global.EVS_LogPtr->LogMode != CFE_EVS_LogMode_DISCARD)`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1448
Both enums (index) and defines (mask) exist for event type,"**Is your feature request related to a problem? Please describe.**
Having both the mask and the index requires keeping them in sync.

Event type bitmasks:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/inc/cfe_evs_msg.h#L898-L902

Event type enum:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_evs_extern_typedefs.h#L90-L122

**Describe the solution you'd like**
Collapse to one solution, either use the mask or the enums.  Related to #1438 and #1398.

**Describe alternatives you've considered**
Or use one to create the other so they don't get out of sync.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1447
Remove defines for EVS LogMode,"**Is your feature request related to a problem? Please describe.**
Enum is defined here:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_evs_extern_typedefs.h#L66-L81

Defines here:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/evs/fsw/inc/cfe_evs_msg.h#L910-L912

**Describe the solution you'd like**
Remove defines, replace any references with the enums.

**Describe alternatives you've considered**
Boolean for overwrite (although cmd/tlm should be fixed size)

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41, cFE-EVS",https://github.com/nasa/cFE/issues/1446
Extend cFE Service Identifier in error codes,"**Is your feature request related to a problem? Please describe.**
cFE Service Identifier is limited to 8 unique values which are fully subscribed:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_error.h#L66-L75

Means new modules need to overload existing service identifiers:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_msg_api_typedefs.h#L40-L43

**Describe the solution you'd like**
Add one more bit.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/1445
"Fix #1184, Change index type to resolve infinite loop warning","**Describe the contribution**
A clear and concise description of what the contribution is.
-  Fixes #1184 

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
- Else if Company
  - **HAND SIGNED** Company CLA must be on file (once per release): [Company CLA](../docs/GSC_18128_Corp_CLA_form_1219.pdf)
- Else if Individual
  - **HAND SIGNED** Individual CLA must be on file (once per release): [Individual CLA](../docs/GSC_18128_Ind_CLA_form_1219.pdf)

- [x] Individual CLA
[Himanshu CLA.pdf](https://github.com/nasa/cFE/files/6396425/Himanshu.CLA.pdf)
","CCB:Approved, community",https://github.com/nasa/cFE/pull/1444
Replace character copy with memcpy in `CFE_FS_ExtractFilenameFromPath`,"**Is your feature request related to a problem? Please describe.**
Character copy performed in a loop instead of a memcpy:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L608-L616

**Describe the solution you'd like**
Memcpy.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1443
Refactor `CFE_FS_SetTimestamp` and eliminate typo,"**Is your feature request related to a problem? Please describe.**
There's a typo in one of the syslogs:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L275

Also could just write the time structure instead of seconds and then subseconds:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L262-L281

**Describe the solution you'd like**
Write time structure, one syslog with an updated message.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1442
Replace magic number in `CFE_FS_WriteHeader` with `CFE_FS_FILE_CONTENT_ID`,"**Is your feature request related to a problem? Please describe.**
Magic number:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L195-L196

**Describe the solution you'd like**
There's already a define, use it:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/core_api/fsw/inc/cfe_fs_extern_typedefs.h#L53

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41, cFE-FS",https://github.com/nasa/cFE/issues/1441
Avoid using RAM to hold pointers to static const data,"**Is your feature request related to a problem? Please describe.**
Using RAM to point to static const data:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L59

Comment also applies to RamdiskMountPoint. (and to all of target_config.c)

**Describe the solution you'd like**
TBD - Needs resolution defined.  Ping @klystron78 @jphickey to resolve.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1440
Convert defines to constant variables,"**Is your feature request related to a problem? Please describe.**
Defines are both discouraged by standards and clumsy when type matters.

**Describe the solution you'd like**
Convert to constant variables, performance is maintained and get type checking.

Use has started but should really convert the existing defines, example:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L45-L48

Example of improvements, filters as const variables would allow overflow checking:
https://github.com/nasa/cFE/blob/c8b5e00bb722d8f59787ae8f82634feba5d39f60/modules/core_api/fsw/inc/cfe_evs_api_typedefs.h#L42-L55

**Describe alternatives you've considered**
None.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41, CFS-42, CFS-43",https://github.com/nasa/cFE/issues/1439
Simplify handling/checking of event type in commands and use a defined mask,"**Is your feature request related to a problem? Please describe.**
Inconsistent handling/checking of event type when input by command.

There is no type mask defined, so some places it's constructed and other's hardcoded:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/inc/cfe_evs_msg.h#L898-L902

Internal functions `EVS_EnableTypes` and `EVS_DisableTypes` both **silently** mask and use a variable with a constructed value where the value should be const, fragile since each individual value is used (twice) so easy to get out of sync:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_utils.c#L337-L344
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_utils.c#L356-L363

All the command handlers that actually use the above helpers already check against a hard coded value and report out of range bit mask:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L1080
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L932
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L982
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L1152

**Describe the solution you'd like**
At minimum define a mask (near bit definitions) and use it.  Helpers could check the range and return an error, then handler could just report on failure.  

**Describe alternatives you've considered**
Could leave the check in the handler and remove the helpers since they'd just be an | or &~, not really worth a helper for this approach.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1438
"Fix #1436, table object file name","**Describe the contribution**
Use a shell glob instead of assuming a specific file name, this should pick up the object file no matter how it was named, as
long as it ends in ${CMAKE_C_OUTPUT_EXTENSION}.

It does rely on/assume there is only one such file, so this might break if one changes the name of a table without a clean rebuild.

A proper fix would still be to use TARGET_OBJECTS generator expression, but that can't happen until Ubuntu 18.04 (w/ ver 3.10) is EOL.

Fixes #1436

**Testing performed**
Build and sanity check CFE, confirm tables are built successfully

**Expected behavior changes**
Tables should build even if the file name pattern is not as expected.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1437
Incorrect assumption about file name patterns in table build,"**Describe the bug**
On most CMake platforms the generated object file names are simply the file name (including the .c) concatenated with CMAKE_C_OUTPUT_EXTENSION.  So, for example, on table build for sample_app, the file `sample_app_tbl.c` gets compiled into `sample_app_tbl.c.o` which can then be used to call `elf2cfetbl`.

Apparently this relationship is not guaranteed, there is at least one example of a platform where this gets compiled to `sample_app_tbl.o` instead of `sample_app_tbl.c.o`.

**To Reproduce**
Attempt to build on a platform that does not follow the expected pattern.  Tables will fail to build with a failure to open the object file due to the name mismatch.

**Expected behavior**
Table should build successfully.

**Code snips**
I traced this back to a workaround that was put in for older CMake, which assumes the name of the object file:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/cmake/arch_build.cmake#L200-L201

The preferred/correct way to do this is to use the `$<TARGET_OBJECTS:...>` generator expression, but this only works in newer CMake versions.  The workaround was to assume a file name based on the expected pattern, which works most of the time, but there are exceptions.

**System observed on:**
Originally reported by @klystron78  when building for VxWorks 7.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1436
Use consistent type for EventID,"**Is your feature request related to a problem? Please describe.**
EventID is defined as `int16` and `uint16`, examples:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_utils.c#L311
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_utils.c#L379

**Describe the solution you'd like**
Use a consistent definition.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1435
Replace magic number in `CFE_EVS_MAX_PORT_MSG_LENGTH` defnition,"**Is your feature request related to a problem? Please describe.**
Magic number used:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.h#L63

**Describe the solution you'd like**
Use a defined size (this is probably for time)

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1434
Report error writing header in EVS Write app data file,"**Is your feature request related to a problem? Please describe.**
Error from `CFE_FS_WriteHeader` in `CFE_EVS_WriteAppDataFileCmd` not reported.

**Describe the solution you'd like**
Add an event to report a failure in writing the file header.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1433
Include element that caused write error in event reporting in `CFE_EVS_WriteAppDataFileCmd`,"**Is your feature request related to a problem? Please describe.**
Element that caused error not included in event, so not obvious how much of the write was completed
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L1746-L1748

**Describe the solution you'd like**
Add the element number

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1432
cFE Integration candidate: 2021-04-27,"## Description

### PR #1379

Fix #1317, memory pool pointer type 

No behavior changes. Changes the type of pointer for `MemPtr` in `CFE_ES_PoolCreateNoSem` API from uint8* to void* to be more consistent and easier to use. Should be backward compatible.
Updates the doxygen documentation for this parameter, as it was incorrectly specifying a 32-bit alignment requirement.


### PR #1289 

Fix #809, ES child task functional test 

Fixes #1291, typo in macro name 

Adds new functional tests for ES Child Task API. Does not check edge cases. Fixed spelling mistake in `UtAssert_ResourceID_Undifeined` name


### PR #1286

Fix #1285, Remove broken BUILDDIR reference 

Removes BUILDDIR reference and an old comment. No behavior changes


### PR #1305 

Fix #1301, remove option for ""osal_compatible"" 

Moves and renames `cfe_resourceid_basevalue.h` to `cfe_resourceid_basevalue.h`. Since it is is assumed/required that resource IDs follow the ""osal compatible"" pattern. Perhaps in a future version this could change, but 

### PR #1374

Fix #1311, CFE_SUCCESS constant type

Ensures that the `CFE_SUCCESS` constant is of the `CFE_Status_t` type. Since an explicit cast is required on all error codes that are expected to be negative values. *No behavior change.*

### PR #1316 

Fix #1314, Remove Unused Error Codes 

Removes unused error codes: `CFE_ES_ERR_SHELL_CMD` and `CFE_SB_NO_MSG_RECV`. No impact to behavior.

### PR #1370

Fix #1330, better warning about malformed startup line

When a startup file has a line with too many tokens the build script will generate a concise warning including an indicator of which line is causing the problem. 


### PR #1373  

Fix #1338, check status of call to `CFE_ES_CDS_CachePreload`

Confirm that the call to `CFE_ES_CDS_CachePreload` returns `CFE_SUCCESS` before continuing. No behavior changes. Now shows up as untested lines in the coverage report since error condition cannot be exercised through coverage. 


### PR #1384 


Fix #1340, update documentation for `CFE_ES_DeleteCDS`

[docs] Clarify that `CFE_ES_DeleteCDS` does not wipe or erase the block, it only returns resources to the pool for re-use.


### PR #1385

Fix #1345, exception logic when app/task is not found 

[docs] Adds comments in `CFE_ES_RunExceptionScan` describing the logic when an exception cannot be traced back to a specific app, in that it should fall back to the PSP reset.


### PR #1372 

Fix #1346, error if alignment size not a power of two 

`CFE_ES_GenPoolInitialize` now returns ` CFE_ES_BAD_ARGUMENT` error if the `AlignSize` passed-in value is not actually a power of two instead of ""fixing"" the alignment mask, 



### PR #1368 

Fix #1349, remove unneeded CFE_ES_SYSLOG_APPEND macro 

Replace internal `CFE_ES_SYSLOG_APPEND` macro with the `CFE_ES_WriteToSysLog()` API since coding standards discourage use of multi-line macros. *No behavior change*


### PR #1382 

Fix #1355, improve documentation for resourceID patterns 


[docs] Improve Resource IDs documentation. Specifically on use of the various helper functions and common patterns Documents that the ""IsMatch()"" functions accept NULL pointers so they can be used with initial validation (gatekeeper). All other helper functions assume a non-NULL pointer.


### PR #1371 

Fix #1365, assert `CFE_RESOURCEID_MAX` is a bitmask 

Compiler will catch if the `CFE_RESOURCEID_MAX` value changes in such a way that makes it not usable as a bit mask as intended. Add a compile time assert to ensure that `CFE_RESOURCEID_MAX` value is one less than a power of two  (i.e. an LSB-justified bit mask). Notes in the comments that it serves as both a numeric limit and a mask.



## Context

Part of <https://github.com/nasa/cFS/pull/250>


## Testing

cFE Tests <https://github.com/nasa/cFS/pull/250/checks>

cFS bundle Tests <https://github.com/nasa/cFE/pull/1431/checks>

## Authors

@zanzaben 
@jphickey 
@skliper ",,https://github.com/nasa/cFE/pull/1431
`CFE_EVS_AddEventFilterCmd` returns `CFE_EVS_EVT_NOT_REGISTERED` when filter already registered,"**Is your feature request related to a problem? Please describe.**
See:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L1530

Really all non-`CFE_SUCCESS` returns from command handlers are handled the same (increment command error counter).

**Describe the solution you'd like**
Really they are all just generic command handler errors, no need to be unique.  Suggest just simplifying (there's already unique events created).

**Describe alternatives you've considered**
Could define a unique error code, but it's not returned via an API so doesn't really need to be unique.  Uniqueness does allow for specific return check when coverage testing, but is it really worth unique codes?

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1430
"Fix #1336, function block comments","**Describe the contribution**
Fixes #1336 

Scrub all internal APIs within CFE core to make comment blocks in sources and headers more consistent. 

Whenever a function is prototyped in a header, this moves the information about the function behavior to that prototype and puts it into doxygen format.  The comment block on the function implementation refers the reader to the prototype - it does not duplicate the info.  Exception for local helper functions which are not separately prototyped, these may have pre/post condition info in the block itself.

All functions definitions are noted whether they intend to conform to the public API (i.e. from a header in core_api) and therefore have global scope, or if they have application-internal scope, or if they have file/local scope.

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
None - documentation updates only

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Changes to each subsystem are put in a separate commit.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

EDIT - also fixes #1350 (deletes instead of moves, they are not implemented)",CCB:Approved,https://github.com/nasa/cFE/pull/1429
Refactor handling of `EVS_GetApplicationInfo` return to eliminate duplication,"**Is your feature request related to a problem? Please describe.**
Logic for handling `EVS_GetApplicationInfo` repeated all over, example:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L1216-L1242

**Describe the solution you'd like**
Factor out common logic.  Consider using a switch.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1428
Put common and local counters in structures to simplify reset all counters command handling,"**Is your feature request related to a problem? Please describe.**
Individual counter values are reset in reset counter commands, example:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L714-L723

and logic is duplicated in every service.

**Describe the solution you'd like**
Common counters (`CommandCounter` and `CommandErrorCounter`) could be in a structure, and for each service the rest of the counters reset by the generic reset counter command could also be in a structure, and simply memset the structures to 0 on reset.  Then could easily create a generic reset all counters function as part of #994.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41, CFS-42",https://github.com/nasa/cFE/issues/1427
Pass message ID and function code into verify command length functions,"**Is your feature request related to a problem? Please describe.**
Both message ID and function code are already available in typical calling function for the functions that verify command length, so could pass them in instead of extract them from the message (again).

Note #994 is open to provide an API to verify command length, so this could be generalized even more by passing in the event ID.

**Describe the solution you'd like**
Generalize function, pass in values.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1426
Refactor `CFE_EVS_SendEvent` to use `CFE_EVS_SendEventWithAppID`,"**Is your feature request related to a problem? Please describe.**
Duplicated logic, `CFE_EVS_SendEvent` could get AppID and use `CFE_EVS_SendEventWithAppID`
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs.c#L141
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs.c#L182

**Describe the solution you'd like**
Refactor

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1425
CFE_EVS_Register - error on truncation and factor out FilterLimit,"**Is your feature request related to a problem? Please describe.**
1. `FilterLimit` variable isn't needed, just use `NumEventFilters`
2. Too many filters are reported in the system log, but should also report an error since this is a significant problem (won't perform as designed/implemented)

**Describe the solution you'd like**
Refactor and report

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1424
Remove deprecated elements (again),"**Is your feature request related to a problem? Please describe.**
Somehow #1240 got reverted in a few locations (possible merge strangeness):
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/core_api/fsw/inc/cfe_error.h#L1358-L1366
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/core_api/fsw/inc/cfe_sb_api_typedefs.h#L133-L158

**Describe the solution you'd like**
Remove.  Again.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, deprecate, CFS-42",https://github.com/nasa/cFE/issues/1423
Replace UT_DisplayPkt with UtPrintx,"**Is your feature request related to a problem? Please describe.**
UT_DisplayPkt is just a specialized version of UtPrintx, duplication of logic (don't need the custom version).

**Describe the solution you'd like**
Update internal unit tests to use UtPrintx, make UT_DisplayPkt a macro that just calls UtPrintx

**Describe alternatives you've considered**
Deprecate and eventually remove UT_DisplayPkt (note there are external users that would need to update)

**Additional context**
nasa/osal#973 - this actually fixes UtPrintx, once in no need for custom fuction.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1422
Links broken in cFE Application Developers Guide from broken code highlighting,"**Describe the bug**
The links at the top of the cFE Application Developers Guide on the main branch quit working after heading 6.7. This seems to be caused by an extra character added to the closing code highlighting marks, which you can see here: https://github.com/nasa/cFE/commit/2af49e33fc861e2629e05d21e8192f30c77848a2#diff-1d63579569d1325687a1bfdbfe8c660e157ce1387c41dc3b015f38d006347eaaR2036

Note that the format of the document is also messed up because it highlights normal text as code and vice versa after section 6.7.

**To Reproduce**
Steps to reproduce the behavior:
1. Open up the cFE Application Developers Guide on the main branch on Github
2. Click on the heading for 6.8 in the table of contents.
3. It doesn't scroll down to that heading for you.

**Expected behavior**
The link for section 6.8 should take me to that section and the document should not have flipped highlighting in section 6.8 and beyond.

**Code snips**
None

**System observed on:**
Use Github to view the file

**Additional context**
None

**Reporter Info**
Jeffrey Royer, JSC ER6
","docs, community",https://github.com/nasa/cFE/issues/1421
"cFS-Caelum Review, CFS-43: Table Services & Time Services ","## Description

This is a ""bookkeeping"" Pull Request meant for the cFS-Caelum Review code inspection (full-scale code review). 

This PR is solely focused on ""CFS-43"". For more info see [this readme](https://github.com/astrogeco/cFE/blob/caelum-code-review-cfs43/README.md)

The Included files are

```.gitignore

# Table (TBL)
!modules/core_api/fsw/inc/cfe_tbl*

!modules/tbl/fsw/**
!modules/tbl/CMakeLists.txt

# Time Services (TIME)
!modules/core_private/fsw/inc/cfe_time*
!modules/core_api/fsw/inc/cfe_time*

!modules/time/fsw/**
!modules/time/CMakeLists.txt
```

## Objectives

1. This review starts on **04/26/2021** and ends on **04/30/2021**.

2. Dispositions of findings is on **05/03/2021.**

3. Reviewers only need to review source files, header files & build files.
4. Use .ppt, .pdf, .txt & .xlsx files for background information about the code.
5. See the Attachments section for Peer Review Data Package.

6. See also ""The Power of 10"" rules for safety-critical code. https://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code#:~:text=The%20Power%20of%2010%20Rules,to%20review%20or%20statically%20analyze

7. NOTE: Don't spend too much time over coding standard violations. The Static Code Analysis tool will enforce the coding standards. This code is developed by GSFC, so GSFC coding standards will be enforced for this code base.

### Notes

Note a few already existing issues (no need to individually comment on occurrences):

Doxygen event documentation doesn't match code: https://github.com/nasa/cFE/issues/508
End of function comments out of date (generalized/paraphrased version of https://github.com/nasa/cFE/issues/275)
Update code/unit tests to use CFE_Status_t: https://github.com/nasa/cFE/issues/921


If there's anything else that is observed as a repeated pattern, feel free to document as a general comment

There are several places that would trigger warnings with some common compilers/warning options. It would be nice to follow #10 rule in ""The Power of 10"".

Quick summary/references for currently enforced settings on the FSW
Compiler options (note -Wall and -Werror) - https://github.com/nasa/cFE/blob/0850b19a09417dd7730e9c1b44e0f5687ef0f721/cmake/sample_defs/arch_build_custom.cmake#L28-L37

cppcheck - https://github.com/nasa/cFE/blob/0850b19a09417dd7730e9c1b44e0f5687ef0f721/.github/workflows/run_fsw_cppcheck.sh#L3

CodeQL - https://github.com/nasa/cFE/blob/0850b19a09417dd7730e9c1b44e0f5687ef0f721/.github/workflows/codeql-build.yml#L35-L39

CodeSonar - currently using default set for cFE, extending to JPL and MISRA is future work

For CodeQL and CodeSonar we don't eliminate all warnings, but we do analyze and disposition them all (plan to report dispositions as part of certification package)

This approach is compliant with the latest GSFC 582 standard (that is still going through review). Happy to discuss any additional settings that you have concerns about.
","CFS-43, review",https://github.com/nasa/cFE/pull/1420
Auto Increment Telemetry Sequence Count Overflow,"**Describe the bug**
The API (called by CFE_SB_TransmitMsg) CFE_SBR_IncrementSequenceCounter has no protection to ensure the sequence counter doesn't exceed the maximum value dictated by the size of the field in the CCSDS primary header (14-bits w/ max value 16384.

**To Reproduce**
Create a for-loop that calls CFE_SB_TransmitMsg with the IncrementSequenceCount flag set to true. Have the loop repeat this at least 16385 times. View the resultant messages and verify that the sequence count stops incrementing and is stuck at the maximum value.

**Expected behavior**
CFE_SBR_IncrementSequenceCounter (or the caller CFE_SB_TransmitMsg) should check that the sequence counter does not exceed the maximum value dictated by the size in the header (16384). The sequence counter should be reset to 0 when it reaches the maximum.

**Code snips**
In CFE_SB_TransmitMsg:
```
/* For Tlm packets, increment the seq count if requested */
CFE_MSG_GetType(MsgPtr, &MsgType);
if((MsgType == CFE_MSG_Type_Tlm) && IncrementSequenceCount)
{
    CFE_SBR_IncrementSequenceCounter(RouteId);
    CFE_MSG_SetSequenceCount(MsgPtr, CFE_SBR_GetSequenceCounter(RouteId));
}
```
In CFE_SBR_IncrementSequenceCounter:
```
if (CFE_SBR_IsValidRouteId(RouteId))
{
    CFE_SBR_RDATA.RoutingTbl[CFE_SBR_RouteIdToValue(RouteId)].SeqCnt++;
}
```
**System observed on:**
 - Hardware: N/A
 - OS: N/A
 - Versions: cFE: 24f7b319

**Additional context**
N/A

**Reporter Info**
PJ Chapates
Gateway VSM Flight Software Production
JSC, ER6
","bug, CFS-42",https://github.com/nasa/cFE/issues/1419
"Fix #810, add ES CDS Functional test","**Describe the contribution**
Fixes #810 
adds new functional tests for es cds

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This is a just testing the nominal cases. More in depth tests will have to be added later.

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",CCB:Approved,https://github.com/nasa/cFE/pull/1418
Generate new set of CFE coverage test stubs,"**Is your feature request related to a problem? Please describe.**
To achieve max flexibility the CFE coverage test stubs should have no built-in logic, with all handler logic in a separate function.

This is the pattern that was introduced with nasa/osal#966, along with the stub generator script.

**Describe the solution you'd like**
Run the stub generator script on CFE core API headers to generate a new set of ""pure"" stub implementation files with no extra logic in them.
Migrate any existing post-hook logic in the old stub to be a default handler function, as was done for OSAL stubs.

**Additional context**
Extension of original request in nasa/osal#832, but for CFE.  Depends on nasa/osal#966 to be accepted/merged before this can be done.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1417
Fix810 es cds functional tests,"**Describe the contribution**
Fixes #810
adds new functional tests for es cds.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This is a just testing the nominal cases. More in depth tests will have to be added later.

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",invalid,https://github.com/nasa/cFE/pull/1416
"Fix #1298, add Current Time Functional Test","**Describe the contribution**
Fixes #1298
adds new functional tests for Time Current API.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This is a just testing the nominal cases. More in depth tests will have to be added later.

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",CCB:Approved,https://github.com/nasa/cFE/pull/1415
"Fix #1297, fs header functional tests","**Describe the contribution**
Fixes #1297
adds new functional tests for fs Header.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This is a just testing the nominal cases. More in depth tests will have to be added later.

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",CCB:Approved,https://github.com/nasa/cFE/pull/1414
CFE_ES_RestoreFromCDS crashes when target block too small,"**Describe the bug**
If the pointer to the block of memory is smaller than CDS size then the app crashes 

**To Reproduce**
Call CFE_ES_RestoreFromCDS(void *RestoreToMemory, CFE_ES_CDSHandle_t Handle) with RestoreToMemory smaller than the size of Handle

**Expected behavior**
Should return an error code saying the target is too small. 

**Code snips**
Got this error from the console 

*** stack smashing detected ***: terminated
Aborted (core dumped)

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Alex Campbell GSFC",invalid,https://github.com/nasa/cFE/issues/1413
Document/implement naming pattern for created elements,"**Is your feature request related to a problem? Please describe.**
Inconsistent on namespacing of created elements (see #1401).

**Describe the solution you'd like**
Scrub ""names"" of created elements and how they are defined (configurable, `#define`, locally) and document/implement a common pattern.  Really don't need to be configurable, if only used once they don't really need to be a separate define (only required when ID is not available and need to be looked up which is rare sharing case), some prefix with CFE, etc.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1412
Const correct parameter inputs in EVS,"**Is your feature request related to a problem? Please describe.**
`EVS_PktPtr` should be const:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.h#L55

**Describe the solution you'd like**
Const.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1411
Consider atomic assignments vs locking for a single variable (possible performance improvement),"**Is your feature request related to a problem? Please describe.**
In once case `volatile sig_atomic_t` is used with a simple assignment:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_global.h#L154
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_start.c#L214

others have a lock for a single assignment:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.c#L263-L266

**Describe the solution you'd like**
Consider using atomic types/assignments

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1410
"Report entry index on event log write error, and possibly total for context","**Is your feature request related to a problem? Please describe.**
Current entry index and total expected not reported in log write error event:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.c#L233-L235

**Describe the solution you'd like**
Would be helpful to provide context for the error `""on entry %d of %d"", i, LogCount`.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1409
Use `LogFullFlag` instead of checking `LogCount == CFE_PLATFORM_EVS_LOG_MAX` in event log logic,"**Is your feature request related to a problem? Please describe.**
`LogFullFlag` is already available, don't need to check `LogCount`:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.c#L188-L189

**Describe the solution you'd like**
Use `LogFullFlag`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1408
Report error when writing event log header,"**Is your feature request related to a problem? Please describe.**
The return from `CFE_FS_WriteHeader` is checked when writing the event log header, but there's no event sent on error (it just returns CFE_EVS_FILE_WRITE_ERROR):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.c#L180-L183

**Describe the solution you'd like**
Send an event to help narrow down the issue.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1407
cFE Integration candidate: 2021-04-20,"## Description

### PR #1290

 Fix #1287, split interface and implementation modules

Separates the list of CFE core interface modules (e.g. core_api) from the list of CFE core implementation modules (e.g. msg). This allows the content of core_api to be expanded to locally include any additional modules the user has added to cFE core via the `MISSION_CORE_MODULES` list.

### PR #1376 

Fix #1337, add docs to `CFE_ES_RegisterCDS()` regarding clearing 

Note in the documentation for this function that it is the responsibility of the calling app to clear/fill the CDS block any time a new block is allocated.

### PR #1292 

Fix #1281, remove testrunner and convert testcase to app

Removes the separate CFE ""testrunner"" module and moves the logic associated with running a test into cfe_assert library. Converts the ""testcase"" module from a library into an app, by calling into the runner logic that is now inside cfe_assert. Each functional test is a separate app, not a library, so it can be started and stopped via ES command like any other app.


### HOTFIX IC 2021-04-20:

Always build cfe_assert. 

Building ""cfe_assert"" does not need to be conditional on `ENABLE_UNIT_TESTS`, it should be built all the time.

## Additional Context

Part of <https://github.com/nasa/cFS/pull/248>

## Testing

cFE Checks <https://github.com/nasa/cFE/pull/1406/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/248/checks>

## Authors

@jphickey ",,https://github.com/nasa/cFE/pull/1406
Move writing of the event log to the FS background service,"**Is your feature request related to a problem? Please describe.**
Writing the event log could take a while and is done in the EVS context by command:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.c#L126-L136

**Describe the solution you'd like**
Move to the FS background service like the rest of the logs

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1405
Rework cFE/PSP CDS interface to improve real hardware support/performance,"**Is your feature request related to a problem? Please describe.**
Currently implementation of critical data store (CDS) includes a CFE_ES_ClearCDS function that writes uint32[4] chucks to CDS in a loop to cover the entire area.  This could be very inefficient and possibly use up write cycles on the hardware, vs allowing the PSP to implement a more hardware specific clear.  
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.c#L534-L552

**Describe the solution you'd like**
Design/implementation review and update of the CDS interface (especially the cache), maybe the PSP should report/provide the appropriate cache size for efficient reading/writing.

**Describe alternatives you've considered**
Might be less an issue and more just performance wrt modern storage, but EEPROM or similar would suffer using current scheme.

**Additional context**
From code review follow on discussions.

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1404
CFE_EVS_SendEventWithAppID design improvements wrt EID context and calling context,"**Is your feature request related to a problem? Please describe.**
CFE_EVS_SendEventWithAppID is really intended to provide the EID context when an event is created from a library.  Unfortunately the EID context replaces the app context info (name), which means for short events the ground does not have app context (can't tell what app generated the event).  Also means filtering by app context isn't possible for these types of events, and apps really have no insight into or control over these events.

**Describe the solution you'd like**
Consider options to include both EID context and app context in short messages, filtering, etc.  Could utilize extra bits, could add a field, etc.  May even help to rename CFE_EVS_SendEventWithAppID to something that indicates overriding the EID context.  Note if special bits were just reserved, this may collapse down to one API again (CFE_EVS_SendEvent), but depends on how the rest is addressed.

**Describe alternatives you've considered**
See above.

**Additional context**
Spawned from code review follow-up.  Related to #1388 and #1389.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1403
Benchmark memcpy of full event packet vs size of the actual event message and memset the rest to zero,"**Is your feature request related to a problem? Please describe.**
May be able to improve event services performance wrt writing the event to the log:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_log.c#L67

by replacing this with a memcpy of the used portion and a memset 0 for the rest.

**Describe the solution you'd like**
Benchmark, if the memcpy/memset is significantly faster consider implementing.

**Describe alternatives you've considered**
It's likely all hardware/compiler/optimization dependent and probably in the noise (may not even notice when flooded w/ events).  If it's not worth it we can mark as wontfix and close, but at least it's documented.

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1402
Construction of CDS Name inconsistent with other named elements,"**Is your feature request related to a problem? Please describe.**
For the api functions dealing with the CDS the variable name has multiple meanings. For RegisterCDS() it wants the CDSName. 
GetCDSBlockIDByName() and GetCDSBlockName() both use the full cds name (of the format ""AppName.CDSName""). The header file for these don't explain the difference very well either. 

Also there is no easy way to get a full CdsName from the CdsName because the function that does that CFE_ES_FormCDSName() is not public. 

**Describe the solution you'd like**
There should be more clarity in the differences  as well as a way to get the full CdsName, like having the register function pass back the full name or making the formCDSName function public. 

**Describe alternatives you've considered**
They could all use the same thing. 

**Requester Info**
Alex Campbell GSFC
",enhancement,https://github.com/nasa/cFE/issues/1401
Improve/clarify log reporting/tracking (ES System Log and EVS Event Log),"**Is your feature request related to a problem? Please describe.**
EVS event logging reports `LogFullFlag`, `LogMode`, and `LogOverflowCounter`.
 - The log is an array of `CFE_EVS_LongEventTlm_t` of size `CFE_PLATFORM_EVS_LOG_MAX` so each entry has a slot
 - In either discard or overwrite, once the log is filled `LogFullFlag` is set to true, and `LogOverflowCounter` is incremented for each additional message (so you can tell how many messages were dropped or added after being full).
 - Note `LogCount` is maintained internally but is not in tlm (counts number of entries in the log, clamps at max)

ES syslog reports `SysLogBytesUsed`, `SysLogSize`, `SysLogEntries`, and `SysLogMode`.
 - The log is a more freeform char array `SystemLog` of size `CFE_PLATFORM_ES_SYSTEM_LOG_SIZE` 
 - In either mode the log is ""full"" when `CFE_PLATFORM_ES_SYSTEM_LOG_SIZE` - `SysLogBytesUsed` is less than  `CFE_TIME_PRINTED_STRING_SIZE`
 - `SysLogBytesUsed` is set to the internal `SystemLogEndIdx` which is the highest used element of the char array
 - `SysLogEntries` increments whenever a message is written, so if in overwrite it's not actually the number of entries in the log but the number of entries that have ever been written to the log
 - There are return codes (`CFE_ES_ERR_SYS_LOG_TRUNCATED` and `CFE_ES_ERR_SYS_LOG_FULL`), but they are only returned in discard mode, and not available in tlm
 - `SysLogSize` is the full size of the log, `CFE_PLATFORM_ES_SYSTEM_LOG_SIZE`

**Describe the solution you'd like**
Numerous misnomers and inconsistencies in log management should be fixed/clarified, within the context of the actual differences in these logs (char array vs event array).

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC

ping @dmknutsen @olamoo13","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1400
Refactor common code out of `CFE_EVS_ResetFilter` and `CFE_EVS_ResetAllFilters`,"**Is your feature request related to a problem? Please describe.**
Common code in the reset filter related APIs is duplicated

**Describe the solution you'd like**
Refactor to reduce duplication.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1399
Consistent use of `CFE_EVS_EventType_Enum_t` (and clarify vs mask),"**Is your feature request related to a problem? Please describe.**
Numerous locations where EventType is declared as uint16, but there's a defined type `CFE_EVS_EventType_Enum_t`

**Describe the solution you'd like**
Use CFE_EVS_EventType_Enum_t everywhere

**Describe alternatives you've considered**
Use uint16 everywhere

**Additional context**
Code review
#1447 - need to sort out enum vs mask use

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1398
"Overloaded ""PacketID"" use in `CFE_EVS_PacketID`","**Is your feature request related to a problem? Please describe.**
PacketID means other things so it's a bit confusing in this context.

**Describe the solution you'd like**
Could be Signature, PktIdentity, EventSignature, EventContext, Context... suggest your own!

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1397
Scrub error documentation section of command codes,"**Is your feature request related to a problem? Please describe.**
Error documentation section of command codes is not consistent/complete

**Describe the solution you'd like**
Scrub and update the error documentation for all command codes.  Needs to detail error cases.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, CFS-41",https://github.com/nasa/cFE/issues/1396
Scrub parameter documentation section of command codes,"**Is your feature request related to a problem? Please describe.**
Parameter documentation for command codes not complete or always up to date

**Describe the solution you'd like**
Really the structure is the preferred place to document the parameters, the command code documentation is probably better off just referencing the structure.  Need to confirm all the information in the command code documentation is in the structure documentation and then clean.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, CFS-41",https://github.com/nasa/cFE/issues/1395
Define file subtype value behavior/expectations,"**Is your feature request related to a problem? Please describe.**
Not clear if the CFE_FS_InitHeader SubType needs to be one of the FS enums or if it can be user defined by apps.  Note there is no longer a shell file created by ES:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_fs_extern_typedefs.h#L101-L108

**Describe the solution you'd like**
Need to determine if FS should define all file subtypes, or treat it as an extendable field (or whatever).  That will affect if the SHELL subtype gets removed or renamed (since there is still an app that would create it).  Note right now apps don't even use `CFE_FS_InitHeader`, but they do currently set unique values.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41, cFE-FS",https://github.com/nasa/cFE/issues/1394
Move `CFE_FS_RunBackgroundFileDump` to internal API,"**Is your feature request related to a problem? Please describe.**
`CFE_FS_RunBackgroundFileDump` is only used internally, shouldn't be exposed as external API

**Describe the solution you'd like**
Move to *_core_internal.h

**Describe alternatives you've considered**
None

**Additional context**
Code review, once moved would also benefit from #1387

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1393
Explicitly sized parameters or data length wrt `CFE_FS_ExtractFilenameFromPath`,"**Is your feature request related to a problem? Please describe.**
CFE_FS_ExtractFilenameFromPath requires data length assumptions
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_fs.h#L273-L284

**Describe the solution you'd like**
Explicitly define lengths for parameters or pass in a data length

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1392
Comments/document cleanup relative to EVS/FS review (and #1294),"**Is your feature request related to a problem? Please describe.**
`CFE_FS_ReadHeader` parameter descriptions out of order:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_fs.h#L60-L72

""primary header"" not clear in `CFE_FS_Header_t` description, really it's the size of this header so tools can be agnostic: 
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_fs_extern_typedefs.h#L216

s/Kog/Log/:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_private/fsw/inc/cfe_evs_log_typedef.h#L43

Typo, but could also just simplify: Get null terminated name for reporting, example below but in 10 copy/paste locations:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L752


**Describe the solution you'd like**
Fix.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, CFS-41, cFE-FS",https://github.com/nasa/cFE/issues/1391
Improve EVS event filter documentation,"**Is your feature request related to a problem? Please describe.**
`CFE_EVS_ResetFilter` API documentation not clear, would help to add something like it will treat the next event with that EID like it was the first (independent of filter method) along with an example.
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_evs.h#L290-L292

Add description of how they actually work:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_evs_api_typedefs.h#L42-L55

**Describe the solution you'd like**
Improve documentation

**Describe alternatives you've considered**
None

**Additional context**
Code review, note conversion to variables is in #1439

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, CFS-41, cFE-EVS",https://github.com/nasa/cFE/issues/1390
Restrict `CFE_EVS_SendEventWithAppID` to core use only,"**Is your feature request related to a problem? Please describe.**
Similar to #1388 which would be a bigger change, but at minimum should remove this from the public API so libs don't start using it.

**Describe the solution you'd like**
Move to internal/private.  Also need to confirm requirements match up.

**Describe alternatives you've considered**
#1388 - probably should be removed all together, but that's a bigger issue

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","invalid, CFS-41",https://github.com/nasa/cFE/issues/1389
Use of `CFE_EVS_SendEventWithAppID` in APIs doesn't follow preferred model,"**Is your feature request related to a problem? Please describe.**
`CFE_EVS_SendEventWitAppID` is used in many of the cFE core APIs.  This leads to possible EID collisions (core to app), cross dependencies for filter management, and doesn't really follow preferred pattern.

**Describe the solution you'd like**
Apps should manage their events, APIs should return status for apps to handle.

**Describe alternatives you've considered**
Manage EIDs to prevent collisions, still not great since they are compiled in so fairly fragile

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","invalid, CFS-41",https://github.com/nasa/cFE/issues/1388
Move internal API's and stubs to core_private,"**Is your feature request related to a problem? Please describe.**
Currently the *core_internal.h files that define cFE internal APIs are in core_api along with stubs.

**Describe the solution you'd like**
Move these to core_private since they don't need to be exposed outside of cFE

**Describe alternatives you've considered**
None

**Additional context**
Observations related to code review CFS-41, but not directly related to a comment so not marking w/ label.

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1387
Remove CFE_EVS_Unregister API,"**Is your feature request related to a problem? Please describe.**
There's no use case for apps to unregister themselves from EVS using `CFE_EVS_Unregister`, ES cleans them up when an app is being terminated using `CFE_EVS_CleanUpApp`.

**Describe the solution you'd like**
Remove the `CFE_EVS_Unregister` public API, confirm requirements also match up.

Requirement is cEVS3101 - delete.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-41",https://github.com/nasa/cFE/issues/1386
"Fix #1345, exception logic when app/task is not found","**Describe the contribution**
Adds comments to describe the logic when an exception cannot be traced back to a specific app, in that it should fall back
to the PSP reset.

Restarting only an app is a special opt-in case that is only done if specifically selected when starting the app, and the
exception is also positively traced back to that app.

Fixes #1345 

**Testing performed**
Build and sanity check CFE

**Expected behavior changes**
None - documentation only

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CFS-40",https://github.com/nasa/cFE/pull/1385
"Fix #1340, update documentation for CFE_ES_DeleteCDS","**Describe the contribution**
Noted that this does not actually wipe or erase the block, it only returns resources to the pool for re-use.

Fixes #1340

**Testing performed**
Build and sanity check CFE

**Expected behavior changes**
None, documentation change only.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CFS-40",https://github.com/nasa/cFE/pull/1384
If an application fails to initialize; cFE will attempt to restart it indefinitely,"**Is your feature request related to a problem? Please describe.**
Outside of issuing a processor reset - I'm not sure there is a clean way to exit this scenario (which in theory should never happen in flight).  This scenario would be further complicated if the app attempting to be started/restarted is included in the startup script.

**Describe the solution you'd like**
Consider implementing a maximum number of restarts.

**Requester Info**
Dan Knutsen
NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/1383
"Fix #1355, improve documentation for resourceID patterns","**Describe the contribution**
Improve the doxygen documentation on the various helper functions and common patterns dealing with Resource IDs.  Specifically, document that the ""IsMatch()"" functions accept NULL pointers to allow use with initial validation (gatekeeper), but all other helper functions assume a non-NULL pointer.

Fixes #1355 

**Testing performed**
Build and sanity check CFE, build design docs

**Expected behavior changes**
None - documentation only, no code change here

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CFS-40",https://github.com/nasa/cFE/pull/1382
CFE_ES_STOP_APP_CC results in processor reset (SP0 only),"**Describe the bug**
The CFE_ES_STOP_APP_CC is resulting in a processor reset when sent to our SP0.  Note that this behavior is isolated to the SP0 and is not observed on a Linux system.

**To Reproduce**
Start a test app
Send the CFE_ES_STOP_APP_CC command
Observe reset

**Expected behavior**
Application exits cleanly

**System observed on:**
SP0
OS: VxWorks 6.9
cFS Versions: cfe v6.8.0-rc1+dev218, osal v5.1.0-rc1+dev109, psp v1.5.0-rc124

**Reporter Info**
Dan Knutsen
NASA Goddard
",invalid,https://github.com/nasa/cFE/issues/1381
Improve robustness of CDS checks before re-use/re-build of pool,"**Is your feature request related to a problem? Please describe.**
Currently the `CFE_ES_ValidateCDS()` function only confirms that a fixed signature is found at the beginning and end of the memory space, and `CFE_ES_RebuildCDS()` confirms that the size (number of entries) matches.  If both of these checks pass, the code will attempt to re-use the contents of CDS, rather than re-initializing it.

**Describe the solution you'd like**
These checks are a little weak.  Conceivably, the number of registry entries can remain the same, but the size/format of the registry record changes, thereby making the size of the overall registry array larger.  The data pool could be reduced by the exact same amount, meaning that the CDS trailer will be at the exact some spot, too.  In this case the the code might try to re-use the registry but the format has changed and it will be incompatible.

Should add more values to the size check, not just the number of entries but the sizes/offsets of where the registry and pool start, and it wouldn't hurt to also add a CRC-32 check to this data too, just like is done for data records, before attempting to re-use the data.

**Describe alternatives you've considered**
Leave as is, because this is unlikely to occur by random, it would more likely be intentional, and there are other was to force a CDS rebuild (i.e. change sig).

**Additional context**
Found during investigation of #1341

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/1380
"Fix #1317, memory pool pointer type","**Describe the contribution**
Changes the type of pointer in the API from `uint8*` to `void*` to be more consistent and easier to use.  Should be backward compatible.

This also updates the doxygen documentation for this parameter, as it was specifying a 32-bit alignment requirement whereas the
alignment requirement is processor dependent - 64 bit processors typically will need 64 bit alignment.  Link to the macro which
is intended to aid in aligning the static pool buffer.

Fixes #1317

**Testing performed**
Build and sanity check CFE, run all unit tests, rebuild documentation.

**Expected behavior changes**
None.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CFS-40",https://github.com/nasa/cFE/pull/1379
Documentation builds should use separate directories,"**Is your feature request related to a problem? Please describe.**
The 3 documentation targets (detaildesign, usersguide, osalguide) all share the same ""doc"" subdirectory for the doxygen run.  This can become a problem when trying to validate documentation builds and building with the `-j` option.  They work fine when built one at a time, but with `-j` at one point my machine got into an endless loop with two doxygen builds running in parallel that kept stepping on the other's files.

**Describe the solution you'd like**
Use separate dirs so that builds can be done in parallel without interfering with each other.

**Additional context**
This should also result in separate ""warnings.log"" files too, that can be more easily checked.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/1378
CDS should include some fields of the CFE_ES_CDS_RegRec_t in its CRC-32 validation,"**Is your feature request related to a problem? Please describe.**
CDS code utilizes a CRC-32 to check the integrity of the CDS Block.  However it only covers the data itself, not any of the metadata of the CDS block.  

When re-using CDS memory, the code does not clear old CDS blocks for a variety of reasons.  The CRC-32 should offer protection against stale data appearing as good data.

**Describe the solution you'd like**
Should include fields from the registry record (CFE_ES_CDS_RegRec_t) as well as the data.  Importantly, This way if the block is re-used and the name is different but the size is the same, the CRC check will fail, and the old data from the previous instance is less likely to be interpreted as valid data.

**Additional context**
Offshoot from CFS-40 review, issues #1337 and #1340.  There are valid reasons _not_ to forcibly clear CDS blocks, but the CRC check can serve as a reasonable substitute to avoid interpreting old data as valid.  This is a suggestion that would make the this protection a little stronger.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1377
"Fix #1337, add docs to CFE_ES_RegisterCDS() regarding clearing","**Describe the contribution**
Note in the documentation for this function that it is the responsibility of the calling app to clear/fill the CDS block any time a new block is allocated.

Fixes #1337 

**Testing performed**
Build and sanity check.

**Expected behavior changes**
None - Documentation only.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Don't recommend changing this behavior, it could easily break something or have unintended consequences, but should be clear in docs that a new CDS block must be written to before using, and it is the app/caller responsibility to do so.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CCB:FastTrack, CFS-40",https://github.com/nasa/cFE/pull/1376
"cFS-Caelum Review, CFS-42: SB, MSG, and Globals","## Description

This is a ""bookkeeping"" Pull Request meant for the cFS-Caelum Review code inspection (full-scale code review). 

This PR is solely focused on ""CFS-42"". For more info see [this readme](https://github.com/astrogeco/cFE/blob/caelum-code-review-cfs42/README.md)

The Included files are

```.gitignore
# Software Bus (SB)
!modules/core_api/fsw/inc/cfe_sb*

!modules/core_private/fsw/inc/cfe_sb*

!modules/sb/fsw/**
!modules/sb/CMakeLists.txt

!modules/sbr/fsw/src/cfe_sbr**
!modules/sbr/CMakeLists.txt

# CCSDS Message (MSG)
!modules/core_api/fsw/inc/cfe_msg*

!modules/msg/fsw/**
!modules/msg/option_inc/**
!modules/msg/CMakeLists.txt
```

## Objectives

This review starts on **04/19/2021** and ends on **04/23/2021.**
2. Dispositions of findings is on 04/26/2021.

3. Reviewers only need to review source files, header files & build files.
4. Use .ppt, .pdf, .txt & .xlsx files for background information about the code.
5. See the Attachments section for Peer Review Data Package.

6. See also ""The Power of 10"" rules for safety-critical code. https://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code#:~:text=The%20Power%20of%2010%20Rules,to%20review%20or%20statically%20analyze

7. NOTE: Don't spend too much time over coding standard violations. The Static Code Analysis tool will enforce the coding standards. This code is developed by GSFC, so GSFC coding standards will be enforced for this code base.

### Notes

Note a few already existing issues (no need to individually comment on occurrences):

Doxygen event documentation doesn't match code: https://github.com/nasa/cFE/issues/508
End of function comments out of date (generalized/paraphrased version of https://github.com/nasa/cFE/issues/275)
Update code/unit tests to use CFE_Status_t: https://github.com/nasa/cFE/issues/921


If there's anything else that is observed as a repeated pattern, feel free to document as a general comment

There are several places that would trigger warnings with some common compilers/warning options. It would be nice to follow #10 rule in ""The Power of 10"".

Quick summary/references for currently enforced settings on the FSW
Compiler options (note -Wall and -Werror) - https://github.com/nasa/cFE/blob/0850b19a09417dd7730e9c1b44e0f5687ef0f721/cmake/sample_defs/arch_build_custom.cmake#L28-L37

cppcheck - https://github.com/nasa/cFE/blob/0850b19a09417dd7730e9c1b44e0f5687ef0f721/.github/workflows/run_fsw_cppcheck.sh#L3

CodeQL - https://github.com/nasa/cFE/blob/0850b19a09417dd7730e9c1b44e0f5687ef0f721/.github/workflows/codeql-build.yml#L35-L39

CodeSonar - currently using default set for cFE, extending to JPL and MISRA is future work

For CodeQL and CodeSonar we don't eliminate all warnings, but we do analyze and disposition them all (plan to report dispositions as part of certification package)

This approach is compliant with the latest GSFC 582 standard (that is still going through review). Happy to discuss any additional settings that you have concerns about.
","CFS-42, review",https://github.com/nasa/cFE/pull/1375
"Fix #1311, CFE_SUCCESS constant type","**Describe the contribution**
Ensures that the CFE_SUCCESS constant is the CFE_Status_t type.

Fixes #1311 

**Testing performed**
Build and sanity check CFE, run all unit tests, confirm nothing went wrong.

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Additional context**
The explicit cast is required on all error codes that are expected to be _negative_ values.  The problem that occurs if these are not forced to `int32` type is that the compiler up-converts them to `long`, which on a 64-bit platform can can represent the value as a positive integer.  Therefore a test for equality starts to fail.

On codes that are positive values, it doesn't matter as much, the compiler will not need to convert these literals to anything other than int, but it shouldn't hurt to add it for consistency, just in case.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CFS-40",https://github.com/nasa/cFE/pull/1374
"Fix #1338, check status of call to CFE_ES_CDS_CachePreload","**Describe the contribution**
Confirm that the call returned CFE_SUCCESS before continuing.

Fixes #1338 

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Note that the error/failure condition here is effectively dead code from the beginning.  Not even coverage test can exercise it, because its a void function, and the args are largely fixed/constant values.  So this now shows up as untested lines in the coverage report.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CFS-40",https://github.com/nasa/cFE/pull/1373
"Fix #1346, error if alignment size not a power of two","**Describe the contribution**
Instead of ""fixing"" the alignment mask, return an error if the passed-in value is not actually a power of two.

Fixes #1346 

**Testing performed**
Build and sanity test CFE, run all unit tests

**Expected behavior changes**
Function will return  `CFE_ES_BAD_ARGUMENT` if the passed in parameter is not a power of two.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This is an internal functions, and in ES this only gets passed from two possible sources: one is CDS, hardcoded as 4, and the other is sourced from the ALIGN_OF macro for generic memory pools.

The latter is platform-dependent but I've never seen a platform that aligns data on something other than a power of two boundary.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CFS-40",https://github.com/nasa/cFE/pull/1372
"Fix #1365, assert CFE_RESOURCEID_MAX is a bitmask","**Describe the contribution**
Add a compile time assert to ensure that this value is actually a power of two-1 (i.e. an LSB-justified bit mask).  

Notes in the comments that it serves as both a numeric limit and a mask.

Fixes #1365 

**Testing performed**
Build CFE normally, sanity check.
Also Intentionally set `CFE_RESOURCEID_MAX` to an invalid value and confirm that the compile time assert caught it.

**Expected behavior changes**
Will catch the case if the `CFE_RESOURCEID_MAX` value changes in such a way that makes it not usable as a bit mask as intended.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CFS-40",https://github.com/nasa/cFE/pull/1371
"Fix #1330, better warning about malformed startup line","**Describe the contribution**
This improves the log message when a line in the startup script is not formed correctly, such as being too long or having too many
tokens.

Fixes #1330 

**Testing performed**
Hack CFE startup file to have a bad line with too many tokens.  Confirm that all _other_ apps started OK. 

**Expected behavior changes**
None if startup script is correctly formed.  But Startup file line with too many tokens now generates a more concise warning as opposed to being silent.  This also adds an indicator of which is the actual bad line.  Example.

    1980-012-14:07:27.50245 ES Startup: ES Startup File Line 5 is malformed: 60 bytes, 8 tokens.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CFS-40",https://github.com/nasa/cFE/pull/1370
"Fix #1342, rename ""Zero"" union member field","**Describe the contribution**
This field is just some generic bits. It is used when the CDS is cleared by zero-filling this data block and writing it to CDS repeatedly in a loop.

Renaming it to ""GenericDataBlock"" should be clearer as to its intent.

Fixes #1342 

**Testing performed**
Build and sanity check CFE
Confirm all unit tests pass

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Just renames internal field to avoid confusion about the name `Zero`.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","wontfix, CFS-40",https://github.com/nasa/cFE/pull/1369
"Fix #1349, remove unneeded CFE_ES_SYSLOG_APPEND macro","**Describe the contribution**

Replace uses of this internal macro with the `CFE_ES_WriteToSysLog()` API.

Fixes #1349

**Testing performed**
Build and sanity check, run all unit tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Coding standards discourage use of multi-line macros, and for the 3 remaining uses there is no compelling reason not to just use the standard public API. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, CFS-40",https://github.com/nasa/cFE/pull/1368
Add Functional Test to CI,"**Is your feature request related to a problem? Please describe.**
Now that there are functional tests for cFE they should be added to the continuous integration and checked on pull requests like the osal tests. 

**Describe the solution you'd like**
The tests should be run on pull requests like the osal tests. 

**Describe alternatives you've considered**
N/A

**Requester Info**
Alex Campbell GSFC","unit-test, continuous-integration",https://github.com/nasa/cFE/issues/1367
Fix mismatched `foreach` `endforeach`,"**Is your feature request related to a problem? Please describe.**
Mismatch:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/CMakeLists.txt#L122-L125

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, build-system, CFS-40",https://github.com/nasa/cFE/issues/1366
Document/verify `CFE_RESOURCEID_MAX` is power of 2 - 1 and sometimes used as MASK (and MAX),"**Is your feature request related to a problem? Please describe.**
`CFE_RESOURCEID_MAX` is used in some places as MAX and others as a mask, also has to be power of 2 - 1:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/resourceid/fsw/src/cfe_resourceid_api.c#L52

**Describe the solution you'd like**
Document and verify

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1365
Inconsistent error messages in verify header,"**Is your feature request related to a problem? Please describe.**
Some of the `cfe_es_verify.h` messages don't match the test:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_verify.h#L50-L52
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_verify.h#L162-L166
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_verify.h#L171-L312

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, cFE-ES, CFS-40",https://github.com/nasa/cFE/issues/1364
Simpify long if/else if in  `CFE_ES_DeleteCDSCmd`,"**Is your feature request related to a problem? Please describe.**
Error cases handled with long if/else if:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_task.c#L1844

**Describe the solution you'd like**
Use table (or switch)

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1363
Obsolete logic in `CFE_ES_QueryAllCmd` file handling (related to OpenCreate),"**Is your feature request related to a problem? Please describe.**
Obsolete logic, second `OS_OpenCreate` will truncate anyways:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_task.c#L1287-L1298

**Describe the solution you'd like**
Simplify

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, cFE-ES, CFS-40",https://github.com/nasa/cFE/issues/1362
Refactor the CFE_ES_*AppCmd handlers to reduce duplicated code,"**Is your feature request related to a problem? Please describe.**
Similar pattern in `CFE_ES_StartAppCmd`, `CFE_ES_StopAppCmd`, `CFE_ES_RestartAppCmd`, `CFE_ES_ReloadAppCmd`

**Describe the solution you'd like**
Refactor to reduce duplicated logic.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1361
Limit send HK MID's to 1 in pipe,"**Is your feature request related to a problem? Please describe.**
Default limit of 4 is excessive, getting behind is an error (shouldn't spam them either way).

ES example:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_task.c#L405

**Describe the solution you'd like**
Set to 1

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1360
Default `ValuePtr` in `CFE_ES_FindConfigKeyValue`,"**Is your feature request related to a problem? Please describe.**
`ValuePtr` is set to a default value whenever `CFE_ES_FindConfigKeyValue` returns `NULL`

**Describe the solution you'd like**
Could just set to the default value within this helper

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1359
"CFE_ES_SysLogReadData requires synchronization, add _unsync to name","**Is your feature request related to a problem? Please describe.**
`CFE_ES_SysLogReadData` requires external synchronization:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_syslog.c#L292

**Describe the solution you'd like**
Add _unsync to name to match pattern

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1358
"Replace duplicated write to sys log, delay, panic pattern","**Is your feature request related to a problem? Please describe.**
Same pattern repeats many times:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_start.c#L486-L496

**Describe the solution you'd like**
Reduce duplicated code.

**Describe alternatives you've considered**
May get removed per #1356 (would make this OBE)

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1357
"Move file system initialization logic out of cFE, should be set up at lower level","**Is your feature request related to a problem? Please describe.**
Related to #589, file system initialization doesn't fit well in the cFE layer:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_start.c#L465-L471

**Describe the solution you'd like**
Remove/move, should be initialized before getting to cFE

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1356
Document gatekeeper pattern in internal/local resource ID inline functions,"**Is your feature request related to a problem? Please describe.**
IsMatch functions check for NULL pointer, others don't:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_resource.h#L160-L163
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_resource.h#L173-L176

**Describe the solution you'd like**
Document justification behind pattern (IsMatch is used first, then all other's are ""safe"")

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, CFS-40",https://github.com/nasa/cFE/issues/1355
Add compile-time debug capability to confirm functions that require external global locking are locked,"**Is your feature request related to a problem? Please describe.**
Various functions require global lock:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_resource.c#L331-L336

**Describe the solution you'd like**
Add a debug capability to confirm appropriate locking

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1354
Simplify loop in `CFE_ES_LocateAppRecordByName`,"**Is your feature request related to a problem? Please describe.**
While loop with dual break could be simplified:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_resource.c#L90-L106

**Describe the solution you'd like**
Refactor to simplify, possibly for loop on AppRecPtr.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1353
Clarify/document elements in enums including zero dependence,"**Is your feature request related to a problem? Please describe.**
Set to zero of first element is redundant with standard, not documented:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_perf.h#L46-L60

Similar case in FS, where 0 is UNKNOWN, should document dependence:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_fs_api_typedefs.h#L52

Note it is documented here, really should do similar elsewhere when it matters:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_fs_api_typedefs.h#L72

**Describe the solution you'd like**
Document enums, clarify logic dependence on first entry being 0 (don't move).

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, CFS-40",https://github.com/nasa/cFE/issues/1352
CFE_ES_PerfLogAdd blocking behavior - redesign or document,"**Is your feature request related to a problem? Please describe.**
CFE_ES_PerfLogAdd can block:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_perf.c#L651-L657

**Describe the solution you'd like**
Document behavior/impact/context

**Describe alternatives you've considered**
Consider design updates to avoid blocking

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1351
Move perflog prototypes from `cfe_es_log.h` to `cfe_es_perf.h`,"**Is your feature request related to a problem? Please describe.**
Misplaced prototypes:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_log.h#L322-L326

**Describe the solution you'd like**
Move to `cfe_es_perf.h`

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1350
Replace multiline `CFE_ES_SYSLOG_APPEND` macro with inline function,"**Is your feature request related to a problem? Please describe.**
Use of multiline macros should be avoided (per coding standard):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_log.h#L100-L106

**Describe the solution you'd like**
Replaced with inline, or one line macro/inline combo

**Describe alternatives you've considered**
Wrap with do {...} while(0), see https://gcc.gnu.org/onlinedocs/cpp/Swallowing-the-Semicolon.html

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1349
Correct const in generic memory pool APIs,"**Is your feature request related to a problem? Please describe.**
CFE_ES_GenPoolRecord_t pointer should be const:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_generic_pool.h#L234
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_generic_pool.h#L247
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_generic_pool.h#L261

**Describe the solution you'd like**
Make const

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1348
Improve `CheckBits` logic for `CFE_ES_GenPoolBD_t` structure,"**Is your feature request related to a problem? Please describe.**
Magic number (fixed bit pattern) used for `CheckBits` in `CFE_ES_GenPoolBD_t` is weak:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_generic_pool.h#L60
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_generic_pool.c#L208

And related checks against the magic number

**Describe the solution you'd like**
Could use ActualSize and 2s complement (or even 1s complement) of ActualSize for memory check. Higher odds of catching an issue

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1347
CFE_ES_GenPoolInitialize: Error if AlignSize is not a power of 2,"**Is your feature request related to a problem? Please describe.**
`CFE_ES_GenPoolInitialize` handles when `AlignSize` isn't a power of 2, but may be more appropriate as an error:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_generic_pool.c#L253-L269

**Describe the solution you'd like**
Analyze, make it an error or document why it's ok as-is for future reference

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1346
Task not found case not explicitly handled in CFE_ES_RunExceptionScan,"**Is your feature request related to a problem? Please describe.**
Not clear if task not found case is handled correctly:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_erlog.c#L360-L362

**Describe the solution you'd like**
Analyze and explicitly handle if needed or document why not needed for future reference

**Describe alternatives you've considered**
None

**Additional context**
Code Review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, docs, CFS-40",https://github.com/nasa/cFE/issues/1345
Add Doxygen documentation to internal prototypes,"**Is your feature request related to a problem? Please describe.**
Missing documentation (example, but scrub all):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds_mempool.h#L70-L76

For the block read/write, need to document requirements on the data pointer (reads/writes size used when initializing handle)

**Describe the solution you'd like**
Add documentation (move from implementation if it exists there)

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, CFS-40, CFS-41",https://github.com/nasa/cFE/issues/1344
Update the cmake/sample_defs/default_osconfig.cmake to be just overrides/changes from osal/default_config.cmake,"**Is your feature request related to a problem? Please describe.**
default_osconfig.cmake repeats many of the settings with the same selection as in default_config.cmake, confusing dependency

**Describe the solution you'd like**
Remove duplication, document in default_osconfig.cmake that it's for overriding values in default_config.cmake.

**Describe alternatives you've considered**
None

**Additional context**
Came up when trying to figure out why OSAL coverage test results were different at the bundle level vs osal level, wasn't clear that default_config.cmake was being used and hard to sort out what's actually being changed in default_osconfig.cmake

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, build-system",https://github.com/nasa/cFE/issues/1343
Clarify use of `Zero[4]` in `CFE_ES_CDS_AccessCacheData_t`,"**Is your feature request related to a problem? Please describe.**
Use of `Zero` not clear:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.h#L128

**Describe the solution you'd like**
Improve documentation/justify use.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","duplicate, CFS-40",https://github.com/nasa/cFE/issues/1342
Move `Name` to the end of `CFE_ES_CD_RegRec_t` to maintain consistent locations,"**Is your feature request related to a problem? Please describe.**
CFE_MISSION_ES_CDS_MAX_FULL_NAME_LEN change could move `Table` location:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.h#L111

**Describe the solution you'd like**
Confirm CFE_ES_CDS_RegRec_t isn't ""exposed"" anywhere it matters, move `Name` to the end

**Describe alternatives you've considered**
If it is exposed, trade impacts and determine appropriate milestone

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",wontfix,https://github.com/nasa/cFE/issues/1341
CFE_ES_DeleteCDS: zero out block when freed,"**Is your feature request related to a problem? Please describe.**
Block not cleared when freed:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.c#L883

**Describe the solution you'd like**
Analyze, clear block if needed or document for future reference why it's not needed

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1340
Scrub for appropriate/consistent use of sizeof vs OS_MAX_API_NAME,"**Is your feature request related to a problem? Please describe.**
Inconsistent use of sizeof vs hard coded size (example):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.c#L674

Also local sizing (example where it could just be sizeof(CmdPtr->AppName)):
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L1208

**Describe the solution you'd like**
Use sizeof when char arrays sizes are known

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40, CFS-41",https://github.com/nasa/cFE/issues/1339
CFE_ES_ClearCDS: check status before while loop to zero,"**Is your feature request related to a problem? Please describe.**
Status not checked from CFE_ES_CDS_CachePreload:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.c#L534

**Describe the solution you'd like**
Analyze, check status if needed otherwise document why not for future reference

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1338
CFE_ES_RegisterCDSEx: clear block if new allocation is needed but not new block size,"**Is your feature request related to a problem? Please describe.**
May need to clear block if a new allocation is needed without a changed block size
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.c#L383

**Describe the solution you'd like**
Analyze, clear block if needed

**Describe alternatives you've considered**
If not needed, document why for future reference

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, docs, CFS-40",https://github.com/nasa/cFE/issues/1337
Standardize/clean function description comments,"**Is your feature request related to a problem? Please describe.**
They need a general scrub, out of date references, etc.  Example:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_cds.c#L242-L248

Should clearly indicate implementations that are API's vs internal/helper functions

**Describe the solution you'd like**
Automated cleanup.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, CFS-40",https://github.com/nasa/cFE/issues/1336
Eliminate redundant switch in CFE_ES_CleanupObjectCallback,"**Is your feature request related to a problem? Please describe.**
Redundant switch cases, could be eliminated by setting local status variable in first switch:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L1650

**Describe the solution you'd like**
Eliminate redundant switch

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1335
Add missing prototypes,"**Is your feature request related to a problem? Please describe.**
Enable -Wmissing-prototypes and observe warnings

Example identified in code review:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L1589

**Describe the solution you'd like**
Add prototype

**Describe alternatives you've considered**
None

**Additional context**
Code reivew, specific case related to #1307 

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1334
Refactor long switch in CFE_ES_ProcessControlRequest,"**Is your feature request related to a problem? Please describe.**
Long switch could be replaced with table and general logic:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L1201

**Describe the solution you'd like**
Refactor

**Describe alternatives you've considered**
None

**Additional context**
Code Review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1333
Resolve signed/unsigned comparison warnings,"**Is your feature request related to a problem? Please describe.**
Enable -Wsign-compare and observe warnings.

From code reivew:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L1056

**Describe the solution you'd like**
Resolve these

**Describe alternatives you've considered**
None

**Additional context**
Code review, specific case of #1307

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1332
Refactor for logic duplication in CFE_ES_AppCreate and CFE_ES_LoadLibrary,"**Is your feature request related to a problem? Please describe.**
First part of CFE_ES_AppCreate:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L669

and CFE_ES_LoadLibrary:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L835

duplicate logic

**Describe the solution you'd like**
Refactor to reduce duplication

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1331
Handle case of too many tokens in startup file,"**Is your feature request related to a problem? Please describe.**
Silently consumes `,` if NumTokens == CFE_ES_STARTSCRIPT_MAX_TOKENS_PER_LINE:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L200

Looks like it would just concatenate entries after that point, which could lead to strange errors

**Describe the solution you'd like**
Warn/error/report/abort

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1330
Refactor CFE_ES_StartApplications startup script processing to reduce duplicated logic,"**Is your feature request related to a problem? Please describe.**
Could loop for volatile/non-volatile startup script processing instead of two if blocks:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L92-L144

**Describe the solution you'd like**
Refactor

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1329
Replace strlen use with memchr logic for checking valid length,"**Is your feature request related to a problem? Please describe.**
strlen is an unlimited search, memchr is limited

Example case:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L1616-L1617

**Describe the solution you'd like**
Use memchr instead

**Describe alternatives you've considered**
Something similar to OS_strnlen (unfortunately not exposed)

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1328
Refactor similar ES ID/Info related functions to share common logic,"**Is your feature request related to a problem? Please describe.**
Very similar pattern in the following sets of APIs, consider refactor:
- CFE_ES_GetAppIDByName, CFE_ES_GetLibIDByName, CFE_ES_GetTaskIDByName
- CFE_ES_GetAppID, CFE_ES_GetTaskID, 
- CFE_ES_GetAppName, CFE_ES_GetLibName, CFE_ES_GetTaskName
- CFE_ES_GetAppInfo, CFE_ES_GetLibInfo, CFE_ES_GetTaskInfo

**Describe the solution you'd like**
Factor out common logic

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1327
Use synchronization mechanism instead of delays,"**Is your feature request related to a problem? Please describe.**
Synchronization mechanism would be better (more responsive, etc) vs delays.

In CFE_ES_WaitForSystemState:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L627

In CFE_ES_GetTaskFunction:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.c#L505

**Describe the solution you'd like**
Replace delay loop w/ synchronization method

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1326
"Use %s, _func_ for all syslog messages","**Is your feature request related to a problem? Please describe.**
Function name copy/paste mistakes and various reporting formats used in `CFE_ES_SysLogWrite_Unsync` and `CFE_ES_SysLogWrite`:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L238

**Describe the solution you'd like**
Use a common format `%s: message, _FUNCTION_, ...`

**Describe alternatives you've considered**
Could use a macro

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping @dmknutsen - may require test update when checking for specific messages
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1325
Add null pointer check to CFE_ES_ReloadApp functional test,"**Is your feature request related to a problem? Please describe.**
AppFIleName NULL not checked (or tested)
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L220-L226

**Describe the solution you'd like**
Add a NULL test, add the check (if needed)

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, CFS-40",https://github.com/nasa/cFE/issues/1324
"Refactor CFE_ES_RestartApp, CFE_ES_ReloadApp, CFE_ES_DeleteApp to use common code","**Is your feature request related to a problem? Please describe.**
Logic duplicated in CFE_ES_RestartApp, CFE_ES_ReloadApp, CFE_ES_DeleteApp

**Describe the solution you'd like**
Refactor to utilize common logic

**Describe alternatives you've considered**
None

**Additional context**
Code Review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1323
Refactor/split files (headers and c) into smaller topics,"**Is your feature request related to a problem? Please describe.**
Huge files are harder to manage.  Example:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L2136
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/evs/fsw/src/cfe_evs_task.c#L1772

Note also split up old ""task"" pattern:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_task.h#L94-L118

**Describe the solution you'd like**
Split/refactor into more manageable units.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40, CFS-41",https://github.com/nasa/cFE/issues/1322
Resolve strange newline formatting,"**Is your feature request related to a problem? Please describe.**
Strange newline locations:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/inc/cfe_es_msg.h#L1279-L1280
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_version.h#L39-L41
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_version.h#L32-L34

**Describe the solution you'd like**
Adjust weighting in format definition (this would be done in cFS)

**Describe alternatives you've considered**
Reformat comments such that they format cleaner relative to cFS format definition

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, CFS-40",https://github.com/nasa/cFE/issues/1321
`CFE_ES_MAX_EID` incorrect,"**Is your feature request related to a problem? Please describe.**
Max EID incorrect:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/inc/cfe_es_events.h#L46
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/inc/cfe_es_events.h#L1449

**Describe the solution you'd like**
Fix.

**Describe alternatives you've considered**
None

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1320
Remove `extern` from function prototypes,"**Is your feature request related to a problem? Please describe.**
Inconsistently applying extern to function prototypes

**Describe the solution you'd like**
Remove, it makes no difference.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, good first issue, CFS-40, CFS-41, CFS-42, draco-rc1",https://github.com/nasa/cFE/issues/1319
CFE ES memory pool parameter order inconsistent,"**Is your feature request related to a problem? Please describe.**
Some APIs have handle first, some don't, example:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_es.h#L1193
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_es.h#L1316

**Describe the solution you'd like**
Make consistent

**Describe alternatives you've considered**
Could be I/O based ordering, if so justify as such somewhere (document typical pattern that can be followed)

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1318
Use `void *` for `CFE_ES_PoolCreateNoSem` memory pointer,"**Is your feature request related to a problem? Please describe.**
Other routines use `void *`, `CFE_ES_PoolCreateNoSem` uses `uint8 *`:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_es.h#L1193

**Describe the solution you'd like**
Make consistent

**Describe alternatives you've considered**
Maybe there was a reason, analyze and if so document

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1317
"Fix #1314, Remove Unused Error Codes","**Describe the contribution**
Fixes #1314
Removes unused error codes.  

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/cFE/pull/1316
Scrub return code names for consistency,"**Is your feature request related to a problem? Please describe.**
Consistent naming pattern not followed for return codes, example:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_error.h#L826
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_error.h#L860

**Describe the solution you'd like**
Use a consistent pattern CFE_SERVICE_SEVERITY_DESCRIPTION

**Describe alternatives you've considered**
Could create via macro, but obscures (see #1313)

**Additional context**
Code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1315
Remove unused error codes,"**Is your feature request related to a problem? Please describe.**
Unused (shell capability moved to stand-alone app):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_error.h#L350-L356

Last sender id logic removed, error code no longer used:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_error.h#L828-L835

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
CFS-40 code review

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1314
Construct return status codes from defined flags,"**Is your feature request related to a problem? Please describe.**
Error codes are hardcoded:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_error.h#L128

**Describe the solution you'd like**
Could construct using defined field values, could utilize macros

**Describe alternatives you've considered**
Leave as-is, full definition makes them easier to find from a status message.  Pattern to comment full value to retain this search capability is fragile.  Questionable benefit of changing at this point since they are all already defined.

**Additional context**
CFS-40 code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1313
WIP cFE Functional Test Structure Preview,"**Describe the contribution**
This is an overview of a few different task all merged together to get a look at the structure of the test files. To make sure everyone agrees on how they should be done and to discuss any changes they want that affect multiple tests. 

**Additional context**
This should never be merged in. It is just to have an easy way to look at the big picture. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell ",invalid,https://github.com/nasa/cFE/pull/1312
Cast `CFE_SUCCESS` to `CFE_Status_t`,"**Is your feature request related to a problem? Please describe.**
`CFE_SUCCESS` doesn't match pattern for defining other CFE status returns:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_error.h#L120

**Describe the solution you'd like**
Cast as `CFE_Status_t`

**Describe alternatives you've considered**
Document why not

**Additional context**
CFS-40 code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1311
Update CMake logic to utilize built in capabilities,"**Is your feature request related to a problem? Please describe.**
 - Could get GIT_EXECUTABLE from CMake Module:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/generate_git_module_version.cmake#L16

 - Could simplify using `string(MAKE_C_IDENTIFIER)`:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/global_functions.cmake#L32

**Describe the solution you'd like**
Use FindGit

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, build-system, CFS-40",https://github.com/nasa/cFE/issues/1310
Convert table search paths if/else checks to lists,"**Is your feature request related to a problem? Please describe.**
Long if/else:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/arch_build.cmake#L171-L185

**Describe the solution you'd like**
Convert to list

**Describe alternatives you've considered**
None

**Additional context**
CFS-40 code review

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, build-system, CFS-40",https://github.com/nasa/cFE/issues/1309
Require definition of `CFE_CPU_ID_VALUE`,"**Is your feature request related to a problem? Please describe.**
CPU_ID should be explicitly defined, defaulted here:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/target/src/target_config.c#L48-L50

**Describe the solution you'd like**
Remove default

**Describe alternatives you've considered**
None

**Additional context**
From CFS-40 code review

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1308
Cleanup relative to additional compiler warning flags,"**Is your feature request related to a problem? Please describe.**
Some projects prefer additional flags that trigger warnings in cFE.

Current set:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/sample_defs/arch_build_custom.cmake#L29-L36

Possible additions for consideration:
-Wextra -Wmissing-prototypes -Wimplicit-function-declaration -Wnested-externs

**Describe the solution you'd like**
Analyze, fix what makes sense.

**Describe alternatives you've considered**
Not required to add to default list, but should compile cleanly if enabled (for those that make sense)

**Additional context**
From CFS-40 code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1307
Comments/document cleanup relative to ES/ResourceID review (and #1283),"**Is your feature request related to a problem? Please describe.**
Various cleanup:

 - Document `OUTPUT_DIRECTORY` in `generate_config_includefile` parameter list: https://github.com/nasa/cFE/pull/1283#discussion_r611500336
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/global_functions.cmake#L67-L72

- Update parameter list in `read_targetconfig`: https://github.com/nasa/cFE/pull/1283#discussion_r611500919
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/global_functions.cmake#L134-L144

- Add NULL termination documentation on config lists (autogenerated and added via build system):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/target/src/target_config.c#L74

- Fix order of parameter documentation for `CFE_ES_WaitForSystemState`:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_es.h#L390-L396

- Remove OBE child priority comment in `CFE_ES_CreateChildTask`, related to #1033:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_es.h#L797-L798

- Improve generic counter documentation (example, purpose), really just a thread-safe counter capability (suggested at one point for CFDP throttling):
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_es.h#L1469

- Fix typos:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L663
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L700
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L1943
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_apps.h#L192

- Add comment that NULL check is done by CFE_ES_GetAppInfo/CFE_ES_GetLibInfo:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_api.c#L1080-L1084

- Document load library calls library entry function in ES context (must not halt, etc)

- Remove obsolete comments:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_erlog.c#L254-L257

- Replace obsolete comments, generically ""for initializing and starting cfe""
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_objtab.c#L26

- s/read/printed/
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/es/fsw/src/cfe_es_start.c#L99

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
From CFS-40 and #1283 code review

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, CFS-40",https://github.com/nasa/cFE/issues/1306
"Fix #1301, remove option for ""osal_compatible""","**Describe the contribution**
Currently it is assumed/required that resource IDs follow the ""osal compatible"" pattern.  Perhaps in a future version this could change, but for now it is simpler to just require this configuration, rather than having an option with only one choice.

This renames/moves the header file but the content is not fundamentally changed.

Fixes #1301 

**Testing performed**
Build and sanity check CFE, confirm normal operation
Run all unit tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1305
Deprecate CFE_ES_ChildTaskMainFuncPtr_t,"**Is your feature request related to a problem? Please describe.**
All ES task functions can use CFE_ES_TaskEntryFuncPtr_t, don't need separate child typedef
See: https://github.com/nasa/cFE/pull/1283#discussion_r611505148

**Describe the solution you'd like**
Deprecate

**Describe alternatives you've considered**
Could add `void *` to be able to spawn with context, trade a single definition vs different for main task/child.

**Additional context**
Code review #1283

**Requester Info**
Jacob Hageman - NASA/GSFC, submitted by @ezpollack
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1304
Define and use a version structure for the cFE/OSAL/PSP reporting in tlm,"**Is your feature request related to a problem? Please describe.**
Repeated individual MajorVersion, MinorVersion, Revision elements for cFE/OSAL/PSP
See https://github.com/nasa/cFE/pull/1283#discussion_r611872298

**Describe the solution you'd like**
Use a common structure.

**Describe alternatives you've considered**
None

**Additional context**
From code review #1283

**Requester Info**
Jacob Hageman - NASA/GSFC, submitted by @stashakk
","enhancement, good first issue, CFS-40",https://github.com/nasa/cFE/issues/1303
Use macro in CFE_ResourceId_IsDefined,"**Is your feature request related to a problem? Please describe.**
Compares directly to 0
See https://github.com/nasa/cFE/pull/1283#discussion_r611506161

**Describe the solution you'd like**
Use macro

**Describe alternatives you've considered**
None

**Additional context**
Code review #1283

**Requester Info**
Jacob Hageman - NASA/GSFC, submitted by @ezpollack
","enhancement, good first issue, CFS-40, draco-rc1",https://github.com/nasa/cFE/issues/1302
Remove cfe_resource_osal_compatible.h option and force use,"**Is your feature request related to a problem? Please describe.**
Not really currently an option, could simplify/clarify by forcing it

**Describe the solution you'd like**
Force use

**Describe alternatives you've considered**
None

**Additional context**
From code review #1283, various comments.

**Requester Info**
Jacob Hageman NASA/GSFC, submitted by @ezpollack","enhancement, build-system, CFS-40",https://github.com/nasa/cFE/issues/1301
Create structure to associated CFE_ES_MemAddress_t and CFE_ES_MemOffset_t,"**Is your feature request related to a problem? Please describe.**
See https://github.com/nasa/cFE/pull/1283#discussion_r611867642

CFE_ES_MemAddres_t and CFE_ES_MemOffset_t are often used in pairs.

**Describe the solution you'd like**
The two could be combined into (for example) CFE_ES_MemAddOff_t

**Describe alternatives you've considered**
None

**Additional context**
From code review #1283

**Requester Info**
Jacob Hageman NASA/GSFC, submitted by @stashakk
","wontfix, CFS-40, draco-rc1",https://github.com/nasa/cFE/issues/1300
CFE_FS_ReadHeader & WriteHeader api headers state wrong returns,"**Describe the bug**
In the header api's for ReadHeader and WriteHeader they both say that they return the execution status, however the implementation has them return the size of the file they read/wrote if successful and an error code if not. 

**Reporter Info**
Alex Campbell GSFC","enhancement, docs",https://github.com/nasa/cFE/issues/1299
Add cFE Time Current Time API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Time APIs
– CFE_TIME_GetTime
– CFE_TIME_GetTAI
– CFE_TIME_GetUTC
– CFE_TIME_GetMET
– CFE_TIME_GetMETseconds
– CFE_TIME_GetMETsubsecs

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",enhancement,https://github.com/nasa/cFE/issues/1298
Add functional tests for CFE File Header Management APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE File Header Management APIs
– CFE_FS_ReadHeader- Read a header.
– CFE_FS_InitHeader- Initialize a header.
– CFE_FS_WriteHeader- Write a header.
– CFE_FS_SetTimestamp- Change the timestamp of a header. 

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Alex Campbell GSFC",enhancement,https://github.com/nasa/cFE/issues/1297
"Update codename to Caelum and license header for release, version 7.0.0","**Is your feature request related to a problem? Please describe.**
Development version still has development labeling (as expected).

**Describe the solution you'd like**
Upon official release, update relevant version/license info.

**Describe alternatives you've considered**
None

**Additional context**
Wait until official release

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, CFS-40",https://github.com/nasa/cFE/issues/1296
cFE Integration Candidate: 2021-04-13,"## Description


### PR #1276 

Fix #1266, use events for CFE test asserts 

Reports test failures as CFE events. Test status messages are now sent as Events rather than Syslog. This allows for more processing capability, and allows failures to be received externally (e.g. ground system). 

## Context

Part of <https://github.com/nasa/cFS/pull/242>

## Tests

cFE checks <https://github.com/nasa/cFE/pull/1295/checks>
cFS bundle checks <https://github.com/nasa/cFS/pull/242/checks>

## Author

@jphickey ",,https://github.com/nasa/cFE/pull/1295
"cFS-Caelum Review, CFS-41: EVS and FS","## Description

This is a ""bookkeeping"" Pull Request meant for the cFS-Caelum Review code inspection (full-scale code review). 

This PR is solely focused on ""CFS-41"". For more info see [this readme](https://github.com/astrogeco/cFE/blob/caelum-code-review-cfs41/README.md)

The Included files are

https://github.com/astrogeco/cFE/blob/caelum-code-review-cfs41/.gitignore

```.gitignore

# EVS

# EVS
!modules/evs/fsw/**/**
!modules/core_api/fsw/inc/cfe_evs*
!modules/core_private/fsw/inc/cfe_evs_log_typedef.h
!modules/evs/CMakeLists.txt

# FS
!cfe_fs*
!modules/fs/fsw/*
!modules/fs/CMakeLists.txt
```

## Objectives

1. This review starts on 04/12/2021 and ends on 04/16/2021.
2. Dispositions of findings is on 04/19/2021. 

3. See also ""The Power of 10"" rules for safety-critical code. https://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code#:~:text=The%20Power%20of%2010%20Rules,to%20review%20or%20statically%20analyze

7. NOTE: Don't spend too much time over coding standard violations. The Static Code Analysis tool will enforce the coding standards. This code is developed by GSFC, so GSFC coding standards will be enforced for this code base.


### Notes

If there's anything else that is observed as a repeated pattern, feel free to document as a general commen

There are several places that would trigger warnings with some common compilers/warning options. It would be nice to follow rule 10 in ""The Power of 10"".

Quick summary/references for currently enforced settings on the FSW
Compiler options (note -Wall and -Werror) - https://github.com/nasa/cFE/blob/0850b19a09417dd7730e9c1b44e0f5687ef0f721/cmake/sample_defs/arch_build_custom.cmake#L28-L37

cppcheck - https://github.com/nasa/cFE/blob/0850b19a09417dd7730e9c1b44e0f5687ef0f721/.github/workflows/run_fsw_cppcheck.sh#L3

CodeQL - https://github.com/nasa/cFE/blob/0850b19a09417dd7730e9c1b44e0f5687ef0f721/.github/workflows/codeql-build.yml#L35-L39

CodeSonar - currently using default set for cFE, extending to JPL and MISRA is future work

For CodeQL and CodeSonar we don't eliminate all warnings, but we do analyze and disposition them all (plan to report dispositions as part of certification package)

This approach is compliant with the latest GSFC-582 standard (that is still going through review). Happy to discuss any additional settings that you have concerns about.
","CFS-41, review",https://github.com/nasa/cFE/pull/1294
CFE_PSP_GetTime conversion to MET,"**Is your feature request related to a problem? Please describe.**

We have a hardware clock in our system that we plan to use as the source clock for `CFE_PSP_GetTime`.

We also have an FPGA system that latches the hardware clock into a register on certain events. We'd like to read the register value after it's latched, and then convert it to a cFS MET. Does CFE Time services already have a routine for converting PSP Times to METs?

**Describe the solution you'd like**

A function that I can pass an old LatchClock time value into and get back a valid `CFE_TIME_Reference_t` value. Something similar to `CFE_TIME_GetReference(CFE_TIME_Reference_t *Reference)`, but with an additional input that replaces `Reference->CurrentLatch`.

**Describe alternatives you've considered**

Our primary alternative at this point is to add code to the PSP that updates our hardware clock via TATT commands. Any other ideas would also be welcome.

**Requester Info**

Morgan Redfield
Morgan.Redfield@astrobotic.com
Astrobotic
",question,https://github.com/nasa/cFE/issues/1293
"Fix #1281, remove testrunner and convert testcase to app","**Describe the contribution**
- Removes the separate CFE ""testrunner"" module and moves the logic associated with running a test into cfe_assert library.
- Converts the ""testcase"" module from a library into an app, by calling into the runner logic that is now inside cfe_assert.

This permits tests to be invoked at any time by issuing the ES ""start app"" command and specifying the testcase app.

Fixes #1281

**Testing performed**
Build and sanity check CFE.
Run all currently-implemented functional tests

**Expected behavior changes**
Each functional test is a separate app, not a library, so it can be started and stopped via ES command like any other app.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Requires #1276 as prerequisite

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1292
Fix typo in test macro name: UtAssert_ResourceID_Undifeined,"**Describe the bug**
Typo in recently added macro name:

https://github.com/nasa/cFE/blob/eaa343c2e5d457f7d04b65ada8881b24e4fb46bc/modules/cfe_testcase/src/cfe_test.h#L52

**Expected behavior**
""Undifeined"" -> ""Undefined""

**Additional context**
From #1251, which somehow got merged to main without fixing this

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",unit-test,https://github.com/nasa/cFE/issues/1291
"Fix #1287, split interface and implementation modules","**Describe the contribution**
Separate the list of CFE core interface modules (e.g. core_api) from the list of CFE core implementation modules (e.g. msg).  This allows the content of core_api to be expanded to include any additional modules the user has added to cFE core locally.

Fixes #1287 

**Testing performed**
Build and sanity check CFE
Run all unit tests

**Expected behavior changes**
No FSW change, only build system.
The ""core_api"" interface module will now be expanded to include anything that is in the `MISSION_CORE_MODULES` list, so if the mission has locally expanded this list, the additional/expanded content will become part of `core_api` automatically.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/1290
"Fix #809, es child task functional test","**Describe the contribution**
Fixes #809 
adds new functional tests for child cases. 

Fixes #1291 
Fixed spelling mistake

**Expected behavior changes**
none

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This is just the most simple cases, edge cases are not checked. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1289
format code,"**Describe the contribution**
A clear and concise description of what the contribution is.
- Include explicitly what issue it addresses [e.g. Fixes #X]

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
- Else if Company
  - **HAND SIGNED** Company CLA must be on file (once per release): [Company CLA](../docs/GSC_18128_Corp_CLA_form_1219.pdf)
- Else if Individual
  - **HAND SIGNED** Individual CLA must be on file (once per release): [Individual CLA](../docs/GSC_18128_Ind_CLA_form_1219.pdf)
",invalid,https://github.com/nasa/cFE/pull/1288
Module list is duplicated/hard coded so can't be modified,"**Is your feature request related to a problem? Please describe.**
Part of the intent of modules was to be able to replace them.  Hard-coding of the module list at:
https://github.com/nasa/cFE/blob/eaa343c2e5d457f7d04b65ada8881b24e4fb46bc/modules/core_api/CMakeLists.txt#L18

defeats this capability.

**Describe the solution you'd like**
Define the module list in a way it can be modified/customized by configuration.

**Describe alternatives you've considered**
None

**Additional context**
Currently breaks message header customization.

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping - @excaliburtb","enhancement, build-system",https://github.com/nasa/cFE/issues/1287
"Fix #1285, Remove broken BUILDDIR reference","**Describe the contribution**
Fix #1285 - Removes BUILDDIR reference and an old comment

**Testing performed**
`make BUILDDIR=sample prep` no longer fails.

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Docker container
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hagmean - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/1286
Remove BUILDDIR from Makefile (breaks if defined),"**Is your feature request related to a problem? Please describe.**
`make BUILDDIR=test prep` fails

**Describe the solution you'd like**
Remove the reference

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, build-system",https://github.com/nasa/cFE/issues/1285
cFE Integration candidate: 2021-04-06,"## Description

### PR #1251  

Fix #808, ES Info API Functional test 

Adds new tests for the ES Info APIs

## Context
Part of <https://github.com/nasa/cFS/pull/238>

## Tests
cFE Checks <https://github.com/nasa/cFE/pull/1284/checks>
Bundle Checks: <https://github.com/nasa/cFS/pull/238/checks>",,https://github.com/nasa/cFE/pull/1284
"cFS-Caelum Review, CFS-40: ES, Resource ID, core api and private, and build system","## Description

This is a ""bookkeeping"" Pull Request meant for the cFS-Caelum Review code inspection (full-scale code review). 

This PR is solely focused on ""CFS-40"". For more info see [this readme](https://github.com/astrogeco/cFE/blob/caelum-code-review-cfs40/README.md)

The Included files are

https://github.com/astrogeco/cFE/blob/c79d66969673a37900d468203b161785bd19874f/.gitignore#L11-L49 

```.gitignore
# Build Files
!cmake/**/target_config.*
!cmake/target/CMAKELists.txt
!cmake/arch_build.cmake
!cmake/cfe_generated_file.h.in
!cmake/check_header.c.in
!cmake/generate_build_env.cmake
!cmake/generate_git_module_version.cmake
!cmake/global_functions.cmake
!cmake/mission_build.cmake
!cmake/mission_defaults.cmake
!/CMakeLists.txt

# cFE-Core
!modules/core_api/fsw/inc/cfe.h
!modules/core_api/fsw/inc/cfe_endian.h
!modules/core_api/fsw/inc/cfe_error.h
!modules/core_api/fsw/inc/cfe_version.h

# ES
!modules/core_api/fsw/inc/cfe_es*
!modules/core_private/fsw/inc/cfe_es*

!modules/es/fsw/**
!modules/es/CMakeLists.txt

# ResourceID
!modules/core_api/fsw/inc/cfe_resourceid*
!modules/core_private/fsw/inc/cfe_core_resourceid_basevalues.h

!modules/resourceid/fsw/src/*
!modules/resourceid/option_inc/*
!modules/resourceid/CMakeLists.txt
!modules/resourceid/mission_build.cmake
```

## Objectives

1. This review starts on 2021-04-05 and ends on 2021-04-09
2. Dispositions of findings is on 2021-04-12

3. Reviewers only need to review source files, header files & build files.
4. Use .ppt, .pdf, .txt & .xlsx files for background information about the code.
5. See the Attachments section for Peer Review Data Package.

6. See also ""The Power of 10"" rules for safety-critical code. https://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code#:~:text=The%20Power%20of%2010%20Rules,to%20review%20or%20statically%20analyze

7. NOTE: Don't spend too much time over coding standard violations. The Static Code Analysis tool will enforce the coding standards. This code is developed by GSFC, so GSFC coding standards will be enforced for this code base.


### Notes

Note a few already existing issues (no need to individually comment on occurrences):

Doxygen event documentation doesn't match code: https://github.com/nasa/cFE/issues/508
End of function comments out of date (generalized/paraphrased version of https://github.com/nasa/cFE/issues/275)
Update code/unit tests to use CFE_Status_t: https://github.com/nasa/cFE/issues/921


If there's anything else that is observed as a repeated pattern, feel free to document as a general commen

There are several places that would trigger warnings with some common compilers/warning options. It would be nice to follow #10 rule in ""The Power of 10"".

Quick summary/references for currently enforced settings on the FSW
Compiler options (note -Wall and -Werror) - https://github.com/nasa/cFE/blob/0850b19a09417dd7730e9c1b44e0f5687ef0f721/cmake/sample_defs/arch_build_custom.cmake#L28-L37

cppcheck - https://github.com/nasa/cFE/blob/0850b19a09417dd7730e9c1b44e0f5687ef0f721/.github/workflows/run_fsw_cppcheck.sh#L3

CodeQL - https://github.com/nasa/cFE/blob/0850b19a09417dd7730e9c1b44e0f5687ef0f721/.github/workflows/codeql-build.yml#L35-L39

CodeSonar - currently using default set for cFE, extending to JPL and MISRA is future work

For CodeQL and CodeSonar we don't eliminate all warnings, but we do analyze and disposition them all (plan to report dispositions as part of certification package)

This approach is compliant with the latest GSFC 582 standard (that is still going through review). Happy to discuss any additional settings that you have concerns about.
","CFS-40, review",https://github.com/nasa/cFE/pull/1283
[DELETED],"## Description

This is a ""bookkeeping"" Pull Request meant for the cFS-Caelum cFE code inspection (full-scale code review). ",invalid,https://github.com/nasa/cFE/pull/1282
Make functional tests runnable via CFE_ES_START_APP_CC command,"**Is your feature request related to a problem? Please describe.**
In the functional test proof-of-concept, the test cases are libraries that are loaded in the startup script, and the ""testrunner"" app actually runs them.  But because libraries are not loadable/unloadable via command, it requires a custom startup script, and restarting CFE in order to run tests.

**Describe the solution you'd like**
The functional tests should be integrated with test runner such that they are each their own app, therefore runnable by simply issuing the ES command to start the app if they were not part of the initial startup script.

**Additional context**
This will simplify the process of running tests on targets, since it will alleviate the need to customize the startup script.

The `cfe_assert` library itself will likely need to remain as a library, because it is a common dependency between all test apps.  But it shouldn't hurt to simply load this by default in the sample startup script, it won't interfere with FSW.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test",https://github.com/nasa/cFE/issues/1281
[DELETED],"## Description

This is a ""dummy"" Pull Request meant for the cFS-Caelum cFE code inspection (full-scale code review). ",invalid,https://github.com/nasa/cFE/pull/1280
cFE Integration candidate: 2021-04-02,"## Change Description and Impacts

### PR #1274 

Fix #1273, remove PspConfig global object 

Removes `PspConfig` member from the `GLOBAL_CONFIGDATA` object. Updates the only remaining reference to this object inside the `CFE_PSP_VERSION` and uses the new Version API instead. Updates the OSAL version print to use the version API call and CFE uses the macro directly.

### PR #1278 

Fix #1277, ZeroCopy typo in ReadMe.md

Replaces duplicate mention of the removed `CFE_SB_ZeroCopyGetPtr` with the correct removal target of `CFE_SB_ZeroCopyReleasePtr`


## Tests 
cfe <https://github.com/nasa/cFE/pull/1279/checks>
bundle <https://github.com/nasa/cFS/pull/233/checks>

## Additional Context

Part of <https://github.com/nasa/cFS/pull/233>

## Authors
@jphickey 
@astrogeco ",,https://github.com/nasa/cFE/pull/1279
"Fix #1277, ZeroCopy typo in ReadMe","**Describe the contribution**
Fix #1277, ZeroCopy typo in ReadMe

**Testing performed**
Docs only

**Expected behavior changes**
None

**Additional context**
None

**Third party code**
Nonoe

**Contributor Info - All information REQUIRED for consideration of pull request**
@astrogeco",,https://github.com/nasa/cFE/pull/1278
Duplicate Function in Readme,"**Describe the bug**
In the version history of the readme, it states: 
> Removes the now-unnecessary CFE_SB_ZeroCopyHandle_t type and all APIs that refer or require it .Replaces CFE_SB_ZeroCopyGetPtr() and CFE_SB_ZeroCopyGetPtr() with two new simplified functions CFE_SB_AllocateMessageBuffer() and CFE_SB_ReleaseMessageBuffer() , respectively. These new functions do not use a separate handle. Updates the CFE_SB_TransmitBuffer() API to also remove the handle. Does affect public APIs. 

The issue is that the version history is stating that the same function, CFE_SB_ZeroCopyGetPtr, is being replaced by two different functions. 

In reality, CFE_SB_ZeroCopyGetPtr was replaced by CFE_SB_AllocateMessageBuffer. CFE_SB_ZeroCopyReleasePtr and CFE_SB_ZeroCopySend, not CFE_SB_ZeroCopyGetPtr, was replaced by CFE_SB_ReleaseMessageBuffer.  

**Expected behavior**
State that CFE_SB_ZeroCopyReleasePtr and CFE_SB_ZeroCopySend, not CFE_SB_ZeroCopyGetPtr, was replaced by CFE_SB_ReleaseMessageBuffer. 

**Code snips**
https://github.com/nasa/cFE/pull/1257/files 

**Reporter Info**
Ariel Adams, ASRC Federal 
",docs,https://github.com/nasa/cFE/issues/1277
"Fix #1266, use events for CFE test asserts","**Describe the contribution**
Reports test failures as CFE events, which allows for more processing capability, and allows failures to be recieved externally (e.g. ground system).

Fixes #1266

**Testing performed**
Update startup script to load the CFE functional test libs + apps and execute CFE to run the tests.  

**Expected behavior changes**
Test status messages sent as Events rather than Syslog.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Also tested in conjunction with #1251.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/1276
"Fix #1157, increment sequence if indicated","**Describe the contribution**
Do not restrict sequence increment to TLM only, since CMD packets can be locally generated too (e.g. SCH, TIME).

Fixes #1157

**Testing performed**
Build and sanity check CFE, run all unit tests.

**Expected behavior changes**
All transmitted messages will get their sequence count incremented if transmitted with parameter `IncrementSequenceCount` set to true.  Previously, for some reason, this flag was only honored on TLM packets.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Thus far I've not found a real reason/explanation as to why this flag would be ignored for CMD packets.  If there is a good reason, it should be documented.  Otherwise for the sake of consistency it should be done for all messages.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Ignore, CCB:Splinter",https://github.com/nasa/cFE/pull/1275
"Fix #1273, remove PspConfig global object","**Describe the contribution**
The `PspConfig` member is removed from the `GLOBAL_CONFIGDATA` object.

Updates the only remaining ref to this object inside the CFE_PSP_VERSION macro to use the API function instead.

This also updates the OSAL and CFE version print to _not_ depend on the global object too - OSAL becomes an API call and CFE can just use the macro directly because its the same library (itself) so no linking concern/issue.

Fixes #1273

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Co-Dependent with nasa/psp#280

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",dependency,https://github.com/nasa/cFE/pull/1274
"Remove ""PspConfig"" member in config structure","**Is your feature request related to a problem? Please describe.**
The ""PspConfig"" member does not really serve a useful purpose anymore and should be cleaned up.  Issue nasa/psp#280 will remove the PSP definition of this structure.

**Describe the solution you'd like**
This structure also needs to be removed from the CFE `GLOBAL_CONFIGDATA` object.  

**Additional context**
This is co-dependent with nasa/psp#280 and needs to be done in the same build cycle.

The only remaining reference to this `PspConfig` member object is via the CFE_PSP_VERSION macro, where the version is printed.  This should be replaced with a call to `CFE_PSP_GetVersionString()` instead.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1273
"Add group name to doxygen ""close section"" command","**Is your feature request related to a problem? Please describe.**
Keeping track of large doxygen sections can be hard. 

```c 
/** @defgroup CFEAPISBZeroCopy cFE Zero Copy APIs
 * @{
 */

/*****************************************************************************/
/**
** \brief Get a buffer pointer to use for ""zero copy"" SB sends.
**
** \par Description
**          This routine can be used to get a pointer to one of the software bus'
**          internal memory buffers that are used for sending messages.  The caller
**          can use this memory buffer to build an SB message, then send it using
**          the CFE_SB_TransmitBuffer() function.  This interface avoids an extra
**          copy of the message from the user's memory buffer to the software bus
**          internal buffer.
**
** \par Assumptions, External Events, and Notes:
**          -# The pointer returned by CFE_SB_AllocateMessageBuffer() is only good for one
**             call to CFE_SB_TransmitBuffer().
**          -# Once a buffer has been successfully transmitted (as indicated by a successful
**             return from CFE_SB_TransmitBuffer()) the buffer becomes owned by the SB application.
**             It will automatically be freed by SB once all recipients have finished reading it.
**          -# Applications must not de-reference the message pointer (for reading
**             or writing) after the call to CFE_SB_TransmitBuffer().
**
** \param[in]  MsgSize  The size of the SB message buffer the caller wants
**                      (including the SB message header).
**
** \return A pointer to a memory buffer that message data can be written to
**         for use with CFE_SB_TransmitBuffer().
**/
CFE_SB_Buffer_t *CFE_SB_AllocateMessageBuffer(size_t MsgSize);

... 

/** @} */
```

**Describe the solution you'd like**
Add the section name to the closing comment, similar to what we already do for `#endif` segments. 


```c

/** @defgroup CFEAPISBZeroCopy cFE Zero Copy APIs
 * @{
 */

...

/** @} CFEAPISBZeroCopy */

```

**Describe alternatives you've considered**
Leave as is
",docs,https://github.com/nasa/cFE/issues/1272
"Fix #1270, limit check in pool validation","**Describe the contribution**
It is OK/valid if NumBuckets is the maximum value.

Fixes #1270

**Testing performed**
Build and run all unit tests

**Expected behavior changes**
Pool structure using max value will correctly validate

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/cFE/pull/1271
Incorrect limit check in CFE_ES_GenPoolValidateState,"**Describe the bug**
A check for the ""NumBuckets"" member should be `<=` but it is using `<`.

**To Reproduce**
Attempt to validate PoolID 1 which uses the max number of buckets.  Function returns false, but record is valid.

**Expected behavior**
CFE_ES_GenPoolValidateState() should return true if using the max number of buckets (17 by default).

**Code snips**
One-liner here:
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/es/fsw/src/cfe_es_generic_pool.c#L604

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1270
Refactor CFE_ES_ERR_BUFFER to CFE_ES_BAD_ARGUMENT,"**Is your feature request related to a problem? Please describe.**
Most functions return Bad_argument when they get a null pointer but a few stragglers still use buffer. 

**Describe the solution you'd like**
They should all be consistent and return the same error. 

**Additional context**
This is something that should have been done for #547 

**Requester Info**
Alex Campbell GSFC",enhancement,https://github.com/nasa/cFE/issues/1269
"Fix #1267, #1269 add null pointer check","**Describe the contribution**
Fixes #1267
adds null pointer checks

Fixes #1269 
finishes refactor for buffer error to bad argument. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1268
CFE_ES_GetAppID missing null pointer check,"**Describe the bug**
CFE_ES_GetAppID doesn't have a null pointer check and seg faults if passed one. 

**To Reproduce**
Call it with a null pointer 

**Expected behavior**
Should return CFE_ES_BAD_ARGUMENT

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Alex Campbell GSFC
",enhancement,https://github.com/nasa/cFE/issues/1267
CFE_Assert should use SendEvent,"**Is your feature request related to a problem? Please describe.**
CFE_Assert currently has all it's outputs done through CFE_ES_WriteToSysLog which makes them hard to read and failures can get lost in all the noise. 

**Describe the solution you'd like**
CFE_Assert could instead send events through the test runner, which would give a lot more flexibility to the output. 

**Describe alternatives you've considered**
We just leave it as it is. 

**Additional context**
https://github.com/nasa/cFE/issues/94 could then be a further enhancement of this done at a later time. 

**Requester Info**
Alex Campbell GSFC",enhancement,https://github.com/nasa/cFE/issues/1266
Update cfe_assert/cfe_testrunner/cfe_testcase namespaces to match cFS suggested standard,"**Is your feature request related to a problem? Please describe.**
From #1242, the cfe_testrunner entry point was too long, so namespace was adjusted to CFE_TR.  cFS suggested namespace is typically just a couple characters (2-4).

**Describe the solution you'd like**
Adjust all three to shorter/consistent namespaces (module name, function names, globals, etc)

**Describe alternatives you've considered**
CFE_ASRT, CFE_TR, CFE_TC?

**Additional context**
#1242,

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/cFE/issues/1265
"Convert functional test startup script example to use ""simple"" filenames","**Is your feature request related to a problem? Please describe.**
Don't need directory or extension in https://github.com/nasa/cFE/blob/main/docs/README_functionaltest.md

**Describe the solution you'd like**
Simplify

**Describe alternatives you've considered**
None

**Additional context**
Discussed at CCB for #1242

**Requester Info**
Jacob Hageman - NASA/GSFC",docs,https://github.com/nasa/cFE/issues/1264
"Fix #1261, Remove redundant checks in CFE_EVS_EarlyInit","**Describe the contribution**
Fix #1261 - removed redundant checks for CFE_SUCCESS

**Testing performed**
Build/run unit tests, passed

**Expected behavior changes**
None, squashes static analysis warning

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1263
"Fix #1239, scrub include header guards","**Describe the contribution**
All C header files should have a header guard matching the file name of the header, in ALL_CAPS, with no extra leading/trailing
underscores.

This also takes a first pass at converting the file-scope block comments to a doxygen format to include a summary of the file.

Fixes #1239

**Testing performed**
Build and sanity check CFE, build and run all unit tests
Build documentation and confirm the content of ""Detailed Description"" on the files contains the info from `@file` doxygen blocks.

**Expected behavior changes**
No impact to behavior.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/cFE/pull/1262
Redundant check in CFE_EVS_EarlyInit,"**Is your feature request related to a problem? Please describe.**
Redundant check:
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/evs/fsw/src/cfe_evs_task.c#L117

Only way to get here is if it's already CFE_SUCCESS

**Describe the solution you'd like**
Remove redundant check, false condition can never execute (would require returning from the `CFE_PSP_Panic`)

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1261
"Fix #1259, Add branch coverage option to genhtml","**Describe the contribution**
Fix #1259, adds --branch-coverage option to genhtml line in lcov Makefile rule

**Testing performed**
`make lcov` - observe branch coverage summary reported, also checked and html includes branch coverage

**Expected behavior changes**
No code behavior changes

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1260
Add generation of branch coverage info to genhtml line (make lcov rule),"**Is your feature request related to a problem? Please describe.**
genhtml not reporting/generating branch coverage

**Describe the solution you'd like**
Add `--branch-coverage` to genhtml line in Makefile

**Describe alternatives you've considered**
None

**Additional context**
Adds the text summary and info in html

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, unit-test",https://github.com/nasa/cFE/issues/1259
cFE Integration candidate: 2021-03-30,"**Describe the contribution**
Fix #1180, Removes impossible conditions
Fix #1002, Remove deprecated elements 
Fix #1252, Squash potentially uninitialized variable warnings
Fix #1185, Squash possible uninitialized variable false alarms
Fix #1246, Typo in CFE_TBL_Validate AppName
Fix #1192, Initialize TotalMsgSize in CFE_SB_GetUserDataLength 
Fix #1187, Increment CreatePipeErrorCounter for all create pipe errors
Fix #1186, Remove useless assignments/checks
Fix #1239, scrub include header guards 
Fix #1194, check for NULL in SlotUsed helpers 
Fix #1261, removed redundant checks for CFE_SUCCESS
Fix #1215, remove task registration calls 
Fix #1223, shorten TestRunner function name 
Fix #1264, Convert functional test startup script example to use ""simple"" filenames
Fix #1164, use FS file name parser for commands
Fix #1155, clean up zero copy API
Fix #1181, global variable cleanup 
Fix #1206, report PSP version in ES HK TLM 
Fix #1270, limit check in pool validation
Fix #1267, add null pointer check 
Fix #1269, replace `CFE_ES_ERR_BUFFER` return for invalid null pointer arguments
Fix #1259, adds --branch-coverage option to genhtml line in lcov Makefile rule


## Testing
cFE Tests https://github.com/nasa/cFE/pull/1258/checks
bundle tests <https://github.com/nasa/cFS/pull/227/checks>

## Behavior Changes

### PR #1237 
Removes cases in `cfe_es_apps.c` and `cfe_tbl_internal.c` that could never hit the alternate condition since the condition was already checked

### PR #1240 

Removes all APIs deprecated in #777 and #998

### PR #1253

Resolves CodeQL warnings on uninitialized variables.

### PR #1241

Refactors a small portion of `CFE_TIME_UnregisterSynchCallback` and initializes variables to resolve ""uninitialized variable"" false alarms. 

### PR #1247 

Fixes a typo in initialization in `CFE_TBL_Validate( CFE_TBL_Handle_t TblHandle )`

### PR #1234 
Initializes `TotalMsgSize` as 0 to avoid static analysis warning of ""use before initialized""

### PR #1245 
Increments the `CreatePipeErrorCounter` for all create pipe errors to eliminate a trivial static analysis warning 

### PR #1236 

Removes redundant or unreachable assignments and checks

### PR #1262 

Updates header guards to standard format. Converts some file-scope block comments to a doxygen format to include a summary of the file.

### PR #1256 

Enables the internal helper functions that determine table slot availability to handle NULL pointers.

### PR #1263 

Resolves static analysis warnings by removing redundant check for `CFE_SUCCESS` in `CFE_EVS_EarlyInit`

### PR #1250 

**This API change affects cFS apps.** Moves the invocation of `CFE_PSP_AttachExceptions()` from the registration function to the pre-entry function and removes all references to task registration in code, docs, and tests. 

### PR #1242

Renames `CFE_TestRunner_AppMain` as `CFE_TR_AppMain` so it is less than 20 characters long. Updates App file names in documentation for `cfe_es_startup.scr`.

### PR #1229

Replace the call to `CFE_SB_MessageStringGet()` with the new filename-aware function `CFE_FS_ParseInputFileName()` for commands that contain file names like `CFE_ES_StopPerfDataCmd`. The default pathname/extension logic is now applied here too and only a ""basename"" is strictly necessary, although if a full/absolute path is given, it will be used as is.

### PR #1257 

Removes the now-unnecessary `CFE_SB_ZeroCopyHandle_t` type and all APIs that refer or require it .Replaces `CFE_SB_ZeroCopyGetPtr()` and `CFE_SB_ZeroCopyReleasePtr()` with two new simplified functions `CFE_SB_AllocateMessageBuffer()` and `CFE_SB_ReleaseMessageBuffer()` , respectively.  These new functions do not use a separate handle. Updates the `CFE_SB_TransmitBuffer()` API to also remove the handle. Does affect public APIs.

### PR #1254

Internal cleanup localized to ES implementation. Consolidate all ES global variables under the `CFE_ES_Global` struct. Removes the separate `CFE_ES_TaskData` and some random pointers that were stored at global scope. Adjusts all references to the deprecated items accordingly (search and replace). 

### PR #1255

Adds PSP version info to ES Housekeeping TLM messages. Changes both PSP and OSAL version info assignments on HK TLM to use the new version info API.

### PR #1271

Fixes check for ""NumBuckets"" member to use `<=` instead of `<`. `CFE_ES_GenPoolValidateState()` now returns `true` if using the max number of buckets (17 by default) and the pool structure using max value will correctly validate

### PR #1268  

Replaces remaining `CFE_ES_ERR_BUFFER` with `CFE_ES_BAD_ARGUMENT` for when functions receive an invalid null-pointer argument. Adds null pointer checks in `cfe_es_api.c`.

### PR #1260 

Adds branch coverage to html report when running `make lcov`

## Additional Context

Part of <https://github.com/nasa/cFS/pull/227>

## Authors

@skliper 
@jphickey 
@zanzaben 
@astrogeco

",,https://github.com/nasa/cFE/pull/1258
"Fix #1155, clean up zero copy API","**Describe the contribution**
This removes the now-unnecessary `CFE_SB_ZeroCopyHandle_t` type and all APIs that refer/require this extra handle.

Adds two new simplified functions `CFE_SB_AllocateMessageBuffer()` and `CFE_SB_ReleaseMessageBuffer()` to replace `CFE_SB_ZeroCopyGetPtr()` and `CFE_SB_ZeroCopyReleasePtr()`, respectively.  These new functions do not use a separate handle.

Updates the `CFE_SB_TransmitBuffer()` API to also remove the handle.

Fixes #1155

**Testing performed**
Build and run CFE, sanity check, run all tests.
Also Updated CI_LAB to use this zero copy API pattern, and confirm that all is working correctly.

**Expected behavior changes**
Removes redundant handle type and simplifies API.
Note - This does affect public APIs.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
See also nasa/ci_lab#73

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",breaking,https://github.com/nasa/cFE/pull/1257
"Fix #1194, check for NULL in SlotUsed helpers","**Describe the contribution**
These are internal helper functions that determine if a table slot corresponding to a given ID is in use or free/available.

This updates the function to handle NULL pointers even though in context they are used the lookup should always work.

Fixes #1194

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Should resolve a static analysis warning

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1256
"Fix #1206, report PSP version in ES HK TLM","**Describe the contribution**
Add PSP version info to ES Housekeeping TLM messages.
This is done equivalently to OSAL version info.  Changes both to use the proper version API.

Fixes #1206

**Testing performed**
Build and sanity check CFE, confirm HK TLM packets transmitted correctly.

**Expected behavior changes**
Changes format of HK TLM to include PSP version info.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This may need a corresponding update in the Python ground system for ES HK to display correctly, since it adds new fields.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/cFE/pull/1255
"Fix #1181, global variable cleanup","**Describe the contribution**
Consolidate all ES global variables under a single CFE_ES_Global.

Removes the separate CFE_ES_TaskData as well as some random pointers
that were stored at global scope.

All references adjusted accordingly (search and replace).

Fixes #1181

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
None, internal cleanup localized to ES implementation

**System(s) tested on**
Ubuntu 20.04

**Additional context**
The following ES variables were instantiated separately at global scope without real reason:

- CFE_ES_TaskMain
- CFE_ES_ResetDataPtr
- Perf (was not even qualified w/CFE_ES_)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1254
"Fix #1252, Squash potentially uninitialized variable warnings","**Describe the contribution**
Fix #1252 - Initialized all the potentially uninitialized variables (all false alarms)

**Testing performed**
Build/run unit tests, passed

**Expected behavior changes**
None, just squashes CodeQL warnings

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
Static analysis warning squash

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1253
Potentially uninitialized local variable (false alarm squash) - CodeQL,"**Is your feature request related to a problem? Please describe.**
Another round of potentially uninitialized local variable squashes.  All false alarms but easy to initialized.

https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/es/fsw/src/cfe_es_apps.c#L82
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/sb/fsw/src/cfe_sb_task.c#L1063
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/evs/fsw/src/cfe_evs_task.c#L1686
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/evs/fsw/src/cfe_evs_log.c#L142
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/es/fsw/src/cfe_es_task.c#L1221
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/es/fsw/src/cfe_es_task.c#L1376
https://github.com/nasa/cFE/blob/98bc15851ebbca83b01947520232ca0cf67a30cf/modules/es/fsw/src/cfe_es_task.c#L1887

**Describe the solution you'd like**
Initialize

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warnings

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1252
"Fix #808, ES API functional tests","**Describe the contribution**
Fixes #808 
New tests for the ES Info API's 

**Testing performed**
This is the test

**Expected behavior changes**
none

**Additional Context**
Dependant on #1268

Addresses are only valid on VxWorks system so the tests for when that is true have not be run and verified. 

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",CCB:Approved,https://github.com/nasa/cFE/pull/1251
"Fix #1215, remove task registration calls","**Describe the contribution**
Explicit task registration is no longer necessary, since all required actions can be done before invoking the entry point.

This moves the invocation of `CFE_PSP_AttachExceptions()` from the registration function to the pre-entry function, this was
the only remaining action in task registration.

All references to task registration in code, docs, and tests are removed.

Fixes #1215

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
No impact to behavior, but this is an API change that affects apps.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
CFE_ES_RegisterApp and CFE_ES_RegisterChildTask functions no longer exist.  Requires updates to apps to remove these calls if they are referenced.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1250
CFE_ES_CopyModuleAddressInfo not working ,"**Describe the bug**
When getting the app info, the AddressesAreValid is false. That field is set by CopyModuleAddressInfo when it's Return code is not OS_SUCCESS. 

**To Reproduce**
Steps to reproduce the behavior:
Call CFE_ES_GetAppInfo 
See that AddressesAreValid are set to false. 

**Expected behavior**
It shouldn't be setting them to false. 

**System observed on:**
Ubuntu 20.04

**Additional context**
When called on an external app the return code is successful but AddressesAreValid is still 0. 
When called on a core app the return code it -16 Invalid ID

**Reporter Info**
Alex Campbell GSFC",question,https://github.com/nasa/cFE/issues/1249
Trigger for static analysis 20210323,"**Describe the contribution**
CodeQL results not showing up on branch pushed to fork.  Test PR for static analysis

**Testing performed**
N/A

**Expected behavior changes**
N/A

**System(s) tested on**
CI

**Additional context**
For static analysis

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","invalid, CCB:Ignore",https://github.com/nasa/cFE/pull/1248
"Fix #1246, Typo in CFE_TBL_Validate AppName","**Describe the contribution**
Fix #1246 - AppName initialization from ""UNKNWON"" to ""UNKNOWN""

**Testing performed**
CI

**Expected behavior changes**
None, just fixes the typo in initialization (typically replaced by the real AppName).

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1247
Misspelled AppName string in tbl CFE_TBL_Validate function,"**Describe the bug**
The CFE_TBL_Validate( CFE_TBL_Handle_t TblHandle ) has a misspelling in the AppName string ""UNKNWON""

**To Reproduce**
Directly visible in cfe\fsw\cfe-core\src\tbl\cfe_tbl_api.c -- int32 CFE_TBL_Validate( CFE_TBL_Handle_t TblHandle )

**Expected behavior**
The AppName array should be initialized to the same, consistent string 'UNKNOWN' as elsewhere in the code. However in the usual case, the AppName would almost immediately be replaced with the valid CFE_ES_GetAppName() value upon passing CFE_TBL_ValidateAccess() and would not have much impact other than test logging.

**Code snips**
cfe/fsw/cfe-core/src/tbl/cfe_tbl_api.c
```
int32 CFE_TBL_Validate( CFE_TBL_Handle_t TblHandle )
{
    int32                       Status;
    uint32                      ThisAppId;
    CFE_TBL_RegistryRec_t      *RegRecPtr;
    CFE_TBL_AccessDescriptor_t *AccessDescPtr;
    char                        AppName[OS_MAX_API_NAME]={""UNKNWON""};
```

**System observed on:**
noticed on code inspection

**Additional context**


**Reporter Info**
Mark O. Schlegel, Hammers Inc
",enhancement,https://github.com/nasa/cFE/issues/1246
"Fix #1187, Increment CreatePipeErrorCounter for all create pipe errors","**Describe the contribution**
Fix #1187 - increments the CreatePipeErrorCounter for all create pipe errors which eliminates a static analysis warning for trivial case

**Testing performed**
Build/run unit tests, passed

**Expected behavior changes**
Increments the error counter for all pipe creation errors

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1245
Consolidate CFE_PSP_Get_Timebase and CFE_PSP_GetTime,"**Describe the bug**
This PSP function is not particularly well-documented.  On some systems (pc-linux) it ultimately returns the value of the POSIX ""CLOCK_MONOTONIC"" clock from the kernel.  But on MCP750 it is calculated from a hardware tick counter that wraps every 27 seconds.  There is a bunch of logic in CFE TIME to handle handle this wrap.

**To Reproduce**
The bug is that the background task also samples CFE_PSP_GetTime but does not check for wrap, which works fine on Linux but on VxWorks this probably introduces a timing anomaly every 27 seconds when it wraps.  This probably isn't all that noticeable/serious because the background job will just runs an extra cycle and then resume normal operation, but incorrect nonetheless.

**Expected behavior**
Background job should sample a clock that is known/defined to be monotonic and has consistent/simpler rollover logic.

Alternatives could be the OSAL timebase that drives the 1Hz.  However this is not guaranteed to exist on platforms that do not use the RTOS for the 1Hz.  So it might be necessary to define a new PSP function, similar to CFE_PSP_GetTime, but is defined to be monotonic and has a more well-defined rollover characteristic.  Then this PSP function can just read whatever facility is providing 1Hz signal - RTOS/OSAL, hardware register, or whatever.

**Code snips**
In particular the code here:
https://github.com/nasa/cFE/blob/fa10af72f95a3a36b65352f0688498449487265f/modules/es/fsw/src/cfe_es_backgroundtask.c#L130-L131

This works fine on Linux but likely causes an anomaly every 27 seconds on MCP750 when the clock rolls over.

**System observed on:**
Found during Inspection when looking at other issues.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1244
cFE Integration candidate: 2021-03-23,"## Describe the contribution
Fix #1217, bit order macros
Fix #1033, removes false child tasks statement.
Fix #1195, adds cast to avoid implicit conversion on a vsnprintf error
Fix #590, Clarify the documentation on SB MsgId regarding requirements for command and telemetry messages
Fix #1208, Cast isspace input to unsigned char to avoid undefined behavior
Fix #1204, Updated message module, msgid v1 to use mask instead of cast to alter value (and added comment)
Fix #1200,  Coercion alters value caused by incorrect type - static analysis warning
Fix #1221, Use quotes for local includes
Fix #1226, and #405 Add a contributing guide
Fix #1224, reinstate recipes for coverage test

## Testing performed
See <https://github.com/nasa/cFS/pull/223/checks>

## Expected behavior changes

### PR #1218 

Adds a local definition of `SOFTWARE_BIG/LITTLE_BIT_ORDER` directly inside `cfe_endian.h` to provide a compatible symbol for apps that still require this. This allows CFE to build and run successfully when OSAL stops providing this in `common_types.h`.

### PR #1193 
Removes incorrect statements from Application Developers Guide

### PR #1235 
Fixes truncation handling on vsnprintf error by adding a cast to avoid implicit conversion

### PR #1220 

Clarify the documentation on SB MsgId regarding requirements for command and telemetry messages

### PR #1230 
Avoids undefined behavior and resolves static analysis warnings by casting `isspace` input to `unsigned char`.

### PR #1231 
Updates message module and msgid v1, `CFE_MSG_SetMsgId`, to use mask instead of cast to alter value. Resolves static analysis warning.

### PR #1232 
Updates `CFE_ES_FileWriteByteCntErr` to report status, not a `size_t` actual since `OS_write` returns `int32`. Use `int16` for local type from `CFE_TBL_FindTableInRegistry` since it's an index, not a status.

### PR #1228 
Replaces `<>` with `""` in local `#include`s

### PR #1227 
Adds `CONTRIBUING.md` that links to the main cFS contributing guide.

`


## Additional context
Part of <https://github.com/nasa/cFS/pull/223>


## Third party code
None

## Contributor Info - All information REQUIRED for consideration of pull request
",,https://github.com/nasa/cFE/pull/1243
"Fix #1223, #1264 shorten TestRunner function name and update cfe_es_startup.scr docs","**Describe the contribution**
Fixes #1223
Change the name of the testrunner main function to be less than 20 characters. 

Fixes #1264
Use simple filenames. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/cFE/pull/1242
"Fix #1185, Squash possible uninitialized variable false alarms","**Describe the contribution**
Fix #1185 - Swash uninitialized variable false alarms with a minor refactor and initializations where required.

2 elements listed in #1185 were OBE, will rerun analysis and write a new issue if additional fixes required.

**Testing performed**
Build/run unit tests

**Expected behavior changes**
None, squashes static analysis warnings

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + cfe main (for unit test fix) + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1241
"Fix #1002, Remove deprecated elements","**Describe the contribution**
Fix #1002 - Removes all deprecated elements

**Testing performed**
Build/run unit tests, passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + cFE main (unit test fix) + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1240
Header guard update to match osal pattern,"**Is your feature request related to a problem? Please describe.**
Current header guards utilized reserved leading `_`, likely also inconsistent

Helpful if it also catches endif comment (typically comments the matching define)

**Describe the solution you'd like**
Apply OSAL pattern

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1239
"Limit dynamically-obtained version info to tags starting with ""v""","**Is your feature request related to a problem? Please describe.**
Tags may be created in the git repo for a number of reasons, not just releases/prereleases, and it is helpful to have the option of also making an annotated tag too so it can have a real description attached to it.

But in that case the tag will be picked up by `git describe` which is what is used by default for dynamically obtained version info shown at runtime.

**Describe the solution you'd like**
Version tags in the CFE framework and CFS apps all follow the general pattern of `vX.X.X`.  So if the dynamic version info is limited to tags that start with `v` (maybe also a number to be real specific) this should effectively make it so extra snapshot tags will not be considered - so long as they don't start with `v`.

**Describe alternatives you've considered**
Use annotated tags only for those that should be considered baselines, and only use non-annotated tags for any other snapshots.

**Additional context**
Users can still customize this `git describe` if they happen to use some other tagging pattern/convention.  But all the framework stuff already uses the `v` convention.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",question,https://github.com/nasa/cFE/issues/1238
"Fix #1180, Remove impossible conditions","**Describe the contribution**
Fix #1180 - removes impossible conditions (typically a test that could never hit the alternate condition since the condition was already checked)

**Testing performed**
Build/run unit tests

**Expected behavior changes**
None, squash static analysis warning

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1237
"Fix #1186, Remove useless assignments/checks","**Describe the contribution**
Fix #1186 - removes useless/redundant/unreachable assignments/checks

**Testing performed**
Build/run unit tests

**Expected behavior changes**
None, resolves static analysis warnings

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1236
"Fix #1195, Avoid implicit conversion from vsnprintf errors","**Describe the contribution**
Fix #1195 - adds cast to avoid implicit conversion on a vsnprintf error, and comments to explain

**Testing performed**
Build/run unit tests (note #1224)

**Expected behavior changes**
No real change, vsnprintf should never error but does avoid static analysis warnings.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1235
"Fix #1192, Initialize TotalMsgSize in CFE_SB_GetUserDataLength","**Describe the contribution**
Fix #1192 - Initialize TotalMsgSize to 0 to avoid false use before initialized static analysis warning

**Testing performed**
Build/run unit tests

**Expected behavior changes**
None, just squashes warning

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1234
Update CFE_EVS_SendEvent calls to use macros introduced in #867,"**Is your feature request related to a problem? Please describe.**
#867 introduced CFE_EVS_SendDbg, CFE_EVS_SendInfo, CFE_EVS_SendErr, CFE_EVS_SendCrit macros but didn't update code to use them

**Describe the solution you'd like**
Update core to use macros

**Describe alternatives you've considered**
None

**Additional context**
Note some coding standards discourage ## in macros.  Could go back to original implementation in #867

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1233
"Fix #1200, Resolve type issues with CFE_ES_FileWriteByteCntErr and CFE_TBL_FindTableInRegistry","**Describe the contribution**
Fix #1200 
 - Use int16 for local type from CFE_TBL_FindTableInRegistry (it's an index, not a status)
 - Update CFE_ES_FileWriteByteCntErr to report status, not a size_t actual (OS_write returns int32)

**Testing performed**
Build/run unit tests, passed

**Expected behavior changes**
Squash static analysis warnings

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle Main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1232
"Fix #1204, Use mask instead of cast to alter value","**Describe the contribution**
Fix #1204 - updated message module, msgid v1 to use mask instead of cast to alter value (and added comment)

**Testing performed**
Build/run unit tests (note see #1224)

**Expected behavior changes**
Squash static analysis warnings

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1231
"Fix #1208, Cast isspace input to unsigned char","**Describe the contribution**
Fix #1208 - cast isspace input to unsigned char to avoid undefined behavior

**Testing performed**
Build/run unit tests (note issue #1224)

**Expected behavior changes**
Squash static analysis warning

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1230
"Fix #1164, use FS file name parser for commands","**Describe the contribution**
For commands containing file names, replace the call to CFE_SB_MessageStringGet() - which is just a basic copy - to
the new filename-aware function CFE_FS_ParseInputFileName().

This means that the default pathname/extension logic is applied here too and only a ""basename"" is strictly necessary, although
if a full/absolute path is given, it will be used as is.

Fixes #1164

**Testing performed**
Build and sanity check CFE
Issue commands which accept file names (e.g. RESTART app) and confirm they accept the same file names as the startup script accepts.

**Expected behavior changes**
Commands accept ""bare"" file names using same logic as startup script, assuming a default path and extension if omitted.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1229
"Fix #1221, Use quotes for local includes","**Describe the contribution**
Fix #1221 - Use quotes for local includes

**Testing performed**
Build/run unit tests (note open issue on unit tests, #1224)

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1228
"Fix #1226, Add Contributing Guide","**Describe the contribution**
Fix #1226  
Added a contributing guide that links to the main cFS contributing guide. 

**Expected behavior changes**
Users should be able to view the contributing guide contents easily from the cFE repo. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal

EDIT - also fixes #405 (JH)","CCB:FastTrack, docs",https://github.com/nasa/cFE/pull/1227
Add Contributing Guide,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the cFE repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the cFS contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal",docs,https://github.com/nasa/cFE/issues/1226
"Fix #1224, reinstate recipes for coverage test","**Describe the contribution**
Builds the CFE coverage tests using new CMake functions.  Also requires fixing up some include directives in UT headers to make this all work correctly.

Fixes #1224

**Testing performed**
Build and run unit tests, confirm that cFE core module coverage tests are now part of the group as they should be.

**Expected behavior changes**
cFE core coverage tests are built.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:FastTrack,https://github.com/nasa/cFE/pull/1225
CFE coverage tests not getting built after re-org,"**Describe the bug**
After directory re-organization, it is missing the new recipes for building the CFE core coverage tests.

**To Reproduce**
Build+install with unit tests enabled.  Everything runs and passes but the CFE core tests are not there.

**Expected behavior**
CFE core tests should be there

**Code snips**
Some empty placeholders in place of the real thing (mistake in original PR). 

https://github.com/nasa/cFE/blob/2b8844871d374219cef7c0026e6c43460e11b22b/modules/es/ut-coverage/CMakeLists.txt

**System observed on:**
Ubuntu 20.04

**Additional context**
Unfortunately everything in tests+CI runs just fine without this being there, so it wasn't immediately noticeable that something was missing.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/1224
Entry Point function name too long,"**Describe the bug**
When trying to run the cfe test runner I got this error 

1980-012-14:03:20.46280 ES Startup: Loading file: /cf/cfe_testrunner.so, APP: TESTRUN_APP
OS_GenericSymbolLookup_Impl():118:Error: CFE_TestRunner_AppM: ./cf/cfe_testrunner.so: undefined symbol: CFE_TestRunner_AppM
1980-012-14:03:20.46306 ES Startup: Could not find symbol:CFE_TestRunner_AppM. EC = 0xFFFFFFFF

It should be trying to use CFE_TestRunner_AppMain but is getting truncated at 19 characters. 
When I shortened the function name it worked fine. 

**To Reproduce**
1. add the start test scripts for the startup test. [Found Here](https://github.com/nasa/cFE/blob/2b8844871d374219cef7c0026e6c43460e11b22b/docs/README_functionaltest.md)
2. Start it. 

**Expected behavior**
It should run the tests. 

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Alex Campbell GSFC
",enhancement,https://github.com/nasa/cFE/issues/1223
Integration candidate: 2021-03-12,"**Describe the contribution**
- HOTFIX 20210312, updates to work with older CMake
- Fix #972, reorganize directory structure
- HOTFIX IC 2021-03-05: Correct static app build issue

**Testing performed**
CI

**Expected behavior changes**
See PRs

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",,https://github.com/nasa/cFE/pull/1222
"Scrub for include <> vs """" use (<> should be system only)","**Is your feature request related to a problem? Please describe.**
<> used on non-system header includes.  Example:
https://github.com/nasa/cFE/blob/9bc7bfdbced474fabfc2a46cf47e044b9d59f8e5/cmake/target/inc/target_config.h#L37-L38

**Describe the solution you'd like**
Full scrub/fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1221
"Fix #590, Clarify the documentation on SB MsgId","**Describe the contribution**
Fixes #590
Clarify the documentation on SB MsgId regarding requirements for command and telemetry messages 

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/cFE/pull/1220
"Fix #1161, #1130 Apply and check standard code format ","**Describe the contribution**
Fix #1161 
Fix #1130 

**Testing performed**
See checks tab <https://github.com/nasa/cFE/pull/1219/checks>
Bundle (fork) test: <https://github.com/astrogeco/cFS/pull/8/checks>

**Expected behavior changes**
Adds new github actions workflow that checks format. This workflow runs on both ""push"" and ""pull_request"" for all branches so at the moment it will trigger twice for any branch that is part of a pull request

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Will create a tag after merge

**Third party code**
None",,https://github.com/nasa/cFE/pull/1219
"Fix #1217, bit order macros","**Describe the contribution**
Provide a local definition of SOFTWARE_BIG/LITTLE_BIT_ORDER directly inside `cfe_endian.h` to provide a compatible symbol for 
apps that still require this.  This allows CFE to build and run successfully when OSAL stops providing this in common_types.h.

Fixes #1217 

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
Maintains backward compatibility after nasa/osal#843

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Prerequisite of nasa/osal#843.  This PR is needed in same merge cycle or before.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1218
Do not rely on OSAL SOFTWARE_(BIG|LITTLE)_BIT_ORDER,"**Is your feature request related to a problem? Please describe.**
These endian-indicator macros are problematic for many reasons as documented in nasa/osal#843.  The continued presence of these macros in OSAL came up again in a recent code review.

OSAL will likely stop providing these macros in the next version, because nothing in OSAL is endian-dependent.

CFE only uses these to implement CFE_MAKE_BIG16 / CFE_MAKE_BIG32 macros.

**Describe the solution you'd like**
Move the nonstandard logic from OSAL into CFE, because nothing in OSAL depends on it.

For backward compatibility CFE will likely still have to provide this macro for historical reasons, in case some apps use it, and because TIME uses those CFE_MAKE_BIG* macros.

**Additional context**
See nasa/osal#843

In CFE the logic should be put in a separate header where it can be confined/limited to the scopes where this is actually used/needed, rather than a ubiquitous header like `common_types.h`.  This way an `#error` directive if the check was inconclusive will make more sense since it won't error out on cases where we don't care (i.e. most).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1217
Update directory diagrams in application developer guide,"**Is your feature request related to a problem? Please describe.**
After PR #1203 the directory structure diagrams in the user guide are in need of an update.  Only the text was updated in that PR.

**Describe the solution you'd like**
Diagrams should be updated to match the text.

**Additional context**
See #1203

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, docs",https://github.com/nasa/cFE/issues/1216
Clean up ES task/app registration,"**Is your feature request related to a problem? Please describe.**
In nasa/osal#853 it is proposed that `OS_TaskRegister()` be finally deprecated/removed.

But this function is invoked by two places in CFE ES that follow a similar pattern: `CFE_ES_RegisterApp()` and `CFE_ES_RegisterChildTask()`.

**Describe the solution you'd like**
At a minimum, calls to `OS_TaskRegister()` must be removed to allow the function to be deprecated.

Furthermore there is already a task startup wrapper in ES that can be used to call/handle setting up environment (`CFE_PSP_SetDefaultExceptionEnvironment()`) meaning that these two functions themselves can also be deprecated - basically using the same design pattern as OSAL uses such that we don't need to burden apps with calling this extra function.  This design is simpler and less error prone.

**Additional context**
See nasa/osal#853

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1215
Application performance monitoring and deadlines,"     
**Is your feature request related to a problem? Please describe.**

- When developing a cFS application, I want to detect and correct performance problems as early as possible.
- When integrating a cFS system, I want to observe application timing so I can confirm whether system performance matches my expectations.

**Describe the solution you'd like**

- I would like an easy way to track performance statistics for each cFS application, specifically, last, average and max observed run time.
- For systems using SCH (Scheduler), I would also like enough information to trace in detail _when_ each application starts and finishes so I can compare the system's actual timing to the timing that I specified.
- I would like all this to be possible without adding special performance instrumentation to the cFS application.

**Describe alternatives you've considered**

Here are some ways that cFE (and cFS) can measure application performance today:

| Approach | Limitation |
|---|---|
| ES (Executive Services) Task Execution Counter | Tracks # of passes through application's main loop.  Does not track detailed timing information. |
| ES (Executive Services) Performance Log | Tracks detailed timing information, but must be manually maintained (started and stopped) by the application. |
| HS (Health & Safety) CPU Utilization Monitoring | Tracks overall CPU utilization.  Not broken down per cFS application. |
| HK (Housekeeping) telemetry messages published by each application | An application's HK telemetry message can measure and report any timing information it wants, but this must be implemented by each application, so it's not very consistent! |

As a rule, existing methods are limited in that either (1) they do not track detailed timing information, or (2) they require application authors to manually instrument their cFS app and thus are not supported for all apps.

**Additional context**

Any solution must take into account the fact that a typical cFS application spends a lot of time idle, waiting for Software Bus messages.  This means that simply instrumenting the CFE_ES_Runloop() function won't give an accurate sense of how much CPU time is being consumed by even a simple application such as the SAMPLE_APP.

```
while (CFE_ES_Runloop(...) == true)
{
    status = CFE_SB_ReceiveBuffer(...) // Wait for wakeup message
    // Perform work ...
}
```

There are many possible solutions.  My suggestion is to make CFE_ES_Runloop() fire either an Event or a SB message signaling that each application has reached the top of its main loop (i.e., finished executing).  Because application execution is normally _triggered_ by a wakeup message as well, comparing the timing of the two messages allows measurement of application execution time.

```
time --> 

wakeup message sent to app         X          X          X     
CFE_ES_RunLoop() called by app          Y          Y          Y

application execution time         ^----^     ^----^     ^----^
```

A ""statistics tracking"" application could subscribe to both messages, compare their timings, and calculate/report any statistics desired, such as last, average, and max observed run time.  Outsourcing calculations to an app means they can be easily customized or disabled per mission without modifying cFE.

**Side benefit: deadlines**

I am fond of this particular implementation because it easily enables another feature: application deadlines.  A deadline is an execution time bound triggering a configurable action.  It can also be thought of as a ""software watchdog"".  Deadlines are important because they allow unexpectedly long-running applications to be rapidly detected and can help mitigate the timing impact of such applications on the rest of the system.

Today, the closest analogous feature is HS (Health & Safety) Application Monitoring of the ES Task Execution Counter.  This only detects applications that get ""stuck"" for a long time.  Also, HS only monitors counters for liveness and does not check that they are incrementing at the expected rate.

Here is my suggested way to implement deadlines.  The Scheduler (SCH) application assigns each scheduled app a deadline of configurable length L.  If SCH sends the application a wakeup message at time T, it will expect to receive the application's RunLoop() message by time T+L.  When the deadline is reached, if the application is not done, SCH fires a schedule overrun event.  The event can be caught and used by HS (Health & Safety) or some other application.

```
time --> 

wakeup message sent to app         X              X        
CFE_ES_RunLoop() called by app          Y                       Y  

application execution time         ^----^         ^-------------^ 
deadline                           ^........^     ^........^ 
                                       L              L    | 
                                                           |
                                                           v
                                   (ok)         schedule overrun event
```

Note: I've presented a lot of detail here.  I'm not tied to any of the details.  My goal is to present a starting point for further discussion of whether these features are useful, and for any resulting implementation to be consistent with cFS's architecture.

**Requester Info**

Peter Fidelman - Blue Origin

These ideas were originally presented during a talk at [Flight Software Workshop 2021](http://flightsoftware.jhuapl.edu/workshop/FSW2021) ([slides](https://drive.google.com/file/d/10rWCAh3jh204yK0dQ9yh2CwveZCXsixp/view?usp=drive_web)).

","enhancement, cFE-ES, community",https://github.com/nasa/cFE/issues/1214
Integration candidate: 2021-03-05,"**Describe the contribution**
PR #1212 
PR #1210 
PR #1174 
PR #1159 
PR #1182
PR #1169 
PR #1191

**Testing performed**
CI

**Expected behavior changes**
See related PRs

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@zanzaben @jphickey @ArielSAdamsNASA ",,https://github.com/nasa/cFE/pull/1213
"Fix #1211, Add Testing Tools to the Security Policy","**Describe the contribution**
Fix #1211
Updated the Security Policy to include the type of testing done for cFE or the cFS bundle under a new section titled ""Testing"". Provided a disclaimer that under the Apache license, liability is not provided. 

Added that security reports should be emailed. 

**Expected behavior changes**
Users should now be aware of the type of testing cFE or the cFS bundle undergoes. 

**Additional context**
References: 
https://github.com/thanos-io/thanos/security/policy
https://github.com/phpMussel/phpMussel/security/policy
https://github.com/timberio/vector/security/policy

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal 
","CCB:FastTrack, docs",https://github.com/nasa/cFE/pull/1212
Add Testing Tools to the Security Policy,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/cFE is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/cFE while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",docs,https://github.com/nasa/cFE/issues/1211
"Fix #1207, Add wrapper targets to simplify app builds","**Describe the contribution**
Adds the following functions to simplify tracking of dependencies and use of interface libraries provided by CFE:

add_cfe_app_dependency - dependency that applies to both FSW and coverage test
add_cfe_coverage_dependency - dependency that applies only to coverage test (i.e. for overrides)
add_cfe_coverage_test - creates object + executable targets for coverage test
add_cfe_coverage_unit_include - add extra include path to unit build (i.e. for overrides)
add_cfe_coverage_stubs - add a stub library for coverage testing other modules

The goal is to reduce/eliminate the need to directly specify any include paths or compile definitions for dependencies, relying
on target properties to do this instead.

Fixes #1207

**Testing performed**
Build and run all CFE unit tests (this only affects UT, not FSW)

**Expected behavior changes**
None, just adding the routines for now, sample app/lib will be transitioned to use them in subsequent PR

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This is needed as part of preparation for directory reorganization in #1203.  These wrapper functions will make it much easier to fixup apps that depended on the old include paths.

With this they shouldn't need to ever refer directly to an include path (or any path) from another target, so it should avoid any future issues if files get moved around again.

See also nasa/sample_lib#46 and nasa/sample_app#126

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:FastTrack, build-system",https://github.com/nasa/cFE/pull/1210
Implement single endianness handling pattern,"**Is your feature request related to a problem? Please describe.**
Multiple ways to handle target endian in various contexts:
fsw/cfe-core/src/es/cfe_es_perf.c:CFE_ES_SetupPerfVariables - determines it at runtime
fsw/cfe-core/src/tbl/cfe_tbl_internal.c:CFE_TBL_ReadHeaders - determines it at runtime
fsw/cfe-core/src/tbl/cfe_tbl_task_cmds.c:CFE_TBL_DumpToFile - determines it at runtime
fsw/cfe-core/src/fs/cfe_fs_api.c:CFE_FS_ReadHeader (and many other functions in here) - determines it at runtime

fsw/cfe-core/src/inc/ccsds.h has macros for conversion (CFE_MAKE_BIG*) who’s implementation depends on SOFTWARE_BIG_BIT_ORDER
There’s an endian flag in the CCSDS header
osal/src/os/inc/common_types.h defines either SOFTWARE_LITTLE_BIT_ORDER or SOFTWARE_BIG_BIT_ORDER based on 8 possible defines

cfe/cmake/sample_defs/cpu1_platform_cfg.h defines CFE_PLATFORM_ENDIAN as either CCSDS_LITTLE_ENDIAN or CCSDS_BIG_ENDIAN, and also has a separately configurable CFE_PLATFORM_TIME_CFG_BIGENDIAN

CCSDS extended header has an endian bit

Then there’s all the different ways the various defines are used and custom swapping routines, examples:
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/fs/fsw/src/cfe_fs_api.c#L310-L326
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/tbl/fsw/src/cfe_tbl_internal.c#L1210-L1227
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/core_api/fsw/inc/cfe_endian.h#L61-L69

Note some cfe_endian.h macros evaluate `n` multiple times.

**Describe the solution you'd like**
See https://github.com/nasa/cFE/issues/202#issuecomment-536680998 for a compile time suggestion:
#define IS_LITTLE_ENDIAN (((union {unsigned x; char c;}){1}).c)

**Describe alternatives you've considered**
None

**Additional context**
Triggered from email discussion on setting another endian flag in a toolchain file for an app to use

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping - @klystron78 @ejtimmon @wmoleski
","enhancement, CFS-40, CFS-41, CFS-43",https://github.com/nasa/cFE/issues/1209
Possible negative char to isspace - static analysis warning,"**Is your feature request related to a problem? Please describe.**
In theory a negative value could reach this code through public APIs, which would lead to undefined isspace behavior as it gets converted to int.
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_syslog.c#L432

**Describe the solution you'd like**
Recommended practice is to cast to `unsigned char`, such that the conversion to `int` results in defined behavior.

**Describe alternatives you've considered**
Could adjust all the parameters involved to `unsigned char`, but probably not worth it.

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1208
Update/resurrect the add_unit_test_lib/add_unit_test_exe functions,"**Is your feature request related to a problem? Please describe.**
Currently the `arch_build.cmake` functions provide a routine to easily define a CFE app: `add_cfe_app()` .  This makes it easy for app developers to create an app target that uses all the right compiler definitions, include dirs and link/interfaces libraries.  Furthermore, having this wrapper in CFE helped future-proof so that apps didn't need to change this call when #972 was implemented.

The problem is that we didn't employ the same tactic for unit tests.  For these, all the special logic for adding flags/includes is basically put into the CMakeLists.txt in each app where the UT targets are defined.

**Describe the solution you'd like**
The `arch_build.cmake` does have a `add_unit_test_lib` and `add_unit_test_exe` function that was originally intended for this purpose, but these were never really used.  We should implement the basic UT logic here and change sample app/lib to use them.

**Additional context**
Currently, the sample_lib/sample_app unit tests break when merging with #1203 because of the different paths and the transition toward interface libraries.  Rather than just updating these UT builds to work again, using these functions would help avoid this issue in the future.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1207
Report PSP version info in ES HK telemetry,"**Is your feature request related to a problem? Please describe.**
Currently the ES HK TLM message includes the CFE and OSAL versions, but not PSP.

Also, as noted in nasa/osal#821, using preprocessor macros to get OSAL/PSP version info means its evaluated when CFE source code is compiled, and the result actually compiled into CFE.

**Describe the solution you'd like**
Add PSP version info to HK TLM.

Also CFE should use the runtime API to get the version info, such that the info actually comes from the PSP/OSAL library, respectively.

**Additional context**
See also nasa/cfs#200

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/1206
Missing Requirement for Default File Name: ES Task Status Record to File (CFE-1056) and CDS Write to File (CFE-100),"Requirements needs update to verify Dumping Executive Services Task Status Record and Critical Data Store to a Default File Name. 

Justifcation: Want to provide a default in the event a user does not want to specify one","docs, requirements",https://github.com/nasa/cFE/issues/1205
Cast vs mask to alter value in CFE_MSG_SetMsgId v1 - static analysis warning,"**Is your feature request related to a problem? Please describe.**
In current implementation of CFE_MSG_SetMsgId for v1 uses a cast to alter a value:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/modules/msg/src/cfe_msg_msgid_v1.c#L67-L68

**Describe the solution you'd like**
Probably more obvious to mask, which would squash static analysis warnings

**Describe alternatives you've considered**
Leave as-is

**Additional context**
Static analysis warning, cast alters value

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1204
"Fix #972, reorganize directory structure","**Describe the contribution**
Reorganize/Refactor the CFE source code directory structure per the discussion in #972.  

Important notes:
- This uses CMake ""interface libraries"" to define the CFE APIs - the public interface is now defined in the `cfe_app_intf` and the internal interface (private types, stuff that goes only between core apps) is in `cfe_internal_intf`.
- The CMD/TLM message definition headers (e.g. `cfe_*_msg.h`) are within the `fsw/inc` directory of the respective module - because these are ""owned"" by the module itself.
- Any data types that are shared between CMD/TLM message and API functions should be defined in the ""extern_typedefs.h"" file (some things did have to move to meet this).
- Split all public headers into two groups: 
    - the ""api_typedefs.h"" (e.g. `cfe_es_api_typedefs.h`) which is intended to define the data types and constants used in the API, which in turn may be included by other headers that need to reference/build upon the data types in the respective API.
    - the actual API header (e.g. `cfe_es.h`) which contains the all function prototypes.  It is intended to be included only from C files.

Fixes #972

**Testing performed**
Build and sanity test CFE
Run all unit tests

**Expected behavior changes**
None outside build system.

**System(s) tested on**
Ubuntu 20.04 (native)
Testing is not yet sufficient - Still needs more verification on other platforms and configurations (static apps, etc).

**Additional context**
Although this is a substantial change to the build system and directory structure, very little (if any?) of the FSW C code was actually changed.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1203
CFE_TIME_Print possible improvements,"**Is your feature request related to a problem? Please describe.**
CFE_TIME_Print doesn't take a buffer size such that the write to the buffer can be limited, also ""clunky"" implementation to write to the buffer.

**Describe the solution you'd like**
Use snprintf?  Consider new API that includes buffer size?

**Describe alternatives you've considered**
None.

**Additional context**
Could be part of more significant TIME refactor - #302
There is a strange static analysis warning on the null character addition that would go away, but somewhat unrelated.

**Requester Info**
Full name and company/organization if applicable
",enhancement,https://github.com/nasa/cFE/issues/1202
Question: Difference between WriteToSysLog or SendEvent,"Hi, I was reading through the application developers guide and I read ""_Developers should make use of the Event Services CFE_EVS_SendEvent whenever possible. If, however, there is a significant Event that cannot be recorded using the CFE_EVS_SendEvent function, then the Developer can use the CFE_ES_WriteToSysLog function._ ""

I was wondering what difference does it make if I use WriteToSysLog or SendEvent if my main goal is to print something to the terminal? Can I just always use WriteToSysLog?

Thanks!",question,https://github.com/nasa/cFE/issues/1201
Coercion alters value caused by incorrect type - static analysis warning,"**Is your feature request related to a problem? Please describe.**
CFE_TBL_FindTableInRegistery returns int16, RegIndex is defined as uint32 and only checked for error (negative)
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/tbl/cfe_tbl_task_cmds.c#L1416-L1428

The last parameter passed to CFE_ES_FileWriteByteCntErr for both uses is Status (int32), yet it expects size_t... seems like this isn't defined correctly?
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_syslog.c#L554
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_perf.c#L469
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_task.h#L204

Not a bug, just an inconsistency warnings

**Describe the solution you'd like**
Correct type

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1200
Add documentation build to submodule github actions workflow,"**Describe the solution you'd like**
Build cFE documentation at the component level instead of waiting for a bundle-level build

This ensures we catch doxygen errors in individual PRs as opposed to having to fix them after the PR is merged

**Describe alternatives you've considered**
Have users check their PRs manually

**Additional context**
See documentation build example in bundle

","enhancement, continuous-integration",https://github.com/nasa/cFE/issues/1199
"Argument checks in internal functions (CFE_SB_TransmitMsgValidate, etc)","**Is your feature request related to a problem? Please describe.**
As discussed in #1197 we need to have some consensus on the proper level of argument checking for internal helper functions.

Sometimes internal functions have tests to validate their inputs (range check etc) on behalf of the caller, in the case where several public APIs need to repeat the same tests -- putting these in a helper can reduce repeated code and make all APIs consistent in their validation (a good thing).

But in other cases the helper is invoked from contexts where the inputs are never out of range or pointers can never be NULL.  Testing for such inputs can be redundant.

**Describe the solution you'd like**
Need to confirm/reach consensus on whether functions like CFE_SB_TransmitMsgValidate() in CFE SB need to validate all their arguments.  Probably should better document _which_ args are tested and _why_ - and if there are limitations on other args (e.g. certain args are assumed to be non-null).

**Additional context**
This just causes some confusion during review and probably some additional comments/documentation could help.

See thread here: https://github.com/nasa/cFE/pull/1197#discussion_r585070230

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1198
"Fix #1189, correct compiler warnings","**Describe the contribution**
Corrects some (false) warnings about use before init.
Also corrects an alignment warning and removes unneeded union type (union type is not the best way to deal with this situation).

Fixes #1189 

**Testing performed**
Build and sanity check CFE for Raspberry Pi (older GCC w/strict alignment) and native (64-bit)
Run all unit tests

**Expected behavior changes**
None, just compiler warning fixes

**System(s) tested on**
Ubuntu 20.04 (native)
Raspbian (cross compiled; gcc 4.9.3)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/cFE/pull/1197
cFE Integration candidate: 2021-03-02,"**Describe the contribution**
Fix #1020, refactor SB buffer descriptor object 
Fix #922, Update `cfe_error.h` to use the `CFE_Status_t` type
Fix #1149, remove cfeesugshellsrv from user guide
Fix #546 , APIs missing argument validation
Fix #547 , APIs missing check for NULL pointer(s)
Fix #1119 ,  Calculate crc can't return error code
Fix #1153, Remove logic based on LogEnabled status
Fix #1189, correct compiler warnings 

**Testing performed**
See <https://github.com/nasa/cFS/pull/204/checks>

**Expected behavior changes**

PR #1154 - Refactors the SB buffer descriptor object `CFE_SB_BufferD_t` and simplify the zero-copy buffer paradigm. Combines the zero-copy and the normal CFE buffer descriptor into a single unified `CFE_SB_BufferD_t` object. Results in a simpler zero-copy design that is similarto the the standard, non-zero-copy message path. All message descriptor objects are now tracked in a list by SB. All changes are internal to SB. This does not affect API or behavior of any existing APIs (but see note). Corrects a minor issue where the `MsgSendErrorCounter` would get incremented if there were no subscribers, but only in the zero copy API.

PR #935 - Replaces `int_32` with `CFE_Status_t` for all error message codes

PR #1179 - Removes references to `cfeesugshellsrv` from user guide

PR #1140 - Adds null pointer checks and size checks to validate method parameters. Returning the input instead of an error code

PR  #1178 - Removes use of `LogEnabled` element in HK telemetry for EVS logic since log is always enabled now. On failures, reset area or semaphore will panic.

PR #1197 -  Fixes various build warnings when `BUILDTYPE=release`.

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/204>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 
@pducolin
@zanzaben
@skliper",,https://github.com/nasa/cFE/pull/1196
EVS_GenerateEventTelemetry doesn't handle vsnprintf error cases,"**Is your feature request related to a problem? Please describe.**
vsnprintf can return negative error values, but is compared to unsigned int to handle truncation:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/evs/cfe_evs_utils.c#L414-L417

I wouldn't call this a bug (will just pass the initialized to zero string), but might be worth a unique message?

**Describe the solution you'd like**
Explicitly handle failure (and cast for comparison)

**Describe alternatives you've considered**
Place termination character at the start? Any other way to provide clues.

**Additional context**
Static analysis warning for coercion alters value.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1195
CFE_ES_CheckCounterIdSlotUsed doesn't handle error case (NULL dereference) - static analysis warning,"**Is your feature request related to a problem? Please describe.**
CFE_ES_CheckCounterIdSlotUsed -> CFE_ES_LocateCounterRecordByID can return NULL, and CFE_ES_CounterRecordIsUsed dereferences

https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_resource.c#L366-L369
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_resource.c#L266-L281
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_resource.h#L383-L386

**Describe the solution you'd like**
Handle null

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1194
"Fix #1033, remove false child tasks statement.","**Describe the contribution**
Fixes #1033
removes false child tasks statement. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Additional context**
References to cFE Deployment Guide were fixed by #1166

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/cFE/pull/1193
CFE_SB_GetUserDataLength possible uninitialized variable (false alarm),"**Is your feature request related to a problem? Please describe.**
CFE_SB_GetUserDataLength use of TotalMsgSize causes static analysis warning.  False alarm since MsgPtr is checked before CFE_MSG_GetSize, and &TotalMsgSize will never be NULL, so it's always set.

**Describe the solution you'd like**
Initialize to 0 to squash the warning.

**Describe alternatives you've considered**
Still dislike this function... don't use it.

**Additional context**
#1190, static analysis warnings

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1192
"Fix #665, update pipe name documentation.","**Describe the contribution**
Fixes #665
clarify pipe name scope in documentation. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/cFE/pull/1191
CFE_MSG_GetSize doesn't initialize size on failure - static analysis,"**Is your feature request related to a problem? Please describe.**
Should initialize all output parameters:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/modules/msg/src/cfe_msg_ccsdspri.c#L322-L328

**Describe the solution you'd like**
Initialize to 0
Scrub MSG API's to ensure documentation and implementation comply (set all outputs, and define in documentation)

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC
",wontfix,https://github.com/nasa/cFE/issues/1190
"Possible uninitialized variables - compiler warnings (release build, CentOS 7)","**Is your feature request related to a problem? Please describe.**
Various warnings on CentOS 7 when BUILDTYPE=release:
```
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function ‘CFE_SB_TransmitMsg’:
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1433:16: error: ‘RouteId’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
         Status = CFE_SB_TransmitBufferFull(BufDscPtr, RouteId, MsgId);
                ^
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function ‘CFE_SB_SendMsg’:
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1433:16: error: ‘RouteId’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1395:25: note: ‘RouteId’ was declared here
     CFE_SBR_RouteId_t   RouteId;
                         ^
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function ‘CFE_SB_PassMsg’:
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1433:16: error: ‘RouteId’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
         Status = CFE_SB_TransmitBufferFull(BufDscPtr, RouteId, MsgId);
                ^
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1395:25: note: ‘RouteId’ was declared here
     CFE_SBR_RouteId_t   RouteId;
                         ^
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function ‘CFE_SB_RcvMsg’:
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:2045:43: error: ‘RcvStatus’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
                 CFE_EVS_SendEventWithAppID(CFE_SB_Q_RD_ERR_EID,CFE_EVS_EventType_ERROR,CFE_SB_Global.AppId,
                                           ^
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1823:28: note: ‘RcvStatus’ was declared here
     int32                  RcvStatus;
                            ^
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function ‘CFE_SB_ReceiveBuffer’:
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:2045:43: error: ‘RcvStatus’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
                 CFE_EVS_SendEventWithAppID(CFE_SB_Q_RD_ERR_EID,CFE_EVS_EventType_ERROR,CFE_SB_Global.AppId,
                                           ^
```

**Describe the solution you'd like**
Initialize variables where needed

**Describe alternatives you've considered**
None

**Additional context**
Compiler warnings, vs static analysis warnings reported in #1185

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1189
Long switch cases - static analysis warning,"**Is your feature request related to a problem? Please describe.**
The following cases trigger a long switch case static analysis warning.

1. Consider moving to a command processing function, or possibly use the command table pattern (and break up command processing routines into files) like tbl.
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/time/cfe_time_task.c#L514
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/sb/cfe_sb_task.c#L409
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_task.c#L442

2. Extensive logic in a case, may benefit from being in a function:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_start.c#L754

**Describe the solution you'd like**
Analyze, possibly refactor.

**Describe alternatives you've considered**
There's more logic required to implement the table pattern, so definitely debatable as to the preferred fix.

**Additional context**
I thought we had an issue to make command processing consistent (tbl vs everything else) but can't find it.  Falls more into the nice to have/refactor bucket so not targeting Caelum (unless someone wants to volunteer).

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, CFS-40, CFS-42, CFS-43",https://github.com/nasa/cFE/issues/1188
CreatePipeErrorCounter only incremented for CFE_SB_CR_PIPE_BAD_ARG_EID or in CFE_SB_DeletePipeFull,"**Is your feature request related to a problem? Please describe.**
CreatePipeErrorCounter logic doesn't seem to make all that much sense since it's only incremented for one error case, and also incremented as part of deleting a pipe.

Note the trivial switch below is a static analysis warning, might be more appropriate to count warnings for more cases:
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/sb/cfe_sb_api.c#L227-L235

**Describe the solution you'd like**
Trace design to requirements, confirm current implementation makes sense.

**Describe alternatives you've considered**
None

**Additional context**
Uncovered due to static analysis warning, any change will be easier after #972

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1187
Useless assignments/redundant checks - static analysis warning,"**Is your feature request related to a problem? Please describe.**
Useless assignments since FileOpened is initialized to false (or already checked for false):
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_apps.c#L109
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_apps.c#L134

Initialized to zero, then set to zero:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/time/cfe_time_tone.c#L1464

Already memset to 0:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/evs/cfe_evs_task.c#L91

Already checked for NumBlockSizes . CFE_PLATFORM_ES_POOL_MAX_BUCKETS
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_mempool.c#L203

Already CFE_SUCCESS:
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_generic_pool.c#L458

**Describe the solution you'd like**
Remove.

**Describe alternatives you've considered**
None, useless assignments in the name of future-proofing is a slippery slope.  To some (like me) these useless assignments make me thing the implementer didn't fully understand the implemented logic, was sloppy/careless, or added useless logic ""just in case"".

**Additional context**
wait for #972

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1186
Possible uninitialized variable (false alarms) - static analysis,"**Is your feature request related to a problem? Please describe.**
All false alarms based on logic, but easy to squash (just initialize).

This one could be avoided w/ simple refactor (move success logic into if) which reduces to one return location (preferred coding style):
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/time/cfe_time_api.c#L727

Just initialize:
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_apps.c#L648
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/sb/cfe_sb_api.c#L108
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/sb/cfe_sb_task.c#L923

Likely resolved if OS_OpenCreate_t initialized the file descriptor on failure:
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_apps.c#L83
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_task.c#L1341
https://github.com/nasa/cFE/blob/672b2dc4f76aa8535eb6b327b73f273c4cf87bb5/fsw/cfe-core/src/es/cfe_es_syslog.c#L471

**Describe the solution you'd like**
See above

**Describe alternatives you've considered**
None

**Additional context**
CodeQL warnings, wait until #972 is resolved

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1185
Infinite loop false alarm in unit test (easy fix) - static analysis warning,"**Is your feature request related to a problem? Please describe.**
Static analysis warning on `i` being int8.  Can be avoided if defined as size_t.
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/unit-test/ut_support.c#L82-L90

Based on logic strlen(UT_subsys) will never be bigger than int8 (unless someone redefines UT_subsys as something unreasonable) so this is a false alarm but easy to fix and better pattern to follow.

**Describe the solution you'd like**
Change to size_t

**Describe alternatives you've considered**
None

**Additional context**
Please wait until #972 is resolved.

**Requester Info**
Jacob Hageman - NASA/GSFC","good first issue, unit-test",https://github.com/nasa/cFE/issues/1184
User Guide Doxygen cutting parts out ,"**Describe the bug**
There are parts of the User Guide that when formatted by Doxygen are causing parts of the content to get cut out and not included. I happened to find one but imagine there are others. 

**To Reproduce**
The one example I found was on page 317 for 37.30.2.1 CFE_TBL_Register() The TblOptionFlags is missing the last 2 sentences of CFE_TBL_OPT_CRITICAL.  

The User guide says 
• CFE_TBL_OPT_CRITICAL- When this option is selected, the Table
Service will automatically allocate space in the Critical Data Store (CDS)
for the table and insure that the contents in the CDS are the same as the
contents of the currently active buffer for the table. This option is mutually
exclusive of the CFE_TBL_OPT_USR_DEF_ADDR and
CFE_TBL_OPT_DUMP_ONLY options. It should also be noted that the


**Expected behavior**
No information should be lost by Doxygen formatting.

**Code snips**
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/inc/cfe_tbl.h#L226-L235

**System observed on:**
 - Adobe Acrobat Reader 2017

**Reporter Info**
Alex Campbell GSFC",docs,https://github.com/nasa/cFE/issues/1183
"Fix #1094, Update CRC documentation","**Describe the contribution**
Fixes #1094
includes additional info that describes the CRC

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/cFE/pull/1182
ES Globals need cleanup,"**Is your feature request related to a problem? Please describe.**
The ES core app is quite disorganized in terms of its internal headers (what defines what) and global data structures.  In particular there are three global data objects in this module.

https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_task.h#L148
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_global.h#L161
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_global.h#L166

**Describe the solution you'd like**
Make a single `CFE_ES_Global` object as was done for other apps in PR #1124.  Further clean up/re-org the internal headers to create a more logical/consistent content would be nice.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, cFE-ES",https://github.com/nasa/cFE/issues/1181
Alternate condition impossible to exercise - static analysis,"**Is your feature request related to a problem? Please describe.**
Impossible to hit alternate case (even considering reconfiguration):

Status is always >= CFE_PLATFORM_TBL_MAX_SNGL_TABLE_SIZE (line 162) since it's checked at line 150:
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/tbl/cfe_tbl_internal.c#L143-L163

NumBlockSizes > CFE_PLATFORM_ES_POOL_MAX_BUCKETS is always false on line 203 since it's checked on 190:
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_mempool.c#L189-L207

EventID can never be 0 and RegName can never be NULL, if it was it would be a bug.  This sort of thing (preventing a developer from introducing a bug with logic in production code) is better prevented via good unit test design.  If a case is added it should check the event.
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/fsw/cfe-core/src/es/cfe_es_apps.c#L1295

**Describe the solution you'd like**
Remove cases where an alternate condition can not be exercised
- A step closer to being able to do MC/DC coverage
- Remove unnecessary logic

**Describe alternatives you've considered**
Occasionally considered ""future proofing"" but developers should never depend on a condition being tested twice when modifying code.

**Additional context**
Triggers CodeQL warning

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1180
"Fix #1149, remove cfeesugshellsrv from user guide ","**Describe the contribution**
Fixes #1149 
remove cfeesugshellsrv from user guide

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/cFE/pull/1179
"Fix #1153, Remove logic based on LogEnabled status","**Describe the contribution**
Fix #1153 - no longer utilizing the LogEnabled element in HK telemetry for EVS logic, log is always enabled in this implementation

**Testing performed**
Built and executed unit tests, passed

**Expected behavior changes**
No real change, but on failures (reset area or semaphore) will panic.

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Confirmed still getting 100% line coverage

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1178
Mission version CFE_MISSION_REV description out of date,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/cFE/blob/c708d64bf2b25500cd0308a700aa4ee0b3fd5909/docs/src/cfs_versions.dox#L44

Mission version was removed from config file, it's intended for identifying mission custom changes to the ""delivered"" fsw, NOT to cover changes in the configuration file.

**Describe the solution you'd like**
Clarify use of mission version in documentation.

**Describe alternatives you've considered**
None

**Additional context**
#877, #1084

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/cFE/issues/1177
"Implement ""CFE_ES_GetVersion()"" function","**Is your feature request related to a problem? Please describe.**
As in nasa/osal#821 it is preferable to obtain version strings via an API call rather than as a macro, because of how/where it is evaluated.

**Describe the solution you'd like**
Implement API calls that return the version strings currently defined as macros in `cfe_version.h`

**Additional context**
See nasa/osal#821.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1176
"Fix #1160, Shorten task info default filename","**Describe the contribution**
Fix #1160 - shortened `CFE_PLATFORM_ES_DEFAULT_TASK_LOG_FILE` name so it is within the `OSAL_MAX_FILE_NAME` size limit

**Testing performed**
Built and ran unit tests, passed.  Ran cFS and sent `CFE_ES_QUERY_ALL_TASKS_CC` command, confirmed file was generated.

**Expected behavior changes**
Will now output task info to default filename if no filename is provided in command.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1175
"Fix #1170, refactor target config objects","**Describe the contribution**
Rework the dynamic content so it is generated entirely via a CMake ""configure_file()"" command into a C source file (.c) that
can be built as normal.

This removes the need for inline `#include` statements to pull in data fragments to fill in the data.

Fixes #1170 
Fixes #352 

**Testing performed**
Build and run all unit tests, sanity test CFE, confirm versions reported as expected.

**Expected behavior changes**
This reports multiple event ""91"" (version info) - one event for each statically linked code module.  This now also includes supplemental modules such as ""msg"" and ""sbr"" (these were not reported at all before).

This also moves reporting of the ""mission config"" name from event 91 to event 92 (build info) as it is not really version info.  Ideally event 91 should be strictly for source control revision info.  Any other environment/config info should be in the other events.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This also attempts to better differentiate/clarify the two different versions that are reported.

The first version is administratively-assigned, traditional ""semantic"" version (major/minor/rev plus dev build number).  This is updated manually and it is what is reported in CFE event 2 during start up as follows:

```
EVS Port1 66/1/CFE_ES 2: cFS Versions: cfe v6.8.0-rc1+dev348, osal v5.1.0-rc1+dev262, psp v1.5.0-rc158. cFE chksm 65346
```

The second version is the automatically-obtained ""source"" version which is gained by introspection of the source code at compile time.  This is reported in CFE event 91, as follows:

```
EVS Port1 66/1/CFE_ES 91: Version Info: Component cfe-core, version git:v6.8.0-rc2-346-g3aa80ed0
EVS Port1 66/1/CFE_ES 91: Version Info: Component osal, version git:v6.0.0-rc1-1-g7576fed6
EVS Port1 66/1/CFE_ES 91: Version Info: Component psp, version git:v1.5.0-rc1-61-gf3dae6c-dirty
EVS Port1 66/1/CFE_ES 91: Version Info: Component msg, version git:v6.8.0-rc2-346-g3aa80ed0
EVS Port1 66/1/CFE_ES 91: Version Info: Component sbr, version git:v6.8.0-rc2-346-g3aa80ed0
EVS Port1 66/1/CFE_ES 91: Version Info: Component resourceid, version git:v6.8.0-rc2-346-g3aa80ed0
```

Important to note that instead of squeezing this all into a _single_ event 91 as had been done before, this sends a separate event for each component.  This means that _all_ components can be done (note this includes msg/sbr/resourceid now, these were not reported before) as well as making it possible to split ""cfe-core"" into its components as well.  It will scale more easily to any number of modular components.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1174
"Fix #1172, Update to use Ut_Stub_CheckDefaultReturnValue API","**Describe the contribution**
Fix #1172 - updates API name for nasa/osal#737 fix

**Testing performed**
Build and execute unit tests

**Expected behavior changes**
None, name change (as long as corresponding nasa/osal#823 in)

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + nasa/osal#823 + this commit

**Additional context**
Depends on osal PR

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:FastTrack, dependency",https://github.com/nasa/cFE/pull/1173
Replace UT_Stub_CheckForceFail with UT_Stub_CheckDefaultReturnValue,"**Is your feature request related to a problem? Please describe.**
See nasa/osal#737

**Describe the solution you'd like**
Update to use new name

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, unit-test, deprecate",https://github.com/nasa/cFE/issues/1172
cFE Integration candidate: 2021-02-23,"**Describe the contribution**
Fix #139, Do file writes in background
Fix #978, put task parameters into task record
Fix #790, allow directories and symlinks in FILELIST. 
Fix #735, add comment if null terminated or not.

Fix #1160, Shorten task info default filename 
Fix #1172, Update to use Ut_Stub_CheckDefaultReturnValue API  

**Testing performed**
See <https://github.com/nasa/cFS/pull/193/checks>

**Expected behavior changes**
PR #1148 - Implements a generic FS facility to perform file writes as a background job. Applications wanting to use this need to instantiate a state object (metadata) in global memory and two callback APIs, one to get a data record, another to send events. The following file requests are changed to use this facility:

- ES ER Log dump
- SB Pipe Info
- SB Message Map
- SB Route Info
- TBL Registry Dump

Changes the internal SB member names for consistency and thus fixes propagation of `Depth` and `CurrentDepth` into files:

- `MaxQueueDepth` for maximum depth at queue creation time (previously was QueueDepth or Depth depending on context)
- `CurrentQueueDepth` for the running count (previously was InUse or CurrentDepth depending on context)
- `PeakQueueDepth` for the highest ""watermark"" (previously was PeakInUse or PeakDepth depending on context)


PR #1151 - No public API change. Encapsulates all parameters for apps and tasks into a structure object. Cleans up internal APIs to pass this new object rather than individual parameters. Adds details to the relevant record (i.e. a task record has all relevant task details) which eliminates the need to traverse the app record to find some data.

PR #1158 - Enables items in `FILELIST` to be in a target name directory as well as symlinks. `arch_build.cmake` now checks a name-based subdirectory under `${MISSION_DEFS}` for files listed in the `FILELIST` for that target. If file is a symlink, the link should be followed so the correct content is installed, not a symlink.

PR #1168 - Mo impacts to behavior. Adds documentation on  inclusion presence of null terminators for length parameters.

PR #1175 - Shortened `CFE_PLATFORM_ES_DEFAULT_TASK_LOG_FILE` name so it is within the `OSAL_MAX_FILE_NAME` size limit. Will now output task info to default filename if no filename is provided in command.

PR #1173  - Replaces `UT_Stub_SetForceFail` with `UT_Stub_SetDefaultReturnValue`. No behavior change.

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/193>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 
@zanzaben 
",,https://github.com/nasa/cFE/pull/1171
"Refactor ""target_config.c"" logic to avoid #include of data fragments","**Is your feature request related to a problem? Please describe.**
The content of the various CONFIGDATA global data structures is dynamically generated from a combination of build scripts, some which run at prep/generation time and some which run at build time.  

The pattern currently used here is that the scripts generate ""fragment"" data files that only contain the dynamic content, without any C declarations or any other syntax.  This is then paired/combined with the `target_config.c` file which is a regular version-controlled file that has the basic structure and declarations (i.e. all the non-dynamic bits) and uses `#include` to pull in the data fragments where needed (i.e. a ""fill-in-the-blank"" approach).  

This works well but there are some rules against using the `#include` directive with anything other than an normal/conventional fully formed C header file (i.e. it has `.h` extension, fully self contained, syntactically correct, standalone, include-able by any C source file at will).   So a ""dynamic data fragment"" file which is implemented here doesn't meet the criteria.

**Describe the solution you'd like**
Have the build system generate fully-formed source files before passing to C compiler in some way.

Currently evaluating/considering several approaches or combination thereof.

1. Put more of the non-dynamic ""C"" content (structure) into CMake `configure_file` templates, generating a separate but fully-resolved .c source for each object that has dynamic content.
2. Pass the file through another explicit macro-processing step (such as C preprocessor or m4) before compiling (basically introduce another layer of indirection) to generate a final file.

Either way the result should be a fully formed .c/.h file without any `#include` in its body - as all data items should be ""filled in"" already - which is then built and linked as the current file is.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1170
"Fix #1165, remove configs about shells","**Describe the contribution**
Fixes #1165
removes unused configs relating to shell commands

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/cFE/pull/1169
"Fix #735, add comment if null terminated or not.","**Describe the contribution**
Fixes #735
added comments for if lengths included null terminals or not. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/cFE/pull/1168
"Fix #1166, Remove deployment guide reference","**Describe the contribution**
Fix #1166 - Removes deployment guide reference from cmake/README.md

Partially addresses #1033 (removal of deployment guide reference)

**Testing performed**
N/A - readme update only

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:FastTrack, docs",https://github.com/nasa/cFE/pull/1167
Question: where is the cFS Deployment Guide?,"https://github.com/nasa/cFE/blob/main/cmake/README.md says
""For a more in-depth guide and specific examples, see Appendix A of the cFS Deployment Guide.""   I have searched for the cFS Deployment Guide and cannot find it.   Has the name changed?   Where is it now?","bug, docs",https://github.com/nasa/cFE/issues/1166
CFE_MISSION_ES_MAX_SHELL_CMD and CFE_MISSION_ES_MAX_SHELL_PKT no longer used,"**Is your feature request related to a problem? Please describe.**
CFE_MISSION_ES_MAX_SHELL_CMD and CFE_MISSION_ES_MAX_SHELL_PKT are no longer used anywhere.

**Describe the solution you'd like**
Since they are no longer used they should be removed. 

**Requester Info**
Alex Campbell GSFC
","enhancement, deprecate, removed",https://github.com/nasa/cFE/issues/1165
Commands using files should utilize new filename parser,"**Is your feature request related to a problem? Please describe.**
Issue #981 + PR #1156 introduces a new FS utility API to parse a filename which is aware of the expected path and extension, and will default to these if unspecified in the input.  The initial PR only applies it to ES startup script.

But this creates an inconsistency; now you can put just a basename e.g. `ci_lab` in the startup script, but passing the same string as the filename to `CFE_ES_START_APP_CC` command will __not__ work, which doesn't seem right.

**Describe the solution you'd like**
For consistency in operation CFS should also employ the same filename parser in all commands that accept a filename.  

**Additional context**
It is (intentionally, by design) fairly trivial to update a current call to `CFE_SB_MessageStringGet()` to use the filename-aware alternative instead.  

The only minor issue/concern is that the new function has more input validation than `CFE_SB_MessageStringGet()` does, so it is more important to check the return status.  So doing this generally introduces another check + path to generate the error event, so a UT test case needs to be added.  But that's about it.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1164
"Fix #1162, Add CodeQL analysis to workflow","**Describe the contribution**
Fix #1162 - adds CodeQL analysis

Differences from bundle - just builds core-cfe and tests, has timeout

**Testing performed**
Ran on fork

**Expected behavior changes**
Adds Code QL analysis on push to main and pull requests (to main)

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:FastTrack, continuous-integration",https://github.com/nasa/cFE/pull/1163
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, security, continuous-integration",https://github.com/nasa/cFE/issues/1162
Add format check to workflow,"**Is your feature request related to a problem? Please describe.**
No indication of software format non-compliance on pull requests

**Describe the solution you'd like**
Add format check to workflow

**Describe alternatives you've considered**
None

**Additional context**
See #1130 for applying the standard formatting

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, continuous-integration",https://github.com/nasa/cFE/issues/1161
Default file name for Task Info is too long,"**Describe the bug**
The default filename for the task info file is defined here:

https://github.com/nasa/cFE/blob/fcaa1d0c6b9e8244b071b8cafc765078680e24b4/cmake/sample_defs/cpu1_platform_cfg.h#L924

The filename portion of the string - ""cfe_es_task_info.log"" - is exactly 20 chars, and `OSAL_CONFIG_MAX_FILE_NAME` is also 20 chars, so it fails the max length test - because it needs to be less than the max for the NUL char.

**To Reproduce**
Build with default config, issue CFE_ES_QUERY_ALL_TASKS_CC command with no filename - which causes it to use default.
Observe error about failure to create file - error code `OS_FS_ERR_NAME_TOO_LONG`. 

**Expected behavior**
Defaults should work.

**System observed on:**
Ubuntu 20.04

**Additional context**
The prefix `cfe_es_` is 7 chars by itself.  A simple fix would be to trim this back to just `cfe_`.  Would recommend changing all the default filenames for consistency.  ER log is already just `cfe_erlog.log` (no es).

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, build-system",https://github.com/nasa/cFE/issues/1160
"Fix #979, add fields to task info struct","**Describe the contribution**

Adds stack size and priority to the task info structure written by `CFE_ES_QUERY_ALL_TASKS_CC` command.

Fixes #979 

**Testing performed**
Build and run CFE, issue QUERY_ALL_TASKS command, confirm data is in the resulting file.
Run all unit tests.

**Expected behavior changes**
Adds two new fields to the file produced by the command.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1159
"Fix #790, allow directories and symlinks in FILELIST.","**Describe the contribution**
Checks a name-based subdirectory under ${MISSION_DEFS} for files listed in the FILELIST for that target.  If file is a symlink, the link should be followed so the correct content is installed, not a symlink.

Fixes #790 

**Testing performed**
Created a symlink in a target name subdirectory (see additional context) and confirm that the correct file content is installed.

**Expected behavior changes**
Items in FILELIST can be in a target name directory, and may be symlinks.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This also adds another ""NOTE"" message to indicate exactly what file is being used, after all lookup/de-mapping logic is done, e.g. I made a symlink to test this out:
   
    $ cd sample_defs
    $ mv cpu1_cfe_es_startup.scr test_startup.scr
    $ mkdir cpu1
    $ cd cpu1
    $ ln -s ../test_startup.scr cfe_es_startup.scr
    $ cd ../..
    $ make prep
    <<snipped>>
    NOTE: Selected /home/joe/code/cfecfs/github/sample_defs/test_startup.scr as source for cfe_es_startup.scr on cpu1

This is similar to all the other informational messages for table sources and app sources indicating where they were found.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1158
Auto increment sequence on CMD packets,"**Is your feature request related to a problem? Please describe.**
The `CFE_SB_TransmitMsg()` function has a boolean parameter to indicate if the sequence number should be incremented automatically based on the route.  This route-based sequence number overrides whatever was in the buffer.

However, this only works on telemetry packets.  There is a test that checks specifically if the packet is TLM, and only updates the sequence number if so.

This means that all locally-generated messages of the ""CMD"" variety - which includes the various TIME messages e.g. 1Hz, and all ""SEND_HK"" packets generated by SCH - always have a sequence number of 0 in their header.

**Describe the solution you'd like**
The sequence number should probably be valid on all these - otherwise there is no way to tell if a message was missed.

**Additional context**
It is not clear why only locally-generated TLM packets would have a valid sequence, but not locally-generated CMD packets.

Note SCH_LAB currently calls `CFE_SB_TransmitMsg()` with the value set `false` -- so this would have to change too in order to get valid sequence numbers in SEND_HK packets.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/1157
"Fix #981, implement better filename parser","**Describe the contribution**

Implemements a new function in FS to parse an input file name from a user - `CFE_FS_ParseInputFileName()`
    
The new function produces fully-qualified output where the input may omit either a pathname or an extension.  These items will be  added from the specified defaults, if missing, and a complete fully-qualified filename will be output.
    
If the input is already a fully qualified filename, then the output is the same as the input (basically a copy).
    
This initially is used to provide better cross-platform startup  script processing, where module suffix may differ across platforms.  Only the ""basename"" of the filename needs to be specified in the startup script - everything else can come from defaults.

Fixes #981 

**Testing performed**
Build and sanity test CFE.
Check startup with all combinations of filename in script - fully qualified, basename only.
Check startup with new default startup script that has basename only - works on both Linux (.so) and RTEMS (.obj) with no change.

**Expected behavior changes**
Easier switching between platforms - startup script does not need to change to account for the different suffix that different platforms use.

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 (i686, QEMU)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1156
Consider simplifying the zero-copy SB API,"**Is your feature request related to a problem? Please describe.**
After some refactoring in PR #1154 the whole `CFE_SB_ZeroCopyHandle_t` has become somewhat extraneous - there is no extra handle/descriptor for a zero copy buffer - they are all the same, and this simply refers to the same buffer descriptor now.

**Describe the solution you'd like**
The API can be simplified and this extra handle removed.  The buffer content pointer is good enough to reconstitute the descriptor  pointer (fixed offset).

**Describe alternatives you've considered**
Leave API as is (backward compatible, just a little more complex than it needs to be).

**Additional context**
This will affect public APIs - CFE_SB_ZeroCopyGetPtr, CFE_SB_ZeroCopyReleasePtr, CFE_SB_TransmitBuffer.  (CFE_SB_ZeroCopySend and CFE_SB_ZeroCopyPass are affected but already deprecated).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/1155
"Fix #1020, refactor SB buffer descriptor object","**Describe the contribution**
Refactor the SB buffer descriptor object (`CFE_SB_BufferD_t`) and simplify the zero-copy buffer paradigm.

Combine the zero-copy and the normal CFE buffer descriptor into a single unified CFE_SB_BufferD_t object.  This cleans up a bunch of extra logic related to zero-copy buffers, including the extra descriptor object.  The result is a simpler zero-copy design that is much less different from the standard (non-zero-copy) message path.

All message descriptor objects are now tracked in a list by SB, not just the zero-copy descriptors (for consistency - if any buffers need to be tracked, they should all be tracked).

This notably puts the buffer content as a _member_ within the descriptor, rather than a calculated pointer, so it will be aligned properly.

Fixes #1020 

**Testing performed**
Build and run all unit tests
Sanity check CFE

**Expected behavior changes**
All changes are internal to SB.  This does not affect API or behavior of any existing APIs (but see note)

It also ensures that zero-copy buffers (and the associated CFE_SB_TransmitBuffer API) behave as similarly as possible to the normal CFE_SB_TransmitMsg API.  Notably this corrects a minor issue where the MsgSendErrorCounter would get incremented if there were no subscribers, but only in the zero copy API.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This does not change public API in any way.  However now there is no extra descriptor for the ""zero copy"" buffers - they are all just buffer descriptors, regardless of whether they were allocated on the fly or pre-allocated by the application.

This means that the `CFE_SB_ZeroCopyHandle_t` value that is output from `CFE_SB_ZeroCopyGetPtr()` and others is now largely redundant.  It is equal to the buffer descriptor address, but it can be easily determined from the buffer content pointer too, so it is really not necessary to pass around two values for zero copy buffers.  This can be simplified in a future change - but that will change the public API.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",Priority: Mission,https://github.com/nasa/cFE/pull/1154
Remove use of HK parameter (LogEnabled) in EVS control logic,"**Is your feature request related to a problem? Please describe.**
`CFE_EVS_GlobalData.EVS_TlmPkt.Payload.LogEnabled` is used in logic, discouraged pattern (tlm data used for control)

**Describe the solution you'd like**
Simplify the logic

**Describe alternatives you've considered**
None

**Additional context**
#609, #1129

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1153
Generalize msg module unit tests to handle different CFE_PLATFORM_SB_HIGHEST_VALID_MSGID settings,"**Is your feature request related to a problem? Please describe.**
Module unit test code tests against hardcoded highest valid msgid:
https://github.com/nasa/cFE/blob/fcaa1d0c6b9e8244b071b8cafc765078680e24b4/modules/msg/unit-test-coverage/test_cfe_msg_msgid_v2.c#L69

**Describe the solution you'd like**
Test against CFE_PLATFORM_SB_HIGHEST_VALID_MSGID

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","invalid, unit-test",https://github.com/nasa/cFE/issues/1152
"Fix #978, put task parameters into task record","**Describe the contribution**
Encapsulate all parameters for apps and tasks into a structure object and clean up internal APIs to pass this object rather than individual parameters.  These parameters can then easily be stored with the relevant record in the internal table (tasks, apps, libs) and makes management easier - as code copies one object rather than many individual fields with (potentially) different names.

All parameters are stored in the record, which facilitates future telemetry generation/stats and/or for when an app might get restarted or reloaded in the future.

Notably this changes all task startup to go through the same basic routine (there is no longer a need for different accounting between main tasks and child tasks) and share the same common entry point.  

Fixes #978 

**Testing performed**
Build and sanity check CFE.  In particular ensure that all tasks + child tasks are starting and running normally.  Also checked that the app restart command is working as expected.  

Run all unit tests and confirm coverage.

**Expected behavior changes**
No public API change.  Internal APIs are simplified, internal data structures are more consistent, and more detail is stored with the relevant record (i.e. task record has all relevant task details, so when looking up task info one does not have to traverse to the app record which previously held some of this data).

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Using the common entry point for child tasks avoids a theoretical race condition where the child task might not have been fully accounted for in the global table at the time the user function started execution.  Previously this would directly invoke the user-supplied function immediately.  Now using the common entry point this delays until the task record is completely accounted for (linked back to app, etc) before calling the user function.  So functions such as `CFE_ES_GetAppID()` and others will work right from the beginning.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1151
cFE  Integration candidate: 2021-02-02,"**Describe the contribution**
Fix #1070, patch PSP include directory reference
Fix #1108, split resource id functions into module
Fix #723, CFE_EVS_Register const correct and report truncation
Fix #680, Remove table service exclusion logic
Fix #609, Remove CFE_PLATFORM_EVS_LOG_ON undefined option to diasble log
Fix #915, Check for file existence in CFE_ES_RestartApp
Fix #1122, ES and EVS use default message limits
Fix #1123, Convert global CFE_SB_Default_Qos to macro
Fix #780, Hex output for return checking ASSERTs
Fix #986, Remove unnecessary CFE_MSG_Init in TBL
Fix #1069, Resolve mismatched types in SBR throttle
Fix #1071, Initialize Status in CFE_ES_WaitForSystemState
Fix #1110, Remove unimplemented ES prototypes
Fix #1014, Remove Test_SB_Cmds_SubRptUnexpCmdCode
Fix #997, Simplify UT_InitData SB setup
Fix #996, Remove CFE_PLATFORM_SB_MAX_PIPE_DEPTH in favor of OS_QUEUE_…
Fix #1100, Update highest MsgId documentation/verification
Fix #793, Clarify restart/reload app behavior
Fix #1036, Clear task data in EarlyInit and standardize name
Fix #1032, Send->Write name update for SB write cmds
Fix #1141, PipeName unset with debug event
Fix #1145, Update workflow action badge
Fix #1144, Add workflow action timeout
Fix #1108, clean up ifdef blocks
Fix #1162, Add CodeQL analysis to workflow

HOTFIX for #1136, update doxygen refs
HOTFIX for #1136, remove ref to CFEESResourceIDBase

**Testing performed**
See <https://github.com/nasa/cfs/pull/182/checks>

**Expected behavior changes**


PR #1072 and #1139 - Corrects reference to PSP header file location. Build now succesfully completes the build succeeds again when using `add_psp_module()` in custom CMakeLists file.

PR #1118 - Replace ""send"" with ""write"" in names for commands that write files. For example, `CFE_SB_**SEND**_ROUTING_INFO_CC` is now `CFE_SB_**WRITE**_ROUTING_INFO_CC`. Updates function names, command code names and comments.

PR #1112 - Removes incorrectly implemented deferred return code of `-1` for `CFE_SB_ReceiveBuffer` from software bus setup in `UT_InitData`.

PR #1121 - Implements more informative **assert messages** by making `SETUP, TEARDOWN, ASSERT` print `0x%lx` while `ASSERT_EQ` now prints both %lf` and `0x%lx` format for the inputs

PR #1146 - Updates continuous-integration badges in `ReadMe.md`. The badges now reflect the success status of different runs. 

PR #1113 - Remove `Test_SB_Cmds_SubRptUnexpCmdCode` which was a duplicate of `Test_SB_Cmds_CmdUnexpCmdCode` and did not implement any new tests.

PR #1115 - Initializes status in `CFE_ES_WaitForSystemState` and adds missing success test case so the function doesn't return an uninitialized `Status`.

PR #1120 - Removes the `HkPacket` and `TblRegPacket` message initializations from `CFE_TBL_EarlyInit` since they are initialized in `CFE_TBL_InitData`. Moves the `NotifyMsg` message initialization to `CFE_TBL_InitData` and sets the message ID each time it's sent from `CFE_TBL_SendNotificationMsg`. Possibly results in small performance improvement since the message isn't initialized every call.

PR #1114 - Removes unimplemented `CFE_ES_AppGetList` and `CFE_ES_AppDumpAllInfo` prototypes. 

PR #1147 - Adds a 15-minute timeout to continuous integration workflows to prevent excess resource utilization.

PR #1142 - Makes debug subscription events only print the Pipe ID, not a name, in the debug events.

PR #1101 - Updates the documentation and verification for `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID` to allows the full range of values.

PR #1083 - Clarifies the difference between ""restart"" and ""reload"" in API/cmd and user's guide documentation for `CFE_ES_RESTART_APP_CC`.

PR #1128 - `CFE_ES_RestartApp` now checks for file existence as part of command processing and does not remove the app if the file doesn't exist (just avoids one error case). it also rejects the command and increments command error counter if file is missing.

PR #1116 - Switches throttle indexes to use `CFE_SB_RouteId_Atom_t` and combines helper function given that msgid was removed due to being a resource hog. Resolves static analysis warning.

PR #1111 - Removes `CFE_PLATFORM_SB_MAX_PIPE_DEPTH` in favor of `OS_QUEUE_MAX_DEPTH`. This depth parameter in command is now checked prior to attempting OSAL call.

PR #1133 - Filters pointer now `const` in API and reports truncation when registering filters with `CFE_EVS_Register`. 

PR #1129 - Removes the ability to disable the log by not defining `CFE_PLATFORM_EVS_LOG_ON` so users are no longer able to disable log completely. For minimum memory use define `CFE_PLATFORM_EVS_LOG_MAX = 1`. Note: This could remove control based on LogEnabled, panic on reset area fail and limp along if ""sem create"" fails.

PR #1132 - This removes the remnants of the table service exclusion logic and documentation: `EXCLUDE_CFE_TBL` no longer available, even if defined, table services will still start.

PR #1126 - Set ES and EVS pipe message limit to defaults as opposed to the custom, unjustified, `CFE_SB_SubscribeEx`. This change might queue additional HK messages, but SCH loads after ES anyways.

PR #1125 - Replaces `CFE_SB_Default_Qos` with `CFE_SB_DEFAULT_QOS` macro that avoids global variable exposure. Removes SB-internal defines that are not implemented nor used.

PR #1124 - Explicity `memset` the task data to zero at the start of EarlyInit. Standardize the global typdef/variable names. 

PR #1136 - Moves all functions, macros, types, and other definitions related to resource IDs and generic resource management into a separate module, like `CFE MSG`, `SBR`, etc. This allows a mission to elect ""strict"" implementations of these objects, where every ID type is unique, and assigning between them or `uint32` results in a compiler error. **API now has separate types for each resource type (Apps, Tasks, Libs, Counters, etc).** The user can elect at the mission level whether this is a simple typedef (all uint32, all interchangeable) or a wrapper type (separate/strict type, cannot be interchanged). The former is backward compatible but the latter is not - must use proper types.

PR #1163 - Adds Code QL analysis to continuous integration workflow.


**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cfs/pull/182/>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@jphickey ",,https://github.com/nasa/cFE/pull/1150
Remove cfeesugshellsrv section of users guide,"**Is your feature request related to a problem? Please describe.**
ES shell command removed, documentation outdated.

**Describe the solution you'd like**
Clean documentation:
https://github.com/nasa/cFE/blob/fcaa1d0c6b9e8244b071b8cafc765078680e24b4/docs/src/cfe_es.dox#L804-L813
and all references (fix Next/Prev)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","bug, docs",https://github.com/nasa/cFE/issues/1149
"Fix #139, Do file writes in background","**Describe the contribution**
Implement a generic FS facility to perform file writes as a background job.  

Applications wanting to use this facility need to instantiate a state object (metadata) in global memory, and two callback APIs- one to get a data record, another to send events. 

The following file requests are changed to use this facility:
- ES ER Log dump
- SB Pipe Info
- SB Message Map
- SB Route Info
- TBL Registry Dump

Fixes #139

**Testing performed**
First built and ran ""main"" branch (unchanged) and issued all file write commands before change to get a baseline/reference copy.
Then re-built with this change applied and re-issued all file write commands.
Compared old files to new files - confirmed that the new files are correct (but see note below!).

**Expected behavior changes**
Files are written in the context of the ES background task.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
While examining the diffs between the old files and new files, I noticed that the queue depth in the Pipe Info was actually wrong in the original/reference data.  This was due to some mismatches between Pipe Info fields where names were getting crossed.

In order to fix this and avoid it from happening in the future - this changes the internal SB member names to be consistently named:
 - `MaxQueueDepth` for maximum depth at queue creation time (previously was `QueueDepth` or `Depth` depending on context)
 - `CurrentQueueDepth` for the running count (previously was `InUse` or `CurrentDepth` depending on context)
 - `PeakQueueDepth` for the highest watermark (previously was `PeakInUse` or `PeakDepth` depending on context)

In particular the `Depth` and `CurrentDepth` were not (previously) being propagated to the file correctly - as the names got crossed in the implementation.  This PR fixes it by making the names consistent.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1148
"Fix #1144, Add workflow action timeout","**Describe the contribution**
Fix #1144 - Added a timeout to prevent excess resource utilization (default is 360 minutes)

**Testing performed**
Set timeout to 1 and added a sleep, confirmed workflow timed out

**Expected behavior changes**
None, just avoids log job runs

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1147
"Fix #1145, Update workflow action badge","**Describe the contribution**
Fix #1145 - Remove Travis CI badge and add the Static Analysis badge to README

**Testing performed**
Added and confirmed it worked on branch (set custom to fork and branch, forced a timeout failure, confirm badge showed failure)

**Expected behavior changes**
Updated badge on README

**System(s) tested on**
CI

**Additional context**
TBD

**Third party code**
Jacob Hageman - NASA/GSFC

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
- Else if Company
  - **HAND SIGNED** Company CLA must be on file (once per release): [Company CLA](../docs/GSC_18128_Corp_CLA_form_1219.pdf)
- Else if Individual
  - **HAND SIGNED** Individual CLA must be on file (once per release): [Individual CLA](../docs/GSC_18128_Ind_CLA_form_1219.pdf)
","CCB:FastTrack, docs",https://github.com/nasa/cFE/pull/1146
Update README badges for workflow actions,"**Is your feature request related to a problem? Please describe.**
Badge in readme still shows travis results

**Describe the solution you'd like**
Update to reflect action status

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, travis-ci, continuous-integration",https://github.com/nasa/cFE/issues/1145
Add timeout to actions in workflow,"**Is your feature request related to a problem? Please describe.**
Default timeout is 360 minutes which is unnecessary and could exhaust allocations.

**Describe the solution you'd like**
Add a timeout in workflows

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, continuous-integration",https://github.com/nasa/cFE/issues/1144
Unit test should clear event count history after setup,"**Is your feature request related to a problem? Please describe.**
Test cases that check for events should focus on the events actually sent by the unit under test.  But many test cases also require some ""setup"" calls, which also may generate events.

As a result the ""assert"" is checking for all events from the combination of (setup + test).

This makes tests more fragile, because many tests call the same routine e.g. `CFE_SB_AppInit()` as part of the test setup.  In the current implementation this appears to generate 5 events in its default/nominal mode.  But when (not if) `CFE_SB_AppInit()` changes in any way that affects its nominal events (very easy to do) it breaks nearly every test in SB.

**Describe the solution you'd like**
For any call considered ""setup"" it should discard any events generated by the call, thereby not including them in the set that will be validated later as part of the test case.

**Additional context**
Note that all functions (by definition) have their own test case where events _will_ be verified.  It doesn't need to be verified again when it is used as the setup for something else.  Doing so just causes more maintenance work.

This also makes test cases clearer - as they should only be checking for events that are actually generated by the function under test.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/cFE/issues/1143
"Fix #1141, pipe name unset","**Describe the contribution**
Fix #1141 Only print the Pipe ID in the debug event

**Testing performed**
Enable debug events and run CFE, observe events

**Expected behavior changes**
Debug subscription events have pipe ID, no name.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/cFE/pull/1142
"""PipeName"" is unset for debug event","**Describe the bug**
Mistake in previous PR #1092 where the `PipeName` buffer is used to send a debug event on success but it is only set to a value on failure.

**To Reproduce**
Enabled debug events, and ""Subscription Rcvd"" events do not have a valid name.

**Expected behavior**
Need to get name in all cases, not just failure.

**System observed on:**
Ubuntu 20.04

**Additional context**
My preference would be to only print the ID in a debug event, as its faster and it saves the work of copying the name since most of the time debug events are turned off anyway.  But a ""quick fix"" that doesn't change the format is to just move the line.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, cFE-SB",https://github.com/nasa/cFE/issues/1141
"Fix #546 #547, api argument validation","**Describe the contribution**
Fixes #546 
Fixes #547
Add validation for method parameters. Mostly null pointer checks for #547 and a few size checks for #546

Fixes #1119
Returning the input instead of an error code 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Additional Context** 
Here is the function list from #546 and the changes done 

cfe_es_api.c:CFE_ES_DeleteApp - Can get a segmentation fault if user tries to delete an APP greater than CFE_PLATFORM_ES_MAX_APPLICATIONS
	 CFE_ES_LocateAppRecordByID gets a pointer that is either valid or null

cfe_es_api.c:CFE_ES_ReloadApp - Can Result in Segmentation fault if APID is invalid
	CFE_ES_LocateAppRecordByID gets a pointer that is either valid or null

cfe_es_api.c:CFE_ES_CreateChildTask - Input Argument 'Flags' is not validated…also it does not appear to be used anywhere, consider removing
	Not changing functions in this task 

cfe_es_api.c:CFE_ES_GetAppName - Consider comparing BufferLength with OS_MAX_API_NAME prior to use.
	No invalid buffer length

cfe_es_api.c:CFE_ES_RegisterCDS - Consider checking if block size is less than CFE_PLATFORM_ES_MAX_BLOCK_SIZE
	CFE_ES_RegisterCDSEx checks BlockSize

cfe_es_perf.c:CFE_ES_PerfLogAdd - Should check if EntryExit is either a 0 or 1
	It's internal and the macro that calls it will only pass in valid values

cfe_fs_api.c:CFE_FS_InitHeader - SubType not checked
	The API doesn't have a limitation for SubType

cfe_sb_api.c:CFE_SB_SubscribeFull - Quality is not checked…consider checking that it is 0 or 1
	Quality is not nessacarly 1 or 0

cfe_sb_api.c:CFE_SB_ZeroCopyGetPtr - Is there a maximum message size? Consider verifying MsgSize prior to use.
	Checks MsgSize

cfe_sb_api.c:CFE_SB_SubscribeLocal - MsgLim is not checked…if a max limit does exist, should add argument validation
	a max limit doesn't exists

cfe_sb_util.c:CFE_SB_SetUserDataLength - Consider verifying Length of user data (if there exists a limit) and/or TotalMsgSize
	Checks TotalMsgSize
cfe_tbl_api.c:CFE_TBL_GetAddresses - Can result in Segmentation fault if NumTables grows larger than max number of tables.
	Needs to be enforced by user 

cfe_tbl_api.c:CFE_TBL_ReleaseAddresses - Should check to make sure NumTables is less than CFE_PLATFORM_TBL_MAX_NUM_TABLES
	Needs to be enforced by user 


Here is a list of the functions from #547 and their new current state 

cfe_es_api.c:CFE_ES_CalculateCRC
	checks for NULL 
cfe_es_api.c:CFE_ES_CopyToCDS
	checks for NULL
cfe_es_api.c:CFE_ES_CreateChildTask
	checks for NULL
cfe_es_api.c:CFE_ES_GetAppID
    checks for NULL
cfe_es_api.c:CFE_ES_GetAppName
	checks for NULL
cfe_es_api.c:CFE_ES_GetGenCounterIDByName
	checks for NULL
cfe_es_api.c:CFE_ES_GetTaskInfo
	checks for NULL
cfe_es_api.c:CFE_ES_ProcessCoreException
	Method no longer exists
cfe_es_api.c:CFE_ES_RegisterCDS
    checks for NULL
cfe_es_api.c:CFE_ES_RestoreFromCDS
    checks for NULL
cfe_es_api.c:CFE_ES_RunLoop
	Can be called with NULL
cfe_es_api.c:CFE_ES_WriteToSysLog
    checks for NULL
cfe_esmempool.c:CFE_ES_GetMemPoolStats
    checks for NULL
cfe_esmempool.c:CFE_ES_GetPoolBuf
    checks for NULL
cfe_esmempool.c:CFE_ES_GetPoolBufInfo
    checks for NULL
cfe_esmempool.c:CFE_ES_PoolCreate
	Calls CFE_ES_PoolCreateEx which checks for NULL
cfe_esmempool.c:CFE_ES_PoolCreateEx
    checks for NULL
cfe_esmempool.c:CFE_ES_PoolCreateNoSem
	Calls CFE_ES_PoolCreateEx which checks for NULL
cfe_esmempool.c:CFE_ES_PutPoolBuf
    checks for NULL
cfe_evs.c:CFE_EVS_SendEvent
	checks for NULL
cfe_evs.c:CFE_EVS_SendEventWithAppID
	checks for NULL
cfe_evs.c:CFE_EVS_SendTimedEvent
	checks for NULL
cfe_fs_api.c:CFE_FS_InitHeader
	checks for NULL
cfe_fs_api.c:CFE_FS_ReadHeader
	checks for NULL
cfe_fs_api.c:CFE_FS_SetTimestamp
	No pointer to check
cfe_fs_api.c:CFE_FS_WriteHeader
	checks for NULL	
cfe_sb_api.c:CFE_SB_CreatePipe
	checks for NULL
cfe_sb_api.c:CFE_SB_ZeroCopyGetPtr
	checks for NULL
cfe_sb_msg_id_util.c:CFE_SB_GetMsgId
	Deprecated
cfe_sb_msg_id_util.c:CFE_SB_SetMsgId
	Deprecated
cfe_sb_util.c:CFE_SB_GenerateChecksum
	Deprecated
cfe_sb_util.c:CFE_SB_GetChecksum
	Deprecated
cfe_sb_util.c:CFE_SB_GetCmdCode
	Deprecated
cfe_sb_util.c:CFE_SB_GetMsgTime
	Deprecated
cfe_sb_util.c:CFE_SB_GetTotalMsgLength
	Deprecated
cfe_sb_util.c:CFE_SB_GetUserData
	checks for NULL
cfe_sb_util.c:CFE_SB_GetUserDataLength
	checks for NULL
cfe_sb_util.c:CFE_SB_InitMsg
	Deprecated
cfe_sb_util.c:CFE_SB_MessageStringGet
	checks for NULL
cfe_sb_util.c:CFE_SB_MessageStringSet
	checks for NULL
cfe_sb_util.c:CFE_SB_MsgHdrSize
	checks for NULL
cfe_sb_util.c:CFE_SB_SetCmdCode
	Deprecated
cfe_sb_util.c:CFE_SB_SetMsgTime
	Deprecated
cfe_sb_util.c:CFE_SB_SetTotalMsgLength
	Deprecated
cfe_sb_util.c:CFE_SB_SetUserDataLength
	checks for NULL
cfe_sb_util.c:CFE_SB_TimeStampMsg
	calls CFE_MSG_SetMsgTime which checks for NULL
cfe_sb_util.c:CFE_SB_ValidateChecksum
	Deprecated
cfe_tbl_api.c:CFE_TBL_GetAddress
	checks for NULL
cfe_tbl_api.c:CFE_TBL_GetAddresses
	checks for NULL
cfe_tbl_api.c:CFE_TBL_GetInfo
	checks for NULL
cfe_tbl_api.c:CFE_TBL_Load
	checks for NULL
cfe_tbl_api.c:CFE_TBL_Register
	checks for NULL
cfe_tbl_api.c:CFE_TBL_Share
	checks for NULL
cfe_time_api:CFE_TIME_Print
	checks for NULL
cfe_time_api:CFE_TIME_RegisterSynchCallback
	checks for NULL

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/cFE/pull/1140
Fix #1070 for main branch (merge of 6.8.x after bookkeeping),"**Describe the contribution**
This just applies Fix #1070 to main

**Testing performed**
Leveraging testing from #1072 

**Expected behavior changes**
PSP module include path correct (should build)

**System(s) tested on**
No new testing, just a merge

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1139
"Fix #1070, patch PSP include directory reference","**Describe the contribution**
Copy of #1072 but main target (Caelum development)

**Testing performed**
Nothing new, #1072 tested the fix

**Expected behavior changes**
PSP modules should be able to build again

**System(s) tested on**
NA, leveraging previous tests

**Additional context**
Maybe add a PSP module test into the matrix to catch issues like this?

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",duplicate,https://github.com/nasa/cFE/pull/1138
"Fix #1070, patch PSP include directory reference","**Describe the contribution**
Copy of #1072 but main target (Caelum development)

**Testing performed**
Nothing new, #1072 tested the fix

**Expected behavior changes**
PSP modules should be able to build again

**System(s) tested on**
NA, leveraging previous tests

**Additional context**
Maybe add a PSP module test into the matrix to catch issues like this?

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",duplicate,https://github.com/nasa/cFE/pull/1137
"Fix #1108, split resource id functions into module","**Describe the contribution**
Move all functions, macros, types, and other definitions related to resource IDs and generic resource management into
a separate module, like CFE MSG and SBR, etc.

Notably this allows a mission to elect ""strict"" implementations of these objects, where every ID type is unique, and assigning
between them (or uint32) results in a compiler error.

Fixes #1108
Fixes #913

**Testing performed**
Build and sanity test CFE, run all unit tests

**Expected behavior changes**
API now has separate types for each resource type (Apps, Tasks, Libs, Counters, etc).  

**System(s) tested on**
Ubuntu 20.04

**Additional context**
The user can elect at the mission level whether this is a simple typedef (all `uint32`, all interchangeable) or a wrapper type (separate/strict type, cannot be interchanged).  The former is backward compatible but the latter is not - must use proper types.

Default if nothing is indicated is to use the backward compatible types, of course - so this doesn't break anyone's build.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",conflicts,https://github.com/nasa/cFE/pull/1136
"Fix #1134, Add UtDebug output to CFE_ES_WriteToSysLog stub","**Describe the contribution**
Fix #1134, Add UtDebug output to CFE_ES_WriteToSysLog stub

**Testing performed**
Build and run unit tests with -d flag to get debug output, passed and now reports CFE_ES_WriteToSysLog messages

**Expected behavior changes**
UT more informative, no FSW changes.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None.

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1135
CFE_ES_WriteToSysLog stub write to UtDebug,"**Is your feature request related to a problem? Please describe.**
CFE_ES_WriteToSysLog stub isn't informative when debugging

**Describe the solution you'd like**
Add debug output in CFE_ES_WriteToSysLog stub

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, unit-test, cFE-ES",https://github.com/nasa/cFE/issues/1134
"Fix #723, CFE_EVS_Register const correct and report truncation","**Describe the contribution**
Fix #723 - Filters pointer now const in API and truncation is reported in the system log

**Testing performed**
Built and ran unit tests (already cover the truncation case), verified new system log message

**Expected behavior changes**
Reports truncation when registering filters with CFE_EVS_Register

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1133
"Fix #680, Remove table service exclusion logic","**Describe the contribution**
Fix #680 - This removes the final remnants of the table service exclusion logic and documentation.

**Testing performed**
Build and run unit tests, passed.

**Expected behavior changes**
No affect to default behavior.  `EXCLUDE_CFE_TBL` no longer used, if define table services will still be started.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
#972 will transition table service to a module that can be customized or implemented differently if desired.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1132
Update EVS optional log requirements (no longer optional),"**Is your feature request related to a problem? Please describe.**
The following are listed as OPTIONAL, #609/#1129 removes the option:
cEVS3013 - EVS: Clear Local Event Log
cEVS3014 - EVS: Set Event Logging Mode
cEVS3015 - EVS: Write Local Event Log To File
cEVS3016 - EVS: Write Local Event Log Order
cEVS3018 - EVS: Housekeeping Message
cEVS3108 - EVS: Store Message In Event Log
cEVS3108.1 - EVS: Store Message In Event Log - Set Full Flag
cEVS3108.2 - EVS: Store Message In Event Log - Increment Overflow Counter
cEVS3108.3 - EVS: Store Message In Event Log - Log Full Behavior
cEVS3202 - EVS: Initialize Full Flag To False On Power On Reset
cEVS3203 - EVS: Initialize Logging Mode On Power On Reset
cEVS3207 - EVS: Preserve Event Log Reset Mode On Processor Reset
cEVS3208 - EVS: Preserve Log Full State On Processor Reset
cEVS3210 - EVS: Preserve Log Overflow Counter On Processor Reset

**Describe the solution you'd like**
Update requirements, not optional.

**Describe alternatives you've considered**
None

**Additional context**
Note once services transition to modules (#972), custom implementations could replicate EVS w/o a log if really needed.

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, requirements",https://github.com/nasa/cFE/issues/1131
Apply style formatting (release candidate prep),"**Is your feature request related to a problem? Please describe.**
Code has diverged from automated style.

**Describe the solution you'd like**
Apply automated style formatting.

**Describe alternatives you've considered**
None

**Additional context**
Suggest adding as a check in workflow until release.  Style has been very stable, should be manageable to enforce at least in the short term (release candidate and release prep).  Could enforce just on RC branch(es) if there's an issue w/ general enforcement.

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1130
"Fix #609, Remove CFE_PLATFORM_EVS_LOG_ON undefined option to diasble log","**Describe the contribution**
Fix #609 - removes the ability to disable the log by not defining `CFE_PLATFORM_EVS_LOG_ON`

**Testing performed**
Build and run unit tests, passed

**Expected behavior changes**
No longer able to disable log completely, for minimum memory use define `CFE_PLATFORM_EVS_LOG_MAX` as 1

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Could remove control based on LogEnabled, panic on reset area fail and limp along if sem create fails.
Needs requirements updates - #1131

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1129
"Fix #915, Check for file existence in CFE_ES_RestartApp","**Describe the contribution**
Fix #915 - `CFE_ES_RestartApp` now checkes for file existence as part of command processing.  Avoids removing the app if the file doesn't exist (just avoids one error case). 

**Testing performed**
Build and ran unit tests, passed.  Also ran cFE and tested with valid and invalid file (moved good file), confirmed error counter increment (and command rejected so app remained running).

**Expected behavior changes**
Now rejects command and increments command error counter if file is missing

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
#915

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1128
"Update cES1007.3 and cES1008.3, reload/restart non-param error doesn't increment command err counter","**Is your feature request related to a problem? Please describe.**
Non-command parameter errors (errors within the object files) don't increment the command error counter since the command is processed as a request that happens later (takes time to execute)

cES1007.3:  If the cFE Application Restart fails due to a non-parameter error, then the cFE shall delete the Application, **increment the invalid Command counter**, and generate an event message.
cES1008.3: If the cFE Application Reload fails due to a non-parameter error, then the cFE shall delete the Application, **increment the invalid Command counter**, and generate an event message.

**Describe the solution you'd like**
Update the requirements.

**Describe alternatives you've considered**
More complex command error handling (delay the success increment).

**Additional context**
#915 

**Requester Info**
Jacob Hageman - NASA/GSFC","docs, requirements",https://github.com/nasa/cFE/issues/1127
"Fix #1122, ES and EVS use default message limits","**Describe the contribution**
Fix #1122 - ES and EVS used `CFE_SB_SubscribeEx` with no requirement or justification (all but one of the limits were default, and the non-default for ES HK was 2 vs 4).  Default limits should be fine unless required to be different.

**Testing performed**
Built and ran unit tests, passed

**Expected behavior changes**
None except it could queue a few more HK messages, but SCH loads after ES anyways.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1126
"Fix #1123, Convert global CFE_SB_Default_Qos to macro","**Describe the contribution**
Fix #1123 - deprecates CFE_SB_Default_Qos and replaces with CFE_SB_DEFAULT_QOS macro that avoids global variable exposure, and removed SB internal defines (they aren't implemented anywhere and are not used).  These can be added at the appropriate scope once requirements are defined.

**Testing performed**
Build and ran unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle integration candidate + this commit

**Additional context**
@ejtimmon - deprecation of CFE_SB_Default_Qos (coding standard all-caps for macros requires change)
Depends on #1126 to compile with OMIT_DEPRECATED

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","deprecate, dependency, removed",https://github.com/nasa/cFE/pull/1125
"Fix #1036, Clear task data in EarlyInit and standardize name","**Describe the contribution**
Fix #1036 - explicity memset the task data to zero at the start of EarlyInit.  Also standardizes the global typdef/variable names.

Might need a rebase based on the name changes.

**Testing performed**
Build and run unit tests, passed.

**Expected behavior changes**
None.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
TBL global depends on `CFE_TBL_Global.TableTaskAppId` being set, which doesn't happen until the app starts (in `CFE_TBL_InitData`), so replaced where CFE_TBL_EarlyInit was being called to initialize the data with the test initialization function `Test_CFE_TBL_ApiInit`.  In the future these tests could be cleaned up by calling the initialization before each test, and ensuring there are no test configuration dependencies across tests.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1124
"CFE_SB_Default_Qos exposed globally, with internal defaults, passing structure by value","**Is your feature request related to a problem? Please describe.**
CFE_SB_Default_Qos is extern from cfe_sb.h (so any code including cfe_sb.h could change it's value!):
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/inc/cfe_sb.h#L175-L185

But the defines are ""internal"" to SB:
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/sb/cfe_sb_priv.h#L86-L87

Also structure passed by value:
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/inc/cfe_sb.h#L381

There is no underlying implementation, so currently just a placeholder in the API.

**Describe the solution you'd like**
Possibly convert to bits in a uint32/16 or similar (structure is overkill), provide default and the other values publicly as defines, don't expose as a global variable.

**Describe alternatives you've considered**
None

**Additional context**
Found when working #1036, it's out of family since it's not at task global scope.

**Requester Info**
Jacob Hageman
","bug, cFE-SB",https://github.com/nasa/cFE/issues/1123
Custom pipe message limits without requirements or justification,"**Is your feature request related to a problem? Please describe.**
Expectation is to use defaults unless there's a requirement/justification to have custom limits.  There is neither for the code snips below, and no clear reason why the default limits aren't good enough (they should be fine).

https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/es/cfe_es_task.c#L281-L285
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/es/cfe_es_task.c#L292-L296
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/evs/cfe_evs_task.c#L318-L320
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/evs/cfe_evs_task.c#L327-L328

Note for all but 1 case, the message limit value set is the same as the default (4).

**Describe the solution you'd like**
Either justify these differences or just use the default subscribe call.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1122
"Fix #780, Hex output for return checking ASSERTs","**Describe the contribution**
Fix #780 - SETUP/TEARDOWN/ASSERT now print 0x%lx and ASSERT_EQ prints both %lf and 0x%lx format for the inputs

**Testing performed**
Built and ran cfe-core_sb_UT and confirmed output as expected.

**Expected behavior changes**
More informative assert messages (often comparing error codes)

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1121
"Fix #986, Remove unnecessary CFE_MSG_Init in TBL","**Describe the contribution**
Fix #986 - removed the `HkPacket` and `TblRegPacket` message initializations from `CFE_TBL_EarlyInit`, they are initialized in `CFE_TBL_InitData`.  Moved the `NotifyMsg` message initialization to `CFE_TBL_InitData`, and just setting the message ID each time it's sent from `CFE_TBL_SendNotificationMsg`.

**Testing performed**
Build and run unit tests, passed.

**Expected behavior changes**
None (or just slightly better performance since the msg isn't initialized every call)

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1120
Calculate crc can't return error code ,"**Is your feature request related to a problem? Please describe.**
Calculate CRC returns a uint so any error code you use gets overloaded. 

**Describe the solution you'd like**
be able to handle errors 

**Additional context**
Was found while working on #547 

**Requester Info**
Alex Campbell GSFC",bug,https://github.com/nasa/cFE/issues/1119
"Fix #1032, Send->Write name update for SB write cmds","**Describe the contribution**
Fix #1032 - updated ""Send"" to ""Write"" in command names that write files.  Includes function names, command code names and comments.

**Testing performed**
Standard build and run unit tests, passed.  Made user's guide w/ no errors/warnings.

**Expected behavior changes**
None, name change to fix misnomer

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Additional update pending #1102 merge

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1118
"CFE_SB_SND_RTG_EID and CFE_SB_SND_RTG_ERR1_EID used for all three write file cmds (route, map, pipe)","**Is your feature request related to a problem? Please describe.**
Event ID's should be unique, these aren't.

**Describe the solution you'd like**
Define event ID's for all three.  Also worth a general scrub of event ID's to ensure they are unique.  

Other considerations:
 - ""SND"" is a misnomer, these are write commands
 - There is no event for the file header error

**Describe alternatives you've considered**
None

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1117
"Fix #1069, Resolve mismatched types in SBR throttle","**Describe the contribution**
Fix #1069 - Switched throttle indexes to use `CFE_SB_RouteId_Atom_t` and combined helper function since separation no longer necessary (only 1 foreach function implemented).

**Testing performed**
Build and run unit tests, passed.

**Expected behavior changes**
None, just resolves static analysis warning

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1116
"Fix #1071, Initialize Status in CFE_ES_WaitForSystemState","**Describe the contribution**
Fix #1071 - initializes status in CFE_ES_WaitForSystemState and added missing success test case (would have failed!)

**Testing performed**
Build and run unit tests, passed.  

**Expected behavior changes**
No longer returning uninitialized Status

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1115
"Fix #1110, Remove unimplemented ES prototypes","**Describe the contribution**
Fix #1110, removed unimplemented `CFE_ES_AppGetList` and `CFE_ES_AppDumpAllInfo` prototypes

**Testing performed**
Built and ran unit tests, passed.

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1114
"Fix #1014, Remove Test_SB_Cmds_SubRptUnexpCmdCode","**Describe the contribution**
Fix #1014, Remove Test_SB_Cmds_SubRptUnexpCmdCode

Test was just a copy/paste of Test_SB_Cmds_CmdUnexpCmdCode
and did not actually implement a new test.  Subscription
reporting is a no parameter command.

**Testing performed**
Build and run unit tests, passed.

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1113
"Fix #997, Simplify UT_InitData SB setup","**Describe the contribution**
Fix #997 - Removes confusing and incorrectly implemented deferred return code of -1 for `CFE_SB_ReceiveBuffer` from software bus setup in UT_InitData.

**Testing performed**
Build and run unit tests, passed

**Expected behavior changes**
None in the core since nothing depended on this behavior, anything that did (other apps) should do it correctly.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1112
"Fix #996, Remove CFE_PLATFORM_SB_MAX_PIPE_DEPTH in favor of OS_QUEUE_MAX_DEPTH","**Describe the contribution**
Fix #996, Remove CFE_PLATFORM_SB_MAX_PIPE_DEPTH in favor of OS_QUEUE_MAX_DEPTH

**Testing performed**
Built and ran unit tests, passed

**Expected behavior changes**
Depth parameter in command now checked prior to attempting OSAL call

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1111
ES header prototypes for nonexistent functions,"**Is your feature request related to a problem? Please describe.**
Some old/stale prototypes in `cfe_es_apps.h` are here:

https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/es/cfe_es_apps.h#L241-L251

These functions are not implemented - there is no definition to go along with these prototypes.

**Describe the solution you'd like**
Remove these - Should not prototype functions that are not defined.  (obviously not being called by anything)

**Additional Context**
Noted this when reviewing other nearby changes....

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, cFE-ES, removed",https://github.com/nasa/cFE/issues/1110
cFE Integration candidate: 2021-01-19,"**Describe the contribution**

Fix #1074, Refactor CFE_TIME_RegisterSynchCallback
Fix #449, Add OS_printf to CFE_ES_SYSLOG_APPEND
Fix #488, Pad msg headers to 64 bit
Fix #903, Add CFE_SB_GetUserData padding check
Fix #877, Remove duplicate CFE_MISSION_REV define
Fix #901, Remove UT_CheckForOpenSockets references
Fix #904, Update cpuname targets.cmake documentation
Fix #1090, UT event check bounds
Fix #1052, Refactor UT_ClearForceFail to UT_ClearDefaultReturnValue
Fix #1068, Create Security Policy
Fix #933, Remove SenderReporting from SB global
Fix #985, globalize ""resource ID"" definitions
Fix #1073, refactor SB API for proper global locks
Fix #945, Finish CFE_PLATFORM_ES_PERF_MAX_IDS removal
Fix #954, Handle debug events in unit test
Fix #955, Remove OS_printf stub count checks in UT
Fix #1089, Cleanup strncpy use - unit tests
Fix #1089, Cleanup strncpy use - main code
Fix #932, Update UT for CFE_MISSION* string sizing
Fix #1134, Add UtDebug output to CFE_ES_WriteToSysLog stub

**Testing performed**
See https://github.com/nasa/cFS/pull/177/checks

**Expected behavior changes**

PR #1048 - Documentation: Add Security.md with instructions to report vulnerability

PR #1086 - Documentation: Update cpuname/MISSION_CPUNAMES documentation

PR #1091 - Fixes `UT_CheckEventHistoryFromFunc()` helper routine to read the correct number of IDs so it checks the correct number of events. Also correct bad event checks in TBL UT.

PR #1076 - Adds `OS_printf` to `CFE_ES_SYSLOG_APPEND` so it matches `CFE_ES_WriteToSysLog`

PR #1099 - Removes unused `SenderReporting` and `CFE_PLATFORM_SB_DEFAULT_REPORT_SENDER`

PR #1106 - Tests pass when debug events are enabled via `CFE_PLATFORM_EVS_DEFAULT_TYPE_FLAG` in platform config.

PR #1085 - Removes references to `UT_CheckForOpenSockets` which is no longer applicable since the UT framework resets the state for each unit test.

PR #1053 - Rename `UT_ClearForceFail` as `UT_ClearDefaultValue` given change in https://github.com/nasa/osal/issues/724

PR #905 - Adds checks that ensure `CFE_SB_GetUserData` works with all payload data types.

PR #1077

 - Adds header padding to 64-bit so that `CFE_SB_GetUserData` will work for message structures with elements up to 64 bit
  - For primary-only header config: telemetry header required to 64 bit boundary (affects all receivers)
  - For primary and extended header config: command header required padding to 64 bit boundary (affects all senders)

PR #1075 - Refactor `CFE_TIME_RegisterSynchCallback` to only have one return point and eliminates ""possible uninitialized variable"" static analysis warning

PR #1092 - None of these changes are expected to cause problematic.

- Addresses message delivery issues due to inconsistent locking by reworking cFE-SB API implementation. Ensures all events are generated and counters are incremented consistently by avoiding early returns in functions and using the `PendingEventID` register to record what event ID should be sent per the current operation.

- Employs the `CFE_ES_ResourceID_t` type and related patterns for managing the SB Pipe IDs.  In particular this (intentionally) makes it not possible 

- Will break code which directly accessed these items without going through the lookup function.

- **`CFE_SB_PipeId_t` type is no longer usable as a direct array index**, increased in size from 8 to 32 bits, and is now consistent with all other ID types in both behavior and size. 

- **The ""pipe stats"" structure in the Pipe TLM is also changed**. This structure contained a `CFE_SB_PipeId_t` value, hence why it had to be updated because the type is now bigger. The spare bytes are also moved to the end of the struct.

PR #1107 - Removes `OS_printf` checks of stub calls in unit tests and checks for specific format string in history instead to confirm the right path was taken.

PR #1084 - Removes `CFE_MISSION_REV` from platform config.

PR #1104 - Removes the rest of the references and uses of `CFE_PLATFORM_ES_PERF_MAX_IDS` in favor of `CFE_MISSION_ES_PERF_MAX_IDS`

PR #1098 

- Remove uses of strncpy and other minor hardcoded references
- Cleanup unit tests to reflect size changes in `CFE_MISSION_MAX_API_LEN` and `CFE_MISSION_MAX_PATH_LEN`. 
- Moved ES pipe name and lengths to defines 
- Removed PipeName and PipeDepth variables from app global
- Removed unnecessary (char *) casts
- Simplified `&stingname[0]` to `stringname` where observed
- Enables projects that have OSs with different limits to maintain a standard cmd/tlm and have unit tests pass.

PR #1135 - Make `CFE_ES_WriteToSysLog` stub unit test more informative by adding `UtDebug` output


**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of https://github.com/nasa/cFS/pull/177

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@zanzaben 
@ArielSAdamsNASA 
@jphickey ",,https://github.com/nasa/cFE/pull/1109
"Split ""ResourceId"" type into a separate module","**Is your feature request related to a problem? Please describe.**
The `CFE_ES_ResourceId_t` type is currently defined by ES, but in issue #985 and PR #1092 this was extended to be used by SB.  There is also a potential to use it for TBL handles as well.

There is also some choice here - in that the `CFE_ES_ResourceID_t` type can be a simple typedef to `uint32` for compatibility, or a type-safe wrapper to make sure it doesn't get mixed.

**Describe the solution you'd like**
Put the type definition and associated access functions/macros/constants into a separate CFE module, like `msg` and `sbr` are currently done.  This gets it out from being an ""ES"" type, extending it apply to all of CFE core and possibly also apps.

**Additional context**
This also can incorporate a solution for #913 - each app may specialize the generic type with its own typedef.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/1108
"Fix #955, Remove OS_printf stub count checks in UT","**Describe the contribution**
Fix #955 - removes checking of OS_printf # of stub calls in unit tests (mostly ES, 2 in EVS).  Checks for specific format string in history instead (added 2 checks where they were missing) to confirm the right path was taken.

**Testing performed**
Built and ran unit tests, passed

**Expected behavior changes**
None, reduces technical debt (no need to fix sub counts all over when implementation changes)

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1107
"Fix #954, Handle debug events in unit test","**Describe the contribution**
Fix #954 - updates asserts to handle debug events if enabled via CFE_PLATFORM_EVS_DEFAULT_TYPE_FLAG in platform config.

**Testing performed**
Built and ran unit tests with default (0xE) and debug enabled (0xF), passed

**Expected behavior changes**
None except tests pass w/ debug events enabled

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1106
Confirm no recursive locking and transition to fast mutex use,"**Is your feature request related to a problem? Please describe.**
Currently using recursive mutexes due to historical double locks (see #948).  Could use more efficient fast mutexes after confirming all recursive locks have been removed.

**Describe the solution you'd like**
Survey for recursive locks, remove any remaining, and transition to fast mutexes.

**Describe alternatives you've considered**
None

**Additional context**
#948 was solved by #1092

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1105
"Fix #945, Finish CFE_PLATFORM_ES_PERF_MAX_IDS removal","**Describe the contribution**
Fix #945 - Removes the rest of the references/uses of `CFE_PLATFORM_ES_PERF_MAX_IDS` (in favor of `CFE_MISSION_ES_PERF_MAX_IDS `)

**Testing performed**
Build and run unit tests, passed

**Expected behavior changes**
None, just avoids issues that could happen if the platform/mission defines diverged

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
#1103 is open for consideration, but future work

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1104
Reduce memory use with MISSION defines to size tlm vs PLATFORM defines for internal table use,"**Is your feature request related to a problem? Please describe.**
Spawned from #945 discussions where the point was brought up that PLATFORM defines could be used to size internal arrays for tracking (for example `CFE_PLATFORM_ES_PERF_MAX_IDS` and `CFE_PLATFORM_ES_MAX_APPLICATIONS`) and MISSION defines could be used for sizing tlm (so all platforms have the same packet definitions).

**Describe the solution you'd like**
Trade the additional requirements/complexity vs memory savings.  Consider requirements/design/implementation updates.  If required, identify prime stakeholder and resources to implement.

**Describe alternatives you've considered**
Leave as is where the mission maximums are used for both tlm and internal sizing (current state meets current requirements).

**Additional context**
#945 

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1103
"Fix #982, separate pipeinfo file data structure","**Describe the contribution**
Provide a separate/dedicated structure for use in the ""Pipe Info"" file as written by the `CFE_SB_SEND_PIPE_INFO_CC` command, instead of using the `CFE_SB_PipeD_t` which is supposed to be internal/private.

Data is extracted from the internal `CFE_SB_PipeD_t` while shared data locked and staged into this new format, then the shared data is unlocked while the other information is gathered and finally written to the file.

Fixes #982 
Fixes #995 

**Testing performed**
Build CFE and sanity check, run all unit tests
Run the `CFE_SB_SEND_PIPE_INFO_CC` and confirm that the file is generated.

**Expected behavior changes**
This changes the binary format of the generated pipe info file.  However after this is merged the format of the fine should be more stable going forward, as internal changes to the `CFE_SB_PipeD_t` will no longer affect it.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This still needs a rebase as it depends on #1092.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1102
"Fix #1100, Update highest MsgId documentation/verification","**Describe the contribution**
Fix #1100 - updates the documentation and verification for CFE_PLATFORM_SB_HIGHEST_VALID_MSGID

**Testing performed**
Built and ran unit tests, passed.

**Expected behavior changes**
None other than allows the full range of values.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Relates to hash message map implementation (and search if ever added)

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:FastTrack, Priority: Mission",https://github.com/nasa/cFE/pull/1101
Update highest valid msgid documentation and verification,"**Is your feature request related to a problem? Please describe.**
`CFE_PLATFORM_SB_HIGHEST_VALID_MSGID` description is out of date based on routing module (with option for hash):
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/cmake/sample_defs/cpu1_platform_cfg.h#L151-L177
Verification is also based on direct map:
https://github.com/nasa/cFE/blob/c7363c8d0bfbc0ce8d404799c64defe3cb171616/fsw/cfe-core/src/sb/cfe_sb_verify.h#L61-L63

**Describe the solution you'd like**
Update documentation.  Consider checking that `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID` < `CFE_SB_INVALID_MSG_ID` since the invalid MSG_ID is set to the maximum value.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, @excaliburtb
","bug, docs, cFE-SB",https://github.com/nasa/cFE/issues/1100
"Fix #933, Remove SenderReporting from SB global","**Describe the contribution**
Fix #933 - removes unused SenderReporting and CFE_PLATFORM_SB_DEFAULT_REPORT_SENDER

**Testing performed**
Build and run unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Replaces #934

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1099
"Fix #932 and #1089, strncpy cleanup and UT updates for mission sizing of API_LEN and PATH_LEN","**Describe the contribution**
Fix #1089 - this cleans up the use of strncpy (and other minor hardcoded references) which solves most of #932
Fix #932 - remainder of cleanup in unit tests now that `CFE_MISSION_MAX_API_LEN` and `CFE_MISSION_MAX_PATH_LEN` can be bigger than `OS_MAX_API_NAME` and `OS_MAX_PATH_LENGTH`

Other minor mods 
- Moved ES pipe name, lengths to defines (someday these could be cfg items, but just matched pattern of other services for now)
- Removed PipeName and PipeDepth variables from app global where they didn't add anything (just sent and passed)
- Removed many unnecessary (char *) casts
- Simplified &stingname[0] to stringname where observed

**Testing performed**
Built and ran unit tests with sample config (where values are equal), and with CFE_MISSION* += 4, passed

**Expected behavior changes**
None, just easier maintenance and allows for use case of mission with multiple OS's w/ different limits to have standard cmd/tlm and the unit tests will still pass

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1098
Suppress format-truncation warnings,"**Is your feature request related to a problem? Please describe.**
It's only triggered when length limited *printf functions are used, and that's why we use them in the cFS context (to truncate as needed).

**Describe the solution you'd like**
Add `-Wno-format-truncation` to default flags, users can customize the flags as needed if they want to see these warnings.

**Describe alternatives you've considered**
Up to this point we've been implementing ways to suppress the individual warnings, but that just adds complexity where the point is to truncate when needed.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, draco-rc2",https://github.com/nasa/cFE/issues/1097
Possible race conditions in SB Pipe operations,"**Describe the bug**
As part of debugging #1073 recently, it was noted that several historical SB APIs are not adequately locking the global data structures that they access.  In particular during pipe operations and subscription/unsubscription, some functions are accessing the ""CFE_SB_PipeD_t"" objects (pipe descriptors) in the `CFE_SB.PipeTbl` and routes in the routing table outside any SB shared data lock, or are not maintaining the lock from start to finish.  

It is therefore possible that another task can modify this data while being accessed by another task.

**To Reproduce**
Not actually observed ""in the wild"" - this was found by code inspection.  To manifest this would require running CFE on a multi-core system where task(s) were actively subscribing/unsubscribing or creating/deleting pipes _at the same time_.  

**Expected behavior**
All SB global data access should be protected against any possible concurrency issues.

**Code snips**
Some examples of potentially affected routines / operations in older CFE versions (these are observed in CFE 6.8, just a quick skim though - this should NOT be considered an exhaustive/complete list):  

- CFE_SB_EnableRouteCmd() / CFE_SB_DisableRouteCmd() - accesses pipes and routes with no lock
- CFE_SB_DeletePipeFull() - locks initially, but releases lock in the middle of ""destptr"" loop to do unsubscribe, which could possibly also release another task that also accesses the same pipe or change routing (i.e. changing the same list).
- CFE_SB_GetPipeName() - accesses PipeTbl without lock
- CFE_SB_SubscribeFull() - when sending the final ""subscription report"" telemetry message, this is actually stored a global, filled while locked, but actually _sent_ after unlock.  There is a possibility between the unlock and the send that another higher-priority task will do a subscribe and overwrite the message.

**System observed on:**
N/A

**Additional context**
During ""steady state"" operations where the routing table is not being changed, there isn't much risk, as normal sending/receiving of messages does not actually modify the data in the routing table.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, cFE-SB",https://github.com/nasa/cFE/issues/1096
Customizable CRC Algorithms,"**Is your feature request related to a problem? Please describe.**
It would be useful to be able to customize which CRC algorithms are being implemented in CFE_ES_CalculateCRC.

**Describe the solution you'd like**
Instead of using a hard-coded lookup table, a user can set a few variables in a configuration file that describes the desired algorithm.  On initialization of CFE_ES, the lookup tables can be generated based on the configuration variables.  I've attached a couple snippets of code to demonstrate a potential implementation.  The CRC algorithm variables are set in sample_mission_cfg.h.  The lookup tables are generated in an initialization function that can be called when CFE_ES initializes.

**Additional context**
The example CRC algorithms I used come from here (https://reveng.sourceforge.io/crc-catalogue/).  The CRC-16 algorithm is currently implemented in CFE_ES_CalculateCRC.

**Requester Info**
Mathew McCaskey
HX5 / NASA-GRC
Regenerative Fuel Cell Project

[snippets.zip](https://github.com/nasa/cFE/files/5811303/snippets.zip)
",enhancement,https://github.com/nasa/cFE/issues/1095
Update CRC Algorithm Documentation,"**Is your feature request related to a problem? Please describe.**
It would be useful to update the documentation in CFE_ES_CalculateCRC function to include information on the CRC algorithms used, specifically CRC-16 as that is currently the only one implemented.

**Describe the solution you'd like**
Include the following information that describes the CRC16 algorithm
- Name: CRC-16/ARC
- Polynomial: 0x8005
- Initialization: 0x0000
- Reflect Input/Output: true
- XorOut: 0x0000

**Additional context**
While the specific algorithm has several aliases (some listed here https://reveng.sourceforge.io/crc-catalogue/16.htm) this at least provides enough information for one to recreate the lookup table/perform their own sanity checks on the CRC calculations.

**Requester Info**
Mathew McCaskey
HX5 / NASA-GRC
Regenerative Fuel Cell Project",docs,https://github.com/nasa/cFE/issues/1094
Inconsistent Pipe ID reporting in SB events,"**Is your feature request related to a problem? Please describe.**
As a follow on for issue #1073 / PR #1092  - I noticed that the format strings of many SB event texts are not consistent, particularly with respect to Pipe IDs.  Some print the Pipe Name, whereas some just print the ID.  There is also a debug event that gets generated whenever `CFE_SB_GetPipeName()` runs, which means that for events that print the name, they actually generate _two_ events in the event log - which clutters things up.

Should be a rule of thumb that we should avoid generating more/different events in the process of generating an event - aside from being confusing it can also snowball.

**Describe the solution you'd like**
Only print the pipe IDs, not names., and use a consistent pattern/conversion (I recommend Hexadecimal/`%lx` conversion for resource IDs as it clearly reveals the table index in the lower 4 hex digits).  

Getting names at runtime is not totally trivial - There is CPU time to copy the string, and memory to store the name - and it makes all API functions that much more complex.  

But as long as the IDs are in the event text, the names can be looked up later after the fact by dumping the pipe stats to a file.  (assuming that #995 is fixed too).  It's just faster and easier and keeps the implementation simpler.

**Additional context**
The previous PR attempted to keep the event text the same as it was whenever possible, but this should be considered as a follow-on to clean up and simplify.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/1093
"Fix #1073, software bus locking","**Describe the contribution**

The root cause of the mysterious message delivery issues was tracked down to inconsistent locking.  When running on multi core systems a variety of buffer corruption issues were observed.  This fix is really a rework of all CFE SB API implementations toward the goal of more consistent locking patterns to solve this issue.

Because SB APIs make heavy use of event IDs, this presents a challenge because events can only be sent while unlocked.  In order to ensure that all events are generated and all counters are incremented consistently, the functions should run through to the end and not return early, and use a ""PendingEventID"" register to record what event ID should be sent per the current operation, rather than simply sending the event at the time the condition is identified.  

The general pattern becomes:

1. Initial checks without lock
2. Lock SB
3. Perform query/modification of SB pipe/routing tables as needed while locked
4. Unlock SB
5. Call into other subsystems as needed (e.g. OSAL)
6. (Optional) Re-lock SB global to update based on the result of (5), and unlock again
7. Send pending event ID.

This also employs the `CFE_ES_ResourceID_t` type and related patterns for managing the SB Pipe IDs.  In particular this (intentionally) makes it not possible to use this directly an array index, and will break code which directly accessed these items without going through the lookup function.

Fixes #985 
Fixes #1073 
Fixes #1096

**Testing performed**
Build and sanity check CFE
Run all unit tests
Also Let CFE run for approx 72 hours, and observed no more ""invalid msgid"" or memory pool errors.

**Expected behavior changes**
- __The `CFE_SB_PipeId_t` type is no longer usable as a direct array index__.  It is also increased in size from 8 bits to 32 bits.   But as a result is now consistent with all other ID types in both behavior and size.  As long as the typedef is used and PipeIds are used only as intended,, this should not be noticeable to apps.
- __The ""pipe stats"" structure in the Pipe TLM is also changed__.  This structure contained a `CFE_SB_PipeId_t` value, hence why it had to be updated because the type is now bigger.  The spare bytes are also moved to the end of the struct.

Neither of these are expected to be particularly problematic - just stuff to be aware of.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Not sure if the change to `CFE_SB_PipeId_t` size (and the TLM message that contains this type) might require an update to cFS-GroundSystem.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

EDIT - Fix #948 - eliminates identified double locks.",,https://github.com/nasa/cFE/pull/1092
"Fix #1090, UT event check bounds","**Describe the contribution**

Fixes `UT_CheckEventHistoryFromFunc()` helper routine to read the correct number of IDs.  Divide the ""position"" (in bytes) by the size of the event IDs to get the number of events.

Also correct bad event checks in TBL UT.

Fixes #1090

**Testing performed**
Build and run all unit tests

**Expected behavior changes**
UT_CheckEventHistoryFromFunc() works properly now.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Only Unit test is affected, no FSW

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

",CCB:FastTrack,https://github.com/nasa/cFE/pull/1091
Incorrect loop bounds in UT_CheckEventHistoryFromFunc,"**Describe the bug**
Incorrect check for events in Unit test code in `UT_CheckEventHistoryFromFunc()` helper routine.  The event storage is an array of event IDs (`uint16`) but stored in a generic byte buffer.   This forgets to divide the `Position` (which is in bytes) by `sizeof(uint16)` when reading this, so it ends up checking double the number of entries it is supposed to.

After fixing this issue, it also exposes that some tests in TBL unit tests are also broken.

**To Reproduce**
Found by inspection.

**Expected behavior**
Should check the correct number of events.

**Code snips**
Loop at issue is here:
https://github.com/nasa/cFE/blob/1ede295c3874e6571aca965a7850d950cf7aa1a3/fsw/cfe-core/unit-test/ut_support.c#L402-L411

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, unit-test",https://github.com/nasa/cFE/issues/1090
Clean up strncpy use,"**Is your feature request related to a problem? Please describe.**
Still occasionally using hardcoded defines for the character array length.  Better to use sizeof to simplify maintenance.  Also not always setting last character null.

Example:
https://github.com/nasa/cFE/blob/1ede295c3874e6571aca965a7850d950cf7aa1a3/fsw/cfe-core/src/es/cfe_es_api.c#L1710
...
https://github.com/nasa/cFE/blob/1ede295c3874e6571aca965a7850d950cf7aa1a3/fsw/cfe-core/src/es/cfe_es_api.c#L1740-L1741

**Describe the solution you'd like**
Use sizeof.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","bug, refactor",https://github.com/nasa/cFE/issues/1089
cFE Integration candidate: 2021-01-12,"**Describe the contribution**

Fix #1049, replace OS_fsBlocksFree
Fix #1051, use OSAL time conversion/access methods
Fix #1062, remove CFE_SB_TimeOut_t typedef
Fix #260, Remove unused network_includes.h
Fix #1081, Correct deprecation directive typo

**Testing performed**
See <https://github.com/nasa/cFS/pull/174/checks>

**Expected behavior changes**

PR #1050  - Replace `OS_FileSysStatVolume()` with`OS_fsBlocksFree()` which will be deprecated. This call reports the number of total blocks, not just the free blocks, making the check more accurate and removing the need for a workaround for desktop machines.

PR #1058 - Instead of accessing `OS_time_t` values directly, use the OSAL-provided conversion and access methods. This provides independence and abstraction from the specific `OS_time_t` definition and allows OSAL to transition to a 64 bit value.

PR #1063 - Removes the spurious `CFE_SB_TimeOut_t` typedef from `cfe_sb.h`. May affect any apps that inappropriately rely on the private typedef.

PR #1067 - Removes unused `network_includes.h`. Not used by the framework anywhere,  apps should use OSAL Socket APIs instead. 
  
PR #1082 - Fixes deprecation directive typos

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/174/>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@jphickey 
@CDKnightNASA ",,https://github.com/nasa/cFE/pull/1088
Hard Lockup if user attempts to start library via CFE_ES_START_APP_CC ,"**Describe the bug**
A hard lockup occurs if a user attempts to start a library with a stack size of 8192 via the CFE_ES_START_APP_CC command.  The only known recovery is to power cycle the unit.  Worth note, is that this applies only to our SP0 (VxWorks 6.9) and is not repeatable on a Linux system.  

This bug was discovered when testing a CTF script with a copy and paste error in it.  Libraries are not intended to be started via the start app command, but given the severity of the error...I wanted to submit an issue to better understand it.

**To Reproduce**
Steps to reproduce the behavior:
1. Start sample_lib via CFE_ES_START_APP_CC command (Note that stack size must be >= CFE_PLATFORM_ES_DEFAULT_STACK_SIZE in order to produce error) 

**Expected behavior**
No Lockup

**System observed on:**
 - SP0
 - OS: VxWorks 6.9
 - cfe:  v6.7.0+dev295
 - osal: v5.0.0+dev247
 - psp:  v1.4.13.0

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Dan Knutsen
NASA Goddard",bug,https://github.com/nasa/cFE/issues/1087
"Fix #904, Update cpuname targets.cmake documentation","**Describe the contribution**
Fix #904 - update cpuname/MISSION_CPUNAMES documentation

**Testing performed**
None, comment update only

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1086
"Fix #901, Remove UT_CheckForOpenSockets references","**Describe the contribution**
Fix #901 - removes all references to UT_CheckForOpenSockets.  No longer applicable since the UT framework resets the state for each unit test.

**Testing performed**
Built and ran unit tests, passed.

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
See also nasa/osal#753

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1085
"Fix #877, Remove duplicate CFE_MISSION_REV define","**Describe the contribution**
Fix #877 - removed CFE_MISSION_REV from platform config.  Intent of this rev is to track mission cFE FSW mods/customization/code changes not as a more generic ""MISSION"" revision number.

**Testing performed**
Nominal build and run of unit tests

**Expected behavior changes**
None, although if CFE_MISSION_REV was being utilized somewhere and included from cpu1_platform_cfg.h this will break.  Arguably this was broken before removal also since it was a duplicate define...

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1084
"Fix #793, Clarify restart/reload app behavior","**Describe the contribution**
Fix #793 - Clarifies the difference between restart and reload in API/cmd and user's guide documentation

**Testing performed**
None, comments only

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",docs,https://github.com/nasa/cFE/pull/1083
"Fix #1081, Correct deprecation directive typo","**Describe the contribution**
Fix #1081 - fixed 2 deprecation directive typos

**Testing performed**
Standard build and unit test

**Expected behavior changes**
Deprecation of CFE_SB_RcvMsg works correctly (won't show up if CFE_OMIT_DEPRECATED_6_8 is defined)

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this change

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1082
cfe_sb.h -- #if instead of #ifdef CFE_OMIT_DEPRECATED_6_8,"Probable typo?

https://github.com/nasa/cFE/blob/1ede295c3874e6571aca965a7850d950cf7aa1a3/fsw/cfe-core/src/inc/cfe_sb.h#L649",bug,https://github.com/nasa/cFE/issues/1081
Version string not reported correctly,"**Is your feature request related to a problem? Please describe.**
`EVS Port1 66/1/CFE_ES 2: cFS Versions: cfe v6.8.0-rc1+dev236, osal v5.1.0-rc1+dev149, psp v1.5.0-rc146. cFE chksm 52385`

Note missing `+dev` for psp

**Describe the solution you'd like**
add `+dev`

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",invalid,https://github.com/nasa/cFE/issues/1080
CFE SB Pipes not safe across multiple tasks,"**Is your feature request related to a problem? Please describe.**
Some ""worker"" software design patterns involve multiple threads reading from a common/shared work queue.

However due to the way SB buffers are managed, this is not currently possible with CFE child tasks and SB pipes.  The ""current"" (i.e. most recent) buffer is stored in the Pipe descriptor structure, and upon the next entry to `CFE_SB_ReceiveBuffer()` this function assumes that the last buffer stored in the Pipe descriptor can be freed.  But when multiple tasks are reading a single SB pipe, this model breaks, because only one buffer can be remembered.   The current buffer is likely still in use by the other task when the next worker thread calls

This necessitates some new APIs to actually make this work.  Each worker task will need to individually indicate to SB when it is actually done with the buffer, it can't rely on entry to to `CFE_SB_ReceiveBuffer()` to indicate this.

**Describe the solution you'd like**
_Short term fix:_ Just document that only one task may operate on a pipe ID at a given time.  App developers must externally sync their worker tasks to ensure this.

Recommendation would be to have one designated task (i.e. the main task) act as the delegater - it reads the SB pipe, identifies the request, and _copies_ the request data to an available worker thread.  After this it can get a new request from the SB pipe while the worker goes on.

_Longer term fix:_ Expose the SB buffer refcount increment/decrement routines separately in the public API, and decouple the previous buffer refcount decrement from `CFE_SB_ReceiveBuffer()`.  So each worker task can safely get a buffer from SB without inadvertently freeing any previous buffer that may be still in use by other worker tasks.  

However, this is an API change that would affect all apps, as they now must make a new/additional call into CFE_SB when they are finished with a buffer as `CFE_SB_ReceiveBuffer()` cannot not do that automatically.


**Describe alternatives you've considered**
Could feasibly have a task-based buffer record so that each CFE task will have its own ""slot"" so to speak, and thereby CFE_SB_ReceiveBuffer could free the previous buffer _from that task_ rather than having the single buffer associated with the pipe ID.

But this has weakness too- SB has to have a slot for every possible task whether it uses SB pipes or not.  It also means the only way to free your previous buffer is to call CFE_SB_ReceiveBuffer() again and get a new buffer.  So if the work is a long-running job it will ""own"" the buffer the entire time and prevent its re-use (and long-running jobs would likely be the reason for using a worker model in the first place)

**Additional context**
Found when reviewing race conditions in SB as part of #1073.  Supporting multiple threads reading the same pipe might be a nice to have but will have inherent race conditions with the current API design.  So to keep the API design as is for this cycle we will have to restrict this.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1079
CFE_SB_ReceiveBuffer() -- switch timeout to int32,"**Describe the bug**
Per discussion at the Jan. 6, 2020 CCB, @jphickey suggested that the timeout parameter should be int32, not uint32. This should be changed.

See also #1063 

**Reporter Info**
Christopher.D.Knight@nasa.gov",enhancement,https://github.com/nasa/cFE/issues/1078
"Fix #488, Pad msg headers to 64 bit","**Describe the contribution**
Fix #488 - pads headers to 64-bit so that CFE_SB_GetUserData will work for message structures with elements up to 64 bit

**Testing performed**
Added #903 (to catch errors from CFE_SB_GetUserData), built unit tests for both primary only and primary + extended headers, passed.

**Expected behavior changes**
For primary only config - telemetry header required to 64 bit boundary (affects all receivers)
For primary + extended config - command header required padding to 64 bit boundary (affects all senders)

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + #903 (only required for testing) + this commit

**Additional context**
Will require updates in cFS-GroundSystem, both cmdUtil, and cmd/tlm from the GUI

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1077
"Fix #449, Add OS_printf to CFE_ES_SYSLOG_APPEND","**Describe the contribution**
Fix #449 - added OS_printf to CFE_ES_SYSLOG_APPEND so it behaves the same as CFE_ES_WriteToSysLog 

**Testing performed**
Built unit tests and confirmed CFE_ES_SYSLOG_APPEND calls OS_printf (observed outputs)

**Expected behavior changes**
CFE_ES_SYSLOG_APPEND will OS_print the message

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
nasa/osal#747 was submitted to see the OS_print in debug of unit tests

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1076
"Fix #1074, Refactor CFE_TIME_RegisterSynchCallback","**Describe the contribution**
Fix #1074 
- One return point
- Eliminates ""possible uninitialized variable"" static analysis warning

**Testing performed**
Standard build, unit test

**Expected behavior changes**
None except eliminates static analysis warning

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Partially just a conversation starter - do we want to avoid (invalid) warnings w/ similar refactors? Alternatively we could just ignore/repress the warnings.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1075
Avoid multiple returns and possible uninitialized variable warning in CFE_TIME_RegisterSynchCallback,"**Is your feature request related to a problem? Please describe.**
Multiple returns and an (invalid) possible uninitialized variable warning shows up from static analysis:
https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/src/time/cfe_time_api.c#L758-L786

**Describe the solution you'd like**
Refactor for one return and avoid warning.

**Describe alternatives you've considered**
Leave as is (works)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, refactor",https://github.com/nasa/cFE/issues/1074
CFE intermittently showing invalid message ID errors,"**Describe the bug**
When leaving CFE running for long periods of time, I am seeing occasional errors related to bad message IDs/Commands appear.

For instance:
`EVS Port1 66/1/CFE_EVS 5: Invalid command packet, Message ID = 0x00001810`

I was actually able to catch one of these in a core dump, and I can confirm that `SBBufPtr->Msg` looks like a perfectly well-formed message with MsgID of 0x1810.  This particular example was caught at https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/src/evs/cfe_evs_task.c#L378.

```
(gdb) print /x *((CFE_MSG_CommandHeader_t*)SBBufPtr)
$2 = {Msg = {CCSDS = {Pri = {StreamId = {0x18, 0x10}, Sequence = {0xc0, 0x0}, Length = {0x0, 0x1}}}, Byte = {0x18, 0x10, 0xc0, 0x0, 0x0, 0x1}}, Sec = {FunctionCode = 0x0, Checksum = 0x0}}
```

What is particularly mysterious is that 0x1810 is `CFE_TIME_TONE_CMD_MID` ... These MIDs should be delivered only to CFE_TIME - EVS does not subscribe to these - yet for some reason it appears to be delivered to EVS....

**To Reproduce**
Build CFE in default debug config (SIMULATION=native, etc).  Start up CFE core and just let it run.  It may take several hours for the first error to appear.  CFE appears to continue running normally afterwards though.

**Expected behavior**
EVS (or other apps!) should not randomly see messages it didn't subscribe to.

**System observed on:**
Ubuntu 20.04 (native)

**Additional context**
Not sure when this started because everything seems fine when debugging CFE for shorter time periods.   But over the last couple weeks I've noticed these messages randomly appearing in terminal windows where I've started CFE and forgotten about it (overnight or longer).

Although I cite EVS here (because its the one I actually caught in a core file) this phenomenon occurs in other apps too (SB, TIME, etc) all randomly getting a delivered message ID they didn't subscribe to.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1073
"Fix #1070, patch PSP include directory reference","**Describe the contribution**

The PSP header files are located in fsw/shared/inc, not fsw/shared.
This corrects the reference.

Fixes #1070

**Testing performed**
Modify local config to use ""eeprom_stub"" PSP module to implement eeprom functions, which reproduces the build failure - I confirmed the error with respect to `#include ""cfe_psp.h""`

With this patch applied, the build succeeds again.

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This PR is based on Bootes RC2 as the bug exists there, recommend to patch it in prior to final release.
Should also merge this forward to `main` as the bug exists there too and this is the easiest short term fix.
Longer term fix should be #626 to prevent this type of issue from recurring.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:FastTrack, cFS-Bootes, backport",https://github.com/nasa/cFE/pull/1072
Initialize status in CFE_ES_WaitForSystemState,"**Is your feature request related to a problem? Please describe.**
From LGTM: The variable Status may not be initialized here.
https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/src/es/cfe_es_api.c#L640

**Describe the solution you'd like**
Initialize to success

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/1071
add_psp_module cmake include bug,"**Describe the bug**
When making PSP modules and calling `add_psp_module()` from the respective PSP module's CMakeLists.txt file, the necessary includes are not available and the code will fail to compile due to `#include ""cfe_psp_module.h""` not being found. 

**To Reproduce**
Steps to reproduce the behavior:
1. Create a PSP module in psp/modules/<your module>
2. Create a CMakeLists.txt file in psp/modules/<your module> and add line for `add_psp_module(<your module> src/<your module c file>)`. 
2. Make a .c source file in `psp/modules/<your module>` and `#include ""cfe_psp_module.h""` in it.
3. Make sure to include this psp module in target.cmake so it will be built w/ `SET(TGT1_PSP_MODULELIST <your module>)`
4. Build cFS

**Expected behavior**
If you have the proper PSP module boilerplate set up the compile error you should see is that compiler couldn't find `""cfe_psp_module.h""`

**Code snips**
I went ahead and modified cfe/cmake/arch_build.cmake function `add_cfe_module` include_directories line from
`include_directories(${MISSION_SOURCE_DIR}/psp/fsw/shared`
to
`include_directories(${MISSION_SOURCE_DIR}/psp/fsw/shared/inc`

...which fixed the problem.

**System observed on:**
 - Native Linux
 - OS: Ubuntu 18.04
 - Versions [cFE v6.8.0-rc2, OSAL v5.1.0-rc2, PSP v1.5.0-rc1]

**Reporter Info**
Joe Mahoney - LTA Research
","bug, cFS-Bootes, backport",https://github.com/nasa/cFE/issues/1070
Resolve routeid msgid comparison issue reported by LGTM,"**Is your feature request related to a problem? Please describe.**
Comparison between routeidx of type CFE_SB_RouteId_Atom_t and endidx of wider type CFE_SB_MsgId_Atom_t.
This alert was introduced in0c4f5d82 months ago
https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/modules/sbr/src/cfe_sbr_route_unsorted.c#L215

**Describe the solution you'd like**
This was implemented when there were two foreach functions, but foreach msgid was removed due to being a resource hog.  Really don't need a separate helper function anymore and types can be made consistent.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/1069
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns.

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal","docs, security",https://github.com/nasa/cFE/issues/1068
"Fix #260, Remove unused network_includes.h","**Describe the contribution**
Fix #260 - removes network_includes.h (not used anywhere, and apps should use OSAL APIs)

**Testing performed**
Built with file removed (no dependencies)

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1067
cFE Integration Candidate: 2021-01-05,"**Describe the contribution**

Fix #1054, Resolve osal guide generation warnings
Fix #1059, Corrects documentation for CFE_SB_GetPipeName() stub
Fix #1064, Add cppcheck GitHub Actions workflow 

**Testing performed**
Github Actions Run <https://github.com/nasa/cFS/pull/172/checks>

**Expected behavior changes**
PR #1056 - Resolved doxygen warnings osalguide and updated header file references

PR #1060 - Corrects the documentation for the `CFE_SB_GetPipeName()` unit test stub function.

PR #1065 - Adds a new github actions workflow file to run cppcheck

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/172>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@astrogeco 
@CDKnightNASA 
@skliper ",,https://github.com/nasa/cFE/pull/1066
"Fix #1064, Re-add cppcheck automated testing","**Describe the contribution**
Fix #1064

Adds a new github actions workflow file to run cppcheck

**Testing performed**
See action runs in fork: <https://github.com/astrogeco/cFE/actions>

**Expected behavior changes**
Static analysis workflow runs on pull requests and push. 

Workflow saves log file as an artifact for analysis.

**System(s) tested on**
n/a

**Additional context**
n/a

**Third party code**
none",CCB:FastTrack,https://github.com/nasa/cFE/pull/1065
Re-enable static analysis after Travis-CI shutdown,"**Describe the bug**
The Travis CI runner ran cppcheck which we don't have anymore

**To Reproduce**
Submit pull request, notice that Travis CI doesn't run anymore.

**Expected behavior**
A success or failure report of a cppcheck run.

**Code snips**
Check from travis.yml

```
  #cppcheck flight software fsw/cfe-core/src and modules
  - cppcheck --force --inline-suppr --std=c99 --language=c --error-exitcode=1 --enable=warning,performance,portability,style --suppress=variableScope --inconclusive fsw/cfe-core/src modules 2>cppcheck_flight_cfe.txt
  - |
    if [[ -s cppcheck_flight_cfe.txt ]]; then
      echo ""You must fix cppcheck errors before submitting a pull request""
      echo """"
      cat cppcheck_flight_cfe.txt
      exit -1
    fi
```

**System observed on:**
n/a

**Additional context**
Part of ongoing TravisCI to GitHub Actions migration
","bug, continuous-integration",https://github.com/nasa/cFE/issues/1064
fix #1062 - remove CFE_SB_TimeOut_t typedef,"Closes #1062 

**Describe the contribution**
Removes the spurious CFE_SB_TimeOut_t typedef from cfe_sb.h

**Testing performed**
SB unit test

**Expected behavior changes**
None, may affect any apps that rely on the typedef (which they probably haven't done, given that no public API's use it.)

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",,https://github.com/nasa/cFE/pull/1063
CFE_SB_ReceiveBuffer() should use CFE_SB_TimeOut_t for the TimeOut parameter,"In cfe_sb.h...

https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/src/inc/cfe_sb.h#L161

But below, the `CFE_SB_ReceiveBuffer()` takes uint32 for the timeout...

https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/src/inc/cfe_sb.h#L647

Shouldn't it be using the `CFE_SB_TimeOut_t` type instead of uint32 for the TimeOut parameter?",bug,https://github.com/nasa/cFE/issues/1062
fix #1055 - CFE_SB_ReceiveBuffer stub returns timeout or empty if buffer,"Closes #1055

This changes the return value returned by the `CFE_SB_ReceiveBuffer()` stub when there has not been a buffer defined.

**Testing performed**
Tested with SB and SBN unit tests.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov","duplicate, CCB:Ignore, unit-test",https://github.com/nasa/cFE/pull/1061
fix #1059 - corrects documentation for CFE_SB_GetPipeName() stub,"**Describe the contribution**
Closes #1059
This corrects the documentation for the CFE_SB_GetPipeName() unit test stub function.

**Testing performed**
Documentation update only.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov","CCB:FastTrack, docs",https://github.com/nasa/cFE/pull/1060
CFE_SB_GetPipeName stub doc references UT_pipename?,"The documentation for the CFE_SB_GetPipeName stub references setting UT_pipename...which AFAICT is not defined/used. I'm assuming that users should use UT_SetDataBuffer(UT_KEY(CFE_SB_GetPipeName)...).

https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L204","docs, unit-test",https://github.com/nasa/cFE/issues/1059
"Fix #1051, use OSAL time conversion/access methods","**Describe the contribution**

Instead of accessing `OS_time_t` values directly, use the OSAL-provided conversion and access methods.  This provides
independence/abstraction from the specific `OS_time_t definition and allows OSAL to transition to a 64 bit value.

Fixes #1051

**Testing performed**
Build and run unit tests, sanity check CFE

**Expected behavior changes**
None (but see notes)

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 + pc686 (qemu)

**Additional context**
By using the OSAL implementation of subsecond/microsecond conversion, this will correct some minor inaccuracies in the CFE TIME conversions that were never noticed before.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",dependency,https://github.com/nasa/cFE/pull/1058
Add actions in workflow to replace former CI implementation,"**Is your feature request related to a problem? Please describe.**
CI no longer running for PR's in nasa repo

**Describe the solution you'd like**
Implement CI as GitHub Actions

**Describe alternatives you've considered**
None

**Additional context**
Similar to transition in nasa/cFS

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1057
"Fix #1054, Resolve osal guide generation warnings","**Describe the contribution**
Fix #1054 - resolved warnings and updated header file references

**Testing performed**
Built guide (including pdf) and spot-checked resulting document, no warnings generated.

**Expected behavior changes**
GitHub user guide generation action (in nasa/cFS) should now pass

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/1056
return value of CFE_SB_ReceiveBuffer stub does not match documentation,"For the stock stub function, it returns the default (CFE_SUCCESS) return code but sets the message pointer to NULL. The documentation states that it defaults to return the TIMEOUT error. The logic for the stub may want to reflect this.

https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L450","enhancement, docs",https://github.com/nasa/cFE/issues/1055
OSAL guide generation warning,"**Is your feature request related to a problem? Please describe.**
Generated by user's guide action
```
/home/runner/work/cFS/cFS/osal/src/os/inc/osapi-bsp.h:95: warning: end of file while inside a group

/home/runner/work/cFS/cFS/osal/src/os/inc/osapi-idmap.h:274: warning: end of file while inside a group

/home/runner/work/cFS/cFS/cfe/docs/src/osalmain.dox:20: warning: unable to resolve reference to `OSAPISem' for \ref command
/home/runner/work/cFS/cFS/cfe/docs/src/osalmain.dox:21: warning: unable to resolve reference to `OSAPITime' for \ref command
/home/runner/work/cFS/cFS/cfe/docs/src/osalmain.dox:20: warning: unable to resolve reference to `OSAPISem' for \ref command
/home/runner/work/cFS/cFS/cfe/docs/src/osalmain.dox:21: warning: unable to resolve reference to `OSAPITime' for \ref command
Error: Process completed with exit code 255.
```

**Describe the solution you'd like**
Resolve warnings

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, docs",https://github.com/nasa/cFE/issues/1054
"Fix #1052, Refactor UT_ClearForceFail to UT_ClearDefaultReturnValue","**Describe the contribution**
Fixes #1052
Rename UT_ClearForceFail to UT_ClearDefaultValue

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Dependant on nasa/osal#725

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",dependency,https://github.com/nasa/cFE/pull/1053
Change UT_ClearForceFail to UT_ClearDefaultReturnValue,"**Is your feature request related to a problem? Please describe.**
UT_ClearForceFail was refactored to UT_ClearDefaultReturnValue for nasa/osal#724. It needs to have its name changed here as well.

**Additional context**
Part of nasa/osal#724

**Requester Info**
Alex Campbell GSFC","enhancement, refactor",https://github.com/nasa/cFE/issues/1052
Update CFE to use OS time conversion/access methods,"**Is your feature request related to a problem? Please describe.**
CFE is directly accessing specific fields within `OS_time_t` which will break when the struct definition changes.   

**Describe the solution you'd like**
Instead of directly accessing the `seconds` and `microsecs` fields within `OS_time_t`, use the accessor functions to convert/extract the relevant info from  the value instead.

**Additional context**
see nasa/osal#429

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/1051
"Fix #1049, replace OS_fsBlocksFree","**Describe the contribution**
Use `OS_FileSysStatVolume()` instead of `OS_fsBlocksFree()` which will be deprecated in the future.  

This also enables the check to be more appropriate as this call reports the number of total blocks, not just the free blocks, so no workaround for desktop machines is needed.

Fixes #1049

**Testing performed**
Build and run all unit tests
Sanity check CFE

**Expected behavior changes**
No impact to behavior.

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11

**Additional context**
No longer needs a workaround for running on desktop system, since the new API also returns the total blocks, not just free blocks.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",dependency,https://github.com/nasa/cFE/pull/1050
Replace calls to OS_fsBlocksFree,"**Is your feature request related to a problem? Please describe.**
This function is scheduled to be deprecated in nasa/osal#718.  

**Describe the solution you'd like**
It should be replaced with a call to `OS_FileSysStatVolume()` instead.

**Additional context**
Old function has insufficient range as noted in nasa/osal#573.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, deprecate",https://github.com/nasa/cFE/issues/1049
"Fix #1068, Create cFE Security Policy Markdown","**Describe the contribution**
Fix #1068 
Created a draft of a security policy markdown file for cFE. The purpose of a security policy is to inform users on how to submit bugs or vulnerabilities. It is ideal to include a section for supported versions.

**Additional context**
Optional sections that may be included:

- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal","CCB:FastTrack, docs, security",https://github.com/nasa/cFE/pull/1048
cFE Integration candidate: 2020-12-22,"**Describe the contribution**
Combines IC 2020-12-15 and 2020-12-22

Fix #1042, remove use of osapi-os-loader.h

Fix #1034, Atomic type for SystemState

Fix #952, OSAL module flags to permit app reload

Fix #1030, change test_MSG to UT_DisplayPkt 



**Testing performed**
See <https://github.com/nasa/cFS/pull/162/checks>

**Expected behavior changes**

PR #1043 - Remove use of `osapi-os-loader.h` from ES UT.

PR #1035 - Use volatile `sig_atomic_t` for system state to avoid race issue if uint32 isn't atomic on a system 

PR #1038 - Set the flags parameter on the OS_ModuleLoad() properly to allow an app to be properly unloaded, which in turn allows the reload command to work as expected. Fixes problem where unload comand resulted in continuous restarting of the same app code.

PR #1046 - Replaced `Test_MSG_PrintMsg` with `UT_DisplayPkt`. Also removed unused `Test_MSG_Sum`.


**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/162>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@jphickey 
@zanzaben ",,https://github.com/nasa/cFE/pull/1047
fix #1030 change test_MSG to UT_DisplayPkt,"**Describe the contribution**
Fixes #1030
Removed Test_MSG_PrintMsg and and replaced it with UT_DisplayPkt. Also removed Test_MSG_Sum since it was not being used. 

**Testing performed**
Build and run unit test.

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/cFE/pull/1046
cFE Integration Candidate: 2020-12-08,"**Describe the contribution**

Fix #914, Add toolchain file for RTEMS 5.1/pc-rtems
Fix #1009, Refactor message header alignment and ""raw"" types to fit a clear pattern 
Fix #1021, use void* for pool buffer pointers

**Testing performed**
See <https://github.com/nasa/cFS/pull/160/checks>

**Expected behavior changes**

PR #1015 - Adds `CFE_SB_TransmitMsg`, `CFE_SB_TransmitBuffer`, `CFE_SB_ReceiveBuffer`
  - Main change is to utilize `CFE_SB_Buffer_t` and `CFE_MSG_Message_t` in a consistent manner to facilitate alignment
  - Deprecates multiple `CFE_SB_*` items
  - Redefines `CFE_MSG_Size_t` as `size_t` to minimize duplicated work and facilitate transition to `size_t`

PR #1025 - Use a generic void* as the interface type for the pool buffer pointers. This reduces the need for local type casting in the apps and makes it generally easier to use.

PR #1031 - Remove  reference to CEXP in RTEMS 4.11 i686 toolchain. Add an RTEMS 5.1 i686 toolchain file.


**System(s) tested on**
Ubuntu 18.04

**Additional context**
See <https://github.com/nasa/cFS/pull/160>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@acudmore 
@skliper 
@jphickey ",,https://github.com/nasa/cFE/pull/1045
CMake-based source selection for RTEMS toolchain,"Do a CMake-based source selection for

```
 cmake/sample_defs/toolchain-i686-rtems5.cmake
SET(OSAL_SYSTEM_OSTYPE                  rtems)

# This is for RTEMS 5 specific ifdefs needed by the OSAL
ADD_DEFINITIONS(-D_RTEMS_5_)
```

Note that we should only need to set `CFE_SYSTEM_PSPNAME` in the current build scripts. The others are implied. Could simplify here.

```
cmake/sample_defs/toolchain-i686-rtems5.cmake
SET(CFE_SYSTEM_PSPNAME                  pc-rtems)
SET(OSAL_SYSTEM_BSPTYPE                 pc-rtems)
SET(OSAL_SYSTEM_OSTYPE                  rtems)
```




_Originally posted by @jphickey in https://github.com/nasa/cFE/pull/1031#discussion_r534336113_",enhancement,https://github.com/nasa/cFE/issues/1044
"Fix #1042, remove use of osapi-os-loader.h","**Describe the contribution**
Remove use of `osapi-os-loader.h` from ES UT.  This is the only reference to OSAL header other than the standard `osapi.h` and `common_types.h` (which are staying).

Fixes #1042 

**Testing performed**
Build and run unit tests.

**Expected behavior changes**
None.  This header was redundant since it was already including `osapi.h` which has everything.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",dependency,https://github.com/nasa/cFE/pull/1043
Remove use of OSAL internal headers ,"**Is your feature request related to a problem? Please describe.**
Functions should use only `osapi.h` and `common_types.h`.  Other headers are getting refactored in nasa/osal#410.

**Describe the solution you'd like**
Remove direct use of other headers such as `osapi-os-loader.h`

**Additional context**
This is required in order to implement/merge the fix for nasa/osal#410

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test, dependency",https://github.com/nasa/cFE/issues/1042
Relation between cFE requirements and Unit Test implementation,"Hi all!
I have some doubts about how tests are being implemented. In one hand if we look into a UT file, e.g. es_UT.c we can see that all the Tests there make reference to UT_Report as follows (I took one at random):
`UT_Report(__FILE__, __LINE__,
              UT_PrintfIsInHistory(UT_OSP_MESSAGES[UT_OSP_POR_OTHER]),
              ""CFE_ES_SetupResetVariables"",
              ""Other cause reset"");` 
I tried to have a deeper understanding of what is happening there but if I look for ""CFE_ES_SetupResetVariables"" o ""SetupResetVariables"" or similar I am not able to find extra information neither in cFE_FunctionalRequirements.csv nor in requirements.docx. 
I don't know if maybe I am not looking in the correct place or maybe that files are out of date; anyway I would like to know if there is any file where it is explained why to check ""CFE_ES_SetupResetVariables - Other cause reset"" is performed an UT_PrintfIsInHistory(...) instruction is performed and not another one. 

Thanks in advance and stay safe out there ,    

",question,https://github.com/nasa/cFE/issues/1041
Remove references to OS_TaskRegister (non-op),"**Is your feature request related to a problem? Please describe.**
See nasa/osal#255, currently just a non-op for backwards compatibility.

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
nasa/osal#255

**Requester Info**
Jacob Hageman - NASA/GSFC",invalid,https://github.com/nasa/cFE/issues/1040
"Create housekeeping command structure typedefs (consistency, futureproof)","**Is your feature request related to a problem? Please describe.**
CFE_XX_HousekeepingCmd_t doesn't typically exist, just uses CFE_MSG_CommandHeader_t.  More consistent to have a typedef (less future changes if unique elements needed).

**Describe the solution you'd like**
Add housekeeping command typedefs for the services.

**Describe alternatives you've considered**
None.

**Additional context**
https://github.com/nasa/cFE/pull/1015#discussion_r534401433

**Requester Info**
Jacob Hageman - NASA/GSFC from discussion on #1015
",duplicate,https://github.com/nasa/cFE/issues/1039
"Fix #952, OSAL module flags to permit app reload","**Describe the contribution**
Set the flags parameter on the `OS_ModuleLoad()` properly to allow an app to be properly unloaded, which in turn allows the reload command to work as expected.

Fixes #952 

**Testing performed**
Build and run all unit tests
Test CFE app reload procedure:
- Run CFE as normal, confirm unmodified SAMPLE_APP is loaded and running 
- Build a modified SAMPLE_APP that has an additional `OS_printf()` call during startup, and install as `sample_new.so`
- Issue ""reload"" command (7) via cmdUtil, to reload SAMPLE_APP from `/cf/sample_new.so`
- Confirm that the expected printf message is visible (confirms that the new file was actually loaded)

**Expected behavior changes**
Module unload/reload works as expected on Linux.  Previously the unload would not actually unload, so it would end up restarting the same app code over again.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Needs sync delete fix in OSAL (see nasa/osal#642) to avoid task delete race condition.  Without this OSAL change, the task may still be running at the time CFE ES unloads it, which will likely cause a segfault/crash if that happens.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1038
Create `CFE_ES_HousekeepingCmd_t` typedef to maintain app-specific command definitions,"**Is your feature request related to a problem? Please describe.**
As part of the message processing pattern, applications currently define a header file (typically ending in `_msg.h`) that define the structures which serve as I/O message.

Notable exception to this pattern is in the ""send housekeeping"" commands - this has no app-defined type, it directly uses the type provided by the MSG module e.g. `CFE_MSG_CommandHeader_t`.

**Describe the solution you'd like**
For consistency in operation we should really make an equivalent app defined message type (e.g. `CFE_ES_HousekeepingCmd_t`) for this - it can be a simple typedef to `CFE_MSG_CommandHeader_t`.  Having a type for this would maintain the pattern of having a dedicated typedef for each command definition that is locally defined/controlled by the app itself.

**Additional context**
App can still _use_ or depend on types provided by other modules - this is OK - the main thing is that it shouldn't be _assumed_ to do so.  The SEND_HK style commands are unique in that they assume use of a bare `CFE_MSG_CommandHeader_t` for this message.  This is fine but the app should say this somewhere, it shouldn't be assumed.

Having an app fully define its own I/O interface (with no assumptions) is also important if/when transitioning to a data dictionary/EDS type message system.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

_Originally posted by @jphickey in https://github.com/nasa/cFE/pull/1015#discussion_r534401433_",enhancement,https://github.com/nasa/cFE/issues/1037
"Fix 1034, Atomic type for SystemState","**Describe the contribution**
Fix #1034 
- Use volatile sig_atomic_t for system state avoids race issue if uint32 isn't atomic on a system (microcontroller?)

**Testing performed**
Built and ran unit tests, passed.

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/1035
Update cFE Application Developers Guide (2 comments),"**Describe the bug**

The cFE Application Developers Guide section 5.5 references the cFE Deployment Guide.  Please include the deployment guide or remove the reference.

The cFE Application Developers Guide section 4.1.3 states:
""Child Tasks can only execute at a priority equal to or less than the priority of the Application's Main Task."" which several folks have said is not true.  It's not true in CFE 6.6.x.


**Reporter Info**
Dan Berry / NASA GSFC","bug, docs",https://github.com/nasa/cFE/issues/1033
"Update SB ""Send"" command names that write to a file","**Is your feature request related to a problem? Please describe.**
CFE_SB_SendRoutingInfoCmd_t, CFE_SB_SendPipeInfoCmd_t, CFE_SB_SendMapInfoCmd_t and the corresponding command codes actually write to a file.  Send should indicate a request to send information on the software bus.

**Describe the solution you'd like**
Fix names to be consistent
- [x] CFE_SB_SEND_ROUTING_INFO_CC -> CFE_SB_WRITE_ROUTING_INFO_CC
- [x] CFE_SB_SendRoutingInfoCmd_t -> CFE_SB_WriteRoutingInfoCmd_t
- [x] CFE_SB_SendRoutingInfoCmd -> CFE_SB_WriteRoutingInfoCmd
- [x] CFE_SB_SendRtgInfo -> CFE_SB_WriteRtgInfo
- [x] CFE_SB_SEND_PIPE_INFO_CC -> CFE_SB_WRITE_PIPE_INFO_CC
- [x] CFE_SB_SendPipeInfoCmd_t -> CFE_SB_WritePipeInfoCmd_t
- [x] CFE_SB_SendPipeInfoCmd -> CFE_SB_WritePipeInfoCmd
- [x] CFE_SB_SendPipeInfo -> CFE_SB_WritePipeInfo*
- [x] CFE_SB_SEND_MAP_INFO_CC -> CFE_SB_WRITE_MAP_INFO_CC
- [x] CFE_SB_SendMapInfoCmd_t -> CFE_SB_WriteMapInfoCmd_t
- [x] CFE_SB_SendMapInfoCmd -> CFE_SB_WriteMapInfoCmd
- [x] CFE_SB_SendMapInfo -> CFE_SB_WriteMapInfo*
- [ ] Will also need to update comments in #1102

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, refactor",https://github.com/nasa/cFE/issues/1032
"Fix #914, Add toolchain file for RTEMS 5.1/pc-rtems","**Describe the contribution**
Fix #914 
This change makes a minor comment change to the rtems 4.11 i686 toolchain file to remove a reference to CEXP.
The change also adds an RTEMS 5.1 i686 toolchain file.

**Testing performed**
After building the RTEMS 4.11 and RTEMS 5.1 tools and BSPs for the i686, I was able to build the cFS bundle using:
make SIMULATION=i686-rtems-4.11 prep
make install

and

make SIMULATION=i686-rtems-5 prep
make install

and I was able to run the bundle on x86 QEMU according to the instructions in the PSP README.txt file:
https://github.com/nasa/PSP/blob/main/fsw/pc-rtems/README.txt
Note, that PSP ticket 197 and PR 220 have updates to the README.txt files.
Also, this depends on a PR for OSAL (TBD) for issue 608)

**Expected behavior changes**
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: QEMU x86
 - OS: RTEMS
 - Versions: RTEMS 4.11 and RTEMS 5.1

**Additional context**
Requires a fix for OSAL, which is described in OSAL ticket 608. PR will be submitted. But the comment change does not affect current RTEMS 4.11 build.

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Cudmore NASA/GSFC Code 582.0",dependency,https://github.com/nasa/cFE/pull/1031
Remove Test_MSG_PrintMsg in favor of UT_DisplayPkt,"**Is your feature request related to a problem? Please describe.**
Test_MSG_PrintMsg was added with MSG module, but duplicates what UT_DisplayPkt already did.  No need for both.

**Describe the solution you'd like**
Replace Test_MSG_PrintMsg with UT_DisplayPkt and remove.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, unit-test",https://github.com/nasa/cFE/issues/1030
"Remove system log elements from cFE1521, ES: Processor Reset Preservation List requirement","**Description**
Remove System log elements from cES1521 (CFE-183) requirement.  Over-specified, out-of-family, and somewhat redundant with cES1511 requirement to preserve the system log.

cES1521:
Upon a Processor Reset, the cFE shall preserve the following:

- Boot Source
- Reset Type
- Reset Subtype
- Reset Reason
- Number of Processor Resets
- Maximum Processor Resets
- Number of entries in System Log
- Size of System Log
- Number of bytes used in the System Log
","docs, requirements",https://github.com/nasa/cFE/issues/1029
Fix merge conflicts in PR #998 ,"**Describe the contribution**
Took #998 and rebased on top of integration-candidate and attempted to solve merge conflicts

**Testing performed**
Built on docker container. Unit tests pass. 

See https://github.com/astrogeco/cFS/actions for more tests

",invalid,https://github.com/nasa/cFE/pull/1028
cFE Integration Candidate: 2020-11-24,"**Describe the contribution**

Fix #777, Use MSG APIs
Fix #1016, bogus warning in strncpy
Fix #1004, default stack size
Fix #965, remove OSAL ID from App/LibInfo struct
Fix #1023, correct stub appid parameter
Fix #663, More consistent use of datatypes

**Testing performed**
See events for ""github actions test"" at <https://github.com/astrogeco/cFS/actions>

**Expected behavior changes**

PR #1003 - Backward compatible API change. Replace many uses of generic uint16 and uint32 with a more purpose-specific type. Replace all sizes with size_t across the API. 

PR #1007 - Rename `UT_SetForceFail` to `UT_SetDefaultReturnValue` since some functions that retain more than 1 value are not necessarily failing

PR #998 and #1028 - Deprecates many SB Elements and replaces them with the new MSG module. See https://github.com/nasa/cFE/issues/777 for list.

PR #1017 -  App and Lib info telemetry structures no longer contain the `ModuleId` value from OSAL.

PR #1018 - Add an extra write of a null char after `strncpy` which squelches a warning and appease compiler warning logic.

PR #1022 - Uses `CFE_PLATFORM_ES_DEFAULT_STACK_SIZE` as a default instead of a minimum. Affects the Start App command; if stack size is specified as zero, then the default stack size value from platform config is used. Otherwise the value in the command will be passed through and used as-is.

PR #1024 - Changes the type of the AppID parameter on ""Cleanup"" routines from `uint32` to `CFE_ES_ResourceID_t`.

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/158>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@jphickey 
@zanzaben ",,https://github.com/nasa/cFE/pull/1027
UT stubs for CFE_SB_TimeStampMsg and CFE_SB_SetMsgTime very inconsistent,"**Describe the bug**
These two functions do almost the same thing in FSW but the UT stubs have entirely different side effects.  `CFE_SB_TimeStampMsg` stores the Message pointer in a UT buffer, but the `CFE_SB_SetMsgTime` stores the given time in the UT metadata for the message.

**Expected behavior**
These should be more consistent.  The `CFE_SB_TimeStampMsg` should update the metadata like `CFE_SB_SetMsgTime` does because that's what FSW expects.

**System observed on:**
Code Inspection (N/A)

**Additional context**
Noticed this as part of #937 review/discussion.

Probably also impacted by #998 .... perhaps we can just focus on getting stubs for the CFE_MSG module replacements right.

We should get away from storing the message pointer in ANY of these stubs - because it references internal data objects and the life cycle of this object may not be persistent (i.e. it could be on the stack) so storing the pointer passed to any of the SB message functions is probably not a good idea.  The newer method of creating a UT ""metadata"" object associated with the message pointer is better, because it has a lifespan of the unit test case - so guaranteed to be still valid when the function under test returns.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, unit-test",https://github.com/nasa/cFE/issues/1026
"Fix #1021, pool buffer type","**Describe the contribution**

Use a generic `void*` as the interface type for the pool buffer pointers.  This reduces the need for local type casting in the apps and makes it generally easier to use.

Fixes #1021 

**Testing performed**
Build and sanity test CFE
Run all unit tests

**Expected behavior changes**
No impact to behavior. 

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Note that getting a buffer in one step still requires a type cast, as the interface here is really `void**`.  However when putting or querying a buffer no cast is needed.  One can also avoid the need to cast if they get a buffer in two steps (i.e. get as `void*` first, then convert to real type with a simple assignment.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1025
"Fix #1023, correct stub appid parameter","**Describe the contribution**

The type of the AppID parameter on Cleanup routines should be `CFE_ES_ResourceID_t`, not `uint32`

Fixes #1023 

**Testing performed**
Build and run CFE
Run all unit tests

**Expected behavior changes**
None. 

**System(s) tested on**
Ubuntu 20.04

**Additional context**
These two are typedef equivalent in the main branch, so no change, but needed for consistency.  This was missed originally due to PR #1012 not being there yet.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/1024
Type mismatch between Cleanup stub and implementation,"**Describe the bug**
The stub of these functions is declared as taking a `uint32 AppId` parameter:

- [x] CFE_EVS_CleanUpApp
- [x] CFE_SB_CleanUpApp
- [x] CFE_TBL_CleanUpApp
- [x] CFE_TIME_CleanUpApp

**Expected behavior**
These need to be changed to `CFE_ES_ResourceID_t` to match FSW

**System observed on:**
Ubuntu 20.04

**Additional context**
Was not flagged as an error due to `cfe_private.h` not being included.  After PR #1012 got merged, the stub mismatch is flagged.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test",https://github.com/nasa/cFE/issues/1023
"Fix #1004, default stack size","**Describe the contribution**

Do not enforce `CFE_PLATFORM_ES_DEFAULT_STACK_SIZE` as a minimum, it should be a default.

Fixes #1004

**Testing performed**
Build and sanity test CFE.
Run all unit tests.

**Expected behavior changes**
This affects the Start App command.
If stack size is specified as zero, then the default stack size value from platform config is used.  Otherwise the value in the command will be passed through and used as-is.  

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11

**Additional context**
No specific value is enforced at the ES level.  Many RTOS's will implement any stack size requested - so no need for ES to get in the way and put arbitrary restrictions.  Furthermore the value is documented as a default, not a minimum.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

",,https://github.com/nasa/cFE/pull/1022
Pool buffers should not use `uint32*` as interface type,"**Is your feature request related to a problem? Please describe.**
The ES memory pool API uses `uint32*` as a buffer pointer - this is the type used in  `CFE_ES_GetPoolBuf()` and `CFE_ES_PutPoolBuf()` among others.

This presents a few usability problems:

- Most often the data being stored is _not_ actually `uint32` - so it generally needs to be type cast by the user.
- Typecasts are ugly and risky
- Specifically - Typecasts to/from `uint32*` might create a warning about alignment on some platforms  (one direction or the other is likely to be seen as an upgrade in alignment requirement)
- If alignment was the goal, 32 bits is still too low for `double` type, or a 64-bit pointer, so it fails at that job.

**Describe the solution you'd like**
The API should use `void*`.  

**Additional context**
Although this basically turns off type checking, there was no real type checking here to begin with, and pool buffers _intentionally_ should be convertible to any type, so no need for it here anyway.

Using `void*` will clean up the code substantially, allowing a lot of unnecessary type casts to be removed.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, cFE-ES",https://github.com/nasa/cFE/issues/1021
Questionable address adjustment in SB buffers may break alignment requirements,"**Describe the bug**
Software bus message buffers should handle most restrictive alignment requirements for a message.  Address arithmetic used in manipulating buffers may break this alignment on some systems.  Even if not broken, a maintenance issue since an update to `CFE_SB_BufferD_t` could break things unexpectedly.

https://github.com/nasa/cFE/blob/32f3deeebf136ac427a6b779cb9e4854e73826f1/fsw/cfe-core/src/sb/cfe_sb_api.c#L1637-L1641
https://github.com/nasa/cFE/blob/32f3deeebf136ac427a6b779cb9e4854e73826f1/fsw/cfe-core/src/sb/cfe_sb_buf.c#L84-L88
https://github.com/nasa/cFE/blob/32f3deeebf136ac427a6b779cb9e4854e73826f1/fsw/cfe-core/src/sb/cfe_sb_buf.c#L119

**To Reproduce**
Not confirmed, but likely won't meet alignment requirement for a message with long double.

**Expected behavior**
Safer to use the real buffer type (instead of `void *`) in the descriptor along with offsetof to size the buffer correctly (CFE_SB_Msg_t for now, or maybe CFE_SB_Buffer_t from #1019)

**Code snips**
See above

**System observed on:**
NA - inspection

**Additional context**
#1019, #1009 

**Reporter Info**
Jacob Hageman - NASA/GSFC","bug, cFE-SB",https://github.com/nasa/cFE/issues/1020
"Create consistent SB transmit/receive API's, refactored to utilize the zero copy pattern","**Is your feature request related to a problem? Please describe.**
Duplicated logic in CFE_SB_SendMsg and CFE_SB_ZeroCopySend (and related APIs), refactor could simplify CFE_SB_SendMsgFull.  Sending/receiving software bus buffers vs the less restrictive alignment message type is not clear, names don't mirror.

**Describe the solution you'd like**
Implement the following:
- [x] CFE_SB_TransmitMsg - sends the less restrictive alignment message type by coping it into a SB buffer, then transmitting buffer
- [x] CFE_SB_TransmitBuffer - sends a message that is already in a software bus buffer (like CFE_SB_ZeroCopySend)
- [x] CFE_SB_ReceiveBuffer - the old CFE_SB_RcvMsg (it's not a message, it's a buffer)
- [ ] CFE_SB_AllocateBuffer - the old CFE_SB_ZeroCopyGetPtr
- [ ] CFE_SB_ReleaseBuffer - the old CFE_SB_ZeroCopyReleasePtr

Possibly add flag for incrementing sequence count (instead of more API's like CFE_SB_PassMsg).

**Describe alternatives you've considered**
None

**Additional context**
Came from #1009 discussions

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/1019
"Fix #1016, bogus warning in strncpy","**Describe the contribution**

Add an extra write of a null char which squelches a warning.

Fixes #1016

**Testing performed**
Build and sanity check CFE with BUILDTYPE=release on focal

**Expected behavior changes**
None - just avoid extraneous warning

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Buffer was already zero'ed out via previous memset, so this extra zero really has no effect except (possibly) using an extra CPU cycle.  This just appeases some over-zealous compiler warning logic.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/cFE/pull/1018
"Fix #965, remove OSAL ID from App/LibInfo struct","**Describe the contribution**
Removes the Module ID from the App/Lib info telemetry structures.

Fixes #965 

**Testing performed**
Build and sanity test CFE
Run all unit tests

**Expected behavior changes**
App and Lib info telemetry structures no longer contain the ""ModuleId"" value from OSAL.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
CFE code should be distinct about the types used in messages vs. the types used at runtime.  They may need to be different depending on mission architecture (i.e. mixing 32 and 64 bits, different local platform-specific sizes of things, etc).  All message definitions should be in the proper app-specific message typedef files and must have mission scope, not platform scope.

The ""osal_id_t"" type isn't defined in any of the CFE message/interface header files for use within telemetry, but this was included in the AppInfo and LibInfo telemetry structures.

This ID is an ephemeral runtime value and is not relevant to a ground system or anything outside CFE, so it makes most sense to simply remove this ID from the telemetry structure.  Note that all commands are name-based, not ID-based, hence why this ID is not really useful.

The alternative would be to use CFE_ES_ResourceID_t type instead.  This is the same underlying value but defined in ES rather than OSAL, in the typedefs file with all other message types.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",conflicts,https://github.com/nasa/cFE/pull/1017
strncpy triggers a build failure in Ubuntu Focal release builds,"## Describe the issue

`make install` fails on *Focal* RELEASE builds

https://travis-ci.com/github/astrogeco/cFS/builds/201379042

```
In file included from /usr/include/string.h:495,

                 from /home/travis/build/astrogeco/cFS/cfe/fsw/cfe-core/src/es/cfe_es_apps.c:49:

In function ‘strncpy’,

    inlined from ‘CFE_ES_StartAppTask’ at /home/travis/build/astrogeco/cFS/cfe/fsw/cfe-core/src/es/cfe_es_apps.c:554:9:

/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: error: ‘__builtin_strncpy’ output may be truncated copying 19 bytes from a string of length 19 [-Werror=stringop-truncation]

  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));

      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

cc1: all warnings being treated as errors
```
_Originally posted by @astrogeco in https://github.com/nasa/cFS/issues/156#issuecomment-727050481_

## Alternative Solution

Use Ubuntu Bionic for builds instead",bug,https://github.com/nasa/cFE/issues/1016
"Fix# 1009, Apply consistent alignment pattern","**Describe the contribution**
Fix #1009 
Fix #938 - since it deprecates `CFE_SB_SendMsg` and the new stubs are documented correctly
Partially addresses #1019 (adds CFE_SB_TransmitMsg, CFE_SB_TransmitBuffer, CFE_SB_ReceiveBuffer)

 - Main change is to utilize CFE_SB_Buffer_t and CFE_MSG_Message_t in a consistent manner to facilitate alignment
 - Deprecates CFE_SB_SendMsg, CFE_SB_PassMsg, CFE_SB_RcvMsg, CFE_SB_ZeroCopyPass, CFE_SB_ZeroCopySend
 - Deprecates CFE_SB_TlmHdr_t, CFE_SB_CmdHdr_t
 - Deprecates CFE_SB_CMD_HDR_SIZE and CFE_SB_TLM_HDR_SIZE
 - Redefines CFE_MSG_Size_t as size_t to minimize duplicated work and facilitate transition to just size_t

See also details in the individual commits.

Why is this necessary?
  - The former implementation wasn't clear on the use of CFE_SB_Msg_t vs CFE_MSG_Message_t, CFE_SB_TlmHdr_t vs CFE_MSG_TelemetryHeader_t, CFE_SB_CmdHdr_t vs CFE_SB_CommandHeader_t
  - Worst case alignment was enforce at the message level, making it impossible to use the message types in cmds/tlm without impacting the sizes of some of the cmds/tlm (they would get rounded up)
  - Still couldn't cast to a command type that contained anything that required more than 32 bit alignment

Now
  - CFE_SB_Buffer_t is aligned for up to a long double, so now for command processing cast alignment warnings are all resolved
  - Clear use of CFE_SB_Buffer_t and removal of duplicated/confusing terms
  - CFE_MSG_Message_t no longer requires any ""extra"" alignment and is available in the CFE_MSG_TelemetryHeader_t and CFE_MSG_CommandHeader_t structures so no cast is required to use the MSG APIs (just pass in the msg)
  - CFE_MSG_TelemetryHeader_t and CFE_MSG_CommandHeader_t can now be used in the definition of all cmd/tlm structures and avoid casts (no more uint8 header of size *_HDR_SIZE)

**Testing performed**
Bundle passed CI, unit tests pass.

**Expected behavior changes**
None, pattern change.

**System(s) tested on**
 - Hardware: cFS Dev server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + #998, although #1009 is the subject of this PR

**Additional context**
#777, #998 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC

EDIT: Also fixed #911 ","enhancement, Priority: Mission",https://github.com/nasa/cFE/pull/1015
Remove Test_SB_Cmds_SubRptUnexpCmdCode (no longer applicable),"**Is your feature request related to a problem? Please describe.**
Test_SB_Cmds_SubRptUnexpCmdCode seems like it was intended to test the subscription reporting with a command code parameter, but this is a no parameter command.  It's also just a copy of Test_SB_Cmds_UnexpCmdCode so doesn't do anything unique.

**Describe the solution you'd like**
Remove.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, unit-test, removed",https://github.com/nasa/cFE/issues/1014
"Fix #1012, Include cfe_private.h in stubs","**Describe the contribution**
Fix #1012 - added inclusion of cfe_private.h for stubs that implement related elements

**Testing performed**
Built unit test, confirmed expected failure for CFE_ES_RegisterCDSEx (#1010)

**Expected behavior changes**
Avoids future divergence.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Depends on #1011 to pass

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:FastTrack, dependency",https://github.com/nasa/cFE/pull/1013
Include cfe_private.h in stub implementations so they don't diverge,"**Is your feature request related to a problem? Please describe.**
See #1010

**Describe the solution you'd like**
Include the header

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1012
"Fix #1010, CFE_ES_RegisterCDSEx stub update","**Describe the contribution**
Fix #1010 - update CFE_ES_RegisterCDSEx stub to match current signature

**Testing performed**
Built and ran unit tests, all pass

**Expected behavior changes**
None, except stub match.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:FastTrack, dependency",https://github.com/nasa/cFE/pull/1011
CFE_ES_RegisterCDSEx stub mismatch,"**Describe the bug**
Mismatch in CFE_ES_RegisterCDSEx implementation and stub.

**To Reproduce**
Inspection

**Expected behavior**
Matching stub.

**Code snips**
https://github.com/nasa/cFE/blob/9804b59eb34154b10bb2946bde7654f3d27f4b85/fsw/cfe-core/src/es/cfe_es_cds.c#L308
https://github.com/nasa/cFE/blob/9804b59eb34154b10bb2946bde7654f3d27f4b85/fsw/cfe-core/ut-stubs/ut_es_stubs.c#L972-L975

**System observed on:**
NA

**Additional context**
Looks like it was introduced in daf6c04, part of fix #56

**Reporter Info**
Jacob Hageman - NASA/GSFC (from stakeholder email)","bug, Priority: Mission",https://github.com/nasa/cFE/issues/1010
"Refactor message header alignment and ""raw"" types to fit a clear pattern","**Is your feature request related to a problem? Please describe.**
Aligned version of message headers currently in SB, shows different handling of the base type.
https://github.com/nasa/cFE/blob/9804b59eb34154b10bb2946bde7654f3d27f4b85/fsw/cfe-core/src/inc/cfe_sb.h#L150-L163

**Describe the solution you'd like**
See discussion below.

**Describe alternatives you've considered**
None.

**Additional context**
Brought up as part of #777/#998 review.

**Requester Info**
Jacob Hageman - NASA/GSFC (from CCB discussion)","enhancement, breaking",https://github.com/nasa/cFE/issues/1009
Integration Candidate: 2020-11-10,"**Describe the contribution**
Fix #788, Simplified CFE_EVS_SendEvent macros 
Fix #983, Update CFE_MISSION_TIME_DEF_LEAPS to 37 seconds
Fix #973, CFE_MSG_Init clear option removed
Fix #999, Add flags parameter to module load
Fix #1010, CFE_ES_RegisterCDSEx stub update
Fix #1012, Include cfe_private.h in stubs

**Testing performed**
Bundle CI on astrogeco: https://travis-ci.com/github/astrogeco/cFS/builds/201769124

**Expected behavior changes**

PR #867 -  Adds macros for more compact calls to CFE_EVS_SendEvent, making the type be part of the function name.

PR #984 - The sample configs leap seconds default value is now up to date. (As of Oct 2020)

PR #980 - Removed the clear=false logic (and clear parameter) `CFE_MSG_Init()` now always zeroes entire message and sets defaults.

PR #1000 - Adds flags parameter to calls to `OS_ModuleLoad()`. Initially just pass 0 (GLOBAL) to maintain old behavior.

PR #1011 - Updates `CFE_ES_RegisterCDSEx` stub to match current signature

PR #1013 - Includes `cfe_private.h` for stubs that implement related elements.


**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Part of https://github.com/nasa/cFS/pull/156

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper
@zanzaben 
@CDKnightNASA 
@jphickey ",,https://github.com/nasa/cFE/pull/1008
"Fix #1006, Refactor UT_SetForceFail to UT_SetDefaultReturnValue","Describe the contribution
Fixes #1006  by changing UT_SetForceFail to UT_SetDefaultReturnValue

Testing performed
Build and run unit test

Expected behavior changes
No impact to behavior

System(s) tested on
Ubuntu 20.04

Additional context
Dependant on https://github.com/nasa/osal/pull/646

Contributor Info - All information REQUIRED for consideration of pull request
Alex Campbell - NASA/GSFC",dependency,https://github.com/nasa/cFE/pull/1007
Refactor UT_SetForceFail,"Describe the bug
UT_SetForceFail was refactored to UT_SetDefaultReturnValue for https://github.com/nasa/osal/issues/559. It needs to have its name changed here as well.

Expected behavior
Change UT_SetForceFail  to UT_SetDefaultReturnValue 

Additional context
Part of https://github.com/nasa/osal/issues/559

Reporter Info
Alex Campbell","enhancement, dependency",https://github.com/nasa/cFE/issues/1006
cFE_ES Commands that do not increment the Error Counter when an error occurs,"While testing Bootes on VxWorks, I issued the following commands that generated an Error Event but did not increment the ES CMDEC counter: SCX_CPU1_ES_WRITEERLOG2FILE and SCX_CPU1_ES_STOPPERF.

**To Reproduce**
Steps to reproduce the behavior:
1. Issue the command SCX_CPU1_ES_WRITEERLOG2FILE ERLOGFILENAME=""nopathname.log""
2. Error Event ID=56 is generated but the ES.CMDPC is not incremented
3. Issue the SCX_CPU1_ES_STOPPERF DATAFILENAME=""nopathname""
4. Debug EID=60 is generated which makes me think the command was accepted as valid.
5. Also, Error Event ID=67 is generated but again the CMDEC did not increment,

**Expected behavior**
cFE 6.7.0 testing incremented the CMDEC for these 2 cases.

**System observed on:**
 - MCP750 running VxWorks 6.9. cFE Version 6.7.99.0 OSAL 5.0.99.0

Walt Moleski/GSFC 582
[scx_cpu1_es_logging-2020-311-12h27m15s.log](https://github.com/nasa/cFE/files/5501974/scx_cpu1_es_logging-2020-311-12h27m15s.log)

","wontfix, cFS-Bootes, backport",https://github.com/nasa/cFE/issues/1005
"Documentation/usage mismatch in CFE ES ""Start App"" command","**Describe the bug**
The `CFE_PLATFORM_ES_DEFAULT_STACK_SIZE` is documented as being a default stack size, not a minimum stack size.  But the CFE ES ""Start App"" command enforces it as a minimum value here:

https://github.com/nasa/cFE/blob/9804b59eb34154b10bb2946bde7654f3d27f4b85/fsw/cfe-core/src/es/cfe_es_task.c#L900-L906

But this is not in agreement with how it is documented:

https://github.com/nasa/cFE/blob/9804b59eb34154b10bb2946bde7654f3d27f4b85/cmake/sample_defs/cpu1_platform_cfg.h#L1186-L1201

**To Reproduce**
N/A

**Expected behavior**
Should not enforce the default as a minimum.  

I don't see any CFE platform definition for an enforced minimum stack size.  If I remember correctly this was discussed once or twice and the agreement was that this is an operational issue - stack size requirements depend on the app stack usage and the memory constraints of the platform - so CFE cannot (and should not) impose some random limitations on it - it should attempt to do what the user requested.

So recommendation would be to remove this check.
One valid possibility is that if the stack size is specified as 0 (which is definitely not valid), to use the default value instead.

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/1004
"Fix #663, more consistent use of data types","**Describe the contribution**
Define and Use data types more consistently across CFE.

Replace many uses of generic uint16/uint32 with a more purpose-specific typedef. Replace all sizes with `size_t` across the API.

Fixes #663

**Testing performed**
Build and sanity test CFE

**Expected behavior changes**
None, but does affect API.  The API changes should be largely backward compatible, however.

**System(s) tested on**
Ubuntu 20.04, 64-bit

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

EDIT: Also fixed #843",dependency,https://github.com/nasa/cFE/pull/1003
Remove the SB APIs deprecated in #777 and #998,"**Is your feature request related to a problem? Please describe.**
Deprecated code should be removed before major release.

**Describe the solution you'd like**
Remove.  Note the only remaining dependence on SB MetaData is get/set user data size, and preference would be to remove this (and get/set user data size would then act like all the other default stubs).

**Describe alternatives you've considered**
None.

**Additional context**
#777 #998

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/1002
User-friendly memory alignment from CFE_SB_RcvMsg,"**Is your feature request related to a problem? Please describe.**
~Command with 8 byte alignment requires a memcpy by the user (AFAIK).~

EDIT - See below, should already provide sufficient alignment.

**Describe the solution you'd like**
Align the buffer for the user?  Any other options to make this easier?

**Describe alternatives you've considered**
None.

**Additional context**
Stakeholder request/question.

**Requester Info**
Jacob Hageman - NASA/GSFC (from stakeholder)

@excaliburtb",question,https://github.com/nasa/cFE/issues/1001
"Fix #999, Add flags parameter to module load","**Describe the contribution**
Add flags parameter to calls to OS_ModuleLoad().

Initially just pass 0 (GLOBAL) to maintain old behavior.

Fixes #999 

**Testing performed**
Build and sanity test CFE
Run all unit tests.

**Expected behavior changes**
None - the GLOBAL (0) flag should maintain exact same behavior.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Dependency on nasa/osal#643 - needs to be merged simultaneously

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:FastTrack, dependency",https://github.com/nasa/cFE/pull/1000
Pass flags parameter to OS_ModuleLoad(),"**Is your feature request related to a problem? Please describe.**
Change in nasa/osal#643 adds a ""flags"" parameter to OS_ModuleLoad, which needs to be added to CFE where this function is invoked..

**Describe the solution you'd like**
Add ""flags"" parameter.  Initially this can just use the GLOBAL flag (0) to maintain the same behavior.

**Additional context**
Dependency of nasa/osal#643

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/999
Fix #777 deprecate sb,"**Describe the contribution**
Fix #777 - see issue for deprecated elements

**Testing performed**
Built and ran, enabled telemetry, checked noops.  Unit tests built and passed.

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
nasa/cFE#777

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:FastTrack, Priority: Mission, conflicts, CCB:Splinter",https://github.com/nasa/cFE/pull/998
UT_SetDeferredRetcode doesn't work as explained in ut_support.c,"**Describe the bug**
https://github.com/nasa/cFE/blob/e0d1ce883476931c86adc00adac49edea1a30d5a/fsw/cfe-core/unit-test/ut_support.c#L153-L166

Description above makes it sound like calls to CFE_SB_RcvMsg will return: 0, CFE_SB_TIME_OUT, -1.  In practice it returns 0, CFE_SB_TIME_OUT, 0, 0, -1 since each call to UT_SetDeferredRetcode sets up another entry in the table, and each entry is processed until complete before moving on to the next (which restarts the counter).

The osal description is clear, it's just not used correctly in cFE:
https://github.com/nasa/osal/blob/5a8f0afa3a6ef6945661d6fc893d4592d9360b5a/ut_assert/inc/utstubs.h#L120-L139

**To Reproduce**
Set more than one UT_SetDeferredRetcode on the same key, observe response.

**Expected behavior**
Set up so it will do 0, CFE_SB_TIME_OUT, -1:
```
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_RcvMsg), 2, CFE_SB_TIME_OUT);
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_RcvMsg), 1, -1);
```
 
**Code snips**
See above

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions Bundle main

**Additional context**
None.

**Reporter Info**
Jacob Hageman - NASA/GSFC","bug, docs, unit-test",https://github.com/nasa/cFE/issues/997
CFE_PLATFORM_SB_MAX_PIPE_DEPTH reporting and use misleading in relation to OS_MAX_QUEUE_DEPTH,"**Is your feature request related to a problem? Please describe.**
CFE_PLATFORM_SB_MAX_PIPE_DEPTH is reported in CFE_SB.StatTlmMsg.Payload.MaxPipeDepthAllowed, which is not true if it's > OS_MAX_QUEUE_DEPTH.

**Describe the solution you'd like**
Maybe remove as a CFE platform config?  It doesn't size arrays or anything, so it seems arbitrary at the cFE level.  OSAL checks vs OS_MAX_QUEUE_DEPTH.

**Describe alternatives you've considered**
Verify < or = OS_MAX_QUEUE_DEPTH?

**Additional context**
See nasa/osal#235

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/996
Pipename refactor removed it from the send pipe info file dump,"**Describe the bug**
#404 removed pipename from the structure that is written when the send pipe info command is sent.  Need to add this information back in.  Also related to #982.  Likely need to reconsider what is output (memory addresses likely not helpful).

**To Reproduce**
Observe file output from a CFE_SB_SEND_PIPE_INFO_CC command before and after #404 merge.

**Expected behavior**
#404 shouldn't have changed output file.

**Code snips**
https://github.com/nasa/cFE/blob/e0d1ce883476931c86adc00adac49edea1a30d5a/fsw/cfe-core/src/sb/cfe_sb_task.c#L1015-L1029

**System observed on:**
All.

**Additional context**
Observed in build verification test of 6.8

**Reporter Info**
Jacob Hageman - NASA/GSFC

Ping @wmoleski
","bug, wontfix, backport, cFE-SB",https://github.com/nasa/cFE/issues/995
Consider implementing a common task library,"**Is your feature request related to a problem? Please describe.**
There's things we code over and over again, and where we don't follow standard patterns we probably should.

**Describe the solution you'd like**
Create a common set of utilities for a task (aka a task library) that the core services could also use.

Candidates:
- CFE_Task_VerifyCmdLength(MsgPtr, ExpectedLength, ErrorEventId, ErrorCounter)
  - Could also pass in MsgId and FcnCode so they don't need to be looked up twice?  See #1426 
- CFE_Task_ResetAllCounters - see #1427
- CFE_Task_GetAppTaskName - see #1457 for use in API reporting to provide consistent information
- CFE_Task_FormFullName - see #1412 if a common formation pattern is implemented (vs just naming pattern)
- Generic double-linked list support

**Describe alternatives you've considered**
Leave as-is.

**Additional context**
Observed when implementing #777, duplicated code is all over for a few of the standard task elements.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/994
CFE_TIME_ADD_1HZ_ADJUSTMENT_CC and CFE_TIME_SUB_1HZ_ADJUSTMENT_CC commands are not performing as expected,"
**Describe the bug**
Add Delta to Spacecraft Time Correlation Factor each 1Hz and Subtract Delta from Spacecraft Time Correlation Factor commands are modifying STFC seconds as not as required.  

[https://etdjira.gsfc.nasa.gov/browse/CFE-360](url)

TIME: Delta Adjust STCF
Upon receipt of a Command to make a 'continuous' adjustment to the STCF, the cFE shall adjust the STCF each second by the Command-specified value. The commanded value is signed so a positive or negative adjustment may be made.


As example I have attached the print screen with the test #1308_09 results.  

![example](https://user-images.githubusercontent.com/73842748/97896118-a3ca0d00-1d02-11eb-88c1-bca04e9c7f30.JPG)


//*
STCF seconds == 1000000
Given values for the CFE_TIME_ADD_1HZ_ADJUSTMENT_CC and CFE_TIME_SUB_1HZ_ADJUSTMENT_CC  commands are:
Seconds == 0 
Sub-seconds == 2147483648



**Reporter Info**
Anhelina Yurkova
Arctic Slope Technical Services, Inc.
NASA Goddard Space Flight Center

",invalid,https://github.com/nasa/cFE/issues/993
Automatically update leap seconds in sample cmake,"**Is your feature request related to a problem? Please describe.**
Based on #983, it would be useful to set up a github bot to check and update this every six months or so. 

**Describe the solution you'd like**
Automate updating this file.

**Describe alternatives you've considered**
Periodically open an issue when the leap seconds fall out of date.

**Additional context**
Official source of Leap Seconds
https://datacenter.iers.org/data/latestVersion/16_BULLETIN_C16.txt

**Requester Info**
Gerardo E. Cruz-Ortiz
",enhancement,https://github.com/nasa/cFE/issues/992
Integration Candidate: 2020-11-03,"**Describe the contribution**

Fix #909, reorganize ES public API + msg definitions
Fix #966, update padding in CDS registry record
Fix #370, rename MAX CDS name macro to FULL_NAME_LEN
Fix #976, short background task name
Fix #970, strncpy warning
Fix #988, add casts on printf calls

**Testing performed**
See framework-bundle PR: https://github.com/nasa/cFS/pull/154/checks

**Expected behavior changes**

PR #977 - Keeps task names under 16 chars to make more debugger friendly, regardless
of the OSAL limit. Task name shows up as `ES_BG_TASK`

PR #964 
- Move ES typedefs shared across API and telemetry messages into the `cfe_es_extern_typedefs.h`. 
- Move all ES typedefs that define the telemetry interface and structures that define the output of commands that write data files into this group (query all apps, query all tasks, query all CDS). 
- Remove some localized definitions and replace with MISSION scope definitions where appropriate/necessary.

PR #971 - Adjust `strncpy()` call to avoid compiler warning

PR #990 - Cast fixed width types to the type used in the `printf` call. Removes `printf` type warnings on the 32-bit RTEMS build.


**System(s) tested on**
Ubuntu CI

**Additional context**
part of https://github.com/nasa/cFS/pull/154

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",,https://github.com/nasa/cFE/pull/991
"Fix #988, add casts on printf calls","**Describe the contribution**
Cast fixed width types to the type used in the printf call.

Fixes #988 

**Testing performed**
Build and sanity test on RTEMS target

**Expected behavior changes**
No warnings related to printf

**System(s) tested on**
Ubuntu 20.04 host for i686-rtems4.11 target

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/cFE/pull/990
Time not using Critical Data Store,"**Describe the bug**
The following requirements specify that TIME should be using CDS:

cTIME2502
Upon a Processor Reset the cFE shall verify the Critical Data Store used to store time values.

cTIME2501
Upon a Processor Reset the cFE shall acquire the following time elements from the `<MISSION_DEFINED>` Critical Data Store:
- Time Status Data
- STCF
- Leap Seconds 

cTIME2700
During normal operation, the cFE shall preserve the following time elements in the `<MISSION_DEFINED>` Critical Data Store:
- Time Status Data
- STCF
- Leap Seconds
- MET 

cTIME2502.1 
If the critical data store is not valid, all of the time elements shall be initialized in the same fashion as following a power-on reset.

There is no CDS for time – the respective variables are preserved through the Reset Area.  

**Expected behavior**
The requirements or FSW should be updated to reflect intended implementation.

**Reporter Info**
Dan Knutsen
NASA/Goddard",enhancement,https://github.com/nasa/cFE/issues/989
New printf warnings in RTEMS build,"**Describe the bug**
A recent change re-introduced some printf type warnings on the 32-bit RTEMS build

**To Reproduce**
Build for RTEMS i686 target
Warnings are issued:
```
[ 65%] Building C object cfe-core/CMakeFiles/cfe-core.dir/src/sb/cfe_sb_api.c.o
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function 'CFE_SB_SubscribeFull':
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:899:9: error: format '%u' expects argument of type 'unsigned int', but argument 6 has type 'uint32' [-Werror=format=]
         (unsigned int)CFE_SB_MsgIdToValue(MsgId), Collisions);
         ^
cc1: all warnings being treated as errors
```

**Expected behavior**
Should build cleanly

**System observed on:**
Ubuntu 20.04 build host for i686-rtems4.11 target.

**Additional context**
This always happens with fixed width types, needs explicit cast when used with printf.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/988
"Fix #835, build tables for static apps","**Describe the contribution**
Fixup the table build targets so it will be invoked for both static and dynamic apps.  

Improve the prep log messages to indicate the targets that tables will be built for for both static and dynamic apps.

Fixes #835 

**Testing performed**
Locally changed ""sample_app"" to be a static app instead of dynamic app.
Confirmed table file is now correctly built and app runs normally and is able to load the table file.

**Expected behavior changes**
Table works correctly as static app.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/cFE/pull/987
Resolve table services message initialization inconsistencies,"**Is your feature request related to a problem? Please describe.**
Hk and Tbl RegPacket are initialized in both CFE_TBL_EarlyInit and CFE_TBL_InitData (called from CFE_TBL_TaskInit).  The notify message packet is only initialized  in CFE_TBL_SendNotificationMsg, and gets initialized every call.

https://github.com/nasa/cFE/blob/e0d1ce883476931c86adc00adac49edea1a30d5a/fsw/cfe-core/src/tbl/cfe_tbl_internal.c#L142-L154
https://github.com/nasa/cFE/blob/e0d1ce883476931c86adc00adac49edea1a30d5a/fsw/cfe-core/src/tbl/cfe_tbl_internal.c#L1511-L1519
https://github.com/nasa/cFE/blob/e0d1ce883476931c86adc00adac49edea1a30d5a/fsw/cfe-core/src/tbl/cfe_tbl_task.c#L247-L256

The CFE_TBL_SendNotificationMsg could just be initialized once, then SetMsgId and SetFcnCode each time.

**Describe the solution you'd like**
These packets only need to be initialized once.

**Describe alternatives you've considered**
None.

**Additional context**
Observed when working on #777
Additional observation - the notification command gets timestamped, which fails for implementations where there is no time stamp in commands.

**Requester Info**
Jacob Hageman - NASA/GSFC
","bug, cFE-TBL",https://github.com/nasa/cFE/issues/986
Use Resource ID type for SB Pipe ID,"**Is your feature request related to a problem? Please describe.**
The CFE SB pipe ID table is not safe from aliasing or other issues.

**Describe the solution you'd like**
Redefine the CFE_SB_PipeID_t type to be a form of CFE_ES_ResourceID_t like many other resources have already been converted (mem pool handles, CDS blocks, etc).

Re-Use all the same management patterns of this structure.

**Additional context**
The only potential downside is that Resource IDs are defined as 32 bit values but Pipe IDs were only 8 bits.  So this will make `sizeof(CFE_SB_PipeId_t)` into 4 instead of 1.  But as long as apps are properly using the typedef and not assuming `uint8` or otherwise depending on this being a single byte, this shouldn't be noticeable.

This is somewhat related to previous issue #100 - implementing this would be a good step in the right direction for that issue too.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, cFE-SB",https://github.com/nasa/cFE/issues/985
Fix #983 Updated the CFE_MISSION_TIME_DEF_LEAPS to 37 seconds,"**Describe the contribution**
Fixes #983 by updating the sample config to 37

**Testing performed**
Built the sample config then with the ground tools sent CFE_TIME_SEND_DIAGNOSTIC_TLM_CC and verified AtToneLeapSeconds was 37

**Expected behavior changes**
The sample configs leap seconds will be up to date. (As of Oct 2020)

**System(s) tested on**
Ubuntu 18.04.5

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell - NASA/GSFC
",,https://github.com/nasa/cFE/pull/984
Sample Config Leap Seconds needs update,"**Describe the bug**
The sample configuration's CFE_MISSION_TIME_DEF_LEAPS was set to 32 and should currently be 37

**To Reproduce**
Steps to reproduce the behavior:
Visual inspection

**Expected behavior**
CFE_MISSION_TIME_DEF_LEAPS should be 37 

**Code snips**
https://github.com/nasa/cFE/blob/e0d1ce883476931c86adc00adac49edea1a30d5a/cmake/sample_defs/sample_mission_cfg.h#L176

**System observed on:**
N/A 

**Additional context**
#187 

Leap Second History
https://www.nist.gov/pml/time-and-frequency-division/time-services/nist-time-scale-data-archive

**Reporter Info**
Alex Campbell NASA GSFC
",bug,https://github.com/nasa/cFE/issues/983
SB private/internal data structure being written to telemetry dump file,"**Describe the bug**
The `CFE_SB_PipeD_t` structure is defined within `cfe_sb_priv.h` and is internally used to manage the pipe state.

But as part of the ""Send Pipe Info"" command this structure is also directly written to a data dump file - making it effectively into telemetry data.

**Expected behavior**
Code should clearly delineate what is telemetry data intended to be consumed by the ground or other systems, and what is internal data that only resides in local memory.

In particular,  the `CFE_SB_PipeD_t` also contains pointers, so the dump file resulting from a Send Pipe Info command will contain these internal memory address (meaningless outside the current CPU) and it will change size depending on whether it is running on a 32-bit or 64-bit CPU.

**System observed on:**
Ubuntu 20.04

**Additional context**
Whether data is sent directly in a telemetry message in real time or dumped to a file and transferred to the ground system in a deferred fashion, it is all basically telemetry data and the structures used in these data dump files should be defined in consistent (i.e. non platform dependent) terms so the tools on the ground can actually parse the file (or message).

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, cFE-SB",https://github.com/nasa/cFE/issues/982
Update startup processing to optionally use module suffix,"**Is your feature request related to a problem? Please describe.**
Startup scripts currently need to be modified across systems that have different module suffixes.

**Describe the solution you'd like**
#941 makes the module suffix available in software.  If there is no suffix specified in the startup script, append it (backwards compatible).  This would make startup scripts more portable.

**Describe alternatives you've considered**
None

**Additional context**
#583 - table implementation would also benefit from not needing the suffix

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/981
"Fix #973, CFE_MSG_Init clear option removed","**Describe the contribution**
Fix #973 - removed the clear=false logic (and clear parameter)

**Testing performed**
Built and ran test cases with no extended header, extended header with msgid v1, and extended header with msgid v2.  All passed

**Expected behavior changes**
Always zeroes entire message and sets defaults.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/980
Report task details in QUERY_ALL_TASKS command,"**Is your feature request related to a problem? Please describe.**
The current `CFE_ES_TaskInfo` structure, which is written by the QUERY_ALL_TASKS command, only has some very basic task information - the name/ID, execution count, and what app the task is associated with.

**Describe the solution you'd like**
Suggest to also include:
- stack size
- priority
- entry point? (would depend on #978)

**Additional context**
stack size is an important statistic for determining memory usage
priority is potentially important for real time concerns
Both of these are tracked by OSAL and easily available, just have to get it and put it in the structure.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/979
Move entry point address info from app table to task table,"**Is your feature request related to a problem? Please describe.**
The ES global currently tracks task entry point in the app table, not task table.  As a result only the ""main"" task entry point of an app is tracked in this regard.  As child tasks are created, these all have different entry points, but they aren't stored, and therefore cannot be reported in the telemetry as reported via e.g. QUERY_ALL_TASKS.

**Describe the solution you'd like**
Hold the actual runtime entry point address in the Task table rather than the App table.

**Additional context**
This would simplify the current task entry logic as it would only need to look at the task entry, not the app+task entry combination.
Still would need to hang onto the _configured_ (string version) of entry point for when an app is reloaded/restarted.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/978
"Fix #976, short background task name","**Describe the contribution**
Keep names under 16 chars to make more debugger friendly, regardless
of the OSAL limit.

Fixes #976 

**Testing performed**
Run CFE in debugger

**Expected behavior changes**
Confirm task name shows up as ""ES_BG_TASK""
No other impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/cFE/pull/977
Shorter name for ES_BackgroundTask,"**Describe the bug**
With the recent addition of setting the name at the Linux OS kernel in nasa/psp#199, task names are mostly shown in the debugger but not for the ES background task.  This is because the glibc/Linux has a hard limit of 16 characters for this name.  So even though OS_MAX_API_NAME is 20, names need to be less than 16 chars in order to show up properly.

**To Reproduce**
Run CFE in debugger and look at task names - ""ES_BackgroundTask"" does not show up.

**Expected behavior**
Should show the name.

**System observed on:**
Ubuntu 20.04

**Additional context**
Recommend keeping CFE task names to be all less than 16 chars even if OS_MAX_API_NAME is set to a larger limit.  OSAL is fine with longer names, but they just don't show up in the debugger due to the underlying glibc/linux limit.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/976
Integration Candidate 2020-10-27,"**Describe the contribution**
Fix #28
Fix #173
Fix #928
Fix #929
Fix #950

**Testing performed**
See Bundle CI: https://github.com/nasa/cFS/pull/153/checks

**Expected behavior changes**

- PR #960 
  - Provide Library API similar to App API
  - Allows the existing CFE_ES_AppInfo_t structure to be extended to libraries as well as applications by introducing a new value (3) for the Type field.
  - Allows Libraries to be queried via API calls similar to App API.
  - Extends the Query All/Query One commands to operate on Libraries or Applications.
  - Breaks up the monolithic AppCreate and LoadLibrary functions and have these call subroutines that operate on the common components.
  - Fix race conditions in app request processing state machine. 

- PR #947 
   - Adds SBR module which includes message map and routing table. The access APIs are on the SB side which still owns the destination logic
  - removes passing of route index or pointers being. Everything is now based on route and message id 
  - Oversized the hash message map (4x) to minimize collisions
  - added debug event for collisions during add
  - dropped routing push/pop, dropped ""key"" in direct implementation    
  - hash designed for 32 bit, a change in CFE_SB_MsgId_Atom_t size may require implementation updates
  - Deletes unused code CFE_SB_FindGlobalMsgIdCnt
  - Fixes variable declaration violations of coding standard
  - Individual events for deleting destinations when deleting a pipe removed to avoid a race condition
  - around a 10-20% performance hit to hash via rough comparison on a linux box, no memory impact

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Part of <https://github.com/nasa/cFS/pull/153>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper
@jphickey ",,https://github.com/nasa/cFE/pull/975
CFE_FS subsystem has no tracking information,"**Describe the bug**
All the app core modules are tracked by ES, because apps all have an entry in the global app table.  So one can get an ID and all other expected operations such as name/ID lookups work.

However CFE FS subsystem is not an app, it is a library. As a result, it cannot be identified/queried in any way.

**To Reproduce**
Call e.g. `CFE_ES_GetLibIDByName(&LibId, ""CFE_FS"")` and one will get a result of `CFE_ES_ERR_NAME_NOT_FOUND`, even though the CFE_FS subsystem definitely exists.

**Expected behavior**
The FS subsystem should be registered in the global table as a library, so it can be identified and referred to.

**System observed on:**
Ubuntu 20.04

**Additional context**
Noticed this with extended testing of #28 - queries for CFE_ES, CFE_SB, etc all work, but an attempt to query CFS_FS doesn't work, but it probably should.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/974
CFE_MSG_InitMsg does not always set secondary header bit,"**Describe the bug**

The behavior of CFE_MSG_InitMsg seems to be a regression from the old 6.7 CFE_SB_InitMsg, which always set the secondary header flag regardless of the Clear/InitMsg parameter. There's always a CCSDS secondary header, so this bit should always be set.


**To Reproduce**
Call CFE_MSG_InitMsg with the `Clear` parameter set to false

**Expected behavior**
Secondary header flag on message is set to 1 

**Code snips**
https://github.com/nasa/cFE/blob/307725172952e35953f7a2815d664602afcb4709/modules/msg/src/cfe_msg_init.c#L43-L47
CFE_MSG_InitDefaultHdr should always be called. 

**System observed on:**
 - SP0
 - OS: VxWorks
 - Versions: cFE 6.8

**Additional context**
Discovered when SBNg did not properly set the command code due to missing secondary header flag. This was worked around by calling CFE_SB_InitMsg w/ the InitMsg parameter set to true. 


**Reporter Info**
John N Pham, Northrop Grumman","enhancement, Priority: Mission",https://github.com/nasa/cFE/issues/973
Refactor directory structure so it makes sense again (fsw contains non-fsw),"**Is your feature request related to a problem? Please describe.**
fsw is misleading in that it includes unit tests, etc but then there are also fsw implementations within modules...

**Describe the solution you'd like**
Implement a flattened/sensible directory structure.  Needs discussion.

**Describe alternatives you've considered**
- cfe/
  - CMakeLists.txt for the repo
  - fsw/
    - CMakeLists.txt for the fsw
    - sbr/
      - CMakeLists.txt for sbr (and so on for CMake files)
    - msg/
    - core/
      - es/
      - ...
    - public_inc/
  - unit-test/
    - stubs/
    - coverage/
    - functional/
  - eds/
  - docs/
  - ... and so on

**Additional context**
https://github.com/nasa/cFE/pull/947#pullrequestreview-517018628

**Requester Info**
Jacob Hageman - NASA/GSFC

ping @acudmore

EDIT - updated for Gerardo comment",enhancement,https://github.com/nasa/cFE/issues/972
"Fix #970, strncpy warning","**Describe the contribution**

Adjust `strncpy()` call to avoid warning

Fixes #970 


**Testing performed**
Build with `BUILDTYPE=release`, confirm warning is fixed.
Re-Run unit tests (no changes).

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/971
Compiler warning when using optimized/release build,"**Describe the bug**
A compiler warning pops up when enabling full optimizations:

```
In function ‘strncpy’,
    inlined from ‘CFE_ES_ReloadApp’ at /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/es/cfe_es_api.c:259:12:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: error: ‘__builtin_strncpy’ specified bound 64 equals destination size [-Werror=stringop-truncation]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
```

**To Reproduce**
Build with `BUILDTYPE=release` using a recent GCC (e.g. v9.0+) such as the one with Ubuntu 20.04

**Expected behavior**
Should build cleanly

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/970
"Fix #966, update padding in CDS registry struct","**Describe the contribution**
Makes the 3 bytes of padding here explicit rather than implicit.

**Testing performed**
Build and sanity check CFE
Issued CFE_ES_DUMP_CDS_REGISTRY_CC command and ensure it is working as expected

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Additional Context**
Depends on the previous change for #909  ( PR #964 )

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",invalid,https://github.com/nasa/cFE/pull/969
"Fix #967, Update startup script names","**Describe the contribution**

Startup script reflects names fixed in SAMPLE_APP and SAMPLE_LIB.

Fixes #967.

**Testing performed**
Boot CFE and verify startup works correctly with new names.

**Expected behavior changes**
N/A.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Need this at the same time as nasa/sample_app#100 and nasa/sample_lib#34.  Must be merged in same cycle as the those two.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","dependency, breaking",https://github.com/nasa/cFE/pull/968
Update startup script names to match SAMPLE_APP and SAMPLE_LIB,"**Is your feature request related to a problem? Please describe.**
PR's nasa/sample_app#100 and nasa/sample_lib#34 update the function names to use a consistent prefix - `SAMPLE_APP` and `SAMPLE_LIB`, respectively.

The example startup script needs to change accordingly.

**Describe the solution you'd like**
Update entry point names.

**Additional context**
This is needed at the same time if/when the other two PRs are merged.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, breaking",https://github.com/nasa/cFE/issues/967
CFE_ES_CDSRegDumpRec_t has implicit padding,"**Is your feature request related to a problem? Please describe.**
Related to #664 - implicit padding should be avoided

**Describe the solution you'd like**
Eventually pack definitions will come from a common definition, with explicit padding

**Describe alternatives you've considered**
None

**Additional context**
Observed in testing Bootes

**Requester Info**
Jacob Hageman - NASA/GSFC

@wmoleski",enhancement,https://github.com/nasa/cFE/issues/966
Avoid OSAL IDs in messages/data files,"**Is your feature request related to a problem? Please describe.**
OSAL runtime types aren't really defined as part of the external (i.e. mission-scope) interface.  The `osal_id_t` is one such example - it is a local runtime type, not really intended to be saved in data files or command/telemetry messages.

This might seem pedantic because it is simply a `uint32`, but when using CFE with a command/data dictionary tool this becomes apparent that the OSAL types used in telemetry and data files aren't part of the data dictionary.  (OSAL itself doesn't have a cmd/tlm interface so it naturally wouldn't provide any such entity).

**Describe the solution you'd like**
Use the `CFE_ES_ResourceID_t` instead.  Call `CFE_ES_ResourceID_FromOSAL()` when writing and `CFE_ES_ResourceID_ToOSAL()` when reading, to do the type conversion.  The underlying value is compatible (i.e. both 32 bit `uint32`, same numbers) so it should be transparent to external tools.

**Describe alternatives you've considered**
Have OSAL provide a stablized CMD/TLM definition of IDs?  (but CMD/TLM interface is not really part of OSAL's role - it is a runtime library)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/965
"Fix #909, reorganize ES public API + msg definitions","**Describe the contribution**

Put all ES typedefs which are shared across API and telemetry messages into the `cfe_es_extern_typedefs.h` file.

Put all ES typedefs which define the telemetry interface into the `cfe_es_msg.h` file.  Also include structures which define the output of commands that write data files into this group (query all apps, query all tasks, query all CDS).

Removes some localized definitions and replace with MISSION scope definitions where appropriate/necessary.

Fixes #909 

**Testing performed**
Build and sanity check CFE
Run all unit tests

**Expected behavior changes**
No impact to behavior
(Should not change any binary formats)

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/964
Remove CFE_SB_SendPrevSubs  in favor of CFE_SBR_ForEachRouteId API,"**Is your feature request related to a problem? Please describe.**
CFE_SB_SendPrevSubs holds locks that aren't that useful, sufficient logic required, creates bus traffic, etc.

**Describe the solution you'd like**
SBN could just use CFE_SBR_ForEachRouteId, not really a true ""public"" API... but seems like fair use in this case.  Would be outside of SB lock, but likely OK based on design (enables subscription reporting first, then check all previous subs).

**Describe alternatives you've considered**
At least remove all the locking/unlocking.  It doesn't help.

**Additional context**
Related to #947 work.

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping @CDKnightNASA ",enhancement,https://github.com/nasa/cFE/issues/963
Add stubs for software bus routing module APIs and update SB unit tests,"**Is your feature request related to a problem? Please describe.**
Stubs not implemented yet, directly linking module to SB for first stage of testing.

**Describe the solution you'd like**
Add stubs, update SB to use them

**Describe alternatives you've considered**
None.

**Additional context**
#947

**Requester Info**
Jacob Hageman - NASA/GSFC
","duplicate, unit-test",https://github.com/nasa/cFE/issues/962
Update documentation for message map hash implementation,"**Is your feature request related to a problem? Please describe.**
See https://github.com/nasa/cFE/pull/947#issuecomment-713717828

```
Conversation about collisions. System can be sized appropriately to avoid collisions. Users can deterministically predict the bound by appropriately choosing the MsgIDs. There's a debug event upon subscription which alerts about collisions.

Open issue to add documentation about ideal usage and predetermining IDs to avoid collisions.

Because it's a module, users can replace the algorithm for efficient. QUESTION: How is this set up in the build system?
```

**Describe the solution you'd like**
Add this info and general design to documentation

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",docs,https://github.com/nasa/cFE/issues/961
"Fix #28, provide library API","**Describe the contribution**

Fixes #28 
Provide Library API similar to App API

Allows the existing `CFE_ES_AppInfo_t` structure to be extended to libraries as well as applications by introducing a new value (3)
for the Type field.

Allows Libraries to be queried via API calls similar to App API.

Also extends the Query All/Query One commands to operate on Libraries or Applications.

Fixes #173 
Break up the monolithic AppCreate and LoadLibrary functions and have these call subroutines that operate on the common components.

Fixes #950 
Fix race conditions in app request processing state machine.

**Testing performed**
Build and sanity check operation of CFE
Confirm able to restart/reload sample_app via command as expected
Run all unit tests

**Expected behavior changes**
Adds Library API.
Query commands that previously worked only on Apps can now be used on Apps or Libs

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/960
Integration Candidate: 2020-10-20,"**Describe the contribution**
Fix #943 
Fix #924
Fix #502 

**Testing performed**
Bundle CI: https://github.com/nasa/cFS/pull/152/checks

**Expected behavior changes**
PR #946 

**System(s) tested on**
Ubuntu

**Additional context**
Part of <https://github.com/nasa/cFS/pull/152>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey ",,https://github.com/nasa/cFE/pull/959
Potential for missed log messages between dump + clear commands,"**Describe the bug**
This issue was initially described in #956 but isolated to a separate ticket for discussion/triage.

The ES syslog ""dump"" and ""clear"" are separate commands, so there is a window of opportunity between these actions where messages can be lost - as it is not possible to guarantee that no additional messages were written during this time.

**To Reproduce**
1. Log messages are written
2. Dump command issued
3. More log messages are written
4. Clear command issued.

Logs written in (3) above are lost, as they are not in the dump file but they will be cleared by the clear command.

**Expected behavior**
Should have command structure which can ensure that no messages get lost.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc., generalized from comment at https://github.com/nasa/cFE/issues/956#issuecomment-712995842


",bug,https://github.com/nasa/cFE/issues/958
Add in incremental read routine and unit test. Ref #nasa/cFE/issues/956,"See issue https://github.com/nasa/cFE/issues/956. This is an implementation with unit-test code added.
",CCB:Ignore,https://github.com/nasa/cFE/pull/957
SysLog Support for Incremental Reads,"The concept is to use logs for forensic analysis, so yes as debug, but not as an exception more as always there. Problem is, by the time you know you want a log it will be gone if you don’t get it to a persistent, accessible storage place.

Algorithm I’m trying to support is:
On Timer:
-	Extract un-read logs
-	If enough logs have been extracted, package and send

The current API supports reading all the logs in the buffer at once and then clearing the logs (with the race condition that any logs that occur during the reading out will be lost, OR need to lock out all loggers during the read which is not acceptable).

The proposed update to the API is the addition of a single function that instead of setting the Buffer size based of EndIdx, sets the Buffer size based on the difference between the Buffer->LastOffset passed in and the writeIdx. This is a traditional circular buffer interface and is well supported within the code as it stands, just needs an API to initialize the Buffer correctly.

Advantages are:
-	Traditional circular buffer interface so supports a well established model
-	Allows readings of logs without loss of logs or undesirable locking
-	No impact to current code, so introduces no risk to current systems

",enhancement,https://github.com/nasa/cFE/issues/956
UT checking calls to OS_printf,"**Is your feature request related to a problem? Please describe.**
Many unit tests are checking the calls to `OS_printf()`.  But typically all syslog/printf type messages are not fulfilling any sort of requirements, they are just informational in nature.  

So AFAIK there isn't really a strong justification to specifically check for certain syslog messages, but the fact that the UT does check for these means that any time the syslog messages are changed or refactored in any way, one gets a bunch of nuisance UT failures.  As a result we spend a lot of time fixing UT tests for things that aren't really relevant to the operation of the code.

**Describe the solution you'd like**
At least remove checks for number of times `OS_printf()` was called in a given path.  This is really quite irrelevant to pass/fail. 

The `UT_PrintfIsInHistory` tests might be OK to keep, but an actual return code should be preferred.  If there is no return code then this is probably OK - its also less volatile because it just checks format string and confirms that a specific path was taken.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, good first issue, unit-test",https://github.com/nasa/cFE/issues/955
EVS coverage test fails when CFE_PLATFORM_EVS_DEFAULT_TYPE_FLAG is set to 0xF,"**Describe the bug**
When CFE_PLATFORM_EVS_DEFAULT_TYPE_FLAG is set to 0xF there are two failures:
```
[ FAIL] 14.001 evs_UT.c:2675 - CFE_EVS_WriteLogDataFileCmd - Write log data - successful
[ FAIL] 14.002 evs_UT.c:2685 - CFE_EVS_SetLogModeCmd - Set logging mode - successful
```

**To Reproduce**
Steps to reproduce the behavior:
1. Set CFE_PLATFORM_EVS_DEFAULT_TYPE_FLAG to 0xF
2. Build unit tests, run cfe-core_evs_UT, observe failure

**Expected behavior**
Test should pass with debug events enabled (shouldn't care).

**Code snips**
https://github.com/nasa/cFE/blob/dc3d62b37d2bacd8fe23f66ff7b64025ac7d0751/fsw/cfe-core/unit-test/evs_UT.c#L2670-L2688

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: 6.8.0-rc1+dev129

**Additional context**
N/A

**Reporter Info**
Jacob Hageman - NASA/GSFC
","bug, unit-test",https://github.com/nasa/cFE/issues/954
Convert software bus destination linked list to circular,"**Is your feature request related to a problem? Please describe.**
Linear linked list requires more logic at insertion/removal

**Describe the solution you'd like**
Convert to circular

**Describe alternatives you've considered**
None

**Additional context**
https://github.com/nasa/cFE/pull/947#discussion_r504896779

**Requester Info**
Jacob Hageman - NASA/GSFC (spawned from discussion on #947)
",enhancement,https://github.com/nasa/cFE/issues/953
Race condition in control requests,"**Describe the bug**
Due to the order of operations in clean up, the ES global lock is given up and then re-acquired:

https://github.com/nasa/cFE/blob/dc3d62b37d2bacd8fe23f66ff7b64025ac7d0751/fsw/cfe-core/src/es/cfe_es_apps.c#L859-L861

The problem is that this provides a window of opportunity for the underlying state to change externally while the global data is unlocked.

**To Reproduce**
This can happen, for instance, if the task that is being cleaned up calls `CFE_ES_ExitApp()` while this state machine is also cleaning up the app.  
This actually does happen because `CFE_ES_RunLoop()` will return false if there is an exit request pending.  It is just masked by the fact that most apps are pending in a message receive queue, so they don't self exit - they are deleted by ES instead.

I was able to get CFE to segfault/crash by allowing SAMPLE_APP to exit itself at the very same time that this state machine was also cleaning it up.

**Expected behavior**
No crashes, proper clean up.

**System observed on:**
Ubuntu 20.04

**Additional context**
Due to the ~5 second exit/cleanup delay it is unlikely to occur ""in the wild"" but it can easily be forced to happen.  In my test I just used a slightly modified `sample_app` that doesn't pend forever on `CFE_SB_RcvMsg`, and also delays itself such that it self-exits at the exact same time that the ES background job is running, which reliably segfaults every time.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/950
Use memchr() for string length checks,"**Is your feature request related to a problem? Please describe.**
String length verification checks are generally done via the `strlen()` C library API.  The potential issue here is that `strlen` requires/assumes a termination byte to be present.  If the user mistakenly passes an unterminated string, the implementation will search sequentially in memory beyond the string (i.e. forever) until it either encounters a NUL char somewhere in memory, or segfaults, whatever comes first.

**Describe the solution you'd like**
Use `memchr()` for string length check instead, which can specifically check for a NUL char within a certain length.  For instance, instead of:

```
if (strlen(string) >=  MAX_LENGTH)
{
   /* string too long.... */
}
```

use:

```
if (memchr(string, 0, MAX_LENGTH) == NULL)
{
   /* string too long.... */
}
```

This has the advantage that it will _not_ search beyond the specified `MAX_LENGTH`, so its a bit safer.  It's also a more direct check - the code generally doesn't care what the actual string length is, it just needs to know if its within MAX_LENGTH or not.

**Describe alternatives you've considered**
Leave as is.

**Additional context**
This is a minor thing, but would improve robustness a bit.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/949
Eliminating recursive locks in SB could allow for using more efficient resource,"**Describe the request**
Recursive locks possible in the following code (may also be in other locations):

https://github.com/nasa/cFE/blob/dc3d62b37d2bacd8fe23f66ff7b64025ac7d0751/fsw/cfe-core/src/sb/cfe_sb_api.c#L1110-L1113
https://github.com/nasa/cFE/blob/dc3d62b37d2bacd8fe23f66ff7b64025ac7d0751/fsw/cfe-core/src/sb/cfe_sb_api.c#L1121-L1124
https://github.com/nasa/cFE/blob/dc3d62b37d2bacd8fe23f66ff7b64025ac7d0751/fsw/cfe-core/src/sb/cfe_sb_task.c#L1172-L1173
https://github.com/nasa/cFE/blob/dc3d62b37d2bacd8fe23f66ff7b64025ac7d0751/fsw/cfe-core/src/sb/cfe_sb_task.c#L1200-L1201

Related - the locking in the SendPrevSubs command handling doesn't look like it really helps since it has to unlock to send the message (same issues as the commands to record route/map info to file), typical use case is to enable subscription reporting, then send all previous subscriptions so may make sense to refactor (and possibly throttle).

**To Reproduce**
Clear filters on the debug messages and trigger (I stopped SAMPLE_APP to cause the pipe deletion), or just subscribe and unsubscribe twice to trigger CFE_SB_UNSUB_NO_SUBS_EID.

**Expected behavior**
Avoiding recursive lock could allow for using a more efficient resource on platforms where it's supported.

**Code snips**
See above.

**System observed on:**
From code analysis, tested on Ubuntu 18.04.

**Additional context**
From analysis during #928 and #947 

**Reporter Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/948
"Fix #928 and #929 - Modularize software bus routing, add msg map hash","**Describe the contribution**
Fix #928 - refactor SB and move routing to a module
Fix #929 - adds message map hash implementation
Partial #948 - fixed double lock potential

Key concepts:
 - added SBR module
 - Message map and routing table are in SBR, access APIs on SB side
 - SB still owns destination logic
 - no more route index or pointers being passed around, all route id and message id based
 - hash message map ""oversized"" (4x) to minimize collisions (only ~10% single collisions on the real system with a full routing table)
    - added debug event for collisions during add
 - dropped routing push/pop, dropped ""key"" in direct implementation
 - around a 10-20% performance hit to hash via rough comparison on a linux box, no memory impact from message id ""space"", just based on needed routes (with overhead)
 - hash designed for 32 bit, a change in CFE_SB_MsgId_Atom_t size may require implementation updates

Remaining work:
- Unit test stubs (could split into new PR), 2 related TODOs in code

Also 
- Deletes unused code CFE_SB_FindGlobalMsgIdCnt
- Note writes to file not protected by lock (before or after refactor)
- CFE_SB_SendPrevSubs isn't really protected by the lock... might be worth removing the locks completely (they don't really solve anything, double lock potential eliminated
  - could just use the private CFE_SBR_ForEachRouteId without a lock instead of messages and reduce all the extra logic
- Whitespace/alignment is very difficult to work with
- Excessive comments (in my opinion)
- violates declare variables at the start of function coding standard, all observed violations fixed

**Testing performed**
 - All unit tests pass, rough performance testing, spot checked routing table size impacts on core with nominal (256), 64, and 32.  32 causes dropped subscriptions/full table and was useful for observing collisions (~10% one level seen) on a realistic set of message ids.  Everything performed as expected. 
- Passed bundle CI at https://travis-ci.com/github/skliper/cFS/builds/191437587

**Expected behavior changes**
- Individual events for deleting destinations when deleting a pipe removed to avoid a race condition
- It's resource intensive to try to report message ID map in message ID order (either search or brute force) for any significantly sized map on an unsorted routing table, allowing out of order makes this reasonable again and gets rid of the need for ForEachMsgId API. Need to trade out of order vs implementing a search.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/947
"Fix #943, #924 and #502, improve resource ID management","**Describe the contribution**

Fixes #924 
Fixes #943 
Fixes #502

Provides a consistent Name-ID translation API for all resource types.  Enforces consistent argument/name validation on all resource types, and also enforces name uniqueness where relevant.

Also includes an enhancement to use the full 16 bits of resource ID space, which avoids repeating ID values that have already been used.  This significantly decreases the likelihood that a previously deleted ID will alias a newly allocated/valid ID.

**Testing performed**
Build and sanity test CFE
Ensure all unit tests pass
ALSO - run a continuous loop of ""Restart"" commands, to continually restart the SAMPLE_APP.  Confirmed that after each restart, the app is assigned a new id, different than the old ID, and never aliases any other valid IDs.

**Expected behavior changes**
- Complete/consistent API to translate between names and IDs, for all resource types which have a name
- IDs are not re-issued after deletion, helping ensure safety as previously deleted IDs will not validate.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
These two fixes are combined into a single PR as they have dependencies (would be a merge conflict if pulled separately)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/946
CFE_PLATFORM_ES_PERF_MAX_IDS not fully deprecated,"**Describe the bug**
CFE_PLATFORM_ES_PERF_MAX_IDS was superseded by CFE_MISSION_ES_PERF_MAX_IDS as noted in this comment: https://github.com/nasa/cFE/search?q=CFE_PLATFORM_ES_PERF_MAX_IDS. However, sample cpu1_platform_cfg.h still contains the definition for CFE_PLATFORM_ES_PERF_MAX_IDS is still referenced in es_UT.c and comments in cfe_es_events.h and sample_perfids.h

**To Reproduce**
N/A

**Expected behavior**
Either CFE_PLATFORM_ES_PERF_MAX_IDS should be totally deprecated and all references should be replaced by CFE_MISSION_ES_PERF_MAX_IDS or (if deemed necessary) support for platform-specific max values should be re-added in the perf-log implementation.

**Code snips**
cfe/cmake/sample_defs/cpu1_platform_cfg.h:1978
cfe/fsw/cfe-core/src/inc/cfe_es_events.h:1046
cfe/fsw/cfe-core/unit-test/es_UT.c:3664

**System observed on:**
N/A

**Additional context**
N/A

**Reporter Info**
PJ Chapates Gateway Vehicle System Manager FSW Production, JSC
","bug, refactor",https://github.com/nasa/cFE/issues/945
Integration Candidate 2020-10-13,"**Describe the contribution**
Fix #56
Fix #940

**Testing performed**
See Bundle PR - https://github.com/nasa/cFS/pull/147/checks

**Expected behavior changes**

PR #939 - Rather than having a second pool implementation only for CDS, use the generic pool implementation. This also uses the abstract resource identifiers to identify CDS blocks, rather than a direct reference.

PR #941 - Add the system-specific module suffix (.o, .so, .obj, etc) and the default CFE core executable name to the configdata structure.

**System(s) tested on**
Ubuntu CI

**Additional context**
Part of https://github.com/nasa/cFS/pull/147

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey ",,https://github.com/nasa/cFE/pull/944
Requirement cES1008 Failure,"**Describe the bug**
Requirement cES1008 specifies:  Upon receipt of a Command the cFE shall Reload the Command specified cFE Application from the Command specified cFE Application file.

This is not consistent with how the FSW works.  If a reload command is received, the FSW will restart the Application with the previously loaded version as long as the command specified cFE Application file exists.  The same result is seen if an App is started/stopped - then loaded/started with a new version.  The system/event log entries will indicate that the loading/starting of the new version of the App is successful...however the original version of the App will be the one that will actually be executed.   

**To Reproduce**
Steps to reproduce the behavior:
1. Start an App
2. Send the reload command with a filename that contains a different version of the App (App name must remain constant)
3. Verify that the original version of the App was actually the one started.

Alternatively:
1. Start an App
2. Stop the App
3. Start a different version of the same App (App name must remain constant)
4. Verify that the original version of the App was actually the one started.

**Expected behavior**
Able to restart a task of the the same name.

**Code snips**
If applicable, add references to the software.

**System observed on:**
OS: ubuntu-19.10
Versions:  cfe:  v6.7.0+dev295; osal: v5.0.0+dev247; psp:  v1.4.14.0

**Reporter Info**
Dan Knutsen
","bug, requirements",https://github.com/nasa/cFE/issues/952
Provide consistent name lookup API,"**Is your feature request related to a problem? Please describe.**
Many CFE resources have a name associated with them, but CFE is rather hit or miss on how Resource IDs (apps, tasks, libs, etc) can be looked up by name.

For instance, `CFE_ES_GetAppIDByName()` exists, but `CFE_ES_GetLibIDByName()` does not.  Task IDs can be found directly via OSAL through `OS_TaskGetIdByName()` but there is no CFE version of this despite the fact that ES also tracks tasks.

**Describe the solution you'd like**
For resource types that have names associated, there should be a consistent API to find the ID by name, similar to `CFE_ES_GetAppIDByName()`.  The following should be implemented, all with the general API pattern (name in, ID out, status return):

    CFE_ES_GetTaskIDByName()
    CFE_ES_GetLibIDByName()
    CFE_ES_GetGenCounterIDByName()
    CFE_ES_GetCDSBlockIDByName()


**Describe alternatives you've considered**
Keep things inconsistent.

**Additional context**
This is also a prerequisite to #28 - to have libs be manageable similarly to apps, part of that is being able to find lib ID by name, which is required by several management/query commands.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

Edit - turns out and `CFE_ES_GetGenCounterIDByName()` does exist already.  But the others do not.",enhancement,https://github.com/nasa/cFE/issues/943
cTBL6000.1 requirement failure - no partial table load field in header,"Current requirement verbiage: If the Command specified file's header indicates that the file contains only a portion of the Table, the cFE shall first load an Inactive Table Image with the contents of the Active Table Image and then load the contents of the Command specified File.

There is no field in the header that specifies if a table is a partial load.  The software detects the partial load and handles it appropriately. 

**Describe the solution you'd like**
We should update the verbiage or consider combining with cFE-304 (cTBL6000.4).

**Requester Info**
Dan Knutsen
NASA/Goddard
","docs, requirements",https://github.com/nasa/cFE/issues/942
"Fix #940, Add module suffix and core name to configdata","**Describe the contribution**
Add the system-specific module suffix (.o, .so, .obj, etc) and the default CFE core executable name to the configdata structure.

This information has several useful purposes.

Fixes #940, but related to previous issues #611 and nasa/psp#111

**Testing performed**
Build and sanity check CFE on native/pc-linux, RTEMS 4.11, and VxWorks 6.9
Confirm using inspection of command line that the correct data is used for the new fields.

On linux:

    -DCFE_DEFAULT_CORE_FILENAME=\""core-cpu1\"" -DCFE_DEFAULT_MODULE_EXTENSION=\"".so\""

On RTEMS:

    -DCFE_DEFAULT_CORE_FILENAME=\""core-cpu1.exe\"" -DCFE_DEFAULT_MODULE_EXTENSION=\"".obj\""

On VxWorks:

    -DCFE_DEFAULT_CORE_FILENAME=\""core-cpu1.exe\"" -DCFE_DEFAULT_MODULE_EXTENSION=\"".o\""

Nothing uses this data at runtime (yet) but I also confirmed with GDB that the ""GLOBAL_CONFIGDATA"" indeed has the correct info.

**Expected behavior changes**
None.  Just making new information available.

**System(s) tested on**
Ubuntu 20.04 (native), RTEMS 4.11, VxWorks 6.9

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/cFE/pull/941
Add system-specific module and library suffixes to configdata struct,"**Is your feature request related to a problem? Please describe.**
There are a number of use cases where the FSW could be improved if it knows the proper system-specific extension to use for modules and executable files.

See existing issues #611 and nasa/PSP#111 

**Describe the solution you'd like**
Should add this information to the `GLOBAL_CONFIGDATA` structure, to make it available for PSP/CFE purposes.

**Describe alternatives you've considered**
Could also be provided in the `GLOBAL_PSP_CONFIGDATA` structure that resides in the PSP library, but this would require explicitly setting in each PSP.  

Because CMake already knows this information and its readily available in CMake variables, its simpler and probably more reliable to just put it in the top level config struct based on the CMake value.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc., (based off previous requests in other tickets)
","enhancement, build-system",https://github.com/nasa/cFE/issues/940
"Fix #56, Refactor CDS to use generic pool implementation","**Describe the contribution**

Rather than having a second pool implementation only for CDS, use the generic pool implementation.  This also uses the abstract resource identifiers to identify CDS blocks, rather than a direct reference.

Fixes #56 

**Testing performed**
Build and sanity test CFE
Confirm all unit tests working
Also tested/Confirmed that the CFE TBL critical table registry is correctly restored when booting in a processor reset mode.  In this case the data is successfully restored from CDS.

**Expected behavior changes**
No impact to behavior.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This consolidates and simplifies a bunch of code in the CDS access area.
Note that previously there was a separate mutex for the CDS pool and CDS registry.  However almost all accesses needed both, because pool access and registry access go together.  So this is simplified to one mutex now.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/939
Doxygen description of stub for CFE_SB_SendMsg is not correct,"**Describe the bug**
Description on the stub for CFE_SB_SendMsg is out of date.

**Expected behavior**
Update description

**Code snips**
https://github.com/nasa/cFE/blob/8a7dc8f2e434889287973c41d4a5cb4a48f48b44/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L453-L462

**Reporter Info**
Alan Gibson  NASA GSFC/587
","docs, unit-test",https://github.com/nasa/cFE/issues/938
Stub for CFE_SB_SendMsg does not always save MsgPtr argument value,"**Describe the bug**
If a negative value is set for the return from CFE_SB_SendMsg stub the MsgPtr argument is not saved to the context.  The passed in message cannot be verified for forced negative results.  

**To Reproduce**
Steps to reproduce the behavior:
1. Write a test giving CFE_SB_SendMsg a context and that forces CFE_SB_SendMsg to return a negative value
2. Check that the context contains the expected pointer - FAIL
3. Change the return value to >=0
4. Check that the context contains the expected pointer - PASS

**Expected behavior**
No matter the forced return value the MsgPtr should be copied to the context.  The check for status >= 0 appears to be leftover from the previous use of:
```
    if (status >= 0)
    {
        UT_Stub_CopyFromLocal(UT_KEY(CFE_SB_SendMsg), MsgPtr->Byte,
                CFE_SB_StubMsg_GetMetaData(MsgPtr)->TotalLength);
    }
```


**Code snips**
https://github.com/nasa/cFE/blob/8a7dc8f2e434889287973c41d4a5cb4a48f48b44/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L474-L493

**System observed on:**
RHEL 7.6

**Reporter Info**
Alan Gibson NASA GSFC/587
","wontfix, unit-test",https://github.com/nasa/cFE/issues/937
Integration Candidate 2020-10-07,"**Describe the contribution**
Fix #923 
Fix #897  
Fix #651
Fix #923
Fix #705
Fix #888

**Testing performed**
See Bundle: https://github.com/nasa/cFS/pull/145/checks

**Expected behavior changes**

PR #898 - Adds the field `UnregAppID` to track whether an ""unregistered"" event was generated, un-overloading the `EventCount` field to serve its primary purpose of counting actual events generated from a valid/registered AppID.

PR #925 - Move the AppID lookup execution to be early in the CFE_SB_SendMsgFull implementation. This avoids double locking between SB+ES and avoids a block-scope local variable.

PR #917 - Instead of identifying a memory pool by its memory address, use a resource ID. IDs are a constant size, regardless of whether the host machine is 32 or 64 bits.
  - IDs can be put into commands/telemetry and maintain a more consistent format with consistent alignment requirements.
  - IDs can be independently verified without dereferencing memory. Previously the only way to validate a memory pool was to read the address pointed to, which results in a segfault if the address was bad.

PR #899 - Change from `OS_MAX*` defines to appropriately-scoped CFE defines for array sizing

PR #919 - This creates the new `CFE_Status_t` typedef for function's return status codes. Also adds a note to `CFE_TBL_GetStatus` since its behavior will likely change in the future in the hopes of not having a non-zero ""info"" status.

**System(s) tested on**
Bundle CI - https://github.com/nasa/cFS/pull/145/checks

**Additional context**
Part of https://github.com/nasa/cFS/pull/145

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 
@skliper 
@CDKnightNASA ",,https://github.com/nasa/cFE/pull/936
"Fix #922, Update cfe_error.h to use the CFE_Status_t type","**Describe the contribution**
- Fix #922 

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
- Else if Company
  - **HAND SIGNED** Company CLA must be on file (once per release): [Company CLA](../docs/GSC_18128_Corp_CLA_form_1219.pdf)
- Else if Individual
  - **HAND SIGNED** Individual CLA must be on file (once per release): [Individual CLA](../docs/GSC_18128_Ind_CLA_form_1219.pdf)
",community,https://github.com/nasa/cFE/pull/935
"""SenderReporting"" from SB private ""global"" - removed",The global variable removed because is only set once and never used.,duplicate,https://github.com/nasa/cFE/pull/934
"remove ""SenderReporting"" from SB private ""global""","The SenderReporting field exists in the SB global struct but is only set once and never used.

https://github.com/nasa/cFE/blob/8a7dc8f2e434889287973c41d4a5cb4a48f48b44/fsw/cfe-core/src/sb/cfe_sb_priv.h#L285","enhancement, good first issue, cFE-SB",https://github.com/nasa/cFE/issues/933
Unit tests should use cFE defines instead of OS_MAX_PATH_LEN and OS_MAX_API_NAME,"**Is your feature request related to a problem? Please describe.**
Scrub unit tests for OS size use vs cFE size, related to #705, #899.

Anything in IO structures should be using cFE sizes (cFE size is maximum of all platform OS maximums).

**Describe the solution you'd like**
OS_MAX_API_NAME -> CFE_MISSION_MAX_API_LEN
OS_MAX_PATH_LENGTH -> CFE_MISSION_MAX_PATH_LEN
In the code use sizeof instead of hard coded sizes.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC (spawned from 9/30/2020 CCB discussion)
","bug, unit-test, refactor",https://github.com/nasa/cFE/issues/932
Reorder CFE_SB_DestinationD_t and CFE_SB_RouteEntry_t to minimize size,"**Is your feature request related to a problem? Please describe.**
Both structures get unnecessary implicit padding on a 64 bit system, and route entry has implicit padding on 32 bit now that the message id is always 32 bit.  Could impact efficiency (increase cache swapping if a search is performed on the routing table), and impacts memory size (impact scaled by the size of the routing table and number of descriptions).  Likely not a significant impact, but trivial to fix.

**Describe the solution you'd like**
Improve structure layout to minimize padding

**Describe alternatives you've considered**
None.

**Additional context**
If routing table search is implemented (#930), this may help a little.

**Requester Info**
Jacob Hageman - NASA/GSFC",invalid,https://github.com/nasa/cFE/issues/931
Add search option for relating message id to route,"**Is your feature request related to a problem? Please describe.**
Core implementation is message id == message key, leading to a large, sparse message table to get the route index.

**Describe the solution you'd like**
Eliminate message table.  Order routing table by ID and binary search, or other search options (optimal solution may depend on configured sizes such as number of supported message IDs and number of supported routes).

**Describe alternatives you've considered**
See also #929, hash.

**Additional context**
Allowed by #928

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/930
Add message id to message key hash option,"**Is your feature request related to a problem? Please describe.**
Core implementation is message id == message key, leading to a large, sparse message table to get the route index.

**Describe the solution you'd like**
Hash message and deconflict on lookup (confirm route matches MsgId).  Could decrease message table size to a small multiple (2 or 4 maybe) of the routing table size depending on how many conflicts are acceptable.

**Describe alternatives you've considered**
Ordering the routing table and implement binary search and completely eliminate message table.

**Additional context**
See #928

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, Priority: Mission",https://github.com/nasa/cFE/issues/929
Move SB route lookup (including insert method) to a module,"**Is your feature request related to a problem? Please describe.**
Various implementations possible for message and route tables, all with associated advantages and issues.

**Describe the solution you'd like**
Provide the capability to replace the core implementation.

**Describe alternatives you've considered**
None.

**Additional context**
For implementations that support large MsgIds, or prefer smaller memory footprint at the cost of performance.  Hashes, searches, etc.

**Requester Info**
Jacob Hageman - NASA/GSFC (per stakeholder request for alternate implementation)
","enhancement, Priority: Mission",https://github.com/nasa/cFE/issues/928
"Stub for CFE_ES_RunLoop default return is false, should it be?","**Describe the bug**
CFE_ES_RunLoop uses UT_DEFAULT_IMPL which typically returns CFE_SUCCESS, which happens to also equal 0.  CFE_ES_RunLoop returns UT_DEFAULT_IMPL !=0, which causes the default return to be false (0 != 0).  Is that the desired default behavior?

**To Reproduce**
Steps to reproduce the behavior:
1. Write a unit test that expects CFE_ES_RunLoop to succeed by default.
2. Run test, see that is not the behavior.

**Expected behavior**
I had expected 'true' to be the default.

**Code snips**
https://github.com/nasa/cFE/blob/8a7dc8f2e434889287973c41d4a5cb4a48f48b44/fsw/cfe-core/ut-stubs/ut_es_stubs.c#L1085-L1089

To run a single loop for a unit test, this is required:
`UT_SetForceFail(UT_KEY(CFE_ES_RunLoop), true);`
`UT_SetDeferredRetcode(UT_KEY(CFE_ES_RunLoop), 2, false);`

The main reason this requirement does not make sense is UT_SetForceFail makes one think it should fail, not succeed.

**System observed on:**
RHEL 7.6

**Additional context**
If this is the desired behavior, close and disregard this issue.

**Reporter Info**
Alan Gibson  NASA GSFC/587
","question, unit-test, cFE-ES",https://github.com/nasa/cFE/issues/927
"Add support for ""critical"" subscriptions (message must be sent or will return error)","**Is your feature request related to a problem? Please describe.**
Software bus currently returns success even if a message isn't sent to the subscribers (queue full or over message limit).  This causes the message to be dropped with no notification for the sender.

This spawned from the CF use case where notification is required to be able to eliminate the semaphore that is currently used for flow control.

**Describe the solution you'd like**
Add support for a subscription to be ""critical"".  On send, check that all critical destinations have room for the message, if not don't send to any destinations and return an error.  If every critical destination has room, send to all destinations.  All done within the SB lock.

For the CF use case, typically the receiver would dedicate a pipe with just that subscription and the individual msg limit check is sufficient (as long as it's smaller than or equal to the queue limit).

May make sense to transition QOS to a bitfield (currently an enum), supporting the subscription critical option.

**Describe alternatives you've considered**
See #918, #920 

**Additional context**
Discussed that CF should cap work per cycle (avoid free-run if unsubscribed, or no subscribers).  Also generate the message once, and retain to send next cycle if there is no room.

**Requester Info**
Jacob Hageman - NASA/GSFC (spawned from splinter on #920)",enhancement,https://github.com/nasa/cFE/issues/926
"Fix #923, Perform appid lookup early","**Describe the contribution**

Move the AppID lookup to be early in the CFE_SB_SendMsgFull implementation. Avoids double locking between SB+ES and avoids a block-scope local variable.

Fixes #923 

**Testing performed**
Build and sanity check CFE
Run unit tests

**Expected behavior changes**
None.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:FastTrack,https://github.com/nasa/cFE/pull/925
Improve uniqueness in resource IDs,"**Is your feature request related to a problem? Please describe.**
In the event that a resource ""A"" such as an app/counter/pool etc is created, then deleted, then another resource ""B"" is created, the code will re-issue the same resource ID for ""B"" as was used for ""A"".

This means if a stale reference to ""A"" is stored somewhere, it silently now becomes an alias to ""B"".  All validation/checks will pass.

**Describe the solution you'd like**
Should not immediately recycle ID values.

**Additional context**
This is the way OSAL already works, and is enabled by using abstract IDs.

With the recently introduced resource ID abstractions, it is no longer necessary to limit to the respective table size(s), because IDs are not directly used as table indices anymore.  This means that a much larger set of potential ID values is available, and thus means that IDs of old/deleted objects can be different than the new objects while keeping table size the same.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/924
Repetitive AppID lookups in CFE_SB_SendMsgFull,"**Describe the bug**
SB has some code to filter an app's own messages via `CFE_SB_PIPEOPTS_IGNOREMINE`.   This gets the appid and compares to the AppID of the pipe creator, and skips the destination if its a match:

https://github.com/nasa/cFE/blob/8a7dc8f2e434889287973c41d4a5cb4a48f48b44/fsw/cfe-core/src/sb/cfe_sb_api.c#L1359-L1369

The problem is that this is ""inside the loop"" of all destinations in the routing entry.  So it will (potentially) call `CFE_ES_GetAppId()` multiple times.  This also creates a double locking situation, because the SB lock is being held at the time this executes, and the ES lock needs to be acquired by `CFE_ES_GetAppId()`

**Expected behavior**
Code should query the caller AppID early, before taking the SB lock.

**Additional context**
The code works but is inefficient, and double locking is a potential deadlock.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/923
update cfe_error.h to use the CFE_Status_t type,"**Is your feature request related to a problem? Please describe.**
As a followon to #888 all of the const defines currently cast to `int32` and they should be `CFE_Status_t`.

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, good first issue",https://github.com/nasa/cFE/issues/922
update cFE source and unit tests to use CFE_Status_t,"**Is your feature request related to a problem? Please describe.**
As a followon to #888, we should update all of the cFE source to use the CFE_Status_t return status type instead of int32.

**Describe alternatives you've considered**
May want to do this in phases, per component; or incorporate into a clang-format code cleanup change set.

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, CFS-40, CFS-41, CFS-42",https://github.com/nasa/cFE/issues/921
"Fix #918, Add send message with status API","**Describe the contribution**
Fix #918 - Add send message with status API

**Testing performed**
Built with tests, ran tests, passes

**Expected behavior changes**
Added API

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
Supports CF message flow control

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",wontfix,https://github.com/nasa/cFE/pull/920
"Fix #888, Add typedef for function return status codes","Closes #888 

**Describe the contribution**
This adds a typedef for return status codes for functions. I've also added a brief comment to CFE_TBL_GetStatus as it's behavior will likely change in the future in the hopes of not having a non-zero ""info"" status.

**Testing performed**
make install

**Expected behavior changes**
no impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",,https://github.com/nasa/cFE/pull/919
Add a CFE_SB_SendMsg version that provides send status,"**Is your feature request related to a problem? Please describe.**
Send status is not available to the sender, which would help senders manage critical messages or flow control (if not sent, try again next cycle).

**Describe the solution you'd like**
CFE_SB_SendMsgGetStatus(Msg, &SendStatus)

Where sendstatus could be an enumeration - no subscribers, sent to none, sent to some, sent to all

Then update SendMsgFull to include the status (no change needed to the other APIs)

**Describe alternatives you've considered**
Overload the return status

**Additional context**
Could be used to support CF flow control

**Requester Info**
Jacob Hageman - NASA/GSFC (one approach that could be taken to resolve a stakeholder request)

@jwilmot @klystron78 @tngo67 ","wontfix, public-api",https://github.com/nasa/cFE/issues/918
"Fix #651, Use resource ID for memory pools","**Describe the contribution**

Instead of identifying a memory pool by its memory address, use a resource ID.  IDs are a constant size, regardless of
whether the host machine is 32 or 64 bits.

- IDs can be put into commands/telemetry and maintain a more consistent format with consistent alignment requirements.
- IDs can be independently verified without dereferencing memory.  Previously the only way to validate a memory pool was to read the address pointed to, which results in a segfault if the address was bad.

Fixes #651 

**Testing performed**
Build and sanity test CFE, run all unit tests
Confirm code coverage up to par.

**Expected behavior changes**
The `CFE_ES_MemHandle_t` type is no longer a direct CPU address.  Instead it is an abstract resource identifier.
This should fix issues with unexpected padding of CMD/TLM messages that contain memory pool handles.

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11

**Additional context**
Fairly extensive changes in the memory pool implementation to support abstract handles, but the API exposed to applications should be backward compatible, so long as apps did not rely on the specific pool layout.

The downside is that there is a limit to the total number of abstract identifiers that can exist, which is a new platform config limit.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/917
Integration Candidate: 2020-09-29,"**Describe the contribution**
Fix #894 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/144/checks

**Expected behavior changes**
PR #896 - Add a new `typedef CFE_ES_ResourceID_t` that can replace `uint32` for all ID storage and manipulation. Initially this is just an alias to `uint32` for backward compatibility.

**System(s) tested on**
Ubuntu - CI

**Additional context**
https://github.com/nasa/cFS/pull/144

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/916
cFE req. cES1007.2: Restart Application - Reject On Missing File,"**Describe the bug**
cFE requirement cES1007.2 specifies that a user can not restart an Application if the original file has been removed.  If the user attempts to restart an application following removal of file, the cFE shall reject the Command, increment the invalid Command counter, and generate an event message. 

This is not what happens when the restart application command is received.  If a user has deleted the cFE Application file and then sends the restart application command.  The application successfully restarts.

**To Reproduce**
Steps to reproduce the behavior:
Delete an applications shared library file from the /cf/ location.
Send the associated restart application command.

**System observed on:**
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cfe v6.8.0-rc1+dev28, osal v5.1.0-rc1+dev12, psp v1.4.0+dev76

**Reporter Info**
Dan Knutsen
NASA/Goddard
","bug, docs, requirements",https://github.com/nasa/cFE/issues/915
Add support for RTEMS 5.1 - sample_defs toolchain file updates,"**Is your feature request related to a problem? Please describe.**
The cFS Bundle currently supports RTEMS 4.11. Now that RTEMS 5.1 has been released, I would like to update the necessary components to support RTEMS 5.1 on the pc-rtems platform. This involves minor modifications to the cfe repository, the PSP repository, and the OSAL repository. These changes can be done in such a way that preserves the current RTEMS 4.11 support and adds RTEMS 5.1 support.

**Describe the solution you'd like**
For the cFE repository, the only changes needed are to the sample_defs toolchain files. I need to make a small modification to the 4.11 RTEMS toolchain file, and add a new toolchain file for RTEMS 5.

**Describe alternatives you've considered**
Alternatives include:
- Not supporting newer versions of RTEMS, but several projects will depend on RTEMS 5 support.
- Dropping RTEMS 4.11 support and just making the changes needed for RTEMS 5, but there may be projects that depend on RTEMS 4.11. We can consider dropping RTEMS 4.11 support on a future release.


**Additional context**

**Requester Info**
Alan Cudmore / NASA GSFC Code 582",enhancement,https://github.com/nasa/cFE/issues/914
Provide separate type for each resource category,"**Is your feature request related to a problem? Please describe.**
Pull #896 provided a generic typedef for resource identifiers.  This commit stops using `uint32` and makes a dedicated type, but the type is the same for all resource categories (apps, tasks, counters, etc).

**Describe the solution you'd like**
Per @CDKnightNASA comment here:

https://github.com/nasa/cFE/pull/896#issuecomment-697478083

It would improve things further to provide a separate/unique typedef for each resource category.

**Additional context**
This will be implemented as a follow-on to the original change.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/913
Integration Candidate: 2020-09-23,"**Describe the contribution**
Fix #796 
Fix #827 
Fix #890 
Fix #893
Fix #900 
Fix #906 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/142/checks

**Expected behavior changes**
PR #880 - Removes dependency on CCSDS version define.
PR #885 - Removes old name and id defines.
PR #892 - `CFE_ES_CalculateCRC` default stub behavior.
PR #895 - Replaces calls to `OS_open` and `OS_creat`
PR #902 - Replaces `UT_Text` with` UtPrintf`
PR #907 - Updates variable checks in `read_targetconfig`

**System(s) tested on**
Ubuntu - CI

**Additional context**
https://github.com/nasa/cFS/pull/142

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
Joseph Hickey, Vantage Systems, Inc.



",,https://github.com/nasa/cFE/pull/912
Cast-align warning in sb_UT.c,"**Is your feature request related to a problem? Please describe.**
```
/home/jhageman/cFS-GitHub/cfe/fsw/cfe-core/unit-test/sb_UT.c: In function ‘Test_SendMsg_MaxMsgSizePlusOne_ZeroCopy’:
/home/jhageman/cFS-GitHub/cfe/fsw/cfe-core/unit-test/sb_UT.c:3330:33: warning: cast increases required alignment of target type [-Wcast-align]
 3330 |                                 (CFE_SB_ZeroCopyHandle_t *) &TlmPkt);
      |                                 ^
/home/jhageman/cFS-GitHub/cfe/fsw/cfe-core/unit-test/sb_UT.c: In function ‘Test_SendMsg_NoSubscribers_ZeroCopy’:
/home/jhageman/cFS-GitHub/cfe/fsw/cfe-core/unit-test/sb_UT.c:3365:33: warning: cast increases required alignment of target type [-Wcast-align]
 3365 |                                 (CFE_SB_ZeroCopyHandle_t *) &TlmPkt);
```

**Describe the solution you'd like**
Resolve warnings

**Describe alternatives you've considered**
None

**Additional context**
Ubuntu 20.04 w/ cast-align=strict

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/issues/911
Use CFE_SB_MessageStringSet for setting strings with two different sizes,"**Is your feature request related to a problem? Please describe.**
Anywhere that the Name, EntryPoint, or FileName members are filled in telemetry should use CFE_SB_MessageStringSet- which is similar to strncpy but takes both a source and dest length. It is intended for this use case where the local/platform and global/mission sizes might be different and this handles padding/termination issues.

**Describe the solution you'd like**
Use CFE_SB_MessageStringSet whenever sring sizes could be different.

**Describe alternatives you've considered**
Use standard patterns to avoid unterminated strings (force a NULL).

**Additional context**
#899 

**Requester Info**
Jacob Hageman - NASA/GSFC
",invalid,https://github.com/nasa/cFE/issues/910
Move typedefs used in cmd/tlm to the *_msg.h file,"**Is your feature request related to a problem? Please describe.**
CFE_ES_AppInfo_t and CFE_ES_MemHandle_t are defined in cfe_es.h, but used in telemetry (cfe_es_msg.h).  All the typedefs used in telemetry should be defined in the *_msg.h file.

**Describe the solution you'd like**
Move CFE_ES_AppInfo_t and CFE_ES_MemHandle_t into cfe_es_msg.h

Note CFE_ES_TaskInfo_t is not used in cmd/tlm.

**Describe alternatives you've considered**
None

**Additional context**
Related to #899

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/909
CFE TIME should initialize the STCF from PSP,"**Is your feature request related to a problem? Please describe.**
The CFE TIME subsystem initializes its state using fixed values from `CFE_MISSION_TIME_DEF_STCF_SECS` and `CFE_MISSION_TIME_DEF_MET_SECS`. As a result, all timestamps initially come out as `1980-012-14:03:20` and increment from there.

**Describe the solution you'd like**
It should get these initial values from the PSP instead.  This way on platforms that actually have an RTC, it can get the correct value.  This would be a big improvement particularly when debugging on a PC/VM because timestamps could be the actual time, not 1980.

**Describe alternatives you've considered**
Leave as is.

**Additional context**
Not a high priority, but this is often confusing, particularly to new users and/or test environments that don't have a CFE time server sending time at tone messages.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/908
"Fix #906, Update variable checks in read_targetconfig","**Describe the contribution**

CMake script was using a ""DEFINED"" test to check if these variables were set.  Problem discovered is that this is always true because ""SIMULATION"" is a cache var set from an environment variable, so it ALWAYS defined, it is just empty if not being used.

Fix is to use `if (SIMULATION)` rather than `if (DEFINED SIMULATION)` which should only be true if the string is not empty, as intended.  Also applying this to `${CPUNAME}_SYSTEM` so if someone does e.g. `set(cpu1_SYSTEM)` then it won't try to use that empty string either.

Fixes #906 

**Testing performed**
Build for Vxworks 6.9 using GSFC build machine
Build for native using both SIMULATION=native and without SIMULATION (using toolchain-cpu1.cmake)

**Expected behavior changes**
Builds without SIMULATION directive work as expected

**System(s) tested on**
- Vxworks 6.9 using GSFC build machine
- Native on Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/cFE/pull/907
"CMake build not correctly using the ""${CPUNAME}_SYSTEM"" directive","**Describe the bug**
With the current main branch even if the `${CPUNAME}_SYSTEM` variable is correctly set, it is being ignored.  `SIMULATION` works fine though.

**To Reproduce**
Run `make prep` without `SIMULATION` and a targets.cmake file with  `cpu1_SYSTEM` set to something non-empty.
Unexpected error is generated:

    CMake Error at cmake/mission_build.cmake:332 (message):
      Unable to find toolchain file for default


**Expected behavior**
Should generate build tree and build successfully.

**System observed on:**
GSFC MCP750 test build

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/cFE/issues/906
"Fix #903, Add CFE_SB_GetUserData padding check","**Describe the contribution**
Fix #903 - this adds checks to see that CFE_SB_GetUserData works with all payload data types.

Illustrates the issue in #488 - As expected it fails for 64 bit payload in a telemetry packet because of implicit padding added between the header (12 bytes) and the 64bit payload (requires 64bit alignment.. so pads to 16 bytes).

Cmds are only OK because the default header is 8 bytes.

Also note - I expect these tests would also throw cast-align errors for an alignment sensitive build, since there's a cast from a structure with 64bit alignment to 32bit alignment.

**Testing performed**
Build and run unit tests... currently failing due to implicit padding.

**Expected behavior changes**
None, except shows the current issue with our header definitions.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: main bundle + this commit

**Additional context**
Depends on nasa/osal#605 (address equal assert)

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","unit-test, dependency",https://github.com/nasa/cFE/pull/905
Documentation in targets.cmake does not match current implementation,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/cFE/blob/983157db90bd205977c52762506ccbf2132837f3/cmake/sample_defs/targets.cmake#L8-L12

https://github.com/nasa/cFE/blob/983157db90bd205977c52762506ccbf2132837f3/cmake/sample_defs/targets.cmake#L100-L105

cpu number is now assigned differently, name is assigned differently, etc...

**Describe the solution you'd like**
Update documentation to be consistent

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, docs, build-system",https://github.com/nasa/cFE/issues/904
Update CFE_SB_GetUserData unit test to catch padding differences between header/payload,"**Is your feature request related to a problem? Please describe.**
CFE_SB_GetUserData returns the location right after the header, which isn't always the start of the payload if padding gets inserted.

**Describe the solution you'd like**
Add generic packets with all width types, and ensure the correct location is returned.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","bug, unit-test",https://github.com/nasa/cFE/issues/903
"Fix #900, Replace UT_Text with UtPrintf","**Describe the contribution**
Fix #900 - replaces UT_Text with UtPrintf and eliminates UT_VERBOSE ifdef (run time reporting control provided by ut_assert)

**Testing performed**
Built and ran unit tests, passed.  Spot checked reports and it looked good (sb_UT, tbl_UT)

**Expected behavior changes**
Minor text changes in report, but now can be controlled by run time test verbosity levels.  Also reports actual test line number and file (instead of utility function info).

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/pull/902
UT_CheckForOpenSockets prototype duplicated,"**Is your feature request related to a problem? Please describe.**
Prototype defined in both cFE and OSAL.

https://github.com/nasa/cFE/blob/983157db90bd205977c52762506ccbf2132837f3/fsw/cfe-core/unit-test/ut_support.h#L656-L671

https://github.com/nasa/osal/blob/f12d42ba58837a645d05eda3479d5f613ebad6c4/src/ut-stubs/utstub-helpers.h#L111-L115

Implemented here:
https://github.com/nasa/osal/blob/f12d42ba58837a645d05eda3479d5f613ebad6c4/src/ut-stubs/utstub-helpers.c#L195-L217

Also violation of magic number use in the implementation, and doesn't seem to actually do what it says (I don't see the close).

**Describe the solution you'd like**
Maybe remove if not useful?  If not, at least use the correctly scoped prototype and remove the second definition.

**Describe alternatives you've considered**
None.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","bug, unit-test, removed",https://github.com/nasa/cFE/issues/901
"Replace UT_Text with UtDebug and UtPrintf, remove UT_VERBOSE ifdefs","**Is your feature request related to a problem? Please describe.**
Compile time defines used for controlling reporting levels, also needless redefine ut_assert functions defeats the reporting of function and line number

**Describe the solution you'd like**
ut_assert provides for run-time reporting levels, use them instead of compile time defines.  This will also then cause the line number and file to be useful.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/900
"Fix #705, Use cFE defines to size arrays","**Describe the contribution**
Fixes #705, also a similar issue in TBL
Change from OS_MAX* defines to CFE defines for array sizing

**Testing performed**
Built and ran unit tests, passed.  Visually confirmed sizes matched.

**Expected behavior changes**
No impact as long as the sizes are the same.  Now scoped appropriately such that OS's can be configured differently and won't break cFE (as long as the cFE defines are max of the set)

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/899
"Fix #897, EVS unregistered AppID","**Describe the contribution**
Do not overload the `EventCount` field to track whether an ""unregistered"" event was generated, which by definition comes from a different app than the one that might be actively using this same table entry.

This just makes a separate field to track that state, leaving the `EventCount` to serve its primary purpose of counting actual events generated from a valid/registered AppID.

Fixes #897 

**Testing performed**
Temporarily modified/hacked ""sample_app"" to send several events _before_ calling `CFE_EVS_Register()`.
Confirmed that one (and only one) ""unregistered"" event is reported e.g.:

    EVS Port1 42/1/CFE_EVS 41: App SAMPLE_APP not registered with Event Services. Unable to send event.

Also confirmed that this ""unregistered"" event did not change the valid `EventCount` in the EVS telemetry data.

**Expected behavior changes**
No more incrementing a counter for another app.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/898
EVS improperly uses the EventCount member for incorrect appID filtering,"**Describe the bug**
The `EventCount` member of the EVS internal app data is intended to track the number of events sent by a particular app.

BUT - it is also overloaded to track if the event came from the wrong app, here:
https://github.com/nasa/cFE/blob/983157db90bd205977c52762506ccbf2132837f3/fsw/cfe-core/src/evs/cfe_evs_utils.c#L187-L194

The problem is that this is, by definition, invoked when the calling AppID is _wrong_ (not registered), but it is changing a field that is also potentially used for _valid_ (registered) AppIDs.  

**To Reproduce**
This can theoretically occur if an app calls `CFE_EVS_SendEventWithAppId()` using an old AppID value, for instance if an app was restarted it gets unregistered, and then gets a different AppID but refs to the old value could still exist.  The new AppID doesn't necessarily have the same slot in the table - in fact it shouldn't.  The old table entry might refer to a totally different app.

So if this happens it will corrupt/change the `EventCount` member on an unrelated app data entry.

This can be seen in the EVS telemetry, where if the ""unregistered"" event occurs it inadvertently creates a nonzero `AppMessageSentCounter` in the TLM data on an unrelated app that happens to share that slot in the table.

Also, if the counter was already nonzero because the table entry is in use by another (registered) app then this prevents the notification about the unregistered app from appearing at all.

**Expected behavior**
Should not overload the EventCounter to track a basically unrelated item - which is whether or not an ""unregistered"" event occurred on a different app that happened to map to the same entry.

Simple fix would be to just introduce a separate field to track this.

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/897
"Fix #894, add resource ID type","**Describe the contribution**
Add a new typedef `CFE_ES_ResourceID_t` that can replace `uint32` for all ID storage and manipulation. Initially this is just an alias to `uint32` for backward compatibility.

Convert all APIs that accept an ID to use the new typedef.

This also reserves the value ""0"" as an undefined ID, and gives a separate base value for each resource type. Therefore even though the type is still fundamentally a uint32, the different resource IDs can still be distinguished.

Fixes #894 

**Testing performed**
Build and run, sanity test CFE, ensure apps and libs are loaded OK
Spot-check various commands that operate on apps/appids by sending using `cmdUtil`.  Confirmed commands that write to data files (e.g. QUERY_ALL) has the correct appIDs in the file (e.g. 0x02110000 instead of 0x00000000 for CFE_EVS).
Confirmed that commands that operate on app name (start/stop/restart etc) still work fine.

**Expected behavior changes**
**IDs are no longer zero based.**
This should not matter so long as the ID is treated as opaque, and only manipulated via the ES APIs.  This matters if an app is using the ID as a table/array index.  All instances of this usage in CFE itself has already been fixed, and initial review of CFS apps didn't show any concerns.

Otherwise, no change to behavior as long as IDs are treated as opaque and only stored/used per API.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
An optional add-on can make the ID type into a struct so it triggers a compiler error if/when used as an integer.  This can aid in updating apps that might still use `uint32`.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/896
"Fix #893, replace calls to OS_open and OS_creat","**Describe the contribution**

Use `OS_OpenCreate()`, which has an API consistent with the rest of OSAL.  
`OS_open` and `OS_create` will be deprecated in nasa/osal#556.

Fixes #893 

**Testing performed**
Build CFE and run unit tests
Sanity test CFE by sending commands that use files (e.g. `CFE_ES_QUERY_ALL_TASKS_CC`) using cmdUtil and verify functionality is not changed.

**Expected behavior changes**
No impact to behavior.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Note that OS_open and OS_creat were already just backward compatibility wrappers around `OS_OpenCreate` that mimicked the historical API.  This just bypasses the wrapper.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/pull/895
Add typedef and nonzero base for resource identifiers,"**Is your feature request related to a problem? Please describe.**
App IDs, Task IDs, Library IDs, and other resources are all represented by a basic `uint32` identifier, which starts at 0.

**Describe the solution you'd like**
There should be a separate `typedef` for these identifiers, and 0 should be reserved as an ""undefined"" value (like OSAL) such that:

- Control structures and globals which are `memset()` to zero will not alias valid entries if they contain IDs.
- Alleviates the need for a separate `RecordUsed` boolean - 0 can indicate an unused entry, nonzero indicates a used entry 

This makes everything consistent as well as being simpler and safer.

**Additional context**
Type should initially be a `uint32` which makes this backward compatible for apps.
After this change IDs can no longer be directly used as array indices.  This has already been removed/fixed in CFE itself in previous PRs.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/894
Replace calls OS_open and OS_create with OS_OpenCreate,"**Is your feature request related to a problem? Please describe.**
For nasa/osal#556 the `OS_open()` and `OS_create()` API calls will be deprecated, because they don't follow the correct pattern of returning an OSAL ID via an output variable, instead returning the ID via the `int32` return code.

**Describe the solution you'd like**
Use the newly exposed OSAL API `OS_OpenCreate()` which can replace both `OS_open` and `OS_creat` via different flags, and outputs the ID as all other OSAL functions do.

**Additional context**
Prerequisite to being able to deprecate these APIs that don't follow the OSAL pattern.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/893
"Fix #890, CFE_ES_CalculateCRC default stub behavior","**Describe the contribution**
Fix #890 - CFE_ES_CalculateCRC updated to default return behavior.

**Testing performed**
Built and ran unit tests, passed.

**Expected behavior changes**
Now setting the return code (and deferred return code) works for CFE_ES_CalculateCRC.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit.

**Additional context**
None.

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/892
Integration Candidate: 2020-09-16,"**Describe the contribution**
Fix #830 
Fix #881 
Fix #882 
Fix #886 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/140/checks

**Expected behavior changes**
PR #853 - Sets Revision to 99 for development build.
PR #884 - Installs unit test to target directory.
PR #883 - Returns processor ID to default to unbreak toolchain
PR #887 - Applies the appid/taskid/counterid pattern to Library resources.

**System(s) tested o**
Ubuntu - CI

**Additional context**
 https://github.com/nasa/cFS/pull/140


**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA-GSFC
Jacob Hageman, NASA-GSFC
Joseph Hickey, Vantage Systems, Inc.

",,https://github.com/nasa/cFE/pull/891
Unable to set return code of CFE_ES_CalculateCRC using UT_SetDeferredRetcode,"**Describe the bug**
The CFE_ES_CalculateCRC  stub always return the value of 332424 regardless of what deferred return code I set it to. 

**To Reproduce**
Steps to reproduce the behavior:
1. Create a functionX that calls CFE_ES_CalculateCRC
2. Write a unit test for the functionX
3. In UT_functionX, set the return code of CFE_ES_CalculateCRC  as below
    `UT_SetDeferredRetcode(UT_KEY(CFE_ES_CalculateCRC), 1, 0);`
4. Run the unit test

**Expected behavior**
I expect the return value of CFE_ES_CalculateCRC to be 0 as I set it to.

**Actual behavior**
However, the return value of CFE_ES_CalculateCRC will be 332424 instead of 0.

**Code snips**
N/A

**System observed on:**
 - Hardware
 - OS: Centos7
 - Versions: cFS Development Build: 6.8.0-rc1+dev28

**Additional context**
N/A

**Reporter Info**
N/A
",enhancement,https://github.com/nasa/cFE/issues/890
strawman for #888 - return code for cFE,"closes #888  -- not like this strawman will close it, but just creating the linkage

**Describe the contribution**
This is a strawman for return code typedef for cFE.

**Testing performed**
code builds

**Expected behavior changes**
Returns for cFE functions now typedef'd in headers (.h), not in the source (.c).

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",duplicate,https://github.com/nasa/cFE/pull/889
typedef for status return values,"**Is your feature request related to a problem? Please describe.**
Currently most CFE API's return a status code (the return type defines as int32.) The numeric return type is somewhat unclear and could result in confusion with other types of information (such as inadvertent confusion with return values from OSAL functions or numeric ID's).

**Describe the solution you'd like**
```
typedef int32 CFE_Status_t;

CFE_Status_t CFE_SB_CreatePipe()...
```

In order to facilitate better coding practices, I also propose a utility function:
```
bool CFE_Status_IsSuccess(CFE_Status_t status); // returns true if the status is a success return value, false if not (currently < 0 is an error condition, >= 0 is success with possible further status details.)
```

**Describe alternatives you've considered**
This will require quite a lot of code change but could be migrated incrementally as creating the typedef to the same type will be compatible. Eventually it could be changed to a struct wrapper or enum or something that will result in compiler errors when the type is considered a numeric type.

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, good first issue",https://github.com/nasa/cFE/issues/888
"Fix #886, library table id management","**Describe the contribution**
Apply the appid/taskid/counterid pattern to Library resources.

**Testing performed**
Build and sanity check CFE, ensure library is loaded correctly
Run all unit tests

**Expected behavior changes**
No impact to behavior.  Internal change only.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Implement the same pattern on Library IDs which was previously implemented for apps, tasks, and counters.

For unit testing this also moves the Library-specific UT calls into a separate function.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/pull/887
Update Library code to decouple IDs from table indices,"**Is your feature request related to a problem? Please describe.**
Library IDs are currently coupled to the Library table index.   

**Describe the solution you'd like**
Library IDs should be opaque values and not interpreted directly as a table index.
Apply the same pattern as in previous PRs #859 and #871 to the Library code.

**Additional context**
Part of ongoing effort to clean up IDs across all of ES.  

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/886
"Fix #827, Remove old name and id defines","**Describe the contribution**
Fix #827, Remove old name and id defines
 CFE_PLATFORM_CPU_ID, CFE_PLATFORM_CPU_NAME, and CFE_MISSION_SPACECRAFT_ID

Use CFE_PSP_GetProcessorId(), CFE_PSP_GetProcessorName(), CFE_PSP_GetSpacecraftId() going forward.

**Testing performed**
Built with unit tests, passed.  Also nominal core-cfe run.

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
#710 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/pull/885
"Fix #881, Install unit test to target directory","**Describe the contribution**
Fix #881, Install unit test to target directory

**Testing performed**
Make unit tests, install, observe they install in correct directory

**Expected behavior changes**
Correct install directory

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","bug, CCB:FastTrack",https://github.com/nasa/cFE/pull/884
"Fix #882, Returned processor ID to default to unbreak toolchain","**Describe the contribution**
Fix #882 

CI port selection depends on processor ID, #776 changed the default which broke toolchain.

**Testing performed**
built, ran, confirmed CI is back to listening on default port.

**Expected behavior changes**
Defaults work again in the toolchain

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this change.

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","bug, CCB:FastTrack",https://github.com/nasa/cFE/pull/883
Default linux port got changed again... ,"**Describe the bug**
Processor ID was set to 10, ci uses it to deconflict ports.  Broke toolchain.

**To Reproduce**
Normal run, reports CI is listening on 1243 (should be 1234)

**Expected behavior**
Use historical port by default.

**Code snips**
https://github.com/nasa/cFE/blob/db829294eba01b88683e679d58435f65ca02f826/cmake/sample_defs/targets.cmake#L103

**System observed on:**
 - Hardware: cFS Dev server
 - OS: Ubuntu 18.04
 - Versions: Bundle main

**Additional context**
Broke in #776.  Really should fix nasa/cfs#56 (positive check in CI of proper execution and exit), and this would have been caught.

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/882
Unit tests no longer installing correctly,"**Describe the bug**
Some unit tests show up in build directory after install
```
.../build$ ls -1
cfecfs_build_info.h.in
cfecfs_version_info.h.in
CMakeCache.txt
CMakeFiles
cmake_install.cmake
coverage-ut-mcp750-vxworks-testrunner
CTestTestfile.cmake
doc
exe
inc
install_manifest.txt
Makefile
mission_vars.cache
msg_UT
native
sample_app-sample_app-testrunner
sample_lib-sample_lib-testrunner
tools
```

**To Reproduce**
make SIMULATION=native ENABLE_UNIT_TESTS=true prep
make
make install

**Expected behavior**
They should all show up in build/exe/cpu1 (for default config)

**Code snips**
No idea

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/881
"Fix #796, Remove dependency on CCSDS version define","**Describe the contribution**
Fix #796 
- Removes MESSAGE_FORMAT_IS_CCSDS_VER2 and all references
- Now replaced by MISSION_MSGID_V2 and MISSION_INCLUDE_CCSDS_HEADER
  cmake variables
- Base MIDs localized to cpu1_msgids.h and improved documentation
  indicating example nature of implementation, note issue #732
  may make this obsolete
- Updated cfe_sb.dox for message module concept
- MsgId base type now always uint32 (reduces logic differences)
- Removed system log report of version used, in build and obvious
  from packet sizes
- Cleaned extra documentation from cfe_sb_msg_id_util.c
- Removed verification limits on CFE_PLATFORM_SB_MAX_MSG_IDS
- Removed UT_GetActualPktLenField and UT_GetActualCmdCodeField
  that depended on the define, shouldn't directly access message
  in a unit test since it's implementation dependent
- Default CCSDS version default now always 0 (per the standard)
  but mission configurable

**Testing performed**
Build unit tests, passed except for sample app.  Build usersguide and confirmed no errors or warnings.

**Expected behavior changes**
None, just no longer requires additional configuration flag

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
#726 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, dependency",https://github.com/nasa/cFE/pull/880
Document msg module customization method,"**Is your feature request related to a problem? Please describe.**
No documentation on how to customize message module

**Describe the solution you'd like**
Add documentation - overview, suggestions, etc

Include cmake steps to replace:
```
# The ""MISSION_CORE_MODULES"" will be built and statically linked as part
# of the CFE core executable on every target.  These can be used to amend
# or override parts of the CFE core on a mission-specific basis.
list(APPEND MISSION_MODULE_SEARCH_PATH ""prj_cfe"")
list(REMOVE_ITEM MISSION_CORE_MODULES ""msg"")
list(APPEND MISSION_CORE_MODULES ""custom_msg"")
```

Note this is a ""power user"" option and not generally recommended unless absolutely required by the mission.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/cFE/issues/879
Document MISSION_MSGID_V2 and MISSION_INCLUDE_CCSDSEXT_HEADER cmake options,"**Is your feature request related to a problem? Please describe.**
Missing documentation for MISSION_MSGID_V2 and MISSION_INCLUDE_CCSDSEXT_HEADER
Note not widely used...

**Describe the solution you'd like**
Document as example in cmake file (likely targets.cmake)
MISSION_INCLUDE_CCSDSEXT_HEADER - set to source select to include CCSDS extended header (cFS defined ""standard"")
MISSION_MSGID_V2 - set to source select version 2 message ID implementation, depends on above being set

**Describe alternatives you've considered**
Remove support for these in the framework... the extended header isn't standardized, custom headers can be implemented to support the few cases where the default is not sufficient (and power users may end up defining their own header anyways).  The framework doesn't really work with these settings without additional modification (apps have V1 MIDs), etc.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",docs,https://github.com/nasa/cFE/issues/878
CFE_MISSION_REV defined in 2 locations,"**Describe the bug**
CFE_MISSION_REVE defined in 2 locations

**To Reproduce**
Inspection

**Expected behavior**
Define in 1 location... if it's for clone and own, version seems to make sense... if it includes configuration versioning then useful in the config file.

**Code snips**
https://github.com/nasa/cFE/blob/db829294eba01b88683e679d58435f65ca02f826/cmake/sample_defs/cpu1_platform_cfg.h#L1797
https://github.com/nasa/cFE/blob/db829294eba01b88683e679d58435f65ca02f826/fsw/cfe-core/src/inc/cfe_version.h#L46

**System observed on:**
N/A

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/877
Integration Candidate: 2020-09-09,"**Describe the contribution**
Fix #846 
Fix #858
Fix #862 
Fix #863 
Fix #870 
Fix #873 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/139/checks

**Expected behavior changes**
PR #872 -  Deconflict `CFE_ES_LIB_ALREADY_LOADED` and `CFE_ES_ERR_SYS_LOG_TRUNCATED` EIDs

PR #868 - Scrub all CFE references/uses of OSAL IDs to use the proper `osal_id_t` type. Any place that an OSAL ID is stored in memory or passed in an API call are changed to the `osal_id_t` type, rather than `uint32`. Conversions between this and other types (e.g. bare integer) is done using the OSAL-supplied conversion helpers.

PR #865 - After the changes implemented in #101, there may be routing table entries with no subscribers (RoutePtr->ListHeadPtr would be NULL.) This could cause a seg-fault. Also, even if there are entries in the routing table, there will be no event generated if the unsubscribe does not find a matching route entry.

PR #864 -  Adds debug message.

PR #871 - Applies the appid/taskid pattern to Generic Counter resources.

PR #875 - Adds test for SB subscribe/unusubscribe/unsubscribe.

**System(s) tested on**
Ubuntu - CI

**Additional context**
https://github.com/nasa/cFS/pull/139

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
Joseph Hickey, Vantage Systems, Inc.
Chris Knight, NASA-ARC",,https://github.com/nasa/cFE/pull/876
"Fix #873, Add test for SB subscribe/unusubscribe/unsubscribe","**Describe the contribution**
This adds a test to cover the issue in #862, and verify #865 fixed it
Fix #873

**Testing performed**
Build and ran unit test on main branch, confirmed it produced a seg fault (as expected per #860 
This should pass once #865 is checked in.

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:FastTrack, unit-test",https://github.com/nasa/cFE/pull/875
add function name and line number to CFE_EVS_SendEvent stub,"The `CVE_EVS_SendEvent()` function, post #863 will generate debug messages. This ticket proposes wrapping the function in a macro that adds the `__func__` and `__LINE__` to the output. See https://github.com/nasa/cFE/pull/864#pullrequestreview-482779746


**Requester Info**
Full name and company/organization if applicable
","enhancement, unit-test",https://github.com/nasa/cFE/issues/874
Add unsubscribe test case to cover #862,"**Is your feature request related to a problem? Please describe.**
#862 looks like it could have resulted in a seg fault, fixed in #865
 Unsubscribe after no subscriptions are left...

**Describe the solution you'd like**
Add test case.

**Describe alternatives you've considered**
None.  Should add test to confirm code works.

**Additional context**
#862 #865 

**Requester Info**
Jacob Hageman - NASA/GSFC
@CDKnightNASA ","enhancement, unit-test",https://github.com/nasa/cFE/issues/873
"Fix #846, Deconflict CFE_ES_LIB_ALREADY_LOADED and CFE_ES_ERR_SYS_LOG_TRUNCATED","**Describe the contribution**
Fix #846 - deconflict CFE_ES_LIB_ALREADY_LOADED and CFE_ES_ERR_SYS_LOG_TRUNCATED EIDs

**Testing performed**
Built and ran unit tests (checks both those returns), passed.

**Expected behavior changes**
EIDs no longer overloaded.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","bug, CCB:FastTrack",https://github.com/nasa/cFE/pull/872
"Fix #870, generic counter table management","**Describe the contribution**
Apply the appid/taskid pattern to Generic Counter resources.

**Testing performed**
Unit tests
Build and sanity test CFE.

**Expected behavior changes**
No real logic change - just putting the repeated logic into inline functions.

However, This does add a `CFE_ES_LockSharedData()` wrapper around counter ID allocation, deletion, and lookup to avoid a possible race condition here.  This was likely a bug, but never noticed perhaps because these aren't a heavily used feature.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",enhancement,https://github.com/nasa/cFE/pull/871
Create accessor functions for Counter resources,"**Is your feature request related to a problem? Please describe.**
The generic counter API uses a zero based ID to directly index an array

**Describe the solution you'd like**
Make the ""generic counter"" API follow the same pattern as was done for apps and tasks in #797 

**Additional context**
This is for consistency and future development.  All resource management should follow this pattern.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/870
"Fix #769, Adds name to struct/union/enum typedefs","Closes #769 

**Describe the contribution**
This adds names to `typedef struct`, `typedef union`, and `typedef enum` types, some tools find this helpful.

**Testing performed**
make install && make test

**Expected behavior changes**
no behavior change

**System(s) tested on**
Debian 10.5

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",,https://github.com/nasa/cFE/pull/869
"Fix #858, use osal id typedef","**Describe the contribution**
Scrub all CFE references/uses of OSAL IDs to use the proper `osal_id_t` type.

Any place that an OSAL ID is stored in memory or passed in an API call are changed to the `osal_id_t` type, rather than `uint32`.  Conversions between this and other types (e.g. bare integer) is done using the OSAL-supplied conversion helpers.

Fixes #858

**Testing performed**
Build and sanity check CFE
Run all unit tests
Also specifically spot check various CFE commands that save data to file (e.g. perf log, query all tasks, etc) to confirm these files are being properly created - as these previously used the `int32` type to store the file handle and necessitated a bigger change.

**Expected behavior changes**
No impact to behavior.  Since the `osal_id_t` is initially a typedef to `uint32`, this should be effectively no change except to future proof.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Depends on nasa/osal#568 which provides the typedef and conversion helpers (currently in IC)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",dependency,https://github.com/nasa/cFE/pull/868
"Fix #788, Simplified CFE_EVS_SendEvent macros","Closes #788 

**Describe the contribution**
Macros for more compact calls to CFE_EVS_SendEvent, making the type be part of the fn name.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",,https://github.com/nasa/cFE/pull/867
"HOTFIX-20200902, Fix sb unit test setup issue","**Describe the contribution**
Fix integration-candidate - there was some convoluted test setup logic which actually caused some of the tests to be skipped and the CleanApp API test wasn't proceeded by a test reset so the event count didn't match expected.  Caused a TTF.

Basically just straightened out the setup (no actual test changes.)

**Testing performed**
Make, make test - passed

**Expected behavior changes**
Tests pass, no TTF.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle IC + this change

**Additional context**
nasa/cFS#136

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:FastTrack, unit-test",https://github.com/nasa/cFE/pull/866
fix #862 - unsub of a message ID that is already unsubbed,"Closes #862 

**Describe the contribution**
After the changes implemented in #101, there may be routing table entries with no subscribers (RoutePtr->ListHeadPtr would be NULL.) This could cause a seg-fault. Also, even if there are entries in the routing table, there will be no event generated if the unsubscribe does not find a matching route entry.

**Testing performed**
Ran unit test (with updated event count.)

**Expected behavior changes**
Repeated unsubscriptions should function fine, generating an informational event if there is not a current subscription.

**System(s) tested on**
Debian 10.5

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",,https://github.com/nasa/cFE/pull/865
"Fix #863, Add debug message from SendEvents","**Describe the contribution**
Fix #863 - added debug message

**Testing performed**
Built and ran test (used to debug failure in https://github.com/nasa/cFS/pull/136)

**Expected behavior changes**
Now prints EID and Spec when stub APIs are called in debug mode.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: main bundle + this commit

**Additional context**
None.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:FastTrack",https://github.com/nasa/cFE/pull/864
Add debug messages from CFE_EVS_SendEvent stubs,"**Is your feature request related to a problem? Please describe.**
Requires code changes to debug event messages

**Describe the solution you'd like**
Print a debug message to make event message debugging easier (just pass in `-D` and review messages sent)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/issues/863
"If a message is subscribed, then unsubscribed, additional unsubscribes do not raise error events ","**Describe the bug**
If a message is subscribed, then unsubscribed, additional unsubscribes do not raise error events 

**To Reproduce**
Have SB subscribe to a message
Have SB unsubscribe to that message
Have SB unsubscribe again to that message

**Expected behavior**
Event message should be raised

**Code snips**
https://github.com/nasa/cFE/blob/08f6eab17702eac689a468974a32af8d41d4362a/fsw/cfe-core/src/sb/cfe_sb_api.c#L1059-L1112

If a message was previously subscribed to, and all pipes subscribing to it were subsequently unsubscribed, and an additional unsubscribe is issued, a valid routing index would still exist in the msgmap table, and thus an error event would not be raised.

**System observed on:**
N/A, discovered via code inspection


**Additional context**
N/A

**Reporter Info**
John N Pham, Northrop Grumman
",bug,https://github.com/nasa/cFE/issues/862
Integration Candidate: 2020-09-02,"**Describe the contribution**
Fix #815 
Fix #823 
Fix #851 


**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/136/checks

**Expected behavior changes**
PR #817 - In the next major CFE release, this code will be no longer supported at all. It should be removed early in the cycle
to avoid needing to maintain this compatibility code.

PR #857 - The `CFE_ES_FindCDSInRegistry` function had an unusual loop control structure with mixed types of signed and unsigned. This has the possibility of being infinite if the `MaxNumRegEntries` is zero due to the way the end condition is structured. Simplify to be like other loops and use unsigned int control variable.

PR #852 -  Fixes the cast-align error (use the aligned Msg since it's available already).

HOTFIX-20200902 - Fix sb unit test setup issue.

HOTFIX 20200902 - Update documentation links for deprecated symbols. 

HOTFIX 20200902 - Fix SB Test_CleanupApp_API AppID.

**System(s) tested on**
Ubuntu - CI

**Additional context**
https://github.com/nasa/cFS/pull/136

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
Joseph Hickey, Vantage Systems, Inc.

",,https://github.com/nasa/cFE/pull/861
"Fix #828, Spacecraft ID sample set to historical value (0x42)","**Describe the contribution**
This is a copy of #829 but targeting 7.0 (main development branch via the integration-candidate)

Fix #828 - set spacecraft ID in sample targets.cmake to 0x42

**Testing performed**
Nominal build and test

**Expected behavior changes**
Spacecraft ID back to historical value (some toolchains depend on it).  Verified at PSP startup, reported as 66 (0x42).

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main (w/ cfe/osal main) + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",backport,https://github.com/nasa/cFE/pull/860
"Fix #797, refactor internal table/id management","**Describe the contribution**
Introduce wrapper/accessor functions to look up table entries by ID for ES & EVS subsystems.

__Do not use AppID as a table index__.

Note - This does not change existing external APIs and AppIDs are still zero-based uint32.  This only changes the internal
structures to remove use of ID as an array index, and to use a lookup function to locate the table entry from an ID.  All entry access is then performed via the table entry pointer, rather than as an array index.

This provides the groundwork for abstract IDs without actually changing anything fundamental about resource IDs.

Fixes #797 

**Testing performed**
Build and sanity check CFE - start up apps and send commands, confirm normal operation
Run all unit tests.

**Expected behavior changes**
No impact to behavior - internal refactoring only.
API additions to support more abstract resource IDs.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, unit-test",https://github.com/nasa/cFE/pull/859
Scrub CFE to use correct type for OSAL IDs,"**Is your feature request related to a problem? Please describe.**
nasa/osal#568 introduces a proper typedef for OSAL IDs: `osal_id_t`

**Describe the solution you'd like**
The CFE needs to be scrubbed to use this typedef whenever storing an OSAL ID, rather than `uint32`

**Describe alternatives you've considered**
Keep using `uint32` as-is, but that defeats the purpose of having a typedef.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/858
"Fix #823, avoid infinite loop in CDS registry find","**Describe the contribution**
The CFE_ES_FindCDSInRegistry function had an unusual loop control structure with mixed types of signed and unsigned.  This has the possibility of being infinite if the MaxNumRegEntries is zero due to the way the end condition is structured.  Simplify to be like other loops and use unsigned int control variable.

Fixes #823 

**Testing performed**
Build and sanity check CFE
Run all unit tests

**Expected behavior changes**
No impact to behavior so long as CFE was configured where the number of CDS entries is not zero.
If configured to be zero, this avoids an infinite loop.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/857
"Apply #853 to Bootes, Set Revision to 99 for development build","## Describe the contribution
Fix #830 for Bootes

## Testing performed
Built and ran locally based on bundle tag for bootes-rc1
Built in CI, See https://travis-ci.com/github/astrogeco/cFS/builds/189834136

## Expected behavior changes
Revision version number now reports 99 during development versions. ES Housekeeping data reports 6.7.99 in the version string.

## System(s) tested on
Built and ran on Docker container.

## Additional context
Approved for main branch in <https://github.com/nasa/cFE/pull/853>
See also <https://github.com/nasa/osal/pull/587>

## Third party code
None

## Contributor Info 
_All information REQUIRED for consideration of pull request_

Gerardo E. Cruz-Ortiz, NASA-GSFC",backport,https://github.com/nasa/cFE/pull/856
"Have ""make test"" provide full stats on the pass/fail ratio of the asserts ","**Is your feature request related to a problem? Please describe.**
When running ```make test``` it only gives information about which testrunner had at least 1 failing assert.  This is useful, but very limited.

**Describe the solution you'd like**
Each test file run by ```make test``` provide a ""fail asserts / total asserts"" in the output.

**Describe alternatives you've considered**
Running each testrunner individually to get these results.
Writing my own bash script.

**Additional context**
Could be added as an additional runner ```make test/stats```?

**Requester Info**
Alan Gibson NASA GSFC/587
","enhancement, wontfix, unit-test",https://github.com/nasa/cFE/issues/855
Cast align issue in cfe_es_task.c - CFE_ES_TaskPipe,"**Describe the bug**
```
/home/jhageman/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_task.c: In function ‘CFE_ES_TaskPipe’:
/home/jhageman/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_task.c:635:52: warning: cast increases required alignment of target type [-Wcast-align]
  635 |                         CFE_ES_SendMemPoolStatsCmd((CFE_ES_SendMemPoolStats_t*)Msg);
```

**To Reproduce**
Build on gcc 8+ with cast-align=strict

**Expected behavior**
Clean build

**Code snips**
https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/es/cfe_es_task.c#L632-L637

**System observed on:**
 - Hardware: arm64
 - OS: Ubuntu 20.04
 - Versions bundle + mods to cast-align=strict

**Additional context**
#851, #852 

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/854
"Fix #830, Set Revision to 99 for development build","**Describe the contribution**
Fix #830

**Testing performed**


**Expected behavior changes**
Revision version number now reports `99` during development versions. ES Housekeeping data reports `6.7.99` in the version string.

**System(s) tested on**
Built and ran on Docker container. 

**Additional context**
Also see nasa.osal#584

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA-GSFC",,https://github.com/nasa/cFE/pull/853
"Fix #851, Pass aligned message into CFE_MSG_ComputeCheckSum","**Describe the contribution**
Fix #851 - Fixes the cast-align error (use the aligned Msg since it's available already)

**Testing performed**
Standard build and unit test, passes

**Expected behavior changes**
No more alignment error

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","bug, CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/852
RPi4 make process throws alignment error,"Following the ""quick start"" section of the README, generates an error and make failure:
```
Scanning dependencies of target msg
[ 83%] Building C object msg/CMakeFiles/msg.dir/src/cfe_msg_ccsdspri.c.o
[ 83%] Building C object msg/CMakeFiles/msg.dir/src/cfe_msg_init.c.o
[ 84%] Building C object msg/CMakeFiles/msg.dir/src/cfe_msg_msgid_shared.c.o
[ 85%] Building C object msg/CMakeFiles/msg.dir/src/cfe_msg_sechdr_checksum.c.o
/home/pi/src/NASA/cFS/cfe/modules/msg/src/cfe_msg_sechdr_checksum.c: In function ‘CFE_MSG_GenerateChecksum’:
/home/pi/src/NASA/cFS/cfe/modules/msg/src/cfe_msg_sechdr_checksum.c:82:49: error: cast increases required alignment of target type [-Werror=cast-align]
     cmd->Sec.Checksum = CFE_MSG_ComputeCheckSum((CFE_MSG_Message_t *)cmd);
                                                 ^
cc1: all warnings being treated as errors
make[7]: *** [msg/CMakeFiles/msg.dir/build.make:102: msg/CMakeFiles/msg.dir/src/cfe_msg_sechdr_checksum.c.o] Error 1
make[6]: *** [CMakeFiles/Makefile2:613: msg/CMakeFiles/msg.dir/all] Error 2
make[5]: *** [Makefile:141: all] Error 2
make[4]: *** [CMakeFiles/native_default_cpu1-all.dir/build.make:57: CMakeFiles/native_default_cpu1-all] Error 2
make[3]: *** [CMakeFiles/Makefile2:298: CMakeFiles/native_default_cpu1-all.dir/all] Error 2
make[2]: *** [CMakeFiles/Makefile2:177: CMakeFiles/mission-all.dir/rule] Error 2
make[1]: *** [Makefile:214: mission-all] Error 2
make: *** [Makefile:120: all] Error 2
pi@renegade:~/src/NASA/cFS $ 
```
At first I thought this was because I was running on the 64-bit Beta Raspberry Pi OS, so I tried it on a different Pi4, this one running the stable 32-bit distribution (Buster, latest release (8/20), updated yesterday (8/30)). It fails on the 32-bit version also. ",enhancement,https://github.com/nasa/cFE/issues/851
Hotfix IC-20200826: Remove deprecated doxygen references,"**Describe the contribution**
Hotfix  IC-20200826, Removes deprecated doxygen references from osalmain.dox to fix cFS bundle build errors

**Testing performed**
Generated doxygen files and ensured there were not errors or warnings

**System(s) tested on**
cFS Dev Server
OS: Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Contributor Info - All information REQUIRED for consideration of pull request**
Yasir Majeed Khan, Emergent Space Tech",CCB:Approved,https://github.com/nasa/cFE/pull/850
Integration Candidate: 2020-08-26,"**Describe the contribution**
Fix #798 
Fix #818 
Fix #822 
Fix #825 
Fix #831 
Fix #836 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/134/checks

**Expected behavior changes**
PR #799 - Removes reference from documentation.

PR #834 - CFE_SB_SendMsg stub now behaves the same as CFE_SB_TimeStampMsg (copies message pointer from local).  No longer need to emulate CFE_SB_InitMsg from test code, set the API/stub data buffers directly.

PR #826 - Removed iterator modification from within the loop... replaced with break.

PR #832 - Resolves loop iterator size too small for comparison.

PR #842 - Replaced `CFE_MISSION_SPACECRAFT_ID` use with `CFE_PSP_GetSpacecraftId()` and updated unit test

**System(s) tested on**
Ubuntu - CI

**Additional context**
https://github.com/nasa/cFS/pull/134

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC",,https://github.com/nasa/cFE/pull/849
"Fix #828, spacecraft id hex, add to Bootes","**Describe the contribution**
Fix #828 - set spacecraft ID in sample targets.cmake to 0x42

**Testing performed**
Nominal build and test

**Expected behavior changes**
Spacecraft ID back to historical value (some toolchains depend on it).  Verified at PSP startup, reported as 66 (0x42).

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main (w/ cfe/osal main) + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",invalid,https://github.com/nasa/cFE/pull/848
CFE_ES_ERR_SYS_LOG_TRUNCATED Value Isn't Unique,"**Describe the bug**
`CFE_ES_LIB_ALREADY_LOADED` and `CFE_ES_ERR_SYS_LOG_TRUNCATED` are both defined to be `((int32)0x44000028)` (in [`cfe_error.h`](https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_error.h#L634)).

**To Reproduce**
N/A

**Expected behavior**
I think `CFE_ES_ERR_SYS_LOG_TRUNCATED` should instead be set to `((int32)0xC4000029)` or some other unique value that follows the status code format.

**Code snips**
N/A

**System observed on:**
N/A

**Additional context**
N/A

**Reporter Info**
Keegan Moore, NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/846
Unsafe macro in cfe_version.h,"**Is your feature request related to a problem? Please describe.**
Unsafe macro (violates coding standard)

https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_version.h#L48

**Describe the solution you'd like**
Add parentheses

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",invalid,https://github.com/nasa/cFE/issues/845
Consolidate bit manipulation (and other general) macros,"**Is your feature request related to a problem? Please describe.**
Various services define various bit manipulation or other general macros, repeated/inconsistent logic.

Bit manipulation:
https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_sb.h#L114-L120

https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_es.h#L60-L63

https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/ccsds.h#L66-L73

OS_PRINTF:
https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_es.h#L51-L58

https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_evs.h#L53-L60

**Describe the solution you'd like**
Better scoping, consolidation into general bit manipulation macro header

**Describe alternatives you've considered**
None.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/844
Remove/replace/deprecate questionable macros in SB,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/fsw/cfe-core/src/inc/cfe_sb.h#L122-L138

**Describe the solution you'd like**
Consider replacing or removing (deprecating).

**Describe alternatives you've considered**
None

**Additional context**
Trying to write specific tickets related to #172 

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/843
"Fix #836, Replace CFE_MISSION_SPACECRAFT_ID with CFE_PSP_GetSpacecraftId()","**Describe the contribution**
Fix #836 - replaced CFE_MISSION_SPACECRAFT_ID use with CFE_PSP_GetSpacecraftId() and updated unit test

**Testing performed**
Built version 2 with unit tests, executed and passed

**Expected behavior changes**
No longer uses soon to be deprecated CFE_MISSION_SPACECRAFT_ID

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle integration candidate + this change

**Additional context**
Depends on changes in integration candidate

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/842
Document nested usage of UT_ADD_TEST and clarify nomenclature for individual versus groups of tests,"## Describe the problem

The `UT_ADD_TEST` call has some limitations as addressed in nasa/cFE#840.  Some solutions are discussed in that PR. 

## Proposed Solutions
 
1. Have `UT_ADD_TEST` handle ""nested"" unit tests, OR
2. Develop a nomenclature for unit test functions that explicitly indicates whether there are nested unit tests and then rename unit tests accordingly, OR
3. Document the anti-pattern, OR
4. Split up all unit tests to ensure only one test per function and make this a design pattern.



## Additional Context

_Originally posted by @skliper in https://github.com/nasa/cFE/pull/840#issuecomment-680193849_

>Related to nasa/osal#577.  Individual tests are added w/ the UT_ADD_TEST call.  Some tests are grouped at a lower level (Test_MSG_CCSDSExt is a group of tests), and those functions are called directly.  Same pattern is used in `sb`:
>
>https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/unit-test/sb_UT.c#L134-L135

","duplicate, docs, unit-test",https://github.com/nasa/cFE/issues/841
HOTFIX - no longer add unit tests from within unit tests in msg UT,"**Describe the contribution**
HOTFIX - unit tests added from within unit tests will not execute, replaced this pattern with direct calls to the main subtest setup routine.

**Testing performed**
Build unit tests and ran, all tests (including subtests) ran.

**Expected behavior changes**
All tests run

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: integration candidate bundle + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/840
"Msg module unit tests add tests within tests, which don't get executed with the current osal/ut_assert","**Describe the bug**
Msg unit tests utilized a pattern where subtests were added within other tests.

**To Reproduce**
Build and run msg unit test, observe the subtests do not execute.

**Expected behavior**
All tests should execute.

**Code snips**
See PR.

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Integration candidate

**Additional context**
N/A

**Reporter Info**
Jacob Hageman
",enhancement,https://github.com/nasa/cFE/issues/839
HOTFIX: Deprecated time format verify logic fix,"**Describe the contribution**
HOTFIX - Changes the time format compile time verification logic.  Old logic would report error if none of the defines exist, new logic only reports error if the time format is not the default (also works if neither are defined).

**Testing performed**
Built with time format set to default, time format defines not defined, and time format set to non-default.  Responded as expected.

**Expected behavior changes**
No longer reports error if defines are removed (as is the case in the sample config)

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: integration candidate bundle + this change

**Additional context**
Fix to PR #801

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/838
Fix #808: Updated the initial test to include the ES Info API calls and renamed…,"… the source file to es_info_test.c.

**Describe the contribution**
Added additional ES API tests using UT_Assert and printing info structures returned from App and Task Info calls.

**Testing performed**
Testing was done based upon the expected returns from these API functions.

**Expected behavior changes**
No impact

**System(s) tested on**
 -cFE bootes release candidate

**Contributor Info - All information REQUIRED for consideration of pull request**
Walt Moleski GSFC Code 582",duplicate,https://github.com/nasa/cFE/pull/837
Replace msg module use of CFE_MISSION_SPACECRAFT_ID with CFE_PSP_GetSpacecraftId(),"**Is your feature request related to a problem? Please describe.**
CFE_MISSION_SPACECRAFT_ID is pending deprecation, see #827

**Describe the solution you'd like**
Replace with CFE_PSP_GetSpacecraftId()

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/836
Tables are not built for static apps,"**Describe the bug**
Tables are not built for static apps, only dynamic apps.
(only for apps in TGT\<x\>_APPLIST, not for apps in TGT\<x\>_STATIC_APPLIST)

**Expected behavior**
Tables should be built for both types of apps

**Code snips**
add_cfe_tables() loops over APP_INSTALL_LIST:
cfs/cmake/arch_build.cmake/line:120:
```
    foreach(TGT ${APP_INSTALL_LIST})
     <... snip ...>
      # IMPORTANT: This rule assumes that the output filename of elf2cfetbl matches
      # the input file name but with a different extension (.o -> .tbl)
      # The actual output filename is embedded in the source file (.c), however
      # this must match and if it does not the build will break.  That's just the
      # way it is, because NO make system supports changing rules based on the
      # current content of a dependency (rightfully so).
      add_custom_command(
        OUTPUT ""${TABLE_DESTDIR}/${TBLWE}.tbl""
        COMMAND ${CMAKE_C_COMPILER} ${TBL_CFLAGS} -c -o ${TBLWE}.o ${TBL_SRC}
        COMMAND ${MISSION_BINARY_DIR}/tools/elf2cfetbl/elf2cfetbl ${TBLWE}.o
        DEPENDS ${MISSION_BINARY_DIR}/tools/elf2cfetbl/elf2cfetbl ${TBL_SRC}
        WORKING_DIRECTORY ${TABLE_DESTDIR}
      )
      # Create the install targets for all the tables
      install(FILES ${TABLE_DESTDIR}/${TBLWE}.tbl DESTINATION ${TGT}/${INSTALL_SUBDIR})
    endforeach(TGT ${APP_INSTALL_LIST})
```
But, process_arch() doesn't populate APP_INSTALL_LIST for static apps:
cfs/cmake/arch_build.cmake/line:445:
```
  set(APP_INSTALL_LIST)
  foreach(APP ${TGTSYS_${SYSVAR}_STATICAPPS})
    message(STATUS ""Building Static App: ${APP}"")
    add_subdirectory(""${${APP}_MISSION_DIR}"" apps/${APP})
  endforeach()
```
only for dynamic apps:
cfs/cmake/arch_build.cmake/line:473:
```
  foreach(APP ${TGTSYS_${SYSVAR}_APPS})
    set(APP_INSTALL_LIST ${TGTLIST_${APP}})
    message(STATUS ""Building App: ${APP} install=${APP_INSTALL_LIST}"")
    add_subdirectory(""${${APP}_MISSION_DIR}"" apps/${APP})
  endforeach()
```
**System observed on:**
- cFE 6.7

**Reporter Info**
David DeGroote
Flight Software Engineer
1016 N.Lincoln Avenue
Pittsburgh, PA 15233
Dave.DeGroote@astrobotic.com",bug,https://github.com/nasa/cFE/issues/835
"Fix #818, Return message address from CFE_SB_SendMsg stub","**Describe the contribution**
Fix #818, CFE_SB_SendMsg stub now behaves the same as CFE_SB_TimeStampMsg (copies message pointer from local)
Fix #825, No longer need to emulate CFE_SB_InitMsg from test code, set the API/stub data buffers directly.

**Testing performed**
Built with tests, tests ran and passed.  Depends on update to unit test in sample_app, nasa/sample_app#90.

**Expected behavior changes**
Stub returns message address instead of copy of message.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main (+cfe/osal main) + this commit.

**Additional context**
nasa/sample_app#90

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, unit-test",https://github.com/nasa/cFE/pull/834
Integration Candidate: 2020-08-19,"**Describe the contribution**
Fix #794 
Fix #795 
Fix #92 
Fix #711 
Fix #733 
Fix #736 
Fix #597 
Fix #529 
Fix #781 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/130/checks

**Expected behavior changes**
PR #819 - Add msg stubs, update `SB_UT` to use them, and remove msg module include from unit tests

PR #801 - Collapses time options down to just 32 bit second, 16 bit subsecond, always big endian. Removes old defines, and triggers an error if the configuration is set to a format that was removed.

PR #726 - Enables source selection and out-of-tree mission-defined overrides in the msg directory

**System(s) tested on**
Ubuntu - CI

**Additional context**
https://github.com/nasa/cFS/pull/130

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC",,https://github.com/nasa/cFE/pull/833
"Fix #831, Resolve int size mismatch in loop comparison","**Describe the contribution**
Fix #831 - resolves loop iterator size too small for comparison

**Testing performed**
Build and unit test passed.

**Expected behavior changes**
Resolves LGTM warning

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main (+ cfe/osal main) + this change.

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC
","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/832
LGTM issue - integer comparison size mismatch,"**Is your feature request related to a problem? Please describe.**
```
/* send an event for each pipe write error that may have occurred */
--
1489 | for(i=0;i < SBSndErr.EvtsToSnd; i++)
  | Comparison between i of type uint16 and EvtsToSnd of wider type uint32.
1490 | {
1491 | if(SBSndErr.EvtBuf[i].EventId == CFE_SB_MSGID_LIM_ERR_EID)
```

In theory if EvtsToSend is > max uint16 this could infinite loop.  Pretty unlikely, but definitely shouldn't be in flight code.

**Describe the solution you'd like**
i should be sized appropriately

**Describe alternatives you've considered**
None

**Additional context**
Split off from #431

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/831
"ES reports version 6.7.0 in telemetry, even when it's built off a development branch","**Describe the bug**
Misidentifies version

**To Reproduce**
Look at version in ES housekeeping packet.

**Expected behavior**
System should report a consistent version number at startup, from noops, and in tlm.  Could go back to the old way where development versions all report a revision of 99.

**Code snips**
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/es/cfe_es_task.c#L333-L340

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle.

**Additional context**
Got out of sync with new versioning scheme

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/830
"Fix #828, Spacecraft ID sample set to historical value (0x42)","**Describe the contribution**
Fix #828 - set spacecraft ID in sample targets.cmake to 0x42

**Testing performed**
Nominal build and test

**Expected behavior changes**
Spacecraft ID back to historical value (some toolchains depend on it).  Verified at PSP startup, reported as 66 (0x42).

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main (w/ cfe/osal main) + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, CCB:FastTrack, cFS-Bootes, dependency, backport",https://github.com/nasa/cFE/pull/829
Spacecraft ID sample setting in targets.cmake should be 0x42,"**Is your feature request related to a problem? Please describe.**
Historically sample spacecraft ID has been 0x42, when converting to cmake it became 42 (decimal)... this leads to errors in toolchains expecting the historical value.

**Describe the solution you'd like**
Change to 0x42

**Describe alternatives you've considered**
None

**Additional context**
#710

**Requester Info**
Jacob Hageman - NASA/GSFC
","bug, build-system, cFS-Bootes",https://github.com/nasa/cFE/issues/828
"Deprecate CFE_PLATFORM_CPU_ID, CFE_PLATFORM_CPU_NAME, and CFE_MISSION_SPACECRAFT_ID ","**Is your feature request related to a problem? Please describe.**
Got bit by this again (used CFE_MISSION_SPACECRAFT_ID when CFE_PSP_GetSpacecraftId() should have been used).  They also currently return different numbers since the define has historically been 0x42, but the setting in targets.cmake is 42 (decimal).

Related to #710

**Describe the solution you'd like**
Deprecate, actually suggest this error out at compile if defined since it leads to bugs (mismatch of IDs) in favor of CFE_PSP_GetSpacecraftId() and CFE_PSP_GetProcessorId() (and eventually CFE_PSP_GetProcessorName(), See nasa/PSP#165)

**Describe alternatives you've considered**
None.

**Additional context**
#710 

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, deprecate",https://github.com/nasa/cFE/issues/827
"Fix #822, Remove iterator modification in loop","**Describe the contribution**
Fix #822 - removed iterator modification from within the loop... replaced with break.

**Testing performed**
Built and ran unit tests.

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle (and cfe/osal main) + this change

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/826
Provide a unit test utility to create software bus messages,"**Describe the bug**
The sample_app example of how to create a software bus message for use by the test is to use the CFE_SB_InitMsg stub.  As described in https://github.com/nasa/sample_app/issues/89, tests should not be using stubs directly for utility operations. 

**To Reproduce**
N/A

**Expected behavior**
Add a ut_assert utility function that provides this functionality

**Code snips**
https://github.com/nasa/sample_app/blob/c1348d6fcb7f911396c9928a1779ddad6fe0c339/unit-test/coveragetest/coveragetest_sample_app.c#L414-L417

**System observed on:**
RHEL 7.6

**Additional context**
Relates to https://github.com/nasa/sample_app/issues/89 and https://github.com/nasa/cFE/issues/818

**Reporter Info**
Alan Gibson NASA GSFC/587",enhancement,https://github.com/nasa/cFE/issues/825
"Review function, snprintf, to avoid buffer overflow","**Describe the bug**
snprintf, is used which may cause overflow issues. Not urgent.  

**Expected behavior**
Review functions for security reasons. If needed, use a safer function such as sprintf_s. 
https://docs.microsoft.com/en-us/cpp/c-runtime-library/security-enhanced-versions-of-crt-functions?view=vs-2019

**Code snips**
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/es/cfe_es_task.c#L381
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/es/cfe_es_task.c#L385
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/es/cfe_es_task.c#L391
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/es/cfe_es_task.c#L399
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/fs/cfe_fs_api.c#L396

**Additional context**
References:
- https://docs.roguewave.com/en/klocwork/current/sv.banned.required.sprintf
- https://cwe.mitre.org/data/definitions/676.html
- https://help.semmle.com/wiki/display/CCPPOBJ/Potentially+overflowing+call+to+snprintf
- http://tldp.org/HOWTO/Secure-Programs-HOWTO/dangers-c.html
- https://github.com/intel/safestringlib/wiki/SDL-List-of-Banned-Functions
- https://linux.die.net/man/3/snprintf
- https://securitylab.github.com/research/cve-2018-18820-snprintf-vulnerability-icecast

**Reporter Info**
Ariel Adams, ASRC Federal
","invalid, security",https://github.com/nasa/cFE/issues/824
CFE_ES_FindCDSInRegistry() infinte loop if registry size is zero,"**Describe the bug**
The loop inside this function has a poorly-constructed condition for ending the loop.  It is comparing a `uint32` type to an `int32` type, and in the event that the `MaxNumRegEntries` is zero, it becomes impossible for this condition to be true and the loop runs forever.

**To Reproduce**
Easy to see in unit test if one clears the `CFE_ES_Global` data structure between tests.

**Expected behavior**
Loops should never have ending conditions that are impossible to reach unless they are supposed to be infinite.  In the event that `CFE_ES_Global.CDSVars.MaxNumRegEntries` is 0, it should exit immediately.

**Code snips**
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/es/cfe_es_cds.c#L657

It is generally a bad idea to do any sort of relational comparison (greater than/less than) between signed and unsigned types, C++ actually errors about this but C does not.

**System observed on:**
Ubuntu 20.04

**Additional context**
This variable is initialized in FSW from the config `CFE_PLATFORM_ES_CDS_MAX_NUM_ENTRIES` which does say that the value needs to be at least 8.  But during unit test the value can be zero.

Interestingly, `CFE_ES_FindFreeCDSRegistryEntry` swaps the weirdly-structured do-while for a normal while loop, so it is OK however it still does a signed/unsigned compare which should be fixed.

**Reporter Info**
Joseph Hickey, Vantage Systems. Inc.
",bug,https://github.com/nasa/cFE/issues/823
Loop counters should not be modified in the body of the loop.,"**Describe the bug**
Counter variable, i, is modified inside the for loop, which may lead to an infinite loop. Should use while loop instead. 

**Location**
root/cfe/fsw/cfe-core/src/tbl/cfe_tbl_task_cmds.c
lines 1373 - 1380

**Expected behavior**
Use while loop or add comments explaining the reasoning of using for loop for future developers (must ensure loop issues will not occur such as the code looping infinitely). If using while loop, please provide maximum limit for counter. 

**Code snips**
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/tbl/cfe_tbl_task_cmds.c#L1373-L1380


**Observed on:**
https://lgtm.com/projects/g/nasa/cFS/snapshot/20ff9b0c5aa6653815b9cd2feb4a02180b239737/files/cfe/fsw/cfe-core/src/tbl/cfe_tbl_task_cmds.c?sort=name&dir=ASC&mode=heatmap

**Additional context**
References: https://help.semmle.com/wiki/display/CCPPOBJ/For+loop+variable+changed+in+body

**Reporter Info**
Ariel Adams, ASRC Federal
","enhancement, security",https://github.com/nasa/cFE/issues/822
Further break down message module to facilitate customization,"**Is your feature request related to a problem? Please describe.**
Currently customization of the monolithic message module can either be done by ""cherry-picking"" code from the core and customizing/adding/replacing whatever needs to be customized or ""clone-and-own"" the entire module.  ""Cherry-pick"" is fragile since it depends on the internal file layout and structure of the message module (implementation), ""clone-and-own"" is a lot of duplicated code and the possibility of divergence from core development.

It's a similar concept as for a custom OSAL depending on shared or portable elements in the repo, in that cherry-picking is dependent on implementation, not just APIs and the alternative is clone-and-own.

**Describe the solution you'd like**
Break the message module down into the different parts of the header - CCSDS Primary, CCSDS Extended, CFS Secondary such that they can be included by projects as building blocks, and the ""cherry-pick"" vs ""clone-and-own"" is then in the context of smaller modules.  Basically if a project wants to customize just the time format, they could either clone-and-own the CFS Secondary implementation or cherry pick.  The primary and extended headers could be used as is.

**Describe alternatives you've considered**
Approach is a project trade, this change makes that decision a smaller impact (less code either way).  The code was separated parts of the header by file already as part of #726 to make cherry-picking easier (and secondary is separated by field in the header), but also makes breaking into separate modules easier.

**Additional context**
#726, #801 
https://github.com/nasa/cFE/pull/726#discussion_r472625322

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/821
Create CHANGELOG.md and move development history out of Readme.md,"**Is your feature request related to a problem? Please describe.**
The development history is clogging up useful information in the Readme

**Describe the solution you'd like**
Move history to a new file named `Chengelog.md`

**Describe alternatives you've considered**
Move development history to bottom of Readme file

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
","duplicate, docs",https://github.com/nasa/cFE/issues/820
"Fix #794, Add msg stubs and update SB UT","**Describe the contribution**
Fix #794 - Add msg stubs, update SB UT to use them, and remove msg module include from unit tests

**Testing performed**
Standard build with unit tests enabled, passed.

**Expected behavior changes**
UTs will now use msg stubs.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle + #726 + this change

**Additional context**
Depends on #726 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, unit-test",https://github.com/nasa/cFE/pull/819
Why does CFE_SB_SendMsg stub not save the passed in MsgPtr like CFE_SB_TimeStampMsg stub does?,"**Describe the bug**
CFE_SB_SendMsg copies from local the contents of the passed in message pointer, but CFE_SB_TimeStampMsg copies from local the value of MsgPtr.  

**To Reproduce**
Steps to reproduce the behavior:
1. https://github.com/nasa/cFE/blob/5ac3f0a02038b82894c1803339f92b294ae9f0b7/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L474-L494

2. Compare with https://github.com/nasa/cFE/blob/5ac3f0a02038b82894c1803339f92b294ae9f0b7/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L709-L715

**Expected behavior**
Default CFE_SB_SendMsg stub behavior should be like CFE_SB_TimeStampMsg.  A hook should be required to provide extra behavior.

**Code snips**
See above.

**System observed on:**
RHEL 7.6

**Additional context**
N/A

**Reporter Info**
Alan Gibson NASA GSFC/587
","question, unit-test",https://github.com/nasa/cFE/issues/818
"Fix #815, remove all deprecated code","**Describe the contribution**
In the next major CFE release, this code will be no longer supported at all.  It should be removed early in the cycle
to avoid needing to maintain this compatibility code.

Fixes #815 

**Testing performed**
Build and run, sanity check CFE.
Run all unit tests.

**Expected behavior changes**
Removes code previously deprecated.
Identical to previous build if the `OMIT_DEPRECATED=true` flag was set during configuration.

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11.3

**Additional context**
Also depends on nasa/to_lab#55 - should be merged in same cycle.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/817
Integration Candidate 2020-08-12,"**Describe the contribution**

Fix #587 
Fix #608 
Fix #759 
Fix #778 
Fix #787 

**Testing performed**

Bundle Test - https://github.com/nasa/cFS/pull/127/checks

**Expected behavior changes**

PR #784 - Deprecates `CFE_SB_GetLastSenderId()` API by introducing new `CFE_OMIT_DEPRECATED_6_8` tag

PR #789 - Documentation update remove deleted requiremements

PR #804 - Add a new *cfe_assert* module for functional testing by making it possible to load the UT assert object code as a CFE library. These are compiled as separate, independent modules and only loaded on demand. Also includes a draft example for cFE testing, which calls some basic ES AppId functions.

**System(s) tested on**
Bundle CI - https://github.com/nasa/cFS/pull/127/checks

**Additional context**
Part of nasa/cfs#127

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher D. Knight, NASA-ARC
Jacob Hageman, NASA-GSFC
Joseph Hickey, Vantage Systems, Inc. ",,https://github.com/nasa/cFE/pull/816
Remove CFE deprecated code for next release,"**Is your feature request related to a problem? Please describe.**
Now that the ""6.8.x"" release branch has been created, the next release should remove all code/functions that are currently marked as deprecated.

**Describe the solution you'd like**
Removal of all code currently contained within an `OMIT_DEPRECATED` conditional compile switch.

**Additional context**
The removal only applies to ""main"" branch - not the 6.7.x release branch, where it will continue to exist for that release series.  This assumes the next release (main) will become version 7.0.

There are other changes currently in development which do break some deprecated items - hence why I'd like to remove this sooner rather than later, as it saves the work of updating/fixing this old code if the intent is to remove it anyway.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, deprecate",https://github.com/nasa/cFE/issues/815
Add functional tests for cFE Miscellaneous APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Miscellaneous APIs
– CFE_ES_CalculateCRC - Calculate a CRC on a block of memory.
– CFE_ES_WriteToSysLog - Write a string to the cFE System Log.
– CFE_ES_ProcessAsyncEvent - Notification that an asynchronous event was detected by the underlying
OS/PSP.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/issues/814
Add functional tests for cFE Generic Counter APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Generic Counter APIs
– CFE_ES_RegisterGenCounter - Register a generic counter.
Generated by Doxygen
10 CONTENTS
– CFE_ES_DeleteGenCounter - Delete a generic counter.
– CFE_ES_IncrementGenCounter - Increments the specified generic counter.
– CFE_ES_SetGenCount - Set the specified generic counter.
– CFE_ES_GetGenCount - Get the specified generic counter count.
– CFE_ES_GetGenCounterIDByName - Get the Id associated with a generic counter name.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/issues/813
Add functional tests for cFE Performance Monitor APIs,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Performance Monitor APIs
– CFE_ES_PerfLogEntry - Entry marker for use with Software Performance Analysis Tool.
– CFE_ES_PerfLogExit - Exit marker for use with Software Performance Analysis Tool.
– CFE_ES_PerfLogAdd - Function called by CFE_ES_PerfLogEntry and CFE_ES_PerfLogExit macros.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/issues/812
Add cFE Memory Manager API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add cFE Memory Manager API functional tests
– CFE_ES_PoolCreate - Initializes a memory pool created by an application while using a semaphore during
processing.
– CFE_ES_PoolCreateEx - Initializes a memory pool created by an application with application specified block
sizes.
– CFE_ES_PoolCreateNoSem - Initializes a memory pool created by an application without using a
semaphore during processing.
– CFE_ES_GetPoolBuf - Gets a buffer from the memory pool created by CFE_ES_PoolCreate or CFE_ES -
_PoolCreateNoSem.
– CFE_ES_PutPoolBuf - Releases a buffer from the memory pool that was previously allocated via CFE_E -
S_GetPoolBuf.
– CFE_ES_GetMemPoolStats - Extracts the statistics maintained by the memory pool software.
– CFE_ES_GetPoolBufInfo - Gets info on a buffer previously allocated via CFE_ES_GetPoolBuf.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/issues/811
Add cFE ES Critical Data Store API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add cFE Critical Data Store API functional tests
– CFE_ES_RegisterCDS - Reserve space (or re-obtain previously reserved space) in the Critical Data Store
(CDS)
– CFE_ES_CopyToCDS - Save a block of data in the Critical Data Store (CDS)
– CFE_ES_RestoreFromCDS - Recover a block of data from the Critical Data Store (CDS)

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/issues/810
Add cFE ES Child Task API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add cFE Child Task API functional tests
– CFE_ES_RegisterChildTask - Registers a cFE Child task associated with a cFE Application.
– CFE_ES_CreateChildTask - Creates a new task under an existing Application.
– CFE_ES_DeleteChildTask - Deletes a task under an existing Application.
– CFE_ES_ExitChildTask - Exits a child task.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/issues/809
Add cFE ES Information API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add cFE Information API functional tests
– CFE_ES_GetResetType - Return the most recent Reset Type.
– CFE_ES_GetAppID - Get an Application ID for the calling Application.
– CFE_ES_GetAppIDByName - Get an Application ID associated with a specified Application name.
– CFE_ES_GetAppName - Get an Application name for a specified Application ID.
– CFE_ES_GetAppInfo - Get Application Information given a specified App ID.
– CFE_ES_GetTaskInfo - Get Task Information given a specified Task ID.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/issues/808
Add cFE Application Behavior API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add cFE Application Behavior API functional tests
– CFE_ES_RunLoop - Check for Exit, Restart, or Reload commands.
– CFE_ES_WaitForStartupSync - Allow an Application to Wait for the ""OPERATIONAL"" global system state.
– CFE_ES_WaitForSystemState - Allow an Application to Wait for a minimum global system state.
– CFE_ES_IncrementTaskCounter - Increments the execution counter for the calling task.
– CFE_ES_ExitApp - Exit a cFE Application.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC

EDIT by @skliper: removed CFE_ES_RegisterApp since it no longer exists.","enhancement, unit-test",https://github.com/nasa/cFE/issues/807
Add ES application control API functional tests,"**Is your feature request related to a problem? Please describe.**
Need open source functional tests for certifiability

**Describe the solution you'd like**
Add functional tests for cFE Application Control APIs
– CFE_ES_RestartApp - Restart a single cFE Application.
– CFE_ES_ReloadApp - Reload a single cFE Application.
– CFE_ES_DeleteApp - Delete a cFE Application.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/issues/806
"Revert ""Fix #778, add cfe assert and example lib""","Reverts nasa/cFE#779

Testing a revert to see if it will update the status on the original PR.",,https://github.com/nasa/cFE/pull/805
"Fix #778, Add CFE_Assert library and test module","**Describe the contribution**
Provides ability to load UT assert as a CFE app, and an example of using this to test some basic CFE ES functions.

This introduces a separate library for the basic UT assert functions (cfe_assert) and an app that executes the test (cfe_testrunner) rather than combining these into a single module.

Fixes #778 

Also adds a small ""howto"" document to provide an example of the lines that need to be added to `cfe_es_startup.scr` to make this run, and document the dependencies between these modules.

**Testing performed**
Build and run CFE, confirm tests execute and pass.

**Expected behavior changes**
Implements functional test framework (same as PR #779)

**System(s) tested on**
Ubuntu 20.04

**Additional context**

This replaces my original PR #779 - which had the same but as a single `cfe_assert` app.  The problem with this was that it didn't guarantee the init routine completed before the subsequent test cases were loaded, because app init is run in a separate thread, where as lib init is run synchronously within the main startup thread.

This approach requires two entries in the startup script rather than one, but does ensure that the init is race-free.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/804
Rename OMIT Deprecated flags with cFS codename instead of cFE version,"**Is your feature request related to a problem? Please describe.**
Nomenclature for deprecation can be confusing

**Describe the solution you'd like**
Create new deprecated flag for Bootes and maybe replace the deprecate 6_7 with deprecate Aquila

**Describe alternatives you've considered**
Keeping the current nomenclature

**Additional context**
Originally suggested in nasa/cfe#784

> does DEPRECATE_6_8 means that 6.8 was the last version which supports this function?

>>Yes, that is the paradigm we've been using up to this point -- the number reflects the last release were it was _not_ deprecated.  The idea of putting a version number in the tag was so we'd know which ones had ""aged out"" in a future release and should be taken out completely.  

>>However as I mentioned before now that we have a codename for API compatibility then maybe we should consider using that instead.

_Originally posted by @jphickey in https://github.com/nasa/cFE/pull/784#issuecomment-669204314_

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC",wontfix,https://github.com/nasa/cFE/issues/803
network_includes.h needs to include sioLib.h for VxWorks target,"**Describe the bug**
When using RS-422 in io_lib under VxWorks, sioLib.h needs to be included.

**To Reproduce**
1. Use the 6.8.x tag to build a cFS system for VxWorks. 
2. Include io_lib in your apps
3. Ensure io_lib builds trans_rs422.c
4. Observe build failure:

```
[ 60%] Building C object apps/io_lib/CMakeFiles/io_lib.dir/fsw/src/services/trans_rs422.c.obj
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c: In function 'IO_TransRS422Init':
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c:111: error: 'SIO_HW_OPTS_SET' undeclared (first use in this function)
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c:111: error: (Each undeclared identifier is reported only once
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c:111: error: for each function it appears in.)
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c:111: error: 'CS8' undeclared (first use in this function)
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c:111: error: 'CLOCAL' undeclared (first use in this function)
<cfs>/apps/io_lib/fsw/src/services/trans_rs422.c:111: error: 'CREAD' undeclared (first use in this function)
make[7]: *** [apps/io_lib/CMakeFiles/io_lib.dir/fsw/src/services/trans_rs422.c.obj] Error 1
make[6]: *** [apps/io_lib/CMakeFiles/io_lib.dir/all] Error 2
make[5]: *** [all] Error 2
make[4]: *** [CMakeFiles/cpu1_default_cpu1-all] Error 2
make[3]: *** [CMakeFiles/cpu1_default_cpu1-all.dir/all] Error 2
make[2]: *** [CMakeFiles/mission-all.dir/rule] Error 2
make[1]: *** [mission-all] Error 2
make: *** [all] Error 2
```

**Expected behavior**
Build should succeed.

**Code snips**
cfe/fsw/cfe-core/src/inc/network_includes.h should look like this (note the added sioLib.h line)

```
+++ b/fsw/cfe-core/src/inc/network_includes.h
@@ -42,6 +42,7 @@
     #include <arpLib.h>
     #include <netinet/in.h>
     #include <netinet/tcp.h>
+    #include <sioLib.h>
```

**System observed on:**
 - building under Ubuntu 18.04 host with VxWorks 6.9
 - Versions 
    - cFE 6.8.x
    - custom PSP and OSAL for PPC target
    - io_lib master

**Reporter Info**
Morgan Redfield, Astrobotic
",enhancement,https://github.com/nasa/cFE/issues/802
"Fix #795, Remove legacy time header format support","**Describe the contribution**
Fix #795 
Fix #92 
Collapses options down to just 32 bit second, 16 bit subsecond, always big endian.  Removes old defines, and errors out if the configuration is set to a format that was removed.

**Testing performed**
Built and `make test` with `SIMULATION=native ENABLE_UNIT_TESTS=true`, passes test.

**Expected behavior changes**
Time in header always big endian.

**System(s) tested on**
 - Hardware: cFS Dev VM
 - OS: Ubuntu 18.04
 - Versions: main bundle plus #726, with this commit on top (c039fb4 is the commit for this PR, or those marked with Fix #795)

**Additional context**
#726 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/801
Update cFE Application Developers Guide.md for message module,"**Is your feature request related to a problem? Please describe.**
Application developer's guide covers older concepts (like using uint8 and CFE_SB_TLM_HDR_SIZE for defining headers) and references the old APIs.

**Describe the solution you'd like**
Update based on msg module implementation

**Describe alternatives you've considered**
None.

**Additional context**
#726 

**Requester Info**
Jacob Hageman - NASA/GSFC",docs,https://github.com/nasa/cFE/issues/800
"Fix #798, Remove OS_Milli2Ticks document reference (deprecated)","**Describe the contribution**
Fix #798 

Removes reference from documentation.

**Testing performed**
None, documentation.

**Expected behavior changes**
None.

**System(s) tested on**
N/A

**Additional context**
nasa/osal#104

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, docs",https://github.com/nasa/cFE/pull/799
Remove OS_Milli2Ticks reference from documentation (deprecated),"**Is your feature request related to a problem? Please describe.**
Deprecating per nasa/osal#104

**Describe the solution you'd like**
Removes references from the developers guide.

**Describe alternatives you've considered**
N/A

**Additional context**
nasa/osal#104

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, docs",https://github.com/nasa/cFE/issues/798
Improve resource management and internal consistency in ES,"**Is your feature request related to a problem? Please describe.**
Executive Services (ES) maintains many internal tables of resources/objects, which track applications, libraries, tasks, counters, and memory pools, etc.

There is a lot of inconsistency in how these internal objects are managed/tracked.  Some have a `RecordUsed` boolean that is set true/false depending on whether the record is used.  App table uses the `AppState` member.  The memory pool passes around direct pointers which are dereferenced (potentially dangerous). 

Furthermore, all ""ID"" values issued to external apps are zero based, and therefore can easily alias other object types or even other objects of the same type.  For instance, if one app had ID ""5"" and it was deleted, and after this a new/different app was started, the new app might also be assigned ID ""5"" ... this means any old/stale reference to AppID 5 will now be referring to the wrong app.

**Describe the solution you'd like**
Define a properly abstract ""resource ID"" type and use it consistently across all these various internal tables.  The abstraction should be based on/compatible with what OSAL does for its internal records.

- The ""id"" value also serves as a marker to indicate whether the respective table entry is in use or not.
- Zero is reserved as an invalid value, and marks entries which are NOT in use.  (e.g. so a `memset()` to all zero can consistently clear an entry).  Valid entries/ids are never zero.
- Valid values are split into a ""type"" and sequential ""index"" value
- Type is unique for apps. libs, counters, etc so these cannot get crossed/misinterpreted (i.e. can't pass an appID in place of a libID or vice versa).
- Index is sequential and does not immediately repeat (i.e. don't wrap until 0xFFFF, do not recycle/reassign IDs after deletion).
- Provide a consistent mechanism to convert ID to a zero based index where an array/table is needed.

**Additional context**
This internal cleanup is a prerequisite to several related tickets:

- #28 - This blurs the difference between Libraries and Applications and makes the App API also apply to libraries, so they need a consistent means of identification and (possibly) make a single unified table.
- #651 - Need a better way to identify mem pools in CMD/TLM messages, not a direct address/pointer.
- #173 - More examples of ugliness/duplication of logic between apps and libs

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, cFE-ES",https://github.com/nasa/cFE/issues/797
Header version/implementation selection logic update,"**Is your feature request related to a problem? Please describe.**
#726 separates the header implementation logic and paves the way to use source selection for msgid implementation and CCSDS extended header use.  It partially uses new cmake flags to implement, but still relies on MESSAGE_FORMAT_IS_CCSDS_VER_2 being set correctly (but does not do it by default).

**Describe the solution you'd like**
Remove dependencies on MESSAGE_FORMAT_IS_CCSDS_VER_2 (see proposal below)

**Describe alternatives you've considered**
Consider changing cfe configs to cmake options (like the osconfig update), and use the cmake options to set the define if still required.  Or could just set the version 2 define if either cmake option (from #726) is set.

**Additional context**
#726 

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/796
Collapse down to 1 time format for packet headers (missions can customize msg module for alternates),"**Is your feature request related to a problem? Please describe.**
#726 made it possible to replace header implementation such that the core no longer needs to carry mission unique logic.  It also added the single time format implementation, but did not switch to use it by default to minimize functional changes from that PR.

**Describe the solution you'd like**
Clean/remove all references to CFE_MISSION_SB_PACKET_TIME_FORMAT.  Note the change in #726 also fixes #92 when the new implementation is chosen.  Now just will do big endian, 6 byte sub-second field.

**Describe alternatives you've considered**
N/A

**Additional context**
#726

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/795
"Add msg module stubs, update SB to use them, and no longer include actual msg target in unit test builds","**Is your feature request related to a problem? Please describe.**
Follow on to #726, since it leaves the msg module as ""internal"" in the context of unit tests (it includes the target).  This was done such that it could be shown all the old SB unit tests would pass (w/ minor updates for the bug fixes and reorg).

**Describe the solution you'd like**
Add the stubs, rework the SB unit tests, and remove the msg target from UT builds.

**Describe alternatives you've considered**
N/A

**Additional context**
#726

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/794
CFE RELOAD and RESTART commands handled (almost) identically,"**Describe the bug**
The documentation of the `CFE_ES_RESTART_APP_CC` specifically says here that it is _not_ reloaded from the disk file:

https://github.com/nasa/cFE/blob/5ac3f0a02038b82894c1803339f92b294ae9f0b7/fsw/cfe-core/src/inc/cfe_es_msg.h#L324

But in the way the code has evolved, both RELOAD and RESTART control requests end up going through `CFE_ES_CleanUpApp()` function:

https://github.com/nasa/cFE/blob/5ac3f0a02038b82894c1803339f92b294ae9f0b7/fsw/cfe-core/src/es/cfe_es_apps.c#L961-L968
https://github.com/nasa/cFE/blob/5ac3f0a02038b82894c1803339f92b294ae9f0b7/fsw/cfe-core/src/es/cfe_es_apps.c#L997-L1003

Notably, the `CFE_ES_CleanUpApp()` function will, in fact, unload the module via `OS_ModuleUnload()`, and the subsequent `CFE_ES_AppCreate()` function will load it again from disk.  Also important that the AppID might change too as part of this process, which may or may not be expected?

**Expected behavior**
Should make the documentation and code match one way or another:
- If we want a true ""restart"" without reload, as the documentation for `CFE_ES_RESTART_APP_CC` says, we need to update this to NOT completely unload the module.
- OR If the current implementation is OK then I'd say it isn't sufficiently different from `CFE_ES_RELOAD_APP_CC` to warrant the existence of a separate command.

**Additional context**
I noticed this inconsistency while doing implementation of #28.  I can put in a fix for this issues as part of the same (upcoming) PR, just need CCB concurrence on which way to go - do we make it work as described, or we describe the way it works.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, docs",https://github.com/nasa/cFE/issues/793
Integration Candidate 2020-07-29,"**Describe the contribution**
Fix #785

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/119/checks

**Expected behavior changes**
PR #786 - Add missing include path to the target/h and wrn/coreip directory.
Set and clarify difference between WIND_HOME and WIND_BASE variables.
Remove unrelated comment about CEXP (remnant from RTEMS).

**System(s) tested on**
Ubuntu

**Additional context**
Part of nasa/cfs#119

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/cFE/pull/792
"CFE_SB_RcvMsg stub clears buffer, then copies the msg","It appears that the CFE_SB_RcvMsg() stub, when it has a buffer defined, clears the buffer, THEN copies the message pointer.

Backwards?

See: https://github.com/nasa/cFE/blob/deeb2942b0766a87d7b399bd8c11c2d5c8deffc0/fsw/cfe-core/ut-stubs/ut_sb_stubs.c#L441",question,https://github.com/nasa/cFE/issues/791
Allow target name subdirectory for install files and handle symlinks,"**Is your feature request related to a problem? Please describe.**
Just need to add to the paths of locations for the install list from TGT<N>_FILELIST the possibility of target_defs/<TGT_NAME>/<FILENAME>

Also, if the file is a symlink, it needs to be followed to its source but copied as the name in FILELIST suggests.

**Describe the solution you'd like**
```
    foreach(INSTFILE ${TGT${TGTID}_FILELIST})
      if(EXISTS ${MISSION_DEFS}/${TGTNAME}/${INSTFILE})
        set(FILESRC ${MISSION_DEFS}/${TGTNAME}/${INSTFILE})
      elseif(EXISTS ${MISSION_DEFS}/${TGTNAME}_${INSTFILE})
        set(FILESRC ${MISSION_DEFS}/${TGTNAME}_${INSTFILE})
      elseif(EXISTS ${MISSION_DEFS}/${INSTFILE})
        set(FILESRC ${MISSION_DEFS}/${INSTFILE})
      else()
        set(FILESRC)
      endif()
      if (FILESRC)
        get_filename_component(_resolvedFile ""${FILESRC}"" REALPATH)
        install(FILES ${_resolvedFile} DESTINATION ${TGT_NAME}/${INSTALL_SUBDIR} RENAME ${INSTFILE})
      else(FILESRC)
        message(""WARNING: Install file ${INSTFILE} for ${TGTNAME} not found"")
      endif (FILESRC)
    endforeach(INSTFILE ${TGT${TGTID}_FILELIST})
```

Something like that maybe?

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Full name and company/organization if applicable
",enhancement,https://github.com/nasa/cFE/issues/790
"Fix #787, #587, Update requirements","**Describe the contribution**

Fix #787
 - cES1005.1: Remove application load address from start app command
 - cTBL6003.1: Clarify table validation pior to activate
 - cEVS3103.4, cEVS3103.5, cEVS3001: Remove SB qualifier

Fix #587
 - cSB4344: Added get packet type API requirement
 - cSB4345: Added message ID validation API requirement

Also removed previously deleted requirements from document

**Testing performed**
None, documentation update only

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
N/A

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, CCB:FastTrack, docs, cFS-Caelum",https://github.com/nasa/cFE/pull/789
CFE_EVS_Send{Crit|Critical|Err|Error|Info|Information|Debug} wrapper for CFE_EVS_SendEvent,"**Is your feature request related to a problem? Please describe.**
With the expansion of the `CFE_EVS_EventType_*` constants as part of `CFE_EVS_SendEvent()`, it got me thinking that we have a lot of extraneous typing when there's only four types of events. What about adding wrapper macros/functions that have the ""EventType"" as part of the function name? I also recommend both long and short versions, such as `CFE_EVS_SendCrit()` and `CFE_EVS_SendCritical()`.

So, for example:

```
CFE_EVS_SendEvent(MYAPP_EVENT_EID, CFE_EVS_EventType_ERROR, ""error message (%d)"", status);
```
becomes
```
CFE_EVS_SendErr(MYAPP_EVENT_EID, ""error message (%d)"", status);
```

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, good first issue, cFE-EVS",https://github.com/nasa/cFE/issues/788
Update 5 cFE requirements,"As part of the cFE certification effort, several requirements have been identified as in need of update:
1.	cES1005.1 (cFE-59 in JIRA): Need to remove Application Load Address from the list of command parameters in the start application command (ES) to reflect implementation.
2.	cTBL6003.1 (CFE-311 in JIRA): Need to update requirement verbiage to reduce ambiguity.
a.	Old verbiage: If a Table Validation Function exists for the specified Table, the Inactive Table Image shall be validated.   
b.	New verbiage: The cFE shall reject an activate table command for a table that has a validation function but has not been validated.
3.	cEVS3103.4, cEVS3103.5, and cEVS3001 (CFE-237, 239, and 201): Requirements imply that the Event Format Mode is SB controlled/commandable when in fact it is controlled by EVS.  Need to swap SB with EVS.

**Requester Info**
Dan Knutsen
NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/787
"Fix #785, update vxworks 6.9 example toolchain","**Describe the contribution**

Add missing include path to the target/h and wrn/coreip directory.
Set and clarify difference between WIND_HOME and WIND_BASE variables.
Remove unrelated comment about CEXP (remnant from RTEMS).

Fixes #785 
Also fixes nasa/psp#181

**Testing performed**
Build with VxWorks 6.9.

**Expected behavior changes**
No errors related to missing headers.

**System(s) tested on**
gs582w-cfelnx test machine (vxworks 6.9)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","bug, CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/786
Update VxWorks 6.9 toolchain,"**Describe the bug**
The example toolchain file for vxworks 6.9 does not work ""out of the box"" in combination with the current MCP750 PSP.

Need to add additional include paths and other paths under `WIND_BASE` / `WIND_HOME` environment variables to more easily adapt to other platforms.

**To Reproduce**
See nasa/psp#181

**Additional context**
Proposing alternative solution this issue via cmake toolchain file modifications.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, build-system",https://github.com/nasa/cFE/issues/785
fix #759 - deprecates GetLastSenderId(),"**Describe the contribution**
Fixes #759 - deprecates CFE_SB_GetLastSenderId() API.
Fixes #608

**Testing performed**
make with and without OMIT_DEPRECATED defined.

**System(s) tested on**
Debian 10.3

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",CCB:Approved,https://github.com/nasa/cFE/pull/784
"ES - command to load a new application, commands to load/unload/reload libraries","**Is your feature request related to a problem? Please describe.**
Currently ES can be commanded to unload or reload an existing application. Commands should be added to load an application not currently loaded. Similarly, there's no commands to load/unload/reload libraries--these commands should be added.

**Describe the solution you'd like**
Addl. commands.

**Describe alternatives you've considered**
SBN currently directly loads libraries, if the library is not already resident. With this change, SBN should command ES to load those libraries. SBN also reloads libraries when the SBN configuration table is changed, this should also translate to ES commands.

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, CCB:Splinter",https://github.com/nasa/cFE/issues/783
Use a changelog to keep track of changes instead of having them in the Readme ,"**Is your feature request related to a problem? Please describe.**
The version history in the Readme file clutters useful information

**Describe the solution you'd like**
Move the ""version history"" from `Readme.md` to `CHANGELOG.md` and start following this spec: https://keepachangelog.com/en/1.0.0/

**Describe alternatives you've considered**
Move changelog section in the readme to a section at the very bottom of the file

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
","enhancement, draco-rc4",https://github.com/nasa/cFE/issues/782
CCSDSv2 MsgId construction not 16 bits as described in cfe_sb_msg_id_util.h,"**Describe the bug**
CCSDSv2 MsgId construction not 16 bits as described in cfe_sb_msg_id_util.h. It looks like the 8th bit of the APID qualifier subsystem ID is included, making the MsgID 17 bits. 

**To Reproduce**
N/A, code inspection

**Expected behavior**
MsgId should mask off bit 8 in subsystem ID

**Code snips**
https://github.com/nasa/cFE/blob/a47abba14b7e8ffbc8c8e78614babdb151412af2/fsw/cfe-core/src/sb/cfe_sb_msg_id_util.h#L40-L58

https://github.com/nasa/cFE/blob/a47abba14b7e8ffbc8c8e78614babdb151412af2/fsw/cfe-core/src/inc/ccsds.h#L346

https://github.com/nasa/cFE/blob/a47abba14b7e8ffbc8c8e78614babdb151412af2/fsw/cfe-core/src/sb/cfe_sb_msg_id_util.c#L137-L138

**System observed on:**
N/A

**Additional context**
N/A

**Reporter Info**
John N Pham, Northrop Grumman
",enhancement,https://github.com/nasa/cFE/issues/781
Update assert_eq to print both decimal and hex,"**Is your feature request related to a problem? Please describe.**
For many cases bits or error codes are being compared, where hex is easier to interpret the difference

**Describe the solution you'd like**
Print both

**Describe alternatives you've considered**
Add specific hex assert_eq

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/issues/780
"Fix #778, add cfe assert and example lib","**Describe the contribution**
Add a module for functional testing called ""cfe_assert"". 
This is using the UT assert object code and linking it with some CFE glue so it is loadable as a CFE library.
Also included is the start of an example for CFE testing, which just calls some basic ES appid functions.

Fixes #778 

**Testing performed**
Build and sanity check CFE.
Load these new test apps/libs and confirm all tests pass.

**Expected behavior changes**
This is all NEW test code which is compiled as separate modules and only loaded on demand.  It is independent of existing FSW or other software modules.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
A similar example for testing PSP will be included in PSP repo, and apps/libs can provide the same with the app/lib.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","invalid, CCB:Approved, Priority: Mission, cFS-Caelum",https://github.com/nasa/cFE/pull/779
UT Assert library for CFE functional tests,"**Is your feature request related to a problem? Please describe.**
There is a need to do functional testing of CFE itself along with apps and libraries.  These would benefit from using the same assert macros and test framework as the coverage tests use.  

**Describe the solution you'd like**
This can be done by compiling the same UT assert framework as loadable CFE app.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/778
Deprecate SB elements relative to msg module adaption,"**Is your feature request related to a problem? Please describe.**
Many APIs will be updated for consistency relative to the MSG module, also element scoping improvements (SB doesn't actually care about the header, it just needs to route).

**Describe the solution you'd like**
Per 2020-07-28 discussion SB for once #726 is in.

Deprecating:
- [x] CFE_SB_PKTTYPE_* -> CFE_MSG_Type_t
- [x] CFE_SB_MsgPtr_t -> CFE_MSG_Message_t *
- [x] CFE_SB_Msg_t -> CFE_MSG_Message_t
- [x] CFE_SB_MsgPayloadPtr_t (use pointer to payload in structure)
- [x] CFE_SB_InitMsg -> CFE_MSG_Init
- [x] CFE_SB_GetTotalMsgLength -> CFE_MSG_GetSize
- [x] CFE_SB_SetTotalMsgLength -> CFE_MSG_SetSize
- [x] CFE_SB_GetMsgTime -> CFE_MSG_GetMsgTime (this gets rid of structure return, similar to #45 issue)
- [x] CFE_SB_SetMsgTime -> CFE_MSG_SetMsgTime
- [x] CFE_SB_GetCmdCode -> CFE_MSG_GetFcnCode
- [x] CFE_SB_SetCmdCode -> CFE_MSG_SetFcnCode
- [x] CFE_SB_GetChecksum (no use case defined, what do you need it for?)
- [x] CFE_SB_GenerateChecksum -> CFE_MSG_GenerateChecksum
- [x] CFE_SB_ValidateChecksum -> CFE_MSG_ValidateChecksum
- [x] CFE_SB_GetMsgId -> CFE_MSG_GetMsgId
- [x] CFE_SB_SetMsgId -> CFE_MSG_SetMsgId
- [x] CFE_SB_GetPktType -> CFE_MSG_GetTypeFromMsgId
- [x] CFE_SB_SetMsgSeqCnt -> CFE_MSG_SetSequenceCount

NOT deprecating, but will note in API that these are fragile (guesses based on assumptions).  Future implementation could be replaced via data dictionary sort of access or standards based header definitions (including secondary header, and flags or extra internal data to mange the real sizes):
- CFE_SB_MsgHdrSize: use actual message structure where possible
- CFE_SB_GetUserData: use actual message structure where possible
- CFE_SB_GetUserDataLength: use actual message structure where possible
- CFE_SB_SetUserDataLength - use CFE_MSG_SetSize with full message structure where possible
- CFE_SB_CMD_HDR_SIZE -> sizeof CFE_MSG_CommandHeader_t) preferrred
- CFE_SB_TLM_HDR_SIZE -> sizeof (CFE_MSG_TelemetryHeader_t) preferred

Note CFE_SB_Qos_t and CFE_SB_Default_Qos will likely be used for #926 (critical subscription)

NOT deprecating, MSG types are unaligned, SB types are now aligned:
- CFE_SB_Msg_t, CmdHdr_t, TlmHdr_t -> CFE_MSG_*

NOT deprecating CFE_SB_TimeStampMsg.  See #26 that requests making this part of send.

**Describe alternatives you've considered**
Just need to manage these, unique deprecation flag... not all actually need to go, but reduced/simplifies unit testing

**Additional context**
#711, #726

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, cFS-Caelum",https://github.com/nasa/cFE/issues/777
"Fix #265, implement cmake name based targets","**Describe the contribution**
Allow targets to be configured in `targets.cmake` by name, rather than a numeric index.  This is more user friendly, allows more configuration flexibility, and cleans up a bunch of extra logic too.

Fixes #265 

**Testing performed**
Build system, sanity check CFE, and run all unit tests

Testing not fully completed - Initially submitting PR for design review/feedback.

**Expected behavior changes**
No change to FSW, but changes the way targets are defined in `targets.cmake`.
This includes backward compatibility for existing files/configs, however.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Also related to #710, this cleans up hardcoded CPU IDs that were in the platform config header file.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

",build-system,https://github.com/nasa/cFE/pull/776
"Fix #774,  do not generate empty include file","**Describe the contribution**
Detect the condition where no files were present to fulfill an config include file requirement, and report as an error rather than generating an empty file.

Fixes #774

**Testing performed**
Create a test config that refers to a nonexistent platform config called ""foobar"" by setting this in `targets.cmake`:
`SET(TGT1_PLATFORM foobar)`

_Without_ this change, `make prep` still (seemingly) completes successfully but the `cfe_platform_cfg.h` is actually empty, which results in a later compiler error.

**Expected behavior changes**
After applying this change, the issue is reported as a `make prep` error instead, along with a list of files it checked for.

Example:
```
ERROR: No implementation for cfe_platform_cfg.h found
CMake Error at cmake/global_functions.cmake:119 (message):
  Tested:
  /home/joe/code/cfecfs/github/sample_defs/cfe_platform_cfg.h;/home/joe/code/cfecfs/github/sample_defs/foobar_platform_cfg.h
Call Stack (most recent call first):
  fsw/cfe-core/arch_build.cmake:14 (generate_config_includefile)
  cmake/arch_build.cmake:307 (include)
  CMakeLists.txt:119 (prepare)
```

No FSW changes - just reporting this configuration error.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/cFE/pull/775
generate_config_includefile should display an error if no files are found at all,"**Is your feature request related to a problem? Please describe.**
While testing other items I noticed that the `generate_config_includefile` function will happily create an empty file if neither a user-provided file nor a default/fallback file is available.

But because the file is _present_ but doesn't have any actual content, you end up with a slightly obfuscated compiler error about missing symbols rather than an indication that the expected config file is empty.

**Describe the solution you'd like**
The function should trigger an error and inform the user that there was no file to use, rather than generating an empty file.  It is a misconfiguration, so it should be corrected.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/774
"Fix #710, Specify ProcessorID in targets.cmake","**Describe the contribution**
- Fix #710

Allow explicitly setting of the processor ID in `targets.cmake`

**Testing performed**
Build and sanity-check CFE
Build and run all unit tests.
Confirm that `CFE_PSP_GetProcessorId()` now returns the expected value.

**Expected behavior changes**
The `TGTx_PROCESSOR_ID` setting in `targets.cmake` will be passed to the final build/link of CFE core as the CPU ID.  If unspecified then the CMake index value is used instead (backward compatible).

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Minimal/simple fix that at least should address part of the problem.  Note this value isn't passed to `elf2cfetbl` for table builds at the moment, this only affects the CFE runtime value of processor ID.

At least on pc-linux one can still provide the value on the command line which takes precedence over anything in the build.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:FastTrack, Priority: Mission",https://github.com/nasa/cFE/pull/773
CFE_SB_GetLastSenderId() future deprecation note,"A short note that the CFE_SB_GetLastSenderId() is to be deprecated in a future release.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",invalid,https://github.com/nasa/cFE/pull/772
"Resolve #770, add baseline and buildnumber to version.h","**Describe the contribution**
Resolve #770 

**Testing performed**
Steps taken to test the contribution:
Built on top of current integration candidate
Built with other integration candidates as well as with nasa/osal#532 and nasa/psp#178

**Expected behavior changes**
New macros defined. Startup reporting now looks like 
<img width=""331"" alt=""Screen Shot 2020-07-15 at 8 56 43 AM"" src=""https://user-images.githubusercontent.com/59618057/87557256-ab977000-c685-11ea-893c-a27e54441639.png"">
<img width=""340"" alt=""Screen Shot 2020-07-15 at 8 56 52 AM"" src=""https://user-images.githubusercontent.com/59618057/87557332-c5d14e00-c685-11ea-8fd7-4ad987984e72.png"">
<img width=""208"" alt=""Screen Shot 2020-07-15 at 8 56 35 AM"" src=""https://user-images.githubusercontent.com/59618057/87557452-ebf6ee00-c685-11ea-8914-c4ea6844fde4.png"">


**System(s) tested on**
Docker Ubuntu-based gcc image on OSX

**Additional context**
Also Tested with nasa/osal#532 and nasa/psp#178 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA-GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/771
Add Build name and Build number to version.h,"**Is your feature request related to a problem? Please describe.**
Need a better way to describe versions during development

**Describe the solution you'd like**
Add Build name and Build number to version.h
As discussed, we will add a a build name string and a continuously incrementing build number to `version.h`

**Additional context**
See notes from CCB: <https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-July-01-2020>

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",enhancement,https://github.com/nasa/cFE/issues/770
Add struct name for typedef struct in cFE,"**Is your feature request related to a problem? Please describe.**

All of the struct used in `cFE` are declared with `typedef struct {} TYPEDEF_NAME`, which make the struct anonymous in debug info, and make it harder to access from the debugging tools such as `pahole:

```
$ pahole -E -M -C ""CFE_EVS_ShortEventTlm_t"" build/exe/cpu1/core-cpu1
typedef struct  CFE_EVS_ShortEventTlm_t;
```

Expect to be like:

```
$ pahole -M -C ""CFE_EVS_LongEventTlm_t"" build/exe/cpu1/core-cpu1
struct CFE_EVS_LongEventTlm_t {
	uint8                      TlmHeader[12];        /*     0    12 */
	CFE_EVS_LongEventTlm_Payload_t Payload;          /*    12   156 */

	/* size: 168, cachelines: 3, members: 2 */
	/* last cacheline: 40 bytes */
};

and

$ pahole -E -M -C ""CFE_EVS_LongEventTlm_t"" build/exe/cpu1/core-cpu1
struct CFE_EVS_LongEventTlm_t {
	/* typedef uint8 -> uint8_t */ unsigned char              TlmHeader[12];         /*     0    12 */
	/* typedef CFE_EVS_LongEventTlm_Payload_t */ struct CFE_EVS_LongEventTlm_Payload_t {
		/* typedef CFE_EVS_PacketID_t */ struct CFE_EVS_PacketID_t {
			char       AppName[20];                                          /*    12    20 */
			/* typedef uint16 -> uint16_t */ short unsigned int EventID;     /*    32     2 */
			/* typedef uint16 -> uint16_t */ short unsigned int EventType;   /*    34     2 */
			/* typedef uint32 -> uint32_t */ unsigned int SpacecraftID;      /*    36     4 */
			/* typedef uint32 -> uint32_t */ unsigned int ProcessorID;       /*    40     4 */
		} PacketID; /*    12    32 */
		char               Message[122];                                         /*    44   122 */
		/* --- cacheline 2 boundary (128 bytes) was 38 bytes ago --- */
		/* typedef uint8 -> uint8_t */ unsigned char      Spare1;                /*   166     1 */
		/* typedef uint8 -> uint8_t */ unsigned char      Spare2;                /*   167     1 */
	} Payload; /*    12   156 */

	/* size: 168, cachelines: 3, members: 2 */
	/* last cacheline: 40 bytes */
};
```

**Describe the solution you'd like**

Add struct name to all the typedef struct in cFE, for example:

From:
```
typedef struct {
   uint8                    TlmHeader[CFE_SB_TLM_HDR_SIZE];
   CFE_EVS_ShortEventTlm_Payload_t Payload;

} CFE_EVS_ShortEventTlm_t;
```

Changed to:

```
typedef struct CFE_EVS_ShortEventTlm_t {
   uint8                    TlmHeader[CFE_SB_TLM_HDR_SIZE];
   CFE_EVS_ShortEventTlm_Payload_t Payload;

} CFE_EVS_ShortEventTlm_t;
```

**Describe alternatives you've considered**



**Additional context**


**Requester Info**

@mlouielu
",enhancement,https://github.com/nasa/cFE/issues/769
"Fix #752, use OS_READ_ONLY, not O_RDONLY","**Describe the contribution**

Calls to OS_open() must use the OSAL-defined symbol, not the POSIX symbol.  This was a long-standing bug but happened to work because they are both zero.

Fixes #752

**Testing performed**
Build and sanity check CFE
Build and run unit tests

**Expected behavior changes**
None.

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11.3

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/cFE/pull/768
"Fix #766, Add to table search path","**Describe the contribution**
Adds to table search path
Fix #766

**Testing performed**
CI

**Expected behavior changes**
Just adds to search path

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:FastTrack, Priority: Mission",https://github.com/nasa/cFE/pull/767
Add to table search path... either point solution or general,"**Is your feature request related to a problem? Please describe.**
Power users have had to clone and own the cmake logic for adding tables to implement preferred directory structure and naming patterns in searching for the table files.  Currently not a good way (that I know of) to customize:

https://github.com/nasa/cFE/blob/a47abba14b7e8ffbc8c8e78614babdb151412af2/cmake/arch_build.cmake#L128-L140

**Describe the solution you'd like**
Some way to customize the search path... or we could just do a point solution where we add the desired search path for this stakeholder.

if (EXISTS ""${MISSION_DEFS}/${TGT}/tables/${TBLWE}.c"")

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/766
Integration Candidate: 2020-06-24,"**Describe the contribution**
Fix #710
Fix #724 
Fix #739 
Fix #746 
Fix #747
Fix #752
Fix #762
Fix #766
Fix #774 

Resolve #770 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/108/checks

**Expected behavior changes**

PR #748 - Update `CFE_SB_TimeStampMsg` to save the message pointer argument `UT_Stub_CopyFromLocal` so that unit tests can check it

PR #751 - Only affects build system. Fully backward compatible. The defaults are applied if a user has nothing specifically configured in their `targets.cmake`. The defaults will select osal, cfe-core, and psp as before. The user now has the option to explicitly configure and control the inclusion of these modules and also provide mission-specific search paths to override them as desired.

PR #763 - Note this only affects UT stubs. Change the internal names of some stub arguments to match prototype. Ensure that:
  - All functions in the CFE public API have a stub function implemented
  - All parameters to the stub function are registered in the context object, so the values will be available to hook functions.
  - The names of all parameters match the prototype/documentation, so hook functions that use name-based argument value retrieval will work.

PR #767 -  Adds to table search path in `arch_build.cmake`

PR #768 - Calls to OS_open() now use the OSAL-defined symbol, not the POSIX symbol. 

PR #771 -  Defines new macros to report the build number and build baseline and new strings containing the version number of cFE and a combined string with the version number for OSAL, PSP, and CFE.

PR #773 - Allow explicitly setting of the processor ID in `targets.cmake`. The `TGTx_PROCESSOR_ID` setting will be passed to the final build/link of CFE core as the CPU ID. If unspecified, then the CMake index value is used instead (backward compatible).

PR #775 - cmake now detects conditions where no files were present to fulfill an config include file requirement and reports an error during `make prep` lists the files it checked for rather than generating an empty file.


**System(s) tested on**
Ubuntu - CI

**Additional context**
Part of https://github.com/nasa/cFS/pull/108

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
Joseph Hickey, Vantage Systems, Inc.
Gerardo Cruz-Ortiz, NASA-GSFC",,https://github.com/nasa/cFE/pull/765
fix #759 - removes GetLastSenderId(),"Fixes #759 
Fixes #608

Removes `CFE_SB_GetLastSenderId()`, which is supremely broken.

**Testing performed**
sb_UT passes

**Expected behavior changes**
Removes the CFE_SB_GetLastSenderId() API.

**System(s) tested on**
Debian 10.3

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",duplicate,https://github.com/nasa/cFE/pull/764
"Fix #762, scrub of all CFE UT stub functions","**Describe the contribution**

Scrubs all CFE unit test functions to ensure that:

1. All functions in the CFE public API have a stub function implemented
2. All parameters to the stub function are registered in the context object,
   so the values will be available to hook functions.
3. The names of all parameters match the prototype/documentation, so hook
   functions that use name-based argument value retrieval will work.

Fix #762 
Fix #702

**Testing performed**
Build and run all CFE unit tests
Sanity check on CFE execution (but this doesn't change any FSW code).

**Expected behavior changes**
No impact to current behavior - except it does change the internal names of some stub arguments to match prototype.
Note this only changes UT stubs.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/cFE/pull/763
Scrub all CFE UT stub functions,"**Is your feature request related to a problem? Please describe.**
The CFE stub functions remain incomplete and inconsistent.  They need a scrub to bring everything up to the level it should be.

**Describe the solution you'd like**
- All functions prototyped in the CFE public API headers (the `fsw/cfe-core/src/inc` dir) should also have a stub defined.
- All arguments should be registered in the context so the complete context is available within UT hook functions. 
- The argument names should always match the prototype.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/762
fix #759 - removes CFE_SB_GetLastSenderId() and adds CFE_SB_RcvMsgSenderId(),"Fix #759

**Describe the contribution**
This removes the significantly-broken `CFE_SB_GetLastSenderId()` function and adds a new variant `CFE_SB_RcvMsgSenderId()` that returns (via an out parameter) the AppId of the application that sent the message being read off the pipe.

Note that, to reduce the redundant code, `CFE_SB_RcvMsg()` calls `CFE_SB_RcvMsgSenderId()` with a null pointer. It may be better to use a #define macro for improved performance, or deprecate the RcvMsg() API eventually.

**Testing performed**
Built and ran updated unit tests.

**System(s) tested on**
Debian 10.3

**Additional context**
GetLastSenderId() is basically broken, I suggest this be merged into 6.8, removing the function entirely (no deprecation). It will break any users of GetLastSenderId(), obv. (SBN being the only one I am aware of.)

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",invalid,https://github.com/nasa/cFE/pull/761
Document the cmake build system,"**Describe the bug**
Our documentation does not explain to users how the build system works and how to customize it for their needs

**Expected behavior**
A clear description and possibly some graphics showing how the different cmakelists files link with each other and how dependencies flow.

From CFS-40: Document dependencies based on features used (xxd for ""embedded"" files)
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/cmake/target/CMakeLists.txt#L229

It might make more sense to move this into the github.com/nasa/cFS instead

**Additional context**
Related to conversation started in https://github.com/nasa/cFE/pull/751 

**Reporter Info**
Gerardo E. Cruz-Ortiz
","docs, CFS-40",https://github.com/nasa/cFE/issues/760
remove GetLastSenderId() API and replace with a RecvMsg() API that returns the AppId of the sender of the message being received,"**Describe the bug**
The current CFE_SB_GetLastSenderId() API is broken, as indicated in #745 and #744, but also as discussed at today's CCB, the intent and use-case is really ""who sent *this* message"" not ""who sent the *last* message"" on a pipe. In fact, SBN is currently using this API to prevent SBN message loops, and this API doesn't work correctly for that purpose.

**Expected behavior**
The suggestion is to remove the GetLastSenderId() API entirely, and add a new receive method like: `int32  CFE_SB_RcvMsgWithSenderId(CFE_SB_MsgPtr_t  *BufPtr, uint32 *SenderAppIdPtr, CFE_SB_PipeId_t  PipeId, int32 TimeOut);` that has an additional out parameter which will contain the AppId of the app that sent the message returned in the BufPtr.

**Reporter Info**
Christopher.D.Knight@nasa.gov",enhancement,https://github.com/nasa/cFE/issues/759
"Fix95, CI build multiple targets","**Describe the contribution**
Added a CPU2 as a second target to the build configuration to ensure build system is functioning properly with Travis CI for multiple targets.

Also added the following files:
- cpu2_cfe_es_startup.scr
- cpu2_platform_cfg.h
- cpu2_msgids.h

Resolves: cFS bundle's issue 95 <https://github.com/nasa/cFS/issues/95>

**Testing performed**
Steps taken to test the contribution:
Went through the build steps from ""Build and Run"" section of <https://github.com/nasa/cFS>

**Expected behavior changes**
Expected to see cpu2 in the exe directory, but it did not appear; still only cpu1 was made for me. 
However, this worked for Chris Knight after he cloned cFS and pulled from my fork (cpu1 and cpu2 were made).

**System(s) tested on**
 - Hardware: Mac OS
 - OS: Ubuntu 18.04 via VirtualBox

**Contributor Info - All information REQUIRED for consideration of pull request**
Jandlyn Bentley, NASA-GSFC
",invalid,https://github.com/nasa/cFE/pull/758
Create build.yml,Add build.yml as test,invalid,https://github.com/nasa/cFE/pull/757
Integration Candidate: 2020-06-17,"**Describe the contribution**
Fix #730
Fix #604
Fix #754

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/106/checks

**Expected behavior changes**

PR #738 - Adds ""\0"" in the CFE_TBL_FILEDEF() macro so that if a string is exactly the size of the field, it will produce a compiler error.

PR #742 - Added cFE User's Guide Reference to README.md

PR #755 - Removes old license

**System(s) tested on**
Ubuntu: Bionic

**Additional context**
Part of https://github.com/nasa/cFS/pull/106

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher D. Knight, NASA-ARC
Jandlyn Bentley, NASA-GSFC
Jacob Hageman, NASA-GSFC",,https://github.com/nasa/cFE/pull/756
"Fix #754, Remove obsolete license","**Describe the contribution**
Removes old license.

Fix #754 

**Testing performed**
CI, comment change only

**Expected behavior changes**
None

**System(s) tested on**
N/A (CI only)

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/cFE/pull/755
Rogue license in cmake file,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/cFE/blob/1df042b53e1fe2211c98ac556e15753ac7da01fa/cmake/sample_defs/default_osconfig.cmake#L8-L9
NOSA is wrong (it's Apache 2.0), and no other cmake files are marked.

**Describe the solution you'd like**
Either mark all the cmake files in the same way with the correct license, or remove.  Clear guidance for Apache 2.0 cmake files not found, fine with either solution (trivial fix, already scripted)

**Describe alternatives you've considered**
N/A

**Additional context**
Found during OSAL license updates...

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, docs",https://github.com/nasa/cFE/issues/754
Secondary Header: extracting wrong bits for command on 32-bit ARM platform,"The tools/..../cmdUtil has a test to-enable-tlm.sh command to test commands send to a running cFS session   #./core-cpu1.
The command code extracted through the function, CFE_SB_GetCmdCode()  ... eventually calls the macro, CCSDS_RD_FC(...).  This macro masks and shifts bits to extract the command code; however, the cfe/fsw/cfe-core/src/inc/ccsds.h need the following minor modification.

original

#define CCSDS_RD_FC(shdr)           CCSDS_RD_BITS((shdr).Command, 0x7F00, 8)

my change

#define CCSDS_RD_FC(shdr)           CCSDS_RD_BITS((shdr).Command, 0x007F, 0)

Once this code change is made, no problems.

If this is a bug then the masking and bit shifting for all the secondary header should be changed

else please let me know what I might be doing wrong. 


Platform

Beaglebone :  Arm 7 32-bit
Linux beaglebone 4.19.94-ti-r42 #1buster SMP PREEMPT Tue Mar 31 19:38:29 UTC 2020 armv7l GNU/Linux","duplicate, question",https://github.com/nasa/cFE/issues/753
CF_ES_StartApplications() uses O_RDONLY instead of OS_READ_ONLY,"**Describe the bug**
Latest OS_open() does not support O_RDONLY flag

**To Reproduce**
Just observation trying to find other bug - no solution for that one yet...

**Expected behavior**
Correct #define use

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - Docker
 - OS: Linux fb2def16b3c1 4.19.104-microsoft-standard #1 SMP Wed Feb 19 06:37:35 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
 - Versions [Versions:cFE 6.7.20.0, OSAL 5.0.20.0, PSP 1.4.14.0]

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Maurice Smulders / Geneva Technologies inc
",bug,https://github.com/nasa/cFE/issues/752
"Fix #746, CMake mission dependency cleanup","**Describe the contribution**

Put more dependencies into the ""mission_defaults.cmake"" file for more visibility and ease of configuration.  This now includes all ""implicit"" modules such as cfe-core, osal, and psp.
    
Also push the calls to ""generate_config_includefile"" to a sub-script which can be distributed with each app and evaluated as part of the build.  This reduces dependencies on special naming conventions like `fsw/mission_inc` and `fsw/platform_inc`, and app developers can explicitly manage the files that users are expected to override.

Fixes #746 

**Testing performed**
Build and execute CFE and sanity test
Build and execute all unit tests

**Expected behavior changes**
No impact to behavior, affects build system only.
Should be fully backward compatible - in that the defaults are applied if a user has nothing specifically configured in their `targets.cmake` file.  The defaults will select osal, cfe-core, and psp as they always have.  However, the user now has the option to explicitly configure/control the inclusion of these modules and also provide mission-specific search paths to override them as desired.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Related to previous PR #720, #728, and #740.  Not easy to separate this out from those so this is currently based on a merge of those previous changes.  Hopefully the combined solution can be acceptable.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/751
Fix #745 - getlastsenderid now returns appid,"Fix for #745 - This removes the CFE_SB_SenderID_t struct and, instead, the CFE_SB_GetLastSenderId() function now takes a pointer to an AppId (uint32) that it uses as an out parameter for the call.

**Testing performed**
Built with ENABLE_UNIT_TESTS

**Expected behavior changes**
Significantly changes the GetLastSenderId() function, will break any users of this API (particularly SBN.)

**System(s) tested on**
Debian 10.3

**Additional context**
This obviates #744 and I recommend closing that ticket with this fix.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",invalid,https://github.com/nasa/cFE/pull/750
fix #744 - update LastSender in pipe description and add AppId to buf…,"**Describe the contribution**
fix #744 
This adds AppId to the buff description (used by `CFE_SB_GetLastSenderId()`) and updates the LastSender field in the CFE_SB_PipeD_t struct for each pipe that receives the message.

**Testing performed**
Built and ran in debugger to inspect values.

**Expected behavior changes**
Adds a field to the CFE_SB_SenderId_t struct, properly populates the CFE_SB_PipeD_t private struct (which is used for HK tlm.)

**System(s) tested on**
Debian 10.3

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",duplicate,https://github.com/nasa/cFE/pull/749
"Fix #747, Update CFE_SB_TimeStampMsg to save the message pointer argument","… UT_Stub_CopyFromLocal so that unit tests can check it

**Describe the contribution**
A clear and concise description of what the contribution is.
Fixes #747 

**Testing performed**
Wrote test that failed when using original version of SB stub CFE_SB_TimeStampMsg.
`[ FAIL] 01.001 cf_app_tests.c:90 - CFE_SB_TimeStampMsg received 0xc8230eadc0 and should be 0x61b180`
Changed to have stub UT_Stub_CopyFromLocal passed in argument.
`[ PASS] 01.001 cf_app_tests.c:90 - CFE_SB_TimeStampMsg received 0x61b180 and should be 0x61b180`


**Expected behavior changes**
Passed in argument value is now available to a test that uses UT_SetDataBuffer for CFE_SB_TimeStampMsg.

**System(s) tested on**
 - Hardware: PC
 - OS: RHEL7 3.10.0-1062.1.2.el7.x86_64
 - Versions: cFE 6.7

**Additional context**
None.

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Gibson, GSFC-0587
",CCB:Approved,https://github.com/nasa/cFE/pull/748
CFE_SB_TimeStampMsg in ut_sb_stubs.c does not record MsgPtr argument value,"**Describe the bug**
The value passed into CFE_SB_TimeStampMsg cannot be checked because the context value is not put into the UT_Stub_CopyFromLocal function.  

**To Reproduce**
Write a unit test that attempts to check this value by setting up UT_SetDataBuffer.
Test fails because the value was never saved so it will not equal the expected value.

**Expected behavior**
UT_SetDataBuffer when used for CFE_SB_TimeStampMsg will copy the argument value from local (UT_Stub_CopyFromLocal).

**Code snips**
Current code:
```
void CFE_SB_TimeStampMsg(CFE_SB_MsgPtr_t MsgPtr)
{
    UT_DEFAULT_IMPL(CFE_SB_TimeStampMsg);
}
```

**System observed on:**
 - Hardware : PC
 - OS: RHEL7 - 3.10.0-1062.1.2.el7.x86_64
 - Versions cFE 6.7

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Full name and company/organization if applicable
","bug, unit-test",https://github.com/nasa/cFE/issues/747
Consolidate implicit entries in MISSION_DEPS to defaults file,"**Is your feature request related to a problem? Please describe.**
The build currently sets `MISSION_DEPS` as a list of dependencies which is basically the CFE core and OSAL by default.  There is a desire to consolidate all ""fixed"" entries into a separate defaults file for increased visibility and manageability.

**Describe the solution you'd like**
These two dependencies can be consolidated into the `MISSION_CORE_MODULES` default list being proposed in PR #740, but this also depends on #728 so it needs to be implemented separately.

**Additional context**
This is a dependency of both PR #728 and #740.  Original discussion here:
https://github.com/nasa/cfe/pull/740#discussion_r441589460

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/746
CFE_SB_GetLastSenderId() returns a pointer to a shared data location ,"**Is your feature request related to a problem? Please describe.**
CFE_SB_GetLastSenderId() in cfe_sb_api.c returns a pointer to shared data location which is risky. The function description also warns of some unpredictable or at least inconsistent behavior. 

**Describe the solution you'd like**
I think the use cases for this function should be identified and a safer & behaviorally consistent implementation should be implemented. 
Are the use cases?
1.  Determine if app X send the last message 
2.  Determine whether the last message sent is from a lsit of apps

A couple of options are
1. Caller passes in the name of an app or a list of apps to SB determines whether the last message sent is a match.
2. The current type implementation copies the last message information rather than returning a pointer. 


**Additional context**
n/a

**Requester Info**
David McComas, NASA Emeritus
",duplicate,https://github.com/nasa/cFE/issues/745
SB Pipe Info 'LastSender' Field is Unused ,"**Describe the bug**
The LastSender field in in the file produced by a SB 'Send Pipe Info to file' command is always zero. After doing some seraches it appears that this field defined in CFE_SB_PipeD_t in cfe_sb_priv.h is never set.

**To Reproduce**
1. Send a SB CFE_SB_SEND_PIPE_INFO_CC command
2. Transfer the file to the ground
3. Decode the binary file 

**Expected behavior**
The structure definition does not have any comments as to what to expect in this field. I would expect the AppId of the of the sender of last message send to the particular pipe.

**Code snips**
n/a

**System observed on:**
 Wndows VM running Ubuntu 18.04
 cfE 6.71, OSAL 5.0.1.0, PSP 1.4.0.0

**Additional context**
None

**Reporter Info**
David McComas, NASA Emeritus
",duplicate,https://github.com/nasa/cFE/issues/744
Integration Candidate: 2020-06-10,"**Describe the contribution**
Fix #734, continue cleanup of SB unit test 

**Testing performed**
Bundle CI: https://github.com/nasa/cFS/pull/102/checks

**Expected behavior changes**
PR #737 -  SB Unit use of the UT assert framework is closer to original design intent

**System(s) tested on**
Ubuntu:Bionic

**Additional context**
Part of nasa/cfs#102

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
Gerardo E. Cruz-Ortiz, NASA-GSFC",,https://github.com/nasa/cFE/pull/743
"Fix #604, Added cFE User's Guide Reference to README.md","**Describe the contribution**
Added a reference to the cFE user's guide (https://github.com/nasa/cFS/blob/gh-pages/cFE_Users_Guide.pdf) in the cFE README.md.

The reference was placed toward the top of the document, above the ""Version History"" section.

Resolves: #604 

**Testing performed**
N/A

**Expected behavior changes**
N/A

**System(s) tested on**
N/A

**Additional context**
This is a simple document enhancement.

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Contribution by: Jandlyn Bentley, NASA GSFC
","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/742
Failure during CFE_ES_ExitApp if app calls CFE_TBL_Unregister,"**Describe the bug**
Should an app call CFE_TBL_Unregister?
On CFE_ES_ExitApp I get:
```
1980-012-14:03:21.25234 CFE_TBL:RemoveAccessLink-PutPoolBuf[0] Fail Stat=0xC4000007, Hndl=0x56709730, Buf=0x00000000
1980-012-14:03:21.25236 CFE_TBL:RemoveAccessLink-PutPoolBuf[0] Fail Stat=0xC4000007, Hndl=0x56709730, Buf=0x00000000
```

The [documentation](https://github.com/nasa/cFE/blob/master/docs/cFE%20Application%20Developers%20Guide.md#82-registering-tables) no longer says anything about it so I'm starting to think it shouldn't be used. The [sample_app](https://github.com/nasa/sample_app/blob/4a4b8e281802f244a2facdcb3c32238751c678f3/fsw/src/sample_app.c) in the cFS repo also doesn't call CFE_TBL_Unregister either.

The code seems to say we should though:
https://github.com/nasa/cFE/blob/95f34d25cb2843b8ba9db6338bb0b53cb3e38f92/fsw/cfe-core/src/inc/cfe_tbl.h#L334-L339
 
**To Reproduce**
1. Register table
2. Unregister table
3. Call CFE_ES_ExitApp

**Expected behavior**
No errors on exit

**Code snips**
N/A

**System observed on:**
 - Hardware: Laptop
 - OS: Linux
 - Versions: Versions:cFE 6.7.7.0, OSAL 5.0.6.0, PSP 1.4.4.0

**Additional context**
N/A

**Reporter Info**
Philip Cooksey, NASA Ames
","bug, docs, cFE-TBL",https://github.com/nasa/cFE/issues/741
"Fix #739, add global module list and mission default file","**Describe the contribution**
Add more hooks for additional flexibility when adding modular code blobs into the build.

Three new directives are added:

- `MISSION_CORE_MODULES` :  for modular components which are direct dependencies of CFE core and/or extend its functionality.

- `MISSION_GLOBAL_APPLIST` :  for applications/libraries which should be built for every target, as if they were listed in every `TGTx_APPLIST` setting.

- `MISSION_GLOBAL_STATIC_APPLIST` : same as above but for the `TGTx_STATIC_APPLIST` setting.

This also simplifies/reworks the search path to remove some logic that was never really utilized.

Fixes #739 
Also Fixes #718 (supercedes/includes previous PR #720)

**Testing performed**
Build, sanity check CFE and unit test.
Tested adding modules to the new lists and confirm the modules are found and built as expected.

**Expected behavior changes**
Users have additional flexibility when configuring/customizing their CFE build.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
The initial intent with `MISSION_CORE_MODULES` is to provide a simple place for something like #711.

The initial intent with `MISSION_GLOBAL_APPLIST` is that we can easily tack on extra libraries when unit testing is enabled, e.g.

```
if (ENABLE_UNIT_TESTS)
   list(APPEND MISSION_GLOBAL_APPLIST cfe_assert)
endif (ENABLE_UNIT_TESTS)
```

This will automatically build the assert library for every target when unit testing is turned on, but it is still up the user to actually load it, but that can be done at runtime - it doesn't change the core CFE environment.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",duplicate,https://github.com/nasa/cFE/pull/740
Implement generic location for CFE modules,"**Is your feature request related to a problem? Please describe.**
There are a number of new modular add-ons for CFE that should be distributed with CFE core but aren't really part of the ""core"" proper.  Such as:

- Test Framework apps
- Message accessor library

These modules should be with the CFE core so that users get a sensible baseline when cloning the CFE core repo as the CFE itself depends on/uses them, but these modules can also be replaced with customized versions at the user discretion.

**Describe the solution you'd like**
Proposal is to introduce a new top level directory `cfe/modules` to hold these items.  This needs to be added to the module path and also to provide a ""defaults"" file that can select the default set(s) of modules to include if the user doesn't override/replace them.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/739
fix #730 - adds null to FILEDEFs,"**Describe the contribution**
Fix #730 - Adds ""\0"" in the CFE_TBL_FILEDEF() macro so that if a string is exactly the size of the field, it will produce a compiler error.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",CCB:Approved,https://github.com/nasa/cFE/pull/738
"Fix #734, continue cleanup of SB unit test","**Describe the contribution**
Makes the SB unit test closer to recommended UT assert patterns

- Do not keep a separate `TestStat` state variable outside UT assert.
- Do not report separate status messages from the asserts.  Use UT assert.
- Do not ""reset"" in the middle of a test routine, split into separate test routines where this is done.
- No need for `START` and `STARTBLOCK` or `ENDBLOCK` macros.  UT assert has messages for these test actions.  Each block should be a separate test routine and then these are unnecessary.

Fixes #734

**Testing performed**
Run all unit tests and confirm passing.  No FSW code changes here, only UT.

**Expected behavior changes**
SB Unit tests now use the UT assert framework more as intended.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This changes some items that were only reported on failure to a normal assert statement, which means its always reported.  The side effect is that there are now about 600,000 ""test cases"" in the SB test.  Most of that is from remaining validation of the length field, in particular the User Length test, which validates every possible uint16 value (65536), for each of the 4 header structures (x4), for both the return value and packet content (x2) totalling 524288 test cases for this one function.  There are similar examples for cmd code but as this is only an 8-bit field it only results in a few thousand cases.

If it is not desirable to have so many test cases, recommendation is to change the unit test to _not_ loop through every possible value.   No other functions are tested this way i.e. we do not call other APIs accepting a uint16 with every representable value.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/737
"Version 2 MsgId construction doesn't match description, overloads bits","**Describe the bug**
Version 2 code takes the full APID (0x7FF mask), or's in a bit for cmd/tlm (0x80 mask) then or's in the Subsystem ID shifted by 8

That means if a user defines an APID of 0x80 for a telemetry message (which is valid per CCSDS), the system will report it as type cmd if it gets the type from the msgid.  It's also a collision between 0x7 bits from the Subsystem ID and the 0x700 bits of APID.

Basically logic doesn't mirror:
CFE_SB_SetMsgId of 0x7FF -> APID = 0x7F, Type = Cmd, SubsystemID = 7
CFE_SB_GetMsgId from APID=0x7FF, Type = Tlm, SubsytemID = 0 -> MsgId = 0x7FF

**To Reproduce**
N/A - code inspection

**Expected behavior**
Get/Set should mirror (SetMsgId should not overload bits)

**Code snips**
https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/sb/cfe_sb_msg_id_util.c#L118-L152
https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/sb/cfe_sb_msg_id_util.c#L155-L187
https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/sb/cfe_sb_msg_id_util.h#L64-L75

**System observed on:**
N/A

**Additional context**
Uncovered as part of #711 work

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/736
document configs to indicate that MAX string sizes do not include null-terminator,"**Is your feature request related to a problem? Please describe.**
There is a laundry list of string size definitions in sample_mission_cfg.h, cpu1_platform_cfg.h, and default_osconfig.cmake that should be documented as to whether the setting includes a byte for a null-terminator (so say `CFE_MISSION_TBL_MAX_NAME_LENGTH` is defined as 16, does that mean I must limit my table name to 15 characters plus the null-terminator?)

This is related to #730 .

**Requester Info**
Christopher.D.Knight@nasa.gov","help wanted, good first issue, docs",https://github.com/nasa/cFE/issues/735
Further simplify SB unit tests,"**Is your feature request related to a problem? Please describe.**
Recently the software bus unit tests were updated to employ macros for common code bits, but this only amplifies the fact that the SB unit tests don't follow the typical UT assert model.

In particular, they ""collect"" a bunch of conditions together and then assert at the end that all the conditions where true.  There is no reason to do this deferred reporting with UT assert, and it only serves to obfuscate the true failure because the UT assert failure message line number can be quite different than what actually failed.

**Describe the solution you'd like**
Now that the macros/wrappers are in place, rather than having them only mimic the old test logic, have them implement the preferred UT assert patterns.

- Remove `TestStat` global variable.  Do not keep global state outside UT assert.
- Remove separate text messages inside ""if"" conditionals and replace with UT assert statements.  That's what the UT assert API is for, after all.
- Remove `VERBOSE` compile-time option.  The UT assert has a runtime verbosity flag, just call `UtDebug` and the message will only be printed when set to verbose mode.

**Additional context**
This really just the next step along the path to using UT assert as it was intended, and removing the ""compatibility crutches"" that were put into place because CFE (and SB in particular) didn't employ the same test patterns as other apps/modules.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test",https://github.com/nasa/cFE/issues/734
CFE_SB_ValidateChecksum implementation does not match description,"**Describe the bug**
CFE_SB_ValidateChecksum claims it returns true if not supported:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/inc/cfe_sb.h#L1314-L1316

but also claims it returns false:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/inc/cfe_sb.h#L1321-L1323

and then implements a false return:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/sb/cfe_sb_util.c#L398-L401

**To Reproduce**
Read the code.

**Expected behavior**
Consistency

**Code snips**
See above

**System observed on:**
N/A

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/733
MsgId abstraction - add API to translate between topic ID and MsgId,"**Is your feature request related to a problem? Please describe.**
Currently applications hard-code the MID value they use for both publication of telemetry and subscribing to commands and/or telemetry from other applications.  This is typically done via a header file such as `${appname}_msgids.h`.

The problem is in a multi-CPU environment this is a barrier (and often the only barrier) to having a single binary build be loaded onto multiple processors  

For core apps within CFE, this is already done by assigning a message ""topic ID"" to each core app, which is an offset from a base MID.  For instance, in `cfe_mission_cfg.h` we have:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/cmake/sample_defs/sample_mission_cfg.h#L380-L381

And ""topic"" definitions:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/cmake/sample_defs/sample_mission_cfg.h#L411-L428

And in `cpu1_msgids.h` this organizes it into message IDs by topic:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/cmake/sample_defs/cpu1_msgids.h#L47-L64

Offsetting a base MID by a topic value is a completely logical way to solve the issue of running the same code on multiple CPUs and assigning different MID values, but `CFE_SB_MsgId_t` values are supposed to be abstract.  There should be no assumption that they can be added together like this.  

Additionally, the same translation should be implemented as a runtime API, rather than forcing the value to be computed only at compile time.

**Describe the solution you'd like**
Add a new API to software bus that allows determining a MID value at runtime, given a topic ID along with an instance number.

For instance:
```
CFE_SB_MsgId_Compose(uint16 TopicId, uint16 InstanceNum, CFE_SB_MsgId_t *MsgId);
CFE_SB_MsgId_Decompose(CFE_SB_MsgId_t MsgId, uint16 *TopicId, uint16 *InstanceNum);
```

This can be further simplified for ""Local"" requests by getting the instance number from the PSP, for example, something like:
```
CFE_SB_MsgId_t CFE_SB_MsgId_From_TopicId(uint16 TopicId);
```

Would return the MID of the topic on the current/same CPU.

Topic IDs can be assigned exactly as they are today (at least for now), because they can be assigned at mission scope and are agnostic to CPU/instance number.  

Furthermore, the translation between topic ID and and MsgId need not be limited to a simple addition/bitmask - the conversion can be a implemented in a user-supplied library and customized based on however a mission chooses to allocate its MID values for routing.

Subscription requests would then be simplified.  For example in ES, the HK subscription in:

https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/es/cfe_es_task.c#L292-L296

Would become:

```
Status = CFE_SB_SubscribeEx(CFE_SB_MsgId_From_TopicId(CFE_MISSION_ES_SEND_HK_MSG), CFE_ES_TaskData.CmdPipe,
                                CFE_SB_Default_Qos, CFE_ES_TaskData.LimitHK);
```

This would in turn make all the `msgids.h` header files obsolete and unnecessary... because all CPUs can use the same topic IDs and translate at runtime.

**Describe alternatives you've considered**
Message IDs can also be assigned in a separate configuration table and loaded via TBL services, which is supported today if the application is written that way, but most are not.

For apps that don't already use TBL services for config, it is a fairly substantial change to add it.  It is significantly easier to change the API used to translate the MID as proposed here to make the app CPU/instance agnostic, rather than introduce a configuration table for this purpose.

**Additional context**
Obviously not for CFE 6.8... but recommended to discuss for 6.9/7.0 or whenever.

We might want to consider changing the name from `CFE_MISSION_EVS_CMD_MSG` to `CFE_MISSION_TOPICID_EVS_CMD`  (or something) to make it clearer.  But fundamentally its OK, and it still would apply even if the topics are assigned by a tool/database of some type in the future.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/732
fix #730 - adds padding to CFE_TBL_FileDef_t,"**Describe the contribution**
Adds a uint32 padding (initialized with 0) to CFE_TBL_FileDef_t to ensure that the filename is null-terminated.

**Testing performed**
Builds fine with ""sample_app_table.tbl"" as the filename (which is exactly the length of the Filename field.)

**System(s) tested on**
Debian 10.3

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",duplicate,https://github.com/nasa/cFE/pull/731
"low CFE_MISSION_MAX_FILE_LEN and CFE_TBL_FILEDEF(..., ""sample_app_table.tbl"") causes silent non-truncation","**Describe the bug**
I was scratching my head why my table file was named ""sample_app_table.tbl\004""  until I realized that CFE_MISSION_MAX_FILE_LEN is defined as ""20"" and ""sample_app_table.tbl"" is exactly 20 characters. If I had one more char, the compiler would err. But it accepts static definition of structs using strings that are the exact length, which loses the null terminator.

**Expected behavior**
Should allow file names of CFE_MISSION_MAX_FILE_LEN chars.

**Reporter Info**
Christopher.D.Knight@nasa.gov","bug, cFE-TBL",https://github.com/nasa/cFE/issues/730
Integration Candidate: 2020-05-27,"**Describe the contribution**
Fix #704
Fix #603
Fix #719

**Testing performed**
https://github.com/nasa/cFS/pull/96/checks

**Expected behavior changes**
PR #714 -  API Change: cFE ut_sb_stubs now has CFE_SB_DeletePipe available.
    Behavior Change: App unit tests requiring this will not fail to build due to undefined reference to `CFE_SB_DeletePipe`

PR #713 -  Hook functions may now use the `va_list` form and obtain the full set of variable arguments passed to `CFE_EVS_SendEvent` and variants. 

PR #725 - Replace all direct references to data types defined in `ccsds.h` with the abstract type defined in `cfe_sb.h`.

**System(s) tested on**
Ubuntu:Bionic

**Additional context**
Part of nasa/cFS#96

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
Alan Gibson, NASA-GSFC
",,https://github.com/nasa/cFE/pull/729
"Fix #724, implement config-based target builds","**Describe the contribution**
The existing build system built target executables grouped by toolchain as a proxy for CPU architecture + machine options/flags.  The app binaries would be built once and copied to any/all targets sharing that toolchain.

The side effect of doing this is that the application needs to be written in an CPU-agnostic manner, performing its subscriptions and configurations from runtime table data rather than hardcoded/fixed values.  Unfortunately most apps are not coded that way, so workarounds were needed.

This changes the top level process to include the ""platform"" within this target build logic, effectively treating different platform configs as entirely different builds, even if they share the same toolchain file.

As a result, binaries will only be shared between targets that explicitly set the `TGTx_PLATFORM` setting in `targets.cmake` to the same value.

Fixes #724

**Testing performed**
Build CFE and unit test + sanity check (default config)
Add CPU2 configuration using default platform settings (different) and unit test + sanity check.  CPU2 is built separately from CPU1, all OSAL, PSP, CFE, and app binaries are re-built.
Add CPU2 configuration sharing the same platform config settings and unit test + sanity check.  CPU2 is built like the previous implementation where binaries are built once and copied to both installations.

**Expected behavior changes**
No impact to behavior, only affects build.
This does affect the build tree adding an extra subdirectory at the architecture level.  For instance rather than `build/native` it becomes `build/native/default_cpu1`.  Sample makefile is updated so `make test` works with the default.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
As a side effect this makes all platform configs available to all apps, no real scope separation.  So inclusion of `cfe_platform_cfg.h` from an app will no longer trigger an error, even though I'd still recommend against actually doing that.

A future improvement might be to build OSAL + PSP separately and only do the CFE + APPS per config, using an imported target.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",duplicate,https://github.com/nasa/cFE/pull/728
multiple targets - not able to see cfe_msgids.h when building tables,"**Describe the bug**
When building for multiple targets, app tables fail to build, reporting ""cfe_msgids.h: No such file or directory"".
 
**To Reproduce**
```
git clone https://github.com/nasa/cFS
cd cFS
git submodule init
git submodule update
cp cfe/cmake/Makefile.sample Makefile
cp -r cfe/cmake/sample_defs .
sed -e 's/#SET(TGT2/SET(TGT2/' < .cfe/cmake/sample_defs/targets.cmake > sample_defs/targets.cmake
echo '!' > sample_defs/cpu2_cfe_es_startup.scr
cp sample_defs/cpu1_msgids.h sample_defs/cpu2_msgids.h
sed -e 's/CPU_ID 1/CPU_ID 2/' < sample_defs/cpu1_platform_cfg.h | sed -e 's/CPU_NAME ""CPU1""/CPU_NAME ""CPU2""/' > sample_defs/cpu2_platform_cfg.h
export SIMULATION=native
make
```

**Expected behavior**
Builds.

**System observed on:**
Debian 10.3 VM

**Reporter Info**
Christopher.D.Knight@nasa.gov",duplicate,https://github.com/nasa/cFE/issues/727
"Fix #711, Separate secondary header access functions","**Describe the contribution**
Fix #711 - Separates header manipulation and definitions for easier mission customization 
Fix #733 - Fixes validate checksum description to match implementation
Fix #736 - Fixes get msgid logic to not override bits
Fix #597 - Removes local endian SID macros
Fix #529 - By adding an API that does support maximum msg size reporting, note also fixes limit in CFE_SB_InitMsg by the same means.
Fix #781 - Fixes set/get message id logic to not override bits

 - Enables source selection and out-of-tree mission defined overrides in the msg directory.

NOTE - There are follow-on tickets to finalize and clean up after this change.

**Testing performed**
Ran unit tests for version 1 and version 2 header formats, all pass except sample_app due to a different bug (nasa/sample_app#87)

**Expected behavior changes**
This just enables override.  No actual changes in behavior other than the bug fixes.  Some name changes in structure fields, but apps shouldn't be directly accessing those fields to begin with.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: master bundle + this commit (and the other branch configured to override)

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/726
"Fix #719, remove refs to ccsds data structures","**Describe the contribution**

Replace all direct references to data types defined in `ccsds.h` with the abstract type defined in `cfe_sb.h`.

Fixes #719 

**Testing performed**
Build and run CFE, sanity check, confirm all unit test pass.

**Expected behavior changes**
No impact to behavior.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
There are similar changes to apps, too, which will be separate PRs (not submitted yet).

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","enhancement, CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/725
Improve handling of platform config,"**Is your feature request related to a problem? Please describe.**
Almost every app, including the CFE core apps, have some sort of ""platform scope"" internal config options.  And the way we handle this for apps and external entities is currently different than the way we handle this for CFE core.  To move forward we need to consolidate this into a single, consistent method that can be applied for both external apps and core apps.

**Describe the solution you'd like**
CMake already generates the `cfe_platform_cfg.h` file so with some tweaks we can get it to work for everything.

There are several possible approaches to consider:

Option 1: Do we generate a single ""monolithic"" platform header file and let all apps include it?

- Advantage: Would look basically like the current ""cfe_platform_cfg.h"" and we can even keep the name, preserving backward compatibility
- Disadvantage: Would contain configs for every app/module on the platform thereby giving access to all sorts of out-of-scope info, no way to enforce apps to use only their own config items, so they could inadvertently break ABI consistency by using config items they don't own.

Option 2: Do we generate a per-app ""focused"" platform header file which is only used by that app?

- Advantage: Cleaner, Better scoping, Only give apps/modules a header file containing their own config items, they can't use what they can't see, and thereby can't introduce unexpected ABI dependencies.

- Disadvantage: Would probably need to be a different name, as we can't call everything ""cfe_platform_cfg.h"" (too confusing), and would probably (eventually) require breaking up the current cfe_platform_cfg.h into a config file per core app (es_platform_cfg.h, evs_platform_cfg.h, etc).  In the current CFE core there are examples of cross-pollination too, where EVS uses data structures defined by ES which are based on platform config.  So these become undocumented/uncontrolled ABI dependencies.  We'd have to fix those.

**Additional context**
Option 2 is cleaner but arguably more work, might take a little longer to implement, and have a bigger impact on apps.

This type of issue is coming more to the forefront when considering things like #554, but there have been periodic issues posted in the past regarding the ""weirdness"" around the way `cfe_platform_cfg.h` is handled, so it would be good to generally fix that too, but need to get some sort of community consensus before implementing anything.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/724
CFE_EVS_Register should log or send an event when NumEventFilters > CFE_PLATFORM_EVS_MAX_EVENT_FILTERS,"**Is your feature request related to a problem? Please describe.**
When NumEventFilters is > CFE_PLATFORM_EVS_MAX_EVENT_FILTERS when calling CFE_EVS_Register , the specified filter table can get silently truncated. 

In addition, the Filters parameter should be marked const as it is copied into the filter table. and not modified. 

**Describe the solution you'd like**
Send a message to syslog warning of the truncated filter table 

**Describe alternatives you've considered**
Send an event message using the EVT appID

**Additional context**
 This truncation happens for the CI open source app which has 12 events, but the default cfe_platform_cfg only supports 8 event filters.

**Requester Info**
John N Pham, Northrop Grumman
",bug,https://github.com/nasa/cFE/issues/723
"Replace ""--whole-archive"" link switch","**Is your feature request related to a problem? Please describe.**
The CFE core executable link process uses  `--whole-archive` to ensure that all functions provided in libraries are actually linked into the executable.  

Normally during a link procedure, if a compilation unit within a static library does not resolve any unresolved symbol (i.e. doesn't implement anything that is actually called by the application) it is dropped.  However because CFE dynamically loads applications/libraries at runtime, this can be a problem if a particular API is only invoked by apps and not by CFE itself.

The `--whole-archive` linker flag does accomplish the goal of making sure all the APIs are linked in and available for application use, but it has problems:

- The switch isn't really supported by CMake, it requires a backdoor approach to add it via `target_link_libraries()`.
- Adding using this method requires the full string of the exact option, which is specific to the GCC/LD toolchain paradigms  Other toolchains might have a similar option, but would require patching the link line to support them.
- Even when using GCC, the exact option string also differs depending on whether `gcc` or `ld` tool is used for the final link step.  (In the former case, a `-Wl,` prefix is required to pass the option through to the linker stage).  This has been a frequent issue for FSW target builds in that there is no reliable way to determine if this extra prefix is needed.

**Describe the solution you'd like**
A possible alternative would be to use the OSAL ""static symbol"" feature to pull in every API that should be available for application use. 

**Describe alternatives you've considered**
Leave as-is.

**Additional context**
Downside of this approach is that it requires maintaining a separate list of every public API that CFE core + OSAL is supposed to contain.  However, this is already (somewhat) done for unit test stubs.

The upside is that it can help catch errors of missing functions.  This may become relevant if/when users are allowed to override parts of CFE with their own implementation (e.g. issue #554).  If a required API is missing, this can detect it early and generate a linker error, whereas the current approach will get a runtime error only if/when an application is loaded that tries to use the missing API.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/722
(WIP) Trivial header redefine,"**Describe the contribution**
Partially address #554 
Just does the trivial redefine of a header

Since no source selection, requires all the elements that are referenced to still exist but allows  moving, adding, etc.  Once source selection is available, can redefine handling or remove fields (update API implementations).

Note, depends on apps actually using the real SB header definitions for this to work (size will fail if using CFE_SB_CMD_HDR_SIZE).

**NOT FOR MERGE**  - this actually shows an example of redefining header, don't merge!

**Testing performed**
Built with redefined header, used updated cmdUtil to test that the field was added as expected.

**Expected behavior changes**
Just an example, but adds a field to the header

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle + this commit, updated cmdUtil

**Additional context**
See #554 for context

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",duplicate,https://github.com/nasa/cFE/pull/721
"Fix #718, add user-specified extra modules to build","**Describe the contribution**
Add a new setting that can be set in targets.cmake, to enable users to add extra custom functions/modules to CFE core executable.

This can be used, among other things, for future support of a modular/customizable message header structure.

Fixes #718

**Testing performed**
Build and execute CFE, confirm normal operation/sanity check.
Build and execute all unit tests, confirm passing.

**Expected behavior changes**
Any user-supplied library can be added to the build.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This general concept can also be used to provide replacement implementations of core modules (e.g. TBL, FS) with some additional tweaking to exclude those modules from the subsequent build of CFE core.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",duplicate,https://github.com/nasa/cFE/pull/720
"Remove references to ""CCSDS"" structures outside of CFE SB. ","**Is your feature request related to a problem? Please describe.**
As a prerequisite to #554, all modules other than SB should __NOT__ refer to the ""CCSDS"" data types and macros.

**Describe the solution you'd like**
Remove references to the `ccsds.h` header file along with any direct references to types defined in this file.  Use the types or abstractions defined in `cfe_sb.h` instead.

**Additional context**
Mostly an issue for the ""Send HK"" commands that accept a `CCSDS_CommandPacket_t` structure.  

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/719
Add user-specified extra modules to build system,"**Is your feature request related to a problem? Please describe.**
As a prerequisite to #554, the user needs to have the ability to specify their own set of extra modules to provide for the features they are customizing.  

**Describe the solution you'd like**
A new setting in `targets.cmake` that allows users to add their own customization layers.

This is similar to but slightly different than loadable apps in that:

- The same set/config should be applied to all CPUs  (i.e. if using for a message abstraction layer, all CPUs should share the same one).  So it belongs as a global setting, rather than a setting associated with a single target.
- These would be linked with cfe core, rather than as dynamically-loaded libraries because something like a message abstraction layer is needed by SB itself, so it can't be loaded later.

**Additional context**
Initial function would be very simple - just include the libraries in the build, nothing more.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/718
Unit test hooks should refer to context elements by name (future proof),"**Is your feature request related to a problem? Please describe.**
Old context elements were position based, nasa/osal#479 allows getting by name so order added in stub no longer matters.

**Describe the solution you'd like**
Get context by name to future-proof against stub changes.

**Describe alternatives you've considered**
None

**Additional context**
#713 - example

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/717
WIP: Modular message format,"**Describe the contribution**
Work in progress for review/discussion regarding modular message formats

Related to #554

**Testing performed**
Very little.  It builds and runs.

**Expected behavior changes**
Users can choose framing formats via an external library

**System(s) tested on**
Ubuntu 20.04

**Additional context**
NOT ready for actual merge, this is mainly for discussion.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",duplicate,https://github.com/nasa/cFE/pull/716
ut_sb_stubs.c decription comment for CFE_SB_RcvMsg does not match code,"**Describe the bug**
In ut_sb_stubs.c description comment for CFE_SB_RcvMsg incorrectly states that first call returns CFE_SUCCESS, while additional calls return -1.  It appears that it will always return CFE_SUCCESS.

**To Reproduce**
Steps to reproduce the behavior:
1. Write a test where CFE_SB_RcvMsg is called at least twice.
2. Check result on first call == CFE_SUCCESS, will pass
3. Check result on second call == -1, will fail (result is CFE_SUCCESS instead)
4. additional calls have same result as 3 above.

**Expected behavior**
Rewrite comment to show that result returned is always CFE_SUCCESS, unless the commented behavior is what is desired, then fix code to accomplish that.

**Code snips**
```
/*****************************************************************************/
/**
** \brief CFE_SB_RcvMsg stub function
**
** \par Description
**        This function is used to mimic the response of the cFE SB function
**        CFE_SB_RcvMsg.  By default it will return the TIMEOUT error response,
**        unless the test setup sequence has indicated otherwise.
**
** \par Assumptions, External Events, and Notes:
**        None
**
** \returns
**        Returns CFE_SUCCESS on the first call, then -1 on the second.
**
******************************************************************************/
int32 CFE_SB_RcvMsg(CFE_SB_MsgPtr_t *BufPtr,
                    CFE_SB_PipeId_t PipeId,
                    int32 TimeOut)
{
    int32 status;
    static union
    {
        CFE_SB_Msg_t Msg;
        uint8 Ext[CFE_MISSION_SB_MAX_SB_MSG_SIZE];
    } Buffer;

    status = UT_DEFAULT_IMPL(CFE_SB_RcvMsg);

    if (status >= 0)
    {
        if (UT_Stub_CopyToLocal(UT_KEY(CFE_SB_RcvMsg), (uint8*)BufPtr, sizeof(*BufPtr)) < sizeof(*BufPtr))
        {
            memset(&Buffer, 0, sizeof(Buffer));
            *BufPtr = &Buffer.Msg;
        }
    }

    return status;
}
```

**System observed on:**
 - Hardware: PC
 - OS: RHEL Workstation 7.6 (Maipo), Linux 3.10.0-1062.1.2.el7.x86_64
 - Versions cFE 6.7 

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Alan Gibson, NASA, GSFC-0587","bug, unit-test",https://github.com/nasa/cFE/issues/715
"Fix #704, Added stub for CFE_SB_DeletePipe in ut_sb_stubs.c","**Describe the contribution**
Fixes #704. Added stub for CFE_SB_DeletePipe.
Stub takes PipeId argument and using UT_Stub_CopyFromLocal, saves it into the data buffer.

**Testing performed**
Steps taken to test the contribution:
1. Build steps: 'make ENABLE_UNIT_TESTS=TRUE SIMULATION=native'
Execution steps: 
1. Created simple unit test in cfs_cf calling CFE_SB_DeletePipe directly.
2. PipeId was set as the data buffer pointer and given an initial value.
3. expectedPipeId given a different value than PipeId
4. UtAssert_True used to show they are not equal(fails)
5. Call to CFE_SB_DeletePipe with expectedPipeId as argument
6. UtAssert_True used to show they are equal(pass)
7. Ran unit test from build/native/apps/cfs_cf/unit-test
Please note: this test was not saved to any repo.
Output:
[BEGIN] 04 Test_check_sb_stubs
[ FAIL] 04.001 cf_app_tests.c:77 - PipeId = 0x00000005, exp = 0x00000006
[ PASS] 04.002 cf_app_tests.c:83 - PipeId = 0x00000006, exp = 0x00000006
[  END] 04 Test_check_sb_stubs  TOTAL::2     PASS::1     FAIL::1      MIR::0      TSF::0      N/A::0  

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: cFE ut_sb_stubs now has CFE_SB_DeletePipe available.
 - Behavior Change: App unit tests requiring this will not fail to build due to undefined reference to `CFE_SB_DeletePipe'

**System(s) tested on**
 - Hardware: PC
 - OS: RHEL-7.6 (Maipo) Linux 3.10.0-1062.1.2.el7.x86_64
 - Versions: cFE 6.7

**Additional context**
None.

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Gibson, NASA, GSFC-0587
",CCB:Approved,https://github.com/nasa/cFE/pull/714
"Fix #603, Full context info for EVS event stubs","**Describe the contribution**
Create a va_list object to capture the full set of variable arguments passed to CFE_EVS_SendEvent and variants (TimedEvent, WithAppID).  Use the variable argument form of the stub implementation to pass all info through to a (possible) hook function.

Fixes #603 

**Testing performed**
Build all unit tests and confirm normal operation, all passing.

**Expected behavior changes**
Hook functions may now use the va_list form and obtain the full context info.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
see also nasa/osal#479, nasa/sample_app#66 for other related enhancements.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/713
Integration Candidate 2020-05-13,"**Describe the contribution**
Fix #309 
Fix #657 
Fix #679
Fix #681  
Fix #684  
Fix #707

**Testing performed**
Bundle CI - https://travis-ci.com/github/nasa/cFS/builds/167639047

**Expected behavior changes**
PR #673 - using ut stubs CFE_EVS_SendEvent and CFE_ES_WriteToSysLog, the register buffer will have the correct size. access to register buffer element will exist

PR #685 - Both the main task and the child task(s) are successfully deleted and restarted after the exception occurs.

PR #686 -  Fixes doxygen warnings for the tbl subsystem.

PR #691 - No compiler warnings or errors on cross build.

PR #699 -  Fixes a typo

PR #708 -  Changes Message Key from uint16 to uint32 to avoid rollover and system hang


**System(s) tested on**
Bundle CI - Ubuntu:Bionic

**Additional context**
Part of nasa/cfs#87

See PRs for detailed changes and more testing information

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose Tovias, CACI-LZT Technology
Joseph Hickey, Vantage Systems, Inc.
Christopher D. Knight, NASA-ARC
Jacob Hageman - NASA-GSFC
",,https://github.com/nasa/cFE/pull/712
Separate secondary header access API's from SB,"**Is your feature request related to a problem? Please describe.**
Need to support #554 
Software bus logic doesn't care about message format, just use message access APIs like all the other services.

**Describe the solution you'd like**
MSG module and header file for all the message getter/setters.  Deprecation of the SB API's.  Code separation to support source selection/mission configuration.

**Describe alternatives you've considered**
None

**Additional context**
#554

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/711
Clarify/clean up spacecraft/cpu names/ids,"**Is your feature request related to a problem? Please describe.**
Defined in platform config:
- CFE_PLATFORM_CPU_ID (referenced by CFE_PLATFORM_TBL_VALID_PRID_1 and CFE_CPU_ID)
  - CFE_PLATFORM_TBL_VALID_PRID_1 is used in internal table logic
  - CFE_CPU_ID looks unused
- CFE_PLATFORM_CPU_NAME (referenced by CFE_CPU_NAME)
  - CFE_CPU_NAME looks unused

Defined in mission config:
- CFE_MISSION_SPACECRAFT_ID (referenced by CFE_PLATFORM_TBL_VALID_SCID_1 and CFE_SPACECRAFT_ID)
  - CFE_SPACECRAFT_ID looks unused
  - CFE_PLATFORM_TBL_VALID_SCID_1 used in internal table logic

Defined by cmake:
- CFE_CPU_ID_VALUE (from TGTID), sets .Default_CpuId in target config
- CFE_CPU_NAME_VALUE (from TGTNAME) sets .Default_CpuName in target config
- CFE_SPACECRAFT_ID_VALUE (from SPACECRAFT_ID) sets .Default_SpacecraftId in target config

**Describe the solution you'd like**
Remove/deprecate unused and/or clarify use/intent.  Looks like spacecraft ID may actually be defined differently (42 vs 0x42).

**Describe alternatives you've considered**
Stay confused.

**Additional context**
Table use looks like it could lead to inconsistencies.

**Requester Info**
Jacob Hageman - NASA/GSFC, triggered by @johnphamngc comments on nasa/psp#154
",enhancement,https://github.com/nasa/cFE/issues/710
"Fix #706, Add location to push CTF scripts and plugins","**Describe the contribution**
Fix #706 
Adds locations to push CTF scripts and plugins

**Testing performed**
Steps taken to test the contribution:
1. Ensured that the editor launches nominally
2. Built and executed 3 test scripts

**System(s) tested on**
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.13.0, OSAL 5.0.8.0, PSP 1.4.4.0

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA/Goddard
",invalid,https://github.com/nasa/cFE/pull/709
"Fix #707, Resolve highest MsgID of 0xFFFF bug","**Describe the contribution**
Changes Message Key from uint16 to uint32 to avoid rollover and system hang
Fix #707 
Fix #414

**Testing performed**
Steps taken to test the contribution:
1. Set CFE_PLATFORM_SB_HIGHEST_VALID_MSGID to 0xFFFF
1. Built (SIMULATION=native) and ran, confirmed startup
1. CI - https://travis-ci.com/github/skliper/cFS/builds/166553342

**Expected behavior changes**
Full message ID range available

**System(s) tested on**
 - Hardware: cFS Dev 3
 - OS: Ubuntu 18.04
 - Versions: Bundle w/ this change

**Additional context**
Identified/resolved by JSC

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","bug, CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/708
Setting highest valid message ID's to 0xFFFF hangs cfe,"**Describe the bug**
Given max number of message keys is 1+ highest valid msgid:
https://github.com/nasa/cFE/blob/95f34d25cb2843b8ba9db6338bb0b53cb3e38f92/fsw/cfe-core/src/sb/cfe_sb_priv.h#L107

and message key is uint16:
https://github.com/nasa/cFE/blob/95f34d25cb2843b8ba9db6338bb0b53cb3e38f92/fsw/cfe-core/src/sb/cfe_sb_priv.h#L122

Setting CFE_PLATFORM_SB_HIGHEST_VALID_MSGID to 0xFFFF results in forever loop in:
https://github.com/nasa/cFE/blob/95f34d25cb2843b8ba9db6338bb0b53cb3e38f92/fsw/cfe-core/src/sb/cfe_sb_init.c#L219-L224

**To Reproduce**
Set CFE_PLATFORM_SB_HIGHEST_VALID_MSGID to 0xFFFF and build/run.

**Expected behavior**
Full 16 bits of message id should be usable.

**Code snips**
See above

**System observed on:**
 - Hardware: cFS Dev 3
 - OS: Ubuntu 18.04
 - Versions: master bundle

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC (per JSC identification of the issue)",bug,https://github.com/nasa/cFE/issues/707
CFE_ES_OneAppTlm_Payload_t telemetry struct contains non mission-scoped-sized array,"**Is your feature request related to a problem? Please describe.**
Unsure if this is intentional, but 
`CFE_ES_AppInfo_t` is directly used by `CFE_ES_OneAppTlm_Payload_t` which is ground visible. `CFE_ES_AppInfo_t` uses `OS_MAX_*`, whereas all other ground-visible telemetry uses the mission-scoped `CFE_MISSION_MAX_*`.

**Describe the solution you'd like**
`CFE_ES_OneAppTlm_Payload_t` should be structured such that the size is dependent solely on mission-scoped constants and consistent amongst all CPUs. 

This is an enhancement as opposed to a bug report since in practice both constants are likely to be same. 

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
John N Pham, Northrop Grumman


",bug,https://github.com/nasa/cFE/issues/705
ut_sb_stubs.c needs a stub for CFE_SB_DeletePipe ,"**Is your feature request related to a problem? Please describe.**
CFE_SB_DeletePipe does not have a stub in ut_sb_stubs.c causing undefined reference error when building unit tests for an app that uses this call.

**Describe the solution you'd like**
Add the stub for CFE_SB_DeletePipe with full context tracking.

**Describe alternatives you've considered**
Create my own locally in the app's unit test, but this does not help everyone.

**Requester Info**
Alan Gibson, NASA","enhancement, unit-test",https://github.com/nasa/cFE/issues/704
ut_sb_stubs.c needs a stub for CFE_SB_ZeroCopySend ,"**Is your feature request related to a problem? Please describe.**
CFE_SB_ZeroCopySend does not have a stub in ut_sb_stubs.c causing undefined reference error when building unit tests for an app that uses this call.

**Describe the solution you'd like**
Add the stub for CFE_SB_ZeroCopySend with full context tracking.

**Describe alternatives you've considered**
Create my own locally in the app's unit test, but this does not help everyone.

**Requester Info**
Alan Gibson, NASA
","enhancement, wontfix, unit-test",https://github.com/nasa/cFE/issues/703
ut_sb_stubs.c needs a stub for CFE_SB_ZeroCopyGetPtr ,"**Is your feature request related to a problem? Please describe.**
CFE_SB_ZeroCopyGetPtr does not have a stub in ut_sb_stubs.c causing undefined reference error when building unit tests for an app that uses this call.

**Describe the solution you'd like**
Add the stub for CFE_SB_ZeroCopyGetPtr with full context tracking.

**Describe alternatives you've considered**
Create my own locally in the app's unit test, but this does not help everyone.

**Requester Info**
Alan Gibson, NASA
","enhancement, unit-test",https://github.com/nasa/cFE/issues/702
cfe/SCH deadlocks on exit on Linux,"using modules
95f34d25cb2843b8ba9db6338bb0b53cb3e38f92 cfe
c2bcebbc4d7e60a41b604e9acfc8af3c60b8536a osal
37ee8eb2d7ce006dc1570b920ae75a7ac5f89d27 psp

there seems to be a deadlock upon exit for timers being used by SCH.

See stacktrace

```
Thread 2 (Thread 0xef3ffb40 (LWP 19797)):
#0  0xf7766430 in __kernel_vsyscall ()
#1  0xf773e436 in __pause_nocancel () from /lib/libpthread.so.0
#2  0xf7734995 in __pthread_mutex_lock_full () from /lib/libpthread.so.0
#3  0x0807bbbe in OS_BinSemGive_Impl (sem_id=4) at /home/tbrain/cert_testbed/osal/src/os/posix/src/os-impl-binsem.c:250
#4  0x0807558c in OS_BinSemGive (sem_id=262148) at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-binsem.c:187
#5  0xf7750628 in SCH_MinorFrameCallback (TimerId=589826) at /home/tbrain/cert_testbed/apps/sch_g/fsw/src/sch_custom.c:442
#6  0x0807b3a8 in OS_Timer_NoArgCallback (objid=589826, arg=0xf77503fe <SCH_MinorFrameCallback>) at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-time.c:227
#7  0x0807b072 in OS_TimeBase_CallbackThread (timebase_id=524290) at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-timebase.c:526
#8  0x0807df44 in OS_TimeBasePthreadEntry (arg=0x80002) at /home/tbrain/cert_testbed/osal/src/os/posix/src/os-impl-timebase.c:305
#9  0xf7736bbc in start_thread () from /lib/libpthread.so.0
#10 0xf76550de in clone () from /lib/libc.so.6

Thread 1 (Thread 0xf7555700 (LWP 19780)):
#0  0xf7766430 in __kernel_vsyscall ()
#1  0xf773497f in __pthread_mutex_lock_full () from /lib/libpthread.so.0
#2  0x0807dc46 in OS_TimeBaseLock_Impl (local_id=2) at /home/tbrain/cert_testbed/osal/src/os/posix/src/os-impl-timebase.c:108
#3  0x0807b63a in OS_TimerDelete (timer_id=589826) at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-time.c:422
#4  0x08075ab8 in OS_CleanUpObject (object_id=589826, arg=0xffc049e8) at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-common.c:263
#5  0x08078877 in OS_ForEachObject (creator_id=0, callback_ptr=0x8075a1c <OS_CleanUpObject>, callback_arg=0xffc049e8) at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-idmap.c:1015
#6  0x08075b0a in OS_DeleteAllObjects () at /home/tbrain/cert_testbed/osal/src/os/shared/src/osapi-common.c:299
#7  0x08074ebe in OS_Application_Run () at /home/tbrain/cert_testbed/psp/fsw/pc-linux/src/cfe_psp_start.c:458
#8  0x080801d1 in main (argc=1, argv=0xffc04b64) at /home/tbrain/cert_testbed/osal/src/bsp/pc-linux/src/bsp_start.c:198
```",bug,https://github.com/nasa/cFE/issues/701
update tbl_UT.c to macros,"**Is your feature request related to a problem? Please describe.**
Now that the UT macros (#491) have been merged into master, and as there's a big number of changes expected (#607), now's a good time to re-do tbl_UT.c to use the new macros .

**Requester Info**
Christopher.D.Knight@nasa.gov","unit-test, cFE-TBL",https://github.com/nasa/cFE/issues/700
"Fix #309, Typo in CFE_ES_RestartApp WriteToSysLog","**Describe the contribution**
Fix typo
Fix #309 

**Testing performed**
None, typo

**Expected behavior changes**
Typo fixed

**System(s) tested on**
N/A

**Additional context**
N/A

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/699
"Fix #693, Utilize UT macros in sb_UT","**Describe the contribution**
cleanup of sb_UT.c

Fix #693
Fix #418 

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov

EDIT: Added fix #418","enhancement, CCB:Approved, unit-test",https://github.com/nasa/cFE/pull/698
Fix 693 sb ut,"**Describe the contribution**
Fixes for sb_UT.c

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",invalid,https://github.com/nasa/cFE/pull/697
"(WIP) Fix #693, Refactor of sb_UT updates to use macros","**Describe the contribution**
This is a refactor for #492, which isolates the sb_UT updates.  Note #695 brought in the macros now independently.
Fix #693 

**Testing performed**
TBD - WIP

**Expected behavior changes**
No behavior change, just simplified sb_UT

**System(s) tested on**
TBD - WIP

**Additional context**
#492, #695 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC
Code implemented by @CDKnightNASA ",duplicate,https://github.com/nasa/cFE/pull/696
"Fix #491, Add UT macros","**Describe the contribution**
This is a refactor of #492 to just include the macros
Fix #491 

**Testing performed**
CI - TBD

**Expected behavior changes**
None, but allows for shorter UTs

**System(s) tested on**
 - CI

**Additional context**
See #492 for original commits and reviews
Suggesting fasttrack (code has been reviewed multiple times)

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC
Note - Code implemented by @CDKnightNASA ",CCB:Approved,https://github.com/nasa/cFE/pull/695
Utilize new macros and correct some sb_UT.c merge conflicts,"**Describe the bug**
Doing the merge conflicts for the ic merges, I mis-merged a couple of Joe's changes ( fix #245 ).

**Reporter Info**
Christopher.D.Knight@nasa.gov","enhancement, unit-test",https://github.com/nasa/cFE/issues/693
Integration Candidate COMBINED 2020-04-29 and 2020-05-06,"**Describe the contribution**

Fix #399, Deprecate decompress
Fix #411, rework exception handling in CFE
Fix #484, Deprecate output to shell commandFix #491, Add UT macros
Fix #519, Deprecate CFS/FS time conversion APIs
Fix #523, SB Subscription report control on separate MID
Fix #551, Remove duplicate CFE_TIME_Local1HzISR prototype
Fix #559, Resolve doxygen warnings
Fix #618, stubs must not depend on real msgid implementation
Fix #637, Remove old CFE_ARINC653-related tests
Fix #639, Remove ES_APP_DEBUG functionality
Fix #641, string operations on GCC9
Fix #661, TBL events update
Fix #666, Change message definitions to ensure alignment
Fix #676, reference to deprecated CFE_SPACECRAFT_ID

**Testing performed**
See PRs
Bundle CI - https://travis-ci.com/github/nasa/cFS/builds/165726730
 
**Expected behavior changes**

PR #638 - No longer automatically decompresses apps/libraries as part of load

PR #646 - Deletes now unused CFE_ES_CountObjectCallback
and CFE_ES_ListResourcesDebug. Flags were unused

PR #640 - Removes all conditional preprocessing blocks related to CFE_ARINC653.

PR #642 - Ensure clean build, no warnings on string operations using GCC 9.3.0.

PR #645 - When `OMIT_DEPRECATED = true` attempt to send output to shell command will result in command error counter increment (unrecognized function code)

PR #647 - SBN will need to init command with new MID

PR #648 - Documentation links and references will now work properly

PR #653 - API CFE_ES_ProcessCoreException is removed, replaced with async event.

PR #668 - Removed duplicate prototype in cfe_time_utils.h

PR #669 -  Removes unused defines and adds documentation to TBL event defines. 

PR #670 -  Deprecates CFE_TIME_CFE2FSSeconds and CFE_TIME_FS2CFESeconds.

PR #674 -  Unit tests now build and run when MESSAGE_FORMAT_IS_CCSDS_VER_2 is configured.

PR #677 -  Build now works with both extended headers and OMIT_DEPRECATED options set.

PR #678 - No more alignment warnings 

PR #695 - Adds new unit test macros

**System(s) tested on**
See PRs

**Additional context**
Part of nasa/cfs#83

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
Christopher D. Knight, NASA-ARC
Leor Bleier, NASA-GSFC
Joseph Hickey, Vantage Systems, Inc.
Guillaume Lethuillier, Self",,https://github.com/nasa/cFE/pull/692
"Fix #679, Alignment warnings in unit test","**Describe the contribution**
Resolve remaining alignment warnings in the unit test and stub code.

**Testing performed**
Build with ENABLE_UNIT_TESTS=true for native arch and a cross target with strict alignment requirements.
confirm no warnings on either build, all unit tests pass.

**Expected behavior changes**
No compiler warnings or errors on cross build.

**System(s) tested on**
Ubuntu 20.04 (host, little endian, 64-bit, lax alignment)
MIPS via QEMU (cross target, big endian, 32-bit, strict alignment)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/691
"Fix #689, Align all software bus message definitions","**Describe the contribution**
Replace uint8[] arrays which reserve space for the header with an instance of the header struct as defined by SB.
    
Note this structure was the basis for the array size, so it is the same size, but by actually using the structure  the resulting message will have the correct alignment.

Fixes #689

**Testing performed**
Execute all unit tests and confirm passing
Sanity check on CFE, builds and runs and processes commands
Also Build and run on 32-bit platform with strict alignment and confirm no warnings/issues

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04 LTS (native, little endian 64 bit)
MIPS 32-bit via QEMU (big endian, strict alignment requirements)

**Additional context**
Just applies the same fix from #678 to all messages.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",duplicate,https://github.com/nasa/cFE/pull/690
Align all software bus message definitions,"**Is your feature request related to a problem? Please describe.**
As an extension to the changes in issue #666/pull #678, the same paradigm should be applied to all other message definitions.  This is currently only working ""by chance"" in that the payloads already contain a uint32 (or larger) value so it is already aligned.

**Describe the solution you'd like**
Change the header structure which is currently defined as a `uint8 []` array into either CFE_SB_CmdHdr_t or CFE_SB_TlmHdr_t so it will be correctly aligned.

**Additional context**
It is safe to assume all remaining message types were already 32-bit aligned because there were no remaining compiler warnings about this, which means this change by itself will not have any effect on the existing message sizes or alignment.

However, when moving to a 64-bit build it may become necessary to enforce 64-bit alignment rather than 32-bit alignment for `CFE_SB_Msg_t` and in that case, the sizes and padding may change from what it currently is.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, invalid",https://github.com/nasa/cFE/issues/689
"Fix #687, validate table handle prior to use","**Describe the contribution**
fixes a bug where a table handle is used prior to validation (used in the variable initialization at the top of CFE_TBL_Load() .)

Fix #687

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",CCB:Approved,https://github.com/nasa/cFE/pull/688
TblHandle used before validation in CFE_TBL_Load,"**Describe the bug**
TblHandle used before validation

**To Reproduce**
See code snip, invalid handle could cause fault

**Expected behavior**
Validate handle before using

**Code snips**
https://github.com/nasa/cFE/blob/8365a0c69b810e313afe0fe19cdc8987374621e3/fsw/cfe-core/src/tbl/cfe_tbl_api.c#L681-L687

**System observed on:**
In code

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/687
"Fix #681, Resolve doxygen warnings for tbl","**Describe the contribution**
Fixes doxygen warnings for the tbl subsystem.

Fix #681

**Testing performed**
make doc, grep ""TBL"" build/doc/warnings.log

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov","CCB:Approved, docs",https://github.com/nasa/cFE/pull/686
"Fix #684, order of CleanupTaskResources","**Describe the contribution**
When cleaning up a task the child task resources should be cleaned first, followed by the main task resources.

This is because child tasks are also associated with the original creator within OSAL and will be found through OSAL ForEachObject, and also via links within the ES task table.

By cleaning child tasks first, this avoids attempting to delete the child task twice.

Fixes #684

**Testing performed**
Hack ""sample_app"" to create a child thread AND trigger an exception after period of time.  Confirmed the original bug report where the attempt to clean up the sample_app resources results in `CFE_ES_TASK_DELETE_ERR` in the unmodified master branch.

Then apply this patch and re-test, and confirm that ""sample_app"" is successfully restarted.  

Also confirm unit tests passing.

**Expected behavior changes**
Both the main task and the child task(s) are successfully deleted and restarted after the exception occurs.

**System(s) tested on**
Ubuntu 20.04 

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/685
CFE_ES_CleanupTaskResources attempts to delete child task twice,"**Describe the bug**
CFE_ES_CleanupTaskResources appears to attempt to delete a child task twice, first via CFE_ES_CleanupObjectCallback and subsequently via a direct call to OS_TaskDelete

**To Reproduce**
On Linux, call CFE_ES_RESTART_APP on an app that has a child task, such as CI, FM, or HS
In VxWorks, can induce also by inducing an exception causing an application restart

**Expected behavior**
App should exit and restart cleanly

**Code snips**
See CFE_ES_CleanupTaskResources 

**System observed on:**
 - PC, SP0-s
 - OS: Linux, VxWorks
 - Versions [e.g. cFE 6.7.12, OSAL 5.0.11, PSP 1.4.8, CI, FM, HS]

**Additional context**
My colleague Alan Wang attempted the following:
```
I purposely caused a program exception to each of the following tasks (built from n cFE Version 6.7.6.0)  to see whether CFE can restart them or not.
 
SCH,   CI,   TO,  HS,   HK,  SC,   DS,   LC,  FM,  MD,  MM,   and CS.
 
CFE successfully (at least on the surface) started all of them except CI, HS, and FM.
 
-> 
program
Exception current instruction address: 0x05266828
Machine Status Register: 0x02029230
Condition Register: 0x24000882
Exception Syndrome Register: 0x08000000
Task: 0x53a6888 ""CI""
0x53a6888 (CI): task 0x53a6888 has had a failure and has been stopped.
0x53a6888 (CI): The task has been terminated because it triggered an exception that raised the signal 4.
1980-012-14:16:59.59263 CFE_ES_RestartApp: Restart Application CI Initiated
1980-012-14:17:04.43385 CFE_ES_CleanUpApp: CleanUpTaskResources for Task ID:10 returned Error: 0xC4000026
EVS Port1 66/1/CFE_ES 41: Restart Application CI Failed: CleanUpApp Error 0xC4000023.
 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
 
-> 
program
Exception current instruction address: 0x054f12cc
Machine Status Register: 0x02029230
Condition Register: 0x24000888
Exception Syndrome Register: 0x08000000
Task: 0x53a7110 ""HS""
0x53a7110 (HS): task 0x53a7110 has had a failure and has been stopped.
0x53a7110 (HS): The task has been terminated because it triggered an exception that raised the signal 4.
1980-012-14:11:48.58489 CFE_ES_RestartApp: Restart Application HS Initiated
1980-012-14:11:54.84338 CFE_ES_CleanUpApp: CleanUpTaskResources for Task ID:15 returned Error: 0xC4000026
EVS Port1 66/1/CFE_ES 41: Restart Application HS Failed: CleanUpApp Error 0xC4000023.
 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
 
-> 
program
Exception current instruction address: 0x0553d814
Machine Status Register: 0x02029230
Condition Register: 0x24000888
Exception Syndrome Register: 0x08000000
Task: 0x53a8220 ""FM""
0x53a8220 (FM): task 0x53a8220 has had a failure and has been stopped.
0x53a8220 (FM): The task has been terminated because it triggered an exception that raised the signal 4.
1980-012-14:09:03.19939 CFE_ES_RestartApp: Restart Application FM Initiated
1980-012-14:09:08.63372 CFE_ES_CleanUpApp: CleanUpTaskResources for Task ID:22 returned Error: 0xC4000026
EVS Port1 66/1/CFE_ES 41: Restart Application FM Failed: CleanUpApp Error 0xC4000023
```
Another colleague John Hueber reported the following:

> CI doesn’t restart when commanded because it calls CFE_ES_ExitApp with the wrong status (running). 
> If I put a 5 second task delay in CI_AppMain before calling CFE_ES_ExitApp the tasks restarts fine.
> It looks like whenever CFE_ES_ExitApp gets called before the task is deleted then the restart is unsuccessful.
> If the task is deleted before it gets to CFE_ES_ExitApp then the restart is successful.
> If the task has child tasks then it takes longer to get to deleting the main task because the child task is in the list of resources that have to be deleted.
> There is a bug in this part because deleting the resources of the task also deletes child tasks, and when the resources are deleted CFE_ES_CleanUpApp tries to delete child tasks (again), which fails and the failure prevents a restart.
> 
> I put CI in apps/hs/fsw/tables/hs_xct.c (HS_XCT_TYPE_APP_MAIN) and apps/hs/fsw/tables/hs_amt.c (HS_AMT_ACT_APP_RESTART)
> then caused an exception in CI no-op processing by clearing an instruction. With the 5 second delay in CI_AppMain the restart was successful.
> Without the delay the restart is unsuccessful.
> 

**Reporter Info**
John N Pham, Northrop Grumman
",bug,https://github.com/nasa/cFE/issues/684
"Fix #675, whole-archive unrecognized when compiling with VxWorks spar…","…c compiler

In START_WHOLE_ARCHIVE and STOP_WHOLE_ARCHIVE, it is missing ""-Wl,"" when compiling for vxworks.

**Describe the contribution**
A clear and concise description of what the contribution is.
- Include explicitly what issue it addresses [e.g. Fixes #X]

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
- Else if Company
  - **HAND SIGNED** Company CLA must be on file (once per release): [Company CLA](../docs/GSC_18128_Corp_CLA_form_1219.pdf)
- Else if Individual
  - **HAND SIGNED** Individual CLA must be on file (once per release): [Individual CLA](../docs/GSC_18128_Ind_CLA_form_1219.pdf)
",duplicate,https://github.com/nasa/cFE/pull/683
LateX generation issues of mission doc,"**Describe the bug**
When building the `refman.pdf` file, multiple warnings are observed from the TeX system. Additionally, the make process itself ends in error. Note that currently the `refman.pdf` file still gets generated.

**To Reproduce**
Steps to reproduce the behavior:
1. Make sure that `GENERATE_LATEX` is set to `YES` in `../cFS/cfe/cmake/cfe-common.doxyfile.in`
2. Do a `make doc` in `../cFS/`
3. Go to `../cFS/build/doc/detaildesign/latex`
4. Do a `make`
5. Observe all the issues printed to stdout

**Expected behavior**
LateX warnings should not be generated. Make should not end in error

**Reporter Info**
Leor Bleier, NASA GSFC\Code 582
","enhancement, good first issue, docs",https://github.com/nasa/cFE/issues/682
Doxygen warnings,"**Describe the bug**
Doxygen warnings due to lack of documentation in the following files:

- `cFS/cfe/fsw/cfe-core/src/tbl/cfe_tbl_internal.c`
- `cFS/cfe/fsw/cfe-core/src/tbl/cfe_tbl_internal.h`

Specifically for function `CFE_TBL_LoadFromFile` in both files

**To Reproduce**
Steps to reproduce the behavior:
1. Build documentation using `make doc`
2. Observe relevant warnings in `../cFS/build/doc/warnings.log`

**Expected behavior**
Functions should be properly documented to avoid warnings

**Reporter Info**
Leor Bleier, NASA GSFC\Code 582","enhancement, docs",https://github.com/nasa/cFE/issues/681
remove conditional TBL compilation logic,"**Is your feature request related to a problem? Please describe.**
With #660 TBL is no longer optional; conditional code/compilation configuration should be removed.

**Requester Info**
Christopher.D.Knight@nasa.gov","bug, enhancement, docs, deprecate, removed",https://github.com/nasa/cFE/issues/680
Remaining alignment warnings in unit test,"**Describe the bug**
There are a few remaining warnings in the unit test stubs and test cases when compiling on an architecture that has strict alignment requirements.

**To Reproduce**
Build with ENABLE_UNIT_TESTS=true on a platform that requires strict alignment (e.g. SPARC, MIPS, etc).

**Expected behavior**
Should compile cleanly

**Code snips**
Example error (first one to appear in my build):
```
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_es_stubs.c: In function ‘CFE_ES_GetPoolBuf’:
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_es_stubs.c:420:23: error: cast increases required alignment of target type [-Werror=cast-align]
             *BufPtr = (uint32 *)PoolPtr;
                       ^
cc1: all warnings being treated as errors
```

**System observed on:**
Ubuntu 20.04, cross compiling for MIPS CPU.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test",https://github.com/nasa/cFE/issues/679
"Fix #666, alignment of CMD/TLM message definitions","**Describe the contribution**
Define the SB message headers such that they are aligned appropriately for casting to/from a `CFE_SB_Msg_t` type.  Note this should not affect the size of these structures on a 32-bit machine with the default configuration, as they are already multiples of `sizeof(uint32)`....

Then change only the CMD/TLM definitions which were generating warnings on the 32-bit build to use this correct definition, rather than a `uint8[]` array to reserve space for the header.  Again in these cases this should not change the size or padding because it already was multiples of `sizeof(uint32)`.  This just makes it so the compiler will appropriately align the overall buffer.

Fix #666

**Testing performed**
Build for 64 + 32 bit platforms with strict alignment settings and confirm that the warnings are gone.  Confirm all tests pass.

**Expected behavior changes**
No impact to behavior.

**System(s) tested on**
Ubuntu 20.04
MIPS yocto/poky embedded Linux (32-bit big endian processor with strict alignment requirements)
RTEMS on QEMU (i686-rtems4.11)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/678
"Fix #676, reference to deprecated CFE_SPACECRAFT_ID","**Describe the contribution**
Change to `CFE_MISSION_SPACECRAFT_ID`, which is the non-deprecated symbol.

Fixes #676 

**Testing performed**
Build with extended header and `OMIT_DEPRECATED` and confirm success.

**Expected behavior changes**
Build now works with both extended headers and OMIT_DEPRECATED options set.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","bug, CCB:Approved",https://github.com/nasa/cFE/pull/677
Reference to deprecated symbol when extended header enabled,"**Describe the bug**
If `MESSAGE_FORMAT_IS_CCSDS_VER_2` is defined then this references a deprecated symbol and fails to build when `OMIT_DEPRECATED` is also set.


**To Reproduce**
Build with both `MESSAGE_FORMAT_IS_CCSDS_VER_2` mission config and `OMIT_DEPRECATED`  compile option.

**Expected behavior**
Should build successfully.

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc
",bug,https://github.com/nasa/cFE/issues/676
whole-archive-unrecognized,"I can work this issue.

**Describe the bug**
In START_WHOLE_ARCHIVE and STOP_WHOLE_ARCHIVE, it is missing ""-Wl,"" when compiling for vxworks. 


I am using a sparc compiler and I get the following error: 

Linking C executable core-plss_cws
cd  ..........    -g    CMakeFiles/core-plss_cws.dir/src/target_config.c.obj  -o core-plss_cws  --whole-archive ../cfe_core_default_plss_cws/libcfe_core_default_plss_cws.a ../psp/ut700-vxworks6.9/libpsp-ut700-vxworks6.9.a ../osal/libosal.a --no-whole-archive 

sparc-wrs-vxworks-gcc: error: unrecognized command line option '--whole-archive'
sparc-wrs-vxworks-gcc: error: unrecognized command line option '--no-whole-archive'


To fix the error see below in code snips:

**To Reproduce**
Steps to reproduce the behavior for XEMU PLSS project:
1. Go to plss_cws_mission
2. source setvars.sh
3. mcrv
4. See error

**Expected behavior**
No error.  A clean build.

**Code snips**
 I updated cafe/cmake/target/CMakeLists.txt


  if (""${CMAKE_C_COMPILER_ID}"" STREQUAL ""GNU"")
    # The option pair for GNU gcc/ld tools
    if(""${CPU}"" STREQUAL ""SPARC"")
       set(START_WHOLE_ARCHIVE ""-Wl,--whole-archive"")
       set(STOP_WHOLE_ARCHIVE  ""-Wl,--no-whole-archive"")
   else()
       set(START_WHOLE_ARCHIVE ""--whole-archive"")
       set(STOP_WHOLE_ARCHIVE  ""--no-whole-archive"")
     endif()
:
    # the linker option prefix may or may not be needed, see below
    set(COMPILER_LINKER_OPTION_PREFIX ""-Wl,"")
  else()
    # Other toolchain options may be added here
  endif()



**System observed on:**
 - Hardware
 - OS: Centos 7
 - Versions:cFE 6.7.12.0, OSAL 5.0.11.0, PSP 1.4.8.0, chksm 9194
 - VxWorks6.9


**Additional context**
Add any other context about the problem here.

**Reporter Info**
Jose Tovias CACI/LZT Technology
",duplicate,https://github.com/nasa/cFE/issues/675
"Fix #618, stubs must not depend on real msgid implementation","**Describe the contribution**
This makes the SB stubs which access message structures into actual stubs, not a replica of the normal implementation.  Stubs manipulate a local (stored in the UT framework) out-of-band buffer to hold the metadata about the message.

This removes the dependency on the actual definition of MsgId used by the mission and makes them agnostic to the setting of extended headers.

This revealed a few other minor issues in test cases where they were depending on values sitting in globals (also fixed).

Fixes #618 

**Testing performed**
Build unit tests with SIMULATION=native ENABLE_UNIT_TESTS=TRUE with and without configuration for extended headers.  Confirm passing.

**Expected behavior changes**
Unit tests now build and run when `MESSAGE_FORMAT_IS_CCSDS_VER_2` is configured.

**System(s) tested on**
Ubuntu 20.04 LTS 64 bit

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/674
"Fix #657, Add UT_Stub_RegisterContext to CFE_EVS_SendEvent and CFE_ES_WriteToSysLog","Add missing UT_Stub_RegisterContext to CFE_EVS_SendEvent and CFE_ES_WriteToSysLog.
This will create the correct register buffer size.

**Describe the contribution**
Add missing UT_Stub_RegisterContext to CFE_EVS_SendEvent and CFE_ES_WriteToSysLog.
This will create the correct register buffer size.
- Fixes #657

**Testing performed**
Steps taken to test the contribution:

travis CI passed:    https://travis-ci.com/github/jtovias/cFS/builds/164052416


**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - Behavior Change:
      - using ut stubs CFE_EVS_SendEvent and CFE_ES_WriteToSysLog, the register buffer will have the correct size
     - access to register buffer element will exist

**System(s) tested on**
 - Hardware:PC and UT700
 - OS: Centos 7 and VxWorks6.9
 - Versions: cFE 6.7.12.0, OSAL 5.0.11.0, PSP 1.4.8.0, chksm 9194

**Additional context**
None.

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose Tovias/ CACI-LZT Technology/JSC 
  - JSC B32:R205/jose.a.tovias@nasa.gov/281-244-8154/ NASA Contract # NNJ14HA04B/Task Order 119: Exploration Extravehicular Mobility Unit (xEMU) Software Development and Engineering Support
  - HAND SIGNED Company CLA has been emailed to GSFC-SoftwareRelease@mail.nasa.gov.
copy sent:  [GSC_18128_Corp_CLA_form_1219_JoseTovias_for_cFE6.7.pdf](https://github.com/nasa/cFE/files/4593753/GSC_18128_Corp_CLA_form_1219_JoseTovias_for_cFE6.7.pdf)

",CCB:Approved,https://github.com/nasa/cFE/pull/673
Integration Candidate: Fast Track,"**Describe the contribution**
Fixes #652 

**Testing performed**
See https://github.com/nasa/cFE/pull/667
Bundle CI - https://github.com/nasa/cFS/pull/78/checks?check_run_id=644721591

**Expected behavior changes**
Users must now select OSAL options via the CMake file in their defs directory, rather than the osconfig.h file.

**System(s) tested on**
See PR
Bundle CI - Ubuntu:Bionic

**Additional context**
Part of https://github.com/nasa/cFS/pull/78

**Contributor Info - All information REQUIRED for consideration of pull request**
 Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/cFE/pull/672
"(WIP) Fix #275, ES comment cleanup","**Describe the contribution**
Draft to consider for comment updates (remove end, remove function name)
Fix #275 

**Testing performed**
None

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Ignore",https://github.com/nasa/cFE/pull/671
"Fix #519, Deprecate CFS/FS time conversion APIs","**Describe the contribution**
Deprecates CFE_TIME_CFE2FSSeconds and CFE_TIME_FS2CFESeconds - in short the conversion/management of local OS time vs mission time isn't within the scope of cFE (it doesn't manage local OS time, so doesn't maintain an appropriate conversion factor).  Utilize the CFE_FS_Header_t time for file creation if needed, synchronize local OS time with mission time, or use the return from stat as a relative (with reset caveats)
Fix #519 

**Testing performed**
Build and unit test - SIMULATION=native ENABLE_UNIT_TESTS=true with and without OMIT_DEPRECATED=true
All passes

**Expected behavior changes**
None other than no longer supporting 

**System(s) tested on**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions: Master bundle + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/670
"Fix #661, TBL events update","**Describe the contribution**
Removes unused defines (recently added), adds documentation to TBL event defines.
fix #661

**Testing performed**
make doc, examined output

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",CCB:Approved,https://github.com/nasa/cFE/pull/669
"Fix #551, Remove duplicate CFE_TIME_Local1HzISR prototype","**Describe the contribution**
Removed duplicate prototype in cfe_time_utils.h
Fix #551

**Testing performed**
Standard make w/ unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions: Master bundle w/ this commit

**Additional context**
Bigger time service cleanup referenced in #302

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/668
"Fix #652, cmake-based OSAL config","**Describe the contribution**
Rather than CFE generating an osconfig.h file directly, it just needs to select file(s) from the defs directory and pass them to OSAL for the config.

This makes it compatible with the upcoming nasa/osal#285 change (in PR nasa/osal#427)

Fixes #652

**Testing performed**
Build code with default provided and confirm that OSAL generates the correct config (osconfig.h) and the build succeeds

**Expected behavior changes**
Users must now select OSAL options via the CMake file in their defs directory, rather than the `osconfig.h` file.

**System(s) tested on**
Ubuntu 20.04 LTS

**Additional context**
Correlates with nasa/osal#427

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/667
"Memory alignment issues in TIME (32bit, MCP750, CCSDS_VER_2 config)","**Is your feature request related to a problem? Please describe.**
```
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/time/cfe_time_tone.c: In function 'CFE_TIME_Tone1HzTask':
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/time/cfe_time_tone.c:1220: warning: cast increases required alignment of target type
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/time/cfe_time_tone.c:1228: warning: cast increases required alignment of target type
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/time/cfe_time_tone.c: In function 'CFE_TIME_Local1HzTask':
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/time/cfe_time_tone.c:1437: warning: cast increases required alignment of target type
```

**Describe the solution you'd like**
Force alignment where possible without changing bits on the wire

**Describe alternatives you've considered**
Remove `-Wcast-align` for this build

**Additional context**
Note there are other alignment issues for other configuration options (#313, #314) but they don't show up for MCP750 with CCSDS Version 2 so aren't critical to 6.8.

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/666
Clarify pipe name scope in documentation,"**Is your feature request related to a problem? Please describe.**
From https://github.com/nasa/cFE/issues/650#issuecomment-622570638

> Although the Pipe names will not collide with other Application Pipe names in the cFE

This not correct, because pipe names WILL conflict with other application pipe names within the cFE.  It is actually OSAL that enforces uniqueness of queue names which underpin the SB pipes.

**Describe the solution you'd like**
Update the line in the documentation.

**Describe alternatives you've considered**
None

**Additional context**
See discussion on #650

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, docs",https://github.com/nasa/cFE/issues/665
cFE cmd/tlm packet clean up,"**Is your feature request related to a problem? Please describe.**
cFE telemetry/command packets could be organized such that variables are ordered in descending size to reduce overall length.  This would make them easier to maintain and remove some of the alignment issues/reduce required padding.

There's also configurable length elements before spares, which doesn't make sense if the configuration changes.

Also should standardize spare/alignment names, many no longer make sense (why ""4"" in example):
https://github.com/nasa/cFE/blob/82c1bd4d1c8937deff801cfebf2698866228ea6a/modules/tbl/fsw/inc/cfe_tbl_msg.h#L829-L830

**Requester Info**
Dan Knutsen
NASA/Goddard
","enhancement, CFS-41, CFS-43",https://github.com/nasa/cFE/issues/664
Mismatched Variable Types in Data Structures ,"**Describe the bug**
While auditing cFE tlm packets for 64 bit alignment issues, I noticed that we have instances of mismatched variable types in data structures.  This results in data being truncated/corrupted.

Example:
In cfe_es.h::CFE_ES_AppInfo_t
There are multiple addresses (StartAddress, CodeAddress, etc) declared as uint32.  They should be declared as cpuaddr variables - similar to CFE_ES_AppStartParams_t:StartAddress and OS_module_address_t:code_address.  

Another example is the priority, stackSize, and Exception Action variables.  See below for declaration trace:

CFE_ES_ParseFileEntry:
unsigned int Priority
unsigned int StackSize
unsigned int ExceptionAction

CFE_ES_AppCreate:
uint32  Priority
uint32  StackSize
uint32  ExceptionAction

CFE_ES_AppStartParams_t:
uint16  ExceptionAction
uint16  Priority
uint32  StackSize

CFE_ES_AppInfo_t:
uint16   Priority
uint16   ExceptionAction
uint32   StackSize

**Reporter Info**
Dan Knutsen
NASA/Goddard
",bug,https://github.com/nasa/cFE/issues/663
"Fix #488, Remove compiler added padding in tlm packets","**Describe the contribution**
Fix #488 
Removes compiler added padding by padding CCSDS_TlmSecHdr_t such that the payload will always start on a 64-bit boundary.  Also adjusts packet alignment such that packets with 64 bit variables are aligned correctly.

Related to nasa/cFS-GroundSystem#81
Intended to be delivered with nasa/cFS-GroundSystem#82

**Testing performed**
Steps taken to test the contribution:
1. Modified GroundSystem.py to display raw packets as they are being decommed
2. Bit busted packets to ensure no compiler added padding is being applied.
3. Ran unit tests.

**Expected behavior changes**
Compiler added padding will no longer be applied to packets.

**System(s) tested on**
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.14.0, OSAL 5.0.13.0, PSP 1.4.9.0


**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA/Goddard",duplicate,https://github.com/nasa/cFE/pull/662
Add documentation for TBL event messages in cfe_tbl_events.h,"**Describe the bug**
The following events are missing documentation:

1. CFE_TBL_LOAD_VAL_ERR_EID
2. CFE_TBL_LOAD_SRC_TYPE_ERR_EID
3. CFE_TBL_LOAD_FILENAME_LONG_ERR_EID
4. CFE_TBL_LOAD_SHORT_FILE_ERR_EID
5. CFE_TBL_LOAD_TBLNAME_MISMATCH_ERR_EID
6. CFE_TBL_HANDLE_ACCESS_ERR_EID

**To Reproduce**
Search `cfe_tbl_events.h` for `TODO`

**Expected behavior**
Add Doxygen documentation like the other EIDs in the file. Delete TODO comment

**Reporter Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",enhancement,https://github.com/nasa/cFE/issues/661
"Fix #583, ES start table","**Describe the contribution**
Fix #583 
This is a re-do of the CFE ES ""startup"" table code. This includes unit tests (coverage) and requested ""volatile"" boot option.

**Testing performed**
both unit tests and running the core

**Expected behavior changes**
This changes ES to use a table to load libraries and load and start applications. This is a significant change to the internals, as libraries are loaded and applications are started in the ES task (spawned by the ES main task) and, of course, a table is used instead of a .scr file.

 - API Change: internal API changes
 - Behavior Change: loading from .tbl instead of .scr

**System(s) tested on**
Debian 9 VM

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov","enhancement, CCB:Ignore, conflicts, cFE-ES",https://github.com/nasa/cFE/pull/660
"CFE_SB_GetMsgId use, UT_SetForceFail does not set the return code (returns 0).","**Describe the bug** 
CFE_SB_GetMsgId in cfe/fsw/cfe-core/ut-stubs/ ut_sb_stubs.c.
 
CFE_SB_GetMsgId is not returning the PLSS_STATE_DET_WAKEUP_MID set by UT_SetForceFail. The problem I see is the MsgId is now calculated by the MsgPtr which points to a Buffer.Msg (defined in CFE_SB_RcvMsg) but this Buffer.Msg (StreamId[0] and streamId[1]) is set to all zeros and never set to the PLSS_STATE_DET_WAKEUP_MID. In cfe6.6, the MsgId was calculated from the StubEntry data which is set by  UT_SetForceFail.



**To Reproduce**
Steps to reproduce the behavior:



Here is my unit test sequence
 ```
plss_state_det_UT_app.c
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_RcvMsg), 1, CFE_SUCCESS);
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_RcvMsg), 1, !CFE_SUCCESS);      // in ProcessNewCmds()
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_RcvMsg), 1, !CFE_SUCCESS);      // in ProcessNewData()
    UT_SetForceFail(UT_KEY(CFE_SB_GetMsgId), PLSS_STATE_DET_WAKEUP_MID);     // #define 0x18D2   <-----  Setting the MsgID to be returned by CFE_SB_GetMsgId
    UT_SetHookFunction(UT_KEY(CFE_EVS_SendEvent), UTHF_CFE_EVS_SendEvent_HookMyString, NULL);
  
    iRetVal = PLSS_STATE_DET_RcvMsg(5);      // arbitrary iBlocking value, CFE_SB_RcvMsg is being hooked
 ```
```
plss_state_dep_app.c
int32 PLSS_STATE_DET_RcvMsg(int32 iBlocking)
{
…
    iStatus = CFE_SB_RcvMsg(&MsgPtr, g_PLSS_STATE_DET_AppData.SchPipeId, iBlocking);   ß-------------  Returns MsgPtr pointing to Buffer.Msg (set to all zeros)
 
…
    if (iStatus == CFE_SUCCESS)
    {
        MsgId = CFE_SB_GetMsgId(MsgPtr);         <--------  Returns 0, using Buffer.Msg not using StubEntry data  
        switch (MsgId)
       {
            case PLSS_STATE_DET_WAKEUP_MID:
 ```
 
The MsgId is 0 which should be PLSS_STATE_DET_WAKEUP_MID.
The reason is because the MsgPtr points to Buffer.Msg (set to all zeros) defined in CFE_SB_RcvMsg
 
```
cfe/fsw/cfe-core/ut-stubs/ ut_sb_stubs.c:
int32 CFE_SB_RcvMsg(CFE_SB_MsgPtr_t *BufPtr,
                    CFE_SB_PipeId_t PipeId,
                    int32 TimeOut)
{
    int32 status;
    static union
    {
        CFE_SB_Msg_t Msg;
        uint8 Ext[CFE_MISSION_SB_MAX_SB_MSG_SIZE];
    } Buffer;
 
    status = UT_DEFAULT_IMPL(CFE_SB_RcvMsg);
    if (status >= 0)
    {
        if (UT_Stub_CopyToLocal(UT_KEY(CFE_SB_RcvMsg), (uint8*)BufPtr, sizeof(*BufPtr)) < sizeof(*BufPtr))
        {
            memset(&Buffer, 0, sizeof(Buffer));
            *BufPtr = &Buffer.Msg;
``` 
 
The MsgPtr is passed to the CFE_SB_GetMsgId, where the MsgId is calculated using        #define CCSDS_RD_SID(phdr)         (((phdr).StreamId[0] << 8) + ((phdr).StreamId[1]))
The calucated MsgId is 0 since MsgPtr is pointing to Buffer.Msg which is set to all zeros.
 
 ```
CFE_SB_MsgId_t CFE_SB_GetMsgId(const CFE_SB_Msg_t *MsgPtr)
{
    CFE_SB_MsgId_t MsgId = 0;
 
    UT_DEFAULT_IMPL(CFE_SB_GetMsgId);
 
    if (UT_Stub_CopyToLocal(UT_KEY(CFE_SB_GetMsgId), &MsgId, sizeof(MsgId)) < sizeof(MsgId))
    {
#ifdef MESSAGE_FORMAT_IS_CCSDS
 
#ifndef MESSAGE_FORMAT_IS_CCSDS_VER_2 
        MsgId = CCSDS_RD_SID(MsgPtr->Hdr);
#else
 ```
 
Note: For UT_DEFAULT_IMPL(CFE_SB_GetMsgId); I.  I do see PLSS_STATE_DET_WAKEUP_MID  being used.






**Expected behavior**
Return PLSS_STATE_DET_WAKEUP_MID

**System observed on:**
 - Hardware
 - OS: Centos 7
 - Versions:cFE 6.7.12.0, OSAL 5.0.11.0, PSP 1.4.8.0, chksm 9194

**Reporter Info**
Jose Tovias CACI/LZT Technology",question,https://github.com/nasa/cFE/issues/659
Missing registering contexts in stub functions,"I’ll work this issue

The issue causes seg faults cause by not registering contexts. I resolved this by adding the missing registrations.
 

cfe/fsw/cfe-core/ut-stubs/ut_evs_stubs.c:
int32 CFE_EVS_SendEvent(uint16 EventID,
                        uint16 EventType,
                        const char *Spec,
                        ...)
{
    int32 status;
    UT_Stub_RegisterContext(UT_KEY(CFE_EVS_SendEvent), &EventID);
    UT_Stub_RegisterContext(UT_KEY(CFE_EVS_SendEvent), &EventType);  <----- missing
    UT_Stub_RegisterContext(UT_KEY(CFE_EVS_SendEvent), Spec);              <----- missing
..
}
 
cfe/fsw/cfe-core/ut-stubs/ ut_es_stubs.c:
int32 CFE_ES_WriteToSysLog(const char *pSpecString, ...)
{
    int32   status;
    UT_Stub_RegisterContext(UT_KEY(CFE_ES_WriteToSysLog), pSpecString);  <----- missing
 ...}


Expected behavior
Return register buffer size=3 when using CFE_EVS_SendEvent and buffer size =1 when using CFE_ES_WriteToSysLog.

System observed on:

Hardware
OS: Centos 7
Versions:cFE 6.7.12.0, OSAL 5.0.11.0, PSP 1.4.8.0, chksm 9194


Reporter Info
Jose Tovias CACI/LZT Technology",bug,https://github.com/nasa/cFE/issues/657
CFE_SB_SetMsgTime sets CCSDS_TlmSecHdr_t Time field in native endianness,"**Is your feature request related to a problem? Please describe.**
CFE_SB_SetMsgTime populates the CCSDS_TlmSecHdr_t Time field with native endianness format instead of using macros.

ccsds.h definition of the time headers are network byte order.

**Describe the solution you'd like**
Define actual standard, confirm across stakeholders and fix.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",duplicate,https://github.com/nasa/cFE/issues/656
System Log/Event string table model unification in FSW and UT update,"**Is your feature request related to a problem? Please describe.**
For CFE code that generates syslog messages, the coverage testing checks that a particular message was sent to syslog. The UT code uses a string table, but the CFE code has it hard-coded in the code.

**Describe the solution you'd like**
Unify the string table model in CFE so that all CFE code that uses strings for events, syslog, etc. store those strings in said table. This would simplify UT checks and would also allow for localization of the CFE codebase.

**Describe alternatives you've considered**
Removing the UT string table would also make things simpler.

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, unit-test",https://github.com/nasa/cFE/issues/655
"Fix #652, cmake-based OSAL config","**Describe the contribution**
Rather than CFE generating an osconfig.h file directly, it just needs to select file(s) from the defs directory and pass them to OSAL for the config.

This makes it compatible with the upcoming nasa/osal#285 change (in PR nasa/osal#427)

Fixes #652

**Testing performed**
Build code with default provided and confirm that OSAL generates the correct config (osconfig.h) and the build succeeds

**Expected behavior changes**
Users must now select OSAL options via the CMake file in their defs directory, rather than the `osconfig.h` file.

**System(s) tested on**
Ubuntu 20.04 LTS

**Additional context**
Correlates with nasa/osal#427

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:FastTrack,https://github.com/nasa/cFE/pull/654
"Fix #411, rework exception handling in CFE","**Describe the contribution**
Move exception handling to a PSP function.  In this approach the CFE only logs data after the event as a background job.

Replaces the CFE_ES_ProcessCoreException with a simple notification that causes the ES background job to run, which in turn polls the PSP for logged exceptions and writes entries to the ES ER log.

Both the PSP execption scan and the ER log file dump are converted to background jobs.

Fixes #411
Fixes #76 

**Testing performed**
Validate CFE exception handling behavior on POSIX and VxWorks (not implemented on RTEMS).
Add divide by zero ""bug"" to sample_app for testing.
Confirm exception is logged correctly
Confirm ER dump to file works

**Expected behavior changes**
No change from CMD/TLM perspective
API `CFE_ES_ProcessCoreException` is removed, replaced with async event.

**System(s) tested on**
Ubuntu 20.04 LTS 64-bit
VxWorks 6.9 on MCP750

**Additional context**
Needs corresponding changes in PSP

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/cFE/pull/653
CFE needs to provide CMake-based config file for OSAL,"**Is your feature request related to a problem? Please describe.**
Currently the CFE cmake script generates an `osconfig.h` file for OSAL to compile with.

**Describe the solution you'd like**
After nasa/osal#285 is fixed (PR nasa/osal#427) the CFE will need to  pass OSAL a configuration file in CMake syntax, which then OSAL uses to generate its own `osconfig.h`.

**Additional context**
Needed for compatibility

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/652
CFE_ES_SEND_MEM_POOL_STATS_CC Issues,"**Describe the bug**
There are multiple issues with the CFE_ES_SEND_MEM_POOL_STATS_CC command:
1.	The command/function(s) used are fundamentally flawed in that a user can send a seemingly benign command that can result in a segmentation fault if one of the command parameters is incorrect.  For example, if the PoolHandle parameter is set to zero a segmentation fault will result (pretty much any value below xFFFFFE28 faults on my machine).  This occurs when handle is validated via the CFE_ES_ValidateHandle function.  Should consider modifying the CFE_ES_ValidateHandle function + updating the unit test to test command on boundary/extreme conditions.
2.	On a 64-bit machine if the PoolHandle parameter is set to a valid value the function will fail.  This is because CFE_PSP_MemValidateRange – which is called via the CFE_ES_ValidateHandle function as part of the validation process, limits the max memory range of the handle to xFFFFFFFE.
3.	On a 64-bit machine - compiler added padding will be applied to the command.  The order of variable declaration should ideally be descending in size to avoid future conflicts.

**Expected behavior**
Command works nominally and is vetted via combination of unit/functional tests.

**System observed on:**
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.13.0, OSAL 5.0.12.0, PSP 1.4.9.0

**Reporter Info**
Dan Knutsen
NASA/Goddard
",bug,https://github.com/nasa/cFE/issues/651
Pipe Name Collision Discussion,"**Describe the bug**
In https://github.com/nasa/cFE/blob/master/docs/cFE%20Application%20Developers%20Guide.md
> Although the Pipe names will not collide with other Application Pipe names in the cFE, the Developer/Operator could become confused if every Application named their Pipe(s) ""MY_PIPE"". It should be noted, however, that all Pipes for a single Application must have unique names.

This doesn't seem to be true since when I add two apps that try to have the same pipe name I get a failure.

**To Reproduce**
If I use the same .so file in my startup script but change the app name of the second one:
```
CFE_APP, /cf/App.so, AppMain, App,    80,  16384, 0x0, 0;
CFE_APP, /cf/App.so, AppMain, App2,  80,  16384, 0x0, 0;
```

I get the following error:
```
EVS Port1 66/1/CFE_SB 62: CreatePipeErr:OS_QueueCreate failed, name taken (app=App2, name=App_PIPE)
```
as they are both trying to make the same ""App_PIPE"".

**Expected behavior**
I thought given the text that the pipe names would still be unique to that application.

**Code snips**
N/A

**System observed on:**
Laptop
Distributor ID: Ubuntu 18.04.4 LTS
Versions:cFE 6.7.7.0, OSAL 5.0.6.0, PSP 1.4.4.0

**Additional context**
N/A

**Reporter Info**
Philip Cooksey
NASA Ames (KBR)
",question,https://github.com/nasa/cFE/issues/650
Integration Candidate: 2020-04-22,"**Describe the contribution**

Fix #591, #121, #410, #503, #623

**Testing performed**
See PRs
Bundle CI - https://github.com/nasa/cFS/pull/74/checks?check_run_id=637311464

**Expected behavior changes**

PR #625 - Upon power on reset, default system log mode set to overwrite. Upon processor reset, default system log mode set to discard.

PR #619 - No longer locks while locked (no issue observed on linux/posix, but user reported issue on FreeRTOS 10)

PR #606 - Internal `CFE_TBL_LoadFromFile()` API changed slightly to add AppName as a parameter. Return value from `LoadFromFile()` no longer relevant for event generation.

PR #622 - Updates `CFE_TBL_CleanUpApp` such that it now checks the 'used flag' prior to calling `CFE_TBL_RemoveAccessLink` for a given TblHandle. Also sets the AppId to `CFE_TBL_NOT_OWNED` after removing the access descriptor link from linked list.

PR #624 - Removed `OS_FS_SUCCESS, OS_FS_ERROR , OS_FS_ERR_INVALID_POINTER, OS_FS_ERR_NO_FREE_FDS , OS_FS_ERR_INVALID_FD, and OS_FS_UNIMPLEMENTED` from `osapi-os-filesys.h`

**System(s) tested on**
See PRs
Bundle CI - Ubuntu:Bionic

**Additional context**
https://github.com/nasa/cFS/pull/74

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hafgeman, NASA-GSFC
Daniel Knutsen, NASA-GSFC
Christopher D. Knight NASA-ARC
Gerardo E. Cruz-Ortiz, NASA-GSFC",,https://github.com/nasa/cFE/pull/649
"Fix #559, Resolve doxygen warnings","**Describe the contribution**
Fixes #559, resolving all doxygen warnings

**Testing performed**
Steps taken to test the contribution:
1. Fixed warnings as listed in `warnings.log`
2. Built documentation using `make doc`
3. Observed relevant documentation working correctly

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
- Documentation links and references will now work properly

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- Leor Bleier NASA GSFC\Code 582
",CCB:Approved,https://github.com/nasa/cFE/pull/648
"Fix #523, SB Subscription report control on separate MID","**Describe the contribution**
Moves inter-app commands to separate MID (like HK request from SCH).  These requests only come from SBN as of now.  No longer using the ground command MID.  Also updates the unit tests to match the changes (checks new error, updates MID's for command tests).
Fix #523 

**Testing performed**
Build and ran tests local, also CI - https://travis-ci.com/github/skliper/cFS/builds/162454974

**Expected behavior changes**
SBN will need to init command with new MID

**System(s) tested on**
 - Hardware: cFS Dev Server 3/CI
 - OS: Ubuntu 18.04
 - Versions: Master bundle + this branch

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/647
"Fix #639, Remove ES_APP_DEBUG functionality","**Describe the contribution**
Deletes now unused CFE_ES_CountObjectCallback
and CFE_ES_ListResourcesDebug.
Fix #639 

**Testing performed**
CI - https://travis-ci.com/github/skliper/cFS/builds/162476743

**Expected behavior changes**
None, flag was undefined

**System(s) tested on**
 - Hardware: CI
 - OS: Ubuntu 18.04
 - Versions: Master bundle + this branch

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/646
"Fix #484, Deprecate shell output command","**Describe the contribution**
Deprecates the shell output command
Fix #484 
Fix #84 

See #643 for approaches to replacing ""list"" functionality (list apps, list tasks, list resources) that was implemented as ""special"" shell commands.

**Testing performed**
Build and ran tests locally with SIMULATION=native, ENABLE_UNIT_TESTS=true with and without OMIT_DEPRECATED, passed

**Expected behavior changes**
When deprecated attempt to send output to shell command will result in command error counter increment (unrecognized function code).

**System(s) tested on**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions: Based on integration branch since it had critical fixes + this branch.  Can rebase once integration branch is merged.

**Additional context**
#643 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, deprecate, security",https://github.com/nasa/cFE/pull/645
Global build options no longer global,"**Describe the bug**
Deprecation flags not showing up in build for cFE/apps/PSP

**To Reproduce**
Prep with SIMULATION=native ENABLE_UNIT_TEST=true OMIT_DEPRECATED=true
make VERBOSE=true and see the DEPRECATED flags not applied to cFE/apps/PSP

**Expected behavior**
Global flags should be global

**Code snips**
None

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle (was testing fix to #484)

**Additional context**
Critical for CI testing...

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/644
"Add ""special"" ES shell commands as real commands","**Is your feature request related to a problem? Please describe.**
ES special commands using the SHELL FC and a special string don't follow command processing model, missing requirements, etc
CFE_ES_ListApplications
CFE_ES_ListTasks
CFE_ES_ListResources

**Describe the solution you'd like**
Implement these as real commands

**Describe alternatives you've considered**
Delete these

**Additional context**
#484 

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/643
"Fix #641, string operations on GCC9","**Describe the contribution**
Ensure clean build, no warnings on string operations using GCC 9.3.0.

Fixes #641

**Testing performed**
Build code with default config, SIMULATION=native BUILDTYPE=release on GCC 9.3.0.
Confirm successful build with no warning.
Confirm unit tests passing
Sanity check CFE operation

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04 LTS 64 bit

**Additional context**
Some string ops were genuinely incorrect (particularly in UT) but some were perfectly OK and handled correctly per the C spec.  In particular the new ""rules"" that GCC9 warns about make the `strncat()` library function (and some others) somewhat off-limits even if used correctly.

The new string truncation checking feature of GCC generates a boatload of false positives and basically makes certain library functions generate warnings even if used correctly, some other projects have been adding `-Wno-stringop-truncation` compiler flag to avoid this.  However with these workarounds CFE is able to build without adding this, but apps might need it.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","bug, CCB:Approved",https://github.com/nasa/cFE/pull/642
Many string truncation warnings with newer GCC,"**Describe the bug**
Ubuntu has released 20.04 LTS which includes GCC 9.3.0.  When using this compiler it implements a much stricter (and often over-zealous) checking of string ops.

For instance: 
```
In file included from /usr/include/string.h:495,
                 from /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/es/cfe_es_cds.c:49:
In function ‘strncpy’,
    inlined from ‘CFE_ES_RegisterCDSEx’ at /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/es/cfe_es_cds.c:299:12:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: error: ‘__builtin_strncpy’ specified bound 38 equals destination size [-Werror=stringop-truncation]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

**To Reproduce**
Build code with default config using GCC 9.3.0, with optimization enabled and full warnings.

**Expected behavior**
Code should build cleanly.

**System observed on:**
Ubuntu 20.04 LTS 64 bit.

**Additional context**
Unfortunately GCC warns about ANY construct which MIGHT truncate, even if truncation is anticipated and handled properly in the code.  GCC now declares that one is never allowed to truncate anything in a C library string operation, even if you read the manual and coded it correctly per the C spec, it's still wrong to GCC9.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/641
"Fix #637, Remove old CFE_ARINC653-related tests","**Describe the contribution**
Fix #637
Removes all conditional preprocessing blocks related to CFE_ARINC653.
(Only used in `fsw/cfe-core/unit-test/es_UT.c` and `fsw/cfe-core/unit-test/es_UT.h`).

**Testing performed**
Steps taken to test the contribution:
1. Standard build and test procedure.  
`SIMULATION=native`, `ENABLE_UNIT_TESTS=true`, `OMIT_DEPRECATED` set to `false` then `true`, `BUILDTYPE=debug` 
All unit tests passed. No errors reported by cFS executable.

**Expected behavior changes**
None

**System(s) tested on**
 - iMac (Retina 4K, 2019)
 - OS: Ubuntu 18.04 (via VMware Fusion 11.5.3)
 - GCC: 7.5.0
 - Versions: master bundle with this commit

**Additional context**
Also successfully built using custom Docker images (CentOS 7, Ubuntu 18.04, and Ubuntu 20.04) implementing the standard build procedure. In this context, different combinations of `OMIT_DEPRECATED` and `BUILDTYPE` were used. No errors reported by cFS executable.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Guillaume Lethuillier
Personal, individual CLA submitted","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/640
Remove ES_APP_DEBUG ifdef and related code,"**Is your feature request related to a problem? Please describe.**
Debug code exists in flight code, uses printf, ifdefed out with ES_APP_DEBUG.  Undocumented option.

**Describe the solution you'd like**
Remove.

**Describe alternatives you've considered**
N/A

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/639
"Fix #399, Deprecate decompress","**Describe the contribution**
Fix #399 
Removes untraced capabilities to decompress libraries or
apps on load.  For non-startup apps, FS can be used.  For
startup, recommendation is to compress/decompress as part
of boot/startup vs individual applications/libs at load.

Fix #291
By deprecating decompress it can be moved to the FS app.

Fix #135 
Static code analysis issues in decompress now N/A

**Testing performed**
Steps taken to test the contribution:
1. Standard build with and without code deprecated, SIMULATION=native, ENABLE_UNIT_TESTS=true

**Expected behavior changes**
No longer automatically decompresses apps/libraries as part of load

**System(s) tested on**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions: Master bundle + this commit

**Additional context**
FS app updates will add decompress functionality, and decompress is planned to be implemented as a replaceable library

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, deprecate",https://github.com/nasa/cFE/pull/638
Remove old CFE_ARINC653 related tests,"**Is your feature request related to a problem? Please describe.**
Code breaks if CFE_ARINC653 is defined.

**Describe the solution you'd like**
Remove old ifdef'ed out test code

**Describe alternatives you've considered**
None

**Additional context**
Only used in fsw/cfe-core/unit-test/es_UT.c

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, good first issue, unit-test",https://github.com/nasa/cFE/issues/637
Unit tests fail to build when extended headers enabled,"**Describe the bug**
As a test of the most recent integration candidate, I attempted to verify operation with extended headers but the unit test code fails to build in this configuration.

The following errors exist in `ut_sb_stubs.c`:
```
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c: In function ‘CFE_SB_GetMsgId’:
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:293:31: error: ‘CFE_SB_CMD_MESSAGE_TYPE’ undeclared (first use in this function); did you mean ‘CFE_SB_NO_MESSAGE’?
               MsgId = MsgId | CFE_SB_CMD_MESSAGE_TYPE;
                               ^~~~~~~~~~~~~~~~~~~~~~~
                               CFE_SB_NO_MESSAGE
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:293:31: note: each undeclared identifier is reported only once for each function it appears in
In file included from /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/cfe_sb.h:43:0,
                 from /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/cfe_evs_msg.h:41,
                 from /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/cfe_evs.h:42,
                 from /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/cfe.h:51,
                 from /home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:36:
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c: In function ‘CFE_SB_SetMsgId’:
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:500:42: error: implicit declaration of function ‘CFE_SB_RD_APID_FROM_MSGID’; did you mean ‘CFE_SB_INVALID_MSG_ID’? [-Werror=implicit-function-declaration]
   CCSDS_WR_APID(MsgPtr->SpacePacket.Hdr, CFE_SB_RD_APID_FROM_MSGID(MsgId) );
                                          ^
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/ccsds.h:294:92: note: in definition of macro ‘CCSDS_WR_APID’
 #define CCSDS_WR_APID(phdr,value)  ((((phdr).StreamId[0] = ((phdr).StreamId[0] & 0xF8) | ((value >> 8) & 0x07))) ,\
                                                                                            ^~~~~
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:502:42: error: implicit declaration of function ‘CFE_SB_RD_TYPE_FROM_MSGID’; did you mean ‘CFE_SB_HK_TLM_MSG’? [-Werror=implicit-function-declaration]
   CCSDS_WR_TYPE(MsgPtr->SpacePacket.Hdr, CFE_SB_RD_TYPE_FROM_MSGID(MsgId) );
                                          ^
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/ccsds.h:305:91: note: in definition of macro ‘CCSDS_WR_TYPE’
 #define CCSDS_WR_TYPE(phdr,value)   ((phdr).StreamId[0] = ((phdr).StreamId[0] & 0xEF) | ((value << 4) & 0x10))
                                                                                           ^~~~~
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:509:46: error: ‘CFE_PLATFORM_ENDIAN’ undeclared (first use in this function)
   CCSDS_WR_ENDIAN(MsgPtr->SpacePacket.ApidQ, CFE_PLATFORM_ENDIAN);
                                              ^
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/ccsds.h:350:110: note: in definition of macro ‘CCSDS_WR_ENDIAN’
 #define CCSDS_WR_ENDIAN(shdr,val)        ( (shdr).APIDQSubsystem[0] = ((shdr).APIDQSubsystem[0] & 0xFB) | (((val) & 0x01) << 2) )
                                                                                                              ^~~
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/ut-stubs/ut_sb_stubs.c:513:52: error: implicit declaration of function ‘CFE_SB_RD_SUBSYS_ID_FROM_MSGID’; did you mean ‘CFE_SB_ALLSUBS_TLM_MSG’? [-Werror=implicit-function-declaration]
   CCSDS_WR_SUBSYSTEM_ID(MsgPtr->SpacePacket.ApidQ, CFE_SB_RD_SUBSYS_ID_FROM_MSGID(MsgId));
                                                    ^
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/inc/ccsds.h:353:109: note: in definition of macro ‘CCSDS_WR_SUBSYSTEM_ID’
 #define CCSDS_WR_SUBSYSTEM_ID(shdr,val)  (((shdr).APIDQSubsystem[0] = ((shdr).APIDQSubsystem[0] & 0xFE) | ((val & 0x0100) >> 8)) ,\
                                                                                                             ^~~
```

**To Reproduce**
Build according to instructions, but set:
`#define MESSAGE_FORMAT_IS_CCSDS_VER_2` 
in mission config.

**Expected behavior**
Build should succeed.

**System observed on:**
Ubuntu 18.04 LTS 64-bit

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, duplicate",https://github.com/nasa/cFE/issues/636
Integration Candidate: 2020-04-15,"**Describe the contribution**

Fixes #617, #344, #580, #335, #295, #480, #263, #494, and #632

**Testing performed**
See PRs

Bundle CI - https://travis-ci.com/github/nasa/cFS/builds/162280689

**Expected behavior changes**

1. PR #474 - Changes to cmake syntax might improve behavior in IDEs
2. PR #575 - Documentation Only
3. PR #577 - None, reduces user confusion due to duplicate defines
4. PR #582 - None, deprecates additional items
5. PR #584 - None, except if someone defines this value as unsigned it won't break...
6. PR #598 - No impact to CMD/TLM interface or API. Internal changes only.
7. PR #602 - Exposes the `CFE_SB_IsValidMsgId()` for application usage.
8. PR #605 - `CFE_SB_GetLastSenderID` will now detect if it is being called prior to a message being sent on a given pipe.
9. PR #634 - Mismatches between PSP/BSP/OS are now detected and warned about during make prep. Only the `CFE_SYSTEM_PSPNAME` is actually required to be specified for a CFE build now. Others can be omitted.

**System(s) tested on**
See PRs
Bundle CI - Ubuntu:Bionic

**Additional context**
Part of https://github.com/nasa/cFS/pull/70

**Contributor Info - All information REQUIRED for consideration of pull request**
 Joseph Hickey, Vantage Systems Inc.
Jacob Hageman, NASA-GSFC
Daniel Knutsen, NASA-GSFC
Stanislav Pankevich, PTS GmbH",,https://github.com/nasa/cFE/pull/635
"Fix #632, Infer OSAL_SYSTEM_BSPTYPE from CFE_SYSTEM_PSP_NAME","**Describe the contribution**
Normally the CFE PSP uses/links with an OSAL BSP of the same name. This removes the need to explicitly specify OSAL_SYSTEM_BSPTYPE in the toolchain file, as it can be reliably inferred.

Fixes #632 

This is also another alternative way to fix #629 

**Testing performed**
Build with defaults (as in README, e.g. a simple `make prep`), as well as `SIMULATION=native`, and for i686-rtems4.11 platform.  Confirm successful build.

Also ""forced"" a mismatch by hacking the i686-rtems4.11 toolchain to request bad combinations, and confirm that the build system warns of the mismatch now:

If `OSAL_SYSTEM_BSPTYPE` is set to `pc-linux`, the following warning happens in `make prep`
```
CMake Warning at cmake/arch_build.cmake:334 (message):
  Mismatched PSP/BSP: pc-rtems implies pc-rtems, but pc-linux is configured
Call Stack (most recent call first):
  CMakeLists.txt:119 (process_arch)
```
Likewise if the `OSAL_SYSTEM_OSTYPE` is set to `posix`, the follow is seen (from OSAL):
```
CMake Warning at /home/joe/code/cfecfs/github/osal/CMakeLists.txt:138 (message):
  Mismatched BSP/OS: pc-rtems implies rtems, but posix is configured
```

Finally removed settings of OSAL_SYSTEM_OSTYPE and OSAL_SYSTEM_BSPTYPE from the toolchain and confirmed that code correctly builds without issue, using the pc-rtems BSP and rtems OS layers, as expected for this toolchain.

**Expected behavior changes**
- Mismatches between PSP/BSP/OS are now detected and warned about during make prep
- Only the CFE_SYSTEM_PSPNAME is actually required to be specified for a CFE build now.  Others can be omitted.

**System(s) tested on**
Ubuntu 18.04 LTS 64 bit, with i686-rtems4.11 cross target

**Additional context**
The related change to infer OSAL_SYSTEM_OSTYPE from OSAL_SYSTEM_BSPTYPE is in nasa/osal#432 and pull request nasa/osal#427.  If it is desired to merge separately this can still be merged but it will have to continue setting OSAL_SYSTEM_OSTYPE.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","bug, enhancement, CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/634
Define toolchain via TGT<x>_SYSTEM in sample configuration,"**Is your feature request related to a problem? Please describe.**
See https://github.com/nasa/cFE/pull/630#issuecomment-617276365, cpu toolchain naming hack.

**Describe the solution you'd like**
Transition to defining the toolchain explicitly, eventually remove the hack support logic.

**Describe alternatives you've considered**
None

**Additional context**
#630 

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc4",https://github.com/nasa/cFE/issues/633
Update build scripts so only CFE_SYSTEM_PSPNAME needs to be specified,"**Is your feature request related to a problem? Please describe.**
Currently when cross compiling the user-supplied scripts/toolchain file need to specify three configurations:
- CFE_SYSTEM_PSPNAME
- OSAL_SYSTEM_BSPTYPE
- OSAL_SYSTEM_OSTYPE

However, although an OS layer can have multiple different BSP/PSP layers, each PSP only works with a specific OS layer.  

**Describe the solution you'd like**
The CFE build should only require that CFE_SYSTEM_PSPNAME is specified.  It should automatically choose the right OSAL OS/BSP layers that correspond to that PSP.

**Describe alternatives you've considered**
Leaving it as-is has a potential for mismatching incompatible layers.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/632
split unit-test files,"**Is your feature request related to a problem? Please describe.**
Using the Eclipse IDE, the large size of the unit test source files triggers the ""Scalability mode"".

**Describe the solution you'd like**
There's little reason the source files need to be monolithic, splitting the unit test code (further) into separate files organized by API function or groups of related functions will improve organization, readability and performance.

**Describe alternatives you've considered**
Leaving the files as-is.

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, unit-test",https://github.com/nasa/cFE/issues/631
"Fix #629, Define BSP type in sample config","**Describe the contribution**
Update of OSAL_SYSTEM_BSPNAME to OSAL_SYSTEM_BSPTYPE in sample toolchains.
Fix #629 

**Testing performed**
Steps taken to test the contribution:
1. Readme build steps

**Expected behavior changes**
Builds out of the box with sample config

**System(s) tested on**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions: Master bundle + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",duplicate,https://github.com/nasa/cFE/pull/630
make prep broken out of the box,"**Describe the bug**
Prep fails out of the box when following README instructions:

```
-- Configuring for system arch: cpu1
-- The C compiler identification is GNU 7.5.0
-- Check for working C compiler: /usr/bin/gcc
-- Check for working C compiler: /usr/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- OMIT_DEPRECATED=false: Deprecated elements included in build
Error: """" is not a valid BSP type
CMake Error at /export/home/jhageman/cFS/cFS-GitHub/osal/CMakeLists.txt:66 (message):
  OSAL_SYSTEM_BSPTYPE must be set to the appropriate BSP
```

**To Reproduce**
Steps to reproduce the behavior:
1. Follow the README instructions, make prep fails.

**Expected behavior**
Expected it to default to pc-linux as in the past.

**Code snips**
The following does not set OSAL_SYSTEM_BSPTYPE since CFE_SYSTEM_PSPNAME and OSAL_SYSTEM_OSTYPE is defined...

https://github.com/nasa/cFE/blob/0648a47bf4369138c31f9019458ab2eceec738a8/cmake/arch_build.cmake#L275-L289

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: master bundle

**Additional context**
Short term work around - pass in SIMULATION=native at prep, or likely can define the target system in targets.cmake (2nd approach not tested yet)

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/629
CFE TLM header needs update to correspond with CMD header,"Previous issue #297 made it so the CMD secondary header was always in a consistent byte order, such that the content is independent of the endianness of the machine which processes/generates the packet.

The submitted fix for this only changed the CMD header, leaving the TLM header alone.  

For consistency, the network byte order rule should be applied to the TLM header as well.

_Originally posted by @jphickey in https://github.com/nasa/cFE/issues/297#issuecomment-595435305_","duplicate, enhancement",https://github.com/nasa/cFE/issues/628
Utilize CMake interface libraries,"**Is your feature request related to a problem? Please describe.**
See conversation around https://github.com/nasa/cFE/pull/585#discussion_r411528313

Interface libraries may be a cleaner approach than current implementation

**Describe the solution you'd like**
Consider utilizing interface libraries

**Describe alternatives you've considered**
Leave as-is

**Additional context**
See #585 

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/626
"Fix #410, separate SYSLOG configurable defaults for power on and proc…","Describe the contribution
Fix #410 .
Separates configurable defaults for power on and processor reset. Default power on set to overwrite and default processor reset to discard.
Added an additional unit test to cover the path added to CFE_ES_TaskInit.

Testing performed:
Ran unit tests

Expected behavior changes
Upon power on reset, default system log mode set to overwrite.
Upon processor reset, default system log mode set to discard.

System(s) tested on
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: 6.7.12.0, OSAL 5.0.11.0, PSP 1.4.7.0

Contributor Info
Dan Knutsen
NASA/Goddard",CCB:Approved,https://github.com/nasa/cFE/pull/625
"Fix #623, Replace OS_FS_* return codes with common definitions","Describe the contribution
Removed The following OS_FS* defines from osapi-os-filesys.h:
OS_FS_SUCCESS, OS_FS_ERROR , OS_FS_ERR_INVALID_POINTER, OS_FS_ERR_NO_FREE_FDS , OS_FS_ERR_INVALID_FD, and OS_FS_UNIMPLEMENTED

Fixes #623

Used sed to perform a bulk find/replace on each one to swap with common definitions.

Testing performed
Steps taken to test the contribution:

    Ran unit tests.

Expected behavior changes
None

System(s) tested on
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.12.0, OSAL 5.0.11.0, PSP 1.4.7.0

**Contributor Info **
Dan Knutsen
NASA/Goddard",CCB:Approved,https://github.com/nasa/cFE/pull/624
Replace OS_FS_* return codes with common definitions,"**Is your feature request related to a problem? Please describe.**
There is mixed use of OS_* and OS_FS_* return codes.   

**Describe the solution you'd like**
Suggest deprecation of the OS_FS_ERR_* defines and switch to common definitions.

**Additional context**
nasa/osal#262
nasa/osal#118

**Requester Info**
Dan Knutsen
NASA/Goddard",enhancement,https://github.com/nasa/cFE/issues/623
"Fix #121, Add check for UsedFlag and sets APID to CFE_TBL_NOT_OWNED","Describe the contribution
Updates CFE_TBL_CleanUpApp such that it now checks the 'used flag' prior to calling CFE_TBL_RemoveAccessLink for a given TblHandle.  Also sets the AppId to CFE_TBL_NOT_OWNED after removing the access descriptor link from linked list.

Fix #121

Testing performed:
1. Modified cfe_es_runloop such that if AppSate == cfe_es_appstate_waiting, then it will not return false.  This was done to allow the restart command to work.
2. Created a test app that uses tables.
3. Modified table Noop command such that it prints out Table Access Descriptor data when received. 
4. Ran the following test - Note that I sent a noop after each step to review data (test results attached)
   a. Started CFE
   b. Deleted Test App
   c. Restarted Sample App
   d. Restarted Sample App

Ran test twice - Once to ensure I could recreate the error. Once to ensure changes corrected error.

5. Ran unit tests

Expected behavior changes
Will no longer receive 'CFE_TBL:RemoveAccessLink-PutPoolBuf[0] Fail' error.

System(s) tested on
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: 6.7.12.0, OSAL 5.0.9.0, PSP 1.4.7.0

Contributor Info
Dan Knutsen
NASA/Goddard


[issue_121_w_Fix.txt](https://github.com/nasa/cFE/files/4489244/issue_121_w_Fix.txt)
[issue_121_wo_Fix.txt](https://github.com/nasa/cFE/files/4489245/issue_121_wo_Fix.txt)
","CCB:Approved, cFE-TBL",https://github.com/nasa/cFE/pull/622
Memory alignment issue in ES,"**Is your feature request related to a problem? Please describe.**
```
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_shell.c: In function 'CFE_ES_ShellOutputCommand':
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_shell.c:178: error: cast increases required alignment of target type
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_shell.c:179: error: cast increases required alignment of target type
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_shell.c:208: error: cast increases required alignment of target type
/home/jhageman/cFS/cFS-GitHub/cfe/fsw/cfe-core/src/es/cfe_es_shell.c:209: error: cast increases required alignment of target type
```

**Describe the solution you'd like**
Resolve bug.

**Describe alternatives you've considered**
None.

**Additional context**
Other shell issues, #484, #84, etc.

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/621
Question on Table Service update procedure and notifications by message,"**Is your feature request related to a problem? Please describe.**
I guess some more documentation on this procedure would be beneficial when talking about the table services. This is related to issue #130 but more on documenting that feature. Specifically, there really isn't a lot of documentation on notify by message function:

> int32 CFE_TBL_NotifyByMessage(CFE_TBL_Handle_t TblHandle, CFE_SB_MsgId_t MsgId, uint16 CommandCode, uint32 Parameter);

We want to use this to not have to poll for changes which works but I am slightly confused on the notification process.

**Describe the solution you'd like**
I have enabled notify by message and I execute the following to test the app:
1. Upload new file to ""spacecraft"" (Just a new table with the table's exact name in it)
2. Send command to load table (this goes into inactive buffer):
   1. ./cmdUtil --endian=LE --host=localhost --port=1234 --pktid=0x1804 --cmdcode=2 --string=""064:/cf/apps/SampleAppletTb2.tbl""
3. Send command to validate table in inactive buffer
   1. ./cmdUtil --endian=LE --host=localhost --port=1234 --pktid=0x1804 --cmdcode=4 --half=0 --string=""040:SampleApplet_App.SATable1"" 
   2. **Note: this is the first time our App will be notified something has changed. Yet it can't do anything because the table is in the inactive buffer (the app sees there is no new info). This seems like a strange notification to receive. Why?**
4. Send command to active table
    1. ./cmdUtil --endian=LE --host=localhost --port=1234 --pktid=0x1804 --cmdcode=5 --string=""040:SampleApplet_App.SATable1""
    2. **Note: this will also notify our App and this time our App will be given the signal that there is information that needs to be updated.**
	
Questions:
First, is this the ideal process for updating tables in flight? I mostly had to piece together this by looking through the public headers. If I happened to just mistakenly miss some documentation on this then a pointer to that documentation would be awesome! 

Second, why is there a message after the validation function if the app can't do anything since the new table is still in the inactive buffer. Is this a way to potentially ask the app to release the table pointer if it had been holding on to it? 

**Describe alternatives you've considered**
N/A

**Additional context**
Maybe there should be a issue format for questions? 

**Requester Info**
Philip Cooksey, NASA Ames

Thank you for your time and help!
",question,https://github.com/nasa/cFE/issues/620
"Fix #591, Avoid deadlock in CFE_ES_CreatObjects","**Describe the contribution**
Now uses CFE_ES_SysLogWrite_Unsync inside shared data lock
Fixes #591 

**Testing performed**
1. CI - https://travis-ci.com/github/skliper/cFS/builds/160449984

**Expected behavior changes**
No longer locks while locked (no issue observed on linux/posix, but user reported issue on FreeRTOS 10)

**System(s) tested on**
 - Hardware: CI
 - OS: Ubuntu 18.04
 - Versions: bundle w/ this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/619
Unit tests fail to build when MESSAGE_FORMAT_IS_CCSDS_VER_2 is enabled,"**Describe the bug**
Unit tests fail to build when MESSAGE_FORMAT_IS_CCSDS_VER_2 is enabled

**To Reproduce**
Enable MESSAGE_FORMAT_IS_CCSDS_VER_2 in `*mission_cfg.h`
Run `make CFLAGS=""-m32 -Wno-format"" SIMULATION=native ENABLE_UNIT_TESTS=true` 

**Expected behavior**
Compilation succeeds, however build actually fails due to missing `#include`

**Code snips**
This can be fixed by doing the following 
```
--- a/fsw/cfe-core/ut-stubs/ut_sb_stubs.c
+++ b/fsw/cfe-core/ut-stubs/ut_sb_stubs.c
@@ -34,6 +34,8 @@
 */
 #include <string.h>
 #include ""cfe.h""
+#include ""cfe_platform_cfg.h""
+#include ""../sb/cfe_sb_msg_id_util.h""
 #include ""utstubs.h""
```
However, subsequently a checksum error is encountered when running the tests.
This was worked around by doing the following, but unsure if the workaround is correct.
```
--- a/fsw/cfe-core/unit-test/sb_UT.c
+++ b/fsw/cfe-core/unit-test/sb_UT.c
@@ -9456,7 +9456,7 @@ void Test_CFE_SB_ChecksumUtils(void)
 #ifndef MESSAGE_FORMAT_IS_CCSDS_VER_2
     ExpRtnFrmGet = 0x2f;
 #else
-    ExpRtnFrmGet = 0x65;
+    ExpRtnFrmGet = 0x61;
 #endif

     /* Validation expected to return true */
```

**System observed on:**
 - Hardware: N/A
 - OS: RHEL7
 - Versions cFE 6.7.12

**Reporter Info**
John N Pham, Northrop Grumman","bug, unit-test",https://github.com/nasa/cFE/issues/618
Document length limit of OS_MAX_PATH_LEN and OS_MAX_API_NAME includes null terminator,"**Is your feature request related to a problem? Please describe.**
Documentation not clear

**Describe the solution you'd like**
Document length limit of OS_MAX_PATH_LEN and OS_MAX_API_NAME includes null terminator

**Describe alternatives you've considered**
None

**Additional context**
nasa/osal#88

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/617
Duplicate CFE error codes,"**Is your feature request related to a problem? Please describe.**
While coding fixes for another ticket, happen to stumble upon two CFE ES error codes with the same value.

https://github.com/nasa/cFE/blob/60a5f6580d1e737f46efce0418aba5b8dac6df6a/fsw/cfe-core/src/inc/cfe_error.h#L617-L634

**Describe the solution you'd like**
Should have unique/distinguishable values

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",duplicate,https://github.com/nasa/cFE/issues/616
Integration Candidate 2020-04-08,"**Describe the contribution**
Fixes #573, #543, #581, and #612
See Bundle IC at https://github.com/nasa/cFS/pull/66

**Testing performed**
See PRs
Bundle CI - https://travis-ci.com/github/nasa/cFS/builds/160607248

**Expected behavior changes**
PR #574 -  Builds without error.
PR #593 - No changes, exposes CFE_SB_GetPktType and adds the stub.
PR #585 - Use the `INTERFACE_COMPILE_DEFINITIONS` and `INTERFACE_INCLUDE_DIRECTORIES` properties from the osal target and apply them to the entire CFE build as a directory-scope property. No impact until these are set in OSAL.
PR #613 -  Coverage data (make lcov) again includes the CFE core code

**System(s) tested on**
See PRs, 
Bundle CI - Ubuntu:Bionic

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
Jacob Hageman - NASA/GSFC
",,https://github.com/nasa/cFE/pull/615
OSAL coverage report includes unit tests,"**Is your feature request related to a problem? Please describe.**
Coverage numbers include the actual unit test code

**Describe the solution you'd like**
Exclude unit test code from coverage results

**Describe alternatives you've considered**
None

**Additional context**
nasa/osal#404

**Requester Info**
Jacob Hageman - NASA/GSFC",duplicate,https://github.com/nasa/cFE/issues/614
"Fix #612, Update coverage compile/link flag options","**Describe the contribution**

OSAL now sets these as UT_COVERAGE_COMPILE_FLAGS, UT_COVERAGE_LINK_FLAGS.
Building and linking the UT executable needs a corresponding update.

Fixes #612

**Testing performed**
Build with `ENABLE_UNIT_TESTS=TRUE` and confirm that all unit tests are building

**Expected behavior changes**
Coverage data (`make lcov`) now includes the CFE core code again

**System(s) tested on**
Ubuntu 18.04 LTS 64 bit

**Additional context**
Similar change will be needed in apps (forthcoming)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/cFE/pull/613
Unit tests need to link with UT_COVERAGE_COMPILE_FLAGS/UT_COVERAGE_LINK_FLAGS,"**Is your feature request related to a problem? Please describe.**
nasa/osal#404 cleans up the compiler flag management, and as part of this it exports two variables, UT_COVERAGE_COMPILE_FLAGS and UT_COVERAGE_LINK_FLAGS, rather than a single UT_C_FLAGS value.

**Describe the solution you'd like**
The unit tests need to use these variables, not UT_C_FLAGS.

**Additional context**
Needs to be included with the nasa/osal#404 merge.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/612
CFE_TBL_LoadFromFile() should automagically add extension,"One issue that is quite an annoyance with the text-based startup file is that it lists the fully-qualified file name, including extension.  The issue is that the extension varies from system to system, so when I build with e.g. `SIMULATION=native` the extensions need to be `.so`, but when building for RTEMS it needs to be `.obj`.  

Ideally I'd like to see a solution that only lists the basename of the app file in the user-maintained source file, and the extra info, in particular the extension, is attached by the build system based on the file type of loadable modules for the particular platform you are building.

However the first step to any of this would be to get this table-based change in place, then smarter translation on the build side could be a follow-on.

_Originally posted by @jphickey in https://github.com/nasa/cFE/pull/588#issuecomment-613030439_","enhancement, cFE-TBL",https://github.com/nasa/cFE/issues/611
Improve ES reset area memory allocation,"**Is your feature request related to a problem? Please describe.**
Currently the PSP provides a single API `CFE_PSP_GetResetArea` which is sized according to a user-specified `CFE_PLATFORM_ES_RESET_AREA_SIZE`. with a note that says:
>This area must be sized large enough to hold all of the data structures. It should be automatically sized based on the CFE_ES_ResetData_t type, but circular dependancies in the headers prevent it from being defined this way.

This is far from ideal, and in the default configuration 170KiB is allocated for this area where only 129KiB is actually used, wasting a fair bit of memory.

Furthermore, the circular dependency issue was only really a problem in the classic build.  In the CMake build the ""target_config"" mechanism can be utilized here to make this a non-issue.

**Describe the solution you'd like**
The PSP generally allocates these memory spaces dynamically at start up anyway.  
- In the MCP750 this is based on `sysMemTop()` and the addresses are calculated from this base.  
- In pc-linux these are SysV shared memory segments.  
- In pc-rtems these are just `malloc()`'ed to simplify usage in QEMU (data does not survive a reset).

CFE ES should publish the _actual_ size required for its persistent data structures, and this actual size should be used when computing the addresses of these memory areas, rather than a compile-time fixed size which is almost certainly either too big or too small.

**Additional context**
This issue is related to changes occurring in the Exception and Reset Log implementation (issues #411, #76).  As part of this more of the ER log (or in particular, storing of exception context) will be moved to the PSP rather than being fully managed by ES.  This in turn changes the size of the CFE_ES_ResetData_t structure substantially, and exposes the weakness/issues in how this is being currently allocated.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/610
"EVS ""CFE_PLATFORM_EVS_LOG_ON"" option unit test failure","**Describe the bug**
The Event Services subsystem has a broken compile-time platform option called `CFE_PLATFORM_EVS_LOG_ON`.  The description says: ""The CFE_PLATFORM_EVS_LOG_ON configuration parameter must be defined to enable EVS event logging""

If UT is disabled, then CFE core itself actually seems to build and run OK.  However, certain risky things are not clear in the code that:

- The `EVS_SharedDataMutexID` will be left uninitialized
- The `EVS_LogPtr` will be left as NULL

The code that accesses these seems to be mostly protected by checking the separate `CFE_EVS_GlobalData.EVS_TlmPkt.Payload.LogEnabled` member boolean in the outgoing telemetry packet.  This seems like a weak design, in particular because the telemetry packet is supposed to be informational, not an active control structure.

**To Reproduce**
Disable the `CFE_PLATFORM_EVS_LOG_ON` option, and build with `ENABLE_UNIT_TESTS=TRUE`.  CFE EVS unit test fails to build with a compiler error.

**System observed on:**
Ubuntu 18.04 LTS 64 bit.

**Additional context**
Unless there is a specific requirement for `CFE_PLATFORM_EVS_LOG_ON` as it stands today, my recommendation would be to deprecate this option and keep it always on, which reduces the testing matrix, and makes the FSW code more consistent.  Platform config options that actually add/remove `#ifdef` code should be avoided, as this has proven to be a testing/support issue time and time again.

In this case, only the code that initializes the structures is compiled out.  All the code that reads/writes to it is still compiled in, but skipped via a runtime test.  So this isn't saving much in the way of code/text space.

If the goal of this option is to save data space memory, then _mostly_ the same effect can be achieved by keeping the log very small, by setting `CFE_PLATFORM_EVS_LOG_MAX` to a very low number, such as 1.  In this mode the log structure uses only 176 bytes of memory on an x86-64 machine, down from 3368 bytes with the default size of 20.  

And the unit tests still build and pass with the max set to 1, and it reduces the amount of conditionally-compiled code and variances on the FSW side.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, deprecate, removed",https://github.com/nasa/cFE/issues/609
"CFE_SB_GetLastSenderID returns pointer to internal data, possible race","**Describe the bug**
CFE_SB_GetLastSenderID returns pointer to data that could be overwritten at any time

See https://github.com/nasa/cFE/pull/605#discussion_r407649126 for related comments

**To Reproduce**
Conceptually - app calls CFE_SB_GetLastSenderID, gets pointer, data gets overwritten, app takes action based on overwritten data vs original context

**Expected behavior**
No race.

**Code snips**
https://github.com/nasa/cFE/blob/60a5f6580d1e737f46efce0418aba5b8dac6df6a/fsw/cfe-core/src/sb/cfe_sb_api.c#L1651-L1657

**System observed on:**
N/A

**Additional context**
#605

**Reporter Info**
Jacob Hageman",bug,https://github.com/nasa/cFE/issues/608
CFE_TBL should send events instead of using syslog,"**Is your feature request related to a problem? Please describe.**
There's still a fair bit of code in CFE_TBL that sends SysLog messages rather than generating events. 

**Describe the solution you'd like**
These messages should be removed and events generated where appropriate.

**Requester Info**
Christopher.D.Knight@nasa.gov",enhancement,https://github.com/nasa/cFE/issues/607
"Fix #503, better events for CFE_TBL_Load()","**Describe the contribution**
Addresses #503 but this is a draft, still need UT code updates. Simplified changes for CFE_TBL_Load() to make the code a bit easier to follow (hey, events generated when results are off-nominal, instead of at the end?)

Partially addresses #607

**Testing performed**
Initial build/run, UT not updated yet.

**Expected behavior changes**
Internal CFE_TBL_LoadFromFile() API changed slightly to add AppName as a parameter. Return value from LoadFromFile() no longer relevant for event generation.

**System(s) tested on**
Debian 9

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov","enhancement, CCB:Approved, cFE-TBL",https://github.com/nasa/cFE/pull/606
"Fix #494, Updates CFE_SB_GetLastSenderID to check if message has been sent on pipe","**Describe the contribution**
Updates CFE_SB_GetLastSenderID to check if a message has been sent on the associated pipe prior to setting the receivers pointer to the associated address of 'sender' in the buffer descriptor.

Includes associated unit test addition to cover the additional path added to CFE_SB_GetLastSenderID.

Includes an addition of a SB status code  and event ID.

Fix #494

**Testing performed**
1. Ran unit tests.
2. Reviewed coverage test results to ensure that additional path added is covered with the updated unit test.

**Expected behavior changes**
CFE_SB_GetLastSenderID will now detect if it is being called prior to a message being sent on a given pipe.

System(s) tested on
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.11.0, OSAL 5.0.9.0, PSP 1.4.7.0

Contributor Info
Dan Knutsen
NASA/Goddard
",CCB:Approved,https://github.com/nasa/cFE/pull/605
Add reference to deployed cFE user's guide in README.md,"**Is your feature request related to a problem? Please describe.**
User's guide is not included in repo

**Describe the solution you'd like**
Add reference to https://github.com/nasa/cFS/blob/gh-pages/cFE_Users_Guide.pdf

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","good first issue, docs",https://github.com/nasa/cFE/issues/604
CFE_EVS_SendEvent stub should provide full context,"**Describe the bug**
The CFE_EVS_SendEvent stub for ut-assert does not provide its full context. It only provides the first argument, EventId, providing no way to for unit tests to verify the correct EventType or event message text was sent.

**To Reproduce**
Steps to reproduce the behavior:
1. See the [CFE_EVS_SendEvent stub](https://github.com/nasa/cFE/blob/60a5f6580d1e737f46efce0418aba5b8dac6df6a/fsw/cfe-core/ut-stubs/ut_evs_stubs.c#L106). Only EventID is registered with the context and copied. 

**Expected behavior**
The CFE_EVS_SendEvent stub should provide its full context for unit testing purposes, including the EventID, EventType, and the event message string. <strike>My preference would be that the event message text provided would not include the format specifiers and instead be the resulting string with the format specifiers replaced with the appropriate text.</strike> I've been convinced and also talked myself out of that preference.

**Code snips**
```
int32 CFE_EVS_SendEvent(uint16 EventID,
                        uint16 EventType,
                        const char *Spec,
                        ...)
{
    int32 status;

    UT_Stub_RegisterContext(UT_KEY(CFE_EVS_SendEvent), &EventID);
    status = UT_DEFAULT_IMPL(CFE_EVS_SendEvent);

    if (status >= 0)
    {
        UT_Stub_CopyFromLocal(UT_KEY(CFE_EVS_SendEvent), (uint8*)&EventID, sizeof(EventID));
    }

    return status;
}
```

**System observed on:**
 - cFE 6.7.11

**Additional context**
n/a

**Reporter Info**
Eric Gilligan NASA/GSFC-5820
","enhancement, unit-test, Priority: Mission",https://github.com/nasa/cFE/issues/603
"Fix #263, expose IsValidMsgID and partially address #245 Consistent use of MsgId types","**Describe the contribution**

Fixes #263

This exposes the `CFE_SB_IsValidMsgId()` in the CFE SB public API, rather than confining it to the private/internal API.

Partially addresses #245 

This also includes a number of internal changes to make CFE core apps consistent in their use of the CFE_SB_MsgId type and with the CFE SB API.  This employs the appropriate CFE SB abstraction API whenever any of the following needs to happen:

- Use of a CFE_SB_MsgId_t value within a printf (event, syslog, etc).
- Initialization of a CFE_SB_MsgId_t from an integer value
- Comparison of two CFE_SB_MsgId_t values
- Checking if a CFE_SB_MsgId_t value is within the valid set

Notable exception to integer conversion rules is for the MID `#define` values, which are not changed for backward compatibility reasons.  These are still defined as integers, and used directly in the code.

Also worth noting - this replaces the switch/case constructs used in message dispatch with a nested if/else based on CFE_SB_MsgId_Equal(), as the switch statement can only be used with an integer.

A few new macros are introduced, mainly because the inline functions that already existed for this purpose cannot be used where evaluation must be done at compile time (e.g. constants, struct initialization).  These are initially just typecasts, but could become more interesting
in future revisions.

**Testing performed**
Build with SIMULATION=native ENABLE_UNIT_TESTS=TRUE
- Run all unit tests and confirm passing
- Run sanity check on CFE, boot up and issue commands to each core app using `cmdUtil`.  Ensure no changes to message routing/processing for every core app.

**Expected behavior changes**
This exposes the `CFE_SB_IsValidMsgId()` for application usage.
No other API or behavior changes.  All other changes are transparent.

**System(s) tested on**
Ubuntu 18.04 LTS 64 bit

**Additional context**
This is a step in the direction of related issue #245 but does not do anything that would affect backward compatibility with the way the MID integers are currently defined and used.  It does introduce a few of the macros that will become more relevant/necessary (i.e. so they can evolve beyond a simple typecast/passthrough).

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

*EDIT* added reference for MsgId handling
",CCB:Approved,https://github.com/nasa/cFE/pull/602
fix #503 - CFE_TBL_Load() errors - strawman for CCB consideration,"**Describe the contribution**
Moved CFE_TBL_LoadFromFile() code into CFE_TBL_Load(), lots new EID's, some new status codes, removed SysLog calls from Load()

**Testing performed**
Builds and runs, just no UT code changes yet.

**Expected behavior changes**
CFE_TBL_Load() now produces events instead of writing to syslog (and generating a generic event). Also removed CFE_TBL_LoadFromFile() as it was only called by CFE_TBL_Load() (and the UT code, which will have to be adapted to call Load().)

**System(s) tested on**
Debian 9

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",duplicate,https://github.com/nasa/cFE/pull/601
Table load refactor for CFE_TBL_Load()/CFE_TBL_LoadCmd() overlap and complexity reduction,"**Is your feature request related to a problem? Please describe.**
There's code commonalities between CFE_TBL_LoadCmd() and CFE_TBL_Load().

Also varying use of return vs status codes and many if layers within table load should be refactored to reduce complexity.  Goal (per SW Sys Eng Handbook guidance) is cyclomatic complexity of <= 10.

**Describe the solution you'd like**
Code should be consolidated between CFE_TBL_Load() and CFE_TBL_LoadCmd().  Refactor to simplify/separate into functions.

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, cFE-TBL",https://github.com/nasa/cFE/issues/600
Add build verification scripts (CTF based),"**Is your feature request related to a problem? Please describe.**
No build verification scripts for command requirements

**Describe the solution you'd like**
Add build verification scripts

**Describe alternatives you've considered**
None.

**Additional context**
Need to discuss how we approach this.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/cFE/issues/627
CFE_EVS_GenerateEventTelemetry should check return code from CFE_SB_SendMsg(),"**Is your feature request related to a problem? Please describe.**
EVS, when called to send events, eventually calls down to CFE_EVS_GenerateEventTelemetry() which sends the event to the ports and to the SB via CFE_SB_SendMsg(). However, it currently does not check the return code from SendMsg().

**Describe the solution you'd like**
GenerateEventTelemetry() should report an error to SysLog (and the ports?) if it's unable to send the event to the SB (preferably including the original event inside the SysLog error report.)

**Describe alternatives you've considered**
Leaving it as it is, it's unlikely that CFE_SB_SendMsg() would generate an error.

**Additional context**
Note also that if SendMsg() [really SendMsgFull()] generated an error, it would send an event through EVS, causing a loop between SB code and EVS code (that will likely go on until the system crashes). Again, this condition is unlikely, but this logic should be fixed to prevent loops.

**Requester Info**
Christopher.D.Knight@nasa.gov","duplicate, enhancement",https://github.com/nasa/cFE/issues/599
"Fix #295 and #480, Resolve app table scanning race conditions","**Describe the contribution**

Fixes #295 
Fixes #480 
Partially addresses #567 - runloop now increments task counter instead of main app execution counter

Create a new background job to handle the maintenance tasks that had been performed in the ES main task as part of the `CFE_ES_ScanAppTable()` routine.

All app state changes, including those invoked by messages, are now handled by this job.
    
This also slightly changes the semantics of CFE_ES_RunLoop and CFE_ES_ExitApp.  Now, the CFE_ES_RunLoop routine no longer requires a RunStatus buffer.  Instead, the only thing that matters is the RunStatus value that is eventually passed to CFE_ES_ExitApp after the shutdown is complete.  This should be mostly backward compatible, as the recommended app pattern would pass the same value to both functions.
    
This commit also fixes #480, as the value passed to CFE_ES_ExitApp will not override a request that was already pending.

**Testing performed**
Build with ENABLE_UNIT_TESTS=TRUE for native (x86-64 Linux) and RTEMS (i686-rtems4.11)
- Run unit tests and confirm all passing
- Check coverage report (lcov) and confirm no reduction in coverage for modified functions, and newly added functions are fully covered.
- Run CFE and send various restart/reload/delete requests for SAMPLE_APP
- Confirm that SAMPLE_APP exits itself and is restarted/reloaded/deleted correctly by ES.
- Confirm that if SAMPLE_APP does not exit itself, it is still forcibly deleted by ES
- Confirm same behavior on RTEMS

**Expected behavior changes**
No impact to CMD/TLM interface or API.  Internal changes only.

**System(s) tested on**
- Ubuntu 18.04 LTS 64 bit (native)
- QEMU (i686-rtems4.11)

**Additional context**
This reuses the background task concept introduced in pull #595.  Will rebase this changeset as soon as that pull request makes it into a stable baseline.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/598
"Remove local-endian SID macros, and unnecessary abstraction of mask/shift","**Is your feature request related to a problem? Please describe.**
The following macros aren't clearly documented as to use.  They only work on a local endian StreamID (like what comes from `CCSDS_RD_SID`).

https://github.com/nasa/cFE/blob/62252d11409f337d3dea2732739e068987363985/fsw/cfe-core/src/inc/ccsds.h#L437-L454

The CCSDS_RD_BITS/WR_BITS isn't CCSDS related, and is just a mask/shift.  More straight forward to just use mask/shift.  See conversation on https://github.com/skliper/cFE/commit/a8c24ea4370d99b097f91a2c3a8dd76d9202dc74#commitcomment-38382611

**Describe the solution you'd like**
Remove these since they just add to confusion.  Just use the CCSDS_RD_SID/APID/SHDR/TYPE/VERS macros directly on the header.

**Describe alternatives you've considered**
Could deprecate, but no known uses.

**Additional context**
Conversation stemmed from #568

**Requester Info**
Jacob Hageman - NASA/GSFC

*EDIT* fixed code blob
*EDIT* fixed my initial issue title and updated description per @jphickey clarification of intended use",enhancement,https://github.com/nasa/cFE/issues/597
"Unit test - split ""AND""-ed conditionals into separate asserts","**Is your feature request related to a problem? Please describe.**
Debugging unit tests can be very difficult, frustrating, and time consuming.  One major part of the problem which makes them very debugging-unfriendly is something like the following:

```
    UT_Report(__FILE__, __LINE__,
              UT_EventIsInHistory(CFE_ES_PCR_ERR2_EID) &&
              CFE_ES_Global.AppTable[Id].ControlReq.AppTimer == 0 &&
              CFE_ES_Global.AppTable[Id].ControlReq.AppControlRequest == CFE_ES_RunStatus_SYS_DELETE,
              ""CFE_ES_ScanAppTable"",
              ""Waiting; process control request"");
```

The problem with this type of construct is that there are 3 separate tests being combined into one single assert.  When it fails, it is not possible to see which of the three conditions are evaluating false.  Many of them call functions within the test case, too, which further obfuscate what the actual return value was.  The only way to test this is run it in a debugger, break at the start of the test, then set a breakpoint inside e.g. UT_EventIsInHistory to see what it returned.

**Describe the solution you'd like**

1. At a minimum - split the `&&` conditions into separate asserts.  This would _at least_ let the developer know which one is actually the fault.  
2. Nice to have - employ the macros similar to what @CDKnightNASA added in nasa/osal#405, which show the _values_ tested in the log, not simply just a pass/fail.

**Describe alternatives you've considered**
Continue struggling to figure out what actually went wrong every time a UT failure comes up.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test",https://github.com/nasa/cFE/issues/596
"Fix #456, Perf log threading and concurrency issues","**Describe the contribution**

Replaces the `OS_IntLock` with a standard OSAL mutex for protecting the shared/global perflog data structure.  This may introduce unexpected task switches when contention occurs, but it ensures proper exclusion with respect to the data structures.

Removes the temporary child worker task that was spawned for writing the log data to a file, and replace with a more generic CFE ES background task.  The background task is started at boot and
pends on a semaphore until there is work to do.

The background performance log dump is implemented as a state machine which is called repeatedly over time from the background job task.  This performs a limited amount of work on each invocation, and resumes where it left from the previous invocation.

Fixes #456 
Fixes #324

**Testing performed**
Build CFE with ENABLE_UNIT_TESTS=TRUE
Confirm all unit tests pass
Confirm near 100% coverage on all newly added/modified code
Run CFE and send commands to start performance logging
Send other CFE commands to generate performance log activity
Send command to stop performance log and generate a dump file
Confirm validity of dump file by opening with Java tool.  No errors reported when opening file.

**Expected behavior changes**
No impact to behavior.  Previously the perf log dump file frequently contained errors due to out of order or otherwise corrupted entries, which is now fixed.

**System(s) tested on**
 - Ubuntu 18.04 LTS 64-bit (native)
- MIPS 32 target running in QEMU (big endian)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/cFE/pull/595
Ability to register a function call for the performance manager (or call a PSP stub),"**Is your feature request related to a problem? Please describe.**
Sounds like historical (and current) missions typically end up adding calls to hardware from the performance calls.

**Describe the solution you'd like**
Either add in a PSP API and call from ES, or support an API to add a function call.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/594
"Fix# 543, Expose CFE_SB_GetPktType","**Describe the contribution**
Fix #543 
Note this only exposes and adds the stub.  Requirement (#587)/functional test/coverage test still in work.

**Testing performed**
Steps taken to test the contribution:
1. Built with SIMULATION=native and ENABLE_UNIT_TESTS=true
1. Tests passed
1. Ran with cFS-GroundStation and observed reported sequence counter that wasn't reporting actual sequence count
1. Note it does pass the sequence count test, which is what SB uses GetPktType for

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions: Bundle w/ this change

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/593
"Fix #245, Opaque CFE_SB_MsgId_t values","**Describe the contribution**

Ensures that all CFE core apps outside of SB itself treat the `CFE_SB_MsgId_t` type as an opaque/abstract value and do not assume it is an integer.

This pull request is primarily a concept/preview of this idea in action for CCB discussion.  It does work though and could be merged as-is although I expect some change requests. 

Currently the type safe enforcement is enabled based on a compile definition `CFE_SB_OPAQUE_MSGIDS`.  This could be moved into the ""omit deprecated"" switch instead rather than a new switch.

The type-safe enforcement switches CFE_SB_MsgId_t from being a simple integer value to a structure wrapper, so it cannot be implicitly exchanged with other integers, nor can it be involved in any arithmetic calculation.  However, this is a breaking API change due to the way most apps specify their msgid values as integers via `#define` macros.

Fixes #245 

**Testing performed**
Build CFE for SIMULATION=native (64 bit linux)
Execute all unit tests
Sanity check CFE by booting and sending commands with cmdUtil
In particular check all CFE SB routing info, map info commands and compare file output before and after change to make sure data is the same.

**Expected behavior changes**
No externally-visible changes (i.e. CMD/TLM, files, tables, etc).
API changes when building with enforcing mode:
- All CFE SB API operations that accept or return a CFE_SB_MsgId_t (Subscribe, etc) must be supplied with an instance of `CFE_SB_MsgId_t` only, not an integer.  Passing or assigning to a bare integer triggers a compiler error.
- Macros/conversions are provided to bridge the gap, and allow printing as integer for syslog/events as well as converting from an integer
- No longer can `switch()` on a MsgId -- must use `CFE_SB_MsgId_Equal` and a nested if.
- This also exposes CFE_SB_IsMsgIdValid() in the public API.

**System(s) tested on**
 - Ubuntu 18.04 LTS 64 bit

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",invalid,https://github.com/nasa/cFE/pull/592
CFE_ES_CreateObjects calls CFE_ES_WriteToSysLog while holding shared data lock,"**Describe the bug**
During core service task create, `CFE_ES_CreateObjects()` calls `CFE_ES_WriteToSysLog()` while already holding the shared data lock in two places, resulting in a recursive lock / deadlock.
* [Location 1](https://github.com/nasa/cFE/blob/master/fsw/cfe-core/src/es/cfe_es_start.c#L846)
* [Location 2](https://github.com/nasa/cFE/blob/master/fsw/cfe-core/src/es/cfe_es_start.c#L858)

**Expected behavior**
It appears it should be calling `CFE_ES_SysLogWrite_Unsync()` instead.

**Code snips**
The second location makes the issue pretty clear:
```
                  CFE_ES_WriteToSysLog(""ES Startup: Core App: %s created. App ID: %d\n"",
                                       CFE_ES_ObjectTable[i].ObjectName,j);
                                       
                  /*
                  ** Increment the registered App and Registered External Task variables.
                  */
                  CFE_ES_Global.RegisteredTasks++;
                  CFE_ES_Global.RegisteredCoreApps++;
                  
                  CFE_ES_UnlockSharedData(__func__,__LINE__);
```

**System observed on:**
 - OS: FreeRTOS 10
 - Versions: cFE 6.7.0, OSAL 5.0.0

**Reporter Info**
Mike Stewart, Capella Space Corporation
",bug,https://github.com/nasa/cFE/issues/591
SB message id documentation is unclear and arguably misleading,"**Is your feature request related to a problem? Please describe.**
As a new cFS developer, I've been trying to build my first complete app utilizing the cFE Application Developer doc (and as of the last 2 days the md). Rather than copy/paste the sample_app, it has been my intent to build up my experience by starting from scratch (i.e. minimize copy/paste).  Thus, when setting up message ids, I utilized the logic explained in section 6.1.1. It's fairly simple and without really knowing what CCSDS represented, I read this as follows ""pick any number, let it be unique within the application, but don't set the upper 3 bits"". So I did. 

Then I finally got around to trying to use the ground system tool by adding my app to the tool. It was at that time, I realized that I had a problem. All my ""commands"" were being interpreted as ""telemetry"". 

I figured that I might have associated the wrong info into the tool. No, everything checked out with the tool setup. Then I went through my app trying to see if maybe I was improperly initializing or associating something. I could find nothing. Then I jumped into the debugger. 

I found that the first byte of my message id was being checked for 2 characteristics. My message id was failing the two checks and hence my ""command"" had become a ""telemetry"" message and could therefore never be utilized to drive command codes.

After researching CCSDS and examining the cFE logic, I was able to finally track down the exact spec that outlines what bits should be set within a message id.

The lightbulb came on .. this is why all the default apps use 0x18** or 0x08** values in their msg.h files. Unfortunately, it was not explained in the sample code or documentation. 

This information is massively impactful and should not be left out of the cFE App Dev guide. The guide unfortunately makes it sounds like you can pick anything but that is far from the truth. It's much more stringent than keeping the 3 most significant bits at zero. 

**Describe the solution you'd like**
The cFE documentation should clearly outline the following:

1. in the default build of cFS, you are bound to CCSDS rules. 
2. explain how those rules influence the cFE api (aside from message ids, what else do devs need to know about?)
3. and most importantly, clearly explain why/when you need to set bit fields 3 and 4 in your message id.
4. in the sample_app, it would be nice have some contextual information related to creating proper ids (for those who might copy/paste the app).

Also, APID is mentioned in the Acronyms list but it not utilized in the dev guide document. This needs to be explained or arguably removed from the document. 


**Describe alternatives you've considered**
None. Devs rely on the documentation to create their apps.


**Additional context**
I found the info that ties the cFE bit check to an actual spec at https://public.ccsds.org/Lists/CCSDS%201330P11/133x0p11.pdf (see section 4.1.2.3)

Working with dev guide updated as of commit 5602bff3

**Requester Info**
Maurice Prather
","enhancement, docs",https://github.com/nasa/cFE/issues/590
Possibly outdated OS_initfs/OS_mkfs logic for creating /ram,"**Describe the bug**
cFE 6.7.0+ still retain the original logic for setting up `/ram`. For poweron resets it works fine, however I think the logic may now be outdated for processor resets. On a processor reset, the flow is:

1. Attempt to initialize the filesystem with `OS_initfs()`.
2. If that fails, format the filesystem with `OS_mkfs()`.

This logic may have made sense for older OSALs, but I don't see how it is helpful with OSAL 5.0+. In the new OSAL, both `OS_initfs()` and `OS_mkfs()` call `OS_FileSys_Initialize()`, with only the final argument `should_format` differing. Both call `OS_FileSysStartVolume_Impl()` to initialize the ram disk. For `OS_initfs()`, this is the only Impl function called. In the `OS_mkfs()` case, `should_format` is only checked if `OS_FileSysStartVolume_Impl()` succeeded, and only if it did, then `OS_FileSysFormatVolume_Impl()` is called.

Because the two OSAL functions follow exactly the same path up until the check for `should_format`, it seems to me that if `OS_initfs()` fails, then `OS_mkfs()` cannot possibly succeed. In other worse, if `OS_initfs()` fails, then the cFE will inevitably panic instead of actually attempting to reformat `/ram`.

**To Reproduce**
n/a

**Expected behavior**
I think the intended logic in the cFE start up was to attempt to initialize an existing `/ram` filesystem on a processor reset, but reformat it if that failed and continue to boot. With the current OSAL, the only way I can see for that to work would be something like this:
1. Initialize the filesystem with `OS_initfs()`. If that fails, panic.
2. Attempt to mount the filesystem with `OS_mount()`.
3. If that fails, use `OS_rmfs()` to remove it, and then call `OS_mkfs()`.
4. Attempt again to mount with `OS_mount()`. If that fails, panic.

The other possible change for this to work as I think it is intended would be to make `OS_initfs()` fail if given an invalid filesystem. But as written for that to happen,  `OS_FileSysStartVolume_Impl()` would need to fail, which would also make `OS_mkfs()` always fail.

**Code snips**
cFE RAM disk creation on processor reset:
```
      RetStatus = OS_initfs((void *)RamDiskMemoryAddress, ""/ramdev0"", ""RAM"", CFE_PLATFORM_ES_RAM_DISK_SECTOR_SIZE, CFE_PLATFORM_ES_RAM_DISK_NUM_SECTORS );
      if ( RetStatus != OS_FS_SUCCESS )
      {
         CFE_ES_WriteToSysLog(""ES Startup: Error Initializing Volatile(RAM) Volume. EC = 0x%08X\n"",(unsigned int)RetStatus);
         CFE_ES_WriteToSysLog(""ES Startup: Formatting Volatile(RAM) Volume.\n"");
         
         RetStatus = OS_mkfs((void *)RamDiskMemoryAddress, ""/ramdev0"", ""RAM"", CFE_PLATFORM_ES_RAM_DISK_SECTOR_SIZE, CFE_PLATFORM_ES_RAM_DISK_NUM_SECTORS );
         if ( RetStatus != OS_SUCCESS )
         {
            CFE_ES_WriteToSysLog(""ES Startup: Error Creating Volatile(RAM) Volume. EC = 0x%08X\n"",(unsigned int)RetStatus);
```

OS_FileSys_Initialize() logic:
```
        return_code = OS_FileSysStartVolume_Impl(local_id);

        if (return_code == OS_SUCCESS)
        {
            /*
             * The ""mkfs"" call also formats the device.
             * this is the primary difference between mkfs and initfs.
             */
            if (should_format)
            {
                return_code = OS_FileSysFormatVolume_Impl(local_id);
            }
```

**System observed on:**
 - OS: Shared OSAL
 - Versions cFE 6.7.0, OSAL 5.0.0

**Additional context**
It's very possible that I'm misunderstanding something here, in which case I apologize in advance for the noise!

**Reporter Info**
Mike Stewart, Capella Space Corporation
",enhancement,https://github.com/nasa/cFE/issues/589
"Fix #583, CFE_ES startup table","**Describe the contribution**
The following replaces the ""startup script"" code with a table file. Note this does NOT include unit test code changes, so CI will fail. This is for CCB consideration before I spend a bunch of time cleaning up UT.

Fix #583

**Testing performed**
Builds and runs.

**Expected behavior changes**
Replaces the startup script file with a start table that ES loads.

**System(s) tested on**
Debian 9

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov","enhancement, invalid",https://github.com/nasa/cFE/pull/588
Add requirements to cover IsValidMsgId and GetPktType,"**Is your feature request related to a problem? Please describe.**
Exposing CFE_SB_IsValidMsgId and CFE_SB_GetPktType needs to flow from a requirement given the current cFE requirements pattern.

**Describe the solution you'd like**
Add the requirements

**Describe alternatives you've considered**
None

**Additional context**
#263 #543

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, docs",https://github.com/nasa/cFE/issues/587
Integration Candidate - 2020-04-01,"**Describe the contribution**
Integration Candidate
Fixes #297, #569, #456, and #571

**Testing performed**
See PRs
Bundle CI see https://github.com/nasa/cFS/pull/64 
Test Log: https://travis-ci.com/github/nasa/cFS/builds/159710339

**Expected behavior changes**
PR #568 - Cmd code (and checksum) are always in the same place (matches GSFC spec for command secondary header)

PR #570 -  No Travis-CI configuration warnings

PR #572 - Document change only, updates the interrupt handler section to note OSAL deprecation

PR #595 - No impact to behavior. Previously the perf log dump file frequently contained errors due to out of order or otherwise corrupted entries, which is now fixed.

**System(s) tested on**
See PRs
Bundle CI - Ubuntu:Bionic


**Contributor Info - All information REQUIRED for consideration of pull request**

Jacob Hageman, NASA-GSFC
Joseph Hickey, Vantage Systems, Inc.
Gerardo E. Cruz-Ortiz, NASA-GSFC",,https://github.com/nasa/cFE/pull/586
"Fix #581, Propagate the OSAL compile definitions to CFE build","**Describe the contribution**
Use the `INTERFACE_COMPILE_DEFINITIONS` and `INTERFACE_INCLUDE_DIRECTORIES` properties from the osal target and apply them to the entire CFE build as a directory-scope property.

At this time, the OSAL library build does not use/export these properties so this is effectively a no-op for the CFE build and can be merged with no effect.  However, in a future version (specifically after nasa/osal#312 gets fixed), the OSAL library will export these interface properties and this will become important.

Fixes #581 

**Testing performed**
Built for all three test platforms (ppc-vxworks6.9, i686-rtems4.11, native/x86-64 Linux).  Sanity Check CFE build boots and runs, unit tests run.

**Expected behavior changes**
No impact to behavior - build is identical because these properties are currently empty/not set in the current OSAL build.

**System(s) tested on**
Ubuntu 18.04 LTS 64 bit.

**Additional context**
Also locally tested against a version of OSAL+PSP that includes all the latest proposed changes and confirm that this still works.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/cFE/pull/585
Fix #335: Shell unsigned pkt length bug,"**Describe the contribution**
Fix #335 
Really just avoids problems if users mistakenly define CFE_MISSION_ES_MAX_SHELL_PKT as an unsigned value (2000u, for example)

**Testing performed**
Steps taken to test the contribution:
1. CI

Suggest requester (@krmoore) confirm it works as requested

**Expected behavior changes**
None, except if someone defines this value as unsigned it won't break...

**System(s) tested on**
 - Hardware: AMD
 - OS: Ubuntu 18.04
 - Versions: bundle + this change

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/584
"ES should use a table for the ""startup script""","**Is your feature request related to a problem? Please describe.**
The ES ""startup script"" file (a CSV-like configuration of which applications and libraries to load at runtime) is not very well designed (using sscanf) and not consistent with how cFS generally manages runtime configurations with tables.

**Describe the solution you'd like**
Replace the .scr code with a table.

**Describe alternatives you've considered**
One alternative is to update the .scr parser, and/or use one/more industry-standard file formats (JSON, YAML) and an open-source parser that we would include (copy into) in our codebase. General consensus is that the CCB prefers going with the standard table mechanism.

**Additional context**
Might be interesting to see if there's a way to change a table without having to re-compile...Otherwise would be helpful to have a document detailing how, post deploy, an operator can update the ES configuration without having to do a full re-deploy.

**Requester Info**
Christopher.D.Knight@nasa.gov",enhancement,https://github.com/nasa/cFE/issues/583
"Fix #580, Deprecate CFE_OS_ abstracted error codes","**Describe the contribution**
Fix #580 - deprecates CFE_OS_ abstracted OS error codes
Added CFE_OMIT_DEPRECATED_6_7 just to be consistent
Also fix #552 - removes non-existent codes

**Testing performed**
Steps taken to test the contribution:
1. CI - see https://travis-ci.com/github/skliper/cFS/builds/157872188

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: AMD
 - OS: Ubuntu 18.04
 - Versions: bundle + this change

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/582
CFE needs to compile with the interface properties provided by OSAL,"**Is your feature request related to a problem? Please describe.**
After the changes introduced by nasa/osal#312, the OSAL CMake script will no longer force setting of `CMAKE_C_FLAGS` directly in the CFE build by overwriting this value (which is good).  

Instead, any required compile definitions and related information will be conveyed in the more appropriate manner, through the `INTERFACE_COMPILE_DEFINITIONS` and `INTERFACE_INCLUDE_DIRECTORIES` on the ""osal"" library target.

**Describe the solution you'd like**
To work with this change, the CFE needs to explicitly check these properties on the osal target and use the values.  By setting a directory-scope property at the top level, it will apply to all code.

**Describe alternatives you've considered**
CMake does this automatically so long as the executable directly links with OSAL.  However, this doesn't apply to the apps which are built as a `MODULE`.   This is why it is easier to set the directory property so its all-inclusive.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/581
Deprecate all CFE_OS error codes,"**Is your feature request related to a problem? Please describe.**
See discussion on #552, CFE_OS error codes are an unnecessary abstraction.  No plan to translate between the two, so no need to abstract.

**Describe the solution you'd like**
Deprecate and just use the OSAL error codes directly.

**Describe alternatives you've considered**
See discussion in #552 

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",deprecate,https://github.com/nasa/cFE/issues/580
Integration Candidate 2020-03-25,"**Describe the contribution**
Fixes #532 

**Testing performed**
Bundle CI 
See PR #533 

**Expected behavior changes**
No behavior changes. This change only enables future transition to using the OSAL BSP

**System(s) tested on**
Bundle CI - Ubuntu: Bionic

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey - Vantage Systems, Inc.
Gerardo E. Cruz-Ortiz - NASA/GSFC
",invalid,https://github.com/nasa/cFE/pull/579
"Fix #240, removes MESSAGE_FORMAT_IS_CCSDS ifdefs from code","**Describe the contribution**
Fixes #240, removes MESSAGE_FORMAT_IS_CCSDS ifdefs from CFS code

Testing performed
Ran unit tests

System(s) tested on
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.10.0, OSAL 5.0.8.0, PSP 1.4.7.0,

Contributor Info
Dan Knutsen
NASA/Goddard
",CCB:Approved,https://github.com/nasa/cFE/pull/578
"Fix #344, Remove mission/platform include dirs","**Describe the contribution**
Fixes #344 
Removes classic build directories.

**Testing performed**
Steps taken to test the contribution:
1. Tested w/ CI bundle branch on fork, see: https://travis-ci.com/github/skliper/cFS/builds/157335615

**Expected behavior changes**
None, reduces user confusion due to duplicate defines

**System(s) tested on**
 - Hardware: CI (AMD)
 - OS: Ubuntu 18.04
 - Versions: Master w/ this commit

**Additional context**
Only dependence found in framework was in cFS-GroundStation.  See XXX

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/577
"unify ""table"" and "".scr"" file loading","**Is your feature request related to a problem? Please describe.**
We currently have two ways of populating configuration data in cFS, the ""table"" API (loading a binary data structure into memory) and a ""configuration file"" (cfe_es_startup.scr). These have similar purposes (load-time configuration) and could use the same API?

**Describe the solution you'd like**
It should be fairly straightforward to automagically determine whether a ""table"" file is an ELF or a text file (first byte == 0x7F => ELF) and if it's not ELF it should hand off to a text parser (provided by OSAL?) to parse the table into an in-memory data structure. The current ""csv-like"" structure wouldn't handle complex (e.g. nested) data structures but for common tables it should be sufficient. Alternatives would be JSON or YAML or some other text format, but would require a way to disambiguate.

Table files trade efficiency for easy editing.

**Describe alternatives you've considered**
Stick with the separate ES code for loading the .scr file and table code. SBN previously used a similar .csv file format for its load configuration but it's been moved to a table-based configuration.

**Requester Info**
Christopher.D.Knight@nasa.gov","duplicate, enhancement",https://github.com/nasa/cFE/issues/576
"Fix #617, Updates comments to note that the length limit of OS_MAX_PATH_LEN and OS_MAX_API_NAME includes null terminator","**Describe the contribution**
Fixes #617

Related to nasa/osal#88, updates documentation to note that the actual length limit of OS_MAX_PATH_LEN and OS_MAX_API_NAME  include the null terminator.

**Testing performed**
Ran unit tests.

**System(s) tested on**
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.11.0, OSAL 5.0.9.0, PSP 1.4.7.0

Contributor Info
Dan Knutsen
NASA/Goddard
","CCB:Approved, docs",https://github.com/nasa/cFE/pull/575
"Fix #573, Update RTEMS example toolchain","**Describe the contribution**
Bring the example toolchain for i686-rtems4.11 back into sync with the current PSP and platform build module for this system.

Fixes #573 

**Testing performed**
Build software for i686-rtems4.11 per README instructions using this example toolchain file.  Sanity-check CFE build by ensuring it boots and accepts commands.

**Expected behavior changes**
Builds without error.

**System(s) tested on**
Ubuntu 18.04 LTS 64-bit (build host) building for i686-rtems4.11

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","bug, CCB:Approved",https://github.com/nasa/cFE/pull/574
RTEMS example toolchain file incompatible with current PSP,"**Describe the bug**
The example `toolchain-i686-rtems4.11.cmake` file is no longer compatible with the RTEMS module within the PSP.

CMake fails to configure, I get output as follows:

```
CMake Error at /usr/share/cmake-3.10/Modules/CMakeTestCCompiler.cmake:52 (message):
  The C compiler

    ""/home/joe/rtems-4.11/bin/i386-rtems4.11-gcc""

  is not able to compile a simple test program.

```

**To Reproduce**
Build using example toolchain file from sample_defs with unmodified PSP, adjusting only for local installation paths (RTEMS_BSP_TOP).

**Expected behavior**
Build should succeed.

**System observed on:**
Ubuntu 18.04 LTS 64-bit (build host) building for i686-rtems4.11

**Additional context**
Failures is related to the ""specs"" options on the compiler.  The toolchain file and RTEMS module in the PSP got out of sync somewhere along the development path.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/573
"Fix #571, Update App Dev Guide Int Handler","**Describe the contribution**
Document change only, updates the interrupt
handler section to note OSAL deprecation
Fixes #571 

**Testing performed**
None, documentation only

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
Related to https://github.com/nasa/osal/issues/385

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, docs",https://github.com/nasa/cFE/pull/572
App Dev Guide - interrupt handling section update to indicate deprecated,"**Is your feature request related to a problem? Please describe.**
Related to https://github.com/nasa/osal/issues/385, need to keep guide up-to-date

**Describe the solution you'd like**
Update guide

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",docs,https://github.com/nasa/cFE/issues/571
"Fix #569, Resolve CI warnings and add badge","**Describe the contribution**
Resolves warnings and adds badge to readme
Fix #569 

**Testing performed**
Steps taken to test the contribution:
1. CI only

**Expected behavior changes**
No Travis-CI configuration warnings

**System(s) tested on**
 - Hardware: CI
 - OS: Ubuntu 18.04
 - Versions: bundle w/ this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/570
Fix travis-CI config warnings and add badge,"**Is your feature request related to a problem? Please describe.**
Build config validation (from travis-CI) -
root: deprecated key sudo (The key `sudo` has no effect anymore.)
language: unexpected sequence, using the first value (c)
root: missing os, using the default linux

Also add badge on README

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/commit/6cf5a57f5995710345b2a5411d11af2b2d7f80ee

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/569
"Fix #297, CCSDS Command Secondary Header Endian Agnostic","**Describe the contribution**
Implement CCSDS command secondary header such that it is endian agnostic in code and unit test support.
Fix #297 

**Testing performed**
Steps taken to test the contribution:
1. Tested via bundle CI (including non-zero command send to reset)
1. Also tested locally with enabling TO via cFS-GroundSystem

This covered both direct cmdUtil call and cFS-GroundSystem use.

**Expected behavior changes**
Cmd code (and checksum) are always in the same place (matches GSFC spec for command secondary header)

**System(s) tested on**
 - Hardware: CI and cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: test bundle with this change and https://github.com/nasa/cFS-GroundSystem/pull/66 in cFS-GroundStation

**Additional context**
See also https://github.com/nasa/cFS-GroundSystem/pull/66 these should be merged together

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","bug, CCB:Approved",https://github.com/nasa/cFE/pull/568
CFE_ES_RunLoop increments the main task ExecutionCounter rather than the task that called it,"**Is your feature request related to a problem? Please describe.**

Inside the `CFE_ES_RunLoop()` function itself, it looks up the MainTaskId of the caller and only increments _that_ execution counter, not the execution counter of its own task record.  This means no matter what child task actually calls this function, it implements the execution counter of the main task only.

Note that if the real main task is doing something else and also increments its own task counter, this is a race condition.

**Describe the solution you'd like**
I suggest one of the following:

1. Just have `CFE_ES_RunLoop()` invoke `CFE_ES_IncrementTaskCounter()` to increment the counter for the task from which it was called. So if it gets called from a child task, then that child task gets incremented, not the main task.  This is at least straightforward/consistent and avoids the race condition.
2. Maintain a separate ""app"" exec counter which is incremented by CFE_ES_RunLoop (only), and use the `CFE_ES_IncrementTaskCounter` to account for other regular task activity.

**Additional context**
Noticed this when fixing #480 and it seemed rather odd/incorrect to be storing the ExecutionCounter where it is.  This causes the code to jump to other entries in the table for the sole purpose of reading/updating this value, when it already had the correct app record to start.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, docs",https://github.com/nasa/cFE/issues/567
Integration Candidate 2020-03-18,"**Describe the contribution**
Integration Candidate 20200318
- Fix #267

Fixes:  #49, #261, #403, #531,  #536, #540, #550, #557, and #561  

Documentation scrubs and a makefile change to report branch coverage


**Testing performed**
Tested in bundle CI - see https://github.com/nasa/cFS/pull/58 

**Expected behavior changes**
See related PRs:
#562 
#555 
#558 

**System(s) tested on**
CI Ubuntu: Bionic

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
Gerardo E. Cruz-Ortiz, NASA-GSFC",,https://github.com/nasa/cFE/pull/566
Add option to enable --coverage flag on full stack,"**Is your feature request related to a problem? Please describe.**
Enhancement to be able to report coverage from full stack testing if desired

**Describe the solution you'd like**
Maybe ENABLE_COVERAGE=true, and global_build_options.cmake could add --coverage if defined?  Would duplicate the coverage enabled in unit test executables... but does it matter?

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/565
CFE_EVS event filtering doesn't seem to work correctly,"**Describe the bug**
EVS doesn't seem to filter out the mask for CFE_EVS_FIRST_ONE_STOP.  I have not tried other pre-defined filter mask values.

**To Reproduce**
Steps to reproduce the behavior:
1. Build & run SCH as-is with just CI & TO as part of the FSW.  Make sure TO subscribes to short/long event messages.  Increase TO TLM pipe depth to max depth.
2. Observe the console output from FSW.  TO TLM pipe would overflow with SCH as sender

**Expected behavior**
A clear and concise description of what you expected to happen.

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - Hardware
 - OS: CentOS 6.10 & 7.x
 - Versions: cFE 6..x7, OSAL 5.0.x

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Full name and company/organization if applicable
",question,https://github.com/nasa/cFE/issues/564
Integration Candidate - 20200311,"**Describe the contribution**
Fixes #478, #499, #496, #535, #537, and #539 
Also adds PR #458 

**Testing performed**
See PRs  #458,  #538, #542, #545
CI on cfs-bundle integration candidate, see https://github.com/nasa/cFS/pull/57

**Expected behavior changes**
PR #458 - Prevents the call to file(TO_NATIVE_PATH ...) from building its own path with content identical to SRC_LOCAL_PATH.

PR #538 - PDF users guide can be generated by make process
PR #542 - Removes dependencies on cfe_platform_cfg.h from the unit test stub code. Fixes a  name collision where different configs exist within the same architecture.

PR #545 - Documentation Only

**System(s) tested on**
See PRs above
CI: Ubuntu:Bionic


**Additional context**
See PRs above

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC
Elizabeth Timmons - NASA/GSFC
Joseph Hickey - Vantage Systems, Inc. (CLA on File)
Andrei-Costin Zisu - Planetary Transportation Systems GmbH  (CLA on File)",,https://github.com/nasa/cFE/pull/563
"Fix #561, Add branch coverage reporting","**Describe the contribution**
Fix #561, Adds branch coverage and removes no-longer-needed report file manipulation to exclude unit test code from coverage report

**Testing performed**
Steps taken to test the contribution:
1. Standard build/test/lcov (same as enhanced CI)
1. Confirmed branch coverage reported (~91%)

**Expected behavior changes**
No changes to operational behavior

**System(s) tested on**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions: Master bundle w/ this change

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/562
Add branch coverage reporting and remove no longer necessary removal of unit test files,"**Is your feature request related to a problem? Please describe.**
Historically didn't report branch coverage and needed to remove the unit test code from coverage reporting.

**Describe the solution you'd like**
Add branch coverage, remove unnecessary processing step

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/561
Add build of pdf guides to make documentation rules,"**Is your feature request related to a problem? Please describe.**
Make documentation rules don't actually make the final pdf

**Describe the solution you'd like**
Add make in the document latex directory.

**Describe alternatives you've considered**
None

**Additional context**
Consider pushing document somewhere useful from CI vs requiring users to generate.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, docs",https://github.com/nasa/cFE/issues/560
Fix make doc warnings,"**Is your feature request related to a problem? Please describe.**
make doc creates multiple warnings (in build/doc/warnings.log)
Some caused by #555

**Describe the solution you'd like**
Resolve warnings

**Describe alternatives you've considered**
None

**Additional context**
Intended as project/distribution documentation of entire code base and never really well implemented (internal elements not well documented).  Major rework required to make this document useful outside just the fix of warnings.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, docs",https://github.com/nasa/cFE/issues/559
"Fix #557, OSAL Guide Scrub","**Describe the contribution**
Fix #557, see issue for list of changes.
These are the changes required in the cFE repo to scrub the OSAL guide

Note https://github.com/nasa/cFE/commit/8845570f5044a984e07b848f75090d27229c22f6 is the commit related to this issue.

**Testing performed**
Steps taken to test the contribution:
1. Nominal build (native) and run, no issues
1. Make usersguide and confirmed no warnings in build/doc/warnings
1. cd build/doc/users_guide/latex
1. make
1. confirm completes and guide looks ok
1. Make osalguide and confirmed no warnings in build/doc/warnings
1. cd build/doc/osalguide/latex
1. make
1. confirm completes and guide looks ok

**Expected behavior changes**
No behavior change other than warnings resolved for doc build

**System(s) tested on**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions: Bundle w/ the commits below

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, docs",https://github.com/nasa/cFE/pull/558
Clean-up related to OSAL user's guide scrub,"**Is your feature request related to a problem? Please describe.**
Various fixes/cleanup required related to https://github.com/nasa/osal/issues/364

**Describe the solution you'd like**
- Removed unused osalguide.dox (it just copies the main page, unreferenced)
- Removed unused cfe_usersguide.dox (it just copies part of main page, unreferenced)
- Fixed directory name reported by make osalguide
- Updated OSAL guide name
- Removed OSAL_MISC_ADDITIONS (undefined)
- General consistency/updates of header sections for osalguide
  - OS_TaskRegister note removed from initialization (obsolete)
  - File descriptor section update (don't mix OS/OSAL)
- Changed include order to maintain document order (main dox file added first)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/557
Document deprecated elements,"Looks like template broke... anyways:

Add \deprecated and \name the group where appropriate relative to the user's guide documentation such that it shows up as deprecated.

Jacob Hageman - NASA/GSFC","duplicate, enhancement, docs",https://github.com/nasa/cFE/issues/556
"Fix #540, User's guide scrub","**Describe the contribution**
Documentation/comments only included in this change.

Commit https://github.com/nasa/cFE/pull/555/commits/784fe0965fa7b042c6334b8e090bc636e5a254e4
 - Fixes #540 users guide scrub (see issue for individual changes)
 - Fixes #403 all warnings
 - Fixes #536 by referencing header documentation (removes typo)

Commit https://github.com/nasa/cFE/pull/555/commits/0f606755d5464c7d87dd34746c8c78b9cc1bf874
 - Fixes #261

Commit https://github.com/nasa/cFE/pull/555/commits/7e248baf4192a452ead52f6a4e17af6e191d0970
- Fixes #267

Commit https://github.com/nasa/cFE/pull/555/commits/71df47f05543079eb219013851f91f394f77511c
- Fixes #499 

Commit https://github.com/nasa/cFE/pull/555/commits/0c00f71651237d1f0ab6ae7f750c0006008d9512
- Fixes #531

**Testing performed**
Steps taken to test the contribution:
1. Standard make/build steps to confirm code wasn't broken
1. make usersguide
1. confirmed build/doc/warnings.log (doxygen warnings) empty
1. cd build/doc/usersguide/latex
1. make  (to build the pdf)

**Expected behavior changes**
User's guide generates and and creates pdf without errors

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: master bundle w/ this commit

**Additional context**
Does not attempt to address #508 and #389 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, docs",https://github.com/nasa/cFE/pull/555
Provide configurable/customizable message abstraction layer,"**Is your feature request related to a problem? Please describe.**
SB provides abstraction from CCSDS packets, yet the CCSDS_CommandPacket_t is still referenced directly by the services (and likely all the Apps that accept a command) and SB functionality itself is tightly coupled to the actual message format.

**Describe the solution you'd like**
Provide a ""MSG"" abstraction layer (like inc/cfe_msg.h and a src/msg) to implement direct access getters/setters for supported ""header"" fields.  Allow for selection of the supported message formats, or customization via mission configuration (and adding of additional getters/setters).  SB should be abstracted the same as the other services.

""header"" is intentionally vague, since it should include any common fields for which getter/setter abstraction is appropriate related to cFE services and apps.

**Describe alternatives you've considered**
Leave as is, which requires clone and own approach for customization and extensive SB impacts.

**Additional context**
Suggest that since this would now support customization, we collapse the open source supported time format options down to 1 (big endian, with the 6 byte default).  If missions need something else, they can easily customize.

#711 - Separate message access API's from SB
#597 - local endian SID macros, unused shift/mask macros (in ccsds.h)
#440 - Improve API consistency for functions accepting a software bus message
#416 - Investigate various VerifyCmdLength implementations and possible common utility
#172 - Unsafe macros, investigate conversion into Inline functions
#92 - CFE_SB_GetMsgTime() and CFE_SB_SetMsgTime() do not handle byte-swapping on _EL platforms



**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/554
Remove old ASIST mnemonics from doxygen comments,"**Is your feature request related to a problem? Please describe.**
There's alias, extra mnemonic mapping files, and extra comments in code that lead to extra documentation that doesn't apply to anything other than internal proprietary ground stations.

They also are very fragile... defining the mnemonic in the middle of a comment block caused warnings like `cfecmdmnems:11: warning: Illegal command \dd as the argument of a \dd command` but when defined at the top and immediately followed by another alias there were no warnings.

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, docs",https://github.com/nasa/cFE/issues/553
Remove undefined error defines in cfe_error.h,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/cFE/blob/f1be0482d7a9493cb35613a8e43020a66a4a64d3/fsw/cfe-core/src/inc/cfe_error.h#L757-L763

neither of these exist in OSAL

**Describe the solution you'd like**
Delete

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/552
CFE_TIME_Local1HzISR duplicated define,"**Is your feature request related to a problem? Please describe.**
Defined in both cfe_time.h and cfe_time_utils.h (standard violation)

**Describe the solution you'd like**
Single source of truth

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/551
"CFE cmake rules for tables copy the files into /cf, not /cf/tables where expected","**Describe the bug**
cFE cmake rules copy the *.tbl files into /cf/ and not into /cf/apps where most apps seem to expect them:

**To Reproduce**
Steps to reproduce the behavior:
1. Build your own cFS tree based on https://github.com/nasa/cFS
2. remove the *_lab apps
3. add the official repos for CFS_SCH. CFS_TO, CFS_TO, HK, HS and others
4. Configure everything
5. Build (I was able to build specifically 32 bit on my 64 bit machine using cmake 3.13 or newer - with the attached config)
[cFS_32bit_on_64bit.tar.gz](https://github.com/nasa/cFE/files/4319379/cFS_32bit_on_64bit.tar.gz)
6. run
```
.
.
1980-012-14:03:20.25884 ES Startup: SCH loaded and created
1980-012-14:03:20.25917 CFE_TBL:Load-App(5) Fail to load Tbl 'SCH.SCHED_DEF' from '/cf/apps/sch_def_schtbl.tbl' (Stat=0xFFFFFFFF)
EVS Port1 42/1/CFE_TBL 93: SCH Failed to Load 'SCH.SCHED_DEF' from '/cf/apps/sch_def_schtbl.tbl', Status=0xFFFFFFFF
EVS Port1 42/1/SCH 9: Error (RC=0xFFFFFFFF) Loading SDT with /cf/apps/sch_def_schtbl.tbl
.
.
```
7. Stop it, and do an ls
```
cpu1$ ls cf/*.tbl
cf/beer_lab_iloads.tbl  cf/gti_to_config.tbl  cf/hk_cpy_tbl.tbl  cf/lc_def_adt.tbl  cf/lc_def_wdt.tbl  cf/sch_def_msgtbl.tbl  cf/sch_def_schtbl.tbl

```
8. grep the app tree
```
~/source/cFS$ grep -r apps apps/ | grep ""#define"" | grep -v ""\.html""
apps/hk/fsw/platform_inc/hk_platform_cfg.h:#define HK_COPY_TABLE_FILENAME  ""/cf/apps/hk_cpy_tbl.tbl""
apps/sch/fsw/platform_inc/sch_platform_cfg.h:#define SCH_SCHEDULE_FILENAME  ""/cf/apps/sch_def_schtbl.tbl""
apps/sch/fsw/platform_inc/sch_platform_cfg.h:#define SCH_MESSAGE_FILENAME   ""/cf/apps/sch_def_msgtbl.tbl""
apps/md/fsw/platform_inc/md_platform_cfg.h:#define MD_TBL_FILENAME_FORMAT                ""/cf/apps/md_dw%02d.tbl""
apps/md/fsw/unit_test/md_platform_cfg.h:#define MD_TBL_FILENAME_FORMAT                ""/cf/apps/md_dw\%02d.tbl""
apps/fm/fsw/platform_inc/fm_platform_cfg.h:#define FM_TABLE_DEF_NAME               ""/cf/apps/fm_freespace.tbl""
apps/sc/fsw/platform_inc/sc_platform_cfg.h:#define SC_ATS_FILE_NAME                ""/cf/apps/sc_ats""
apps/sc/fsw/platform_inc/sc_platform_cfg.h:#define SC_APPEND_FILE_NAME             ""/cf/apps/sc_append.tbl""
apps/sc/fsw/platform_inc/sc_platform_cfg.h:#define SC_RTS_FILE_NAME               ""/cf/apps/sc_rts""
apps/sc/fsw/unit_test/sc_platform_cfg.h:#define SC_ATS_FILE_NAME                ""/cf/apps/sc_ats""
apps/sc/fsw/unit_test/sc_platform_cfg.h:#define SC_APPEND_FILE_NAME             ""/cf/apps/sc_append.tbl""
apps/sc/fsw/unit_test/sc_platform_cfg.h:#define SC_RTS_FILE_NAME               ""/cf/apps/sc_rts""
apps/cs/fsw/platform_inc/cs_platform_cfg.h:#define CS_DEF_EEPROM_TABLE_FILENAME                ""/cf/apps/cs_eepromtbl.tbl""
apps/cs/fsw/platform_inc/cs_platform_cfg.h:#define CS_DEF_MEMORY_TABLE_FILENAME                ""/cf/apps/cs_memorytbl.tbl""
apps/cs/fsw/platform_inc/cs_platform_cfg.h:#define CS_DEF_TABLES_TABLE_FILENAME                ""/cf/apps/cs_tablestbl.tbl""
apps/cs/fsw/platform_inc/cs_platform_cfg.h:#define CS_DEF_APP_TABLE_FILENAME                   ""/cf/apps/cs_apptbl.tbl""
apps/hs/fsw/platform_inc/hs_platform_cfg.h:#define HS_AMT_FILENAME                ""/cf/apps/hs_amt.tbl""
apps/hs/fsw/platform_inc/hs_platform_cfg.h:#define HS_EMT_FILENAME                ""/cf/apps/hs_emt.tbl""
apps/hs/fsw/platform_inc/hs_platform_cfg.h:#define HS_XCT_FILENAME                ""/cf/apps/hs_xct.tbl""
apps/hs/fsw/platform_inc/hs_platform_cfg.h:#define HS_MAT_FILENAME                ""/cf/apps/hs_mat.tbl""
apps/hs/fsw/unit_test/hs_platform_cfg.h:#define HS_AMT_FILENAME                ""/cf/apps/hs_amt.tbl""
apps/hs/fsw/unit_test/hs_platform_cfg.h:#define HS_EMT_FILENAME                ""/cf/apps/hs_emt.tbl""
apps/hs/fsw/unit_test/hs_platform_cfg.h:#define HS_XCT_FILENAME                ""/cf/apps/hs_xct.tbl""
apps/hs/fsw/unit_test/hs_platform_cfg.h:#define HS_MAT_FILENAME                ""/cf/apps/hs_mat.tbl""
apps/beer_lab/fsw/tables/beer_lab_tbldefs.h:#define BEER_LAB_ILOAD_FILENAME     ""/cf/apps/beer_lab_iloads.tbl""
apps/gti_to/fsw/src/gti_to_app.h:#define TO_CONFIG_FILENAME      ""/cf/apps/to_config.tbl""
apps/gti_to/fsw/examples/multi_tf/to_platform_cfg.h:#define TO_CONFIG_FILENAME ""/cf/apps/to_config.tbl""
apps/gti_to/fsw/examples/multi/to_platform_cfg.h:#define TO_CONFIG_FILENAME ""/cf/apps/to_config.tbl""
apps/gti_to/fsw/examples/rs422/to_platform_cfg.h:#define TO_CONFIG_FILENAME ""/cf/apps/to_config.tbl""
apps/ds/fsw/platform_inc/ds_platform_cfg.h:#define DS_DEF_DEST_FILENAME            ""/cf/apps/ds_file_tbl.tbl""
apps/ds/fsw/platform_inc/ds_platform_cfg.h:#define DS_DEF_FILTER_FILENAME          ""/cf/apps/ds_filter_tbl.tbl""
apps/ds/fsw/unit_test/ds_platform_cfg.h:#define DS_DEF_DEST_FILENAME            ""/cf/apps/ds_file_tbl.tbl""
apps/ds/fsw/unit_test/ds_platform_cfg.h:#define DS_DEF_FILTER_FILENAME          ""/cf/apps/ds_filter_tbl.tbl""
apps/lc/fsw/platform_inc/lc_platform_cfg.h:#define LC_WDT_FILENAME                ""/cf/apps/lc_def_wdt.tbl""
apps/lc/fsw/platform_inc/lc_platform_cfg.h:#define LC_ADT_FILENAME                ""/cf/apps/lc_def_adt.tbl""
apps/lc/fsw/unit_test/lc_platform_cfg.h:#define LC_WDT_FILENAME                ""/cf/apps/lc_def_wdt.tbl""
apps/lc/fsw/unit_test/lc_platform_cfg.h:#define LC_ADT_FILENAME                ""/cf/apps/lc_def_adt.tbl""
```
**Expected behavior**
All .TBL files should be installed into /cf/apps/

Change to **CFE**: cmake/arch_build.cmake:
install directory in add_cfe_tables needs to include apps
```
      # Create the install targets for all the tables
      install(FILES ${TABLE_DESTDIR}/${TBLWE}.tbl DESTINATION ${TGT}/${INSTALL_SUBDIR}/apps)
    endforeach(TGT ${APP_INSTALL_LIST})
``` 

**System observed on:**
 - HW: Dell Laptop XPS 15
 - OS: Linux GTI-UID0110 5.3.0-26-generic #28~18.04.1-Ubuntu SMP Wed Dec 18 16:40:14 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux (Distro Linux Mint 19.3)
 - Versions [Versions:cFE 6.7.7.0, OSAL 5.0.6.0, PSP 1.4.4.0, chksm 60524 on Linux, SCH 2.2.2, CFS_TO commit 4589edb, CFS_CI, and other apps

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Maurice Smulders
Geneva Technologies Inc
",question,https://github.com/nasa/cFE/issues/550
APIs do not consistently check return value of functions called,"**Describe the bug**
APIs do not consistently check return values of functions called.  

I think not checking the return value is likely by design in many of the below cases...I just wanted to have the group take a look and determine if any updates are warranted.

APIs flagged during audit:
cfe_sb_api.c:CFE_SB_GetPipeOpts
cfe_sb_api.c:CFE_SB_SetPipeOpts
cfe_sb_api.c:CFE_SB_UnsubscribeLocal
cfe_tbl_api.c:CFE_TBL_Register
cfe_time_api:CFE_TIME_ExternalTime
cfe_time_api:CFE_TIME_ExternalGPS
cfe_time_api:CFE_TIME_ExternalMET
cfe_es_api.c:CFE_ES_RegisterCDS
cfe_esmempool.c:CFE_ES_PoolCreateEx
cfe_esmempool.c:CFE_ES_GetPoolBuf
cfe_esmempool.c:CFE_ES_PutPoolBuf
cfe_sb_api.c:CFE_SB_RcvMsg
cfe_sb_api.c:CFE_SB_GetLastSenderId
cfe_sb_api.c:CFE_SB_ZeroCopyGetPtr
cfe_sb_api.c:CFE_SB_Unsubscribe
cfe_sb_api.c:CFE_SB_DeletePipe
cfe_tbl_api.c:CFE_TBL_Unregister
cfe_tbl_api.c:CFE_TBL_Load
cfe_tbl_api.c:CFE_TBL_Share
cfe_tbl_api.c:CFE_TBL_Update
cfe_es_api.c:CFE_ES_ProcessCoreException
cfe_es_api.c:CFE_ES_ResetCFE
cfe_sb_api.c:CFE_SB_CreatePipe
cfe_es_start.c:CFE_ES_Main
cfe_esmempool.c:CFE_ES_GetPoolBufInfo
cfe_es_api.c:CFE_ES_WaitForSystemState
cfe_es_api.c:CFE_ES_RunLoop
cfe_tbl_api.c:CFE_TBL_Validate

Please reference the spreadsheet (API_Audit_v2.xlsx) attached to issue #300 for additional information in regards to why each of the above APIs were flagged. 

**Reporter Info**
Dan Knutsen
NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/549
APIs Missing Unit Tests ,"**Describe the bug**
The following APIs need to have additional Unit Tests added:

cfe_es_api.c:CFE_ES_DeleteApp - Should test on boundary conditions for AppID
cfe_es_api.c:CFE_ES_GetAppIDByName - Don’t see where this is ever called in unit test
cfe_es_api.c:CFE_ES_ReloadApp - Should test on boundary conditions for AppID
cfe_es_api.c:CFE_ES_RestartApp - No success path test
cfe_esmempool.c:CFE_ES_GetMemPoolStats - No success path test
cfe_sb.h:CFE_SB_MsgId_Equal - Don’t see where this is ever called in unit test
cfe_sb.h:CFE_SB_MsgIdToValue - Don’t see where this is ever called in unit test
cfe_sb.h:CFE_SB_ValueToMsgId - Don’t see where this is ever called in unit test
cfe_sb_api.c:CFE_SB_SubscribeFull - There are 3 cases where   CFE_SB_BAD_ARGUMENT can get returned…UT should test each one individually.  Also this is outside the scope of the argument validation audit, but there are 3 additional return codes not tested in the unit test.
cfe_sb_api.c:CFE_SB_SubscribeLocal - Consider subscribing to message with limit greater than   CFE_PLATFORM_SB_DEFAULT_MSG_LIMIT
cfe_tbl_api.c:CFE_TBL_DumpToBuffer - No success path test
cfe_tbl_api.c:CFE_TBL_GetAddresses - Should test on boundary conditions for NumTables
cfe_tbl_api.c:CFE_TBL_GetStatus - Don’t see a success path test
cfe_tbl_api.c:CFE_TBL_ReleaseAddresses - No success path test. Also, should test on boundary conditions for NumTables
cfe_tbl_api.c:CFE_TBL_Update - Don’t see a success path test
cfe_tbl_api.c:CFE_TBL_Validate - No success path test
cfe_time_tone.c:CFE_TIME_Local1HzISR - Don’t see where this is ever called in unit test


**Expected behavior**
Unit Tests test all success/error paths

**System observed on:**
 NA code review/audit

**Reporter Info**
Dan Knutsen
NASA Goddard 
","duplicate, unit-test",https://github.com/nasa/cFE/issues/548
APIs missing check for NULL pointer(s),"**Describe the bug**
There are a number of APIs that do not currently check to see if a NULL pointer has been passed in as an input argument.  We should consider adding the additional check in the following APIs:

cfe_es_api.c:CFE_ES_CalculateCRC
cfe_es_api.c:CFE_ES_CopyToCDS
cfe_es_api.c:CFE_ES_CreateChildTask
cfe_es_api.c:CFE_ES_GetAppID
cfe_es_api.c:CFE_ES_GetAppName
cfe_es_api.c:CFE_ES_GetGenCounterIDByName
cfe_es_api.c:CFE_ES_GetTaskInfo
cfe_es_api.c:CFE_ES_ProcessCoreException
cfe_es_api.c:CFE_ES_RegisterCDS
cfe_es_api.c:CFE_ES_RestoreFromCDS
cfe_es_api.c:CFE_ES_RunLoop
cfe_es_api.c:CFE_ES_WriteToSysLog
cfe_esmempool.c:CFE_ES_GetMemPoolStats
cfe_esmempool.c:CFE_ES_GetPoolBuf
cfe_esmempool.c:CFE_ES_GetPoolBufInfo
cfe_esmempool.c:CFE_ES_PoolCreate
cfe_esmempool.c:CFE_ES_PoolCreateEx
cfe_esmempool.c:CFE_ES_PoolCreateNoSem
cfe_esmempool.c:CFE_ES_PutPoolBuf
cfe_evs.c:CFE_EVS_SendEvent
cfe_evs.c:CFE_EVS_SendEventWithAppID
cfe_evs.c:CFE_EVS_SendTimedEvent
cfe_fs_api.c:CFE_FS_InitHeader
cfe_fs_api.c:CFE_FS_ReadHeader
cfe_fs_api.c:CFE_FS_SetTimestamp
cfe_fs_api.c:CFE_FS_WriteHeader
cfe_sb_api.c:CFE_SB_CreatePipe
cfe_sb_api.c:CFE_SB_ZeroCopyGetPtr
cfe_sb_msg_id_util.c:CFE_SB_GetMsgId
cfe_sb_msg_id_util.c:CFE_SB_SetMsgId
cfe_sb_util.c:CFE_SB_GenerateChecksum
cfe_sb_util.c:CFE_SB_GetChecksum
cfe_sb_util.c:CFE_SB_GetCmdCode
cfe_sb_util.c:CFE_SB_GetMsgTime
cfe_sb_util.c:CFE_SB_GetTotalMsgLength
cfe_sb_util.c:CFE_SB_GetUserData
cfe_sb_util.c:CFE_SB_GetUserDataLength
cfe_sb_util.c:CFE_SB_InitMsg
cfe_sb_util.c:CFE_SB_MessageStringGet
cfe_sb_util.c:CFE_SB_MessageStringSet
cfe_sb_util.c:CFE_SB_MsgHdrSize
cfe_sb_util.c:CFE_SB_SetCmdCode
cfe_sb_util.c:CFE_SB_SetMsgTime
cfe_sb_util.c:CFE_SB_SetTotalMsgLength
cfe_sb_util.c:CFE_SB_SetUserDataLength
cfe_sb_util.c:CFE_SB_TimeStampMsg
cfe_sb_util.c:CFE_SB_ValidateChecksum
cfe_tbl_api.c:CFE_TBL_GetAddress
cfe_tbl_api.c:CFE_TBL_GetAddresses
cfe_tbl_api.c:CFE_TBL_GetInfo
cfe_tbl_api.c:CFE_TBL_Load
cfe_tbl_api.c:CFE_TBL_Register
cfe_tbl_api.c:CFE_TBL_Share
cfe_time_api:CFE_TIME_Print
cfe_time_api:CFE_TIME_RegisterSynchCallback

**System observed on:**
 NA - Code review/audit

**Reporter Info**
Dan Knutsen
NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/547
APIs missing argument validation,"**Describe the bug**
The following APIs are missing argument validation:

cfe_sb_api.c:CFE_SB_SubscribeFull - Quality is not checked…consider checking that it is 0 or 1
cfe_es_api.c:CFE_ES_DeleteApp - Can get a segmentation fault if user tries to delete an APP greater than CFE_PLATFORM_ES_MAX_APPLICATIONS
cfe_tbl_api.c:CFE_TBL_GetAddresses - Can result in Segmentation fault if NumTables grows larger than max number of tables.
cfe_tbl_api.c:CFE_TBL_ReleaseAddresses - Should check to make sure NumTables is less than CFE_PLATFORM_TBL_MAX_NUM_TABLES
cfe_es_perf.c:CFE_ES_PerfLogAdd - Should check if EntryExit is either a 0 or 1
cfe_es_api.c:CFE_ES_ReloadApp - Can Result in Segmentation fault if APID is invalid 
cfe_es_api.c:CFE_ES_CreateChildTask - Input Argument 'Flags' is not validated…also it does not appear to be used anywhere, consider removing
cfe_es_api.c:CFE_ES_GetAppName - Consider comparing BufferLength with OS_MAX_API_NAME prior to use.
cfe_es_api.c:CFE_ES_RegisterCDS - Consider checking if block size is less than CFE_PLATFORM_ES_MAX_BLOCK_SIZE
cfe_fs_api.c:CFE_FS_InitHeader - SubType not checked
cfe_sb_api.c:CFE_SB_ZeroCopyGetPtr - Is there a maximum message size? Consider verifying MsgSize prior to use.
cfe_sb_util.c:CFE_SB_SetUserDataLength - Consider verifying Length of user data (if there exists a limit) and/or TotalMsgSize
cfe_sb_api.c:CFE_SB_SubscribeLocal - MsgLim is not checked…if a max limit does exist, should add argument validation

**Expected behavior**
All input arguments are validated prior to use.

**System observed on:**
 NA - code review/audit

**Reporter Info**
Dan Knutsen
NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/546
"Fix #499, #496, and #478, Updated cFE App Developer's Guide","**Describe the contribution**
Updated the cFE app developer's guide markdown with changes to resolve issues 499, 496, and 478.  Made a variety of other small content updates and reordered some sections.

Fixes #499, fixes #496, fixes #478 

**Testing performed**
None - documentation only

**Expected behavior changes**
None - documentation only

**System(s) tested on**
None - documentation only

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Elizabeth Timmons - NASA/GSFC","enhancement, CCB:Approved, docs",https://github.com/nasa/cFE/pull/545
IC 20200304,"**Describe the contribution**
Integration Candidate 20200304

Fixes #358, #487, and #498 

See PRs #505, #504, and #500 for more info
 
**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**

#358 -  No longer requires sed ""hack"" to change the setting in default_config.h

#487 - Clean build

#498 - None

**System(s) tested on**
CI

**Additional context**
See PRs #505, #504, and #500 for more info

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC
Daniel Knutsen - NASA/GSFC
Gerardo E. Cruz-Ortiz - NASA/GSFC",,https://github.com/nasa/cFE/pull/544
expose CFE_SB_GetPktType (and add stub),"**Is your feature request related to a problem? Please describe.**
Requests to expose packet type as an API (helps SBN, testing)

**Describe the solution you'd like**
Add requirement, expose in API header, add stub, etc.

**Describe alternatives you've considered**
N/A

**Additional context**
Slightly related to #263

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/543
"Fix #539, build failure in UT stubs with multiple CPUs","**Describe the contribution**

Fix #539 

Removes dependencies on `cfe_platform_cfg.h` from the unit test stub code.  The behavior of the stubs should not be dependent on the FSW runtime config.

This also fixes a duplicate name collision where different configs exist within the same architecture, causing a conflict on the UT target names.

**Testing performed**
Build with ENABLE_UNIT_TESTS=TRUE for both native and cross environments, with both a default config (single CPU/config) and a more complex two CPU config.  

Execute unit tests and confirm all passing in all configs.

**Expected behavior changes**
The two CPU config originally fails and now builds and runs UT with this change.
No changes to FSW, only UT.

**System(s) tested on**
Ubuntu 18.04 LTS 64 bit
Cross build for 32-bit architecture

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc. (CLA on file)
",CCB:Approved,https://github.com/nasa/cFE/pull/542
Option to drop oldest message when msg limit on pipe reached (keep newest),"**Is your feature request related to a problem? Please describe.**
Looks like SB rejects newest message when message limit reached

https://github.com/nasa/cFE/blob/f1be0482d7a9493cb35613a8e43020a66a4a64d3/fsw/cfe-core/src/sb/cfe_sb_api.c#L1577-L1588

In some cases newest message is of higher priority

**Describe the solution you'd like**
Add option (maybe part of QOS?) to remove oldest message from queue when limit reached.  Easy if the message limit is 1, likely need trade study if more than one (reorder queue? Replace oldest w/ newest would put them out of order, add new to queue remove oldest and remove gap? etc).  Performance cost to find/replace/reorder/etc.

**Describe alternatives you've considered**
Just subscribe with enough space to hold all, and chew through entire pipe to get the latest then process.

**Additional context**
Requested by 587

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/541
User's guide scrub,"**Is your feature request related to a problem? Please describe.**
User's guide out of date and inconsistant

**Describe the solution you'd like**
General scrub of users guide
 - Replace non-documented formatting mechanisms for return codes (causes errors)
    - Custom table aliases for return values causing issues, use built in
 - Make references into links where needed
 - Fix links where needed (remove private links)
 - Remove duplicated documentation in *.c files (API's documented in *.h, with prototype)
 - Remove duplicated brief in API table (pull from object brief)
 - Remove xrefitem style formatting (caused warnings, see #553)
 - Fix glossary table
 - Fix use of BSP where PSP applies
 - Performance collection focused on cFE, not tool (updated reference for java tool)
 - Update Event Message Format documentation to match order/contents
 - Update applicable documents with modern references
 - Removed no-longer-up-to-date dox templates (eclipse header templates)
 - Cleaned up SB sequence counter section
 - Added a couple FAQs
 - Single sourced the versioning section
 - Resolved ALL doxygen warnings (including those detailed in #403)

**Describe alternatives you've considered**
None

**Additional context**
Related issues: #212, #261, #267, #389, #403, #499, #506, #508, #531, #536
Looks like EDS file for SB needs GetPipeIdByNameErrorCounter

**Future considerations** 
- scrub return codes, not all listed in current API documentation
- remove autodoc, explicitly document (futureproof from missing documentation)

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/540
Unit test build fails when multiple CPUs are defined,"**Describe the bug**
After updating some projects to the latest baseline, getting a new build failure:

```
[ 73%] Building C object ut_cfe_core_stubs/CMakeFiles/ut_cfe-core_stubs.dir/ut_es_stubs.c.o
cfe/fsw/cfe-core/ut-stubs/ut_es_stubs.c:37:10: fatal error: cfe_platform_cfg.h: No such file or directory
 #include ""cfe_platform_cfg.h""
          ^~~~~~~~~~~~~~~~~~~~
compilation terminated.
```

**To Reproduce**
The configuration of this project uses multiple CPUs that all share the same architecture (PPC) but different platform configs (cfe_platform_cfg.h).

**Expected behavior**
Build should succeed

**System observed on:**
 - Ubuntu 18.04 LTS 64-bit (build host)
 - Cross Compiling for PPC (embedded Linux)
 - Latest ""master"" baseline (2020-02-26)

**Additional context**
This is related to a recent change that separated the UT stubs from the CFE.  It works fine with only a single CPU/config, but if multiple CPUs are defined then this fails.  Unfortunately only testing this now - the CI/CD build only uses a single CPU/config.

Need to remove UT dependencies on a specific ""cfe_platform_cfg.h"" to fix this.  (stubs should not need this file, it is not a real implementation, it is just stubs).

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/539
"Fix #535 and #537, User's guide doxygen issues","**Describe the contribution**
Fix #535 - removed an extra line that caused breakage
Fix #537 - removed private paths from user's guide processing

**Testing performed**
Steps taken to test the contribution:
1. make prep
1. make usersguide
1. cd buid/doc/users_guide/latex
1. make

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - PDF file now generated by process above

**System(s) tested on**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions: current bundle w/ this change

**Additional context**
N/A

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, docs",https://github.com/nasa/cFE/pull/538
Remove private files from user's guide documentation processing,"**Is your feature request related to a problem? Please describe.**
User's guide is intended to document external elements (API's, commands, error codes, etc), yet includes processing of internal directories.

**Describe the solution you'd like**
Remove internal directories from processing

**Describe alternatives you've considered**
None

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",docs,https://github.com/nasa/cFE/issues/537
"Comment before CFE_SB_RcvMsg mentions CFE_SB_PEND, but it should be CFE_SB_PEND_FOREVER","In the description comment before CFE_SB_RcvMsg in cfe_sb_api.c the timeout value CFE_SB_PEND is mentioned; however, the actual value is CFE_SB_PEND_FOREVER.  This comment should be changed to reflect the correct value.

https://github.com/nasa/cFE/blob/f1be0482d7a9493cb35613a8e43020a66a4a64d3/fsw/cfe-core/src/sb/cfe_sb_api.c#L1730

",docs,https://github.com/nasa/cFE/issues/536
Doxygen of users guide fails to create pdf,"**Is your feature request related to a problem? Please describe.**
make usersguide
cd build/doc/users_guide/latex
make

observe error: 
```
! Missing $ inserted.
<inserted text>
                $
l.119 \end{DoxyParams}

?
! Missing $ inserted.
<inserted text>
                $
l.119 \end{DoxyParams}

?
! Missing } inserted.
<inserted text>
                }
l.119 \end{DoxyParams}

?
Missing character: There is no Ç in font cmr8!
Missing character: There is no Ç in font cmr8!
Missing character: There is no Ç in font cmr8!
! Extra }, or forgotten \endgroup.
\@vwid@setlist ...id@offsets }\unvbox \@vwid@box }

l.119 \end{DoxyParams}

?
Runaway argument?
\arg \c CFE_MISSION_ES_CRC_8 - (Not currently implemented) \arg \c CF\ETC.
! Paragraph ended before \verbatim@ was complete.
<to be read again>
                   \par
l.119 \end{DoxyParams}

?
)
Runaway argument?
! File ended while scanning use of \next.
<inserted text>
                \par
l.412 \input{cfe__es__api_8c}

?
)
*
(Please type a command or say `\end')
*
```

**Describe the solution you'd like**
Fix so pdf will build.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/cFE/issues/535
Add compile time assert that int size is 32 bit,"**Is your feature request related to a problem? Please describe.**
Per discussion 2/26/2020 there's likely breakage in multiple places on a system where int != 32 bit (standard minimum is 16 bit)

**Describe the solution you'd like**
Along with #204, cFE not really designed to work on a system without char of 8 bit size and int of 32.  Enforce/warn on build.

**Describe alternatives you've considered**
Improve documentation?  Still nice to bail on compile for those who don't read documentation.

**Additional context**
#504, and many other places convert int32 to int or the unsigned equiv.

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/534
"Fix #532, Link CFE core with OSAL BSP","**Describe the contribution**
Link the CFE core target with the OSAL BSP library by including this in the final link library list.

Fixes #532

**Testing performed**
Build and run unit tests on native (x86-64) and PC-RTEMS.  Confirm CFE runs normally, no change.

**Expected behavior changes**
No behavior changes.  This change only enables future transition to using the OSAL BSP rather than
duplicating startup logic in the CFE PSP.  Initially the linker should drop/ignore the content of this library.

**System(s) tested on**
 - Ubuntu 18.04 LTS, 64 bit (native)
 - PC-RTEMS using i686-rtems4.11 cross build

**Additional context**
This depends on the related change in nasa/osal#261 which defines the separate `osal_bsp` target.  It should be merged at the same time (or after) the OSAL change is merged.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","invalid, CCB:Approved",https://github.com/nasa/cFE/pull/533
CFE core build should link with the OSAL BSP library,"**Is your feature request related to a problem? Please describe.**
The CFE PSP has historically duplicated some logic that was also in the OSAL BSP.  In an effort to consolidate this and have only one basic BSP implementation, the CFE PSP should be an extension of the OSAL BSP rather than duplicating the logic.

**Describe the solution you'd like**
The first step to accomplish this is to have the CFE final link also include the `osal_bsp` library in the final link.  

**Additional context**
Including `osal_bsp` should not affect existing builds as long as it is included _after_ the PSP, so the linker will not pull in duplicate symbols.  It should be effectively a no-op/ignored in the current build but enables a future transition to using the osal-provided BSP for startup.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",wontfix,https://github.com/nasa/cFE/issues/532
Clarify CFE_TBL_NotifyByMessage should not use ground command MID,"**Is your feature request related to a problem? Please describe.**
CFE_TBL_NotifyByMessage should use a separate MID from ground commands to avoid command counter increments (and any other ground specific processing).

**Describe the solution you'd like**
Update documentation to explicitly recommend NOT using ground command MID.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

*EDIT* - changed per comments below from a command code issue","enhancement, docs",https://github.com/nasa/cFE/issues/531
IC - 20200226,"Describe the contribution
Fix #377, #408, #274, #509, and #315

Requirement and Documentation scrubs
#512, #513, #516, #518, #522, #525, and #506  

Testing performed
Steps taken to test the contribution:

    Current CI passes
    Test 4 in Enhanced CI in https://github.com/nasa/cFS/pull/40

Expected behavior changes

PR #497, PR #510, PR #514 PR #515, PR #517 PR #521, PR #524, PR #526  - Requirement scrubs.
PR #507 - Updated API documentation

PR #477 - Removed references to device drivers in both code and documentation.

PR #461 - Fixes incorrect debug messages in `fsw/cfe-core/src/es/cfe_es_perf.c`
PR #485 - NumOfChildTasks will now be decremented when a child task is deleted.

System(s) tested on
    CI: Ubuntu 18.04

Additional context
N/A

Third party code
N/A

Contributor Info - All information REQUIRED for consideration of pull request
Gerardo E. Cruz-Ortiz - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/530
CFE_SB_GetTotalMsgLength return type doesn't support max packet size,"**Is your feature request related to a problem? Please describe.**
CFE_SB_GetTotalMsgLength returns an uint16, max packet CCSDS packet size can be slightly bigger (65542 vs 65536).  Note the c documentation claims the max return doesn't include the primary header (#528), but the API (h file documentation) claims it's the full packet.  The code actually returns the full packet size (the length field in the CCSDS packet + 7).

**Describe the solution you'd like**
Support full CCSDS packet size.

**Describe alternatives you've considered**
None

**Additional context**
Initiated by JP/PACE

**Requester Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/529
API header documentation doesn't match c file documentation,"**Is your feature request related to a problem? Please describe.**
Currently the API's are documented in both the .h and .c, and they aren't always consistent.  See:

https://github.com/nasa/cFE/blob/5802d229ce047185e9247192f0fa328219d54b78/fsw/cfe-core/src/inc/cfe_sb.h#L947-L968

vs

https://github.com/nasa/cFE/blob/5802d229ce047185e9247192f0fa328219d54b78/fsw/cfe-core/src/sb/cfe_sb_util.c#L228-L241

**Describe the solution you'd like**
Document in header only (remove duplicated info in .c), and reference from c files

**Describe alternatives you've considered**
None

**Additional context**
Requested by JP/PACE

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, good first issue, docs",https://github.com/nasa/cFE/issues/528
Add Alternate MID for TIME Diagnostics Packet Request,"**Is your feature request related to a problem? Please describe.**
The current mechanism to collect the diagnostics packet from the TIME app requires a command to be sent to the app, which increments the TIME Command Counter. For anyone that wants this diagnostics packet to be generated regularly, this causes the Command Counter to also increment regularly, which makes the Command Counter less useful.

**Describe the solution you'd like**
Add a MID to the TIME app for diagnostic packet requests, which won't result in the Command Counter being incremented.

This will create two ways to request the TIME Diagnostics Packet (by command or by message). 

**Describe alternatives you've considered**

- Adding a configuration that enables/disables whether the command counter is incremented when this command is received.
- Check if the command was sent from the scheduler, and don't increment the command count if so.

Both of these go against the current requirement/philosophy of ""all commands should increment a command counter"".

**Additional context**
None.

**Requester Info**
Keegan Moore - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/527
"Fix #525, Message Requirements Scrub","**Describe the contribution**
Now using the term Message (vs overloading ""Command"") for a software bus triggered requirement that doesn't increment the command code (typically inter-app messages)
Fix #525  

**Testing performed**
None, doc only

**Expected behavior changes**
None

**System(s) tested on**
None

**Additional context**
Change is on top of the rest of the requirements scrub to simplify review, just view last commit for changes specific to the linked issue.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/526
Disambiguate command vs message requirements ,"**Is your feature request related to a problem? Please describe.**
""Command"" terminology has been used for both ground commands (that increment command counters) and inter-app commands (that typically do not increment command counters).  So it's unclear in the requirement which sort of use case is intended.

**Describe the solution you'd like**
""Command"" is ground command with additional associated behavior (increments command counters), ""Message"" is typical sb message that does not increment command counter.

**Describe alternatives you've considered**
None

**Additional context**
Discovered during requirements scrub, helps clarify what impacts command counter.

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/525
"Fix #522, Software Bus Requirements Scrub","**Describe the contribution**
See issue for detailed list of changes
Fix #522

**Testing performed**
None, doc change only

**Expected behavior changes**
None

**System(s) tested on**
None

**Additional context**
Commit is on top of previous requirements work to facilitate review, only the last commit is applicable to this issue

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/524
SB subscription reporting request messages out of family,"**Is your feature request related to a problem? Please describe.**
CFE_SB_EnableSubReportingCmd, CFE_SB_DisableSubReportingCmd, CFE_SB_SendPrevSubsCmd are processed like commands but don't increment the command counter.

Typical pattern is for non-ground, inter-app messages to have separate message IDs from ground commands.

**Describe the solution you'd like**
Make consistent with standard pattern

**Describe alternatives you've considered**
None

**Additional context**
See Hk message processing, or the message processing in Time services that don't increment command counter.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/523
Software Bus Requirements Scrub,"**Is your feature request related to a problem? Please describe.**
SB requirements out of date

**Describe the solution you'd like**
Update requirements.  

**Describe alternatives you've considered**
N/A

**Additional context**
Summary of changes (w/ links if individual issues exist already):
- cSB4000 - NOOP command out of family, make consistent with other services
- cSB4005 - HK message out of family, make consistent with other services
- cSB4300 - Zero copy general requirement reads like level 4, delete and replace with API requirements
- cSB4305.6 - Max message size just clarify wording (mission config parameter)
- cSB4310 - Free app resources (done by ES_AppExit, delete from SB/API)
- cSB4700: max message ID’s (delete)
- cSB4701: sb maximum size (delete)
- cSB4704: max destinations (delete)
- cSB4705: Maximum pipes (delete)
- cSB4706: maximum pipe depth (delete)
- NEW API Requirements:
    - cSB4311- CFE_SB_GetMsgId
    - cSB4312- CFE_SB_SetMsgId
    - cSB4313- CFE_SB_MessageStringGet
    - cSB4314- CFE_SB_MessageStringSet
    - cSB4315- CFE_SB_InitMsg
    - cSB4315.1 - Clear message contents and sequence counter
    - cSB4315.2 - Retain message contents and sequence counter
    - cSB4316- CFE_SB_GetUserData
    - cSB4317- CFE_SB_GetUserDataLength
    - cSB4318- CFE_SB_SetUserDataLength
    - cSB4319- CFE_SB_GetTotalMsgLength
    - cSB4320- CFE_SB_SetTotalMsgLength
    - cSB4321- CFE_SB_GetMsgTime
    - cSB4322- CFE_SB_SetMsgTime
    - cSB4323- CFE_SB_TimeStampMsg
    - cSB4324- CFE_SB_GetCmdCode
    - cSB4325- CFE_SB_SetCmdCode
    - cSB4326- CFE_SB_GetChecksum
    - cSB4327- CFE_SB_GenerateChecksum
    - cSB4328- CFE_SB_ValidateChecksum
    - cSB4329- CFE_SB_SetPipeOpts
    - cSB4330- CFE_SB_GetPipeOpts
    - cSB4331- CFE_SB_SubscribeLocal
    - cSB4332- CFE_SB_Subscribe
    - cSB4333- CFE_SB_UnsubscribeLocal 
    - cSB4334- CFE_SB_PassMsg
    - cSB4335- CFE_SB_MsgId_Equal
    - cSB4336- CFE_SB_MsgIdToValue
    - cSB4337- CFE_SB_ValueToMsgId
    - cSB4338- CFE_SB_GetPipeName (related to #210)
    - cSB4339- CFE_SB_GetPipeIdByName (related to #210)
    - cSB4340- CFE_SB_ZeroCopyGetPtr
    - cSB4341- CFE_SB_ZeroCopyReleasePtr
    - cSB4342- CFE_SB_ZeroCopySend
    - cSB4343- CFE_SB_ZeroCopyPass
- NEW Cmd Requirements:
    - cSB4009 - Upon receipt of valid command increment command counter
    - cSB4010 - Upon receipt of invalid command increment command error counter
    - cSB4011- CFE_SB_EnableSubReportingCmd 549
    - cSB4012- CFE_SB_DisableSubReportingCmd 550
    - cSB4013- CFE_SB_SendPrevSubsCmd 564

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/522
"Fix #518, Time Services Requirements Scrub","**Describe the contribution**
Updates TIME Services requirements, see issue for details.
Fix #518

**Testing performed**
None, doc update only

**Expected behavior changes**
None, doc update only

**System(s) tested on**
None, doc update only

**Additional context**
See related issues, #302, #519.  Review just the latest commit for changes directly related to the associated issue.

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/521
assert() in main-line code,"**Is your feature request related to a problem? Please describe.**
In unit tests, we use assert statements.

A lot of our code performs a number of safety checks (pointer is not null, index is less than array size, etc.) I suggest we develop something similar to the UT assert code, and use as much as possible in the main-line code base in lieu of our current safety checks as it will improve readability and support tooling of code analysis.

**Describe the solution you'd like**
Assert library should generate events, return values, and will need to be able to unwind such things as semaphores.

**Describe alternatives you've considered**
Implementing this will introduce risk that we miss a safety check or otherwise mis-translate the check into an assert. Need to develop the library and slowly migrate current safety checks to the library.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",enhancement,https://github.com/nasa/cFE/issues/520
Deprecate/Delete CFE2FSSeconds and FS2CFESeconds,"**Is your feature request related to a problem? Please describe.**
CFE2FSSeconds and FS2CFESeconds never clearly required/defined.

**Describe the solution you'd like**
Remove unrequired functionality.

**Describe alternatives you've considered**
Define explicit use case, requirement, and testing within cFE context.

**Additional context**
See #302 and #518

**Requester Info**
Jacob Hageman - NASA/GSFC
",deprecate,https://github.com/nasa/cFE/issues/519
Time Services Requirements Scrub,"**Is your feature request related to a problem? Please describe.**
TIME requirements out of date

**Describe the solution you'd like**
Update requirements.  

NOTE 1 - this is not major reworking of the requirements/design (#302), but focused on just bringing the requirements up to date.  Future issues will address significant development/rework.

NOTE 2 - MET functionality still applies here (not all abstracted to PSP) to support the virtual MET capability (hardware MET is not required).

**Describe alternatives you've considered**
N/A

**Additional context**
Summary of changes (w/ links if individual issues exist already):
- cTIME2000- HK requirement not consistent (update wording)
- cTIME2001 - wording scrub, remove ""time server and time client"" inconsistent pattern
- cTIME2002 - wording scrub, remove ""time server and time client"" inconsistent pattern
- cTIME2007 - Update summary, it's really compute SCTF given current time
- cTIME2008 - adjust CTF requirement (delete, redundant with add/subtract requirements)
- cTIME2010 - summary: select tone signal source, of PRIMARY vs REDUNDANT (although not explicitly defined), SetSignalCmd
- cTIME2012 - force to flywheel (not just flywheel), then will not update time based on Tone Data/Signal.
- cTIME2012.1 - propagates MET locally (update wording), uses internal best guess for MET.
- cTIME2013 - remove ""second and subsecond"", overdetailed and wrong, really SCTF
- cTIME2014 - remove ""second and subsecond"", overdetailed and wrong, really SCTF
- cTIME23XX - all requests remove extra language (format specified)
- cTIME2701 - time at tone window not handled by TS (delete, hardware), sent by request/cmd
- cTIME2702 - update MET (delete generic functionality requirement, PSP/hardware)
- cTIME2703 - MET resolution (delete, PSP/hardware)
- NEW API Requirements:
    - cTIME2315 - Provide time at tone message functionality given MET, provide in message like HK
    - cTIME2316 - Tone Data given GPS
    - cTIME2317 - Tone Data given Time
    - cTIME2318 - Register synch callback (callback at Tone Signal receipt)
    - cTIME2319 - unregister synch callback  (UnregisterSynchCallback)
    - cTIME2320 - get clock info state flags for TIME (GetClockInfo)
    - cTIME2321 - convert a given MET to SC Time (MET2SCTime)
    - cTIME2322 - Local1HzISR, API to trigger 1 HZ processing
    - cTIME2323 - ExternalTone, API to trigger Tone processing
- NEW Cmd Requirements:
    - cTIME2012.2 - External Time Update Mode - Use Updates (update timekeeping when Tone Signal and Data pair are received)
    - cTIME2015 - ToneSendCmd just sends Tone Data message (no time update)
    - cTIME2016 - ToneData (Cmd), triggers receipt of Tone Data processing
    - cTIME2017 - ToneSignal (Cmd), triggers Tone signal processing
    - cTIME2018 - OneHz (Cmd), triggers 1Hz cycle processing
    - cTIME2019 - set MET, sets abstract MET (not hardware met), SetMETCmd
    - cTIME2020 - (AddDelayCmd)
    - cTIME2021 - (SubDelayCmd)
- NOTE: CFE2FSSeconds/FS2CFESeconds deleted per #519 
- NOTE: SetSourceCmd due refactor/fix per #302

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/518
"Fix #516, Event Services Requirements Scrub","**Describe the contribution**
Event services requirements scrub, see issue for changes
Fix #516 

**Testing performed**
None

**Expected behavior changes**
None

**System(s) tested on**
None

**Additional context**
Stacked commits for requirement scrub, just see latest one for the related ticket

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/517
Event Services Requirements Scrub,"**Is your feature request related to a problem? Please describe.**
EVS requirements out of date

**Describe the solution you'd like**
Update requirements

**Describe alternatives you've considered**
N/A

**Additional context**
Summary of changes (w/ links if individual issues exist already):
- cEVS3018 - HK requirement not consistent (update wording)
- cEVS3103.3.1 - filter counter configurable max (change from hard number)
- cEVS3110 - free app resources, done by ES_AppExit (delete EVS req)
- cEVS3200 - initialize ports default config per port (delete, psp/hardware configuration #93 #94)
- cEVS3201 - power on event format configurable (change from long)
- cEVS3207 - preserve log mode on processor reset (clarify requirement, just wording update)
- cEVS3209 - Processor reset default log mode (delete, conflicts with 3207)
- cEVS3300 - support # of message ports (delete, psp/hardware dependent #93 #94)
- cEVS3301 - Event Log Size (delete, mission config)
- cEVS3302 - # of event filters per app (delete, mission config)
- NEW API Requirements:
    - None
- NEW Cmd Requirements:
    - None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/516
"Fix #513, Table Services Requirements Scrub","**Describe the contribution**
Updates table services requirements per recent scrub, see issue for detailed changes.
Fix #513 

**Testing performed**
None, doc change only

**Expected behavior changes**
None

**System(s) tested on**
None

**Additional context**
See latest commit for just the TBL changes (stacked on the rest of the requirement commits to simplify review).

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - GSFC/NASA","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/515
"Fix #512, Executive services requirements scrub (cmd version)","**Describe the contribution**
Adds missing ES command requirements
Fixes #512

**Testing performed**
None, doc change only

**Expected behavior changes**
None

**System(s) tested on**
None

**Additional context**
Related to #510 

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - GSFC/NASA","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/514
Table Services Requirements Scrub,"**Is your feature request related to a problem? Please describe.**
TBL requirements out of date

**Describe the solution you'd like**
Update requirements

**Describe alternatives you've considered**
N/A

**Additional context**
Summary of changes (w/ links if individual issues exist already):
- cTBL6011 - HK requirement not consistent (update wording)
- cTBL6301 - Free app resources handled by ES_AppExit, delete
**- cTBL6700 - Maximum tables (delete, mission config)**
**- cTBL6701 - Maximum simultaneous loads and dumps (delete, mission config)**
- NEW API Requirements:
    - cTBL6313: CFE_TBL_Validate
    - cTBL6314: CFE_TBL_DumpToBuffer
    - cTBL6315: CFE_TBL_Modified cfe-999
    - cTBL6316: CFE_TBL_Manage cfe-995
- NEW Cmd Requirements:
    - cTBL6013: CFE_TBL_DeleteCDSCmd
    - cTBL6013.1: Delete CDS - Table In Use
    - cTBL6013.2: Delete CDS - Not Critical Table
    - cTBL6013.3: Delete CDS - Already Deleted

**Requester Info**
Jacob Hageman - NASA/GSFC

*EDIT* - Bold items missed in first round",enhancement,https://github.com/nasa/cFE/issues/513
Executive Services Requirements Scrub - Missing command requirements,"**Is your feature request related to a problem? Please describe.**
ES requirements out of date

**Describe the solution you'd like**
Update requirements

**Describe alternatives you've considered**
N/A

**Additional context**
Note #509 and #510 missed the following new commands.

New command requirements:
- cES1029: CFE_ES_StartPerfDataCmd
- cES1030: CFE_ES_SetPerfFilterMaskCmd
- cES1031: CFE_ES_SetPerfTriggerMaskCmd
- cES1032: CFE_ES_QueryAllTasksCmd
- cES1033: CFE_ES_SendMemPoolStatsCmd

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/512
Integration Candidate 20200212,"Describe the contribution
Fix #210, #308, and #489 

Testing performed
Steps taken to test the contribution:

    Current CI passes
    Test 4 in Enhanced CI in https://github.com/nasa/cFS/pull/40 passes after adding #489

Expected behavior changes

#210 - Adds a new function, CFE_SB_GetPipeIdByName, which retrieves the pipe ID given a name of a pipe. 

#308 - Improvement in error reporting when using a pipe name that is already in use, or when the queue limit has been reached.

System(s) tested on

    CI: Ubuntu 18.04

Additional context
N/A

Third party code
N/A

Contributor Info - All information REQUIRED for consideration of pull request
Gerardo E. Cruz-Ortiz - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/511
"Fix #509,  Executive Services Requirements Scrub","**Describe the contribution**
Updates ES requirements, see details in issue.
Fixes #509
Closed #424 as a duplicate (fixed here).

**Testing performed**
None, only doc change

**Expected behavior changes**
Requirements now match code except where addressed by open issues (#484, #410, #399, #291)

**System(s) tested on**
N/A

**Additional context**
Note this commit is on top of #377 commits, just review this commit.

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/510
ES requirements scrub,"**Is your feature request related to a problem? Please describe.**
ES requirements out of date

**Describe the solution you'd like**
Update requirements

**Describe alternatives you've considered**
N/A

**Additional context**
Summary of changes (w/ links if individual issues exist already):
- cES1000 - HK requirement not consistent (not a real command, update wording)
- cES1007.2 - Restart app claims app will continue running if file missing (#424 ), fix req
- cES1010 - Fix TBD in rational
- cES1013, cES1013.1 - shell requirements - remove (#484)
- cES1316.1 - Copy from CDS, invalid data case copies data and returns error (make req match code)
- cES1522 - Log mode discard on processor reset (make configurable, #410)
- NEW cES1523- Log mode on power-on reset (make configurable, #410)
- cES1700 - Max apps (remove, platform specifc)
- cES1702*, cES1703* - remove exception handling requirements from cFE (they are PSP)
- cES1704, cES1705, cES1706, cES1707, cES1708 - remove sizing, platform dependent
- cES1302, cES1303 - processor and spacecraft ID are PSP APIs, remove from cFE req
- cES1026 - DumpCDS doesn't dump integrity (update requriement)
- NEW API Requirements:
    - cES1329: CFE_ES_PoolCreateNoSem (cES1321 also updated to note it's the protected version)
    - cES1330: CFE_ES_GetMemPoolStats
    - cES1331: CFE_ES_GetPoolBufInfo
    - cES1332: CFE_ES_ReloadApp
    - cES1333: CFE_ES_RunLoop
    - cES1334: CFE_ES_WaitForSystemState
    - cES1335: CFE_ES_WaitForStartupSync
    - cES1336: CFE_ES_GetAppInfo
    - cES1337: CFE_ES_IncrementTaskCounter
    - cES1338: CFE_ES_RegisterGenCounter
    - cES1339: CFE_ES_DeleteGenCounter
    - cES1340: CFE_ES_IncrementGenCounter
    - cES1341: CFE_ES_SetGenCount
    - cES1342: CFE_ES_GetGenCount
    - cES1343: CFE_ES_GetGenCounterIDByName
    - cES1600: CFE_FS_ReadHeader
    - cES1601: CFE_FS_InitHeader
    - cES1602: CFE_FS_WriteHeader
    - cES1603: CFE_FS_SetTimestamp
    - cES1604: CFE_FS_ExtractFilenameFromPath, 

**Requester Info**
Jacob Hageman - NASA/GSFC

*EDIT-* Remove shell requirements added, cES3121 update noted, added new requirement numbers",enhancement,https://github.com/nasa/cFE/issues/509
Doxygen event documentation needs scrub,"**Is your feature request related to a problem? Please describe.**
Doxygen event output doesn't match code in at least 1 case, see CFE_ES_INITSTATS_INF_EID

**Describe the solution you'd like**
Scrub event doxygen and confirm it matches actual output (and type)

**Describe alternatives you've considered**
Maybe #define the string as a single definition and link in documentation

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, docs",https://github.com/nasa/cFE/issues/508
Fix #506 - Update API documentation,"**Describe the contribution**
Updates API documentatin
Fix #506

**Testing performed**
Steps taken to test the contribution:
1. make usersguide
1. verified modifications

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: master bundle

**Additional context**
Doesn't fix everything, just API's
See also #477 for device driver API removal

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/pull/507
Update doxygen cFE API documentation,"**Is your feature request related to a problem? Please describe.**
At minimum, CFE_TBL_NotifyByMessage is missing

**Describe the solution you'd like**
Scrub and include references to all API's in documentation

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/506
"Fix #358, Add native permissive mode configuration","**Describe the contribution**
This adds the native_osconfig.h which is included after
the default_osconfig.h if SIMULATION=native is set.
Fix #358

**Testing performed**
Steps taken to test the contribution:
1. copy cfe/cmake/sample_defs to top dir (per standard setup instructions)
1. make SIMULATION=native prep
1. make; make install;
1. Execute core-cpu1 in build/exe/cpu1 and confirmed permissive mode
1. Also did steps above with just make prep, and confirmed permissive mode wasn't set

**Expected behavior changes**
No longer requires sed ""hack"" to change the setting in default_config.h

**System(s) tested on**
 - Hardware: cFS Dev server 2
 - OS: Ubuntu 18.04
 - Versions: master bundle with this branch

**Additional context**
Update related README's and CI to no longer perform sed ""hack""

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/505
"Fix #487, CFE_TIME_print format fix","Describe the contribution
Fix #487, CFE_TIME_print format fix

Testing performed
Build process:
 - make distclean
 - make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
 - make 
 - make install

Verified nominal/clean build.
Ran unit tests.

Expected behavior changes
Clean build 

System(s) tested on
Oracle VM VirtualBox
OS: ubuntu-18.04.3
Versions: cFE 6.7.6.0, OSAL 5.0.6.0, PSP 1.4.4.0

Contributor Info
Dan Knutsen
GSFC/NASA",CCB:Approved,https://github.com/nasa/cFE/pull/504
CFE_TBL_Load should produce clearer message when it has a file header mismatch,"**Is your feature request related to a problem? Please describe.**
CFE_TBL_LoadFromFile compares the application's name + table name with the string in the header of the file. If you configure the cfe_es_startup.scr with a different application name than what is expected in the header, you get an obtuse ""Fail to load Tbl '<app>.<tbl>' from '/cf/<file>.tbl'"" not making it clear that it's purely a mismatch of the header.

**Describe the solution you'd like**
At minimum it should indicate that the matter is a mis-match of the header and the expected header (which means that the file is there, for example). Better would be to report the actual contents of the header and the expected value. The EID for the error is unique so CFE_TBL_Load can produce an event with more specific text.

**Describe alternatives you've considered**
Could have CFE_TBL_LoadFromFile generate the event, but that's an ""internal"" fn so probably not.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",enhancement,https://github.com/nasa/cFE/issues/503
CFE ES unnecessarily keeping multiple copies of task/app names,"**Is your feature request related to a problem? Please describe.**
When reviewing the changes for other tickets, noted that the CFE ES is storing the app name in the `AppTable` twice.  It is stored in the `StartParams.Name` subfield, as well as the `TaskInfo.MainTaskName` sub field.  These appear to be always set together, to the same value, such as in CFE_ES_AppCreate for example:

https://github.com/nasa/cFE/blob/3356da650f04b60190642be3efece47afa66b61a/fsw/cfe-core/src/es/cfe_es_apps.c#L554
https://github.com/nasa/cFE/blob/3356da650f04b60190642be3efece47afa66b61a/fsw/cfe-core/src/es/cfe_es_apps.c#L573

It then goes on to store the same string a third time in the TaskTable[x].TaskName field for the task itself:

https://github.com/nasa/cFE/blob/3356da650f04b60190642be3efece47afa66b61a/fsw/cfe-core/src/es/cfe_es_apps.c#L623-L624

The name is a string value and therefore takes a fair bit of memory to store.  In the ""stock"" example config this bloats the size of the ES data structures by about 2500 bytes, but could easily be much more in a real deployment if OS_MAX_API_NAME is set longer and/or the max number of apps/tasks is larger.

**Describe the solution you'd like**
Should store _at most_ one copy of the name in the `AppTable`, but even that might not be needed if it is always the same as the main task name (which it appears to be).

For tasks, OSAL already stores the task name.  For the ES API calls that need to get the name, it should just lookup the name from OSAL, just like we are doing for SB in #404 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/cFE/issues/502
Maximum number of cFE instances?,"This is not a bug, but a question related to cFE usage:
We are currently trying to perform multi-agent simulations using applications developed on the cFE middle-ware. A single agent is launched by running the core executive. However, we are not able to launch more than 7 instances of cFE on a single linux machine. The 8th instance of cFE throws errors: ""CreatePipeErr: OS_QueueCreateErr returned -1"" Please see attached image. Are there any parameters that could be changed to enable more instances of cFE to run on a single machine? 

Changing the default values of OS_MAX_QUEUES, CFE_PLATFORM_SB_MAX_PIPES didn't seem to help.

![CreatePipeErr](https://user-images.githubusercontent.com/7516618/73398738-00038a80-42b4-11ea-8a5a-a9b7e9c56a1a.png)

**Reporter Info**
NIA/NASA Langley
",question,https://github.com/nasa/cFE/issues/501
"Fix #498, Remove obsolete *.mak files","**Describe the contribution**
Fix #498

**Testing performed**
Steps taken to test the contribution:
1. make prep
1. make
1. make install
No issues observed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: current bundle with this change

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/500
Documentation on CFE_SB_GetMsgTime()/SetMsgTime() needs updated. They do not set/get timestamps for commands (CFE_SB_CMD_HDR_SIZE).,"**Is your feature request related to a problem? Please describe.**
Documentation does not clearly state that `CFE_SB_GetMsgTime()` and `CFE_SB_SetMsgTime()` are only useful if the message header is big enough. Basically, the `CFE_SB_CMD_HDR_SIZE` does not have this field and so it would return 0. 

**Describe the solution you'd like**
Amend the documentation to let others know that those functions are not used when the `cmdHeader[CFE_SB_CMD_HDR_SIZE]`

**Describe alternatives you've considered**
Actually it would probably be better if there was some kind of assert or check to inform the programmer that the function probably shouldn't be used since returning 0 is really returning nothing.
Maybe?
https://github.com/nasa/cFE/blob/405eaaced2467424e338e47bdbb44457d1035ddd/fsw/cfe-core/src/es/cfe_es_erlog.c#L59
from
https://github.com/nasa/osal/blob/d0f1a397fa3559d3ac0c923b3c2ac7ed5004bd5a/src/os/inc/common_types.h#L44

**Additional context**
Documentation in `cFS Application Developers Guide.doc` pg. 57:
> Before sending an SB Message to the SB, the Application can update the SB Message Header.  The most common update is to put the current time in the SB Message.  This is accomplished with one of two SB API functions.  The most commonly used function would be CFE_SB_TimeStampMsg().  This API would insert the current time, in the mission defined format with the mission defined epoch, into the SB Message Header.  The other SB API that can modify the SB Message Header time is CFE_SB_SetMsgTime().  This API call sets the time in the SB Message Header to the time specified during the call.  This is useful when the Application wishes to time tag a series of SB Messages with the same time.
>
> Other fields of the SB Message Header can be modified by an Application prior to sending the SB Message.  These fields, and the associated APIs, are listed in the following table:

I didn't see anywhere that it said if the message is a Command Msg, i.e.,  `CFE_SB_CMD_HDR_SIZE` then it will not have a timestamp and therefore these functions return 0.

Code: 
https://github.com/nasa/cFE/blob/f12563897df87630c8043740dd5ede4b83725c90/fsw/cfe-core/src/sb/cfe_sb_util.c#L277-L305

Just went down a rabbit hole trying to figure out why the message header sizes didn't match in my test cases.

**Requester Info**
Philip Cooksey at NASA Ames","enhancement, good first issue",https://github.com/nasa/cFE/issues/499
Remove obsolete *.mak files,"**Is your feature request related to a problem? Please describe.**
find ./ -name ""*.mak"" shows obsolete make files

**Describe the solution you'd like**
Remove them

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/498
"Fix #377, Remove device driver requirements","**Describe the contribution**
Fixes #377
- Deleted cES1321.1 which was just a copy of cES1321 (from old documents)
- Fixed summary on cES1515.1
- In a separate commit, now ordering by ID (the correct flow)

**Testing performed**
None - requirements change only

**Expected behavior changes**
N/A

**System(s) tested on**
N/A

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/497
Remove device driver references from app development guide and cleanup,"**Is your feature request related to a problem? Please describe.**
Device driver APIs never implemented, guide has references to a design model that doesn't work

**Describe the solution you'd like**

Device driver scrub:
- Scrub the guide, remove non-existent references

Other minor cleanup:
- Fix table of contents
- Remove old doc file

**Describe alternatives you've considered**
N/A

**Additional context**
See #408 and #377

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/496
"Fix #489, Add usersguide/osalguide to local targets","**Describe the contribution**
Added userguide and osalguide to the local target list to avoid makefile warning
Fix #489 

**Testing performed**
Steps taken to test the contribution:
1. Ran make userguide and osalguide and confirmed no longer outputs warnings

**Expected behavior changes**
Passes enhanced CI

**System(s) tested on**
 - Hardware: cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: Master bundle with this change

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, CCB:FastTrack",https://github.com/nasa/cFE/pull/495
CFE_SB_GetLastSenderID will crash if if called before message sent on pipe,"CFE_SB_GetLastSenderID assumes that CFE_SB.PipeTbl[PipeId].CurrentBuff is not NULL. Upon CFE_SB_CreatePipe, this will be null. CurrentBuff is only set upon receiving a message in CFE_SB_RcvMsg(). So, if CFE_SB_GetLastSenderID is called before receiving a message the program will crash.

This is Steven Seeger from GSFC. Guess I have a personal account on github. :)",bug,https://github.com/nasa/cFE/issues/494
Warnings issued when building on ubuntu-19.10,"**Describe the bug**
The warnings contained in the attached file are issued when building on ubuntu-19.10.

**To Reproduce**
Nominal build process

**Expected behavior**
Clean build

**System observed on:**
Oracle VM VirtualBox
OS: ubuntu-19.10
Version: cFE 6.7.5.0, OSAL 5.0.5.0, PSP 1.4.3.0,

**Reporter Info**
Dan Knutsen
GSFC/NASA
",duplicate,https://github.com/nasa/cFE/issues/493
Unit test macros and example use with SB,"**Describe the contribution**
sample macro-ification of UT code for CCB consideration.
Partial implementation of #491
Fix #418

**Testing performed**
made SB unit tests and confirmed all passed.

**Expected behavior changes**
simplified UT code

**System(s) tested on**
Debian Linux

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov

EDIT: Added this fixes #418","enhancement, help wanted, invalid, CCB:Approved, unit-test",https://github.com/nasa/cFE/pull/492
macros for simpler unit test code,"**Is your feature request related to a problem? Please describe.**
Existing cFE unit test code is voluminous and contains a lot of redundant conditional code.

**Describe the solution you'd like**
The checking of conditions in cFE unit tests can be simplified with macros and/or functions.

**Describe alternatives you've considered**
Would still like to consider a test generator of some sort...

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, unit-test",https://github.com/nasa/cFE/issues/491
Integration Candidate 20200121,"**Describe the contribution**
Fix #459, fix #355, fix, #24, fix #101, fix #412, fix #189

**Testing performed**
Steps taken to test the contribution:
1. Current CI passes
1. Enhanced CI in #40 passes debug/with deprecated elements testing

**Expected behavior changes**
- Resolve doxygen warnings
- add OMIT_DEPRECATED flag
- Add strict warnings and enforce
- Always increment sequence counter
- Fix comments
- Add code coverage test to evs

**System(s) tested on**
 - CI: Ubuntu 18.04

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/490
"doxygen warning for \""usersguide\""","**doxygen errors warning**

 doxygen errors for ""usersguide"" must be fixed before submitting a pull request

defined by CI
[https://travis-ci.com/nasa/cFS/jobs/278425144](url)

**Code snips**
``$ make usersguide > make_usersguide_stdout.txt 2> make_usersguide_stderr.txt
The command ""make usersguide > make_usersguide_stdout.txt 2> make_usersguide_stderr.txt"" exited with 0.
$ if [[ -s make_usersguide_stderr.txt ]]; then
  echo ""You must fix doxygen errors for \""usersguide\"" before submitting a pull request""
  echo """"
  cat make_usersguide_stderr.txt
  exit -1``

**matrix:**
 AMD64
 Compiler: gcc C
BUILDTYPE=debug OMIT_DEPRECATED=false

**Additional context**
warning: overriding recipe for target 'usersguide'
warning: ignoring old recipe for target 'usersguide'

**Reporter Info**
Anhelina Yurkova NASA GODDARD / ASRC SES II
",enhancement,https://github.com/nasa/cFE/issues/489
cFE Tlm Packet 64-bit alignment issue,"**Describe the bug**
Compiler add padding is applied to cFE Telemetry packets if the data region does not start on a 64 bit boundary and the packet contains a 64 bit variable.

**To Reproduce**
Steps to reproduce the behavior:
1. Nominal Build Process.
2. Enable Tlm.
3. Bit bust a telemetry packet containing a 64 bit variable.

**Expected behavior**
No compiler added padding should be applied.

**System observed on:**
Ubuntu 64-bit - 19.10

**Reporter Info**
Dan Knutsen
NASA/GSFC
","bug, breaking",https://github.com/nasa/cFE/issues/488
Build failure of ut_time_stubs with BUILDTYPE=release,"**Describe the bug**
Matrix build fails with: BUILDTYPE=release OMIT_DEPRECATED=false
See also https://github.com/nasa/cFS/pull/40/ (enhanced CI)

**To Reproduce**
Steps to reproduce the behavior:
1. See CI process/results

**Expected behavior**
Successful build

**Error text**
```
home/travis/build/nasa/cFS/cfe/fsw/cfe-core/ut-stubs/ut_time_stubs.c: In function ‘CFE_TIME_Print’:
/home/travis/build/nasa/cFS/cfe/fsw/cfe-core/ut-stubs/ut_time_stubs.c:106:25: error: ‘ -’ directive output may be truncated writing 2 bytes into a region of size between 0 and 18 [-Werror=format-truncation=]
              ""UT %lu.%lu -"",
                         ^~
In file included from /usr/include/stdio.h:862:0,
                 from /home/travis/build/nasa/cFS/cfe/fsw/cfe-core/ut-stubs/ut_time_stubs.c:35:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:64:10: note: ‘__builtin___snprintf_chk’ output between 9 and 27 bytes into a destination of size 24
   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        __bos (__s), __fmt, __va_arg_pack ());
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
```

**System observed on:**
 - CI system, integration candidate bundle

**Additional context**
N/A

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/487
Integration Candidate 20200121,"**Describe the contribution**
Fix #459, fix #355, fix, #24, fix #101, fix #412, fix #189

**Testing performed**
Steps taken to test the contribution:
1. Current CI passes
1. Enhanced CI in #40 passes debug/with deprecated elements testing

**Expected behavior changes**
- Resolve doxygen warnings
- add OMIT_DEPRECATED flag
- Add strict warnings and enforce
- Always increment sequence counter
- Fix comments
- Add code coverage test to evs

**System(s) tested on**
 - CI: Ubuntu 18.04

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",invalid,https://github.com/nasa/cFE/pull/486
"Fix #274, NumOfChildTasks not decremented","**Describe the contribution**
Fixes #274, NumOfChildTasks not decremented

**Testing performed**
Steps taken to test the contribution:
1. Nominal build process.
2. Ran unit tests.

**Expected behavior changes**
 NumOfChildTasks will now be decremented when a child task is deleted.

**System(s) tested on**
Oracle VM VirtualBox
OS: ubuntu-19.10
Version: cFE 6.7.3.0; OSAL 5.0.3.0; PSP 1.4.1.0

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
GSFC/NASA
",CCB:Approved,https://github.com/nasa/cFE/pull/485
Separate execute in shell functionality from core cFE service,"**Is your feature request related to a problem? Please describe.**
Command to execute in shell a concern in some security scenarios.

**Describe the solution you'd like**
Remove from the core, better suited to an app (optional, can be included or loaded based on mission requirements/needs)

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/484
"Deprecate multiple ""success"" code responses","**Is your feature request related to a problem? Please describe.**
API's with multiple ""success"" codes are frequently mishandled

**Describe the solution you'd like**
Single success response, unique information should be passed back in parameters

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/483
"""Error, Can't Open ES App Startup file: /cf/cfe_es_startup.scr"" when running a sample cpu1 application","**Is your feature request related to a problem? Please describe.**

I apologize in advance if the following issue that I am reporting is caused by my misunderstanding of the cFS/cFE CMake build system.

The issue is that I am getting the following issue when 1) I run the `make` command from the CFS repository and also 2) if I run it from CLion with the changes described in #478.
 
**1)**

```bash
cp cfe/cmake/Makefile.sample Makefile
cp -r cfe/cmake/sample_defs sample_defs
make && ./build/cpu1/cpu1/core-cpu1
```

The log:

```
...
Current working dir: /home/stanislaw/workspace/code/cFS
open(./cf/cfe_es_startup.scr): No such file or directory
1980-012-14:03:20.25202 zES Startup: Error, Can't Open ES App Startup file: /cf/cfe_es_startup.scr EC = 0xFFFFFFFF
1980-012-14:03:20.25205 ES Startup: CFE_ES_Main entering APPS_INIT state
1980-012-14:03:20.25206 ES Startup: CFE_ES_Main entering OPERATIONAL state
EVS Port1 42/1/CFE_TIME 21: Stop FLYWHEEL
```

**2**

```bash
cp cfe/cmake/Makefile.sample Makefile
cp -r cfe/cmake/sample_defs sample_defs
# Building cpu1-all and then core-cpu1 in CLion
```

The log:

```
1980-012-14:03:20.25314 ES Startup: CFE_ES_Main entering CORE_READY state
Current working dir: /home/stanislaw/workspace/code/cFS/cmake-build-debug-cfs-cpu1/cfe/cpu1
open(./cf/cfe_es_startup.scr): No such file or directory
1980-012-14:05:45.46664 zES Startup: Error, Can't Open ES App Startup file: /cf/cfe_es_startup.scr EC = 0xFFFFFFFF
1980-012-14:05:45.46666 ES Startup: CFE_ES_Main entering APPS_INIT state
1980-012-14:05:45.46667 ES Startup: CFE_ES_Main entering OPERATIONAL state
EVS Port1 42/1/CFE_TIME 21: Stop FLYWHEEL```
```

Looking for a missing file indicates that there is no way a running CFS can find a file because it is neither copied to a predetermined location nor the relative file `./cf/cfe_es_startup.scr` points to a meaningful location.

```bash
$ find . | grep cfe_es_startup.scr
./cfe/cmake/sample_defs/cpu1_cfe_es_startup.scr
./sample_defs/cpu1_cfe_es_startup.scr
```

**Describe the solution you'd like**

Our understanding is that the `cfe_es_startup.scr` is an important file and without loading its contents CFS does not work properly. We would expect some action to exist in the CMake script files that would copy this file and make it available to the running cFS.

**Describe alternatives you've considered**

We assume that there is no other way of having CFS to run properly. There should be a procedure or instructions on how to make the `.scr` file available to CFS.

**Additional context**

None.

**Requester Info**

Stanislav Pankevich (PTS, private German space company)
",question,https://github.com/nasa/cFE/issues/482
Add functional test for SB unsubscribe/resubscribe with incrementing count,"**Is your feature request related to a problem? Please describe.**
#419 Updated sequence counter behavior.  Need to add a functional test to cover it.

**Describe the solution you'd like**
Add a functional test.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/481
Potential for app exit failure when not passing back RunStatus,"**Describe the bug**
CFE_ES_ExitApp reports error when passed in ExitStatus is CFE_ES_RunStatus_APP_RUN.

Typical app pattern (see https://github.com/nasa/sample_app/blob/master/fsw/src/sample_app.c) is:
````
  while (CFE_ES_RunLoop(&Sample_AppData.RunStatus) == TRUE) {do stuff}
 
  CFE_ES_ExitApp(Sample_AppData.RunStatus);
````

But CFE_ES_RunLoop does not update RunStatus on internal request to stop:
https://github.com/nasa/cFE/blob/7251cbccc79574a897ebd7cae3ef1975cfaedcec/fsw/cfe-core/src/es/cfe_es_api.c#L545-L552

**To Reproduce**
Steps to reproduce the behavior:
1. Send RestartApp, will error and fail to restart.

**Expected behavior**
Set passed in RunStatus to the control request for the case above:
RunStatus = CFE_ES_Global.AppTable[AppID].ControlReq.AppControlRequest

Allows the App to take appropriate action.

**System observed on:**
 - cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: current dev (6.7.4)

**Additional context**
Fails build verification testing

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/480
Integration Candidate 20200108,"**Describe the contribution**
Merge #428, #432, #436, #439, #444, #446, #450, #453
Fix #259, fix #425, fix #427, fix #435, fix #437, fix #438, fix #443, fix #445
Fix #314

**Testing performed**
1. Checked out IC bundle
1. Built and ran cFS unit tests and OSAL coverage (vxworks and shared)
   1. All passed
1. make osalguide to confirm it built
1. Ran core-cpu1 (cFS), no errors/warnings/failures observed

**Expected behavior changes**
OS timer test should now always pass

**System(s) tested on**
 - cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: IC branches

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/479
Update section 4.1.2 “Hardware Servicing” Application in Developer's Guide,"**Is your feature request related to a problem? Please describe.**
Section 4.1.2 Hardware Service in developer's guide needs to be updated. 

**Requester Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/478
"Fix #408, Remove device driver references in code","**Describe the contribution**
reference pull request https://github.com/nasa/cFE/pull/475

update remove reference to driver


**Contributor Info - All information REQUIRED for consideration of pull request**
Anh Van, NASA Goddard
",CCB:Approved,https://github.com/nasa/cFE/pull/477
The difference in linking behavior on Linux vs macOS results in build errors on macOS,"**Is your feature request related to a problem? Please describe.**

I am getting the following build error when building on macOS (more complete log below):

```
[ 24%] Linking C shared module sample_app.so
cd /sandbox/cFS/cmake-build-debug/cpu1/apps/sample_app && /Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake -E cmake_link_script CMakeFiles/sample_app.dir/link.txt --verbose=1
/usr/bin/gcc -fPIC -Wall     -D_XOPEN_SOURCE=600    -g  -shared  -o sample_app.so CMakeFiles/sample_app.dir/fsw/src/sample_app.c.o CMakeFiles/sample_app.dir/fsw/src/sample_table.c.o 
Undefined symbols for architecture x86_64:
  ""_CFE_ES_ExitApp"", referenced from:
      _SAMPLE_AppMain in sample_app.c.o
  ""_CFE_ES_PerfLogAdd"", referenced from:
      _SAMPLE_AppMain in sample_app.c.o
```

Let's take a `_CFE_ES_ExitApp` symbol for a typical example: it is a symbol from `libcfe_core_default_cpu1.a` which does not exist yet at the moment when the `sample_app.so` above is linked. This works on Linux because it seems to allow this kind of a forward declaration but it does not on macOS which fails immediately.

What macOS expects here is an explicit `-lcfe_core_default_cpu1` to be added to the compilation line above:

```
/usr/bin/gcc -fPIC -Wall     -D_XOPEN_SOURCE=600    -g  -shared  -o sample_app.so CMakeFiles/sample_app.dir/fsw/src/sample_app.c.o CMakeFiles/sample_app.dir/fsw/src/sample_table.c.o -lcfe_core_default_cpu1
```

I recognize that CFS/CFE uses a two-stage CMake generation process when one CMake tree calls to the second which builds the cpu1-related code and at this point, it looks like on Linux
the ` sample_app.so ` is compiled from the first tree and then with its dependencies forward-declared it gets linked to a final executable when built in the second tree and that's where its undefined symbols are resolved.

I have created a minimal example that demonstrates this difference in the linking behavior on Linux and macOS [on Github](https://github.com/stanislaw/Examples/tree/20200110-dynamic-static-forward-declaration-mac-vs-linux) and asked [a question on StackOverflow](https://stackoverflow.com/questions/59687933/linking-a-dynamic-library-that-links-in-symbols-from-a-static-library-macos-vs) to see if I can make macOS/Clang to match the behavior of GCC/Linux but so far I am not aware of what could be done to resolve this.

**Describe the solution you'd like**

This issue makes me think that the order of how things are built by CFS/CFE could be changed. macOS linking errors indicate that we are building something in the first CMake tree that depends on a cpu1-specific code that is built from the second CMake tree. I could see it practical to move the compilation and linkage of all cpu1-specific code to the second stage so that the order of dependencies is strictly direct and there are nowhere any forward-declared undefined symbols of this kind in the binaries.

**Describe alternatives you've considered**

- I will try to see if I can find any linker flags in `clang --help` that could activate the Linux-like linking behavior but I am not sure if such flags exist.

- I can create my custom set of CMakeLists.txt files to streamline the build process and eliminate the need in ""forward declarations"" but this will result in my own custom build system for CFS/CFE which I would rather like to avoid.

**Additional context**

Please check the StackOverflow question above.

**Requester Info**

Stanislav Pankevich

---

Full build error log:

```
[ 24%] Linking C shared module sample_app.so
cd /sandbox/cFS/cmake-build-debug/cpu1/apps/sample_app && /Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake -E cmake_link_script CMakeFiles/sample_app.dir/link.txt --verbose=1
/usr/bin/gcc -fPIC -Wall     -D_XOPEN_SOURCE=600    -g  -shared  -o sample_app.so CMakeFiles/sample_app.dir/fsw/src/sample_app.c.o CMakeFiles/sample_app.dir/fsw/src/sample_table.c.o 
Undefined symbols for architecture x86_64:
  ""_CFE_ES_ExitApp"", referenced from:
      _SAMPLE_AppMain in sample_app.c.o
  ""_CFE_ES_PerfLogAdd"", referenced from:
      _SAMPLE_AppMain in sample_app.c.o
  ""_CFE_ES_RegisterApp"", referenced from:
      _SAMPLE_AppMain in sample_app.c.o
  ""_CFE_ES_RunLoop"", referenced from:
      _SAMPLE_AppMain in sample_app.c.o
  ""_CFE_ES_WriteToSysLog"", referenced from:
      _SAMPLE_AppInit in sample_app.c.o
      _SAMPLE_ProcessCC in sample_app.c.o
      _SAMPLE_GetCrc in sample_app.c.o
  ""_CFE_EVS_Register"", referenced from:
      _SAMPLE_AppInit in sample_app.c.o
  ""_CFE_EVS_SendEvent"", referenced from:
      _SAMPLE_AppMain in sample_app.c.o
      _SAMPLE_AppInit in sample_app.c.o
      _SAMPLE_ProcessCommandPacket in sample_app.c.o
      _SAMPLE_ProcessGroundCommand in sample_app.c.o
      _SAMPLE_VerifyCmdLength in sample_app.c.o
      _SAMPLE_NoopCmd in sample_app.c.o
      _SAMPLE_ResetCounters in sample_app.c.o
      ...
  ""_CFE_SB_CreatePipe"", referenced from:
      _SAMPLE_AppInit in sample_app.c.o
  ""_CFE_SB_GetCmdCode"", referenced from:
      _SAMPLE_ProcessGroundCommand in sample_app.c.o
      _SAMPLE_VerifyCmdLength in sample_app.c.o
  ""_CFE_SB_GetMsgId"", referenced from:
      _SAMPLE_ProcessCommandPacket in sample_app.c.o
      _SAMPLE_VerifyCmdLength in sample_app.c.o
  ""_CFE_SB_GetTotalMsgLength"", referenced from:
      _SAMPLE_VerifyCmdLength in sample_app.c.o
  ""_CFE_SB_InitMsg"", referenced from:
      _SAMPLE_AppInit in sample_app.c.o
  ""_CFE_SB_RcvMsg"", referenced from:
      _SAMPLE_AppMain in sample_app.c.o
  ""_CFE_SB_SendMsg"", referenced from:
      _SAMPLE_ReportHousekeeping in sample_app.c.o
  ""_CFE_SB_Subscribe"", referenced from:
      _SAMPLE_AppInit in sample_app.c.o
  ""_CFE_SB_TimeStampMsg"", referenced from:
      _SAMPLE_ReportHousekeeping in sample_app.c.o
  ""_CFE_TBL_GetAddress"", referenced from:
      _SAMPLE_ProcessCC in sample_app.c.o
  ""_CFE_TBL_GetInfo"", referenced from:
      _SAMPLE_GetCrc in sample_app.c.o
  ""_CFE_TBL_Load"", referenced from:
      _SAMPLE_AppInit in sample_app.c.o
  ""_CFE_TBL_Manage"", referenced from:
      _SAMPLE_ReportHousekeeping in sample_app.c.o
  ""_CFE_TBL_Register"", referenced from:
      _SAMPLE_AppInit in sample_app.c.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
```",wontfix,https://github.com/nasa/cFE/issues/476
"Fix #408, remove reference to device driver","**Describe the contribution**
Remove reference to device driver.

**Testing performed**
Steps taken to test the contribution:
1. make prep
2. make install
3. Run cfs

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - Ubuntu 18.04
 - cfe 6.6, osal 1.4.2a

**Contributor Info - All information REQUIRED for consideration of pull request**
Anh Van, NASA Goddard",invalid,https://github.com/nasa/cFE/pull/475
CMake: minor changes to improve the CLion IDE CMake experience,"**Describe the contribution**

This is needed when CFE's root CMakeLists.txt is not the highest level CMakeLists.txt in the project. My IDE is CLion and it works best when there is the highest level CMakeLists.txt in the root of a project's source code.

This changeset enables a necessary indirection: from `CMAKE_SOURCE_PATH` to `CFE_SOURCE_PATH` and this allows building the project with the CMakeLists.txt file in the top-level mission source directory.

**Step 1.** I have cloned the root cFS repository and have cloned all submodules.
**Step 2.** I have created a CMakeLists.txt file in the cFS folder with the following contents:

```
cmake_minimum_required(VERSION 3.13)
add_subdirectory(cfe)
```

**Step 3.** I have made the changes from this changeset.

After this sequence of steps, the CLion IDE picks up the root-level CMakeLists automatically and I can already start building targets, such as `cpu1-all`, `mission-all` etc. And the only parameter I need to configure CMake is: `-DMISSION_SOURCE_DIR=/sandbox/cFS`.

**Testing performed**

Please see the steps above.

**Expected behavior changes**

With this change, getting IDE to recognize the cFS build targets is way easier if your IDE is CLion.

**System(s) tested on:**
 - OS: macOS 10.14.6
 - Versions cFE and cFS, latest master (https://github.com/nasa/cFE/commit/bb4a6ee52f32c54031ffd752c20a9914cadea914 and https://github.com/nasa/cFS/commit/43590faadc08d893670dce48ae01df0a364f6e9a).

**Contributor Info**

Stanislav Pankevich (PTS GmbH, private German space company).

**Community contributors**

> You must attach a signed CLA (required for acceptance) or reference one already submitted

The corporate CLA has been signed on Feb 17th and sent to the email address as specified in the CLA document.


",CCB:Approved,https://github.com/nasa/cFE/pull/474
Incomplete coverage test for src/time,"**Is your feature request related to a problem? Please describe.**
Current Coverage: 99.1 %

cfe_time_api.c
CFE_TIME_CFE2FSSeconds

```
     681           0 :         if (-ConvertFactor > SecondsCFE)
     682             :         {
     683           0 :             SecondsFS = 0;
     684             :         }
```

CFE_TIME_Print
```
     766           0 :         NumberOfMinutes++;
     767           0 :         NumberOfSeconds -= 60;
```

cfe_time_task.c
CFE_TIME_TaskInit
```
     352           0 :       CFE_ES_WriteToSysLog(""TIME:Error subscribing to time at the tone request data cmds:RC=0x%08X\n"",(unsigned int)Status);
     353           0 :       return Status;
```

cfe_time_utils.c
CFE_TIME_GetReference
```
  676           0 :         if (RetryCount == 0)
     677             :         {
     678             :             /* unsuccessful read */
     679           0 :             break;
     680             :         }
     681             : 
     682           0 :         --RetryCount;
     683             :     }
     684             : 
```

**Requester Info**
Anh Van, NASA Goddard
","enhancement, unit-test, coverage",https://github.com/nasa/cFE/issues/473
Incomplete coverage test for src/tbl,"**Is your feature request related to a problem? Please describe.**
Current Coverage: 99.6 %

 cfe_tbl_api.c
CFE_TBL_Register
```
     373           0 :                                 CFE_ES_GetAppName(AppName, ThisAppId, OS_MAX_API_NAME);
     374           0 :                                 CFE_ES_WriteToSysLog(""CFE_TBL:Register-Failed to get work buffer for '%s.%s' (ErrCode=0x%08X)\n"",
```

CFE_TBL_Update
```
    1005           0 :             CFE_EVS_SendEventWithAppID(CFE_TBL_UPDATE_ERR_EID,
    1006             :                                        CFE_EVS_EventType_ERROR,
    1007             :                                        CFE_TBL_TaskData.TableTaskAppId,
    1008             :                                        ""%s Failed to Update '%s', Status=0x%08X"",
    1009           0 :                                        AppName, RegRecPtr->Name, (unsigned int)Status);
```

CFE_TBL_Manage
```
    1374             :                 /* If an error occurred during Validate, then do not perform any more managing */
    1375           0 :                 FinishedManaging = true;
```

cfe_tbl_task_cmds.c
CFE_TBL_LoadCmd

```
    515             :                         {
     516           0 :                             CFE_EVS_SendEvent(CFE_TBL_INTERNAL_ERROR_ERR_EID,
```

**Requester Info**
Anh Van, NASA Goddard
","enhancement, unit-test, coverage",https://github.com/nasa/cFE/issues/472
Incomplete coverage test for src/sb,"**Is your feature request related to a problem? Please describe.**
Current coverage: 99.7 %

Missing code coverage for the following: 
cfe_sb_api.c

CFE_SB_SetPipeOpts
```
     433             :         /* shouldn't happen... */
     434           0 :         return Status;
```

CFE_SB_SendMsgFull
```
   1395          23 :         if(DestPtr == NULL)
    1396             :         {
    1397           0 :           break;
```


cfe_sb_task.c
CFE_SB_TaskMain

```
    106             :             /* Process cmd pipe msg */
     107           0 :             CFE_SB_ProcessCmdPipePkt();
```

CFE_SB_AppInit

```
    203          11 :     if(CFE_PLATFORM_EVS_MAX_EVENT_FILTERS < CfgFileEventsToFilter){
     204           0 :       CfgFileEventsToFilter = CFE_PLATFORM_EVS_MAX_EVENT_FILTERS;
```

**Requester Info**
Anh Van, NASA Goddard","enhancement, unit-test",https://github.com/nasa/cFE/issues/471
Incomplete coverage test for src/fs,"**Is your feature request related to a problem? Please describe.**
Current coverage 91.3%

Missing coverage for the following: cfe_fs_decompress.c

FS_gz_eat_header_Reentrant
```
     214           2 :                 if ( (flags & CONTINUATION) != 0 ) {
     215           0 :                         NEXTBYTE();
     216           0 :                         if( State->Error != CFE_SUCCESS ) return CFE_FS_GZIP_READ_ERROR_HEADER;
     217           0 :                         NEXTBYTE();
     218           0 :                         if( State->Error != CFE_SUCCESS ) return CFE_FS_GZIP_READ_ERROR_HEADER;
     219             :                 }
     220             :                 
     221           2 :                 if ( (flags & EXTRA_FIELD) != 0 ) {
     222             :                         uint32 len;
     223           0 :                         len  = NEXTBYTE();
     224           0 :                         if( State->Error != CFE_SUCCESS ) return CFE_FS_GZIP_READ_ERROR_HEADER;
     225           0 :                         len |= NEXTBYTE() << 8;
     226           0 :                         if( State->Error != CFE_SUCCESS ) return CFE_FS_GZIP_READ_ERROR_HEADER;
     227           0 :                         while (len--) {
     228           0 :                                 NEXTBYTE();
     229           0 :                                 if( State->Error != CFE_SUCCESS ) return CFE_FS_GZIP_READ_ERROR_HEADER;
     230             :                         }
```

```
     251           0 :                         keep_going = true;
     252           0 :                         while ( keep_going ) {
     253             : 
     254             :                                 /* Get the next byte */
     255           0 :                                 thisByte = NEXTBYTE();
     256             : 
     257             :                                 /* Header failure when end of file is reached or a read failure occurs */
     258           0 :                                 if ((thisByte == EOF) || (State->Error != CFE_SUCCESS)) return CFE_FS_GZIP_READ_ERROR_HEADER;
     259             : 
     260             :                                 /* End of string was found */
     261           0 :                                 if (thisByte == 0) keep_going = false;
```

FS_gz_huft_build_Reentrant

```
     399           0 :                 *m = 0;
     400           0 :                 return CFE_SUCCESS;
```

```
     529             :                         {
     530           0 :                                 return CFE_FS_GZIP_BAD_CODE_BLOCK;
```

```
     583           0 :                 State->bk -= 8;
     584           0 :                 State->inptr--;
```

`     634           0 :         else               res = CFE_FS_GZIP_BAD_CODE_BLOCK;    `

`     689           0 :                  return CFE_FS_GZIP_INDEX_ERROR;`

```
     703           0 :             State->outcnt = w;
     704           0 :             FS_gz_flush_window_Reentrant(State);
     705           0 :             w = 0;
```

`     736           0 :                   return CFE_FS_GZIP_INDEX_ERROR;`

FS_gz_inflate_dynamic_Reentrant

```
     928           0 :          NEEDBITS(7);
     929           0 :          j = 11 + ( (uint32)b & 0x7f );
     930           0 :          DUMPBITS(7);
     931           0 :          if ( (uint32)i + j > n ) return CFE_FS_GZIP_BAD_DATA;
     932           0 :          while (j--) ll[i++] = 0;
     933           0 :          l = 0;
```

FS_gz_inflate_stored_Reentrant

```
    1053           0 :         n = ( (uint32)b & 0xffff );
    1054           0 :         DUMPBITS(16);
    1055             : 
    1056           0 :         NEEDBITS(16);
    1057           0 :         if ( n != (uint32)( (~b) & 0xffff) )  return CFE_FS_GZIP_BAD_DATA;    /* error in compressed data */
    1058           0 :         DUMPBITS(16);
    1059             : 
    1060             : 
    1061             :         /*  read and output the compressed data */
    1062           0 :         while (n--) 
    1063             :    {
    1064           0 :                 NEEDBITS(8);
    1065           0 :       State->window[w++] = (uint8)b;
    1066           0 :                 if ( w == WSIZE ) 
    1067             :       {
    1068           0 :                 State->outcnt = w;
    1069           0 :                 FS_gz_flush_window_Reentrant(State);
    1070           0 :                 w = 0;
    1071             :                 }
    1072           0 :                 DUMPBITS(8);
    1073             :         }
    1074             : 
    1075             :         /*  restore the globals from the locals */
    1076           0 :         State->outcnt = w;                                   /* restore global window pointer */
    1077           0 :         State->bb     = b;                                   /* restore global bit buffer */
    1078           0 :         State->bk     = k;
    1079             : 
    1080           0 :         return CFE_SUCCESS;
```

**Requester Info**
Anh Van, NASA Goddard
","enhancement, unit-test",https://github.com/nasa/cFE/issues/470
Incomplete coverage test for  cfe_es_apps.c,"**Is your feature request related to a problem? Please describe.**
Current coverage for cfe_es_apps.c = 96.9 %
Missing coverage test for the following:

CFE_ES_AppCreate

```
    646           0 :                 CFE_ES_WriteToSysLog(""ES Startup: Error removing temp RAM disk file, EC = 0x%08X\n"",
     647             :                                      (unsigned int) ReturnCode);
```

CFE_ES_CleanupObjectCallback
```
    1363           0 :     case OS_OBJECT_TYPE_OS_MODULE:
    1364           0 :         Status = OS_ModuleUnload(ObjectId);
    1365           0 :         break;
    1366           0 :     default:
    1367           0 :         ObjIsValid = false;
    1368           0 :         Status = OS_ERROR;
    1369           0 :         break;
```

CFE_ES_CleanupTaskResources
`1467           0 :             Result = CFE_ES_APP_CLEANUP_ERR;`


CFE_ES_CountObjectCallback
 ```
   1495           0 : void CFE_ES_CountObjectCallback(uint32 ObjectId, void *arg)
    1496             : {
    1497             :     uint32                 *CountState;
    1498             :     uint32                 idtype;
    1499             : 
    1500           0 :     CountState = (uint32 *)arg;
    1501           0 :     idtype = OS_IdentifyObject(ObjectId);
    1502           0 :     if (idtype < OS_OBJECT_TYPE_USER)
    1503             :     {
    1504           0 :         ++CountState[idtype];
    1505             :     }
    1506           0 : }
```

**Requester Info**
Anh Van, NASA Goddard
","enhancement, unit-test",https://github.com/nasa/cFE/issues/469
Incomplete coverage test for cfe_es_task.c ,"**Is your feature request related to a problem? Please describe.**
Missing code coverage for the following:

CFE_ES_TaskInit
`     363           0 :        snprintf(EventBuffer, sizeof(EventBuffer), ""Mission %s"", GLOBAL_CONFIGDATA.Config);`

```
     385           3 :     if ( Status != CFE_SUCCESS )
     386             :     {
     387           0 :        CFE_ES_WriteToSysLog(""ES:Error sending version event:RC=0x%08X\n"", (unsigned int)Status);
     388           0 :        return(Status);
     389             :     }
```

```
     395           3 :     if ( Status != CFE_SUCCESS )
     396             :     {
     397           0 :        CFE_ES_WriteToSysLog(""ES:Error sending build info event:RC=0x%08X\n"", (unsigned int)Status);
     398           0 :        return(Status);
     399             :     }
```

CFE_ES_HousekeepingCmd

```
      696           0 :             CFE_ES_TaskData.HkPacket.Payload.PerfTriggerMask[PerfIdx] = 0;
     697             :         }
     698             :     }
```

```
    708             :         {
     709           0 :             CFE_ES_TaskData.HkPacket.Payload.PerfFilterMask[PerfIdx] = 0;
     710             :         }
```

**Requester Info**
Anh Van, NASA Goddard
","enhancement, unit-test",https://github.com/nasa/cFE/issues/468
Incomplete coverage test for cfe_es_start.c and cfe_es_syslog.c,"**Is your feature request related to a problem? Please describe.**
coverage test: 99.2%

missing coverage for the following:

cfe_es_start.c : CFE_ES_CreateObjects
```
     945           0 :             default:
     946           0 :                break;
```

cfe_es_syslog.c : CFE_ES_SysLogReadData

`     333           0 :             break; `

**Requester Info**
Anh Van, NASA Goddard
","enhancement, unit-test",https://github.com/nasa/cFE/issues/467
Incomplete coverage test for cfe_es_shell.c,"**Is your feature request related to a problem? Please describe.**

no coverage test for CFE_ES_ShellCountObjectCallback
```
    338           0 : static void CFE_ES_ShellCountObjectCallback(uint32 object_id, void *arg)
     339             : {
     340             :     uint32                 *CountState;
     341             :     uint32                 idtype;
     342             : 
     343           0 :     CountState = (uint32 *)arg;
     344           0 :     idtype = OS_IdentifyObject(object_id);
     345           0 :     if (idtype < OS_OBJECT_TYPE_USER)
     346             :     {
     347           0 :         ++CountState[idtype];
     348             :     }
     349           0 : }
```

**Requester Info**
Anh Van, NASA Goddard
","enhancement, invalid, unit-test",https://github.com/nasa/cFE/issues/466
Incomplete coverage test for cfe_es_api.c,"**Is your feature request related to a problem? Please describe.**
current coverage: 97.7 %
Missing coverage for the following:

CFE_ES_SetAppState

```
     197             :         /* Caller error - invalid state */
     198           0 :         return;
```

CFE_ES_ReloadApp

```
     314           0 :            CFE_ES_SysLogWrite_Unsync (""CFE_ES_ReloadApp: Cannot Reload Application %s, File %s does not exist.\n"",
     315           0 :                                   CFE_ES_Global.AppTable[AppID].StartParams.Name,
     316             :                                   AppFileName);
     317           0 :            ReturnCode = CFE_ES_FILE_IO_ERR;
```

CFE_ES_ExitApp

```
     471           0 :           CFE_ES_SysLogWrite_Unsync (""Application %s called CFE_ES_ExitApp\n"",
     472           0 :                                  CFE_ES_Global.AppTable[AppID].StartParams.Name);
     473           0 :           CFE_ES_SetAppState(AppID, CFE_ES_AppState_STOPPED);
     474             : 
     475             :           /*
     476             :           ** Unlock the ES Shared data before suspending the app 
     477             :           */
     478           0 :           CFE_ES_UnlockSharedData(__func__,__LINE__);
     479             : 
     480             :           /*
     481             :           ** Suspend the Application until ES kills it.
     482             :           ** It might be better to have a way of suspending the app in the OS
     483             :           */
     484             :           while(1)
     485             :           {
     486           0 :              OS_TaskDelay(500);
```

CFE_ES_DeleteChildTask

```
    1272           0 :        CFE_ES_WriteToSysLog(""CFE_ES_DeleteChildTask Error: Invalid Task ID: %u\n"",(unsigned int)OSTaskId );
    1273           0 :        ReturnCode = CFE_ES_ERR_TASKID;
```

CFE_ES_GetAppIDInternal

`    1758           0 :       *AppIdPtr = 0;`

**Requester Info**
Anh Van, NASA Goddard
","enhancement, unit-test",https://github.com/nasa/cFE/issues/465
"Fix #189, Unit test for cfe_evs_task.c","**Describe the contribution**
Add additional coverage test for cfe_evs_task.c

**Testing performed**
Steps taken to test the contribution:
1. make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
2. make install
3. make test
4. make lcov
5. Verify 100 percent coverage for cfe_evs_task.c

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
 - CFE 6.6

**Contributor Info**
Anh Van, NASA Goddard
",CCB:Approved,https://github.com/nasa/cFE/pull/464
Add global scope option to omit deprecated items,"**Describe the contribution**

Fix #355

Adds a ""global_build_options.cmake"" file akin to the existing arch_build/mission_build option files.  Include an example of this file that optionally does add_definitions() to omit the deprected elements for build testing.

**Testing performed**
Build with and without the OMIT_DEPRECATED flag on the prep command, and confirm that it is correctly translated to the `add_definition()` globally for all tools and FSW code.

**Expected behavior changes**
Affects build system only.  No change to runtime behavior.

**System(s) tested on:**
Ubuntu 18.04 LTS 64-bit

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/463
Add compiler option examples,"**Describe the contribution**

Fix #24 - Add extra compile options for mission scope and arch scope.

These are separated such that the same basic structure will also apply to cross compile environments that do not/cannot use the same flags on both (host and cross) builds.

For ""mission"" build the targets are never cross compiled, only built for the native host machine.  It should be safe to assume a compiler in the GCC family and the strict warnings should _always_ be applicable here.

For ""arch"" build the options are compiler vendor dependent.  The file as-supplied can only be used if all the target cross compilers are in the same family and support the same warning options.  However, this file can be modified without affecting the options used for the host side tools.

**Testing performed**
Build for SIMULATION=native and confirm full suite of warnings is used for both host-side tools and FSW code.
Also build for other platforms (MIPS, RTEMS) where the code is not (yet) fully warning-free.  Confirmed that the warnings can be modified at the arch_build without affecting the host-side tools which are still built with full warnings.

**Expected behavior changes**
No impact to runtime behavior

**System(s) tested on:**
Ubuntu 18.04 LTS 64-bit  (build host)

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/462
"Fix #315, ES Performance debug messages","**Describe the contribution**
   Fixes issue #315, ES Performance debug messages have incorrect parameter 

**Testing performed**
   1. Built with updated cfe_es_perf.c.
   2. Sent SetPerfFilterMaskCmd & SetPerfTriggerMaskCmd commands.
   3. Verified messages are now correct.
   4. Ran unit tests.

**Expected behavior changes**
   DEBUG messages are now correct.

**System(s) tested on:**
   Oracle VM VirtualBox
   OS: ubuntu-19.10
   Version: cFE 6.7.3.0; OSAL 5.0.3.0; PSP 1.4.1.0

**Contributor Info**
Dan Knutsen
GSFC/NASA",CCB:Approved,https://github.com/nasa/cFE/pull/461
"Fix #459, resolve doxygen obsolete warning","**Describe the contribution**
resolve doxygen obsolete warning

**Testing performed**
Steps taken to test the contribution:
1. make prep
2. make osalguide/usersguide/doc
3. Verify warning is gone

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
-  CFE 6.6

**Contributor Info**
Anh Van, NASA Goddard

",CCB:Approved,https://github.com/nasa/cFE/pull/460
doxygen obsolete warning,"**Is your feature request related to a problem? Please describe.**
obsolete warning when creating osalguide/usersguide/doc:

```
warning: Tag `DETAILS_AT_TOP' at line 35 of file `/media/sf_share/cfs_12_23_2019/cfs/build/doc/osal-common.doxyfile' has become obsolete.
         To avoid this warning please remove this line from your configuration file or upgrade it using ""doxygen -u""
warning: Tag `SHOW_DIRECTORIES' at line 75 of file `/media/sf_share/cfs_12_23_2019/cfs/build/doc/osal-common.doxyfile' has become obsolete.
         To avoid this warning please remove this line from your configuration file or upgrade it using ""doxygen -u""
warning: Tag `HTML_ALIGN_MEMBERS' at line 137 of file `/media/sf_share/cfs_12_23_2019/cfs/build/doc/osal-common.doxyfile' has become obsolete.
         To avoid this warning please remove this line from your configuration file or upgrade it using ""doxygen -u""
warning: Tag `XML_SCHEMA' at line 185 of file `/media/sf_share/cfs_12_23_2019/cfs/build/doc/osal-common.doxyfile' has become obsolete.
         To avoid this warning please remove this line from your configuration file or upgrade it using ""doxygen -u""
warning: Tag `XML_DTD' at line 186 of file `/media/sf_share/cfs_12_23_2019/cfs/build/doc/osal-common.doxyfile' has become obsolete.
         To avoid this warning please remove this line from your configuration file or upgrade it using ""doxygen -u""
```


**Requester Info**
Anh Van, NASA Goddard
",docs,https://github.com/nasa/cFE/issues/459
Use SRC_LOCAL_PATH as single source of truth,"This avoids the two path diverging and possibly causing problems in the future

**Describe the contribution**
The call to `file(TO_NATIVE_PATH ...)` is building its own path even though its contents are identical to `SRC_LOCAL_PATH`. This change avoids possible divergence of these values in the future.

**Testing performed**
Ran a local build.

**Expected behavior changes**
No change in behavior.
","CCB:Approved, docs",https://github.com/nasa/cFE/pull/458
"Fix #24 #355, Add compile flag abstractions","**Describe the contribution**
Fixes #24, Fixes #355 

Adds STRICT_NO_WARNINGS and OMIT_DEPRECATED
prep options for CI and as example build

**Testing performed**
Built with STRICT_NO_WARNINGS=true, false, and undefined
Built with OMIT_DEPRECATED=true, false, and undefined (note sample_app fails)

Confirmed flags get globally applied (not great scoping, but ensures flag coverage)

**Expected behavior changes**
Simplifies/enables CI based on abstracted flags, see https://github.com/nasa/cFS/issues/39

**System(s) tested on:**
 - cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: Master bundle with this change

**Contributor Info**
Jacob Hageman - NASA/GSFC",invalid,https://github.com/nasa/cFE/pull/457
CFE_ES_PerfLogAdd needs better mutual exclusion,"**Describe the bug**
The `CFE_ES_PerfLogAdd()` routine uses `OS_IntLock()` in an attempt to get exclusive access to a common global data structure to record performance metrics/state.  This is insufficient.

The `OS_IntLock` function is generally not implemented on SMP, and even if it is, it probably only affects the current core.  Either way, it will **not** provide exclusivity, because the other cores can still access the data even when interrupts are disabled.  

This function is also a no-op in the POSIX OSAL.

**To Reproduce**
Enable performance monitoring on a POSIX system and observe that occasionally samples occur in the log out of order or otherwise appear corrupted.  This is likely due to concurrent writes to the same entry related to insufficient locking.

**Expected behavior**
The function should use some form of primitive that actually does provide exclusivity between threads (such as a mutex/spinlock) and not an interrupt lock.

**Code snips**
https://github.com/nasa/cFE/blob/2b27dfc8f2a4e0627e6c4b646765269213584cda/fsw/cfe-core/src/es/cfe_es_perf.c#L439-L440

**System observed on:**
Ubuntu 18.04 LTS 64-bit

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/cFE/issues/456
"Fix #259, Update tone leap variable","**Describe the contribution**
Fixes #259

Update AtToneLeaps to AtToneLeapSeconds when
CFE_PLATFORM_TIME_CFG_BIGENDIAN is defined to match
the updates for !CFE_PLATFORM_TIME_CFG_BIGENDIAN.

**Testing performed**
TBD

**Expected behavior changes**
Now will build/execute with CFE_PLATFORM_TIME_CFG_BIGENDIAN defined

**System(s) tested on:**
 - cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: current master bundle

**Contributor Info**
Jacob Hageman - NASA/GSFC
",duplicate,https://github.com/nasa/cFE/pull/455
"Fix #412, Clean up table services comments/references","**Describe the contribution**
   Fixes #412

   Note that there were a couple cases where function prototypes were defined in the wrong header
   files.  This was also cleaned up as part of this issue.

**Testing performed**
   Testing consisted of building/running the software and re-running the unit tests.

1. Build steps:
    make prep
    make
    make install
2. Ran software:
   ./core-cpu1

**Expected behavior changes**
   None

**System(s) tested on:**
   Oracle VM VirtualBox
   OS: ubuntu-19.10
   Version: cFE 6.7.3.0; OSAL 5.0.3.0; PSP 1.4.1.0

**Additional context**
   None

**Contributor Info**
   Dan Knutsen
   GSFC/NASA",CCB:Approved,https://github.com/nasa/cFE/pull/454
"Fix #259, Update tone leap variable","**Describe the contribution**
   Fixes #259

**Testing performed**
1. Modified cpu1_platform_cfg.h such that I could reproduce the error:
   #undef CFE_PLATFORM_TIME_CFG_BIGENDIAN -->
   #define CFE_PLATFORM_TIME_CFG_BIGENDIAN
2. Corrected cfe_time_tone.c via replacing all instances of AtToneLeaps variable
    with AtToneLeapSeconds.
3. Recompiled software:
    make prep
    make
    make install
4. Ran software and verified that the issue was fixed:
    ./core-cpu1

**Expected behavior changes**
   The software will compile and run successfully.

**System(s) tested on:**
   Oracle VM VirtualBox
   OS: ubuntu-19.10
   Version: cFE 6.7.3.0; OSAL 5.0.3.0; PSP 1.4.1.0


**Additional context**
   None

**Contributor Info**
   Dan Knutsen
   GSFC/NASA
","bug, CCB:Approved",https://github.com/nasa/cFE/pull/453
"Fix #308, Improve SB create pipe error reporting","**Describe the contribution**
Improves error reporting for CFE_SB_CreatePipe()

**Testing performed**
Standard build process, ran SB unit tests.

**Expected behavior changes**
Improvement in error reporting when using a pipe name that is already in use, or when the queue limit has been reached.

**System(s) tested on:**
Debian 9

**Additional context**
Add any other context about the contribution here.

**Contributor Info**
Christopher.D.Knight@nasa.gov

**Community contributors**
N/A",CCB:Approved,https://github.com/nasa/cFE/pull/452
Fix issue #259 - cfe_time_tone.c,"Implements fix for: cfe time var name changed in .h but not in code #259

**Describe the contribution**
Fixes issue 259.

**Testing performed**
Steps taken to test the contribution:
1. Modified cpu1_platform_cfg.h such that I could reproduce the error:
      #undef CFE_PLATFORM_TIME_CFG_BIGENDIAN --> 
      #define CFE_PLATFORM_TIME_CFG_BIGENDIAN
2. After reproducing error, corrected cfe_time_tone.c via replacing all instances of AtToneLeaps variable  with AtToneLeapSeconds.
3. Recompiled software
    - make prep
    - make 
    - make install
4. Ran software to ensure that the issue was fixed.
    - ./core-cpu1


**Expected behavior changes**
The software will compile and run successfully if CFE_PLATFORM_TIME_CFG_BIGENDIAN is defined.

**System(s) tested on:**
 - Oracle VM VirtualBox
 - OS: ubuntu-19.10
 - Version: cFE 6.6.0a; OSAL 1.4.2a

**Additional context**
None

**Contributor Info**
Dan Knutsen
GSFC/NASA

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",invalid,https://github.com/nasa/cFE/pull/451
Avoid alignment warnings on some CPUs,"**Describe the contribution**
- Fix #437

Partially address #313 (overlapping issue)

On CPUs with strict alignment requirements, some CFE code that uses a char-type pointer (e.g. uint8*) to compute memory addresses triggers an alignment warning when it gets cast back to the actual data type.

In the mempool implementation, the pointer should be sufficiently aligned already, because the address computation already takes CPU alignment requirements into account when calculating the addresses/offsets.  

- For the CFE_SB pool buffers, using the `cpuaddr` type, which is integer in nature, avoids the warning.
- For the CFE_TBL internal table pointer, use a `void*` internally to store the buffer pointer, rather than a `uint8_t*`.  This changes the casting needs elsewhere.

**Testing performed**
Build CFE with ENABLE_UNIT_TESTS=TRUE
Confirm all unit tests passing
Perform sanity test on CFE (normal startup, send commands from console)
Build for MIPS64 and ensure that (some) alignment warnings are fixed

**Expected behavior changes**
No change to behavior.  Fixes build warnings only.

**System(s) tested on:**
Ubuntu 18.04 LTS  64-bit

**Additional context**
There are still some remaining alignment cast warnings regarding the message types, where a local message buffer is cast to a `CFE_SB_Msg_t*` which has a higher alignment requirement.  This is a little harder to fix as it requires changing the local buffer definition.

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/450
Consistent results from CFE_ES_SYSLOG_APPEND and CFE_ES_WriteToSysLog,"**Is your feature request related to a problem? Please describe.**
From #409, CFE_ES_WriteToSysLog:

>Upon additional review - the only ""extra"" thing that CFE_ES_WriteToSyslog does is a final call to OS_printf to duplicate the syslog message onto the console, which wouldn't be done when calling the functions individually.

>In particular, this means that any syslog messages generated in the CDS use case wouldn't appear on the console. This could be a valid concern/issue that might warrant a fix.

**Describe the solution you'd like**
Consistent behavior

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/449
Integration Candidate 20191230,"**Describe the contribution**
Fix #415, Fix #429

**Testing performed**
1. Checked out all IC 20191230 branches
1. Built and ran cFS unit tests and OSAL coverage (vxworks and shared)
   1. All passed (although osal_timer_UT occasionally still fails due to a test issue)
1. Make cmdUtils where cFS-GroundSystem expects it
   1. cd tools/cFS-GroundSystem/Subsystems/cmdUtil
   1. make
1. Started Ground system
   1. python3 GroundSystem.py
1. Enabled commands to 127.0.0.1
1. Confirmed telemetry packets received
1. Sent ES and TIME noop commands, confirmed noop message from cFS on Port 1
1. Sent ES power on reset and observed cFS exit

**Expected behavior changes**
See related pull requests

**System(s) tested on**
 - cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: ic-20191230 branches

**Additional context**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/448
"Fix #445, create osal api guide with doxygen","**Describe the contribution**
Create osal api guide

**Testing performed**
Steps taken to test the contribution:
1. make prep
2. make osalguide

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
- CFE 6.6

**Contributor Info**
Anh Van, NASA Goddard

","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/446
Create osal api guide with doxygen,"**Is your feature request related to a problem? Please describe.**
Auto-generate osal api guide with doxygen

**Requester Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/445
"issue #443, update toolchain-ppc-vxworks6.9","**Describe the contribution**
- Fix #443

update toolchain-ppc-vxworks6.9.cmake to include new bsp name
Reference https://github.com/nasa/osal/pull/311

**Contributor Info**
Anh Van, NASA Goddard","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/444
Update toolchain-ppc-vxworks6.9.cmake,"**Is your feature request related to a problem? Please describe.**
Update toolchain-ppc-vxworks6.9.cmake to use mcp750-vxworks name

**Requester Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/443
Recommended lgtm issues: Classes with too many fields,"**Is your feature request related to a problem? Please describe.**
lgtm issue classes with too many fields:

cfe_tbl_task.h
```
line 185 - 211
Struct struct <unnamed> has 24 fields; we suggest refactoring to 15 fields or fewer.

line 257 - 211
Struct struct <unnamed> has 16 fields; we suggest refactoring to 15 fields or fewer.

line 282:
Struct struct <unnamed> has 26 fields; we suggest refactoring to 15 fields or fewer - see 8 Values.
declaration of LastTblUpdated
group of 2 fields here
group of 2 fields here
group of 3 fields here
group of 3 fields here
group of 4 fields here
group of 5 fields here
group of 6 fields here
```

inc/cfe_sb_msg.h
```
line 543 - 578
Struct struct <unnamed> has 16 fields; we suggest refactoring to 15 fields or fewer.

line 613:
Struct struct <unnamed> has 16 fields; we suggest refactoring to 15 fields or fewer - see 2 Values.
group of 12 fields here
group of 4 fields here
```

inc/cfe_tbl_msg.h
```
line 705
Struct struct <unnamed> has 20 fields; we suggest refactoring to 15 fields or fewer - see 4 Values.
group of 2 fields here
group of 2 fields here
group of 8 fields here
group of 8 fields here

line 776 - 807
Struct struct <unnamed> has 17 fields; we suggest refactoring to 15 fields or fewer.
```

fs/cfe_fs_decompress.h
```
line 109 - 128
Struct struct <unnamed> has 16 fields; we suggest refactoring to 15 fields or fewer.
```

inc/cfe_es_msg.h
```
line 1487 - 1567
Struct struct <unnamed> has 38 fields; we suggest refactoring to 15 fields or fewer.
```


inc/cfe_es.h
```
line 207 - 250
Struct struct <unnamed> has 21 fields; we suggest refactoring to 15 fields or fewer.
```

inc/cfe_time_msg.h
```
line 993
Struct struct <unnamed> has 42 fields; we suggest refactoring to 15 fields or fewer - see 13 Values.
declaration of ClockStateFlags
declaration of DataStoreStatus
declaration of MaxLocalClock
declaration of VirtualMET
group of 10 fields here
group of 2 fields here
group of 2 fields here
group of 2 fields here
group of 2 fields here
group of 3 fields here
group of 5 fields here
group of 6 fields here
group of 6 fields here
```

sb/cfe_sb_priv.h
```
line 288 - 307
Struct struct <unnamed> has 19 fields; we suggest refactoring to 15 fields or fewer.
```

time/cfe_time_utils.h
```
line 170
Struct struct <unnamed> has 56 fields; we suggest refactoring to 15 fields or fewer - see 22 Values.
declaration of DataStoreStatus
declaration of Forced2Fly
declaration of Local1HzCmd
declaration of MaxDelta
declaration of MaxLocalClock
declaration of Spare
declaration of SynchCallback
declaration of ToneSendCmd
group of 15 fields here
group of 2 fields here
group of 2 fields here
group of 2 fields here
group of 2 fields here
group of 2 fields here
group of 2 fields here
group of 2 fields here
group of 2 fields here
group of 2 fields here
group of 2 fields here
group of 4 fields here
group of 4 fields here
group of 5 fields here
```
**Requester Info**
Anh Van, NASA Goddard",invalid,https://github.com/nasa/cFE/issues/442
Recommended lgtm issues,"**Is your feature request related to a problem? Please describe.**
Recommended issues from lgtm:


es/cfe_es_shell.c
```
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
--
52 | int32 CFE_ES_ShellOutputCommand(const char * CmdString, const char *Filename)
  | Function CFE_ES_ShellOutputCommand could be moved to file osapi-file.c since it has 7 dependencies to that file, but only 3 dependencies to its own file.
```


cfe_es_apps.c
```
line: 1022 - 1180
Switch has at least one case that is too long: 2 Values
CFE_ES_RunStatus_SYS_RELOAD (35 lines)
CFE_ES_RunStatus_SYS_RESTART (35 lines)
```

cfe_es_start.c
```
line: 752 - 947
1 (154 lines)
4 (32 lines)


*/
--
483 | void CFE_ES_InitializeFileSystems(uint32 start_type)
  | Function CFE_ES_InitializeFileSystems could be moved to file osapi-filesys.c since it has 6 dependencies to that file, but 0 dependencies to its own file.
```

cfe_es_task.c
```
line 419 - 627
Switch has at least one case that is too long: ... + ... (188 lines)

line: 1194
int32 CFE_ES_QueryAllCmd(const CFE_ES_QueryAll_t *data)
--
  | Function CFE_ES_QueryAllCmd could be moved to file osapi-file.c since it has 5 dependencies to that file, but only 1 dependency to its own file.

line 1197

int32 CFE_ES_QueryAllTasksCmd(const CFE_ES_QueryAllTasks_t *data)
--
  | Function CFE_ES_QueryAllTasksCmd could be moved to file osapi-file.c since it has 5 dependencies to that file, but only 1 dependency to its own file.
```

cfe_sb_task.c
```
line 350 - 453
Switch has at least one case that is too long: ... + ... (88 lines)
```

cfe_time_task.c
```
line 467 - 653:
Switch has at least one case that is too long: ... + ... (132 lines)
```

root/cfe/cmake/target/src/target_config.c
```

#define LOAD_PSP_MODULE(name)   extern CFE_StaticModuleApi_t CFE_PSP_##name##_API;
--
104 | #include ""psp_module_list.inc""
  | The #include pre-processor directive should only be used to include header files.


#include ""psp_module_list.inc""
--
  | The #include pre-processor directive should only be used to include header files.
119 | { .Name = NULL }


#include ""cfs_static_symbol_list.inc""
--
  | The #include pre-processor directive should only be used to include header files.
158 | #undef  STATIC_CFS_SYMBOL


#include ""cfs_static_symbol_list.inc""
--
  | The #include pre-processor directive should only be used to include header files.
163 | { NULL, NULL } /* End of list marker */
```

es/cfe_es_api.c
```
/*
--
  | File is too closely tied to cfe_es_start.c (99 dependencies one way and 35 the other).
2 | **  GSC-18128-1, ""Core Flight Executive Version 6.6""
```

evs/cfe_evs_task.
```
/*
--
  | File is too closely tied to cfe_evs_utils.c (87 dependencies one way and 21 the other).
2 | **  GSC-18128-1, ""Core Flight Executive Version 6.6""
```

tbl/cfe_tbl_task_cmds.c
```
CritRegRecPtr = &CFE_TBL_TaskData.CritReg[i];
--
1377 | i=CFE_PLATFORM_TBL_MAX_CRITICAL_TABLES;
  | Loop counters should not be modified in the body of the loop.
```

sb/cfe_sb_api.c
```
/*
--
774 | * FIXME: If a hash or other conversion is used between MsgId and MsgKey,
775 | * then it is possible that this existing route is for a different MsgId.
776 | *
777 | * The MsgId should be checked against the ""MsgId"" in the route here.
778 | *
779 | * However it is not possible to have a mismatch in the default case where
780 | * MsgKey == MsgId
781 | */
  | FIXME comment: If a hash or other conversion is used between MsgId and MsgKey, [...]

*/
--
499 | int32 CFE_SB_GetPipeOpts(CFE_SB_PipeId_t PipeId, uint8 *OptsPtr)
  | Function CFE_SB_GetPipeOpts could be moved to file cfe_sb_priv.c since it has 5 dependencies to that file, but only 1 dependency to its own file.

```


cfe_fs_decompress.c
```
line 346 - 352, 503, 699
This comment appears to contain commented-out code
```

cfe_sb_msg_id_util.c
```
line 157 - 159
This comment appears to contain commented-out code
```

inc/cfe_tbl_filedef.h
```
line 70 -88
This comment appears to contain commented-out code
```


**Requester Info**
Anh Van, NASA Goddard
",duplicate,https://github.com/nasa/cFE/issues/441
Improve API consistency for functions accepting a software bus message,"**Is your feature request related to a problem? Please describe.**
The data types accepted by the SB API are not entirely consistent.  Most API functions that operate on software bus message buffers accept a `CFE_SB_MsgPtr_t`.

There are some exceptions, most notably the `CFE_SB_InitMsg()` function accepts a `void*`.

**Describe the solution you'd like**
All SB API functions that operate on message buffers should use the `CFE_SB_MsgPtr_t` type (or `CFE_SB_Msg_t *`)

**Additional context**
Making the interface type-correct helps the compiler's type checking do its intended job, helping to catch/avoid the possibility of passing a data buffer which is not actually an SB message buffer.  Using `void*` permits anything to be passed in, effectively disabling all checking.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/440
Set OSAL_SYSTEM_BSPTYPE for native builds,"**Describe the contribution**

Fix #438

This explicitly specifies the BSP to use when using `SIMULATION=native` flags to the build.  All other example toolchain files already included this setting.

**Testing performed**
Rebuild code with and without `SIMULATION=native` flag.  Confirmed no build issues/changes.

**Expected behavior changes**
No impact - build script change only.

**System(s) tested on:**
Ubuntu 18.04 LTS 64-bit

**Additional context**
This makes it compatible after a related OSAL build script cleanup is also merged (see nasa/osal#312, nasa/osal#261).

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/439
CFE cmake toolchain script(s) should set OSAL_SYSTEM_BSPTYPE,"**Is your feature request related to a problem? Please describe.**
The OSAL scripts contain some convoluted logic to deal with the fact that the CFE PSP And OSAL BSP are overlapping in function.  In particular the OSAL script checks `CFE_SYSTEM_PSPNAME` as a fallback if OSAL_SYSTEM_BSPTYPE is unset, in order to decide which BSP to use for unit tests.

It is desired to clean this up and simplify this logic.

**Describe the solution you'd like**
All example toolchains should set OSAL_SYSTEM_BSPTYPE so that OSAL builds a specific BSP for the platform, to be used for unit testing as well as (eventually) the PSP startup as well.

**Additional context**
Having this variable set simplifies the OSAL build considerably and makes it better isolated from the CFE build.  A proposed change to OSAL (as part of issue nasa/osal#312) will make the `OSAL_SYSTEM_BSPTYPE` a required option, failing the build if it is unset

This change to the CFE toolchains should be backward-compatible.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/438
Alignment warnings when casting char* pointers,"**Describe the bug**
When compiling on architectures with strict alignment requirements, casts between `char*` (as used in some pointer arithmetic to calculate addresses) to other types triggers a warning about alignment.

**To Reproduce**
Build for an architecture with strict alignment requirements (SPARC, MIPS, etc).
Example compiler warning:
```
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/sb/cfe_sb_buf.c:119:30: warning: cast increases required alignment of target type [-Wcast-align]
    CFE_SB_BufferD_t    *bd = (CFE_SB_BufferD_t *)(((uint8 *)Address) - sizeof(CFE_SB_BufferD_t));
```

**Expected behavior**
Should build cleanly with no warnings

**System observed on:**
- Ubuntu 18.04 LTS build host
- MIPS cross compiler (mips-poky-linux-gcc version 8.2.0)

**Additional context**
Many of these are actually safe because CFE ensures that the `sizeof(CFE_SB_BufferD_t)` as well as the base/pool addresses are aligned for the largest data types.  However, because the pointer arithmetic is done as a `unsigned char*` the compiler sees the cast from an `unsigned char*` to a larger type as an issue.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/437
Update UT entry point to correspond with OSAL/UT Assert change,"**Describe the contribution**
- Fix #435

Use `UtTest_Setup` instead of `OS_Application_Startup` as the entry point function for test applications.

This needs to be merged in coordination with a related change in OSAL/UT Assert.  This also updates the UT application final link to use ""ut_assert"" rather than ""ut_bsp"", as the separate bsp for unit test is also getting phased out.

**Testing performed**
Build CFE for all supported platforms (native Linux, RTEMS, VxWorks) in conjunction with related OSAL pull request and confirm unit test build and run successfully

**Expected behavior changes**
No change to behavior

**System(s) tested on:**
Ubuntu 18.04 LTS 64 bit

**Additional context**
Needs to be merged in coordination with nasa/osal#294

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/436
"Use ""UtTest_Setup"" as name of entry point for unit tests","**Is your feature request related to a problem? Please describe.**
In nasa/osal#294,  The UT assert library is being modified to use a different entry point function name for unit test code, not `OS_Application_Startup()` as is used for a normal application. 

**Describe the solution you'd like**
The CFE unit tests need to use `UtTest_Setup` instead.

**Describe alternatives you've considered**
Any name could work for test setup, but the issue is that it has to be different than that of a normal application.  This is so the normal entry point can be provided by UT assert here, allowing better layering.

**Additional context**
Changing the name of the Test entry point makes more sense because these only use the OSAL BSP but run with the stub library for OSAL itself.  It is therefore not really accurate to name the entry point as `OS_Application_Startup` because this is not an OSAL application at all, it is a unit test.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/435
"Fix #433, Release Prep","**Describe the contribution**
Fix #433
 - Updated README
 - removed custom license document
 - added standard Apache 2.0
 - Updated copyright release version cFE 6.6 -> 6.7

**Testing performed**
1. Standard build, unit test and execute

**Expected behavior changes**
 - No impact to behavior

**System(s) tested on:**
 - Hardware: cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: cFE 6.7.0 related versions and OSAL 5.0.0

**Contributor Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/pull/434
Release Prep,"**Is your feature request related to a problem? Please describe.**
Updates for release:
- Updated README
- removed custom license document
- added standard Apache 2.0
- Updated copyright release version cFE 6.6 -> 6.7

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/433
"issue #425, resolve cpp check","**Describe the contribution**
- Fix #425

resolve cpp check

**Testing performed**
Steps taken to test the contribution:
1. cppcheck --force --inline-suppr --std=c99 --language=c --error-exitcode=1 --enable=warning,performance,portability,style --suppress=variableScope --inconclusive fsw/cfe-core/src 2>cppcheck_flight_cfe.txt


**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
 - CFE 6.6

**Additional context**
Add any other context about the contribution here.

**Contributor Info**
Anh Van, NASA Goddard
","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/432
lgtm issue,"**Describe the bug**

cfe_es_perf.c

```
if ((CmdPtr->TriggerMode >= CFE_ES_PERF_TRIGGER_START) && (CmdPtr->TriggerMode < CFE_ES_PERF_MAX_MODES))
--
  | Pointless comparison of unsigned value to zero.

```

cfe_fs_decompress.c

```
line: 686
if ( index >= 0  &&  index < State->hufts )
--
  | Pointless comparison of unsigned value to zero.


line 733
if ( index >= 0  &&  index < State->hufts )
--
  | Pointless comparison of unsigned value to zero.

```

cfe_es_perf.c

/* enable interrupts */
```
--
491 | OS_IntUnlock(IntFlags);
  | This expression has no effect (because OS_IntUnlock has no external side effects).
492 | }
493 | }

```

cfe_sb_task.c


```
if(CFE_PLATFORM_EVS_MAX_EVENT_FILTERS < CfgFileEventsToFilter){
--
  | Comparison is always false because 4 >= CfgFileEventsToFilter.

```

cfe_tbl_internal.c

```
line 196:
(Status >= CFE_PLATFORM_TBL_MAX_SNGL_TABLE_SIZE));
--
  | Comparison is always true because Status >= 16384.
197 | }
```

cfe_time_api.c

```
line 679:
if (ConvertFactor < 0)
--
  | Comparison is always false because ConvertFactor >= 789004800.
```


**To Reproduce**
Steps to reproduce the behavior:
1. Build against lgtm


**Reporter Info**
Anh Van, NASA Goddard",invalid,https://github.com/nasa/cFE/issues/431
"Fix #429, Const string initialization","**Describe the contribution**
Fixes #429

**Testing performed**
Steps taken to test the contribution:
1. make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
1. make
1. make install
1. make test

**Expected behavior changes**
No change

**System(s) tested on:**
 - cFS dev server
 - OS: Ubuntu 16.04
 - Versions: master bundle with this commit

**Contributor Info**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/430
Fix missing const warning with -Wdiscarded-qualifiers enabled,"**Is your feature request related to a problem? Please describe.**
Initialization discards const qualifier... warning in sb_UT.c with the following flags enabled:
`-Wall –Wstrict-prototypes –std=c99 –D_XOPEN_SOURCE=600 –pendantic –Wcast-align –Wwrite-strings`

**Describe the solution you'd like**
Add const (the internal variables are not modified).

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/429
"issue #427, adding travis.yml for cppcheck on flight","**Describe the contribution**
- Fix #427

adding travis.yml for cppcheck on cfe-core/src

**Contributor Info**
Anh Van, NASA Goddard","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/428
Adding cppcheck for cfe-core/src,"**Is your feature request related to a problem? Please describe.**
adding travis.yml for cppcheck on cfe-core/src 

**Requester Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/427
"issue #425, resolve cpp check","**Describe the contribution**
Fix cppcheck warning

**Testing performed**
Steps taken to test the contribution:
1. make prep
2. make
3. make install
4. Verify still run

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
 - CFE 6.6


**Contributor Info**
Anh Van, NASA Goddard

",invalid,https://github.com/nasa/cFE/pull/426
cppcheck for cfe-core/src,"**Is your feature request related to a problem? Please describe.**
Resolve cpp check warning. 

```
[fsw/cfe-core/src/es/cfe_es_api.c:724] -> [fsw/cfe-core/src/es/cfe_es_api.c:731]: (style) Variable 'Result' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_api.c:1473] -> [fsw/cfe-core/src/es/cfe_es_api.c:1481]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_api.c:1553] -> [fsw/cfe-core/src/es/cfe_es_api.c:1555]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_api.c:1568] -> [fsw/cfe-core/src/es/cfe_es_api.c:1570]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_apps.h:177] -> [fsw/cfe-core/src/es/cfe_es_apps.c:671]: (style, inconclusive) Function 'CFE_ES_LoadLibrary' argument 2 names different: declaration 'Path' definition 'FileName'.
[fsw/cfe-core/src/es/cfe_es_apps.h:179] -> [fsw/cfe-core/src/es/cfe_es_apps.c:673]: (style, inconclusive) Function 'CFE_ES_LoadLibrary' argument 4 names different: declaration 'Name' definition 'LibName'.
[fsw/cfe-core/src/es/cfe_es_cds.c:152] -> [fsw/cfe-core/src/es/cfe_es_cds.c:160]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_cds.c:515] -> [fsw/cfe-core/src/es/cfe_es_cds.c:518]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_cds.c:699] -> [fsw/cfe-core/src/es/cfe_es_cds.c:705]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_start.h:96] -> [fsw/cfe-core/src/es/cfe_es_perf.c:62]: (style, inconclusive) Function 'CFE_ES_SetupPerfVariables' argument 1 names different: declaration 'StartType' definition 'ResetType'.
[fsw/cfe-core/src/es/cfe_es_shell.c:285] -> [fsw/cfe-core/src/es/cfe_es_shell.c:289]: (style) Variable 'Result' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_shell.c:359] -> [fsw/cfe-core/src/es/cfe_es_shell.c:379]: (style) Variable 'Result' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/es/cfe_es_start.h:95] -> [fsw/cfe-core/src/es/cfe_es_start.c:483]: (style, inconclusive) Function 'CFE_ES_InitializeFileSystems' argument 1 names different: declaration 'StartType' definition 'start_type'.
[fsw/cfe-core/src/es/cfe_es_start.c:51] -> [fsw/cfe-core/src/es/cfe_es_start.c:961]: (style, inconclusive) Function 'CFE_ES_MainTaskSyncDelay' argument 1 names different: declaration 'AppMinState' definition 'AppStateId'.
[fsw/cfe-core/src/es/cfe_es_log.h:254] -> [fsw/cfe-core/src/es/cfe_es_syslog.c:352]: (style, inconclusive) Function 'CFE_ES_SysLogSetMode' argument 1 names different: declaration 'LogMode' definition 'Mode'.
[fsw/cfe-core/src/es/cfe_es_log.h:277] -> [fsw/cfe-core/src/es/cfe_es_syslog.c:376]: (style, inconclusive) Function 'CFE_ES_SysLog_vsnprintf' argument 4 names different: declaration 'ArgPtr' definition 'ap'.
[fsw/cfe-core/src/fs/cfe_fs_api.c:169] -> [fsw/cfe-core/src/fs/cfe_fs_api.c:176]: (style) Variable 'Result' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/fs/cfe_fs_decompress.c:206]: (style) Variable 'stamp' is assigned a value that is never used.
[fsw/cfe-core/src/fs/cfe_fs_priv.c:66] -> [fsw/cfe-core/src/fs/cfe_fs_priv.c:68]: (style) Variable 'Stat' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/sb/cfe_sb_priv.h:354] -> [fsw/cfe-core/src/sb/cfe_sb_api.c:2107]: (style, inconclusive) Function 'CFE_SB_ReadQueue' argument 1 names different: declaration 'pd' definition 'PipeDscPtr'.
[fsw/cfe-core/src/sb/cfe_sb_priv.h:355] -> [fsw/cfe-core/src/sb/cfe_sb_api.c:2109]: (style, inconclusive) Function 'CFE_SB_ReadQueue' argument 3 names different: declaration 'time_out' definition 'Time_Out'.
[fsw/cfe-core/src/sb/cfe_sb_priv.h:355] -> [fsw/cfe-core/src/sb/cfe_sb_api.c:2110]: (style, inconclusive) Function 'CFE_SB_ReadQueue' argument 4 names different: declaration 'message' definition 'Message'.
[fsw/cfe-core/src/sb/cfe_sb_priv.h:369] -> [fsw/cfe-core/src/sb/cfe_sb_buf.c:60]: (style, inconclusive) Function 'CFE_SB_GetBufferFromPool' argument 2 names different: declaration 'size' definition 'Size'.
[fsw/cfe-core/src/sb/cfe_sb_init.c:88] -> [fsw/cfe-core/src/sb/cfe_sb_init.c:93]: (style) Variable 'Stat' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/sb/cfe_sb_init.c:220]: (style) Unused variable: KeyVal
[fsw/cfe-core/src/sb/cfe_sb_priv.h:405] -> [fsw/cfe-core/src/sb/cfe_sb_priv.c:793]: (style, inconclusive) Function 'CFE_SB_AddDest' argument 2 names different: declaration 'Dest' definition 'NewNode'.
[fsw/cfe-core/src/sb/cfe_sb_priv.h:406] -> [fsw/cfe-core/src/sb/cfe_sb_priv.c:841]: (style, inconclusive) Function 'CFE_SB_RemoveDest' argument 2 names different: declaration 'Dest' definition 'NodeToRemove'.
[fsw/cfe-core/src/sb/cfe_sb_priv.c:708]: (style) Variable 'Val' is assigned a value that is never used.
[fsw/cfe-core/src/sb/cfe_sb_task.c:140] -> [fsw/cfe-core/src/sb/cfe_sb_task.c:142]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/sb/cfe_sb_util.c:112]: (style) Unused variable: size
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:65] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:74]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:519] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:527]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:1051] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:1058]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:1206] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:1213]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:1419] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:1425]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:1524] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:1531]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:1568] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:1576]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_api.c:1645] -> [fsw/cfe-core/src/tbl/cfe_tbl_api.c:1651]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_internal.c:380] -> [fsw/cfe-core/src/tbl/cfe_tbl_internal.c:383]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_internal.c:540] -> [fsw/cfe-core/src/tbl/cfe_tbl_internal.c:545]: (style) Variable 'Status' is reassigned a value before the old one has been used.
[fsw/cfe-core/src/tbl/cfe_tbl_internal.c:1463] -> [fsw/cfe-core/src/tbl/cfe_tbl_internal.c:1466]: (style) Variable 'Status' is reassigned a value before the old one has been used.
```

**Requester Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/425
Restart app delete's app prior to missing file check (requirement failure),"**Describe the bug**
Requirement cES1007.2 - If the original cFE Application file is not found then the cFE shall reject the Command, increment the invalid Command counter, and generate an event message.
Rationale: Can't restart the Application if the original file has been removed. In this case, the Application will continue without a restart.

If you send a restart now with the file remove, the app exits prior to the restart failing.

**To Reproduce**
Steps to reproduce the behavior:
1. Normal startup (with sample_app)
1. Remove sample_app.so
1. Send ES Restart app for ""SAMPLE_APP""
1. Observe error:
```
1980-012-14:05:46.50026 CFE_ES_RestartApp: Restart Application SAMPLE_APP Initiated
1980-012-14:05:47.00007 CFE_ES_ExitApp: Called with invalid status (1).
1980-012-14:05:47.00008 Application SAMPLE_APP called CFE_ES_ExitApp
EVS Port1 42/1/CFE_ES 14: Exit Application SAMPLE_APP on Error Completed.
```

**Expected behavior**
Behavior matches description, likely due an update to move behavior in rationale to requirement.  Should just check for file existing prior to delete of app.

**Code snips**
https://github.com/nasa/cFE/blob/3e60d950370423968744c198c4f10cd2d2252750/fsw/cfe-core/src/es/cfe_es_api.c#L250-L252

https://github.com/nasa/cFE/blob/3e60d950370423968744c198c4f10cd2d2252750/fsw/cfe-core/src/es/cfe_es_apps.c#L1079-L1095

**System observed on:**
 - cFS Dev server
 - OS: Ubuntu 16.04
 - Versions: current dev cFE 6.7.3

**Additional context**
None.

**Reporter Info**
Jacob Hageman - NASA/GSFC",duplicate,https://github.com/nasa/cFE/issues/424
"Fix #422, isTar Implementation","**Describe the contribution**
IsTar implementation. 

**Testing performed**
Steps taken to test the contribution:
1. Modify sample app to call isTar
2. make
3. make install
4. Run and verify result.

**System(s) tested on:**
 - Hardware
 - OS: Ubuntu 18.04
 - CFE 6.6

**Contributor Info**
Anh Van, NASA Goddard
",invalid,https://github.com/nasa/cFE/pull/423
IsTar Implementation,"**Is your feature request related to a problem? Please describe.**
Implement IsTar API

**Requester Info**
Anh Van, NASA Goddard
",wontfix,https://github.com/nasa/cFE/issues/422
fix for #420,"**Describe the contribution**
A clear and concise description of what the contribution is [e.g. Fixes issue #X]

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
2. Execution steps '....'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on:**
 - Hardware
 - OS: [e.g. Linux 4.4]
 - Versions [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps]

**Additional context**
Add any other context about the contribution here.

**Contributor Info**
Full name and company/organization of all contributors (required for acceptance)

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",duplicate,https://github.com/nasa/cFE/pull/421
CFE_SB_DeletePipeFull event uses AppId instead of TaskId,"**Describe the bug**
Near the end of CFE_SB_DeletePipeFull, it generates an event on successful deletion of the pipe. As part of the message, it's supposed to report the ""owner"" but it calls CFE_SB_GetAppTskName(Owner,FullName) where Owner is the AppId, not a (valid) TaskId. This causes CFE_SB_GetTaskInfo() to generate a syslog error and return an error code.

**To Reproduce**
Delete a pipe.

**Expected behavior**
Should produce a proper event. Unsure if it should report the Task name or the App name. Also should see if unit test should have caught this bug.

**Code snips**
cfe_sb_api.c#393  - CFE_EVS_SendEventWithAppID(CFE_SB_PIPE_DELETED_EID,CFE_EVS_EventType_DEBUG,CFE_SB.AppId,""Pipe Deleted:id %d,owner %s"",(int)PipeId, CFE_SB_GetAppTskName(Owner,FullName));

**System observed on:**
Debian VM

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Christopher.D.Knight@nasa.gov
",duplicate,https://github.com/nasa/cFE/issues/420
"Fix #101, Always increment sequence counter","**Describe the contribution**
- Fix #101

Note that this means route entries will never be removed and unsubscribe messages will never be sent.

**Testing performed**
Built and ran the SB unit tests. All passed, with changes included in this pull req.

**Expected behavior changes**
Sequence ID's of messages should increment even when there's (currently) no subscribers to that message ID.

**System(s) tested on:**
Debian VM

**Contributor Info**
Christopher.D.Knight@nasa.gov","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/419
many unit tests report event count errors as hex,"**Describe the bug**
Unit tests check the number of events sent during the test, many of these in sb_UT.c are reported as hex...Such as in Test_SB_Cmds_SendPrevSubs (line 2704.)

**To Reproduce**
Uncovered when I was changing GetPipeName to produce events (as part of making it a public API) and the unit test event counts had to be updated. A simple test is to change the ""ExpRtn"" for a test.

**Expected behavior**
Event counts should reported in decimal.

**Code snips**
See above.

**System observed on:**
Linux VM

**Additional context**
N/A

**Reporter Info**
Christopher.D.Knight@nasa.gov","enhancement, unit-test",https://github.com/nasa/cFE/issues/418
Separate the CFE stubs from UT test cases,"**Describe the contribution**
Fix issue #415

Build the CFE UT stub library separately from the test cases.
This moves the stub files into a separate ut-stubs directory,
and the library is now called ""ut_cfe_core_stubs""

Note: Minor cleanup also done as part of moving.  Two stub
files were in the source tree but not being built or used
by any framework test config.  These were:
  ut_arinc653_stubs.c
  ut_configdata_stubs.c

These are now removed.  Also cleaned up some old macros/ifdefs
that were never enabled or used in the current tests.

**Testing performed**
Build CFE using default configuration with ENABLE_UNIT_TEST=TRUE.  Confirm CFE core executes normally.  Confirm all CFE unit tests build and run as normal.

**Expected behavior changes**
No impact to behavior.  CFE FSW code is unchanged, this only affects UT build/link procedure.

**System(s) tested on:**
Ubuntu 18.04 LTS 64-bit

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/417
Investigate various VerifyCmdLength implementations and possible common utility,"**Is your feature request related to a problem? Please describe.**
CFE_*_VerifyCmdLength is defined for each service except TBL, and TBL does it slightly differently within CFE_TB_TaskPipe.

**Describe the solution you'd like**
Suggest a common implementation.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/416
Build system needs to better separate the UT stub function from the UT test cases,"**Describe the bug**
Currently the ""unit-test"" subdirectory generates libraries that provide stubs for all public API calls defined in the CFE core apps, as well as test cases and executables for unit testing the CFE itself.

Having these combined like this causes a few problems:
- the two products have different scopes. The UT stubs apply globally across the entire mission and can/should be used for all UT (platform-independent), but the test cases do need to be tuned to the platform, so a separate set of test cases needs to be built per-platform.
- As a result, the UT stubs themselves are also built per-platform.  This is wasteful but more importantly this makes linking to the CFE stubs from application UT code difficult.
- It is also undesirable just from a general code organization standpoint.  The directory structure would be cleaner if these were in separate subdirectories.

**To Reproduce**
Build code with ENABLE_UNIT_TESTS=TRUE and observe that the CFE ""stub"" library is named ""libut_cfe_core_default_cpu1_stubs.a"" (i.e. build specifically for the default/cpu1 platform config) and it resides in the same directory as the UT executables/test cases.

**Expected behavior**
The stub library should be named only ""libut_cfe_core_stubs.a"" and it should be in a separate subdirectory from the unit test cases themselves.

**System observed on:**
Ubuntu 18.04 LTS 64 bit

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/415
Suggested upper limit value creates infinite loop,"When the user sets `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID`, the documentation specifies a range of 1 to 0xFFFF.  This value is later used in a `#define` in cfe_sb_priv.h as follows:

     #define CFE_SB_MAX_NUMBER_OF_MSG_KEYS   (1+CFE_PLATFORM_SB_HIGHEST_VALID_MSGID)

This value is then used as the upper limit of a for loop [here](https://github.com/nasa/cFE/blob/5d7d766941369b6e92a0328217e43d5fd02a8cf1/fsw/cfe-core/src/sb/cfe_sb_init.c#L224).
   
The problem is that if the user sets the upper limit of 0xFFFF as specified, the `CFE_SB_MAX_NUMBER_OF_MSG_KEYS` becomes `65536`.  This value is used as the upper range of the for loop linked above.  Since the iterator used in that loop is a unsigned 16 bit integer, it can never reach `65536` and creates an infinite loop.

Suggested fix would be to:   
1.  Stop using `#define`s which add to other `#define`s
2.  Never use `#define`s as iterator range variables
3.  Check types of all iterators
4.  Change the documentation of `CFE_PLATFORM_SB_HIGHEST_VALID_MSGID` to say max value of `0xFFFE`
","enhancement, good first issue",https://github.com/nasa/cFE/issues/414
Integration Candidate 20191115,"**Describe the contribution**
Fixes #379, Fixes #380, Fixes #383, Fixes #384,
Fixes #385, Fixes #392

**Testing performed**
Steps taken to test the contribution:
1. Checked out bundle with ic-20191115 branches 
1. make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
1. make
1. make install
1. make test
Built without warnings, all tests passed except osal_timer_UT (nominal result on linux)
executed cfe, successful startup with no warnings

Confirmed passed CI (with cppcheck enforced!)

**Expected behavior changes**
No functional changes.
- doxygen/cppcheck warning/error cleanup
- lcov update
- removal of old test results

**System(s) tested on:**
 - cFS dev server
 - OS: Ubuntu 16.04
 - Versions: bundle ic-20191115 branch

**Additional context**
None

**Contributor Info**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/413
Clean up table services comments,"**Is your feature request related to a problem? Please describe.**
Inconsistent comments found on line 1368 in cfe_tbl_internal.c '.  



**Describe the solution you'd like**
'cfe_tbl_internal.h' should be replaced with 'cfe_private.h'

**Describe alternatives you've considered**


**Additional context**
General scrub recommended.

**Requester Info**
Dan Knutsen 
NASA GSFC
","enhancement, good first issue, docs",https://github.com/nasa/cFE/issues/412
Exception and Reset Log possible race conditions,"**Describe the bug**
CFE_ES_ClearERLogCmd and CFE_ES_WriteToERLog both modify shared CFE_ES_ResetDataPtr values.  CFE_ES_ProcessCoreException and CFE_ES_ResetCFE both use CFE_ES_WriteToERLog (both are API's, so could be out of ES context).

**To Reproduce**
Looks to me like if CFE_ES_ClearERLogCmd gets interrupted by the processing of an app core exception, the log could get corrupted.

**Expected behavior**
No race.

**Code snips**
See functions above.

**Versions**
 - latest cFS bundle dev branch

**Additional context**
Not observed, via code review.

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/cFE/issues/411
Initialize system log mode implementation doesn't match requirement cES1522,"**Is your feature request related to a problem? Please describe.**
Requirement cES1522 ""Upon a Processor Reset, the cFE shall set the System Log Mode to discard.""
Implementation:
https://github.com/nasa/cFE/blob/5d7d766941369b6e92a0328217e43d5fd02a8cf1/fsw/cfe-core/src/es/cfe_es_task.c#L236-L239

The build verification test just happens to pass because the sample configuration defaults the mode to discard.

**Describe the solution you'd like**
Update requirement or implementation.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/cFE/issues/410
Clarify CFE_ES_SYSLOG_APPEND use vs CFE_ES_WriteToSysLog,"**Is your feature request related to a problem? Please describe.**
CFE_ES_SYSLOG_APPEND is used is just a few places (cds, esmempool), everywhere else is CFE_ES_WriteToSysLog.  

**Describe the solution you'd like**
Consistency is preferred for maintenance and usability,  If there isn't sufficient justification for a separate macro, remove it and use CFE_ES_WriteToSysLog. 

**Describe alternatives you've considered**
If there is clear justification, consider adding to the macro documentation/comments

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

*edit* - typo",question,https://github.com/nasa/cFE/issues/409
Remove device driver references from code,"**Is your feature request related to a problem? Please describe.**
#377 is to remove device driver requirements, there are also references in the software.

**Describe the solution you'd like**
Remove references to device drivers, ""CFE_DRV"", etc from software, configuration files, documentation, etc.

For example:
https://github.com/nasa/cFE/blob/5d7d766941369b6e92a0328217e43d5fd02a8cf1/fsw/cfe-core/src/es/cfe_es_apps.c#L338-L342

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/408
Table decompression,"**Is your feature request related to a problem? Please describe.**
Compressed tables could save space in NV-RAMs.

**Describe the solution you'd like**
The decompression feature (implemented already for apps) can be extended to tables.

**Describe alternatives you've considered**
None.

**Additional context**
N/A

**Requester Info**
Onur TURHAN
",wontfix,https://github.com/nasa/cFE/issues/407
first draft of CONTRIBUTING.md,"**Describe the contribution**
the contribution is a draft of ""CONTRIBUTING.md""

**Testing performed**
Opened md in browser to confirm proper formatting.

**Expected behavior changes**
Folks will start following the guidance.

**System(s) tested on:**
Windows 10 laptop.

**Contributor Info**
Chris Knight, NASA Ames Research Center.",duplicate,https://github.com/nasa/cFE/pull/406
Add CONTRIBUTING.md,"Is your feature request related to a problem? Please describe.
github repositories are suggested to have a CONTRIBUTING.md document which describes best practices for developers wishing to contribute to the main release.

Describe the solution you'd like
Develop a CONTRIBUTING.md document with simple stuff like ""follow the coding style guidelines"", run unit tests prior to a pull request, etc.

Describe alternatives you've considered
Likely will need to incorporate or reference existing documentation. Could also use the wiki capabilities of dropbox.

Additional context
Add any other context about the feature request here.

Requester Info
Chris Knight, NASA Ames Research Center.","enhancement, docs",https://github.com/nasa/cFE/issues/405
"Fix #210, Add SB API to get pipe by name","**Describe the contribution**
Fixes issue #210 

**Testing performed**
make mission-all; run cpu1/cfe_core_default_cpu1/unit-test/cfe_core_default_cpu1_sb_UT

**Expected behavior changes**
Adds a new function, CFE_SB_GetPipeIdByName, which retrieves the pipe ID given a name of a pipe. As this would conflict with the removal of the PipeName from the PipeTbl, this code uses the OS_QueueGetIdByName and iterates across the PipeTbl to find the matching entry.

**System(s) tested on:**
Ubuntu 64-bit Linux 19.04.

**Contributor Info**
Chris Knight, NASA Ames Research Center.","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/404
doxygen warning expected <TR> tag and illegal command,"**Describe the bug**
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/inc/cfe_es.h:562: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/inc/cfe_es.h:562: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:480: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:493: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:505: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:522: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:563: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:534: warning: expected <tr> tag but found TK_LNKWORD token instead!
/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/sb/cfe_sb_priv.h:546: warning: expected <tr> tag but found TK_LNKWORD token instead!

/media/sf_share/cfs_11_5_2019/cfs/cfe/fsw/cfe-core/src/inc/cfe_sb_msg.h:560: warning: Illegal command \SB_PIPEOPTSEC as the argument of a \c command

**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13

**Reporter Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/403
Missing cFE Deployment Guide,"**Describe the bug**
The `cFE Deployment Guide` named in the `cFE Application Developers Guide.doc` is not included in the repository and is not easy to find.

**Reporter Info**
Marco A. Feliu - *National Institute of Aerospace* 
",wontfix,https://github.com/nasa/cFE/issues/402
fix-288-remove_pipename changes,"**Describe the contribution**
Removes the PipeName field from the CFE_SB_PipeD_t struct.

**Testing performed**
make install
make test

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: internal change to CFE_SB_GetPipeName
 - Behavior Change: reduced memory impact of the CFE_SB_PipeD_t table

**System(s) tested on:**
 - Hardware: VM
 - OS: Linux
 - Versions: ""master""

**Contributor Info**
Chris Knight, NASA Ames Research Center
",invalid,https://github.com/nasa/cFE/pull/401
Fix #383 - Resolve Explicit Link ,"**Describe the contribution**
Fix #383, resolving explicit link and any remaining misc. warning. 

**Testing performed**
Steps taken to test the contribution:
1. make usersguide
2. Verify warning is gone

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
 - rc-6.7-0

**Contributor Info**
Anh Van, NASA Goddard

",CCB:Approved,https://github.com/nasa/cFE/pull/400
Untraced feature to decompress apps/lib on load,"**Describe the uncovered feature**
The feature to decompress apps/libraries on load that end in .gz does not have requirements or associated build verification.  Note it is covered in coverage/functional testing in fs_UT.c.

**Possible solutions**
1. Remove this feature from the core (allows #291 to externalize decompress to be implemented cleanly)
1. Add requirements, design, and build verification and resolve how to implement vs #291 desire to externalize

**Related software**
 - Implemented in cfe_es_apps.c
 - Utilizes cfe_fs_api.c: CFE_FS_IsGzFile, CFE_FS_GetUncompressedFile, cfe_fs_decompress.c and cfe_fs_decompress.h

**Additional concern**
CFE_FS_Decompress prototype is defined in both inc/cfe_fs.h and cfe_fs_decompress.h

**Reporter Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/cFE/issues/399
Fix #396: Add script to apply style,"**Describe the contribution**
Fixes #396, adds script to apply style

**Testing performed**
1. Ran against ci_lab repo, confirmed acceptable style

**Expected behavior changes**
No functional changes

**System(s) tested on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 16.04
 - Versions: master bundle

**Additional context**
None

**Contributor Info**
Jacob Hageman - NASA/GSFC",invalid,https://github.com/nasa/cFE/pull/397
Fix #380: Exclude unit tests from lcov report,"**Describe the contribution**
Fixes #380, exclude unit-test files from lcov report

**Testing performed**
Steps taken to test the contribution:
1. Build/test/run lcov
```
make distclean
make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
make
make install
make test
make lcov
```
1. Processed files no longer include unit test code, confirmed processed file list against repo
1. Coverage from 6.7.0 was
```
lines......: 92.6% (20233 of 21841 lines)
functions..: 95.9% (827 of 862 functions)
```
with unit test files included, now
```
  lines......: 98.6% (8195 of 8308 lines)
  functions..: 99.6% (471 of 473 functions)
```

**Expected behavior changes**
Valid coverage of flight code now reported

**System(s) tested on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 16.04
 - Versions: master bundle with this change

**Additional context**
None

**Contributor Info**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/395
cFS style guide,"**Is your feature request related to a problem? Please describe.**
Code and file naming in cFS and apps is inconsistent and does not follow a particular set of guidance, and no guidance were developed previously for cFS.

**Describe the solution you'd like**
Develop a ""Style Guide"" in markdown format for inclusion in cFE/docs, describing code formatting conventions, symbol naming conventions, documentation conventions, directory structure and file naming conventions, etc. This should be referenced by the App Developer's guide and any other relevant docs and may incorporate or replace parts of existing documents. Perhaps also link/refer from the github wiki.

**Describe alternatives you've considered**
Other options include adding style information to the app developer's guide or identifier naming conventions documents.

**Additional context**
Jake provided the GSFC ""indent"" flags that are standard at GSFC, this is a good starting point for formatting and should be documented.

**Requester Info**
Chris Knight, NASA Ames Research Center","enhancement, docs",https://github.com/nasa/cFE/issues/394
"Fix #392, cpp check warning","**Describe the contribution**
Fix #392, resolve cpp check warning

**Testing performed**
Steps taken to test the contribution:
1. cppcheck --force . 
2. verify warning is gone

**System observed on:**
Hardware
1)  Ubuntu18.04
2) Cppcheck 1.82, cFE 6.7.1, osal 5.0.1

**Contributor Info**
Anh Van, NASA Goddard

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/cFE/pull/393
cpp check error,"**Describe the bug**
Cpp check has warning. 

[cfe/fsw/cfe-core/unit-test/ut_time_stubs.c:151]: (error) Uninitialized variable: Result
[cfe/fsw/cfe-core/unit-test/ut_time_stubs.c:211]: (error) Uninitialized variable: Result


**To Reproduce**
Steps to reproduce the behavior:
1. cppcheck --force .
2. See warning

**System observed on:**
 - Hardware
 - 18.04
 - Cppcheck 1.82, cFE 6.7.1, osal 5.0.1

**Reporter Info**
Anh Van, NASA Goddard","bug, unit-test",https://github.com/nasa/cFE/issues/392
"Fix #385, fix misc. doxygen","**Describe the contribution**
fix #385, fix misc. doxygen issue. Did not fix cfe_es.h:560, and cfe_sb_msg.h:560. Classify as different issue. 

**Testing performed**
Steps taken to test the contribution:
1. Make Usersguide
2. Verify warning is gone. 

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc-6.7.0

**Contributor Info**
Anh Van, NASA Goddard

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/cFE/pull/391
Fix #379: Remove test results from FSW path,"**Describe the contribution**
Fixes #379 

**Testing performed**
Steps taken to test the contribution:
1. Checked out master bundle with this change, nominal setup (from README)
1. make ENABLE_UNIT_TESTS=true SIMULATION=native prep
1. make
1. make install
1. make test (timer test failed as expected, rest passed)
1. make lcov
no issues (and none expected since this wasn't a code change)

**Expected behavior changes**
 - No impact to behavior

**System(s) tested on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 16.04
 - Versions: master bundle with this change

**Additional context**
None

**Contributor Info**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/cFE/pull/390
Set `EXTRACT_ALL` to no for doxygen document builds and resolve all `WARN_IF_UNDOCUMENTED` and `WARN_NO_PARAMDOC` warnings,"**Is your feature request related to a problem? Please describe.**
The EXTRACT_ALL flag set to YES defeats the WARN_IF_UNDOCUMENTED and WARN_NO_PARAMDOC enabled errors

**Describe the solution you'd like**
Set EXTRACT_ALL to NO and explicitly document all elements for at minimum the usersguide documentation.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

EDIT - separated original issue, warning file name now in #1589","enhancement, docs, continuous-integration",https://github.com/nasa/cFE/issues/389
Integration Candidate 20191030,"**Describe the contribution**
Fixes #361, fixes #373, fixes #374, fixes #381

**Testing performed**
Steps taken to test the contribution:
1. Checked out bundle with OSAL and cFE ic-20191030 branches 
1. make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
1. make
1. make install
1. make test
Built without warnings, all tests passed except osal_timer_UT (nominal result on linux)
executed cfe, successful startup with no warnings

**Expected behavior changes**
Resolved potential lockup bug
Resolved anomalous messages produced during app delete

**System(s) tested on:**
 - cFS dev server
 - OS: Ubuntu 16.04
 - Versions: bundle with OSAL and cFE ic-20191030 branches

**Additional context**
None

**Contributor Info**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/cFE/pull/388
"Fix #384, Unable to resolve link","**Describe the contribution**
Fixed doxygen warning: Unable to resolve linke

**Testing performed**
Steps taken to test the contribution:
1. Make usersguide

2. cfe_es_msg.h:155:  Check cfe__es__msg_8h.html 
3.  cfe_evs_msg.h:349: - cfe__evs__msg_8h.html
4. cfe_evs_msg.h:389:  - cfe__evs__msg_8h.html
5. cfe_es.dox:223:  -  cfeesugswreset.html
6. cfe_es.dox:734:  cfeesugcdssrv.html
7. cfe_es.dox:859: - cfeesugmempoolsrv.html
8. cfe_es.dox:881: - cfeesugmempoolsrv.html
9. cfe_evs.dox:364: - cfeevsugcounters.html
10. cfe_evs.dox:469: - cfeevsugfaq.html

11. Verify warning.log that warning is longer there. 

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
 - cFE 6.7.1, rc- 6.7.0

**Contributor Info**
Anh Van, NASA Goddard","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/387
Add capability to build OSAL code coverage tests as part of build,"**Is your feature request related to a problem? Please describe.**
Currently code coverage testing for OSAL is not integrated with the cfe build system.  It's possible to build separately, but then care has to be taken to match configurations and extra steps are required.

**Describe the solution you'd like**
Build OSAL code coverage (of the shared and target OSAL) executables for the host when ""ENABLE_UNIT_TESTS"" is true, using the osconfig.h defined for the build (vs default in the BSP).

**Describe alternatives you've considered**
It's possible to build stand alone, but not trivial.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",duplicate,https://github.com/nasa/cFE/issues/386
doxygen misc warning,"**Describe the bug**

cfe/fsw/cfe-core/src/inc/cfe_es.h:560: warning: expected <tr> tag but found TK_LNKWORD token instead!

cfe/fsw/cfe-core/src/inc/cfe_es.h:569: warning: The following parameters of CFE_ES_WaitForSystemState(uint32 MinSystemState, uint32 TimeOutMilliseconds) are not documented:
  parameter 'MinSystemState'

cfe/fsw/cfe-core/src/inc/cfe_es_msg.h:750: warning: Found unknown command `\B'

cfe/fsw/cfe-core/src/inc/cfe_es_msg.h:750: warning: Found unknown command `\C'

cfe/fsw/cfe-core/src/inc/cfe_fs.h:122: warning: The following parameters of CFE_FS_InitHeader(CFE_FS_Header_t *Hdr, const char *Description, uint32 SubType) are not documented:
  parameter 'Description'
  parameter 'SubType'

cfe/fsw/cfe-core/src/inc/cfe_sb.h:256: warning: argument 'OptsPtr' of command @param is not found in the argument list of CFE_SB_GetPipeOpts(CFE_SB_PipeId_t PipeId, uint8 *OptPtr)

cfe/fsw/cfe-core/src/inc/cfe_sb.h:272: warning: The following parameters of CFE_SB_GetPipeOpts(CFE_SB_PipeId_t PipeId, uint8 *OptPtr) are not documented:
  parameter 'OptPtr'

cfe/fsw/cfe-core/src/inc/cfe_sb_msg.h:560: warning: Illegal command \SB_PIPEOPTSEC as the argument of a \c command

**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc-6.7.0

**Reporter Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/385
"doxygen warning, unable to solve link","**Describe the bug**
doxygen gives warning,  unable to resolve link...etc

[doxygen_warning_cfe_unable_to_resolve.txt](https://github.com/nasa/cFE/files/3789251/doxygen_warning_cfe_unable_to_resolve.txt)


**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc - 6.7.0

**Reporter Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/384
doxygen warning: explicit link,"**Describe the bug**
doxygen gives warning: explicit link request to 'CFE_SB_CmdHdr_t' could not be resolved ...etc

[userguide_warning_explicit_link.txt](https://github.com/nasa/cFE/files/3789214/userguide_warning_explicit_link.txt)


**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc-6.7-0


**Reporter Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/cFE/issues/383
"Fix #381, Add VxWorks Example Toolchain","**Describe the contribution**
Fixes #381, Add VxWorks sample toolchain

**Testing performed**
Steps taken to test the contribution:
1. Checked out cFS rc-6.7.0 bundle and standard setup per README
1. Added `SET(TGT1_SYSTEM ppc-vxworks6.9)` to targets.cmake
1. Set up vxworks build environment `/opt/WindRiver/wrenv.sh -pvxworks-6.9`
1. `make ENABLE_UNIT_TESTS=TRUE prep`
1. `make`
1. `make install`
1. Loaded test executable to target
1. Executed all test executables (all passed except sem-speed-test with exception at interrupt level, and 2 of the timer tests returned slightly out of tolerance values)

**Expected behavior changes**
Able to build for cFS lab vxworks setup

**System(s) tested on:**
 - Hardware Host: cFS dev server , Target: MCP750
 - OS Host: Ubuntu 16.04.6 LTS, Target: VxWorks 6.9
 - Versions rc-6.7.0 bundle

**Additional context**
None

**Contributor Info**
Jacob Hageman - NASA/GSFC

**Community contributors**
N/A",CCB:Approved,https://github.com/nasa/cFE/pull/382
Add sample vxworks toolchain file,"**Is your feature request related to a problem? Please describe.**
No example toolchain file to build for MCP750 included.

**Describe the solution you'd like**
Add the toolchain file used for testing.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/381
Exclude unit-tests from lcov report (skews results),"**Is your feature request related to a problem? Please describe.**
Unit test coverage results skewed by unit-test directory inclusion (shows uncovered stub lines)

**Describe the solution you'd like**
lcov --remove unit-test (or whatever) from the coverage.info line in Makefile.sample

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, build-system",https://github.com/nasa/cFE/issues/380
Remove test results from fsw path,"**Is your feature request related to a problem? Please describe.**
Test results should be supplied as artifacts with the release.  These results are outdated and not used for any new comparison checks.

**Describe the solution you'd like**
Remove from FSW.

**Describe alternatives you've considered**
None

**Additional context**
Specifically:
 - cfe/fsw/cfe-core/unit-test/EsResults
 - cfe/fsw/cfe-core/unit-test/EvsResults
 - cfe/fsw/cfe-core/unit-test/FsResults
 - cfe/fsw/cfe-core/unit-test/SbResults
 - cfe/fsw/cfe-core/unit-test/TblResults
 - cfe/fsw/cfe-core/unit-test/TimeResults

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, good first issue, build-system",https://github.com/nasa/cFE/issues/379
Integration candidate 2019-10-09,"**Describe the contribution**
Integration candidate for pull requests approved at 2019-10-09 CCB
Covers the following pull requests:
 #27 - Ensure table naming consistent across CPUs
 #367 - Fix infinite loop when gz file is truncated
 #369 - Update obj creation failure requirement

**Testing performed**
Build code for native host (SIMULATION=native) with unit test enabled
Execute CFE core, issued various test commands from cmdUtil
Execute all unit tests and confirm passage.

**Expected behavior changes**
None

**System(s) tested on:**
Ubuntu 18.04.2 LTS 64-bit

**Additional context**
NA

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/cFE/pull/378
Remove device driver requirements,"**Is your feature request related to a problem? Please describe.**
Device driver requirements are unimplemented.  Hardware libraries or apps already cover the required functionality.  Unloading a library is risky/complex, better to remove from startup script and restart.

**Describe the solution you'd like**
Remove device driver requirements.

**Describe alternatives you've considered**
Requirements were debated, no solid use case to justify the additional complexity.

**Additional context**
NA

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/cFE/issues/377
Fix #373: Correct mutex around log file write,"The mutex for the log file write during the WriteLogFileCmd
excution was held longer than it should have been.

This lock must *NOT* be held during EVS_SendEvent, as this
will cause deadlock.

This moves the mutex to protect only the area that actually
accesses the log data, and it moves all send event calls
to be AFTER the mutex is released.

**Testing performed**
Built all code using default config and start CFE
Externally issue the WriteLogDataFile command with a valid output file
- Confirmed that the log data file is generated successfully
Externally issued the WriteLogDataFile command with a invalid output file (where OS_creat fails)
- Confirmed that the expected error event is generated with no deadlock or issues

**Expected behavior changes**
No longer deadlocks in the case of an error during the file operations

**System(s) tested on:**
Ubuntu 18.04.2 LTS 64-bit

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/cFE/pull/376
Fix #374: CFE_ES_GetTaskInfo must be passed a task ID,"Fix 2 areas where the CFE_ES_GetTaskInfo() function could
have been passed an App ID rather than a task ID, which
would create an incorrect result and generate an error in the syslog

**Testing performed**
Steps taken to test the contribution:
- Set EVS default configuration to enable all events (including DEBUG) by default
- Built all for pc-linux from a clean slate
- Run CFE core and confirm all startup OK
- Externally Issue StopApp command for ""SAMPLE_APP""
- Confirmed that all debug events are correct
- Confirmed that the original error is not generated
- Externally Issue Shell command for ""ES_ListTasks""
- Confirmed that no bad task ID errors are shown
- Confirmed that the file output is correct

**Expected behavior changes**
The invalid task errors shown in the logs prior to this change are NOT generated after this change.

**System(s) tested on:**
Ubuntu 18.04.2 LTS  64-bit

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/cFE/pull/375
Task ID Not Valid in CFE_ES_DeleteApp,"**Describe the bug**
When deleting an app the Task ID Not Valid message was observed:
```
1980-012-14:06:24.50399 ES Startup: TST_ES4 loaded and created                                                                                             
EVS Port1 66/1/CFE_ES 6: Started TST_ES4 from /ram/tst_es4.o, AppID = 8                                                                                    
EVS Port1 66/1/TST_ES4 1: TST_ES4: Version 2.0.0.0: Task Initialized                                                                                       
1980-012-14:07:01.50000 CFE_ES_DeleteApp: Delete Application TST_ES4 Initiated                                                                             
1980-012-14:07:06.00100 CFE_ES_GetTaskInfo: Task ID Not Valid: 8                                                                                           
EVS Port1 66/1/CFE_ES 8: Stop Application TST_ES4 Completed.
```
The app was still deleted.

**To Reproduce**
Steps to reproduce the behavior:
1. Should be able to recreate by just deleting an app (say sample_app) on VxWorks6.9 OSAL
(I haven't had a chance to verify myself)

**Expected behavior**
AppID = 8, TaskID seem to start in the 655xx range.  I'd expect the code to use the right values in the right calls.

**Code snips**
Needs investigation

**System observed on:**
 - mcp750
 - OS: VxWorks6.9
 - Versions: rc-6.7 bundle

**Additional context**
Seen during build verification testing.

**Reporter Info**
Jacob Hageman - NASA/GSFC
Found by Walt M.
",bug,https://github.com/nasa/cFE/issues/374
CFE_EVS_WriteLogFileCmd requires recursive locking,"**Describe the bug**
The function `CFE_EVS_WriteLogFileCmd` in cfe_evs_log.c locks `CFE_EVS_GlobalData.EVS_SharedDataMutexID` for the entire duration of the function. If an error is encountered, it will call `EVS_SendEvent`, which also tries to lock the mutex. If the OS/OSAL do not support recursive locking on mutexes, this will lead to a deadlock.  

**To Reproduce**
Steps to reproduce the behavior:
1. Cause an error during the execution of `CFE_EVS_WriteLogFileCmd` (by e.g. giving it an invalid filename).

**Expected behavior**
This may be expected behavior, if cFE requires its mutexes to be recursively lockable. If so, this isn't a bug and I'll have to modify our OSAL. But if that is not the expectation, then I would this function should relinquish its lock before calling `EVS_SendEvent`.

More specifically, it looks like the this can be accomplished by moving the line
```
   OS_MutSemGive(CFE_EVS_GlobalData.EVS_SharedDataMutexID);
```
to just before each instance of `EVS_SendEvent()` in the function. By each of these points, this function is done accessing sensitive EVS data.

**Code snips**
* [CFE_EVS_WriteLogFileCmd's release of the lock](https://github.com/nasa/cFE/blob/6aaf5a3244e02af43c8ebb893ef413916dff5ef2/fsw/cfe-core/src/evs/cfe_evs_log.c#L251)

**System observed on:**
 - Capella flight computer
 - OS: FreeRTOS 10.1.1
 - Versions: cFE 6.5.0, OSAL 4.2.0 (plus in-house FreeRTOS port)

**Additional context**
I found this while testing our fix for #372.

**Reporter Info**
Mike Stewart, Capella Space.
",bug,https://github.com/nasa/cFE/issues/373
ES CDS defines two nearly identically-named constants with different values,"**Describe the bug**
The CDS code uses two mission-scope configuration values:
`CFE_MISSION_ES_CDS_MAX_NAME_LENGTH`
`CFE_MISSION_ES_CDS_MAX_NAME_LEN`

The values are actually different; the ""LENGTH"" version is just the CDS base name, where as the ""LEN"" is the size of the qualified name (APP.CDSName form).

**To Reproduce**
No runtime issue, this is a style/maintenance issue.

**Expected behavior**
The names should be more different and distinctive.  

Suggest that `CFE_MISSION_ES_CDS_MAX_NAME_LENGTH` should be renamed to indicate that it reflects the size of the base name only.  This value appears to primarily be used internally to CDS, and does not get directly used in telemetry packets, so it would be easier to rename, with less impact on existing code.


**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/cFE/issues/370
"Fix #199, Update obj creation failure requirement","**Describe the contribution**
Fixes #199, updates obj creation failure requirement to platform defined response

**Testing performed**
None - document update

**Expected behavior changes**
None

**System(s) tested on:**
None

**Additional context**
Platform defined response now matches cFS PSP model.

Note - Requirements transitioned to new tracking system with minor typo fixes throughout and new output format which changes every line.  ""Version tracking"" is really accomplished in the requirements management tool, not the *.md file.

**Contributor Info**
Jacob Hageman - NASA/GSFC
",CCB:Approved,https://github.com/nasa/cFE/pull/369
Test condition needs verification - cFE_FS_Decompress - insize temporary become 0,"**Is your feature request related to a problem? Please describe.**
Test cases where insize might temporarily hit 0 during a normal decompression. reference issue 298. 

**Requester Info**
Anh Van, NASA Goddard.
",wontfix,https://github.com/nasa/cFE/issues/368
"Fix #298, fix infinite loop when gz file is truncated","**Describe the contribution**
Fix issue #298, when cfe_fs_decompress goes into infinite loop when gz file is truncated. 

Fix #298

**Testing performed**
1. Build 
2. Pass in truncated file as parameter to cfe_fs_decompress.
[corgi2.jpg.gz](https://github.com/nasa/cFE/files/3698606/corgi2.jpg.gz)
3. Verify the return status:

```
STATUS CODE = -973078518
```

4. Gzip good file
![66239143-f6736880-e6ad-11e9-98ac-ce321d6d495a](https://user-images.githubusercontent.com/26749312/66332444-c1ac1f00-e902-11e9-8518-62dcbbad2736.jpg)

5. Pass as parameter and verify output. 

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04.03
 - cFE 6.7.0


**Contributor Info**
Anh Van, NASA Goddard

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/cFE/pull/367
Update `cmake/sample_defs/targets.cmake` to include APPLICATION_LIST,"**Describe the contribution**
Solves issue #360.

**Expected behavior changes**
Enables missions to slowly roll out new applications without updating include lists in each table provided application each time a new one is included.

**Contributor Info**
John P. Lucas - NASA GSFC
",invalid,https://github.com/nasa/cFE/pull/365
Problem With CreatePipeErr,"The App Cnt (Controller) is not starting because of a pipe problem.

![image](https://user-images.githubusercontent.com/52501916/65999004-84f7a800-e46a-11e9-9580-2c1de866f1bb.png)
",invalid,https://github.com/nasa/cFE/issues/364
Running core-linux.bin Startup Errors,"The startup says the queue depth may be too large for the OS to handle.  The msg_max defaults to 10 but when trying to change it the OS does not allow msg_max file be saved in the editor.

There is another problem with CreatePipeErr.

![image](https://user-images.githubusercontent.com/52501916/65993863-0a298f80-e460-11e9-9c29-a42d1f8f58a8.png)
",question,https://github.com/nasa/cFE/issues/363
"Fix #361, update Developer's Guide to use sample App, create markdown","**Describe the contribution**
Fix #361, update to use sample app for template, update images, create markdown

**Contributor Info**
Anh Van, NASA Goddard

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
","enhancement, CCB:Approved",https://github.com/nasa/cFE/pull/362
"Update Developer's Guide to use sample App, create markdown version","**Is your feature request related to a problem? Please describe.**
update developer's guide to use sample app instead of qq, create markdown version.

**Requester Info**
Anh Van, NASA Goddard
","enhancement, docs",https://github.com/nasa/cFE/issues/361
Application List in 'sample_defs',"**Is your feature request related to a problem? Please describe.**
The `CMakeLists.txt` file in each application that utilizes tables (HK, SCH, TO, etc.) requires mission specific applications to be added to the `include_directories` statement.

**Describe the solution you'd like**
I suggest we use a single `APPLICATION_PLATFORM_INC_LIST` variable declared in `sample_defs/targets.cmake` that can be used for multiple target app lists and in the applications as well so that the mission specific code and tables remain separate.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
jplucas from babelfish
",wontfix,https://github.com/nasa/cFE/issues/360
Update platform and mission config to use c99 true and false,"Currently using TRUE and FALSE, fails build with deprecated elements removed.

Blocking for 6.7.0 release.",invalid,https://github.com/nasa/cFE/issues/359
User/beginner friendly permissive mode implementation,"Failure when running as a normal user due to not setting the permissive mode should be user friendly.  Both for message queues and priorities failures.

Also requesting a command line option, or default to permissive mode for the bundle (should just work out of the box on a linux system for a new user, the bundle is not a flight distribution).  Maybe relate it to SIMULATION=native setting?  Note current way it's set up (as an #undef in default_osconfig.h precludes passing it in as an option). 

Worth discussing since currently the bundle defaults to debug mode with no optimization anyways.  Perhaps permissive mode is also appropriate?  Distribution guide (or whatever documentation is available) could cover transition to more flight-like configuration.",enhancement,https://github.com/nasa/cFE/issues/358
Switch default linux toolchains back to posix (was posix-ng),"Removing last gen and next gen in to it's place in cfs_osal [cfs_osal:213], requires going back to posix for default toolchain.",enhancement,https://github.com/nasa/cFE/issues/357
Quoting issue in doxygen build,"The arch_build.cmake file converts the CMAKE_C_FLAGS variable and translates the defined macros into the Doxygen command line.

However, if the CMAKE_C_FLAGS string is empty, then this fails.  Need to add quotes to make it work with an empty string.","bug, docs",https://github.com/nasa/cFE/issues/356
Add flag at prep stage to OMIT_DEPRECATED,"Need an easy way for users (and the CI system) to omit all deprecated elements.  Something like

make OMIT_DEPRECATED=true prep

which would then internally add all the -DCFE_OMIT_DEPRECATED -DOSAL_OMIT_DEPRECATED and so on flags when building everything.","enhancement, travis-ci",https://github.com/nasa/cFE/issues/355
Need to dynamically determine whether extra flag prefix is required when linking CFE,"On platforms that link executables via gcc, these need to have an extra ""-Wl,"" prefix on linker options.

However, on platforms that call ""ld"" directly, these do not need the prefix, and using the prefix causes an error.
","bug, build-system",https://github.com/nasa/cFE/issues/354
Remove calls to deprecated PSP functions,"As part of the changes for PSP trac [cfs_psp:7] and [cfs_psp:93] the following functions are proposed to be deprecated:

{{{
int32 CFE_PSP_PortRead8         (cpuaddr PortAddress, uint8 *ByteValue);
int32 CFE_PSP_PortWrite8        (cpuaddr PortAddress, uint8 ByteValue);
int32 CFE_PSP_PortRead16        (cpuaddr PortAddress, uint16 *uint16Value);
int32 CFE_PSP_PortWrite16       (cpuaddr PortAddress, uint16 uint16Value);
int32 CFE_PSP_PortRead32        (cpuaddr PortAddress, uint32 *uint32Value);
int32 CFE_PSP_PortWrite32       (cpuaddr PortAddress, uint32 uint32Value);

int32 CFE_PSP_MemRead8          (cpuaddr MemoryAddress, uint8 *ByteValue);
int32 CFE_PSP_MemWrite8         (cpuaddr MemoryAddress, uint8 ByteValue);
int32 CFE_PSP_MemRead16         (cpuaddr MemoryAddress, uint16 *uint16Value);
int32 CFE_PSP_MemWrite16        (cpuaddr MemoryAddress, uint16 uint16Value);
int32 CFE_PSP_MemRead32         (cpuaddr MemoryAddress, uint32 *uint32Value);
int32 CFE_PSP_MemWrite32        (cpuaddr MemoryAddress, uint32 uint32Value);

int32 CFE_PSP_EepromWrite8      (cpuaddr MemoryAddress, uint8 ByteValue);
int32 CFE_PSP_EepromWrite16     (cpuaddr MemoryAddress, uint16 uint16Value);
int32 CFE_PSP_EepromWrite32     (cpuaddr MemoryAddress, uint32 uint32Value);

int32 CFE_PSP_MemCpy            (void *dest, const void *src, uint32 n);
int32 CFE_PSP_MemSet            (void *dest, uint8 value, uint32 n);
}}}

For CFE_PSP_MemCpy/CFE_PSP_MemSet it is preferred to use the C library memcpy/memset call instead.  For the access functions, just dereference the pointer locally (as this is all they ever did).",enhancement,https://github.com/nasa/cFE/issues/353
Add PSP_VERSION creation as part of version.cmake,"PSP build is unique in that it doesn't follow the pattern of apps, cfe, and osal for producing version information (as part of version.cmake).  Consistent build framework is preferred.",enhancement,https://github.com/nasa/cFE/issues/352
Remove dependencies on BIT_ORDER macros,"osal/src/os/inc/common_types.h defines SOFTWARE_BIG_BIT_ORDER and SOFTWARE_LITTLE_BIT_ORDER that are targeted for future deprecation.

Need to remove dependencies in cfe/fsw/cfe-core/src/inc/ccsds.h, which defines CFE_MAKE_BIG* macros, which are used in time services.

Eventually solved by EDS, but need to solve it before actually deprecating these elements.

Slight relation to #92

EDIT -  the macros have been moved to cFE:
https://github.com/nasa/cFE/blob/e80aae94e0f56b868657daba965c590766a4dc57/modules/core_api/fsw/inc/cfe_endian.h#L43-L57

- Deprecate these

See also #1209","enhancement, CFS-40",https://github.com/nasa/cFE/issues/351
"Replace ""osalbool"" and ""boolean"" types with C99 bool","CCB intends to deprecate the OSAL-provided ""boolean"" and ""osalbool"" types in version 5.0.0, in favor of the C99-specified ""bool"" type.

CFE needs to be updated to stop using these types along with the related macro definitions:

    `osalbool` and `boolean` should be `bool`
    `TRUE` should be `true`
    `FALSE` should be `false`",bug,https://github.com/nasa/cFE/issues/350
Remove backwards compatibility provided by _ENHANCED_BUILD_,"No longer supporting classic build (doesn't work with next-gen osal either), remove old backwards compatibility support and the associated _ENHANCED_BUILD_ flag.","bug, removed",https://github.com/nasa/cFE/issues/349
Enhanced versioning reporting updates,"GitHub repos don't include the name in the tag (since each repo is separate), so the git describe with --match ""${NAME}*"" comes up blank.  The most recent tag in every branch (babelfish and github) is legit, so no need to filter.

Recommend removing this match, and including the names in the print string:

As in: CFE: %s, OSAL: %s

Looks like MISSION_PSPMODULES is not coming through as expected, suggest adding PSP: %s?",bug,https://github.com/nasa/cFE/issues/348
Remove old MKS flags from comments,"$Id, $Date, $Revision, $Log, etc all no longer useful and slightly misleading since they don't get updated.",bug,https://github.com/nasa/cFE/issues/347
Remove -m32 flag from sample toolchain files,"Sample posix toolchain files still include -m32, are we ready to default to 64?",bug,https://github.com/nasa/cFE/issues/346
Remove cFE logic to support backwards compatibility to last gen OSAL,"Opening for discussion making OSAL_OPAQUE_OBJECT_IDS the only option (removes support for last-gen OSAL) in 7.0, and need to agree to plan for end of summer release.

Notes - users not updating cFE and OSAL together, as well as updating to cmake may have challenges with end-of-summer release.  Shouldn't be a surprise.",enhancement,https://github.com/nasa/cFE/issues/345
Remove fsw/mission_inc and fsw/platform_inc (classic build support),"Directories are only used by classic build and duplicate defines in sample_defs.  Should be removed.

Targeted for 7.0 since it will break classic build (deprecated in 6.7).","deprecate, build-system",https://github.com/nasa/cFE/issues/344
Convert CFE_OMIT_DEPRECATED_6_6 to deprecate by default,"Switch ifndef CFE_OMIT_DEPRECATED_6_6 to ifdef CFE_DEPRECATED_6_6, user action is to define if needed but leave out by default.",bug,https://github.com/nasa/cFE/issues/343
Remove OSAL last-gen compatibility complexity,"Next gen OSAL is the only option with this release, remove conditionally compiled code related to supporting last gen.",duplicate,https://github.com/nasa/cFE/issues/342
Remove reference to _HAVE_STDINT_ in doxygen input file,"Relates to [cfs_osal:226] in cfe_osal, where the _HAVE_STDINT_ define is removed.  Now always using stdint.h (burden is on projects if they use a platform that isn't compliant with C99).",bug,https://github.com/nasa/cFE/issues/341
"Time State flags near duplicate functions, one skips IsToneGood","CFE_TIME_GetStateFlags in cfe_time_utils.c is nearly identical to CFE_TIME_GetClockInfo in cfe_time_api.c except GetStateFlags doesn't include IsToneGood flag (both convert state data to flags).

Recommend removing GetStateFlags (internal, only used in HK generation) and replace with call to GetClockInfo (From API).

From Keegan Moore email thread (5/6/2019)",bug,https://github.com/nasa/cFE/issues/340
Support separate app and table install subdirectories,"From Christopher Westerman (5/13/2019 email paraphrased) - requested support in arch_build.cmake to install tables and apps to different subdirectories. Supporting ""separation of concerns"" design principle.",enhancement,https://github.com/nasa/cFE/issues/339
Add naming convention document,"From #207, but wasn't merged to 6.6.0",bug,https://github.com/nasa/cFE/issues/338
"Move stdint.h test to higher level make recipe, or default to having it (warn if not!)","Currently the test for stdint.h and setting of _HAVE_STDINT_ is done in OSAL, but other repos include common_types.h.

Noticed the failure on a CentOS 7 platform for which sizeof(long)==8, and elf2cfetbl recipe didn't include _HAVE_STDINT_.  As a general fix moving this test and the higher in the chain would catch issues for all repos.

Also could flip the logic, set NO_STDINT if it doesn't exist and warn that attempting fixed length defines locally which makes assumptions outside the standard.",wontfix,https://github.com/nasa/cFE/issues/337
cFE/ES has hard coded values for command pipe depth and buffer limits,"The ES init function has:
    CFE_ES_TaskData.PipeDepth = 12;

    CFE_ES_TaskData.LimitHK   = 2;
    CFE_ES_TaskData.LimitCmd  = 4;

These values should be user configurable.

In addition the 5 cFE apps do not initialize their command pipe depths and buffer limits consistently (but all are NOT user configurable). 

 ",enhancement,https://github.com/nasa/cFE/issues/336
CFE_MISSION_ES_MAX_SHELL_PKT Causes ES Error When Unsigned,"When CFE_MISSION_ES_MAX_SHELL_PKT is defined as an unsigned value (2000u, for example) and a shell command is executed that results in a shell output file of less than CFE_MISSION_ES_MAX_SHELL_PKT, ES gets stuck in a loop of sending millions of ES Shell Telemetry packets.

This error/loop is in the int32 CFE_ES_ShellOutputCommand(const char * CmdString, const char *Filename) function. I think it is caused by the FileSize variable (int32) getting converted to an uint32 and under-flowing.

A workaround to this is to keep CFE_MISSION_ES_MAX_SHELL_PKT defined as a signed integer, but I think that the fix should be for ES to fix this under-flow. The CFE_MISSION_ES_MAX_SHELL_PKT should be able to be thought of/defined as an unsigned value.","bug, good first issue",https://github.com/nasa/cFE/issues/335
Provide standard byte swap functionality via EDS utilities,As discussed on [cfs_psp:43],enhancement,https://github.com/nasa/cFE/issues/334
Table name sizing logic and associated definitions inconsistent,"default_osconfig.h
 - defines OS_MAX_API_NAME as 20

sample_mission_config.h
 - defines CFE_MISSION_MAX_API_LEN as 20
 - defines CFE_MISSION_TBL_MAX_NAME_LENGTH as 16
 - defines CFE_MISSION_TBL_MAX_FULL_NAME_LEN as (CFE_MISSION_TBL_MAX_NAME_LENGTH + CFE_MISSION_MAX_API_LEN + 4)

cfe_tbl_msg.h
 - Uses CFE_MISSION_TBL_MAX_FULL_NAME_LEN in command definitions

cfe_tbl_task_cmds.c
 - Uses CFE_TBL_MAX_FULL_NAME_LEN in command processing

cfe_tbl.h
 - defines CFE_TBL_MAX_FULL_NAME_LEN as CFE_MISSION_TBL_MAX_FULL_NAME_LEN

cfe_tbl_task.h
 - Uses CFE_TBL_MAX_FULL_NAME_LEN for storing Name in registry and critreg

cfe_tbl_api.c
 In CFE_TBL_Register:
 - Uses OS_MAX_API_NAME for AppName character string
 - Uses CFE_TBL_MAX_FULL_NAME_LEN for TblName character string
    NOTE - TblName is AppName.TableName (where TableName is input name below)
 - Checks input table name against CFE_MISSION_TBL_MAX_NAME_LENGTH (this is just the table part of the name)
 - Uses CFE_TBL_MAX_FULL_NAME_LEN for saving TblName in registry
 - Uses CFE_TBL_MAX_FULL_NAME_LEN for saving TblName in critical registry",duplicate,https://github.com/nasa/cFE/issues/333
Resolve Klocwork issues found in 6.5.0,See attachment,wontfix,https://github.com/nasa/cFE/issues/332
Enforce Network Byte Order on Extended CCSDS Header,The extended header (APID Qualifiers) needs to be read/written in network byte order.,duplicate,https://github.com/nasa/cFE/issues/331
CFE_PLATFORM_ES_APP_KILL_TIMEOUT defined in multiple places,"The CFE_PLATFORM_ES_APP_KILL_TIMEOUT macro is defined in multiple places, which can cause confusion and errors.

It is defined in both of these files:
fsw/platform_inc/cpu1/cfe_platform_cfg.h
fsw/cfe-core/src/inc/cfe_es.h",bug,https://github.com/nasa/cFE/issues/330
Clean up remaining use of deprecated config macro names,"In the 6.6 release all configuration macros were revised to contain a ""MISSION"" or ""PLATFORM"" designator in their name to indicate scope.  The previous, non-designated names were deprecated, and a compatibility mapping was added.

However, there is still some code that continues to directly use the old name.  This should be fixed to use the correct name.",bug,https://github.com/nasa/cFE/issues/329
Add path to additional CMake modules for PSP,"When building and linking CFE executables and shared libraries, the flags and procedures may not always be exactly the same as the standard defaults.  Furthermore, the upstream CMake does not have a platform file for all CFE/OSAL targets (e.g. RTEMS) so the RTEMS PSP must supply an appropriate file to use here.

The CMAKE_MODULE_PATH should be extended with an additional path that is under the PSP, so module file(s) can be found here.
",enhancement,https://github.com/nasa/cFE/issues/328
Update comments/documentation in the example targets.cmake file,"The `targets.cmake` file that is included as a sample has some documentation that is incomplete/outdated.  New features have been added since this file was originally written.
",bug,https://github.com/nasa/cFE/issues/327
Add feature to support binary data blobs linked with CFE executable,"In a recent GRC project, CFE was deployed on a virtualized host that had no runtime-accessible persistent storage at all.  Although there was a place to store the CFE executable image itself, the executing runtime image could not read or write to this area as a filesystem.

The apps were statically linked with the executable, but there is no place to put the startup script (cfe_es_startup.scr).

A generic solution to this problem was to add a method for the CMake build to include arbitrary ""binary blobs"" and link these directly into the executable image, so the PSP/CFE can access them at runtime.  The content of these blobs can be entirely implementation-specific.  The CFE framework just needs an ""out of the box"" way to link these images into the executable to make deployment on this type of platform easier.

For the GRC use-case, we used this approach to store an ""initial ramdisk"" tar file which the PSP then untar'ed into the ramdisk before starting CFE.  However the approach could be used for storing any arbitrary data file, such as an FPGA bitfile or DSP/microcontroller firmware.",enhancement,https://github.com/nasa/cFE/issues/326
Potential alignment errors when allocating cfs tables.,"The buffers allocated for tables force a 32 bit alignment when the over all memory buffer is 64 bit aligned.

If a 64 bit variable is the first data type an alignment error will be reported.

If the first two variables in the data structure BD_t in the file cfe_esmempool.h are allocated as 32 instead of 16 the alignment of the table will match the buffer.

The workaround is to rearrange the table items to fall on what ever alignment is necessary.",invalid,https://github.com/nasa/cFE/issues/325
ES PerfLog dumper thread should be persistent,"`CFE_ES_PerfLogStop` spawns a child task to run `CFE_ES_PerfLogDump`. There should be a persistent thread to handle dumping the data, created during initialization.

This will require some changes to `CFE_ES_PerfLogDump` which is currently written to run only once.

----
Background:

I sent the following to the CFS community mailing list:

> CFE_ES_PerfLogStop spawns a new thread via CFE_ES_CreateChildTask to
> dump the performance data to disk. This occurs whenever ES receives a
> command to stop recording performance data.
>
> It's my understanding that spawning threads at runtime, as opposed to
> during initialization, is discouraged in real-time code due to
> overhead like allocating memory. See, e.g.
> https://wiki.linuxfoundation.org/realtime/documentation/howto/applications/memory
> which states ""all RT threads need to be created at startup time,
> before the RT show time.""
>
> Should a persistent ""dumper"" thread be spawned during ES
> initialization rather than when the stop command is received?

I then received an off-list reply from Dave McComas:

>  I noticed the same thing when I looked at the code after your other email and I agree.   Do you mind writing a ticket.","bug, cFE-ES",https://github.com/nasa/cFE/issues/324
Default to next-gen OSAL,Update the sample toolchain*.make files to use next gen posix.,invalid,https://github.com/nasa/cFE/issues/323
Size and alignment of CFE_ES_MemHandle_t vary depending on platform; ground-visible structures affected,"`CFE_ES_MemHandle_t` is [https://babelfish.arc.nasa.gov/trac/cfs_cfe/browser/fsw/cfe-core/src/inc/cfe_es.h#5098 defined] as
`typedef cpuaddr CFE_ES_MemHandle_t;` and the size and alignment of `cpuaddr` vary by platform.

This type is used as a member in (at least) the following telemetry structures:

* [https://babelfish.arc.nasa.gov/trac/cfs_cfe/browser/fsw/cfe-core/src/inc/cfe_sb_msg.h#8870 CFE_SB_HousekeepingTlm_Payload_t]
* [https://babelfish.arc.nasa.gov/trac/cfs_cfe/browser/fsw/cfe-core/src/inc/cfe_tbl_msg.h#10547 CFE_TBL_HousekeepingTlm_Payload_t]
* [https://babelfish.arc.nasa.gov/trac/cfs_cfe/browser/fsw/cfe-core/src/inc/cfe_es_msg.h#45469 CFE_ES_PoolStatsTlm_Payload_t]

It is also used in (at least) the following command structure:

* [https://babelfish.arc.nasa.gov/trac/cfs_cfe/browser/fsw/cfe-core/src/inc/cfe_es_msg.h#45416 CFE_ES_SendMemPoolStatsCmd_Payload_t]

On 64-bit platforms which require self-alignment (e.g. x86_64, aarch64), the presence of a `CFE_ES_MemHandle_t` member causes the structure to require 8 byte alignment. This results in a 4 byte hole between the 12 byte telemetry header and payload when the payload is defined as a separate structure, such as the cases noted above.

Note that unlike the various address values in `CFE_ES_AppInfo_t`, the actual value of these handles is needed on the ground for use in the ES ""send MemPool stats"" command, which takes a handle as its argument. In addition, these telemetry structures don't have a field indicating the validity of the handle. 

Both of these factors suggest the fix accepted by the CCB for `CFE_ES_AppInfo_t`, populating the fields with the low bytes of the value and marking them invalid when the fields are too small to hold the actual value, may not be viable for these structures.",enhancement,https://github.com/nasa/cFE/issues/322
Add top level readme for open source release,"Top level readme that shows up on GitHub

Likely want to also merge this to dev and maintain (vs the wiki which doesn't ship with the release).",bug,https://github.com/nasa/cFE/issues/321
"Remove gcov files, ITOS and ASIST directories",Cleaning of release for GitHub,bug,https://github.com/nasa/cFE/issues/320
Update copyright and license for open source cFS framework (dev branch),Update/add copyright and license to Apache 2.0,bug,https://github.com/nasa/cFE/issues/319
Missing migration path for CFE 6.5 ES enum values,"In CFE 6.5, ES introduced scoped names for several enumerated constants and deprecated their old names.
For example, `CFE_ES_RUNSTATUS_APP_RUN` was introduced to replace `CFE_ES_APP_RUN`. While developers were encouraged to migrate to the new names and an example `sed` command was given, the old names remained usable unless `CFE_ES_ENABLE_NEW_ENUM_NAMES` was defined.

CFE 6.6 introduced a different style of scoped names, e.g. `CFE_ES_RunStatus_APP_RUN`, and provided aliases to the pre-6.5 names, but did not provide compatibility aliases for the 6.5 versions.

The result is that developers who attempted to follow the new naming scheme in 6.5 found their apps failing to build in 6.6, whereas using the deprecated name would have continued to work.

CFE 6.6 should provide aliases for the names from 6.5 as well as the pre-6.5 names.

For example, in addition to 
{{{#!C
#define CFE_ES_APP_RUN CFE_ES_RunStatus_APP_RUN
}}}
there should be
{{{#!C
#define CFE_ES_RUNSTATUS_APP_RUN CFE_ES_RunStatus_APP_RUN
}}}","bug, wontfix",https://github.com/nasa/cFE/issues/318
Update EDS files to match release,"Plan to advertise the EDS techdev branch as part of the release, so the EDS files should be updated to match.",bug,https://github.com/nasa/cFE/issues/317
Update copyright and license for open source cFS framework release 6.6.0a,Need to update/add copyright and license to Apache 2.0 for open source release of 6.6.0a.,bug,https://github.com/nasa/cFE/issues/316
ES Performance debug messages have incorrect parameter,"The second parameter in the following two debug event messages are incorrect:

            CFE_EVS_SendEvent(CFE_ES_PERF_FILTMSKCMD_EID, CFE_EVS_DEBUG,
                        ""Set Performance Filter Mask Cmd rcvd, num %d, val 0x%x"",
            (int)cmd->FilterMaskNum,(unsigned int)cmd->FilterMaskNum);


            CFE_EVS_SendEvent(CFE_ES_PERF_TRIGMSKCMD_EID, CFE_EVS_DEBUG,
                      ""Set Performance Trigger Mask Cmd rcvd,num %d, val 0x%x"",
                   (int)cmd->TriggerMaskNum,(int)cmd->TriggerMaskNum);

In both cases ""Num"" should be removed from the second parameter variable. The casting should also be examined. ",bug,https://github.com/nasa/cFE/issues/315
Memory alignment issues in Table Services,"The CFE code has some problem areas for CPUs that have strict memory alignment requirements (e.g. SPARC).  Casting from a type with smaller requirements to a type with larger requirements generates a compile time warning and may induce a runtime exception if the memory actually is not aligned.

The following errors exist in the TBL subsystem:

{{{
/cfe/fsw/cfe-core/src/tbl/cfe_tbl_internal.c: In function 'CFE_TBL_RemoveAccessLink':
/cfe/fsw/cfe-core/src/tbl/cfe_tbl_internal.c:480:70: warning: cast increases required alignment of target type [-Wcast-align]
             Status = CFE_ES_PutPoolBuf(CFE_TBL_TaskData.Buf.PoolHdl, (uint32 *)RegRecPtr->Buffers[0].BufferPtr);
                                                                      ^
/cfe/fsw/cfe-core/src/tbl/cfe_tbl_internal.c:492:74: warning: cast increases required alignment of target type [-Wcast-align]
                 Status = CFE_ES_PutPoolBuf(CFE_TBL_TaskData.Buf.PoolHdl, (uint32 *)RegRecPtr->Buffers[1].BufferPtr);
                                                                          ^
}}}

NOTE: This is related to PSP ticket [cfs_psp:41]",bug,https://github.com/nasa/cFE/issues/314
Memory alignment issues in Software Bus,"The CFE code has some problem areas for CPUs that have strict memory alignment requirements (e.g. SPARC).  Casting from a type with smaller requirements to a type with larger requirements generates a compile time warning and may induce a runtime exception if the memory actually is not aligned.

The following errors exist in the SB subsystem:

{{{
/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function 'CFE_SB_ZeroCopyGetPtr':
/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1853:12: warning: cast increases required alignment of target type [-Wcast-align]
     return (CFE_SB_Msg_t *)address;
            ^
/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function 'CFE_SB_ZeroCopyReleasePtr':
/cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1896:35: warning: cast increases required alignment of target type [-Wcast-align]
                                   (uint32 *) (((uint8 *)Ptr2Release) - sizeof(CFE_SB_BufferD_t)));
                                   ^
/cfe/fsw/cfe-core/src/sb/cfe_sb_buf.c: In function 'CFE_SB_GetBufferFromCaller':
/cfe/fsw/cfe-core/src/sb/cfe_sb_buf.c:107:30: warning: cast increases required alignment of target type [-Wcast-align]
    CFE_SB_BufferD_t    *bd = (CFE_SB_BufferD_t *)(((uint8 *)Address) - sizeof(CFE_SB_BufferD_t));
                              ^
/cfe/fsw/cfe-core/src/sb/cfe_sb_util.c: In function 'CFE_SB_GetMsgTime':
/cfe/fsw/cfe-core/src/sb/cfe_sb_util.c:280:21: warning: cast increases required alignment of target type [-Wcast-align]
         TlmHdrPtr = (CFE_SB_TlmHdr_t *)MsgPtr;
                     ^
/cfe/fsw/cfe-core/src/sb/cfe_sb_util.c: In function 'CFE_SB_SetMsgTime':
/cfe/fsw/cfe-core/src/sb/cfe_sb_util.c:345:21: warning: cast increases required alignment of target type [-Wcast-align]
         TlmHdrPtr = (CFE_SB_TlmHdr_t *) MsgPtr;
                     ^
}}}


NOTE: This is related to PSP ticket [cfs_psp:41]",bug,https://github.com/nasa/cFE/issues/313
"CFE_TIME state saved in CDS does not include ""DelayDirection""","CFE_TIME has some features to save the current state of the reference to CDS, which is then restored after reset.  This includes the ""delay"" value that is used by time clients to adjust/compensate for distribution delays in the time signal.

While the delay amount is saved in CDS, the accompanying delay direction value is not saved.  It is always reset to ""ADD"" after booting.  So, for instance, if a time client had been running with a delay compensation value of e.g. -10ms before reboot, it would become +10ms after reboot and restore from CDS.

This seems incorrect.
",bug,https://github.com/nasa/cFE/issues/312
Sample App should be Consistent with App Developer's Guide,"The sample_app provided with the cFE is not consistent with the example app documented in the Application Developer's Guide. The App Developer's Guide should documented recommended styles and practices. Similarly the sample_app should implement them. I don't think Sample App needs to cover all of the potential app features like Critical Data Stores, Child Tasks, etc. Just the basics to get someone started.",duplicate,https://github.com/nasa/cFE/issues/311
Calling CFE_TIME_GetReference in interrupt context can lock up system,"Ocean Color Instrument FSW has been debugging watchdog resets since early February. We're running cFE 6.6 and SCH 2.2. Last weekend, we disabled the watchdog, let the FSW freeze, and attached a debug monitor that let us see processor registers and memory. The backtrace indicates that FSW is calling CFE_TIME_GetReference in interrupt context:

grmon2> bt
%pc          %sp
#31 0x402d3260 (=CFE_PSP_GetTime=0x402d323c+36) 0x401468f0 (=tIdleTask0_stack_base=0x401442d0+9760)
#410x402ef1c0 (='''CFE_TIME_GetReference'''=0x402ef1a8+24) 0x40146958 (=tIdleTask0_stack_base=0x401442d0+9864)
#510x402ee5ec (=CFE_TIME_GetMETsubsecs=0x402ee5a8+68) 0x401469e0 (=tIdleTask0_stack_base=0x401442d0+10000)
#610x404d5f14 (=SCH_GetMETSlotNumber=0x404d5f10+4) 0x40146a80 (=tIdleTask0_stack_base=0x401442d0+10160)
#710x404d60ec (='''SCH_MajorFrameCallback'''=0x404d5fb4+312) 0x40146ae0 (=tIdleTask0_stack_base=0x401442d0+10256)
#810x402ef9d8 (=CFE_TIME_NotifyTimeSynchApps$part$1=0x402ef9ac+44) 0x40146b40 (=tIdleTask0_stack_base=0x401442d0+10352)
#910x402f00e4 (=CFE_TIME_Tone1HzISR=0x402effcc+280) 0x40146ba0 (=tIdleTask0_stack_base=0x401442d0+10448)
#1010x402d49c0 (=CFE_PSP_InterruptCallback_DleonInt11=0x402d4658+872) 0x40146c28 (=tIdleTask0_stack_base=0x401442d0+10584)
#1110x40012570 (=handler_irq=0x40012528+72) 0x40146c88 (=tIdleTask0_stack_base=0x401442d0+10680)
#1210x40011dcc (=intEnt=0x40011ca8+292) 0x40146cf0 

CFE_TIME_GetReference appears to be stuck in this DO WHILE loop:

void CFE_TIME_GetReference(CFE_TIME_Reference_t *Reference)
{
    <other irrelevant code>
    do
    {
        VersionCounter = CFE_TIME_TaskData.CompleteVersionCounter;
        <other irrelevant code> 
    } while (VersionCounter != CFE_TIME_TaskData.PendingVersionCounter);

These two counters are changed in task context, so I believe that anytime SCH_MajorFrameCallback is called when these counters are different, FSW will get stuck in this do while loop.
",bug,https://github.com/nasa/cFE/issues/310
CFE_ES_RestartApp() WriteToSysLog Typo,"The first WriteToSysLog() occurrence indicates the message is from CFE_ES_DeleteApp instead of CFE_ES_RestartApp:

CFE_ES_WriteToSysLog (""CFE_ES_DeleteApp: Cannot Restart a CORE Application: %s.\n"",","bug, good first issue",https://github.com/nasa/cFE/issues/309
CFE_SB_CreatePipe: Improve message when OS_QueueCreate fails,"Currently if `OS_QueueCreate` fails in `CFE_SB_CreatePipe`, the message is just `""CreatePipeErr:OS_QueueCreate returned %d,app %s""`. It would be valuable to show the name of the error rather than (or in addition to) the numeric error code. The `OS_GetErrorName` function may help here if it's available in all of the OSAL implementations.

It may be valuable to provide other details depending on the error. For example, the message in the case of `OS_ERR_NAME_TAKEN` could indicate the name of the pipe that was requested (and is already in use).",enhancement,https://github.com/nasa/cFE/issues/308
SB memory limit on individual pipes,"Discussion spawning from #100 and #304, APL has a use case for limiting the memory used on a pipe.  Different implementations were discussed (see attached email chain).


For steering committee discussion.",enhancement,https://github.com/nasa/cFE/issues/307
EVS document event ids as being unique,"CCB 4/3/19 - discussed relative to #289

Documentation should clearly state event ids are intended to be unique to each ""event""

Also helpful to note base id's are often passed in to libraries to keep them unique

There is likely a higher level requirement somewhere that events need to be uniquely identifiable.
",duplicate,https://github.com/nasa/cFE/issues/306
Trade EVS generalize filter requirement update,"CCB 4/3/19 discussed #128 and #286 which would complicate the filter design.

Consider if this functionality is worth a requirements change and trade additional complexity at the architecture level.

Kicked up to steering committee.",enhancement,https://github.com/nasa/cFE/issues/305
Restrict pipes to the app they were created in,"Discussed in CCB 4/3/19 that SB could be updated to restrict pipes to use within an app, as part of ticket #100 discussion.  This would restrict the current capabilities of the system and valid points were raised on both sides.

See attached email thread for further details.

Submitted as a requirements enhancement to trigger discussion at the architecture/steering committee level.",enhancement,https://github.com/nasa/cFE/issues/304
Deprecate classic build,Deprecate classic build in favor of cmake.,invalid,https://github.com/nasa/cFE/issues/303
Time Services need cleanup relative to requirements,"Per CCB on 3/27/19, Time Services goes way beyond it's requirements.  Need to re-evaluate configuration options and reduce mission specific code.

As part of the cleanup, factor out duplicate code.  Specifically referenced at code review in command handling.
- `CFE_TIME_SetTimeCmd`, `CFE_TIME_SetMETCmd`, `CFE_TIME_SetStcfCmd`, and `CFE_TIME_SetLeapSeconds` are all basically the same logic, etc.
- break of files #1322, specific note from CFS-43 was the lack of a cfe_time_tone.h
- `CFE_TIME_ToneSendGPS` and `CFE_TIME_ToneSendTime` are basically the same logic, refactor
- #1536 
- #1535
- Mutually exclusive defines could just be a boolean (but will likely go away w/ refactor), note cfe_time_verify.h is excessively complex at this point
https://github.com/nasa/cFE/blob/84ba9a9974794e239b989cdc4e2359216e44fab0/modules/time/fsw/src/cfe_time_verify.h#L43-L51","enhancement, CFS-43",https://github.com/nasa/cFE/issues/302
Executive Services Generic Counter facilities not thread safe,"The Executive Services provides a ""Generic Counter"" API (register, delete, increment, decrement, get, set).

The implementation of these functions do not take any sort of mutex when accessing the table or performing these operations.  As a bare minimum, the registration should ensure that two tasks simultaneously creating counters should be protected against collision.",bug,https://github.com/nasa/cFE/issues/301
Scrub all public API calls to ensure that all input parameters are properly sanitized before use,"As a matter of policy, all CFE function calls that are available for use by external apps or libraries (i.e. all headers in the `fsw/cfe-core/src/inc` subdirectory) should sanity-check their input values before using them.

During recent code reviews it was noted that at least two of these functions were missing a required range check, as noted in bug #299.

This task is to perform an additional review on the public API calls and ensure that proper input value sanitization is being performed.
","duplicate, enhancement",https://github.com/nasa/cFE/issues/300
CFE_ES_ReloadApp() and CFE_ES_DeleteApp() missing range check on AppID,"These two functions are defined in `cfe_es.h` and therefore available for external applications and libraries to call.

These accept a passed in `AppID` parameter which is used as a table index, but they do not check the range of the value prior to using it as an array index.  If the value is out of range, this will cause undefined behavior and possibly a crash.

",duplicate,https://github.com/nasa/cFE/issues/299
CFE_FS_Decompress infinite loop on truncated gzip file,"If CFS_FS_Decompress is given a truncated gzip file, it will enter an infinite loop in which it attempts to read more data from the file, gets nothing, and tries again. Discovered by accidentally attempting to have ES load a new compressed application (which we didn't know had been truncated), which led to ES getting stuck and an eventual watchdog reset.

The problem seems to be that running out of bytes in a gzipped file before decompression is finished is not considered an error. I can see how this might be intentional if it is expected that the file handle might be a stream that could present data after being emptied, but for the normal file use case I think it is a bug. Suggested fix by combining the two checks at line 309 of cfe_fs_decompress.c:

if ( State->insize == 0 ) return EOF;

if ( len == OS_FS_ERROR ) 
{
    State->Error = CFE_FS_GZIP_READ_ERROR;
    return EOF;
}

into one: 

if ((State->insize == 0) !|| (len == OS_FS_ERROR)) {
    State->Error = CFE_FS_GZIP_READ_ERROR;
    return EOF;
}

Recommend investigation if insize might temporarily hit 0 during a normal decompression.

Reported via email from Mike Stewart, mike@capellaspace.com
",bug,https://github.com/nasa/cFE/issues/298
CCSDS secondary header consistency update,"Update data structure definition of CCSDS command secondary header to be consistent with the rest of the message header definition.

       from
/*----- CCSDS command secondary header. -----*/
typedef struct 
{   
      uint16  Command;      /* command secondary header */
      /*  bits  shift   ------------ description ---------------- */
      /* 0x00FF    0  : checksum, calculated by ground system     */
      /* 0x7F00    8  : command function code                     */
      /* 0x8000   15  : reserved, set to 0                        */
} CCSDS_CmdSecHdr_t;

       to
/*----- CCSDS command secondary header. -----*/
typedef struct 
{   
      uint8  Command[2];      /* command secondary header */
      /*  bits  shift   ------------ description ---------------- */
      /* 0x00FF    0  : checksum, calculated by ground system     */
      /* 0x7F00    8  : command function code                     */
      /* 0x8000   15  : reserved, set to 0                        */
} CCSDS_CmdSecHdr_t;

Requested by Tam via email.",bug,https://github.com/nasa/cFE/issues/297
Resolve all compiler warnings,"All compiler warnings need to be resolved prior to the next release.

Requested by Tam via email.",bug,https://github.com/nasa/cFE/issues/296
CFE_ES_ScanAppTable() possible race conditions,"The `CFE_ES_ScanAppTable()` is called from the ES message processing thread, but it does not lock the global ES data structure when reading/writing from the global data.

ES software bus command messages are safe because this function is called by the same thread that is processing those messages, therefore concurrency is not possible here.

But other functions, like `CFE_ES_DeleteApp()` and `CFE_ES_ReloadApp()` are part of the public API and these also update the same fields within the app state data structure that `CFE_ES_ScanAppTable()` is reading.  `CFE_ES_RunLoop()` can also modify fields within this structure and this is called by pretty much every app in the system.

This issue was noted while reviewing the fix for a similar issue in #279.
",bug,https://github.com/nasa/cFE/issues/295
UT_Assert Example App is broken in 6.5 release,"As of commit 04c0cc342415575f855dc00960afc8daedd8a46e (HEAD of master on 2/15/2019), the UT Assert code and associated example doesn't compile.

First, the Example App Unit Test makefile doesn't seem to be correct (include paths are wrong, some object files aren't necessary, etc.).

Second, the ES API stubs in the UT_Assert source don't match the actual ES API.

I checked out a copy of the above commit, and made updates to fix these issues. I've included the following diffs with the changes that I made to fix the problems.

00_Fix-stub-function-def-mismatch-in-ES-API.diff
  -  Updates the UT_Assert ES Stub source files (pretty self-explanatory)

01_Update-example-ut-makefile-inc-and-src-paths.diff
  -  removed unnecessary includes,
  -  removed unnecessary ut_objs,
  -  reorganized path variables,
  -  updated compiler opts for 64-bit system
       -  I'm not sure if you'll want to include this.

02_Fix-print-format-warnings-on-uint32s.diff
  -  This fix wasn't required, but it cleaned up a lot of warnings that were getting in my way of seeing errors. This was likely only necessary because the last diff changed the compiler opts to a 64-bit build

make.out
  -  This is the new output from the makefile. There are still two warnings that I wasn't familiar enough with to resolve.

",wontfix,https://github.com/nasa/cFE/issues/294
cFS Performance Monitor (CPM) update,JFreechart which is used by CPM made some API changes that are not compatible with Java 10 & 11. Kevin made some updates and the new CPM works with all current versions of Java. The new JAR is attached and will be posted on an open source website. ,duplicate,https://github.com/nasa/cFE/issues/293
Update CFE_SB_SendMsgFull() to match latest SBN function prototype,"Reported by Astrobotic 12/28/18 via email.

The SBN product has a prototype of int32  CFE_SB_SendMsgFull(CFE_SB_Msg_t   *MsgPtr, uint32 TlmCntIncrements, uint32 CopyMode, CFE_SB_SenderId_t *SenderPtr) (4 variables)

The SB prototype has 3 int32  CFE_SB_SendMsgFull(CFE_SB_Msg_t   *MsgPtr, uint32 TlmCntIncrements, uint32 CopyMode);  There is a conflict between the header files.",invalid,https://github.com/nasa/cFE/issues/292
FS - externalize cfe_fs_decompress,The decompression code should be removed and compile-time hooks to connect in an external decompression library should be provided.,enhancement,https://github.com/nasa/cFE/issues/291
CPU utilization calculation and Idle task,CPU utilization is currently calculated using an idle task. This can waste power and prevents the processor(s) from entering sleep or other power management states. As part of the SMP implementation this issue should also be addressed.,enhancement,https://github.com/nasa/cFE/issues/290
"EVS: treat ""EventType"" as a severity indicator","Currently, while EventType is an enumerated type with numeric value that increases in ""severity"" (INFORMATION->DEBUG->ERROR->CRITICAL), the type filtering functions take a bit mask. There's little reason to filter higher-severity events and not lower-severity types, and this API confuses the model and makes the code for changing and evaluating the filter overly-complex.

EventType filters should be a numerical comparison operator. (Filter all events of severity lower than X.)",wontfix,https://github.com/nasa/cFE/issues/289
SB: Remove PipeName from CFE_SB_PipeD_t,PipeName in CFE_SB_PipeD_t is redundant with the OSAL queue name and should be removed.,duplicate,https://github.com/nasa/cFE/issues/288
SB: remove AppName (and PipeName?) from CFE_SB_PipeD_t,"In looking at SB code, I noticed that CFE_SB_PipeD_t has two character arrays, AppName and PipeName. AppName, particularly, is a waste of memory to have in each pipe structure (it should be maintained in one location) and there is an AppId field in the PipeD_t so it's not needed for finding pipes.

Same may go with PipeName, as the OSAL queue takes the name as a parameter (need to ensure the pipe name doesn't already exist in OSAL.)",enhancement,https://github.com/nasa/cFE/issues/287
EVS: generalize filter design,"The current ""binary"" filter is very limited, only capable of filtering based on the number of events sent by an app with a particular event ID.

In order to support a variety of filter paradigms, EVS should be redesigned to accept filter function pointers so that applications can define their own filters that EVS calls to determine whether (or how) to filter the message. Additionally, EVS should be capable of being configured at start time (via a table or config file, a-la ES) or run time (via commands) to load system-wide filters such as the binary filter.",wontfix,https://github.com/nasa/cFE/issues/286
"remove ""type"" from event ID's","cFS code should avoid conflating event types and ID's.

For example (in the CI application) there are a number of ID's such as ""CI_INIT_ERR_EID"" that includes ""ERR"" in the name which could be interpreted as a type (as in ""all events with this EID are error events."".) However, EVS events have both an ID and a type (separate from the ID). For example, this should be renamed as ""CI_INIT_EID"" so that informational messages about the command length could be produced.",invalid,https://github.com/nasa/cFE/issues/285
Fix ES unit test WriteToSysLog warning,"In es_UT.c, the `CFE_ES_WriteToSysLog()` function is invoked with a generated (non-const) string used in place of the format string.  Some compilers generate a warning about this.  The fix is simple.",bug,https://github.com/nasa/cFE/issues/284
Build system support for linking symbol table,"When using the dynamic loader on some RTOS's (RTEMS notably, but probably others too) there is an extra build step required to build an executable capable of runtime linking.  For RTEMS, this is:

1. Build all objects and link the executable as normal
2. Invoke the `rtems-syms` tool to build a symbol table object
3. Re-link the executable using the objects from (1) and (2)

This is possible in CMake by defining some custom commands, but requires a few hooks in the build system to do this, since it is OS-specific.",enhancement,https://github.com/nasa/cFE/issues/283
Critical tables do not preserve filename of last loaded table file,"Table services issue reported by OCI:

cFE Table Services provides a feature for having critical tables. These tables preserve their information across processor and application resets. The TO application assumed that this included the filename of the last loaded table file. However, it does not. This should be fixed in the CFE_TBL application. Also, there was an MKS DCR that addressed this issue but it was never implemented. ",bug,https://github.com/nasa/cFE/issues/282
Compiler warnings regarding some CFE_SB API calls,"The `CFE_SB_GetMsgId()`, `CFE_SB_GetUserDataLength()`, and `CFE_SB_GetTotalMsgLength()` API calls trigger compiler warnings if they are called with a buffer that is qualified as `const`.

As these 3 functions are read-only (they do not modify the buffer) the input should be qualified as `const`, which fixes the warning.
",bug,https://github.com/nasa/cFE/issues/281
Improve CFE support for statically linked apps,"For some CFE deployments there are good reasons to _not_ use a dynamic loader for applications, and instead link CFE plus all applications into a single executable.  This would typically be a ""minimalist"" target using an RTOS that does not include dynamic loading, or a safety-critical subsystem where dynamic loading in general introduces operational variables.

This had been possible in previous versions of CFE but it was ugly -- an application needed to be modified for static loading and needed use some preprocessor macros to make the necessary connections.  It also used a special initialization path in CFE ES.

With the latest OSAL changes we can now support a much cleaner approach, where applications do //not// need any special treatment to support static linkage.  The OSAL symbol lookup can be configured such that it can return the correct entry point even without OS dynamic loader support.


",enhancement,https://github.com/nasa/cFE/issues/280
Race Condition in CFE_AppCreate() function,"This has been split to a separate ticket from #173.

Per email from Preston Faiks on 2018-06-04, there is an actual observed race condition issue with `CFE_ES_AppCreate()` out in the field:

   When ES is loading and starting apps, one app might fail initialization and call CFE_ES_ExitApp()  If that occurs, its app state will be set to CFE_ES_APP_STATE_STOPPED.  

  When apps are scanned, it will be removed from the app table and that table entry set to not in use.

  As ES continues to load apps, it will make use on the now unused app table entry. It will not change the app state in the entry until it has successfully loaded the app into memory. 

  The process of loading an app into memory can cause the task to pend on file system (or network file system) and allow other tasks to run.  

  As that app continues to be loaded, another app scan can occur and detect the app entry as both in use and stopped, and will unload it.

  When ES finishes loading the app, it will spawn a task at an entry point which was just unloaded by the scanning task, causing it to execute from unloaded memory and crash.


I have reviewed this code again and the race condition risk described is definitely still present in the current development branch, but this isn't the only example.  There are other similar race conditions that are possible regarding the use if the `RecordUsed` boolean field.

Having an observed failure should escalate this in priority now.
",bug,https://github.com/nasa/cFE/issues/279
ES AppRecord_t -- collapse RecordUsed into StateRecord.AppState,"Currently, there are actually two variables that indicate the state of an Application, RecordUsed (a boolean) and StateRecord.AppState (an int32 enum). This could be simplified by having ES look for the first table entry with the state of ""UNDEFINED"" (0) and using that table entry and any other state would be considered ""Used"".",duplicate,https://github.com/nasa/cFE/issues/278
fix cfe 6.6 ut_assert,,invalid,https://github.com/nasa/cFE/issues/277
Possible buffer overrun in CFE_ES,"The function `CFE_ES_GetAppInfoInternal()` had hardcoded the size of the various output buffers to be OS_MAX_API_NAME or OS_MAX_PATH_LEN.

This should use the `sizeof()` operator rather than using a specific macro, since that will accurately use the correct size, however it is defined.  We previously updated most of these but this one was missed in the previous pass.",bug,https://github.com/nasa/cFE/issues/276
ES comments need checked for consistency,"Lots of copy/paste type errors in ES. For example, after CFE_ES_IncrementTaskCounter() the comment says  /* End of CFE_ES_ExitChildTask() */","enhancement, good first issue, docs",https://github.com/nasa/cFE/issues/275
ES AppTable.TaskInfo.NumOfChildTasks incremented but never decremented,,bug,https://github.com/nasa/cFE/issues/274
ES functions that take application ID need consistent bounds checking,"Many functions in cfe_es_api.c use an AppId parameter. Some of these functions do not bounds check this. (e.g. CFE_ES_SetAppState) Others do, but do not generate an error on failure (CFE_ES_RestartApp returns CFE_SUCCESS if AppId is out of bounds)

All functions in ES should probably be inspected for issues like these and corrected.",duplicate,https://github.com/nasa/cFE/issues/273
have mission (or platform?) defined bounds for stack size,"ES should validate the stack size against a valid range. The range should be defined by the mission (and/or the platform).

VXWorks will likely barf on a stack size of 0, unless you really don't use the stack; and adding too many zeros would likely overflow flight hardware memory.",wontfix,https://github.com/nasa/cFE/issues/272
ES option to shut down cFS if it fails to load an app,"Currently if ES fails to load an app, it generates error events but continues on...These errors may get lost in the shuffle. A compile-time option should be added to change ES's behavior to shut down the cFE system if an app fails to load so that the user knows immediately something's wrong.",wontfix,https://github.com/nasa/cFE/issues/271
Buffer size warnings with GCC 7.2,"When compiling CFE with GCC version 7.2, some new warnings about possible buffer overflow appear in the CFE ES shell code.  For Example:

{{{
cfe/fsw/cfe-core/src/es/cfe_es_shell.c:293:83: error: ‘, Prnt App Name: ’ directive writing 17 bytes into a region of size between 6 and 55 [-Werror=format-overflow=]
                    sprintf(Line,""Task ID: %08d, Task Name: %20s, Prnt App ID: %08d, Prnt App Name: %20s\n""
}}}",bug,https://github.com/nasa/cFE/issues/270
EVS Delete Event Filter Doxygen Incorrect,"In file cfe_evs_msg.h the Delete Application Event Filter doxygen is incorrect. It states the command structure is 
   CFE_EVS_AppNameEventIDMaskCmd_t 
when it should be
   CFE_EVS_AppNameEventIDCmd_t

This was caught because a tool used the doyxgen to auto generate cmd & tlm definitions for COSMOS so it is important to fix.  ",enhancement,https://github.com/nasa/cFE/issues/269
cFE 6.6 Fortify Analysis Results,NASA IV&V ran cFE 6.6 through the Fortify static code analysis tool.  The findings are contained in the attachment.,wontfix,https://github.com/nasa/cFE/issues/268
Document CFE_ES_WriteToSysLog() can be used when CFE_ES_RegisterApp() fails,"On Thu, Apr 26, 2018 at 5:11 PM, Fleming, Thadeus <thadeus.fleming@odysseysr.com> wrote:
It's clear that CFE_ES_RegisterApp is supposed to be the first CFE
function an app calls, and that the app shouldn't continue if the call
fails.

However, it's not clear whether it's kosher to call
CFE_ES_WriteToSysLog to log failure of CFE_ES_RegisterApp. It appears
to be both safe (the function source doesn't look at the app's entry
in the AppTable) and common practice (e.g. the gen_app_code app
template does it).

I'd suggest that apps be allowed to call WriteToSysLog when
RegisterApp fails, and that the practice is documented so that future
versions of cFE don't modify WriteToSysLog in such a way that it would
become a problem.
",enhancement,https://github.com/nasa/cFE/issues/267
CFE ES CRC does not document polynomial,"4/16/18: Mark Pallone (GSFC PACE/OCI)reported
The generator polynomial used in a CRC implementation is fundamental information. The CFE_ES_CalculateCRC function does not state what generator polynomial it's using:

https://github.com/nasa/cFE/blob/56397a3a2c47c674892c14610e78263030441d73/fsw/cfe-core/src/inc/cfe_es.h#L1188-L1214

Dave McComas Addition:  This is a subset of a larger documentation issue. The cFE should have a flight-ground ICD

EDIT - updated link","duplicate, enhancement, docs",https://github.com/nasa/cFE/issues/266
Add cmake function to add cpus by function rather than assume consecutive cpu ids.,"Currently, the cmake rules require that cpus are built in order and will stop looking for cpu targets when a cpu idx is not found.

Propose that a cmake function can be executed from the targets.cmake file which explicitly adds the cpus to be built for the mission.","enhancement, Priority: Mission",https://github.com/nasa/cFE/issues/265
Incorrect call to CFE_SB_GetAppTskName,"Issue found in CFE 6.5.0

In cfe_sb_api.c line 450, CFE_EVS_SendEventWithAppID calls CFE_SB_GetAppTskName with Owner as first argument.

Owner is the AppId, not the TaskId. CFE_SB_GetAppTskName expects the taskId as the first argument.

Current:
  
{{{
CFE_EVS_SendEventWithAppID(CFE_SB_PIPE_DELETED_EID,CFE_EVS_DEBUG,CFE_SB.AppId,
          ""Pipe Deleted:id %d,owner %s"",PipeId, CFE_SB_GetAppTskName(Owner,FullName));
}}}



Suggested:

{{{
uint32 OnwerTskId = 0;
OS_TaskGetIdByName(&OwnerTskId, CFE_SB.PipeTbl[PipeTblIdx].AppName);

CFE_EVS_SendEventWithAppID(CFE_SB_PIPE_DELETED_EID,CFE_EVS_DEBUG,CFE_SB.AppId,
          ""Pipe Deleted:id %d,owner %s"",PipeId, CFE_SB_GetAppTskName(OwnerTskId,FullName));
}}}

",invalid,https://github.com/nasa/cFE/issues/264
expose CFE_SB_IsValidMsgId(),"CFE apps would benefit from a publicly-available IsValidMsgId() function (or perhaps an expanded ""is valid message"" function, that would check all header fields?)

For example, SCH has a function to validate its message table entries and has its own logic for determining whether a message ID is valid or not.

This would particularly facilitate CCSDS_VER_2 transitions.",enhancement,https://github.com/nasa/cFE/issues/263
add support for 64-bit builds,"cFE should build and run on 64-bit platforms such as x86_64 and ARM Cortex-A53. This should be implemented by making pointer types more generic than ""int32"".",enhancement,https://github.com/nasa/cFE/issues/262
Incorrect Documentation for CFE_TBL_ReleaseAddress,"Reported by Mark Pallone GSFC PACE/OCI project on 1/11/18:

The documentation for CFE_TBL_ReleaseAddress says that if you get the return code CFE_TBL_ERR_NEVER_LOADED, 

""This pointer must be released with the CFE_TBL_ReleaseAddress API before the table can be loaded with data.""

I think this is a copy/paste error, likely from CFE_TBL_GetAddress.
","enhancement, docs",https://github.com/nasa/cFE/issues/261
Deprecate / remove network_includes.h?,"`network_includes.h` seems to be a strange file to have in the executive. Nothing else in cFE uses it, and it is the only file in the core (non stub) code to test the various `_OS_` macros (`_LINUX_OS_`, `_MAC_OS_`, etc.).

Should this file continue to exist as part of cFE? Or can it be deprecated and eventually removed? Apps that use it could keep their own copy as needed.","enhancement, deprecate",https://github.com/nasa/cFE/issues/260
cfe time var name changed in .h but not in code,"cfe master 6.6 release
osal 4.2.1a
psp 1.3.0.0


building for VxWorks 6.9 SPARC ut700

kspace/plss_cws/../CFS/cfe/fsw/cfe-core/src/time/cfe_time_tone.c
/home/sduran/AEMU_Workspace/plss_cws/../CFS/cfe/fsw/cfe-core/src/time/cfe_time_tone.c: In function 'CFE_TIME_ToneSend':
/home/sduran/AEMU_Workspace/plss_cws/../CFS/cfe/fsw/cfe-core/src/time/cfe_time_tone.c:132:42: error: 'CFE_TIME_ToneDataCmd_Payload_t' has no member named 'AtToneLeaps'
     CFE_TIME_TaskData.ToneDataCmd.Payload.AtToneLeaps = 

FROM cfe 86ce044, 6.5 release plus a couple of hot fixes, master before 6.6 release, cfe_time_utils.h
typedef struct
{

  CFE_TIME_SysTime_t    AtToneMET;      /* MET at time of tone */
  CFE_TIME_SysTime_t    AtToneSTCF;     /* STCF at time of tone */
--->  int16                 AtToneLeaps;    /* Leap Seconds at time of tone */
  int16                 ClockSetState;  /* Time has been ""set"" */
  int16                 ClockFlyState;  /* Current fly-wheel state */
  CFE_TIME_SysTime_t    AtToneDelay;    /* Adjustment for slow tone detection */
  CFE_TIME_SysTime_t    AtToneLatch;    /* Local clock latched at time of tone */
  CFE_TIME_SysTime_t    CurrentLatch;   /* Local clock latched just ""now"" */
  CFE_TIME_SysTime_t    TimeSinceTone;  /* Time elapsed since the tone */
  CFE_TIME_SysTime_t    CurrentMET;     /* MET at this instant */

} CFE_TIME_Reference_t;


FROM cfe master 90fdf9f 6.6 release, cfe_time_utils.h --- var name changed in header, but
not in cfe/fsw/cfe-core/src/time/cfe_time_tone.c:132:42
typedef struct
{

  CFE_TIME_SysTime_t    AtToneMET;      /* MET at time of tone */
  CFE_TIME_SysTime_t    AtToneSTCF;     /* STCF at time of tone */
--->  int16                 AtToneLeapSeconds;    /* Leap Seconds at time of tone */
  int16                 ClockSetState;  /* Time has been ""set"" */
  int16                 ClockFlyState;  /* Current fly-wheel state */
  CFE_TIME_SysTime_t    AtToneDelay;    /* Adjustment for slow tone detection */
  CFE_TIME_SysTime_t    AtToneLatch;    /* Local clock latched at time of tone */
  CFE_TIME_SysTime_t    CurrentLatch;   /* Local clock latched just ""now"" */
  CFE_TIME_SysTime_t    TimeSinceTone;  /* Time elapsed since the tone */
  CFE_TIME_SysTime_t    CurrentMET;     /* MET at this instant */

} CFE_TIME_Reference_t;


I do not see the issue with a linux build.  I think it might be associated with
#define CFE_PLATFORM_TIME_CFG_BIGENDIAN
The default is to #undef CFE_PLATFORM_TIME_CFG_BIGENDIAN - makes sense on linux/x86
But for vxworks/SPARC, I would think it should be defined.
""**      If this configuration parameter is defined, the CFE time server will
**      publish time tones with payloads in big-endian order, and time clients
**      will expect the tones to be in big-endian order. ""

vxworks/sparc will build if 
#undef CFE_PLATFORM_TIME_CFG_BIGENDIAN



","bug, good first issue",https://github.com/nasa/cFE/issues/259
Enforce Strict ASCII in Document Files,"This is an extension of the previous ticket.

With the creation of this ticket, #70 will have its scope reduced
to cover only the already integrated changes to source code, allowing
us to confirm that those changes are included in the CFE 6.6 release.

This ticket will continue to carry the task of enforcing Strict ASCII
for the remaining cases, which are all document files; this work will
take place after the CFE 6.6 release.
","bug, docs",https://github.com/nasa/cFE/issues/258
Enforce Strict ASCII in sample Makefile,"Update ""Makefile.sample"" in the sample CMake configuration area to include rules that allow running the ""badchar"" tool, to find nonportable text glyphs in files that we intended to be plain text.
",wontfix,https://github.com/nasa/cFE/issues/257
Improve doxygen for CFE SB MsgId wrappers,"It was noted when reviewing #248 that the MsgId wrapper functions could use some expanded doxygen documentation.
","bug, docs",https://github.com/nasa/cFE/issues/256
remove Doxygen-generated HTML files,"Currently, we keep a snapshot of the HTML files produced by Doxygen
in the Git repository. This is a potential source of problems as it
might be out of date.

It is the sense of the CCB that we should remove these from the Git
repository; instead, when we make a release, we will run the command
to generate them, and include the HTML tree in the published image.
","enhancement, docs",https://github.com/nasa/cFE/issues/255
SB Remove PrintMsgHdr Function,"The SB PrintMsgHdr function does not protect against accessing invalid memory.  In addition, this function is specific to debugging during development.  This code should not be used during flight and could be a risk to the system.  

It is recommended to remove this code and create a library for hosing debug functions and utilities.  This ticket will be used to remove the PrintMsgHdr function.  An alternate ticket will be created for developing a debug library.   ",bug,https://github.com/nasa/cFE/issues/254
Unit tests doing assignent instead of equality check,"When experimenting with #252, two test cases were also discovered where an assignment was being done rather than an equality check.

This is not a ""failure"", but rather these tests could never fail - it is defeating the purpose of the test case entirely.",bug,https://github.com/nasa/cFE/issues/253
SB Unit test failure on PowerPC target,"When reviewing the unit test results for the 5 test systems for the CFE 6.6 release, there was one unit test failure case.  On the 32-bit powerpc test target, this unit test failure was observed:

{{{
[ FAIL] 13.018 sb_UT.c:10406 - CFE_SB_MessageStringGet - Destination size = 0
}}}
",bug,https://github.com/nasa/cFE/issues/252
cFE 6.6 Documentation Updates,"This ticket will be used for all cFE 6.5 documentation updates including the VDD. A listing of the needed documentation updates will be added to this ticket as tickets, requiring code updates, are reviewed and determined there is an associated documentation change.",enhancement,https://github.com/nasa/cFE/issues/251
ES - Memory Pool Size No Longer Requires 32-bit Alignment,"The CCB approved commit under Trac #230 redesigned the ES memory pool to perform alignment in accordance with the base address vs. the size of the data pool.  This change affects ES requirement cES1321.1 which is no longer needed.  Instead a new error check is performed to ensure the size of the pool is not less than the minimum block size.  The affected requirement, along with its parent, is pasted below for reference.

cES1321: 

""cES1321 Upon receipt of a Request the cFE shall allocate a block of memory of the specified size from the specified Memory Pool.""

cES1321.1:

""cES1321.1 If the specified size is not an integral multiple of 32 bit words, the size shall be rounded up to an integral of 32 bit words.""


",bug,https://github.com/nasa/cFE/issues/250
Please provide va_list variants of variadic functions,"I've recently encountered a need to conditionally call `CFE_EVS_SendEvent` or `CFE_ES_WriteToSysLog` depending on the app's status. Unfortunately, both of these functions are variadic functions, and they can't easily be wrapped in another variadic function. 

The C standard library provides variants of its variadic functions that take a `va_list`. For example, `printf` has the `vprintf` variant.

Please provide similar variants for cFE's variadic functions. The implementation would be simple: the majority of the function's logic can reside in the `va_list` version, and the variadic function can become thin a wrapper around the `va_list` version.","enhancement, CFS-41",https://github.com/nasa/cFE/issues/249
Fix EDS discrepancies after #175 merge,"After merging #206, this changed some things in the CCSDS header and there needs to be a corresponding update to the EDS XML files and related items to ensure that the EDS actually matches the running code.

This change circles back to the EDS side and updates the XML files so they correspond to the code.",bug,https://github.com/nasa/cFE/issues/248
Table Services Task Pipe Function Incorrectly Handling Commands,"When calling the appropriate command message handler, the Table Services TaskPipe function is failing to pass the entire message to the command processing function, resulting in a truncated message.",bug,https://github.com/nasa/cFE/issues/247
Table services sometimes copies buffers to itself,"Running the TBL unit test in valgrind/memcheck reveals that under certain circumstances, the `CFE_TBL_UpdateInternal()` and `CFE_TBL_GetWorkingBuffer()` functions attempt to copy a buffer onto itself.

This is technically undefined behavior, as `memcpy()` requires that the source and destination not overlap.
",bug,https://github.com/nasa/cFE/issues/246
Type safety and improved handling of CFE_SB_MsgId_t values,"In 6.6, as we move to supporting MsgId's, MsgKey's, RouteIdx, and other types, we should move away from using native C types and wrapping the types in a struct to prevent accidentally using the wrong type in assignments and function calls.

This will, of course, require re-tooling any existing code that expects the type to be a simple type...

For example, instead of:

```
typedef uint16 CFE_SB_MsgId_t;

uint32 SomeFunction(CFE_SB_MsgId_t MsgId) {
    /* ... */
    return MsgId; /* this will work fine, even though it's bad behavior! */
}
```

Use:

```
typedef uint16 CFE_SB_MsgId_Atom_t;
typedef struct
{
    CFE_SB_MsgId_Atom_t __MsgId; /* private, do not touch */
} CFE_SB_MsgId_t;

uint32 SomeFunction(CFE_SB_MsgId_t MsgId) {
    /* ... */
    return MsgId; /* will now give a compiler error */
}
```
","enhancement, draco-rc1",https://github.com/nasa/cFE/issues/245
Update cFE Version Number for 6.6.0 Release,"This ticket will be used to update the version header file to update
the version number to 6.6.0 for test and release.
 
Once cFE version 6.6.0 has been populated to the master branch, this ticket will be used to set the version number to 9.9.9 to indicate the code is development code retrieved from the ""development"" branch.",,https://github.com/nasa/cFE/issues/244
Continuation of EDS integration for CFE,"Integrate the remaining EDS features which are not yet included as part of the CFE 6.6 release.

This is a continuation of #207 for the next CFE release.

Defects to resolve: #92, TBD
Enhancements to resolve: TBD",enhancement,https://github.com/nasa/cFE/issues/243
cFE TBL - Table Name Arrays Incorrectly Sized,"cFE TBL provides internal macros for appropriately sizing table names.  Table names are a concatenation of the AppName, delimiter, and TblName i.e. ""AppName.TblName"".  The size of the character array holding the table name needs to fall on a 4-byte boundary in support of the TBL registry.  The table names sent down in telemetry need to be sized accordingly using the CFE_TBL_MAX_FULL_NAME_LEN macro vs. the CFE_MISSION_TBL_MAX_NAME_LENGTH macro which is used to compute CFE_TBL_MAX_FULL_NAME_LEN.  

For reference, the internal table name length macro computations (defined in cfe_tbl.h) include:

/* Computation for maximum length allowed for a table name.  NOTE: ""+2"" is for NULL Character and ""."" (i.e. - ""AppName.TblName"") */
#define CFE_TBL_MAX_FULL_NAME_LEN_COMP (CFE_MISSION_TBL_MAX_NAME_LENGTH + OS_MAX_API_NAME + 2)

/* Ensure the table name falls on a 4-byte boundary */
#define CFE_TBL_MAX_FULL_NAME_LEN (((CFE_TBL_MAX_FULL_NAME_LEN_COMP + 3)/4)*4)

   ",bug,https://github.com/nasa/cFE/issues/242
typedef for status code types,"Most of the CFE code returns a status (e.g. CFE_SUCCESS, CFE_ERROR) and the function prototypes have return values of type ""int32"". It would greatly improve readability if the functions were defined to return a CFE typedef (CFE_Status_t?)

This would also allow for changing the type (int8 for low-resource environments?) But this is primarily aimed at code readability.",duplicate,https://github.com/nasa/cFE/issues/241
remove MESSAGE_FORMAT_IS_CCSDS ifdefs from CFS code,"Currently, most of the functions in cfe_sb_util.c and a few others are like:
{{{
void CFE_SB_InitMsg(void           *MsgPtr,
                    CFE_SB_MsgId_t MsgId,
                    uint16         Length,
                    boolean        Clear )
{
#ifdef MESSAGE_FORMAT_IS_CCSDS

    CCSDS_InitPkt ((CCSDS_PriHdr_t *)MsgPtr,(uint16)MsgId,Length,Clear);

#endif
} /* end CFE_SB_InitMsg */
}}}

It's confusing what else would be done in these functions (and nothing else is done.) As Joe said, if someone implemented a wholly different SB message format, they're likely to write their own set of functions and having a bunch of #if/elseif/elseif/elseif/endif blocks would be confusing and difficult to maintain.

The suggestion from the CCB today was to remove these #ifdefs. It might be worthwhile to put in a check at the top of the file that generates a compiler warning/error if it's not defined...",enhancement,https://github.com/nasa/cFE/issues/240
expose SB UseCount,"For my voter app, I am currently poking into the SB BufferD_t header on the buffers to increment/decrement the UseCount so that I can be assured that the buffer won't be reused. (This is only done during the vote, note between calls into the voter.)

Needless to say, there may be other uses for marking a buffer as being in use by code outside of SB.",duplicate,https://github.com/nasa/cFE/issues/239
cFE 6.6 Verification Testing Required for Release,This ticket will be used to document the cFE 6.6.0 verification testing that will be performed at each center and capture the results of each test.,bug,https://github.com/nasa/cFE/issues/238
Event messages generated during library init get dropped,"I have a CFE based project that uses multiple libraries, which are loaded in the startup script as a CFE_LIB rather than a CFE_APP.

Today I found that one of the library initialization routines was failing.  Despite generating an Event using CFE_SendEvent on the condition, no event was reported on the console.

The issue is that library init routines are called from the main thread context, and therefore not in the context of an Executive Services task.  This causes CFE_ES_GetAppId to fail - which is probably correct.

However this causes CFE_EVS to effectively drop the message on the floor, and it is entirely silent in this case.

This might be intended behavior but it caught me off guard since I got no output whatsoever.  One possible fix is to just stick to CFE_ES_WriteToSysLog during library init functions but perhaps we should consider having event services actually do this, so the message at least goes somewhere visible.
",bug,https://github.com/nasa/cFE/issues/237
Clean up unit tests to fully use new UT assert,"The unit tests in CFE were ported to use UT assert by ""bridging"" the existing code structure to the UT assert framework using some adaption layers, keeping the same basic API calls in the tests themselves.

This worked for the time but created a fairly ugly and confusing situation, with a number of wrappers.  Also, many global variables still remain that are no longer necessary, they are only remnants of the bridge logic.

The GHAPS project has done quite a bit of work to clean up the unit test code and remove the unnecessary glue logic, making the test code much cleaner.  It also provides a usable base for CFS application unit tests.",duplicate,https://github.com/nasa/cFE/issues/236
CFE SB and TIME components missing length verification on incoming messages,"As discussed during the 2017-09-22 CCB meeting, the Software Bus and Time subsystems within CFE are not checking the length of incoming messages.  

Executive Services and Event Services are both verifying that the length of the supplied message is sufficient before calling the handler.  Table Services also verifies the length using a different approach.  However SB and TIME have no validation, thereby theoretically allow a message that is too short to be passed to the handler, which could result in a crash.

This has always been the case, this is not a new issue.

Note that full EDS integration (a potential target for CFE 6.7+) provides length checking on all packets automatically.  So this already fixes the issue.  But there needs to be a decision made whether to implement an interim change here for CFE 6.6.",enhancement,https://github.com/nasa/cFE/issues/235
CMake script cleanup,"The CMake build scripts could benefit from some general cleanup prior to release of CFE 6.6.  In particular:

- Some comments are obsolete or incorrect
- There is some dead code or broken options present
- Some refactoring would improve readability and maintenance

The GHAPS project did some cleanup here and I will push a commit under this ticket containing the modifications",enhancement,https://github.com/nasa/cFE/issues/234
Clean up build warnings for CFE 6.6,"There are several warnings that appear in a build of the current development branch that should be cleaned up prior to the 6.6 release.

For instance:
{{{
fsw/cfe-core/src/es/cfe_es_api.c: In function ‘CFE_ES_GetAppID’:
fsw/cfe-core/src/es/cfe_es_api.c:748:11: warning: unused variable ‘TaskId’ [-Wunused-variable]
    uint32 TaskId;
}}}

There is also a cmake warning in new versions of the tool (v3.5+ which is in Ubuntu 16.04) and another const-ness warning regarding `CFE_TBL_DumpToFile` that shows up with -Wwrite-strings enabled.
",bug,https://github.com/nasa/cFE/issues/233
"SB - Add ""promiscuous"" pipe option","Particularly when debugging and diagnosing issues, it's useful to have an app that can capture all messages, no matter what is subscribed to by that pipe.",enhancement,https://github.com/nasa/cFE/issues/232
cFE time service should be endian-neutral,"Currently the cFE time service assumes time messages are in platform-endian format, which will cause headaches in mixed-endian environments. cFE time messages should standardize on one byte ordering (I suggest network-order, aka big-endian).",bug,https://github.com/nasa/cFE/issues/231
CFE_ES mempool returns buffers that are not aligned,"Per email from Ryan Prentice to the cfs-community mailing list on 7/25:

Issues with Tables containing doubles

I tracked this down to be a MemPool issue.  I’ve posted part of the stack trace below that is responsible for assigning memory from the mempool for the Table data.

 
CFE_ES_GetPoolBuf() - cfe_esmempool.c:389      
CFE_TBL_Register() - cfe_tbl_api.c:295   

Line 389 of cfe_esmempool.c sets the address of the pointer where the table data will be loaded.

{{{
         *BufPtr          = (uint32 *)(BdPtr + 1);
}}}
 

Below are some values I pulled out of the debugger.

{{{
BdPtr                  BD_t *                 0x42A6D100      
sizeof(*BdPtr)         unsigned long int      0x0000000C       
(uint32 *)(BdPtr + 1)  uint32 *               0x42A6D10C      
*BufPtr                uint32 *               0x42A6D10C      
}}}

In my table, the first piece of data is a double and the above code would have that double start at an address that is not double word aligned.  To test that this is in fact that location that the problem originates, I added four bytes to *BufPtr and set it to 0x42A6D110 in the debugger, forcing it to be double word aligned.  I then hit play and crossed my fingers, and what do ya know, it worked.  Adding an int32 as the first member of the table allowed me to proceed past the issue, but I feel like that is a very fragile solution.

 

Issues with SB Messages containing doubles

I’m getting unaligned memory exceptions when receiving a message that contained doubles from the SB.  It appears the Payload isn’t guaranteed to begin at a double word boundary.  There is no way to pad for this since the Payload is aligned sometimes and unaligned others.  I’ve pasted the stack trace below.

 ",bug,https://github.com/nasa/cFE/issues/230
Build failure when using std=c99,"A recent code change pushed to development may break the build for in certain configurations.  On my projects we generally build using the `-Wall -Werror -std=c99 -pedantic` flags, which used to work.  However the introduction of a binary constant broke it:

{{{
cfe/fsw/cfe-core/src/sb/cfe_sb_api.c: In function ‘CFE_SB_SendMsgFull’:
cfe/fsw/cfe-core/src/inc/cfe_sb.h:78:36: error: binary constants are a GCC extension [-Werror]
 #define CFE_SB_PIPEOPTS_IGNOREMINE 0b00000001 /**< \brief Messages sent by the app that owns this pipe will not be sent to this pipe. */
                                    ^
cfe/fsw/cfe-core/src/sb/cfe_sb_api.c:1320:31: note: in expansion of macro ‘CFE_SB_PIPEOPTS_IGNOREMINE’
         if(PipeDscPtr->Opts & CFE_SB_PIPEOPTS_IGNOREMINE)
                               ^
cc1: all warnings being treated as errors
cfe_core_default/CMakeFiles/cfe_core_default.dir/build.make:494: recipe for target 'cfe_core_default/CMakeFiles/cfe_core_default.dir/src/sb/cfe_sb_api.c.o' failed

}}}

",bug,https://github.com/nasa/cFE/issues/229
ES - Incorrect Use of CFE_SB_MessageStringGet Function in CFE_ES_ShellOutputCommand,"The calls to CFE_SB_MessageStringGet on lines 119 and 123 in cfe_es_shell.c are passing in an incorrect ""SourceMaxSize"" parameter causing the command to be truncated to 4 characters.  

Possible solutions are documented in the attached email thread.  The CCB will determine final solution. ",bug,https://github.com/nasa/cFE/issues/228
Add Option for MEDIUM_FORMAT Mode in EVS,"Event Services currently support configurations for long vs. short format event messages.  A medium format that includes the dynamic data out of the event text string, along with the time stamp, event type, processor ID, application name, and EID would be a useful addition to the set of EVS configurations.",enhancement,https://github.com/nasa/cFE/issues/227
checking return codes in CFE,"For example, in CFE_SB_CreatePipe, it calls CFE_ES_GetAppID but does not confirm that it returned CFE_SUCCESS. Should it check that return value? (The AppID is zeroed by GetAppID.) This could create a situation where an app creates a lock (and somehow an error is generated) and the app could not later delete the pipe as it does not ""own"" it.

It would be good to scrub all CFE code, looking for calls to internal functions that do not verify the return.

Also, what should be the behavior when these calls do not return CFE_SUCCESS? Should they generate events (when EVS may not be functional) or syslog messages or OS_printf?",enhancement,https://github.com/nasa/cFE/issues/226
"Add ""Maximum EID"" Comment to the Top of All cFE events.h Files","If a new event identifier (EID) needs to be added, and the best place for the event identifier is not at the end of the identifier list, developers may be inclined to renumber the preexisting EIDs to be in numerical ascending order with the new EID.  

Renumbering existing EIDs could break tools, tests scripts, etc.

It is recommended to comment all the cFE event.h files (as was done with sb_events.h under ticket #221) to alert developers on the max EID value in the file and how to number new EIDs using the max.",bug,https://github.com/nasa/cFE/issues/225
CFE_SB_CreatePipe should avoid nesting locks,"CFE_SB_CreatePipe calls GetAppID and GetAppName in a block of code that uses a lock to protect against concurrent modification. (Per recommendation from Joe) we should avoid nesting locks, so these calls should go outside the protected block.",bug,https://github.com/nasa/cFE/issues/224
CFE_ES_GetAppID should call CFE_ES_GetAppIDInternal,"Simplifies the code, ensures the same logic.",bug,https://github.com/nasa/cFE/issues/223
sb-stats telemetry packet is not time-stamped," A line was deleted at some point in the cfe_sb_task.c file that used to timestamp the sb-stats message before going out on the s/w bus.

The CFE_SB_SendStats() routine merely needs a line added back in:

    CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_SB_TaskData.StatTlmMsg);",bug,https://github.com/nasa/cFE/issues/222
option to not receive messages I send?,"I would like to have an app (detailed description below) that can publish messages with ID's that the same app is subscribed to. This would create loops and the app would have to mark messages to identify which it sent versus which were sent by other apps.

Given that the pipe has an app id, it would be easy to (in SendMsgFull) skip any pipes that have the same app ID as the caller. Can SB have a pipe option to not receive messages from the owning app?

Detailed description: I am writing a voting application for redundant processor/sensor environments. As a test framework, I would like to read packets on the SB and to make duplicate copies so that the voter would have redundant messages to vote on. I'd like the duplicate packets may have the same ID as the original message.",enhancement,https://github.com/nasa/cFE/issues/221
compile-time option to have CFE_SB_SendMsgFull() set timestamp,"I'd like to know (as accurately as possible) when a message was actually sent to the SB. Currently senders are responsible for setting the message timestamp prior to sending the message, so the timestamp may not have been set immediately prior to calling SendMsg(). A compile-time option to configure SendMsgFull() to set the timestamp would be useful in some environments (such as when testing in a realtime OS.)",wontfix,https://github.com/nasa/cFE/issues/220
add timestamps to EVS logging to stdout,Often it's useful to know the time a message is generated in the stdout log. Adding a timestamp to EVS_SendViaPorts() as an option would be helpful.,enhancement,https://github.com/nasa/cFE/issues/219
have an option to set the timestamp in CFE_SB_SendMsg,"Whether it be a compile-time option, a different function, or a parameter, it would be useful for specific timing testing to have telemetry messages timestamped by the SB code at the time the message is sent, rather than when the app calls SetMsgTime or TimestampMsg().",enhancement,https://github.com/nasa/cFE/issues/218
sb: compile-time option for routing table as a hash,"We've discussed how to handle a large number of subscriptions, one option would be to have the RoutingTbl be a hash instead.

This does have a performance impact on code that is heavily used, but in some environments memory is less of a concern so a large hash table could support a very large subscription base.

While I don't feel it would be wise to switch whole-hog, I propose that a compile-time option be available to configure the software bus to use a hash for the routing table, which gives users with larger subscription needs the option.",invalid,https://github.com/nasa/cFE/issues/217
SB - expose an API to increment/decrement the UseCount of the buffer,"Applications may want to retain the buffer provided by RcvMsg for longer than when the app makes the next call to the function. This should only require incrementing/decrementing the UseCount of the CFE_SB_BufferD_t structure that precedes the buffer, and there is currently a private function ""CFE_SB_DecrBufUseCnt()"" for decrementing this counter.

Can CFE_SB_DecrBufUseCnt() be made public, and a companion function of IncrBufUseCnt be added as well?",enhancement,https://github.com/nasa/cFE/issues/216
cFE Performance IDs are Private Definitions,"Performance identifier definitions should not be ""hidden"" in private header files.  They should be made public in a configuration file.

Attached email thread contains additional information on mission use case for need to change a cFE performance identifier value.",bug,https://github.com/nasa/cFE/issues/215
ES Shell Command Telemetry Timing is Hardcoded,"The CFE_ES_ShellOutputCommand hard codes a delay of 200 milliseconds to prevent flooding on large shell output messages over the software bus.  This delay should be configurable to allow greater flexibility and support on a wide range of platforms.  

The email thread that brings this issue to attention and starts the discussion on the solution is pasted below for reference:

From: cfs-community-ccb-bounces@lists.nasa.gov [mailto:cfs-community-ccb-bounces@lists.nasa.gov] On Behalf Of Strege, Susanne L. (GSFC-5820)
Sent: Tuesday, March 07, 2017 3:36 PM
To: NASA Core Flight Software Community Configuration Control Board Mailing List <cfs-community-ccb@lists.nasa.gov>
Subject: Re: [cfs-community-ccb] FW: cFE ES Shell Command Telemetry Timing

I’m in favor of removing the hardcoded hack and replacing with a platform configuration.  Unless anyone objects, I’ll write up a ticket and assign to the next release.

From: cfs-community-ccb-bounces@lists.nasa.gov [mailto:cfs-community-ccb-bounces@lists.nasa.gov] On Behalf Of Hickey, Joseph P. (GRC-LSS0)[ZIN TECHNOLOGIES INC]
Sent: Tuesday, March 07, 2017 12:37 PM
To: cfs-community-ccb@lists.nasa.gov
Subject: Re: [cfs-community-ccb] FW: cFE ES Shell Command Telemetry Timing

Seems pretty clear to me -- The API/prototype directly out of osapi-os-core.h is:
int32 OS_TaskDelay             (uint32 millisecond);

Inside the call, the milliseconds are then converted into whatever units the underlying OS uses to measure time passing.  For vxworks this is converted to ticks, but for other OSs like POSIX this is converted to nanoseconds for use with e.g. nanosleep().  All in all I think this is a perfectly fine example of an abstraction layer doing what it is supposed to do.  The only question is whether cfe_es_shell.c should hardcode it to 200ms -- this is very hackish to me.  On many systems it may not need a delay at all and could be 0.

But I agree, if there is any documentation out there which is describing the parameter of OS_TaskDelay as anything else, we need to fix that.  Wouldn't hurt to ask.
On 03/07/2017 12:27 PM, Limes, Gregory L. (ARC-TI)[SGT, INC] wrote:
Oops -- I forgot to confirm the units of the parameter ;)

So, what document do we need to fix, given that Saul was
under the impression that the parameter was in Ticks?

-- Greg Limes
work: gregory.limes@nasa.gov 
home: greglimes@gmail.com
cell: 850 459 6862
land: 850 681 2336
________________________________________
From: cfs-community-ccb-bounces@lists.nasa.gov [cfs-community-ccb-bounces@lists.nasa.gov] on behalf of Hickey, Joseph P. (GRC-LSS0)[ZIN TECHNOLOGIES INC] [joseph.p.hickey@nasa.gov]
Sent: Tuesday, March 07, 2017 09:22
To: cfs-community-ccb@lists.nasa.gov
Subject: Re: [cfs-community-ccb] FW: cFE ES Shell Command Telemetry Timing
The argument to OS_TaskDelay is in milliseconds, so I'm not sure where the concern arises?

I would support replacing the hardcoded ""200"" in cfe_es_shell.c with something more configurable, but I'm not sure that CFE_PSP_Get_Timer_Tick is the right answer either.  For instance on some PSPs that don't necessarily have direct access to this information, it returns 0.  Besides that, it is defined as returning the number of ticks per second (a rate), not a tick period, so it makes no sense to me to pass this value directly into OS_TaskDelay.

If anything, I would suggest making another platform configuration define, and just using it here i.e.:

OS_TaskDelay(CFE_PLATFORM_OS_SHELL_DELAY);

Then the users can set it to whatever they'd like.
On 03/07/2017 12:06 PM, Strege, Susanne L. (GSFC-5820) wrote:
This looks like a valid suggestion to me.  If others agree, I’ll put in a ticket and assign to the cFE 6.6.0 release.
 
From: Weiss, Saul H [mailto:saul.h.weiss@lmco.com] 
Sent: Tuesday, March 07, 2017 11:49 AM
To: Strege, Susanne L. (GSFC-5820) <susanne.l.strege@nasa.gov>
Cc: Hinz, David B. (JSC-GA111)[LOCKHEED MARTIN CORP] <david.b.hinz@lmco.com>; Clark, Ronald H <ronald.h.clark@lmco.com>
Subject: cFE ES Shell Command Telemetry Timing
 
Susie,
 
Reviewing the cfe_es_shell.c, I noticed the following call in CFE_ES_ShellOutputCommand:
 
                OS_TaskDelay(200);
 
My concern is that 200 is the default system tick hardcoded into the OSAL. So, this equates to a 1 second delay. We are using a different frame rate and so planned to use a different tick rate. I think the cfe_es_shell.c code should be updated to:
 
                OS_TaskDelay(CFE_PSP_Get_Timer_Tick());
 
Thoughts?
 
Saul H Weiss
Lockheed Martin
Space Systems Company
Orion VPUD CSCI CPE
(303) 971-9446
 

-- 
Joe Hickey
Software Engineer - ZIN Technologies, Inc.
Phone: 203.518.0270 / 718.935.0540
     ",enhancement,https://github.com/nasa/cFE/issues/214
dummy ticket for trac admin change check,"filing this dummy ticket to assure that adding someone
to the Default CC list for the a component actually causes
them to get copies of the bug.

this is necessary because, for some reason, the Components
edit panel in Trac is presenting many duplicate entries
and not adding the name to both duplicates.

",wontfix,https://github.com/nasa/cFE/issues/213
Add Software Bus Structures Reference Diagram to Doxygen Users Guide,The attached SB structures reference diagram should be made available in the user's guide.,invalid,https://github.com/nasa/cFE/issues/212
'printf': Mismatch between the type expected by the conversion specifier %x and the type of the argument.,"CFE_EVS_DisablePortsCmd calls EVS_SendEvent with a format string for printf that contains the %x specifier (cfe_evs_task.c:1002:9).  EVS_SendEvent is also a varargs function and is called in this case with a variadic argument of type unsigned char. This gets promoted via the default argument promotions to a value of type int (which is a signed type). However, EVS_SendEvent calls vsnprintf with the variadic argument list and the format specifier, which triggers undefined behavior because the %x specifier is expecting a value of type unsigned int. 

The fix is to add a cast to ""unsigned int"" in the call to EVS_SendEvent",bug,https://github.com/nasa/cFE/issues/211
no way to find an existing pipe ID by name,There is no way to find a pipe ID given a pipe name for an existing pipe.,enhancement,https://github.com/nasa/cFE/issues/210
Update cFE unit tests for cFE version 6.5.0,Update the tests using those from cFE 6.4.2 to run with cFE 6.5.0. Ensure that all lines of code and all branch paths are covered (or are documented if not).,,https://github.com/nasa/cFE/issues/209
Remove all MKS $log comments in file header prologs,"The git version control system eliminates the need to have ""change logs"" included in each source code file.  

The original cFS MKS change logs have been accumulating since 2006 making the source code files very lengthy.  The logs are outdated and of little practical use.  Now that the code is being maintained via git, the old MKS $log tags are no longer used.  

The old MKS $log tags and old MKS log information/comments should be removed from all source code files.

Note: This needs to be performed after ticket #142 changes have been merged to prevent any merge conflicts. ",bug,https://github.com/nasa/cFE/issues/208
CCSDS Electronic Data Sheet (EDS) integration,"Integrate Consultative Committee for Spacecraft Data Systems (CCSDS) Electronic Data Sheets (EDS) into the cFS tool chain and code base. An EDS is a formal machine readable (XML) specification of interfaces for both hardware and software components. The primary use cases are to support: 
a) Exchange of unambiguous interface definitions in a standard format between organizations (As CCSDS is an international standards body, organizations includes other international agencies, and industry partners)
b) Automatic generation of interface code, system models, system tests, and mission operational databases
c) Run-time support for Plug-and-Play systems

There are two CCSDS standards documents that specify the schema and terms to be used in the data sheets for cFS
1) XML Specification for Electronic Data Sheets for Onboard Devices and Software Components (CCSDS Blue Book 876.0) 
2) Specification for Dictionary of Terms for Electronic Data Sheets for Onboard Components (CCSDS Magenta Book 876.1)

This ticket is intended to address EDS use at the cFS message layer (Software Bus). Another major use is at the device layer (hardware component) which is the target of major studies at the European Space Agency, and the China Academy of Space Technology. The device layer use case will be a future cFS ticket.

",enhancement,https://github.com/nasa/cFE/issues/207
CCSDS APID Name Space Expansion,"Expand the cFS Software Bus topic name space using extensions to the CCSDS Space Packet secondary header. Within the cFS architecture the CCSDS Primary Header APID is used as a unique system-wide topic identifier.
This ticket is intended to address several issue with the current CCSDS Space Packet APID topic name space
1) Difficulties allocating and managing the limited number of APIDs during development
2) Insufficient number of APIDs for large systems
3) APID allocations for formation flying, distributed systems, multi-core, and partitioned systems
4) Loss of spacecraft and subsystem identifying information as packets traverse the network stacks

Implementation of the extended header will include a compile time directive to include or disable extended header support. See attached file for header format.

",enhancement,https://github.com/nasa/cFE/issues/206
Scrub All Verify.h Files,"From ticket #131:

A scrub of the cfe_xx_verify.h files is needed for all the services to ensure that the checks make sense and remove the checks that don't make sense, ensure the proper rationale is provided for all the checks that do make sense and possibly adjust their values.  
","enhancement, CFS-42",https://github.com/nasa/cFE/issues/205
Add Compile -Time Assert to Ensure 8-Bit Char Type,"Ticket #156 - JSC: change uint8 to char for strings in interface structures.  This change however, assumes use of the ""char"" data type as an 8-bit type.  This assumption is stated in the cFE doxygen and readme release notes however, this information could be missed by users.  Assumptions should always be explicit.  Adding a compile-time assert would be useful. 

It was recommended by the community CCB to place this assert in the cFE vs. the OSAL since the OSAL is not dependent on the char type being 8-bits.

The cfe_es_erlog.c file also contains a compile-time assert.  It is not a good practice to scatter/hide compile-time asserts across multiple source files.  It is highly recommended to move all cFE compile-time asserts to a separate/shared C file i.e cfe_compiletime_assert.c",enhancement,https://github.com/nasa/cFE/issues/204
Update Sample CMake configuration,"CFE includes a ""sample_defs"" directory containing a
sample configuration for CMake, which fell out of date
over time.

This needs to be updated.

This is an ex-post-facto report; we fixed this on the
fly while creating the 6.5.0 tarball; this ticket will
be used when cycling this hotfix back into development.",bug,https://github.com/nasa/cFE/issues/203
Process cFE Application Developers Guide with Doxygen to allow linkage to code/files,"As discussed at the 5-24-16 CCB meeting (reference cFS Systems Engineering Handbook discussion in the minutes), the cFE application developers guide contains a significant amount of API references.  Indirectly referencing the cFS API's in an external document is prone to error.  The API information should be referenced directly from the code.  It is highly recommended to move the Application Developers Guide to the cFE Doxygen User’s Guide.","enhancement, docs",https://github.com/nasa/cFE/issues/202
Doxygen generator code had gotten stale,"The CMake build system included some logic to support building the Doxygen-based CFE documentation.  However these rules had gotten out of date with respect to other changes that had gone into the build since they were written, and a couple variable name and path names need to be fixed.",bug,https://github.com/nasa/cFE/issues/201
cFE Cmake Does Not Build Out-of-the-Box,"The list of options included in the cmake/sample_defs directory are out of date.  These options have not been kept up with the cmake options that are defined in the test area used for the bamboo builds.
",bug,https://github.com/nasa/cFE/issues/200
cFE cES1515.1 Requirement Failure,"Requirements cES1515 and cES1515.1 state:

""cES1515 Upon a Processor Reset, the cFE shall create all operating system objects required by the
cFE.""

""cES1515.1 If the creation of the operating system object fails, the cFE shall perform a power on
reset."" 

To satisify this requirement, the CFE_ES_CreateObjects function makes a call to the CFE_PSP_Panic function in the case where the return from OS_TaskCreate != OS_SUCCESS.  The CFE_PSP_Panic function however, does not perform a power on reset.  It performs an exit(-1).  To correctly satisfy this requirement, ES needs to make a call to CFE_PSP_Restart with an input argument of CFE_PSP_RST_TYPE_POWERON to specify a power on reset.  This may not be the best solution.  It is recommended to reconsider this requirement.  It may be the best/required course of action to perform a power on reset following a processor reset if the creation of one of the cFE core application objects fails.  This may not be the best/required course of action if the creation of one of the applications listed in the ES startup script fails.

It should be noted that this requirement has not been properly handled in past releases of the cFE.  The call to the CFE_PSP_Panic function to satisfy this requirement has been in place since the initial release of the cFE.  It was recently found that the test to verify this requirement was faulty producing a false positive.",bug,https://github.com/nasa/cFE/issues/199
Additional CFE start up state for application sync,"Although the cFE 6.4.2 release improved synchronization during start up, it only implements a single state (`OPERATIONAL`) which is supposed to indicate when everything is ready.

However, this may not be sufficient for all applications.  Specifically, some applications have an ""early"" init in which its local data structures are all set to an initial state, followed by a ""late"" init that may require some communications with other applications or libraries.

An application would need to also complete this ""late"" initialization in order to be considered completely up and running.

Currently the start up sync only handles the early init; late init, if required, is generally done while in the ""operational"" state but this also a race condition in that requests can be made to an application that has not been fully initialized.

This race condition was observed in the EVA CWS project where one app needed to wait for other apps to be fully loaded before completing its initialization, so it was using `CFE_ES_WaitForStartupSync()` before doing its late-phase init.  But other applications (also using the same sync call) were calling other functions before the late-phase init had completed.

The solution is to add another CFE startup state for this late-phase init.  
",enhancement,https://github.com/nasa/cFE/issues/198
CFE_EVS_Register Filters argument should be of type CFE_EVS_BinFilter_t *,"If the Filters argument of CFE_EVS_Register is not null, it is always cast to ""CFE_EVS_BinFilter_t *"", the parameter should be of that type and not ""void *"". (If users want to pass another type that is compatible, they can cast on their call to make it explicit.) void * invites passing the wrong type of pointer.",bug,https://github.com/nasa/cFE/issues/197
Misleading cFE Doxygen: CFE_SB_DeletePipe,"During app development, a developer commented on the following:

''After testing, it appears that the comments in the CFE_SB_DeletePipe are 
not correct. All created pipes are automatically deleted on CFS shutdown 
and no app specific calls to CFE_SB_DeletePipe is required. Calling DeletePipe
in CleanupCallback function gives the following error:
''
{{{
EVS Port1 66/1/CFE_SB 54: Pipe Delete Error:Caller(CFE_EVS) is not the owner of pipe 9
}}}

The cFE Doxygen has:
'''int32 CFE_SB_DeletePipe	(CFE_SB_PipeId_t PipeId)'''
Description
    This routine deletes an input pipe and cleans up all data structures associated with the pipe. All subscriptions made for this pipe by calls to CFE_SB_Subscribe will be automatically removed from the SB routing tables. Any messages in the pipe will be discarded. '''Applications must call this routine for all of their SB pipes as part of their orderly shutdown process.'''


'''However,''' CFE_ES_CleanUpApp(uint32 AppId) calls CFE_SB_CleanUpApp(AppId) (in cfe_sb_priv.c) which deletes all of an app's pipes.  So when the app developer tries to do that same cleanup themselves they get an error.

It's a question of resource management.  How should the documentation be updated to tell the developer what to do?",bug,https://github.com/nasa/cFE/issues/196
cFE cES1702.3 and cES1703.3 Requirement Failures,"The original implementation to satisfy ES requirements cES1702.3 and cES1703.3 involved making a call to the cFE platform configuration variable CFE_ES_EXCEPTION_FUNCTION within the PSP.  Changes to the PSP have now resulted in the failure of these two requirements (requirement text is provided below for reference).    

cFE requirements should be satisfied within the cFE code base.

Failed requirements include:


cES1702.3 If the CPU exception was caused by the Operating System or cFE Core then the cFE shall initiate a <PLATFORM_DEFINED> response.

cES1703.3 If the Floating Point exception was caused by the OS or cFE Core then the cFE shall initiate a <PLATFORM_DEFINED> response.

  ",bug,https://github.com/nasa/cFE/issues/195
Add cFE ITOS Record Files,"Provide an initial release of cFE record files that define the cFE command and telemetry database for the ITOS ground system.

It is believed these record files are substantially correct and complete however, they have been tested only lightly.  It is important to get these files delivered with the next cFE so that they may be readily available for use and aid in fining errors or needed updates, documentation, etc.",enhancement,https://github.com/nasa/cFE/issues/194
CFE_ES_ShellOutputCommand is Truncating Output Filename,"In the CFE_ES_ShellOutputCommand, when a filename is passed into the function, the call to CFE_SB_MessageStringGet is truncating the input filename into the output filename variable.  

The truncation is occurring due to the sizeof the pointer to the input filename being used as the SourceMaxSize input in the call to the CFE_SB_MessageStringGet function on lines 99-102:

int32 CFE_ES_ShellOutputCommand(const char * CmdString, const char *Filename)
{

...

    else
    { 
        (void) CFE_SB_MessageStringGet(OutputFilename, Filename, NULL, sizeof(OutputFilename), sizeof(Filename));  
    }
",bug,https://github.com/nasa/cFE/issues/193
CFE_ES_DeleteChildTask SysLog Message/Comments are Misleading,"The CFE_ES_DeleteChildTask function validates the input parameter OSTaskID to ensure that it is an active task ID and a task ID that is in range.  This validation is performed in a single if statement.  If the validation fails, the sys log message (reported on line 1243) is not clear as to whether or not the failure was due to the ID being out of range or inactive.  The sys log message should state ""Invalid Task ID"" vs. ""Task ID is not active"".

Also, the comment starting on line 1253 should remove the ""(too large)"", as the out of range handling is now performed on lines 1238-1246.  ",invalid,https://github.com/nasa/cFE/issues/192
CFE_ES_ReloadAppCmd References Incorrect Data in Call to CFE_ES_ReloadApp,"In the CFE_ES_ReloadAppCmd function, the wrong data is being passed into the call to the CFE_ES_ReloadApp function.  The CFE_ES_ReloadApp function takes in the AppID and the name of the application file to load.  Instead of the filename being passed in, the name of the application is being passed in.

See code snippet below from cfe_es_task.c lines 1154-1160:

CFE_SB_MessageStringGet(LocalApp, (char *)cmd->Application, NULL, OS_MAX_API_NAME, sizeof(cmd->Application));

        Result = CFE_ES_GetAppIDByName(&AppID, LocalApp);

        if (Result == CFE_SUCCESS)
        {
           Result = CFE_ES_ReloadApp(AppID, LocalApp);",bug,https://github.com/nasa/cFE/issues/191
ES Unit Test Code Coverage Incomplete in apps.c,"cfe_es_apps.c - 98.23% coverage (8 Lines of Code NOT executed)

In CFE_ES_AppCreate:

-: 619: else /* Not a dynamic load - app must be statically linked into current exe */
-: 620: {
#4430987 621: StaticEntryPtr = (CFE_ES_AppStaticModuleApi_t *)EntryPointData;
#4430987 622: StartAddr = StaticEntryPtr->Ptrs.EntryFuncAddr;
#4430987 623: ModuleId = 0;
-: 624: }
23: 643: if (StaticEntryPtr != NULL)
-: 644: {
-: 645: /* Leave entry point / filename blank if static load entry */
#4430987 646: CFE_ES_Global.AppTable[i].StartParams.EntryPoint[0] = 0;
#4430987 647: CFE_ES_Global.AppTable[i].StartParams.FileName[0] = 0;
-: 648: }

In CFE_ES_LoadLibrary:

-: 932: else /* Not a dynamic load - library must be statically linked into current exe */
-: 933: {
#7210210 934: StaticEntryPtr = (CFE_ES_AppStaticModuleApi_t *)EntryPointData;
#7210210 935: FunctionPointer = StaticEntryPtr->Ptrs.LibInitFunc;
#7210210 936: ModuleId = 0;
-: 937: }

These lines of code can be covered in unit testing.",invalid,https://github.com/nasa/cFE/issues/190
EVS Unit Test Code Coverage Incomplete in Task.c (GSFC DCR 8492),"cfe_evs_task.c - 99.61% % coverage (2 Lines of Code NOT executed)

The lines not covered are in CFE_EVS_TaskInit:

        -:  385:   /* Register EVS task for event services */
        5:  386:   Status = CFE_EVS_Register(NULL, 0, CFE_EVS_BINARY_FILTER);
        5:  387:   if (Status != CFE_SUCCESS)
        -:  388:   {
    #####:  389:      CFE_ES_WriteToSysLog(""EVS:Call to CFE_EVS_Register Failed:RC=0x%08X\n"",(unsigned int)Status);
    #####:  390:      return Status;
        -:  391:   }

REASON: None",enhancement,https://github.com/nasa/cFE/issues/189
EVS - CFE_EVS_WriteAppDataCmd References Incorrect Variable in Call to OS_creat,"In the CFE_EVS_WriteAppDataCmd function, the wrong variable (uninitialized) is being passed into the OS_create function. LocalName (initialized via the call to CFE_SB_MessageStringGet) should be passed in to OS_creat rather than AppDataFilename. 

See code snippet below from cfe_evs_task.c lines 1852-1857: 
/* Copy the commanded filename into local buffer to ensure size limitation and to allow for modification */
CFE_SB_MessageStringGet(LocalName, (char *)CmdPtr->AppDataFilename, CFE_EVS_DEFAULT_APP_DATA_FILE,
OS_MAX_PATH_LEN, sizeof(CmdPtr->AppDataFilename));
/* Create Application Data File */
FileHandle = OS_creat(AppDataFilename, OS_WRITE_ONLY);",bug,https://github.com/nasa/cFE/issues/188
Incorrect leap seconds in docs,"Under the cFE User's Guide (Doxygen): Core Flight Executive Documentation » cFE Time Services Overview

file: cfe/docs/cFE UsersGuide/Doxygen/cfetimeugcomponents.html

...this sentence is now quite out of date:

""The initial count of leap seconds (10) was established in January of 1972, the first leap second was added to the initial count in June of 1972, and the current count of leap seconds is 33.""

We're up to 36 (https://en.wikipedia.org/wiki/Leap_second  - June 2016).  Consider revising the verbiage so we don't have to keep updating it.",bug,https://github.com/nasa/cFE/issues/187
Enhanced build version.h collisions,"The CMAKE build system CFE/cmake/version.cmake code generates a version.h file that overrides the version.h required to build for VxWorks. 

Suggested fix is to change the generated filename to cmake_version.h, and make the change to CFE/cmake/target/src/target_config.c to include the new filename ",bug,https://github.com/nasa/cFE/issues/186
SB Timeout Receive Unit Test Failure,"When running the SB unit tests via the ""classic build"", the SB is failing due to an unexpected return:

Unexpected return in timeout receive test, exp=-905969663, act=-905969662

The failure appears to be due to the unit test not setting the proper return value before the call to CFE_SB_RcvMsg.  In the sb_UT.c source code file in the Test_RcvMsg_Timeout function there is an #ifndef statement around the UT_SetRtnCode function that is blocking the return code from being set properly.",bug,https://github.com/nasa/cFE/issues/185
Fix git version strings built into executable,"The cmake build system includes version information acquired by running `git describe` in various source trees being used by the build.  These version strings are then linked directly into the output executable.

In testing the CFE 6.5 release I noticed that it wasn't quite working correctly.  The git revs were OK but it in some cases was referencing the wrong base tag or no base tag at all.

",bug,https://github.com/nasa/cFE/issues/184
Redundant Assignments and Unread Variables,"One common anti-pattern in cFS is to call functions that return
potential error codes, store the return values in variables, then
never bother to check the value of the variable.

cppcheck reports this as a redundant assignment.

Current cases in CFE:

(redundantAssignment)
{{{
cfe/fsw/cfe-core/src/evs/cfe_evs_task.c:1395: performance: Variable 'Status' is reassigned a value before the old one has been used.
cfe/fsw/cfe-core/src/evs/cfe_evs_task.c:1385: performance: Variable 'Status' is reassigned a value before the old one has been used.
}}}


(unreadVariable)
{{{
cfe/fsw/cfe-core/src/es/cfe_es_start.c:486: style: Variable 'status' is assigned a value that is never used.
cfe/fsw/cfe-core/src/es/cfe_es_api.c:469: style: Variable 'ReturnCode' is assigned a value that is never used.
cfe/fsw/cfe-core/src/es/cfe_es_api.c:1964: style: Variable 'Status' is assigned a value that is never used.
cfe/fsw/cfe-core/src/es/cfe_es_apps.c:740: style: Variable 'ReturnCode' is assigned a value that is never used.
cfe/fsw/cfe-core/src/es/cfe_es_apps.c:971: style: Variable 'ReturnCode' is assigned a value that is never used.
}}}

Not sure how we missed this in the 2016-04-12 sweep.
",duplicate,https://github.com/nasa/cFE/issues/183
cppcheck -  Strncpy-fills May Not Be Null Terminated,"This ticket will is addressing the following cppcheck warnings:

E-JA/cfe/fsw/cfe-core/src/es/cfe_es_apps.c:502: warning: The buffer 'RamDiskPath' may not be null-terminated after the call to strncpy().
/home/bamboo-remote-agent/bamboo-agent-home/xml-data/build-dir/CFS-CFSCFE-JA/cfe/fsw/cfe-core/src/es/cfe_es_apps.c:807: warning: The buffer 'RamDiskPath' may not be null-terminated after the call to strncpy().
/home/bamboo-remote-agent/bamboo-agent-home/xml-data/build-dir/CFS-CFSCFE-JA/cfe/fsw/cfe-core/src/es/cfe_es_shell.c:122: warning: The buffer 'Cmd' may not be null-terminated after the call to strncpy().
/home/bamboo-remote-agent/bamboo-agent-home/xml-data/build-dir/CFS-CFSCFE-JA/cfe/fsw/cfe-core/src/es/cfe_es_shell.c:96: warning: The buffer 'OutputFilename' may not be null-terminated after the call to strncpy().

4-8-16 - CCB meeting discussed solution to replace strncpy call with CFE_SB_MessageStringGet",bug,https://github.com/nasa/cFE/issues/182
Redundant Initializations,"If a variable is declared and initialized, then a value is
immediately stored in it, we get a warning. The redundant
initializer did not need to be added and we are removing them.
",bug,https://github.com/nasa/cFE/issues/181
shush cppcheck,"there are some specific places in the code
where we want cppcheck to not produce warnings,
without generalizing in any way to other code.

This involves inserting comments like
{{{
          /* cppcheck-suppress unsignedPositive */
}}}
",bug,https://github.com/nasa/cFE/issues/180
cFE 6.5 Verification Testing Required for Release,This ticket will be used to document the cFE 6.5.0 verification testing that will be performed at each center and capture the results of each test.,,https://github.com/nasa/cFE/issues/179
"ES - CreateChildTask API Function Does Not Use ""Flags"" Input Parameter","The API definition of the CFE_ES_CreateChildTask API function is:

int32 CFE_ES_CreateChildTask(uint32 *TaskIdPtr,
                             const char   *TaskName,
                             CFE_ES_ChildTaskMainFuncPtr_t   FunctionPtr,
                             uint32 *StackPtr,
                             uint32  StackSize,
                             uint32  Priority,
                             uint32  Flags)

The ""Flags"" input parameter which is intended to be used to pass into the OSAL OS_TaskCreate call, is not being used.  Instead the call to OS_TaskCreate hardcodes the OS_FP_ENABLED macro for the ""Flags"" input.

This implementation of the API is very misleading and limiting.

In addition, ES defines a ""Flags"" macro in the cfe_es_perf.h called CFE_ES_PERF_CHILD_FLAGS that is passed into the CFE_ES_CreateChildTask API function call when ES spawns a child task to write its performance log data to a file.  The flags used when creating child tasks need to be defined across all implementations vs. ""hidden"" in private cFE service header files.  This macro should be removed and replaced with an appropriate OSAL macro.  An accompanying OSAL ticket may need to be written to add all ""Flags"" options.","enhancement, CFS-40",https://github.com/nasa/cFE/issues/178
Update cFE Version Number for 6.5.0 Release,"This ticket will be used to update the version header file to update
the version number to 6.5.0 for test and release.  

Once cFE version 6.5.0 has been populated to the master branch, this ticket will be used to set the version number to 9.9.9 to indicate the code is development code retrieved from the ""development"" branch.",enhancement,https://github.com/nasa/cFE/issues/177
use the OSAL configuration file loader library,"The ES currently uses a combination of a simple file parser and calls to scanf. OSAL ticket 164 (https://babelfish.arc.nasa.gov/trac/cfs_osal/ticket/164) introduces a configuration file loading API. ES should move to using this API and ditch the awful scanf.

This is related to (instigated by) TRAC #159.",duplicate,https://github.com/nasa/cFE/issues/176
SMP: Thread safety issues in CFE_TIME around the Sync Callbacks,"The `CFE_TIME_RegisterSynchCallback()` and `CFE_TIME_UnregisterSynchCallback()` functions are not thread safe, as they do not utilize any sort of global mutex when searching the table.

These are called by applications during startup, which is exactly the situation where multiple threads __might__ be calling these functions at the same time.

Furthermore, `CFE_TIME_NotifyTimeSynchApps()` does not protect against a callback being unregistered at the same time a tone message comes in.



",bug,https://github.com/nasa/cFE/issues/175
ES does not check target file existence before attempting to reload an application (GSFC DCR 145460),"If the following command is sent:

/FSW_ES_RELOADAPP APPLICATION={application},APPFILENAME={file}

and if the file does not exist, the application will be deleted but cannot be reloaded.

This is because ES does not check to see if the file exists first.
This and any other ES command that requires file existence should check for the file existence before attempting to do operations on the application.
",bug,https://github.com/nasa/cFE/issues/174
Refactor CFE_ES_AppCreate and CFE_ES_LoadLibrary,"These functions actually perform 3 major operations:

* Calling `OS_ModuleLoad` to load the module

* Calling `OS_SymbolLookup` to find the entry point / init function and calling that entry point / init function.  (For apps this also involves `OS_TaskCreate` here whereas a library init function is called directly)

* Manipulate the internal CFE ES Global tables to store the data related to the application/library


These major functional items should be broken into separate functions.  This will make `CFE_ES_AppCreate` and `CFE_ES_LoadLibrary` much cleaner looking and remove the overloads needed to support static loading as in ticket #115.




",enhancement,https://github.com/nasa/cFE/issues/173
"Unsafe macros, investigate conversion into Inline functions","
Some places in CFE -- notably, in ccsds.h -- there are macros
that do things like this:

{{{
    #define CCSDS_WR_APID(phdr,value) \
      ( (phdr).foo[0] = (value >> 8), \
        (phdr).foo[1] = (value & 0xFF) )
}}}

This means that if ""value"" is an expression, odd things happen
when the macro is expanded. This appears in many places in ccsds.h
and we need to do a scan of other headers as well.

It needs to be:
{{{
    #define CCSDS_WR_APID(phdr,value) \
      ( (phdr).foo[0] = ((value) >> 8), \
        (phdr).foo[1] = ((value) & 0xFF) )
}}}
This change needs to happen for all the places where a macro
parameter is an operand in an experession, and does not yet
have parens around it.

UPDATE 2017-10-27: CCB recommends that in many cases we would
benefit from changing these macros into C99 ""inline"" functions,
so this ticket is being hijacked!
",bug,https://github.com/nasa/cFE/issues/172
"EDS: The ES ""LoadLibrary()"" call - avoid duplicates and pass ID","The `CFE_ES_LoadLibrary()` call currently does not check if a library with the same name is already loaded.  It should probably do this, and if a duplicate is found it should return an error code indicating that the library is already loaded.

In the same area, the Library ID should be passed to the init function so any data structures/api calls associated with the library can be properly tracked in case the library is unloaded in the future.",enhancement,https://github.com/nasa/cFE/issues/171
Clean up ES startup object table,"In reviewing #159 it was determined that a better approach to changing the type of the ""StackPtr"" field would be to do some more general cleanup here and remove the unused field.

",enhancement,https://github.com/nasa/cFE/issues/170
FS - ExtractFilenameFromPath Function Needs Revision,"The ""StringLength"" variable defined in the FS ExtractFilenameFromPath function does not meet MISRA standards (6.3 Typedefs that indicate size and signedness should be used in place of the basic numerical types).  The simple solution (shown in ticket #159), ""Replaced casting from int to size_t as must store return of strlen."", resulted in an additional ""Correction"" variable which in turn may result in an infinite loop.  It is recommended to rewrite this function.   ",enhancement,https://github.com/nasa/cFE/issues/169
Possible buffer overrun in format strings used for scanf,Particularly in `CFE_ES_ParseFileEntry()` this uses the %s to read strings into fixed length buffers.  There is a possibility of overrun if the actual string exceeds the allocated size.,bug,https://github.com/nasa/cFE/issues/168
cFE 6.5 Documentation Updates,"This ticket will be used for all cFE 6.5 documentation updates including the VDD.  A listing of the needed documentation updates will be added to this ticket as tickets, requiring code updates, are reviewed and determined there is an associated documentation change.  ",enhancement,https://github.com/nasa/cFE/issues/167
"SB: ""cfe_sb.h"" should not depend on cfe_platform_cfg.h","The public include file `cfe_sb.h` currently includes `cfe_platform_cfg.h` within it.

However, nothing within cfe_sb.h actually depends on the macros in this file.

Usage of `cfe_platform_cfg.h` macros should be limited to CFE itself; however, CFS apps may include `cfe_sb.h`.  Having the platform config included like this can cause problems for apps as it prevents them from building in a platform-config-agnostic way.
",bug,https://github.com/nasa/cFE/issues/166
Allow C99 code in CFE.,"Update compiler flags to allow C99 code to be used
everywhere in CFE",bug,https://github.com/nasa/cFE/issues/165
CFE_ES_AppCreate does not unload an object file if the entry point is not found,"The function CFE_ES_AppCreate is used for the ES API and the ES command interface to load and start a new application. If the entry point for the new application does not exist in the object file for the application, the function returns an error, but does not try to unload the object module. This leaves the system with a loaded object module that is not tracked by the cFE. In addition the OSAL still has an entry for the object module, and will reject another attempt to load the same file, with the same module name.

Action: Fix the code in CFE_ES_AppCreate to unload the object file in the event the entry point symbol is not found.
",bug,https://github.com/nasa/cFE/issues/164
"Add explicit ""return"" after functions that are not supposed to return","Function calls such as `OS_TaskExit()` do not normally return, except when running with a ""stub"" implementation during unit test.

To keep the testing accurate, these functions should be immediately followed by an explicit ""return"" statement so that any instructions later in the function will **NOT** be executed.",bug,https://github.com/nasa/cFE/issues/163
JSC: Update CFE unit tests,Roll-up of all JSC changes to the CFE unit tests,bug,https://github.com/nasa/cFE/issues/162
JSC: Add L/U/UL suffixes to literal values,"Add an ""L"", ""U"", or ""UL"" suffix to all literal values and macro constants in CFE","bug, wontfix",https://github.com/nasa/cFE/issues/161
"JSC: Add ""void *"" casts","Add explicit `(void *)` casts where ever a local object is being passed into a function that accepts a void pointer.

","bug, wontfix",https://github.com/nasa/cFE/issues/160
JSC: Type correctness fixes,"Use the correct types for interacting with the system library.

* Use `size_t` to store results from functions such as `strlen()`.
* Use correct type when calling `scanf()` 

Elsewhere, where //NOT// interacting with the system library, use fixed-width types instead of native types.

",bug,https://github.com/nasa/cFE/issues/159
Fix size check in CFE_ES_InitializeCDS(),"In the `CFE_ES_InitializeCDS()` function, the pool size is computed by the following code:
{{{
CFE_ES_Global.CDSVars.MemPoolSize = CDSSize - CDS_POOL_OFFSET - sizeof(CFE_ES_Global.CDSVars.ValidityField);
}}}

However, if the passed-in ""CDSSize"" is actually smaller than the sum of these two constants, then the size will wrap and become very large.

This code must first check that the passed-in size is not smaller than this constant, if it is, the subtraction shouldn't be done.
",bug,https://github.com/nasa/cFE/issues/158
Fix potential issues in ES_CleanUpApp(),"In `CFE_ES_CleanUpApp()` there are two issues:
* The `MainTaskId` may be deleted twice.  It may first be deleted when deleting the child tasks, then it is deleted again later in the function.
* It calls `OS_ModuleUnload` unconditionally.  It is possible that this is //not// an external application, for instance if it is a core application then it was not loaded from a module and the contents of the `ModuleId` field are not valid.



",bug,https://github.com/nasa/cFE/issues/157
JSC: change uint8 to char for strings in interface structures,"Use the `char` type when storing strings, rather than `uint8`",bug,https://github.com/nasa/cFE/issues/156
JSC: Update code constructs to MISRA recommendations,"* Modify loops to //not// use `continue`
* Do not modify loop control variables within the loop, use break instead
* Make sure all `else if` constructs have final `else`
",bug,https://github.com/nasa/cFE/issues/155
JSC: Remove unnecessary cast on OS_write,Cleanup - remove unnecessary cast on OS_write() call,bug,https://github.com/nasa/cFE/issues/154
"Add missing "".Payload"" structure member designations","The `.Payload` structure access was missing in certain conditionally-compiled code paths within `cfe_time_tone.c`.

This caused compilation failure when these options were enabled and the compiler attempted to build this code.
",bug,https://github.com/nasa/cFE/issues/153
Replace OS_ConvertToArrayIndex() with a macro,"JSC has noted that the compiler for their VxWorks target does not understand the C99 ""inline"" keyword.  

An inline function had been used as a compatibility bridge for the ""-ng"" versions of OSAL that require additional work to convert an OSAL ID to an array index.  Compilation was failing on this declaration.

Rather than making this an out-of-line function (the easiest approach) it would be cleaner and less of a performance hit to replace this direct call with a macro.  The macro can either call the conversion function or be a pass through.  
",bug,https://github.com/nasa/cFE/issues/152
"resolve ""-m32"" CFE classic build issues","The classic CFE build historically built for 32-bit x86 linux,
on 32-bit x86 linux build machines.

Building on a 64-bit x86 Linux server requires the use of the ""-m32""
flag, but ONLY when the target is the classic 32-bit x86 linux. This
also requires that the server has 32-bit goodies, often ""multilib"" is
the thing you need to google if this is busted.

Currently, inserting this flag where it is missing or removing it where
it is present requires editing files, which is a speedbump for developers
and a blocker for automatic systems when building both 32-bit x86 and
any other target.

Need to set up the classic makefiles so that we default to -m32 not being
present, and allow it to be inserted on demand from the command line or
via an environment variable (at the developer's option, both need support).",bug,https://github.com/nasa/cFE/issues/151
cppcheck a vxworks build,"I need to go through the somewhat manual (for now) process
of grinding out some cppcheck results for ""development"" cFS
on our lab machine that has VxWorks capability.",,https://github.com/nasa/cFE/issues/150
Improve cppcheck configuration for CFE,"The initial level of support for ""cppcheck"" within the CFE build plan is a simple implementation using default checking, widened to maximize coverage but not otherwise tuned.

While any individual mission or project using CFS may decide to do this work, this is only mildly in their direct interest, but it is very much in the interest of the CFS Community as a whole that it gets done.

We can make cppcheck more useful, both for checking the CFE core applications themselves and for checking code that uses them, by setting up a configuration file that tells cppcheck as many details as possible about the intended interfaces. For example:

- indicating functions that acquire and release resources so that cppcheck can attempt to report failures to release a resource; this is not just memory allocation but includes lock aquisition and anything else managed using one function to acquire (or open or connect ...) and another to release (or close or disconnect).

- indicating where a function requires that a pointer, passed as a function parameter, must point to initialized memory, so that cppcheck can report things like ""trying to strcopy where the source array has not been initialized.""

There are other details we can also express in the cppcheck library configuration file, generally of flavor similar to the above.
","enhancement, build-system, continuous-integration",https://github.com/nasa/cFE/issues/149
CFE_ES_GetAppName() undefined output when failure occurs,"The `CFE_ES_GetAppName()` function is reasonably well defined - it sets the AppName output buffer and returns `CFE_SUCCESS` when everything went well, and it also nicely ensures that the output buffer is null terminated with the specified output buffer size (all good things).

== PROBLEM: ==
Most callers of this function do not check the return code.

`CFE_ES_GetAppName()` does not touch the output buffer in case of failure (any return code other than `CFE_SUCCESS`) and this would mean that the output may not be null terminated at all, or may be left with garbage from a previous value.

Some callers explicitly add a null char to the buffer at the last position in the buffer, but this still leaves the possibility of treating a buffer full of garbage (or the previous value) as the correct value.

== PROPOSAL ==
As a near term fix `CFE_ES_GetAppName()` should return an empty string in addition to the error code.

",bug,https://github.com/nasa/cFE/issues/148
printf format specs need to be cleaned up,"There are many cases like this, where the variable to print is a different type than the format.   Many of these have simply been casts to get rid of the compiler warning, but the format spec is what probably really should be fixed to match the type.

For example, CFE_SB_GetCmdCode() returns a uint16, the format spec would more appropriately be %u, rather than %d. In this case, a large, valid, command code will get printed out as a negative value, which will be confusing, because command codes are not negative values.

CFE_EVS_SendEvent(CFE_SB_BAD_CMD_CODE_EID,CFE_EVS_ERROR,
                     ""Invalid Cmd, Unexpected Command Code %d"",
                     (int)CFE_SB_GetCmdCode(CFE_SB.CmdPipePktPtr));

There are many cases like this through out cfe that need to be reviewed and cleaned up.",enhancement,https://github.com/nasa/cFE/issues/147
Standardize Version Numbering (in CFE),"Bring version number management within CFE into line
with the cFS standards documented at

https://babelfish.arc.nasa.gov/trac/cfs_test/wiki/ReferenceVersion

",bug,https://github.com/nasa/cFE/issues/146
ES unit test failing on x86_64 due to uint32 memory handle,"Another case of a `uint32` being used to store a memory pool handle, which fails when running the unit tests on a 64-bit build.

Using the `CFE_ES_MemHandle_t` typedef instead solves the problem.
",bug,https://github.com/nasa/cFE/issues/145
Copies to/from message payloads should use the sizeof() operator where possible,"When reading/writing software bus message payloads, strings must be always char[] arrays (not pointers) by definition.  Many times these these are defined as something like:
 `char MyString[SIZE_MACRO];`

and later they are filled using something like:
 `strncpy(Message->MyString, Source, SIZE_MACRO);`

However, instead of using the `SIZE_MACRO` in the runtime code, it is more future-proof to use the `sizeof()` operator to get the array size.  This is particularly true when the payload structures are generated from an EDS (electronic data sheet) since there may not even be a simple macro to use in that case.  

The `sizeof()` operator will always work even if the size is a hardcoded value or the macro name changes in a future version.


",enhancement,https://github.com/nasa/cFE/issues/144
Simplify Function Pointer Manipulations,"There are a number of places within the CFS Projects where the usage of Function Pointers is somewhat obfuscated by the inclusion of redundant operators. Removing those operators can improve the clarity of the code.

The redundancies are based on code that, when written, did not properly base itself on the following aspects of Function Pointers in the C programming language.

1. Function names decay into Function Pointers in the same way
   that Array names decay into pointers to their first elements,
   which means that an `&` operator is redundant when setting a
   pointer to point at a function. For the classical example of
   this, see most `qsort` examples, where no `&` is applied to
   the comparison function when passing it as the last argument,
   which has type ''pointer to function...''

2. The function call operator `(`''args''`)` operates on a
   function pointer -- so every function call you see actually
   is invoking the above decay semantics. This means that
   the `*` operator is ''not'' needed when calling a function
   via a function pointer. Happily, this also often means that
   you also do not need an extra level (or two?!) of parentheses
   to asure that the `*` is applied to the function pointer and
   not to the return value.

3. Calling a function pointed to by a structure member is a
   very common operation, and with the above in mind, note that
   there is no parsing or evaluation order ambiguity; no extra
   parentheses are required to assure that `.` and `->` and the
   function call operator are evaluated in the proper order.

My task -- embodied in this ticket -- is to seek out cases in
the CFE source code where redundant operations are applied
to function pointers (at assignment sites ''and'' at call sites),
and provide recommended changes to improve clarity.

Specific examples will accumulate in the Comments below.

Ticket to be closed when my scan of the project is complete,
and all call sites have been resolved (whether the resolution
is to improve them now, file a ticket for later improvement,
or where we will be leaving the code unchanged).

''(This also makes the code robust against the rare but troublesome
case where an external function changed from a function to
a function pointer ... we may never do this, but it is always
good to foster good code hygene.)''","enhancement, CFS-40",https://github.com/nasa/cFE/issues/143
Naming convention for macros in cfe_mission_cfg and cfe_platform_cfg,"The `cfe_mission_cfg.h` and `cfe_platform_cfg.h` files contain numerous macros for tuning CFE to the jobs that need to be performed.

The two files have different scope: 
* `cfe_mission_cfg.h` is shared by all CPUs within the spacecraft/mission
* `cfe_platform_cfg.h` is specific to a single CPU within the spacecraft/mission.

It is important that the scope of these definitions is well defined and used consistently throughout the code.  A naming convention should be introduced so that it is clear when reading the code whether the macro has mission-level or platform-level scope.
",enhancement,https://github.com/nasa/cFE/issues/142
ES - Recursive Exit Application Error Message,"ES will continually send out event message #79 - ""ES_ProcControlReq: Unknown State ( %d ) Application %s"", with the unknown state set to 1, when an application exits via the CFE_ES_ExitApp() API function call. See attached email thread for more details.",duplicate,https://github.com/nasa/cFE/issues/141
ES Performance Child Task Priority Is Not Configurable,Task priorities should not be hidden read-only cFE files.  It is recommended to place all cFE application and task priority settings in the platform configuration file.,bug,https://github.com/nasa/cFE/issues/140
TBL - Dump Table Registry Data Command Can Hog CPU (GSFC DCR 23031),"The GSFC NICER FSW team discovered that it takes approximately 1 second to process the Dump Table Registry command when there are 250 RTS tables and that lower priority tasks generate various error events related to not getting an opportunity to run. Adding a platform configuration definition to insert task delays into the process loop will increase the time necessary for CFE_TBL to finish the command but will allow lower priority tasks to run while the command is being processed.

Also, creating some test code that puts performance markers around the file i/o calls within the command processor may identify where the bulk of the command process time is spent. It may be possible to reduce the command execution time by optimizing the command handler code if the bulk of the execution time is not being spent inside the file system.","bug, cFE-TBL",https://github.com/nasa/cFE/issues/139
SB - Duplicate Pipe Creation Causes Failure to Delete Pipe (GSFC DCR 22934),"When a Software Bus pipe is created, the SB service will assign a new pipe ID to the system. If the same pipe is created again, SB will change its pipe ID and prevent the original pipe from being deleted. See attachments for more detail.",bug,https://github.com/nasa/cFE/issues/138
CCSDS header file macro CCSDS_INC_SEQ generates a compiler warning when referenced (GSFC DCR 22932),"The macro CCSDS_INC_SEQ defined in ccsds.h generates a compile time warning because it calls the macro CCSDS_WR_SEQ with 2 arguments.  The first argument is ""phdr"" which is ok, but the second argument is ""CCSDS_RD_SEQ(phdr) + 1"" which is not ok.  The problem is that the second argument results in code that looks like (x + 1 >> 8), which is unclear.
Putting ""CCSDS_RD_SEQ(phdr) + 1"" inside parens results in code that looks like ((x + 1) >> 8) which is ok.

Change macro CCSDS_INC_SEQ
 
from:
{{{
#define CCSDS_INC_SEQ(phdr) CCSDS_WR_SEQ(phdr, CCSDS_RD_SEQ(phdr)+1) 
}}}
to:
{{{
#define CCSDS_INC_SEQ(phdr) CCSDS_WR_SEQ(phdr, (CCSDS_RD_SEQ(phdr)+1))
}}}
",bug,https://github.com/nasa/cFE/issues/137
cFE Does Not Meet Double Floating Point Alignment Requirements on PPC440x5 Book E Architecture (GSFC DCR 22813),"The PPC440x5 architecture requires double floating point values to not cross 16 -byte boundaries.

The cFE services use 4 -byte alignment and forces DFPs to be non 8 -byte aligned. ",duplicate,https://github.com/nasa/cFE/issues/136
Possible Buffer Underrun in cfe_fs_decompress.c [MMS-IVV-013] [OBS-1238] [GSFC DCR 22838],"Source Code File: cfe\fsw\cfe-core\src\fs\cfe_fs_decompress.c 
Line 530 
Output from Code Analysis tool: ""Buffer overflow, array index of 'x' may be outside the bounds. Array 'x' of size 17 declared at line 367 may use inde""
    
{{{
530  while ( ( i & ((1 << w) - 1) ) != x[h] ) { 
531      h--;  /* don't need to update q */ 
532      w -= l;   
}}}

The array x could be under run if h attains a value of -1. This will occur if the condition does not evaluate to true before h is decremented below 0. This could also lead to an infinitely executing loop.",bug,https://github.com/nasa/cFE/issues/135
"Remove ""cpu"" directories from fsw/platform_inc","Keeping separate cpu directories in fsw/platform_inc is redundant, unnecessary, and prone to error when the platform configuration files need to be updated. It is recommended to remove the cpu directories and maintain only one copy of the cfe_platform_cfg.h and cfe_msgids.h files.",bug,https://github.com/nasa/cFE/issues/134
ES Creates Redundant Sys Log Entries When Creating ER Log Entries (GSFC DCR 22768),"For most of the reset cases, ES will create an entry in the Exception and Reset Log ( ER Log ) and it will also create a Syslog entry. Both the ER Log and Syslog are stored in the preserved RAM on a platform, so it is probably not necessary to create the redundant Syslog entries.
 
Determine the impact to unit and build tests, and remove the duplicate Syslog entires for resets.",enhancement,https://github.com/nasa/cFE/issues/133
Table Services Name Buffer Overflow,"Table Services adds an asterick character to the end of the table name whenever a table is modified. If a table is modified often, the name grows to fill up the table services name buffer.

It is recommended to only place one asterick character followed by an incrementing counter to indicate the number of times the table has been modified. This solution should be discussed and agreed to by the CCB.

",invalid,https://github.com/nasa/cFE/issues/132
Update CFE_ES_SYSTEM_LOG_SIZE Verify to Allow Larger Sys Log Files (GSFC DCR 22684),The ES verify.h file will only allow a max sys log file of 16384 bytes.  There is no documented rational for this limit. ,bug,https://github.com/nasa/cFE/issues/131
TBL - Update Table Services to Send Messages to Notify Applications of Pending Table Updates (GSFC DCR 22622),"Table Services requires applications to periodically call an API function to perform a check for a possible table update or validation request. Polling for changes to tables can be CPU intensive, especially for applications containing a large number of tables such as the Stored Command application. Table changes should be event driven. It is recommended to update Table Services to send a software bus message(s) that applications would subscribe to to be notified when there is a pending table update or validation request. This update will require an additional message ID for each application using a table.",duplicate,https://github.com/nasa/cFE/issues/130
SB - Add Last Pipe ID and Msg ID to Routine Telemetry for Diagnosing Message Limit Error and Buffer Overrun Errors (GSFC DCR 22081),Often the SB Message Limit Error and Buffer Overrun Error event messages are filtered. In order to help diagnose these SB issues it would be helpful to include the last Pipe ID and Message ID associated with these errors in routine telemetry.,enhancement,https://github.com/nasa/cFE/issues/129
EVS - Add Configuration To Output Events Upon Command Message vs. Function Call (GSFC DCR 22080),"The GSFC MMS FSW team ran into a problem when several events were being output by high priority tasks. 

A recommended solution to this problem is to create a configuration for EVS to send a specified number of events at a specified periodic rate. Adding additional event filtering capabilities should to address this issue should also be looked into.",wontfix,https://github.com/nasa/cFE/issues/128
Add support to allow SBN to pass sender information across the network (GSFC DCR 22063),"A cFE interface is needed to allow SBN to pass sender information (ProcessorID, Application Name) across a network.
 
One proposed change is a new private function called CFE_SB_PassMsgWithSenderID. This function will be needed by SBN ONLY. The CCB should discuss how this function can be used by SBN and blocked from being called/used by other applications. Analysis is needed to determine the best solution.",wontfix,https://github.com/nasa/cFE/issues/127
ES - RegisteredTasks Counter Does Not Decrement When Child Tasks are Exited (GSFC DCR 21771),"The GSFC GPM project team reported that the ES ""RegisteredTasks"" counter was not decrementing when a child task exited. The CS code was examined to ensure the needed ES API calls were being made. It was confirmed the CS child tasks make the ES API call to CFE_ES_ExitChildTask. The CFE_ES_ExitChildTask API function does decrement the RegisteredTasks counter on line 1337 however, this step is performed only if conditional checks are passed.",invalid,https://github.com/nasa/cFE/issues/126
ES - Add Ability to Recreate the RAM Disk via Command (GSFC DCR 21594),"The ES startup creates and initializes the RAM disk. If the RAM disk becomes corrupted there is no ground interface provided to recreate the RAM disk.
 
During GSFC GPM TV testing, a RAM disk corruption was experienced. A processor reset was needed in order to restore the RAM disk to an operational state. See the attached PFR description for more details.",enhancement,https://github.com/nasa/cFE/issues/125
Executive Services always creates tasks with floating point enabled (GSFC DCR 21293),"cFE ES calls the OS_TaskCreate to create a cFE task or Child Task. OS_TaskCreate takes a parameter called ""flags"" that currently supports OS_FP_ENABLED. This flag will tell the host OS that the task should be created with a floating point context.

In each place where the cFE ES app calls OS_TaskCreate, it hard-codes OS_FP_ENABLED.
 
Some tasks and applications may not be able to use a floating point context, so we need to examine why this flag is not an option and what can be done to fix it.
 ",duplicate,https://github.com/nasa/cFE/issues/124
cFE Time subsystem has calls to OS functions that do not exist for non-default configurations,"In the cFE Time subsystem, there are a couple of calls to functions that do not exist: OS_GetLocalMET and OS_SetLocalMET. These calls are conditionally compiled by a configuration parameter, and probably not used often.

Note: GSFC's MMS FSW uses these functions and had to provide them.",bug,https://github.com/nasa/cFE/issues/123
CFE_ES_ProcessCoreException and CFE_ES_ResetCFE are not ISR safe (GSFC DCR 18593),"The functions CFE_ES_ResetCFE and CFE_ES_ProcessCoreException are not ISR safe. They must be called from the context of a running task.
 
In GSFC's MMS FSW, sometimes and exception can occur from an ISR. When this happens, the CFE_ES_ProcessCoreException code will not work, since it has multiple calls to take a semaphore.  

Similarly, the CFE_ES_ResetCFE cannot be called from an ISR to reset the system, as it will hang.
 
This needs to be addressed with a long term solution or strategy for current and future platforms.
 
For MMS, it may be fixed by simply handling the exception completely within the PSP.

For future releases of the cFE we need to look at possibly re-writing the CFE_ES_ProcessCoreException and CFE_ES_ResetCFE functions to be ISR safe.",duplicate,https://github.com/nasa/cFE/issues/122
ES - Invalid Memory Handle When Restarting/Deleting an Application with Tables (GSFC DCR 14483),"When you delete an application that uses tables (e.g. HK) and then restart another task (e.g. SC) for a second time, the ES task writes to the system log that there are invalid memory handles.
 
Seems like when tables get unregistered is where the errors are happening. Message says it got a bad pointer for this table, not sure if the app in messed up. This problem is not isolated to RestartApp. It occurs in DeleteApp as well. What it looks like is that the linked list is not getting cleaned up properly when an app is deleted or restarted.
 
Further investigation in the CFS Lab narrows the problem down to the RemoveAccessLink function in cfe_tbl_internal.c. The errors are being generated on table handles from the deleted app. The buffer that is trying to be placed back into the pool is set to NULL because it has already been put back into the pool. The tables that were ""cleaned up"" still contain the AppID of the deleted app. When the subsequent app is restarted, its AppID becomes that of the deleted app and inherits the table handles from the previous app. For example, the HK app has 2 tables and the SC app has 73 tables. When HK is deleted, the 2 tables are removed and the entries still contain the AppID of HK. When SC is restarted, it becomes the AppID that HK was. The reason the errors occur on the 2nd restart is because on the first restart SC had a unique AppID. On the second restart, it has inherited HKs original AppID. In this case, you will see 2 sets of errors when SC is restarted. The SC application did not show any adverse functionality because of these errors. All that is happening is that the PutPoolBuf function is reporting an error when trying to return a NULL buffer to the pool.",bug,https://github.com/nasa/cFE/issues/121
ES Does Not Check CFE_PSP_MemRead8 Return Code,The ES API functions need to properly alert users of errors.  The CFE_ES_CalculateCRC API function will not alert users if an error code was returned from the call to the CFE_PSP_MemRead8. ,invalid,https://github.com/nasa/cFE/issues/120
"Update ""cfe-OSS-readme.txt""","The OSS Readme file was updated when the CFE 6.4.2 Hotfix release tarball
was prepared for and distributed to SourceForge, but the updated text was
not then also stored in the cfe/docs directory.

This commit captures the updated Readme text from the OSS tarball and
places it in the cfe/docs tree.
",bug,https://github.com/nasa/cFE/issues/119
CFE_ES_SYSTEM_LOG_SIZE update makes CFE_EVS test fail,"The change made to CFE_ES_SYSTEM_LOG_SIZE in the CFE 6.4.2 Hotfix release
causes the CFE_EVS test to fail.

The test case that fails is case 01.008 where the size of the ES reset area is jammed
to zero using a stub and CFE_EVS_EarlyInit is called.

The tested behavior is that a specific string is printed via the System Log output
which has been mocked. The mock does an exact string compare of the data
against a fixed set of patterns.

Because the size of the structure has changed, the exact content of the error message
has been modified and the message is no longer being recognized by the Syslog Printing
mock, and the test then does not know that the correct condition was trapped.
",bug,https://github.com/nasa/cFE/issues/118
Correction of an infinite loop in cfe_sb_task.c,"In CFE_SB_SendRtgInfo() the case where (pd == NULL) followed by continue will result in an infinite loop.  

the proper correction is to replace the continue with a break, so that the loop is exited on an error.

The correction was made in the following changeset, as part of static code analysis changes:  

commit: [changeset:59640e0]",bug,https://github.com/nasa/cFE/issues/117
Add UT assert stubs to CFE,"=== History ===

As part of OSAL tracs [cfs_osal:57] and [cfs_osal:17], the basic UT assert framework was integrated into OSAL so that it will be available for all unit testing.  The OSAPI stub functions were also added as a side library distributed wit",enhancement,https://github.com/nasa/cFE/issues/116
Support for statically linked CFS applications,"Some platforms (RTEMS, for example) do not natively support the concept of dynamic module loading.  Even on platforms that do offer this feature, it is sometimes beneficial to statically link anyway, at least in certain circumstances, since there is some extra runtime overhead when using a dynamically linked library vs. a statically linked library.

This will add the build infrastructure to do this, along with the necessary hooks to include statically linked modules into the PSP as well as CFS applications and libraries.

See also [cfs_psp:3] for the PSP enhancement to work with this.




",enhancement,https://github.com/nasa/cFE/issues/115
Default Configuration Setting for CFE_ES_STARTUP_SCRIPT_TIMEOUT_MSEC is Too Big,"The CFE_ES_STARTUP_SCRIPT_TIMEOUT_MSEC default configuration setting is currently set to 30 seconds.  A full cFS system typically takes ~1 second to launch and initialize the cFE and all applications.  The cFE ""out-of-the-box"" open source release package initializes in less than a second.  Having the system wait 30 seconds causes the software to appear as though it is hung.  It is recommended to set the default for this configuration to  1 second.  Projects with a larger application base can configure accordingly.  ",enhancement,https://github.com/nasa/cFE/issues/114
Make compiles with --std=c99 work,"CFE has historically attempted to be strict ANSI C90, with
obvious exceptions for cases where the code needed to use a
facility that did not yet exist.

Compile with --std=c90 if you want to see these.

The default compilation we do now does not specify that the
code should be strictly conformant to any standard, so what
we get in practice is GCC's C90 with extensions.

Turning up all the warnings using
{{{
gcc -W -Wall -Wextra -pedantic
}}}
will include a large number of very useful static code
analysis checks, but will warn about the use of C99
facilities that we want to use.

What I propose to do is to run a set of trial builds
where the build script adjusts the compiler flags,
on the fly (no commits), to be:
{{{
gcc --std=c99 -O3 -g -W -Wall -Wextra -pedantic
}}}

This asks GCC to do as thorough a job as it can do to report
any of our code that deviates from `INCITS ISO/IEC 9899:1999`.

Our code does require use of facilities not specified in C99,
and these facilities should be enabled, where necessary, by
the use of the appropriate Option Feature Macros. I anticipate that
this will only require certain specific source files to have
an annotation (before the `#include` lines) that they are to
be considered to contain `XOPEN` or `POSIX` standard sources
at a specific level of those standards.

See also OSAL ticket [cfs_osal:79]

",,https://github.com/nasa/cFE/issues/113
CFE_ES_SYSTEM_LOG_SIZE Default Value is Too Small,The default value for the CFE_ES_SYSTEM_LOG_SIZE is set to 2K (2048).  This is not large enough to hold all the cFE startup system log entries.  It is recommended to increase this 1K larger (default 3072) ,bug,https://github.com/nasa/cFE/issues/112
Integrate CFE_TIME with OSAL timebase API,"The enhancement that adds ""timebase"" functions to OSAL was approved and merged in [cfs_osal:15].

With this feature, CFE_TIME can now set up its own 1Hz callback function.  This is the final/complete solution to the race condition issue described in [cfs_psp:23], because CFE TIME can request the 1Hz callbacks after the rest of initialization is fully complete (and not before that time).

",enhancement,https://github.com/nasa/cFE/issues/111
Fix build failures on RTEMS,"There are two issues that cause a build failure when using a recent RTEMS toolchain/library:

* {{{MSG_DONTWAIT}}} now //is// defined by the library headers.  This is re-defined in {{{fsw/cfe-core/src/inc/network_includes.h}}} - possibly an older library did not define this?

* {{{putchar()}}} is a defined as a macro, but the {{{fsw/cfe-core/unit-test/osprintf_priv.h}}} file has a function prototype for this which conflicts.  This function prototype really should not be here.

",bug,https://github.com/nasa/cFE/issues/110
cFE TIME unit tests break when different configuration options are used,"When using the unmodified sample version of the {{{cfe_platform_cfg.h}}} file, the test cases defined in {{{time_UT.c}}} all pass.

But if the user makes any time-related modifications to the platform config file, many of the unit test cases break.  In particular, configuring a time server vs. time client or setting SRC_MET == TRUE, etc.

The test cases in ""time_UT.c"" need to include/accommodate other valid configuration options.","bug, unit-test",https://github.com/nasa/cFE/issues/109
Remove depenedencies on SOFTWARE_BIG/LITTLE_BIT_ORDER,"Any usage of SOFTWARE_BIG/LITTLE_BIT_ORDER is an indicator of a problem area as code is ported to additional platforms.  Code should be written endian-neutral wherever possible.

The {{{SOFTWARE_BIG_BIT_ORDER}}} and {{{SOFTWARE_LITTLE_BIT_ORDER}}} are not reliable, as they assume this value based on the BSP type but that is not always correct.  For instance, the pc-linux BSP assumes SOFTWARE_LITTLE_BIT_ORDER but in fact that BSP is also fully applicable to big-endian platforms running linux as well.  Some architectures (MIPS, ARM, etc) have both big- and little- endian modes of operation which further invalidates this macro.  

In fact the C standard does not specify any portable way to determine endianness at //compile time//, however runtime checks using a union are fairly easy and reasonably portable where it is absolutely necessary to do something different.
",enhancement,https://github.com/nasa/cFE/issues/108
CFE is closing filehandles that were not opened,"The new unit tests are catching errors where CFE is closing filehandles that were never successfully opened.  It is actually passing an OS error code (not a filehandle) into {{{OS_close()}}}.

The ""real"" OSAL should notice this and do nothing, but the unit test is strict about this and this does cause UT to fail.  



",bug,https://github.com/nasa/cFE/issues/107
"Submit cFE 6.4.2 Test Artifacts, User's Guide, and Documentation","Submitting:

1. cFE 6.4.1 test report, log, and data files to the /test-and-ground/test-review-packages/Results directory

2. Update test procedures to the /test-and-ground/asist/local/prc directory

3. Updated doxygen user's guide files to the /docs/CFE UsersGuide/Doxygen directory

4. Unit test results to the /fsw/cfe-core/unit-test/XXResults directories (where XX is the name of the cFE service)

5. Version Description Document to the /docs directory",enhancement,https://github.com/nasa/cFE/issues/106
CFE ES unit test failures caused by startup sync fix,"The startup sync fix (#71) caused some unit test failures.

This is due to the fact that the counters never get incremented as expected, since this is done by the child thread.  Therefore the verification that the child thread actually started cannot be unit tested.

As an interim fix this check will be removed from the main code. This will make unit tests pass in 6.4.2.  Ironically, this is making the main code slightly less robust in order to appease unit tests.

In the future a unit test ""hook"" function can be implemented for {{{OS_TaskCreate()}}} that imitates the counter increment so the startup verification can be but back in at that time.

","bug, wontfix",https://github.com/nasa/cFE/issues/105
"CFE ES Mempool code uses ""uint32"" where it should be ""cpuaddr""","Fix a leftover case of using uint32 where the intent is to store a memory address.  This is the start address in the ""Pool_t"" structure.",bug,https://github.com/nasa/cFE/issues/104
Update CFE unit tests after rebase of OSAL ticket 17,"Previously, CFE ticket #63 was implemented which was based on the proposed unit test framework implemented within OSAL [cfs_osal:17].

The unit test framework has since been revisited and the related OSAL ticket has been rebased accordingly.

Unfortunately, this broke some items that had been done originally within trac #63.  Trac 32 can no longer be rebased since it is merged in ""development"" already, so this ticket will fix the unit test breakage.",bug,https://github.com/nasa/cFE/issues/103
Failure to test should be FAIL,"The bamboo test plan does not currently complain if it is
unable to stage and run unit tests on a target, for the
simple reason that our test list is currently entirely
driven by parsing results returned by the target.

If the target VM is offline (as it was last weekend),
there are no indications that the test programs did not
run, and the presence of a few test results (the ones from
static analysis) keeps Bamboo happy.

The plan itself, or its top level scripts (same thing), needs
to keep track of the list of test programs, and generate
test failure reports for any such program for which it
does not obtain results.
",bug,https://github.com/nasa/cFE/issues/102
SB Only Increments Message Sequence Count Where There are Subscribers,"In the current implementation of the Software Bus, sequence counter management is handled in the routing table.  The routing table only includes entries that have subscribed messages.  This results in the sequence counter being incremented only if there are subscribers to a message.  If a message is unsubscribed to and then resubscribed, the sequence counter will be reset to zero.

A message sequence count should reflect the production of the message vs. the receipt of a message.  One use case for this implementation is to support the filtering of a message via the sequence count.

APL/SPP project implemented a solution to increment the sequence count upon production of the message regardless of whether or not there are any subscribers.  The solution involved removing the sequence count table from the routing table.  This exact solution may not support the new/expanded APID/message ID name space.  Expanding the message ID name space will need to be considered when implementing the overall solution to increment the sequence count to reflect message production.     ",bug,https://github.com/nasa/cFE/issues/101
SB Pipes are not protected.,"It is possible for a task to fetch messages from an SB Pipe
that was created by some other task, and this can happen
easily if someone fetches using ZERO as the pipe ID.

This prevents the consumed message from arriving at its
intended destination.

Note that applications fetching from the wrong Message ID
might notice this issue if they are reporting the receipt
of messages with unexpected Message ID numbers.

Solving this may require some attention to use cases where
a pipe is created by one task, to be used by another.

We may also want to think about the use case where multiple
tasks fetch messages from a single pipe, with the *intention*
that messages go to one of the several tasks. Is this use
case sufficiently interesting to offset the complexity of the
code required to support it?
",enhancement,https://github.com/nasa/cFE/issues/100
"cfs.mak assumes directories, fails with git","(Working with SourceForge release.)

The cFE/build/cfs.mak file assumes that some empty directories already exist and fails when they don't.  Git doesn't allow empty directories to be committed (without special help).  This problem is hit when the SourceForge cFE tarball is put under a git repo.

The proposed patch below removes this assumption and makes the build more robust.

{{{
--- a/cFE/build/cfs.mak
+++ b/cFE/build/cfs.mak
@@ -38,8 +38,10 @@ cfs_copy_core_incs::
        @echo "">>> [PRE-BUILD] COPYING HEADER FILES FROM <CFS_MISSION> CORE <<<""
        @echo """"
        @echo ""Copying <CFE_FSW>/mission_inc/*.h to <CFS_MISSION_INC>""
+       @mkdir -p $(CFS_MISSION_INC)
        @-cp -f $(CFE_FSW)/mission_inc/*.h $(CFS_MISSION_INC)
        @echo ""Copying <CFE_FSW>/platform_inc/<CFE_CORE_PLATFORM_INC_SRC>/cfe_platform_cfg.h to ./inc""
+       @mkdir -p ./inc
        @-cp -f $(CFE_FSW)/platform_inc/$(CFE_CORE_PLATFORM_INC_SRC)/*.h ./inc
        @echo ""Copying <OSAL>/build/inc/osconfig.h to ./inc""
        @-cp -f $(OSAL)/build/inc/osconfig.h ./inc
@@ -51,6 +53,7 @@ cfs_copy_app_shared_incs::
        @echo "">>> [PRE-BUILD] COPYING HEADER FILES FROM <CFS_APP_SRC>/INC <<<""
        @echo """"
        @echo ""Copying <CFS_APP_SRC>/inc/*.h to <CFS_MISSION_INC>""
+       @mkdir -p $(CFS_MISSION_INC)
        @-cp -f $(CFS_APP_SRC)/inc/*.h $(CFS_MISSION_INC)

 #-------------------------------------------------------------------------------
}}}",duplicate,https://github.com/nasa/cFE/issues/99
cFE build makefile doesn't copy core binary,"I am using a Makefile to build a platform and then copy the build products to another location off the BUILD_PATH.  I set the BUILD_PATH, CFE_EXE, CFS_PROM, CFS_PROM_APPS, and CFS_RAM makefile variables.  

The build proceeds and the cFE APPS and tables are properly copied to the desired locations.  But not the actual core cFE binary, it was ignored.  A prior version of this (or another?) build Makefile used to properly copy the core binary.  (I'm using the SourceForge release.)

For consideration, the fix I made in my (disconnected project) was:
{{{
diff --git a/cFE/build/cfs.mak b/cFE/build/cfs.mak
@@ -256,6 +256,7 @@ cfs_copy_installs::
        -chmod 644 $(CFS_EXE)/*.scr
        @echo """"
        @echo "" >> Copy Files <<""
+       -cp -f $(CFS_EXE)/*.$(CFE_CORE_EXE_TYPE) $(CFS_PROM_APPS)
        -cp -f $(CFS_EXE)/*.$(CFS_APP_EXE_TYPE) $(CFS_PROM_APPS)
        -cp -f $(CFS_EXE)/*.tbl $(CFS_PROM_APPS)
        @echo """"
}}}",duplicate,https://github.com/nasa/cFE/issues/98
Minor fixes for cmake unit test build,"The CFE unit test build was assuming the use of ""-pg --coverage"" options for gcc.  Most targets do support this for coverage analysis however some do not (RTEMS, for example) as the runtime component of this feature may not be present in the target's c library.  Therefore the UT build currently fails for these targets.

Also, the OSAL build scripts have a feature to allow installation of the unit test executables to the target binary directory.  This is based on the value of a cmake variable called ""INSTALL_TARGET_LIST"", but the current build scripts are not setting this variable.

This ticket will
* Generate an appropriate value for INSTALL_TARGET_LIST
* Use the UT_C_FLAGS as computed by the OSAL build
* Add an ""install"" line for the CFE unit tests as well

These are all fairly minor changes and only affect unit test.
",bug,https://github.com/nasa/cFE/issues/97
Some symbols not making it into final core executable file,"In the current ""cmake""-based build scripts, the final cfe core executable file is missing symbols that are not directly referenced in other parts of CFE.  A notable example of this is {{{CFE_TBL_Register}}}.

Because these are defined in a shared library, the linker is simply not including them as they do not serve to define any unresolved symbols from the linker's point of view.

The {{{-rdynamic}}} option is already being used, but it does not apply since the CFE core code is in a static library.

There are several approaches to this problem:

1. Use the {{{MODULE}}} library type instead of making a static library for the CFE core.  This way the {{{-rdynamic}}} export option will be applied to all the cfe code as it should be and therefore all functions included in the final link.  **This is the correct, officially supported solution** but it requires cmake v2.8.8+ (released 2012).  However RHEL still includes a very old version of cmake from 2009 with their distribution so going this route forces users of RHEL to go to other sources for a newer cmake.

2. Use the {{{--whole-archive}}} linker option to force the linker to include all objects from the CFE core, PSP, and OSAL libraries during the link.  This works, but the {{{--whole-archive}}} is specific to the GNU ld linker and is unlikely to be supported on any other linkers.  However, it appears that all targets supported by CFE use the GNU ld linker so this may not be a problem.

3. Create a ""fake"" function that calls all external functions, which causes them to be undefined and therefore included in the link.  This does not change linker options or build scripts so should work with ANY linker and the old version of cmake, but it wastes some memory as this function is still loaded into memory, and it will require maintenance to keep it up to date.





",bug,https://github.com/nasa/cFE/issues/96
Suspicious implementation of SHORT_FORMAT mode in EVS_SendPacket(),"This code sequence occurs within the {{{EVS_SendPacket()}}} function:

{{{
/* (LSW) Is the intent to write the event text to the log but not the SB msg ??? */

   if (CFE_EVS_GlobalData.EVS_TlmPkt.Payload.MessageFormatMode == CFE_EVS_SHORT_FORMAT)
   {
      /* Send an empty message if short format is enabled */
      EVS_PktPtr->Payload.Message[0] = '\0';

/* (LSW) This is pointless -- why bother to send a buffer with an empty string ??? */

   }
}}}

It appears that someone (LSW?) already noticed the strangeness here some time prior to the 6.4.1 release.

The intent here may have been to send only the Event ID and omit the actual string, since most event ID's have fixed strings with them.

However, the length of the actual packet (in the CCSDS header) is never adjusted, so although the first character of the message payload is overwritten with a NUL, **the full message payload is still sent on the software bus** so there is absolutely no benefit to doing this in the current form.


",bug,https://github.com/nasa/cFE/issues/95
"EVS ""output ports"" should be a function of the PSP","Currently the EVS has 4 ""output ports"" implemented as functions within EVS: {{{EVS_OutputPort1(), EVS_OutputPort2(), EVS_OutputPort3(), EVS_OutputPort4()}}}

These are all **identically hard coded** to {{{OS_printf()}}}

The premise here seems logical -- to have several different destinations that the message may be sent.  But the current implementation does not allow for that to really happen.

The proposal is to change this to a PSP implementation:

{{{CFE_PSP_SendEventToPort(uint32 PortNum, const char *Message);}}}

This single API could be used for all ports, and the PSP could switch based on the ""PortNum"" value if needed, or simply call {{{OS_printf}}} for all messages as it does in the current code.


","enhancement, CFS-41",https://github.com/nasa/cFE/issues/94
Clean up EVS ports implementation,"Fix a few minor issues with EVS ports implementation:

1. Although a macro is used when checking bits of the ""OutputPort"" mask, the value is still effectively hard coded with the shift, so the macro cannot change without also breaking these checks (violates the spirit of using the macro to begin with).  A simplification of the conditional will allow them to change independently (just mask and non-zero):
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L831-L847
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_task.c#L885-L901
https://github.com/nasa/cFE/blob/73c338d544f85cb0c1a97b743d3ae9f7a35039b5/modules/evs/fsw/src/cfe_evs_utils.c#L469-L502

2. When sending to multiple ports, the (essentially) same snprintf() is done for each one and only one digit in the string changes.  Would be way more efficient to construct the later half of the string once, and change the port number.

The first issue should be resolved prior to integration with EDS as those macros become part of the EDS.  Therefore they should be changeable without breaking the implementation that uses them.  The second issue is just a performance/size enhancement.

","enhancement, CFS-41",https://github.com/nasa/cFE/issues/93
CFE_SB_GetMsgTime() and CFE_SB_SetMsgTime() do not handle byte-swapping on _EL platforms,"Assuming CCSDS telemetry packet secondary header timestamps should be big-endian format, on little endian platforms (when _EL is defined), CFE_SB_SetMsgTime and CFE_SB_GetMsgTime should swap bytes for proper time interpretation.",bug,https://github.com/nasa/cFE/issues/92
Fix startup file pathnames in CMake version of the sample configurations,"The cmake install currently does not create an extra /apps/ subdirectory to install the files.  This makes it incompatible with the current platform config file that specifies the startup file to be:

{{{/cf/apps/cfe_es_startup.scr}}}

With the current installation script it should simply be:

{{{/cf/cfe_es_startup.scr}}}

This change only affects the sample configurations, nothing in the runtime code.


",bug,https://github.com/nasa/cFE/issues/91
Unit Test Stub Function UT_GetActualCmdCodeField Not Restored with CCSDS Secondary Header (GSFC DCR 23036),"A change was made to the format of the cFE CCSDS command secondary header to enforce the header to be in big endian in cFE 6.4.1. The cFE unit test stub function UT_GetActualCmdCodeField was updated accordingly. 

The change to the cFE CCSDS command secondary header was restored to the original definition of the header in cFE 6.4.1. The cFE unit test stub function UT_GetActualCmdCodeField however, was not restored. The original code for this function is attached.",bug,https://github.com/nasa/cFE/issues/90
Exiting an Application Creates an Application with an Unknown State (GSFC DCR 23035),"ES will continually send out event message #79 - ""ES_ProcControlReq: Unknown State ( %d ) Application %s"", with the unknown state set to 1, when an application exits via the CFE_ES_ExitApp API function call. See attached email thread for more details.",bug,https://github.com/nasa/cFE/issues/89
Fix ES unit test failures,"The current ES unit test has a number of failures that need to be addressed.

File attached showing current unit test report file with 27 failures.
",bug,https://github.com/nasa/cFE/issues/88
Clean up massive number of warnings in sb_UT.c,"The {{{sb_UT.c}}} file generates hundreds of warnings in the build, mostly about incompatible types within printf-style calls.

This prevents building with -Werror, and also makes it really difficult to work with the file in general since Eclipse marks nearly every line as a warning.",bug,https://github.com/nasa/cFE/issues/87
Many command processors in CFE do not confirm null-termination of strings within the message,"Across all CFE/CFS applications, many message definitions contain strings as ""char[]"" arrays.

However, very few CFE command processors confirm that these strings are actually null terminated within the allotted length before passing them to other CFE functions and/or C library functions such as ""strcmp"", ""strlen"", etc.

The CFE architecture needs to clearly define the rules here and also be consistent when following them.

",bug,https://github.com/nasa/cFE/issues/86
Pre-CMake fallback build script needs updating.,"Provision was made in the build system for building with
either the classical build tree (tools/gsfc_build) or
the modern CMake based system. Mainly this was put in place
back when CMake was coming on line, and has not been used
or maintained since the CMake support became part of the
baseline ""development"" tree.

This facility was recently activated by the HOTFIX 6.4.2
integration candidate, and could use some attention.

We should also consider activating the Bamboo job that applies
the pre-CMake build script to post-CMake branches, if we want
to make sure that the classical build keeps working in
parallel with the CMake build. Or not, if we want to be more
aggressive about pushing people forward into the brave new
world of better build systems ... yeah, a CCB decision.
",bug,https://github.com/nasa/cFE/issues/85
File operations in CFE_ES_ShellOutputCommand() need cleanup,"This function can be simplified and also made more robust.

* Does unnecessary copying of the input parameters.  

* Does NOT always ensure proper null termination of the inputs.  (Copying strings could be justified if it was to ensure null termination of the inputs).  The ""CFE_ES_ShellCmd"" function that is calling this should ensure null termination but it does not.

* Matching of the ""ES"" special commands needs improvement - It will not run any OS command that happens to start with ""ES_"", and it will also not handle it correctly if one happens to be a substring of another but not a complete match.

* It does not check the return codes from either ""OS_read"" or ""OS_write"" calls and assumes they all work perfectly - the correct operation of this function, in fact, does depend on them all working perfectly.  In the worst-case scenario, a benign failure of an OS_write() call could have a cascade effect causing a later OS_read() call to block indefinitely.

* The return value of OS_lseek() is not properly checked.  It also relies on having an OS implementation of lseek that can accurately ""measure"" the size of the file.  Not all filesystems/file types are seekable in this nature.

* It will not work with any ""special"" file or file system that doesn't support seeking or read/write file handles (such as a pipe).

* It unnecessarily extends the file on disk to add up to 3 extra spaces, which is only to coax the message generator loop into producing an extra message.

* Overall, the loop that is generating the telemetry messages can be simplified quite a bit.

* The fixed 200ms delay between messages should at least be configurable, but there is still no way to tell if buffer overflow is occurring

* There is no sequence number, and way to tell at the receiving side of one intermediate component message was lost.  (Possibly outside the scope of this, and no way to really fix this without changing the binary format of the messages).




",bug,https://github.com/nasa/cFE/issues/84
CFE_TIME fails to build with CFE_TIME_CFG_SRC_MET set to TRUE,"This issue was introduced by #35 - some structure accesses hiding behind this conditional compile needs to have "".Payload"" added to them.

As a separate enhancement, the Bamboo tests should be updated to build using this configuration, along with the many other TIME options available.",bug,https://github.com/nasa/cFE/issues/83
Buffer overrun in stub implementation of CFE_TIME_Print,"For unit testing an alternate ""stub"" implementation of CFE_TIME_Print exists in unit-tests/ut_time_stubs.c

The CFE_TIME_Print() function outputs the passed-in time value to a small fixed-size buffer.  The UT stub version of this function uses the wrong size for its call to snprintf and is way too wordy in its output, easily overrunning the real size of the buffer.

This is one thing causing unit tests to crash in 6.4.1",bug,https://github.com/nasa/cFE/issues/82
Update CFE Version Number,"We are committing to CFE Release 6.4.2
containing #71 #72 #73 (with small adjustments
and rebasing to master).

When building the hotfix branch, we need to
update the version header file to update
the version number.
",,https://github.com/nasa/cFE/issues/81
Extend CMake app search path,"When apps are listed in the targets.cmake file, the CMake scripts already implements a dynamic search path to find matching entities in the source tree.

Right now the users typically add their own apps to the ""apps"" directory which become intermixed with the official CFS applications.

While this is OK, this does present a challenge to a git novice -- if they cloned the babelfish repositories directly, then a simple (default) {{{git push}}} command may inadventently send all their private apps up to babelfish.

Ideally, the mission should at least create their own branch, or better yet, create their own VC repository and not //directly// use babelfish git clones (such as the ""subtree"" method documented in the wiki), but this is unfortunately not the path of least resistance.

By adding some extra names into the default app search path, the project-specific apps can be placed outside the official ""apps"" tree.  This way, the apps repository remains ""pristine"" and unmodified, and an errant {{{git push}}} will do no harm.

","duplicate, enhancement",https://github.com/nasa/cFE/issues/80
CMake support for elf2cfetbl usage,"The current CMake support structure does not include support
for the old style CFE Tables -- that is, where the table is
embodied in a source file within the application, which is
compiled with the application headers (as well as headers
from CFE, OSAL, and so on), and which is then converted from
the ELF Object File format into a TBL file.

Asking each project that wants to convert to CMake to independently
work out how to get the files compiled then converted is asking for
a significant duplication of effort -- as this turns out to be
something more than a couple easy lines of Make scripting. It is more
reasonable for us to work it out once, and provide a solution that
projects can use (or adapt) as desired.
",enhancement,https://github.com/nasa/cFE/issues/79
CFE TIME fails to build when CFE_TIME_CFG_SIGNAL set to TRUE,"The CFE_TIME_CFG_SIGNAL configuration macro will add calls to a function {{{OS_SelectTone()}}} if it is set to TRUE.

However, OS_SelectTone is neither prototyped nor implemented in any released version of CFE or OSAL, as far as I can tell.  It does not seem to be documented anywhere what this is supposed to do.

It is currently not possible to build CFE with this configuration set to TRUE due to this problem.

Calling this a minor defect for now, as it only appears when using this configuration option.",bug,https://github.com/nasa/cFE/issues/78
Application Startup Race Conditions (GSFC DCR 22819),"Applications will fail to start when they are started via the ES Start Application command (CFE_ES_START_APP_CC) and the ES application has a lower priority than the application being started by the command.

This issue will also occur if the OS startup code is a lower priority than the applications that are being started in the startup script.
",bug,https://github.com/nasa/cFE/issues/77
CFE_ES_ProcessCoreException() is not interrupt-safe,"The CFE_ES_ProcessCoreException() architecture needs to be re-examined.  

This is the equivalent of an interrupt handler and likely triggered as the result of a hardware interrupt.  However the implementation calls other CFE_ES functions, some of which take the global data mutex (CFE_ES_LockSharedData), do console output (CFE_ES_WriteToSyslog and other functions which ultimately do printf), or call OS_TaskDelay.  

All of these operations are unsafe to do in an interrupt context on most platforms.

This may not be an issue if the end-result of the exception is a processor reset, which is probably the only safe thing to do.  Although the option to restart the task does exist, the system may be too far gone after this.

",bug,https://github.com/nasa/cFE/issues/76
SMP: CFE_ES_WriteToSyslog() is not multi-thread safe,"The CFE_ES_WriteToSyslog() function is called from many places across CFE and many different threads (upwards of ~400 references to this function throughout CFE and CFS).  

Internally this uses the shared ""reset area"" pointed to by CFE_ES_ResetDataPtr and makes multiple references to the ""SystemLogIndex"" and ""SystemLogEntryNum"" in the reset area.  However, the read/modify/update sequence of these members is not protected by any sort of mutex.

",bug,https://github.com/nasa/cFE/issues/75
SMP: CFE TIME uses OSAL IntLock/IntUnlock for mutual exclusion,"Interrupt locking simply prevents incoming interrupts; is not a mutual exclusion mechanism and will __NOT__ achieve ""exclusive access"" on all types of processors.  Mutual exclusion is more of a side-effect that occurs on a single-core processor that uses a timer interrupt to perform task switching duties.  On a multi-core processor, this will not work.

Furthermore, in the POSIX OSAL, IntLock/Unlock are no-ops, and interrupt control is a kernel-level function and not something that user space tasks can do (even as root).

This should be replaced with a Mutex, as this is what the code is really trying to do.",bug,https://github.com/nasa/cFE/issues/74
Race conditions / dependencies between CFE core apps,"The ""core"" applications have significant dependencies between them that need to be more pro-actively satisfied.  There are some race conditions during the startup phase that can pose some serious problems if things are not executed in the right order.

The summary of what happened is below, but here is a list of the basic problems:

* Start up code should synchronize at least the ""core"" applications and ensure that each one has reached it's respective ""RunLoop"" before starting the next one, regardless of what the platform config sets the priority to (likely depends on #71).
* EVS_IsFiltered should range check before doing the table lookups based on passed-in values
* CFE SB and EVS (at least) populate different values into their own ""AppID"" global variable before initialization.  SB does nothing (0 by default, which is in fact a valid AppID for a different app) but EVS initializes this to 0xFFFFFFFFF, which has very ill-effects if actually used for something, and nothing really checks for this.

For those interested, here are the details of the specific sequence of events discovered when debugging application startup on the Microblaze processor used by the EVA team at GRC:

1. As dictated by the table within ""cfe_es_objtab.c"", the CFE core applications are started (Tasks Created) in the order of EVS, SB, ES, TIME, BL.  
2. In the default/example platform configuration, these have respective priorities of 61(EVS), 64(SB), 68(ES), 60(TIME), and 70(TBL).
3. TIME task will run it's TaskMain first even though it is 4th in the start sequence.  
4. As part of this init sequence, it calls CFE_SB_CreatePipe() which in turn calls CFE_EVS_SendEventWithAppID() in several places (for errors as well as an unconditional ""debug event"" at the end).  The AppId supplied is ""CFE_SB.AppId"" which is uninitialized since SB has not executed yet.  In this case the value used is actually 0.
5. In turn this eventually calls EVS_NotRegistered() (since CFE_EVS_TaskInit has not run) and then EVS_SendEvent() as part of that.  
6. EVS_SendEvent() calls EVS_IsFiltered() with the contents of CFE_EVS_GlobalData.EVS_AppId, which is also uninitialized but set to ""0xFFFFFFFF"", not zero like CFE_SB.AppId.  
7. This appID value is not range-checked by EVS_IsFiltered and ultimately segfaults and crashes CFE core.

",bug,https://github.com/nasa/cFE/issues/73
Race condition within CFE_ES_AppCreate,"When starting an application, CFE ES calls ""CFE_ES_UnlockSharedData()"" before OS_TaskCreate(), then calls CFE_ES_LockSharedData() again to perform several more updates to the global table after the task ID is obtained.

This unlock-relock opens up an opportunity for the child thread to read the shared table data before it is fully populated.  This can cause many problems.  One specific one is that CFE_ES_GetAppID() (which many tasks call very early in their init procedures) will fail, which can have a serious snowball effect.

Note that the initial core app creation (CFE_ES_CreateObjects) and child tasks (CFE_ES_CreateChildTask) keeps the global lock for the entire procedure, so these are safe.

",bug,https://github.com/nasa/cFE/issues/72
"CFE ES ""StartupSyncSemaphore"" subject to multiple race conditions","The ""Startup Sync"" mechanisms are based on a binary semaphore, a boolean flag, and a counter.

The handling of these various separate entities leaves several opportunities for race conditions to occur. At a minimum, this could cause ""WaitForStarupSync"" to pend incorrectly, but could have other more serious side effects (unknown) depending on how the apps are using this.

This is one problem that the EVA team at GRC are experiencing while deploying CFS on the Xilinx Microblaze platform.
",bug,https://github.com/nasa/cFE/issues/71
Enforce Strict ASCII,Replace all non-ASCII characters (i.e. copyright symbol) with ASCII equivalent.,bug,https://github.com/nasa/cFE/issues/70
Update CFE_FS_InitHeader to to Handle Error/Invalid Length Conditions,"The CFE_FS_InitHeader API function should perform checks on the header information being passed into the function and return an appropriate error code.  See Ticket #37 for additional details.

cFE services that make calls to this API should be updated to handle the error code.",enhancement,https://github.com/nasa/cFE/issues/69
ut_sb_stubs broken by packet layout change,"The structure defining the message layout changed, placing
the message content in a separate structure, requiring
current code that was ""pointer->field"" to be adjustd
to read ""pointer->Packet.field""

This change must be applied to code in `ut_sb_stubs.c`
that is only compiled when `UT_VERBOSE` is defined.

The automatic test system used to check out CFE builds
defines `UT_VERBOSE` in order to collect supporting
evidence useful for debugging any failures or errors
encountered during testing.

",bug,https://github.com/nasa/cFE/issues/68
Implement Bamboo builds of cFS CFE tree,"Need to construct a Bamboo plan that builds everything that can be built in `cfs_cfe` and runs all of the local test programs that are suitable for fast turnaround automatic test cycles.
",,https://github.com/nasa/cFE/issues/67
2015-03-10 Integration Candidate,"CCB meeting on 2015-03-10 authorized integration testing
for merging into development of the current set of changes
contained in Joe's merge at [changeset:114c641].
",,https://github.com/nasa/cFE/issues/66
update cFE unit tests,"The version of the unit tests currently included with cFE 6.4.1 were developed and tested against cFE 6.3.2.  Due to cFE changes, all of the tests no longer pass.

Also, the tests have only been tested with the Linux OSAL/pc-linux PSP and ARINC653 OSAL/OrionSCP PSP.

JSC has updated the tests to work fully with cFE 6.4.1.  JSC is also updating the tests to build and run on VxWorks 6.7 (on the SPARC LEON3 processor).

These updates are being tracked in the JSC subversion repo and need to be pushed into a proper git branch and further work continued from there.
",bug,https://github.com/nasa/cFE/issues/65
"Fix ""no return"" warning on CFE_SB_ReadQueue() function","This is not a ""real"" warning, but it is flagged by static code analysis in Eclipse that the CFE_SB_ReadQueue() function has no return statement.  Although there is no real code path that will //not// get to a return statement, static code analysis does not see that.

A trivial fix to consolidate the scattered return's into a single return at the end will get rid of this warning and make the code more readable.

",bug,https://github.com/nasa/cFE/issues/64
Unit test stubs need to be kept in sync with their respective real implementations,"The ""unit-test"" code implements stub functions for all function calls which are //not// under test.  In addition to stubs for the 6 core CFE functions, there are two other stub files:

* ut_bsp_stubs.c
* ut_osapi_stubs.c

The difficulty here is that both the API/prototype of all the functions as well as the real implementation of those functions come from an external source, specifically the PSP library and the OSAL library.  If either the OSAL or PSP changes, the corresponding change must be made to the CFE stub files to keep them in sync.  Futhermore, if another project tries to use the updated stub files with an older version of OSAL, the build will now break due to the mismatched definitions.

It would be nice to simply make a rule that a defined API is never going to change, but that is not practical.

__Solution 1__

Utilize a preprocessor macro to ""tune"" the function definitions in the stub files to match what the OSAL/PSP should be for that particular version

Advantages: Can be implemented right away without any synchronized change to OSAL/PSP libs.

Disadvantages: Does not scale.  Code can get pretty messy with lots of #ifdef's if it changes more than once.  Still requires CFE to ""know"" the OSAL/PSP prototypes so breaks the independence of the two libraries.

__Solution 2__

Move the stub implementation to the same component that provides the real implementation.  For this, the ut_bsp_stubs.c file would be relocated to the PSP library and the ut_osapi_stubs.c file would be relocated to the OSAL library.

The PSP and OSAL builds would provide a separate UT stub product (a library) that the CFE unit test could link with.

Advantages: Arguably a more logical place for the stub code. Reduces need for synchronized changes in the future, better forward/backward compatibility between versions.  Also, other (non-CFE) users of OSAL library could also use stub functions.

Disadvantages: Requires a synchronized change to get started (solution 1 could help here).  Also would only work using CMake makefiles, although the GNU makefiles could probably be updated accordingly as well.


",bug,https://github.com/nasa/cFE/issues/63
Fix duplicate structure definitions in table unit test,"Similar to trac #55 for the mempool structures --

The dispatch table structure definitions are duplicated in the cfe_tbl_task.c and tbl_UT.h.  The tests will break if these diverge.

A more suitable place for these would be in cfe_tbl_task_cmds.h so the same definitions can be included in both places without duplication.

",bug,https://github.com/nasa/cFE/issues/62
Review use of CFE_PSP_MemCpy/CFE_PSP_MemSet,"These wrapper functions may be over used in the CFE code.  In some cases the standard C library implementations might be preferred.

Using a PSP-supplied wrapper function makes sense when reading/writing from ""special"" memories that are truly platform-dependent, such as an NVRAM or any other type of memory that is either not directly mapped or has some type of access restriction (e.g. 32 bit only, paged access, etc).

However, for memories that __ARE__ directly mapped into the current process space (and will always be) such as copying one structure variable to another or clearing out a local stack variable, using the PSP implementations is generally not necessary.

Every C library will have memcpy/memset as these were defined all the way back to C89.  Usually, the C library implementation is already implemented as optimized assembly code tailored to the current CPU.

In some circumstances using an extra wrapper might prevent some optimizations that would be done if the C library call were used directly - for instance, some C implementations might inline the function if used directly.  At the least, the wrapper adds the overhead of another function call.

",,https://github.com/nasa/cFE/issues/61
Ensure that return codes from PSP functions are checked,"In some circumstances the return code from PSP functions (e.g. CFE_PSP_GetResetArea) is either not checked or incorrectly checked.

Wherever the return code is checked, instead of specifically checking for an error code like so:
{{{
if (Status == CFE_PSP_ERROR)
{ 
   <handle error>
}
}}}

The code should check for non-success instead:
{{{
if (Status != CFE_PSP_SUCCESS)
{ 
   <handle error>
}
}}}

This will make it more future-proof to PSP implementations that might return more specific errors.
",enhancement,https://github.com/nasa/cFE/issues/60
"Pointer arguments to functions that are input only should be declared ""const""","Marking the pointer parameter as ""const"", particularly for string arguments, allows them to be called using string literals or other data that is already constant.

This may make a substantial difference on some targets where the executable can actually be linked to put the read-only data section in ROM rather than RAM.  However, in order to do this properly/safely the code must treat this as read-only data.  By declaring it ""const"" the compiler will flag any writes to it.

Changing the prototypes should not affect current usage.

",enhancement,https://github.com/nasa/cFE/issues/59
Clean up unused local variables,"Compiling with -Wall complains about unused local variables in some functions.  This will cause the build to fail if -Werror is also used.

This change is a prerequisite to turning on strict compiler settings in the default build.

",bug,https://github.com/nasa/cFE/issues/58
Fix type mismatches and remove unnecessary typecasting,"This ticket is to fix up areas of the code that have type mismatches or other unnecessary typecasting.

* In some areas, the standard ""int"" type is used when it should be the OSAL int32/uint32 type.  
* In other areas, values are cast to certain types when it is not necessary to do so because the compiler will automatically do the right thing.  

In the latter case, the type cast should be removed, because in certain situations it can actually interfere with the compiler doing the right thing and make it do the //wrong// thing instead.  An example of this is casting to ""int"" with operands that are actually unsigned types and/or different widths.  In the case that the forced ""int"" is a negative value, a sign extension might be performed and this might produce an unexpected result.  In general, a cast should only be used when there is a good reason why the compiler's default conversion rules are not sufficient.


",bug,https://github.com/nasa/cFE/issues/57
Consolidate CDS and generic/ram mempool code into single implementation,"Currently there are two memory pool implementations in ES:

* cfe_es_cds_mempool.c
* cfe_esmempool.c

These two are very similar except that the CDS uses offsets rather than direct pointers, and it calls into the PSP to perform actual read/write functions.  It would not be very hard to consolidate these into a single implementation.

Each implementation consumes about 4-5kB of code/data space so this consolidation would make ES a little smaller in addition to making it cleaner.
",enhancement,https://github.com/nasa/cFE/issues/56
Fix duplicate mempool structure definitions in unit test code,"The unit test code uses its own (re-)definitions of the memory pool management structures.  Specifically, these structure definitions are duplicated:

* CFE_ES_CDSBlockDesc_t
* CFE_ES_CDSBlockSizeDesc_t
* CFE_ES_CDSPool_t
* BD_t
* BlockSizeDesc_t
* Pool_t

These should not be redefined here.  If these ever diverge from the definitions that CFE ES uses, the tests will break.  

The definitions should be moved to a header file and #include'ed in both places to ensure that the same definitions are always used.

",bug,https://github.com/nasa/cFE/issues/55
Code in CFE TIME fails to compile with strict compiler settings,"When strict compiler flags are used, there are several instances of unused variables in CFE TIME.  These are related to the configuration options (e.g. CFE_TIME_CFG_DEFAULT_TAI) where under some configurations a variable is declared and/or set but not actually used.

The preprocessor macros need to be adjusted such that the variable is not declared unless it is used.",bug,https://github.com/nasa/cFE/issues/54
"Error constants defined in ""cfe_error.h"" incorrectly use the ""L"" suffix","The ""L"" suffix on an integer literal tells the compiler that it is supposed to be interpreted as a ""long"" type.  However, CFE error constants are supposed to be 32-bit signed integers, which may or may not be the same thing as the system native ""long"" type.  

To be correct, the constants should be defined to be the same as the ""int32"" OSAL type and the ""L"" suffix should be removed.  

This causes problems on a 64-bit machine where the ""long"" type is 64 bits.

",bug,https://github.com/nasa/cFE/issues/53
Data pointer argument to CFE_ES_CalculateCRC() should be const,"Since CFE_ES_CalculateCRC() does not modify the data passed into it, the pointer should be declared ""const"" in the prototype.

This will not affect any existing usage of the function, but it will allow usage in areas where the data is already ""const"".",bug,https://github.com/nasa/cFE/issues/52
"Stack pointer parameter to CFE_ES_CreateChildTask should not be marked ""const""","By definition, a task's stack memory must be writeable.  The stack pointer parameter to CFE_ES_CreateChildTask() is qualified as ""const"".  Although this matches OSAL's Task API, OSAL is wrong too and should be fixed.

See: [https://babelfish.arc.nasa.gov/trac/cfs_osal/ticket/13]

This ticket should be merged into CFE **before** the OSAL ticket is fixed.

This change will not affect compatibility with prior versions of OSAL because it is OK to pass a non-const pointer for a const parameter (but vice-versa is an error).

",bug,https://github.com/nasa/cFE/issues/51
Fix inclusion of PSP private header files in CFE layer,"Certain files are directly #include'ed from the PSP library in the CFE code.

Only the ""public"" PSP API defined in ""psp/fsw/inc"" should be directly used by application code.  Other files such as those under an architecture-specific PSP (e.g. psp/fsw/pc-linux/inc) should be treated as private data to that particular PSP and NOT be used or called directly from the application.  If some value is necessary then a public API should be defined to retrieve it, rather than #including it directly.

Fixing this up will make the build cleaner and more efficient.  It will also ensure that application code is portable to __ALL__ PSP's because it does not depend on some value that only one particular PSP provides.

Note there is a corresponding ticket in the PSP to stop using CFE headers as well: [https://babelfish.arc.nasa.gov/trac/cfs_psp/ticket/6].

When both of these tickets are merged in the incremental build process becomes much cleaner and faster.",bug,https://github.com/nasa/cFE/issues/50
Modify code that reads or writes memory addresses in external messages to use wapper,"In the current version, some external interface (command/telemetry) messages contain direct CPU memory addresses.

This can be very bad for several reasons:
* Memory addresses can be a different size on different CPUs
* Since memory addresses are likely to change from run to run (even in the same build) it makes it difficult to script tests
* The receiver has no way to validate it (other than NULL).  
* If the address value ever gets corrupted or an invalid value is used, the consequence is usually dire (a crash).

Ultimately the use of direct memory addresses in messages should be avoided.

As a first step to this, this ticket will modify those locations that a memory address is read or written from an external message to use a wrapper function.  

This ticket won't change any functionality in itself, but it will provide a path going forward such that the wrapper function can be modified to convert the address to/from a safe, verifiable, architecture independent value rather than using the address directly.

",enhancement,https://github.com/nasa/cFE/issues/49
"Implement ""bootstrap"" script","Although the git repositories established on babelfish so far appear to work well enough for our development model, it is rather complicated to set up a build from a clean slate using them.  In order to do so you need to clone (at least) 5 repos and also make sure you get compatible versions/branches from all 5, then set up your build, which may involve copying some files around, which then have to go into the mission-specific version control.

I suspect that real missions/users would __not__ want to keep these repos separate even though they are distributed separately; it is much more effort to manage it when each subdirectory comes from a different repo and it is very easy to ""break"" the build by grabbing incompatible branches.  

Instead, a project using these would probably want to set up a single git repo for their mission that has everything included.  There are a couple ways to do this in git such that compatibility with the ""upstream"" repo is retained, but it does require some of the more esoteric git features to do this right.

A script could do most of this work to simplify deployment and make sure it is done right.


",duplicate,https://github.com/nasa/cFE/issues/48
Remove cfe_es_devsrvr code,"cfe_es_devsrvr.c and .h appear to be stale/obsolete and not being called or referenced by anything else in cFE.

Furthermore, it should be deprecated anyway since device-support code logically fits better within the PSP.  At the cFE layer it should be all hardware-independent code.

If this is correct, these two files should be removed from the build.",bug,https://github.com/nasa/cFE/issues/47
SMP: CFE_TIME_GetReference() has insufficient protection against update while reading,"In the current implementation, CFE_TIME_GetReference() uses a lockless version counter that is checked before and after reading the reference time to determine if the time got updated while it is being read.

However, this protection is insufficient for some systems:
* The global needs to be marked ""volatile"" for this to have any effect.  If compiled with optimizations, the optimizer is likely to remove the ""redundant"" read of the global value therefore defeating the purpose of the loop altogether.
* It does not protect against the reader interrupting the writer and receiving a ""half-updated"" value.  Running the updater at higher priority does not work on multi-core CPUs since the two threads can be concurrently running.

",bug,https://github.com/nasa/cFE/issues/46
CFE_TIME_GetTime() should not return a structure,"In general it is not a good idea to return a structure from a function because compilers do not all perform this the same way.  Some compilers/ABIs are reasonably efficient at this (as gcc seems to be), but others are not so efficient and will do extra copies of the structure.",enhancement,https://github.com/nasa/cFE/issues/45
Display extended version information from the build,"The CFE build currently contains a 4-part version number, i.e. ""6.4.1.0"".  This version number is is #define'd in a header file and is manually updated with each official release.

However, git and Cmake (see ticket #32) offer additional build information where the current git commitid and most recent tag name are built into a global object that is accessible at runtime.  When it is available, this extended build information should be displayed along with the manually updated official version number.

The major benefit here is that it updates automatically with __every__ commit, not just official releases.  It also indicates the whether the source code tree has been modified from the pristine version in the commit (""dirty"") or not.  It is extremely useful to have this information built into the executable in order to verify the correct binary is loaded as well as being able to reproduce running binaries when needed.


",enhancement,https://github.com/nasa/cFE/issues/44
External CFE message definitions should not depend on values from cfe_platform_cfg.h or osconfig.h,"Some structure definitions that define specific ground commands and telemetry messages use array sizes for strings that are either defined in osconfig.h (e.g. OS_MAX_PATH_LEN) or cfe_platform_cfg.h (e.g. CFE_ES_MAX_APPLICATIONS).  

However, by definition, these header files contain parameters that are tunable to the specific CPU.  For instance, a resource-constrained CPU may need to reduce CFE_ES_MAX_APPLICATIONS to a small number to save memory.  It is therefore problematic to use these values to define messages that serve as a data definition across processors, particularly in a multi-board setup.

External message definitions must be limited to **mission-wide** configuration parameters only, such as cfe_mission_cfg.h, where all CPUs as well as the ground system will have the same values.  
",bug,https://github.com/nasa/cFE/issues/43
CFE enumeration names,"In order to reduce the chance of name space conflicts, enumerated names should follow the general form, with the value prefixed by the group name and the app name:

<APPNAME>_<GROUPNAME>_<VALUEID_1>
<APPNAME>_<GROUPNAME>_<VALUEID_2>
....
<APPNAME>_<GROUPNAME>_<VALUEID_N>

This ensures that even if two enums use the same value name(s) they will not conflict with each other.

Most #define'd values already follow this general form, but there are some exceptions.  These should be fixed to be consistent.

",bug,https://github.com/nasa/cFE/issues/42
CFE ES makes assumptions about OSAL opaque objects,"OSAL returns object identifiers which are defined as uint32 values.  In the current implementation of OSAL they happen to be zero-based but this should not be a requirement; in fact there are several advantages to making these identifiers non-zero-based.

The primary offender is the ES core application using the task ID from OSAL directly as an array index.

To ensure compatibility the OSAL object IDs should be treated as opaque integers of undefined range.
",bug,https://github.com/nasa/cFE/issues/41
"Add ""const"" to function prototypes where appropriate","In particular, this should be done at least for functions that accept char * strings but do not modify them.  If a string literal (by definition a const char *) is passed into function argument that is declared a non-const char *, a compiler warning may be generated and the build will fail if compiled with strict settings.

This ticket will add ""const"" to function parameters where appropriate.",bug,https://github.com/nasa/cFE/issues/40
"Clean up ""extern"" declarations at the top of C files","In the CFE core apps, many files reference functions and data structures defined in other files.  However, the function prototypes or ""extern"" declarations are not in common header files, but simply put at the top of the C file that uses it.

While this does build, it defeats the type checking done by the compiler.

It is far from ideal because if the real variable type or function prototype ever changes, the linker will still happily link it together even though they might be completely incompatible (or worse, incompatible in a really subtle way).

The only reason to NOT put a declaration in a header file is if it should not be called or referenced by CFS apps, but this can be solved by creating a private CFE core shared header file.

",bug,https://github.com/nasa/cFE/issues/39
Fix use of uint32 to store a memory address,"In many places a uint32 is used to store a memory address which breaks horribly on 64-bit architectures.

The new version of OSAL ""common_types.h"" introduced a ""cpuaddr"" type to address this -- it is defined as an integer type large enough to store a memory address on the local processor.

This ticket is to replace all uses of a uint32 to store a memory address with the cpuaddr type for better portability.  This is a requirement for a native 64-bit build to work.",bug,https://github.com/nasa/cFE/issues/38
Implement InitHeader call in CFE FS,"All CFE apps that write a file should prefix that file with a header object defined in FS.  Currently they do so on-the-fly by simply memset()'ing the structure to zero and setting a key field.  

This should be cleaned up and moved to an InitHeader() call in CFE FS such that if fields need to be added to the header in the future this can be done without having to touch many different places where the header is initialized/written.",enhancement,https://github.com/nasa/cFE/issues/37
Reentrant version of decompress routine in CFE FS,"The FS application has a feature where it can decompress file content on the fly.  However the decompression routine keeps its internal state in global variables which makes it non-reentrant.  To protect against concurrent usage a mutex is used but this has a major performance impact.

The global variables should be replaced with a state structure so that it can be multithreaded like all other parts of CFS.

For the time being a global state object can be implemented in order to preserve API compatibility.",enhancement,https://github.com/nasa/cFE/issues/36
Split message definitions from headers,"All of the cFS messages are currently defined in C structures.  As a first step toward moving to ""electronic data sheets"" to describe the external data format, these need to be slightly modified to better separate the header portion of the structure from the payload portion of the structure.

Currently, message structures are typically defined by reserving a block of space for the header as a uint8 array of size CFE_SB_CMD_HDR_SIZE or CFE_SB_TLM_HDR_SIZE.  This approach has several issues:

* Using a fixed-size block assumes only a single type of encapsulation (CCSDS) will ever occur.  This may not be the case, as other non-CCSDS encapsulations may be a requirement for some missions.
* The fixed size block is not guaranteed to be properly aligned for a CCSDS header.  Since it is declared as a uint8 array, the compiler will not ensure any alignment this structure.  It is technically not valid to cast this as a CCSDS header since that contains uint16's.
* This is unlikely to be compatible with electronic data sheets (EDS) no matter what specific implementation is used.  Since the definition of the message content (payload) and the message header (CCSDS or other format) will come from different data sheets, it becomes very problematic to have them mixed together like this.  

To solve this problem requires a bit of restructuring: instead of declaring the format of the payload directly within the message structure, declare a separate ""Payload"" structure and define it in there.

This adds one extra layer to the structure tree but will improve flexibility going forward, and it will **NOT** change the external data format, so compatibility with ground systems is unaffected.  It only affects the syntax of code accessing members of the payload structure.",enhancement,https://github.com/nasa/cFE/issues/35
Document Applications in trac wiki,"It would be helpful to construct a small Wiki page corresponding to each Application in cFE giving a quick overview of each.

I suggest including hotlinks on each such page back into the doc
subtree of the specific App for extended documentation -- as clones
will obtain the content of the project sources but do not clone
the Trac wiki.",bug,https://github.com/nasa/cFE/issues/34
Compiler errors/warnings on EVS_SendEvent() calls on some architectures,"One roadblock to turning on strict compiler settings (such as -Werror) with full error checking is that MANY compiler warnings are generated by printf error checking done by gcc.

The full error checking is **VERY USEFUL** because it verifies that the argument corresponding to each escape code is the right type, e.g. %s has a string, %d has an integer, etc.

The problem is that we are using the OSAL abstractions such as int32 or uint32.  For example, on some systems, printf'ing an int32 needs a ""%d"" and on other systems it needs a ""%ld"" depending on whether it was typedef'ed as an int or a long.  So fixing an error on one platform by changing the escape code in the format string only generates an error on a different platform.

In order to fix this so that it builds without warnings on all platforms, any argument that ultimately gets passed to any C library printf() call needs to be cast to the right fundamental C type, not the abstracted type, at the call to the variadic function.  

Note this is really only an issue for variable argument functions since for normal functions the correct type is known and the compiler automatically casts it when possible.  But for variadic C library functions this is not possible so we must explicitly ensure that the argument gets converted to the correct type //for the c library//.  GCC is nice enough to implement warnings for this when it is mismatched, we should leverage that.",bug,https://github.com/nasa/cFE/issues/33
Enhanced build system for cFS,"The alternate build system uses CMake and offers several enhancements:
* Completely isolated build tree - No mixing of source files and generated files
* Dynamic application search path, supports ""app-store"" concept by keeping app repos separate from cFS repos.
* Supports multiple different build configurations from the same source tree
* Includes mechanisms for electronic data sheets (data dictionary) support and Lua functional testing support in the future

",enhancement,https://github.com/nasa/cFE/issues/32
Use appropriate atomic type for inter-thread sync,"The RV tool analysis reported several cases of reading/writing shared memory variables without a lock. 

The intention behind the code was that the data type being read/written simultaneously here was atomic in nature, thus the parallel access would be safe, as it is not possible to catch an atomic value mid-update.

To be more portable the code should use the C99 type `sigatomic_t` to ensure that the data type is in fact atomic on the given platform.  Currently it is using `uint32` which is not guaranteed to be atomic on all platforms.

Calling this ""minor"" because the `uint32` type will be atomic on all the platforms that the code in question is actually used on.  There is no bug currently here, this is just to prevent a future bug if this code is expanded to smaller CPUs (microcontrollers) where `uint32` is not atomic.

",bug,https://github.com/nasa/cFE/issues/1034
Clear BSS on App Restart,"Under normal conditions, when a task is started, the process of loading
the task will clear the BSS segment (used to store global-scope variables
that are not explicitly initialized).

However, if a task is ""restarted"" without ""reloading"" it may find that
its BSS segment still retains the content from the prior run.

We discussed this at the CCB meeting on 2016-Jan-19, and the moderate
concensus was that it might be most useful for the BSP to explicitly clear
the BSS of tasks before they are started. According to my notes, Joe was
going to take a look at this.
",bug,https://github.com/nasa/cFE/issues/1036
Remove references to coreflightsystem.org since it is now a malware site,"**Describe the bug**
This repo has several references to coreflightsystem.org. The current owner of that domain is using it for spreading malware (I got a prompt to install a Firefox malware addon).

**To Reproduce**
Steps to reproduce the behavior:
1. Go to https://github.com/nasa/cFE
2. Click on the links to coreflightsystem.org
3. Get prompted to install malware, or with spam links.

**Expected behavior**
No links to malware sites

**Code snips**
Not applicable

**System observed on:**
Firefox on Chrome (probably applies to other browsers and platforms)",,https://github.com/nasa/cFE/issues/31
Release candidate 6.7 merge to master,"**Describe the contribution**
Bulk merge to 6.7, plus bug fix #22 and version update

**Testing performed**
Steps taken to test the contribution:
1. Checked out cFS rc-6.7.0, updated to latest cFE/OSAL/PSP rc branches and setup/built via standard instructions
2. Ran cFE and observed version update
```
EVS Port1 42/1/CFE_ES 2: Versions:cFE 6.7.0.0, OSAL 5.0.0.0, PSP 1.4.0.0, chksm 47578
```

**Expected behavior changes**
Minor behavior changes will be documented in the VDD upon release (no major/requirements updates)

**System(s) tested on:**
 - cFS development server
 - Ubuntu 16.04.6, 4.4.0-146-generic, x64
 - 6.7.0 bundle

**Additional context**
None

**Contributor Info**
Jacob Hageman/NASA-GSFC

**Community contributors**
CLA on file",,https://github.com/nasa/cFE/pull/30
Added auto build capabilities using Travis-CI,"**Describe the contribution**
Auto build capabilities added using Travis-CI

**Testing performed**
Steps taken to test the contribution:
1. Verified auto build performed when new code is pushed to Github

**Expected behavior changes**
 - Auto build will be performed whenever new code is pushed to GitHub
 
**System(s) tested on:**
 - GitHub - Linux Xenial distribution

**Additional context**
none

**Contributor Info**
Travis Wheatley - Emergent Space Technologies

**Community contributors**
Work performed for NASA ""Task 3015""",duplicate,https://github.com/nasa/cFE/pull/29
API for querying libraries (like CFE ES QueryApp),"**Is your feature request related to a problem? Please describe.**
Unable to verify library image integrity (CS cannot scrub library code space)

**Describe the solution you'd like**
Implement API for querying library information, such that an app could scrub

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman/NASA-GSFC
External request from cfs-community email list on 9/3/2019","enhancement, Priority: Mission, cFS-Caelum",https://github.com/nasa/cFE/issues/28
Ensure table name length is consistent across CPUs,"**Describe the contribution**
To ensure consistency in the size of the CFE_TBL_FileHdr_t struct, this should be constrained to use only mission-scope definitions.
    
Also simplifies the structure definitions by _NOT_ padding strings out to 32 bit multiples.  The default size of the strings are already 32 bit multiples so this is just unnecessary complexity.  There is also no major issue if not 32 bit aligned, as the compiler will add it automatically where needed.

Add a note in the related cfe_mission_cfg.h descriptions to affected values, that these should be kept as a multiple of 4 to maintain alignment.
    
Fixes #25

**Testing performed**
Built CFE using default/sample config
Verified no build issues, CFE and unit tests all run as expected (no change).

**Expected behavior changes**
No impact to behavior, but this may change the size of telemetry packets in some cases depending on the mission config.

**System(s) tested on:**
 Ubuntu 18.04 (64 bit)

**Contributor Info**
Full name and company/organization of all contributors (required for acceptance)

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/cFE/pull/27
Timstamp all cFE generated SB messages,"**Is your feature request related to a problem? Please describe.**
SB Subscription Report message is not timestampted:

https://github.com/nasa/cFE/blob/6aaf5a3244e02af43c8ebb893ef413916dff5ef2/fsw/cfe-core/src/sb/cfe_sb_api.c#L1094-L1100

**Describe the solution you'd like**
Timestamp should be added here and anywhere else it's missing for all cFS generated SB messages:
```
CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_SB.SubRprtMsg);
```

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman/NASA-GSFC
Originated from PACE/OCI",enhancement,https://github.com/nasa/cFE/issues/26
TBL services using platform-scope values in table header definition,"**Describe the bug**
The `CFE_TBL_MAX_FULL_NAME_LEN` size definition, which is used as part of the `CFE_TBL_FileDef_t` structure, is partly based on the `OS_MAX_API_NAME` value.

The problem is that this value is platform scope and thereby configurable on a per-cpu basis.  Therefore, the `OS_MAX_API_NAME` value can be (validly) different on each CPU in a multi-cpu deployment.  This, in turn, means the table definition headers may be different on each CPU.

Tools like `elf2cfetbl` and `tblCRCTool` do not account for this possibility; when reading or writing the table header, they use a single definition.  The definition that they use may or may not even match what the flight code uses at all, depending on how the mission is configured.

**To Reproduce**
Configure a mission with two CPUs, and specify a different osconfig.h for each one (i.e. set TGT2_PLATFORM to something other than default).  Change the value of `OS_MAX_API_NAME` for the second CPU, and build all software.

Observe that the `sizeof(CFE_TBL_FileDef_t)` is now also different on CPU2 vs. CPU1.  Tables generated by `elf2cfetbl` and the CRC computed by `tblCRCTool` only work in CPU1.  CPU2 will not be able to load tables because of the incompatible header.

**Expected behavior**
The `sizeof(CFE_TBL_FileDef_t)` should remain consistent regardless of the platform-scope values used, because this is an external format shared between (at least) between ground systems and flight code.

The `CFE_MISSION_MAX_API_LEN` macro is a better choice here.  It was introduced in a previous version of CFE for telemetry packets, but table files are effectively the same issue.

**Code snips**
The problem definition is:
```
#define CFE_TBL_MAX_FULL_NAME_LEN_COMP (CFE_MISSION_TBL_MAX_NAME_LENGTH + OS_MAX_API_LEN + 2)
```

Furthermore, as this definition is only really for the header struct, it should be in cfe_tbl_filedef.h, not cfe_tbl.h.  This allows external tools to include this definition without having to pull in the rest of CFE headers implicitly.


**System observed on:**
Ubuntu 18.04 (64-bit), kernel 5.0.0-23-generic

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/cFE/issues/25
Sample makefile should use strict compiler flags and treat warnings as errors,"**Describe the bug**
The default makefiles / CMake scripts do not enforce any strict compiler warning flags and do not treat warnings as errors.  This means issues like #22 can more easily slip past.

**To Reproduce**
Building the `rc-6.7.0` branch as a ""release"" (-O3) using the default settings/sample config/makefile wrapper by preparing as:

`make SIMULATION=native BUILDTYPE=release prep`

Then run make and you do get some warnings, at least when using gcc 7.x and above:

```
[ 56%] Building C object cfe_core_default_cpu1/CMakeFiles/cfe_core_default_cpu1.dir/src/es/cfe_es_task.c.o
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/es/cfe_es_task.c: In function ‘CFE_ES_TaskInit’:
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/es/cfe_es_task.c:374:64: error: array subscript is below array bounds [-Werror=array-bounds]
        strncat(EventBuffer, VersionBuffer, sizeof(EventBuffer)-strlen(EventBuffer-1));
                                                                ^~~~~~~~~~~~~~~~~~~~~
/home/joe/code/cfecfs/github/cfe/fsw/cfe-core/src/es/cfe_es_task.c:380:64: error: array subscript is below array bounds [-Werror=array-bounds]
        strncat(EventBuffer, VersionBuffer, sizeof(EventBuffer)-strlen(EventBuffer-1));
                                                                ^~~~~~~~~~~~~~~~~~~~~
```

However, the build continues and completes the process with no error results.

**Expected behavior**
The build should stop, because warnings are problems that need to be resolved.  If the build does not stop then it is very easy to not notice these issues.

**System observed on:**
Ubuntu 18.04 (64-bit), kernel 5.0.0-23-generic, gcc 7.4.0

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, build-system",https://github.com/nasa/cFE/issues/24
Fix 22 strlen,"**Describe the contribution**
Fixes issue #22 

**Testing performed**
Build and run CFE, verify that version information event is generated as expected.

**Expected behavior changes**
No more undefined behavior

**System(s) tested on:**
Ubuntu 18.04 (64-bit), kernel 5.0.0-23-generic, gcc 7.4.0

**Contributor Info**
Joseph Hickey, Vantage Systems Inc.
",,https://github.com/nasa/cFE/pull/23
Incorrect calls to strlen in CFE_ES_TaskInit,"**Describe the bug**
The function calls strlen as:
`strlen(EventBuffer-1)`

**To Reproduce**
This is undefined behavior but probably works by accident most of the time, so long as the byte before EventBuffer is not null.  This also generates a compiler warning which somehow was never noticed before in previous reviews of this code (gcc 7.4.0 with -Wall switch)

**Expected behavior**
It probably was meant to be:
`strlen(EventBuffer)-1`

**System observed on:**
Ubuntu 18.04 (64-bit), kernel 5.0.0-23-generic, gcc 7.4.0-1ubuntu1~18.04.1

**Reporter Info**
Joe Hickey
",,https://github.com/nasa/cFE/issues/22
make install - No rule to make target 'install'.,"I get the following error when doing a make install - it fails on mission-install.

```
Install the project...
-- Install configuration: ""debug""
-- Up-to-date: /home/elliot/obc/src/cFS/build/exe/cpu1/cf/cfe_es_startup.scr
-- Installing: /home/elliot/obc/src/cFS/build/exe/cpu1/core-cpu1
-- Up-to-date: /home/elliot/obc/src/cFS/build/exe/cpu1/cf/pe.so
-- Up-to-date: /home/elliot/obc/src/cFS/build/exe/cpu1/cf/img.so
Built target cpu1-install
make[5]: *** No rule to make target 'install'.  Stop.
CMakeFiles/mission-install.dir/build.make:57: recipe for target 'CMakeFiles/mission-install' failed
make[4]: *** [CMakeFiles/mission-install] Error 2
CMakeFiles/Makefile2:195: recipe for target 'CMakeFiles/mission-install.dir/all' failed
make[3]: *** [CMakeFiles/mission-install.dir/all] Error 2
CMakeFiles/Makefile2:202: recipe for target 'CMakeFiles/mission-install.dir/rule' failed
make[2]: *** [CMakeFiles/mission-install.dir/rule] Error 2
Makefile:181: recipe for target 'mission-install' failed
make[1]: *** [mission-install] Error 2
Makefile:117: recipe for target 'install' failed
make: *** [install] Error 2
```",invalid,https://github.com/nasa/cFE/issues/21
Incorrect SCID field length,"cfe_mission_cfg.h shows a note circa line 49 that 'CCSDS allocates 8 bits for this field in the standard VCDU'. Newer CCSDS versions actually allocate 10-bits for this field - this seems like a minor thing but could potentially have implications elsewhere in the code. Per @acudmore , maybe TO, DS, and CF?",wontfix,https://github.com/nasa/cFE/issues/20
Fix code markup in readme,,,https://github.com/nasa/cFE/pull/19
Support for OSX,"Is the cFS version that is available on the master branch compatible with OSX? Looking through the files, it seems like cFS uses a lot of the extended posix functionalities (e.g. timers, thread prioritization and certain real time signals) that are not available on OSX. Although OSX is posix compliant, it doesn't support extended posix functionalities. 

From a development standpoint, support for OSX is desirable. I have developed some patches that can be applied to some osal and psp src files to enable compilation on OSX (including a reimplementation of the timer API using the grand central dispatch on OSX). If the cFS developers are interested in looking into this, I can integrate these patches and submit a pull request.",invalid,https://github.com/nasa/cFE/issues/17
About the PSP mak file,"Hi
I'm very new for write .mak file. I checked gcc(5.5.0) manual, found some symbols such as -Wall, -m32, but did not find __ix86__. Could you tell me how can I find this? Which manual should I reference to? I want to make psp and osal for raspberry or freertos! Thanks
Sincerely",question,https://github.com/nasa/cFE/issues/16
Did you close the forum,"Hi,
Did you close the forum or did we need an authorization to access? Thanks",question,https://github.com/nasa/cFE/issues/15
Could not copy app.so to /cpu1/exe/cf/apps,"Hi
When I delete all app.so in this fold, then I make clean, make config and make again, there are not any app.so in this fold? Is this right? Thanks!
Sincerely",question,https://github.com/nasa/cFE/issues/14
Could not find the directory ../cfe/inc,"In each app directory, such as sample_app/fsw/for_build/Makefile, there is ""-I../cfe/inc"", but I could find this sub directory in cFE/build/cpu1/cfe, where I can get sample_app int the directory /cFE/build/cpu1. Thanks!
Sincerely",question,https://github.com/nasa/cFE/issues/13
POSIX: Your queue depth may be too large,"Update documentation to show Posix fix:

Edit /etc/sysctl.conf and add the lines:

```bash
	# Increase message queue
	fs.mqueue.msg_max = 256
```

## Or 

Edit as root  `/proc/sys/fs/mqueue/msg_max` is set to 256 or some value appropriate.

```bash
root# echo 256 > /proc/sys/fs/mqueue/msg_max
```
",enhancement,https://github.com/nasa/cFE/issues/12
Possibly add CFPD,https://sourceforge.net/projects/cfs-cfdp/,invalid,https://github.com/nasa/cFE/issues/11
submodule updates fail,"While attempting to build this project, the submodule update process fails on `GFS_CI.git`

```
Cloning into 'apps/ci'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'git@github.com:nasa/CFS_CI.git' into submodule path 'apps/ci' failed
```

It looks like the recent [ commit in .gitmodules  ](https://github.com/nasa/cFE/commit/edc14ceb428989b1f183d19027b9d28a29cf96cc)  added new apps and used ssh instead of HTTPS. I presume changing them to the form of

```
[submodule ""apps/to""]
	path = apps/to
	url = https://github.com/nasa/CFS_TO.git
[submodule ""apps/ci""]
	path = apps/ci
	url = https://github.com/nasa/CFS_CI.git
[submodule ""apps/io_lib""]
	path = apps/io_lib
	url = https://github.com/nasa/CFS_IO_LIB.git
``` 

will prevent this issue for others.",,https://github.com/nasa/cFE/issues/10
Compiling for Raspberry Pi,"Would like to run on my ARM based raspberry pi, the instructions don't seem to detail a means of building for different arch.

Thanks",question,https://github.com/nasa/cFE/issues/9
"""Could not load cFE application"" error -- yet `.so` file exists","cFE refuses to load my custom app. I built it from the `sample_app` provided, and it compiles correctly. Moreover `make realclean && make config && make` will create the expected `lls_app.so` and place them in the expected locations (i.e. `build/cpu1/exe/cf/apps/lls_app.so` and `build/cpu1/exe/lls_app.so`). Furthermore, the header of these dynamic libraries confirms that they compiled for the correct target when compared to the other default libraries which load.

Any hint is greatly appreciated as I've been struggling with this issue for several long hours now.

Here's the relevant log:
```
1980-012-14:03:20.25303 ES Startup: Loading file: /cf/apps/lls_app.so, APP: LLS_APP
1980-012-14:03:20.25304 ES Startup: loading directly:/cf/apps/lls_app.so (LLS_APP) -70028.
1980-012-14:03:20.25322 ES Startup: Could not load cFE application file:/cf/apps/lls_app.so. EC = 0xFFFFFFFF
```

And the full boot-up log:
```
CFE_PSP: Default Reset Type = PO
CFE_PSP: Default Reset SubType = 1
CFE_PSP: Default CPU ID = 1
CFE_PSP: Default Spacecraft ID = 66
CFE_PSP: Default CPU Name: CPU1
CFE_PSP: Starting the cFE with a POWER ON reset.
CFE_PSP: Clearing out CFE CDS Shared memory segment.
CFE_PSP: Clearing out CFE Reset Shared memory segment.
CFE_PSP: Clearing out CFE User Reserved Shared memory segment.
2027-356-20:29:57.62589 POWER ON RESET due to Power Cycle (Power Cycle).
2027-356-20:29:57.62591 ES Startup: CFE_ES_Main in EARLY_INIT state
CFE_PSP: CFE_PSP_AttachExceptions Called
2027-356-20:29:57.62596 ES Startup: CFE_ES_Main entering CORE_STARTUP state
2027-356-20:29:57.62597 ES Startup: Starting Object Creation calls.
2027-356-20:29:57.62598 ES Startup: Calling CFE_ES_CDSEarlyInit
2027-356-20:29:57.62609 ES Startup: Calling CFE_EVS_EarlyInit
2027-356-20:29:57.62613 Event Log cleared following power-on reset
2027-356-20:29:57.62614 ES Startup: Calling CFE_SB_EarlyInit
2027-356-20:29:57.62627 ES Startup: Calling CFE_TIME_EarlyInit
1980-012-14:03:20.00000 ES Startup: Calling CFE_TBL_EarlyInit
1980-012-14:03:20.00023 ES Startup: Calling CFE_FS_EarlyInit
1980-012-14:03:20.00050 ES Startup: Core App: CFE_EVS created. App ID: 0
EVS Port1 66/1/CFE_EVS 14: No subscribers for MsgId 0x808,sender CFE_EVS
EVS Port1 66/1/CFE_EVS 1: cFE EVS Initialized. cFE Version 6.5.0.0
1980-012-14:03:20.05067 ES Startup: Core App: CFE_SB created. App ID: 1
1980-012-14:03:20.05072 SB:Registered 4 events for filtering
EVS Port1 66/1/CFE_SB 14: No subscribers for MsgId 0x808,sender CFE_SB
EVS Port1 66/1/CFE_SB 1: cFE SB Initialized
1980-012-14:03:20.10086 ES Startup: Core App: CFE_ES created. App ID: 2
EVS Port1 66/1/CFE_SB 14: No subscribers for MsgId 0x808,sender CFE_ES
EVS Port1 66/1/CFE_ES 1: cFE ES Initialized
EVS Port1 66/1/CFE_SB 14: No subscribers for MsgId 0x808,sender CFE_ES
EVS Port1 66/1/CFE_ES 2: Versions:cFE 6.5.0.0, OSAL 4.2.1.0, PSP 1.3.0.0, chksm 15267
1980-012-14:03:20.15104 ES Startup: Core App: CFE_TIME created. App ID: 3
EVS Port1 66/1/CFE_SB 14: No subscribers for MsgId 0x808,sender CFE_TIME
EVS Port1 66/1/CFE_TIME 1: cFE TIME Initialized
1980-012-14:03:20.20121 ES Startup: Core App: CFE_TBL created. App ID: 4
EVS Port1 66/1/CFE_TBL 1: cFE TBL Initialized.  cFE Version 6.5.0.0
1980-012-14:03:20.25129 ES Startup: Finished ES CreateObject table entries.
1980-012-14:03:20.25135 ES Startup: CFE_ES_Main entering CORE_READY state
1980-012-14:03:20.25140 ES Startup: Opened ES App Startup file: /cf/apps/cfe_es_startup.scr
1980-012-14:03:20.25158 ES Startup: Loading file: /cf/apps/ci_lab.so, APP: CI_LAB_APP
1980-012-14:03:20.25160 ES Startup: loading directly:/cf/apps/ci_lab.so (CI_LAB_APP) -70028.
1980-012-14:03:20.25194 ES Startup: CI_LAB_APP loaded and created
EVS Port1 66/1/CI_LAB_APP 6: CI: RESET command
EVS Port1 66/1/CI_LAB_APP 3: CI Lab Initialized.  Version 2.2.0.0
1980-012-14:03:20.25217 ES Startup: Loading file: /cf/apps/to_lab.so, APP: TO_LAB_APP
1980-012-14:03:20.25219 ES Startup: loading directly:/cf/apps/to_lab.so (TO_LAB_APP) -70028.
1980-012-14:03:20.25245 ES Startup: TO_LAB_APP loaded and created
EVS Port1 66/1/TO_LAB_APP 1: TO Lab Initialized. Version 2.2.0.0 Awaiting enable command.
1980-012-14:03:20.25266 ES Startup: Loading file: /cf/apps/sch_lab.so, APP: SCH_LAB_APP
1980-012-14:03:20.25267 ES Startup: loading directly:/cf/apps/sch_lab.so (SCH_LAB_APP) -70028.
1980-012-14:03:20.25286 ES Startup: SCH_LAB_APP loaded and created
SCH Lab Initialized.  Version 2.2.0.0
1980-012-14:03:20.25303 ES Startup: Loading file: /cf/apps/lls_app.so, APP: LLS_APP
1980-012-14:03:20.25304 ES Startup: loading directly:/cf/apps/lls_app.so (LLS_APP) -70028.
1980-012-14:03:20.25322 ES Startup: Could not load cFE application file:/cf/apps/lls_app.so. EC = 0xFFFFFFFF
1980-012-14:03:20.25324 ES Startup: CFE_ES_Main entering OPERATIONAL state
EVS Port1 66/1/CFE_TIME 21: Stop FLYWHEEL
```",invalid,https://github.com/nasa/cFE/issues/8
Need default included mission configuration for unit tests,"You can run the following as a script if you find that easier:
```
    git clone https://github.com/nasa/cFE.git
    cd CFE/
    git checkout cf6f7a771c52fa97c834e765a6c1cb50205c6df0
    rm -rf osal/
    git clone https://github.com/nasa/osal.git
    cd osal/
    git checkout 7139592f04e47f7522b07b1ef9f84a21393df88a
    cd src/os
    ln -s posix posix-ng
    cd ../../..
    cp -r cfe/cmake/sample_defs/ cfe/sample_defs/
    mkdir build-sim/
    cd build-sim/
    export SIMULATION=native
    cmake -DCMAKE_C_COMPILER=gcc -DENABLE_UNIT_TESTS=TRUE ../cfe
```
Then it complains about needing a `MISSIONCONFIG` directory.
When I create an empty directory, `x`, for that, it complains about `x_defs/targets.cmake` not existing.
Is there a default mission config that I can use? I want to build this with a custom compiler, but I need a method to build it with `gcc` first and get unit tests running.",invalid,https://github.com/nasa/cFE/issues/7
Add CI and TO when available,"https://github.com/nasa/CFS_CI
https://github.com/nasa/CFS_TO",,https://github.com/nasa/cFE/issues/6
Make Config fails,"make config returns the following error:
```
>>> [PRE-BUILD] GET MISSING HEADER FILES FROM <CFS_MISSION> CORE <<<

mkdir: cannot create directory ‘inc’: File exists
make: *** [cfs_copy_core_incs] Error 1
```

`ls -al`
```
[tdev@localhost cpu1]$ ls -al inc 
-rw-rw-r--. 1 tdev tdev 1353 Sep 26 14:52 inc
```

`file` returns
```[tdev@localhost cpu1]$ file inc
inc: C source, ASCII text
```

Full output of make config




```
GSFC Classic Build Version 6.5.0
>>> [PRE-BUILD] VERIFY OSAL CONFIGURED <<<
>>> [PRE-BUILD] GET MISSING HEADER FILES FROM <CFS_APP_SRC>/INC <<<



>>> [ENVS] MAKEFILE ENVIRONMENT VARIABLES <<<

MISSION = CFE_TST
‘/home/tdev/workspace/cFE/apps/inc/sample_lib.h’ -> ‘/home/tdev/workspace/cFE/build/mission_inc/sample_lib.h’

THE_APPS = sample_lib sample_app ci_lab to_lab sch_lab
>>> [PRE-BUILD] GET MISSING HEADER FILES FROM <APP>/PUBLIC_INC <<<
THE_TBLS = 


CFS_MISSION = /home/tdev/workspace/cFE

CFS_MISSION_INC = /home/tdev/workspace/cFE/build/mission_inc
>>> [PRE-BUILD] GET MISSING HEADER FILES FROM <APP>/MISSION_INC <<<
CFS_APP_SRC = /home/tdev/workspace/cFE/apps

CFE_FSW = /home/tdev/workspace/cFE/cfe/fsw
CFE_CORE_SRC = /home/tdev/workspace/cFE/cfe/fsw/cfe-core/src

CFE_CORE_PLATFORM_INC_SRC = cpu1
‘/home/tdev/workspace/cFE/apps/sample_app/fsw/mission_inc/sample_app_perfids.h’ -> ‘/home/tdev/workspace/cFE/build/mission_inc/sample_app_perfids.h’
>>> [PRE-BUILD] GET MISSING HEADER FILES FROM <APP>/PLATFORM_INC <<<
CFE_TOOLS = /home/tdev/workspace/cFE/tools
‘/home/tdev/workspace/cFE/apps/ci_lab/fsw/mission_inc/ci_lab_perfids.h’ -> ‘/home/tdev/workspace/cFE/build/mission_inc/ci_lab_perfids.h’

‘/home/tdev/workspace/cFE/apps/to_lab/fsw/mission_inc/to_lab_perfids.h’ -> ‘/home/tdev/workspace/cFE/build/mission_inc/to_lab_perfids.h’
‘/home/tdev/workspace/cFE/apps/sch_lab/fsw/mission_inc/sch_lab_perfids.h’ -> ‘/home/tdev/workspace/cFE/build/mission_inc/sch_lab_perfids.h’
CFE_PSP_SRC = /home/tdev/workspace/cFE/psp/fsw
OSAL = /home/tdev/workspace/cFE/osal
OSAL_SRC = /home/tdev/workspace/cFE/osal/src/os

BUILD_PATH = .
CFS_EXE = ./exe

CFS_PROM = ./exe/cf
>>> [PRE-BUILD] CREATING MISSING <APP> BUILD DIRECTORIES <<<
CFS_PROM_APPS = ./exe/cf/apps


CFS_RAM = ./exe/ram
>>> [PRE-BUILD] GET MISSING MAKEFILES FROM <APP>/FOR_BUILD <<<


‘/home/tdev/workspace/cFE/apps/sample_lib/fsw/for_build/Makefile’ -> ‘sample_lib/Makefile’
>>> [PRE-BUILD] CREATE MISSING TOOL BUILD DIRECTORIES <<<
‘/home/tdev/workspace/cFE/apps/sample_app/fsw/for_build/Makefile’ -> ‘sample_app/Makefile’

‘/home/tdev/workspace/cFE/apps/ci_lab/fsw/for_build/Makefile’ -> ‘ci_lab/Makefile’
‘/home/tdev/workspace/cFE/apps/to_lab/fsw/for_build/Makefile’ -> ‘to_lab/Makefile’
‘/home/tdev/workspace/cFE/tools/elf2cfetbl/for_build/Makefile’ -> ‘elf2cfetbl/Makefile’
‘/home/tdev/workspace/cFE/apps/sch_lab/fsw/for_build/Makefile’ -> ‘sch_lab/Makefile’

>>> [PRE-BUILD] GET MISSING HEADER FILES FROM <CFS_MISSION> CORE <<<

mkdir: cannot create directory ‘inc’: File exists
make: *** [cfs_copy_core_incs] Error 1
```",build-system,https://github.com/nasa/cFE/issues/4
Service not logging under Systemd,"When ran on POSIX systems with SystemD, cFE's log doesn't show up on `journalctl`, the default logging service.  It records all stdout by default. A test with a standard hello world C program on infinite loop showed that the stdout wasn't being buffered or detached. Any help would be greatly appreciated",wontfix,https://github.com/nasa/cFE/issues/3
Suggestion: Modular platform and app makefiles,"One major improvement that could be made to cFE is the ability to specify which apps to build and which platforms to build for at runtime, instead of by changing the Makefiles. CACTUS has a rudimentary implementation of this (see https://github.com/CACTUS-Mission/cFE/commit/bec0b577f2d0f788c17fe212d6a78b2c4cad3f5e) so that we can declare `THE_APPS` as an environment variable. I think it would be a huge improvement to the build process to be able to optionally declare THE_APPS, PSP, BSP, and more at the make command line, i.e.
```bash
make THE_APPS=""sample_lib sample_app""
```
Some tricks may need to be done to allow this to propagate to make sub-tasks, as those variables would only be accessible in the Makefile in the directory the command is run.
",,https://github.com/nasa/cFE/issues/2
Documentation is being improperly recognized as code on GitHub,"Hi Flight Software folks!
First off, great to see the project is finally being hosted somewhere other than SourceForge! I noticed that because of all of the documentation present in the repository, GitHub is falsely identifying the project as HTML-based. For [my university project's fork of cFE](https://github.com/CACTUS-Mission/cFE), we edited our [.gitattributes](https://github.com/CACTUS-Mission/cFE/blob/master/.gitattributes) to tell GitHub's linguist software to interpret .htm, .html, and .css files in this project as being part of the documentation. This should give the repository the proper language statistics.",,https://github.com/nasa/cFE/issues/1
