Title,Body,Labels,URL
"Fix #401, use valid size when calling CFE_MSG_Init","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Use the offset of the payload start, which by definition must include at least enough space for the primary header.  This ensures that the value will pass any size check enforced in CFE_MSG_Init.

Fixes #401

**Testing performed**
Found and Tested as part of the stakeholder software delivery

**Expected behavior changes**
CF sends PDUs successfully (with valid msgid)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/402
CF invokes CFE_MSG_Init with size of 0,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The 3rd parameter of `CFE_MSG_Init()` is supposed to indicate the actual size of the structure/buffer being initialized.  In general, this must be _at least_ the size of the primary header in order to be valid.

CF (at first) passes this as 0, then overwrites this with the real size later on.

The problem is, a size of 0 is totally invalid, and to be correct, `CFE_MSG_Init()` should not be writing any values into a structure that is smaller than the size of a primary header, as this is an error.  Writing any value into a struct of size 0 is a write-beyond-bounds error, and thus the fact that the default CFE_MSG_Init() even allows this is a bug.

**To Reproduce**
Run CF with a proper implementation of `CFE_MSG_Init()` - i.e. one that verifies the size is valid.  When passed a size of 0, none of the header fields will be set (correct behavior).  This results in the buffer being in an indeterminate state, and the MsgId will not be set.

**Expected behavior**
The MsgId needs to be set by the call to `CFE_MSG_Init`

**Code snips**
https://github.com/nasa/CF/blob/38cfee8a2284fc7605e6fb2b2556b528dcf62499/fsw/src/cf_cfdp_sbintf.c#L120-L121

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/CF/issues/401
"Fix #288, Remove unnecessary `CF_UnionArgs_Payload_t` union","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #288 
`CF_UnionArgs_Payload_t` has been removed, given that only a single member of the 3 is used in CF. That member variable - `byte` - has been moved into the `CF_UnionArgsCmd_t` struct, which was the only place where `CF_UnionArgs_Payload_t` was used.

- Re-introduced from https://github.com/nasa/CF/pull/341. https://github.com/nasa/CF/issues/393, https://github.com/nasa/CF/pull/395 reverted this PR due to integration issues. Resubmitting here for consideration in next release.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on logic.
Code is simplified and clearer.

**Contributor Info**
Avi Weiss @thnkslprpt",Equuleus-rc2,https://github.com/nasa/CF/pull/400
"Fix #382, Align CF Command Counter implementation to cFS standard","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #382
  - Command counters renamed
    - `cmd` renamed to `CommandCounter`
    - `err` renamed to `CommandErrorCounter`
  - Command counters changed from size 16 to size 8, and moved out of their own struct into the HK packet directly (this is how all other cFS components/apps implemented the counters)
  - `hk` renamed to `HkPacket` (most cFS components/apps use this common name for the housekeeping packet)

Note: if the `CamelCase` is an issue, can still implement these changes as `snake_case`, although I guess now is as good a time as any to start converting CF variables to `CamelCase`. If so I can open a new issue to flag that all variables should be changed over - all at once (if someone wants to implement that) or gradually as changes are made.
CF is the only cFS app/component to use `snake_case` for naming variables.

Re-introduced from #383.#394, #397 reverted this PR.

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit Tests etc.).

**Expected behavior changes**
`Command`/`CommandError` counters now held directly in the HK packet, instead of through an additional struct member.

This PR improves consistency across cFS, and makes future maintenance easier as variables are named and located as expected.

**Contributor Info**
Avi Weiss @thnkslprpt",Equuleus-rc2,https://github.com/nasa/CF/pull/399
"Fix #288, Remove unnecessary CF_UnionArgs_Payload_t union","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #288 
`CF_UnionArgs_Payload_t` has been removed, given that only a single member of the 3 is used in CF. That member variable - `byte` - has been moved into the `CF_UnionArgsCmd_t` struct, which was the only place where `CF_UnionArgs_Payload_t` was used.
Re-introduced from #341. #393, #395 reverted this PR.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on logic.

**Contributor Info**
@thnkslprpt",Equuleus-rc2,https://github.com/nasa/CF/pull/398
"Fix #394, revert merge of PR #383.","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #394.

**Expected behavior changes**
Reverts #383.

**Contributor Info - All information REQUIRED for consideration of pull request**
Dylan Z. Baker - NASA/GSFC","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/397
Revert,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
-Fixes #393 
-Fixes #394 

**Testing performed**
cert_testbed/cfe_bvt  `./runCTFscript.sh cFE_CF*`

**Expected behavior changes**
No integration issues

**System(s) tested on**
 - OS: Ubuntu 20.04

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, Vantage Systems
",,https://github.com/nasa/CF/pull/396
"Fix #393, revert merge of PR #341.","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #393.

**Expected behavior changes**
Reverts #341.

**Contributor Info - All information REQUIRED for consideration of pull request**
Dylan Z. Baker - NASA/GSFC","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/395
Move PR #383 into Equuleus-rc2,"**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
There were some integrations issues with this pull request.

**Expected behavior**
PR #383 is reverted and a new pull request is created to integrate it into the following release.

**Reporter Info**
Dylan Z. Baker/NASA GSFC",,https://github.com/nasa/CF/issues/394
Move PR #341 into Equuleus-rc2,"**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
There were some integrations issues with this pull request.

**Expected behavior**
PR #341 is reverted and a new pull request is created to integrate it into the following release.

**Reporter Info**
Dylan Z. Baker/NASA GSFC",CCB:Approved,https://github.com/nasa/CF/issues/393
Seg Fault when invalid destination filename is invalid,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**

CF will seg-fault when uploading a file with an invalid destination filename. CF outputs an EVS message that it failed to create the file. It then appears to access a null pointer for a transaction.

Backtrace:
```
EVS Port1 66/1/CF 40: CF: md received for source: aa_put_file_test.txt, dest: cf/cf_test.txt
EVS Port1 66/1/CF 80: CF R0(21:3): failed to create file cf/cf_test.txt for writing, error=-108

Thread 16 ""CF"" received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7ffff7acb700 (LWP 16577)]
CF_CFDP_SendEotPkt (t=0x7ffff7ae9c50 <CF_AppData+1328>) at /sc3m_cfs/cfs_fsw/baseline_apps/cf/fsw/src/cf_cfdp.c:1698
1698            PktBuf->eot.direction  = t->history->dir;
(gdb) bt
#0  CF_CFDP_SendEotPkt (t=0x7ffff7ae9c50 <CF_AppData+1328>) at /sc3m_cfs/cfs_fsw/baseline_apps/cf/fsw/src/cf_cfdp.c:1698
#1  0x00007ffff7ad73f2 in CF_CFDP_ResetTransaction (t=0x7ffff7ae9c50 <CF_AppData+1328>, keep_history=0)
    at /sc3m_cfs/cfs_fsw/baseline_apps/cf/fsw/src/cf_cfdp.c:1607
#2  0x00007ffff7ad5d5e in CF_CFDP_RecvIdle (t=0x7ffff7ae9c50 <CF_AppData+1328>, ph=0x7ffff7ae9a28 <CF_AppData+776>)
    at /sc3m_cfs/cfs_fsw/baseline_apps/cf/fsw/src/cf_cfdp.c:942
#3  0x00007ffff7adc052 in CF_CFDP_RxStateDispatch (t=0x7ffff7ae9c50 <CF_AppData+1328>, ph=0x7ffff7ae9a28 <CF_AppData+776>,
    dispatch=0x7ffff7ae8760 <state_fns>) at /sc3m_cfs/cfs_fsw/baseline_apps/cf/fsw/src/cf_cfdp_dispatch.c:197
#4  0x00007ffff7ad48af in CF_CFDP_DispatchRecv (t=0x7ffff7ae9c50 <CF_AppData+1328>, ph=0x7ffff7ae9a28 <CF_AppData+776>)
    at /sc3m_cfs/cfs_fsw/baseline_apps/cf/fsw/src/cf_cfdp.c:178
#5  0x00007ffff7adbb3c in CF_CFDP_ReceiveMessage (c=0x7ffff7af5ee0 <CF_AppData+51136>)
    at /sc3m_cfs/cfs_fsw/baseline_apps/cf/fsw/src/cf_cfdp_sbintf.c:295
#6  0x00007ffff7ad7335 in CF_CFDP_CycleEngine () at /sc3m_cfs/cfs_fsw/baseline_apps/cf/fsw/src/cf_cfdp.c:1575
#7  0x00007ffff7ad3ffe in CF_WakeUp () at /sc3m_cfs/cfs_fsw/baseline_apps/cf/fsw/src/cf_app.c:278
#8  0x00007ffff7ad4084 in CF_ProcessMsg (msg=0x5555555d9e60 <CFE_SB_Global+14144>)
    at /sc3m_cfs/cfs_fsw/baseline_apps/cf/fsw/src/cf_app.c:301
#9  0x00007ffff7ad4199 in CF_AppMain () at /sc3m_cfs/cfs_fsw/baseline_apps/cf/fsw/src/cf_app.c:351
#10 0x000055555556bb04 in CFE_ES_TaskEntryPoint () at /sc3m_cfs/cfs_fsw/cfe/modules/es/fsw/src/cfe_es_apps.c:579
#11 0x0000555555596695 in OS_TaskEntryPoint (task_id=65549) at /sc3m_cfs/cfs_fsw/osal/src/os/shared/src/osapi-task.c:138
#12 0x000055555559accb in OS_PthreadTaskEntry (arg=0x1000d) at /sc3m_cfs/cfs_fsw/osal/src/os/posix/src/os-impl-tasks.c:122
#13 0x00007ffff7fa5609 in start_thread (arg=<optimized out>) at pthread_create.c:477
#14 0x00007ffff7eba133 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
```

We are using Cosmos 4.5 with the CFDP engine. We are using the SEND FILE command.

**To Reproduce**
Steps to reproduce the behavior:
1. Launch cFS with the CF app running.
2. Use Cosmos/CFDP engine to send a file, specify an invalid filename (to a directory that doesn't exist, for example)
3. See error in cFS output

**Expected behavior**

CF should report that an error happened (which it currently does), but not seg-fault :)

**Code snips**

None.

**System observed on:**
 - x86_64 PC
 - OS: Ubuntu 20.04
 - Versions: cFE 7.0 rc4, OSAL v6.0.0-rc4, PSP  v1.6.0-rc4 for pc-linux.
 
Note that we have modified cFE, OSAL, and the PSP, but mostly to run on our target system: a microblaze running petalinux (upon which we have also observed the seg-fault).

**Additional context**

Observed with draco-rc2 and draco-rc4

**Reporter Info**
James Marshall, NASA GSFC 587
",,https://github.com/nasa/CF/issues/392
"Fix #390, Update size variables to `size_t` and `CF_ChunkSize_t` typedefs","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #390
  - Updates a few identifiable variables/parameters representing size to the more expressive typedefs

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/CF/pull/391
A few size variables could be updated to `size_t` or `CF_ChunkSize_t`,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
A few variables in CF could be updated to the more expressive `size_t` or `CF_ChunkSize_t` types

**Code snips**
`val` should be of `CF_ChunkSize_t` type:
https://github.com/nasa/CF/blob/0f18ae4b8f800afefdf60c97809c737289f46942/fsw/src/cf_cmd.h#L475

`size` should be of `size_t` type:
https://github.com/nasa/CF/blob/0f18ae4b8f800afefdf60c97809c737289f46942/fsw/src/cf_cmd.c#L942-L947

...and few others.

**Expected behavior**
Update where appropriate

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/CF/issues/390
Receiving Entity Not Handling EOF (cancel) PDU Correctly,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
When 2 entities are transferring a file in Reliable mode, if a Cancel command is sent to the sender entity, there appears to be something broken with the resulting handshaking with the receiver entity, which ultimately does not allow the sender entity to terminate the transaction gracefully.

When the sender receives a Cancel command, it issues an EOF (cancel) PDU to the receiver.  Upon receiving this EOF-PDU, the receiver immediately terminates, without any response to the sender.  This results in the sender being stuck in a wait-for-EOF-Ack state and only terminating when the inactivity timer is reached.

**To Reproduce**
Steps to reproduce the behavior:
1. Start a file transfer between 2 CFDP entities in Reliable mode
2. Send a Cancel command to the sender entity
3. Observe that receiver entity immediately terminates the transaction (whereas per the CFDP specification, it should send an EOF-Ack, a FIN PDU, and waiting for the FIN-Ack from the sender before terminating)
4. Observe that the sender entity does not terminate correctly because it continues to wait for the EOF-Ack from the receiver

**Expected behavior**
1. File transfer in Reliable mode started between 2 entities
2. Cancel command sent to sender entity
3. Sender entity issues a EOF (cancel) PDU to the receiver entity
4. Receiver entity issues a EOF-Ack PDU to the sender entity
5. Receiver entity issues a FIN PDU to the sender entity
6. Sender entity issues a FIN-Ack PDU to the receiver entity and terminates
7. Receiver entity terminates upon receiving the FIN-Ack

**Code snips**
I believe issue is in the CF_CFDP_R2_SubstateRecvEof function logic in cf_cfdp_r.c.

The logic defers sending of the EOF-Ack until after CF_CFDP_R2_SubstateRecvEof runs to completion:
`/* always ack the EOF, even if we're not done */`
`t->state_data.r.r2.eof_cc = FGV(eof->cc, PDU_FLAGS_CC);`
`t->flags.rx.send_ack = 1; /* defer sending ack to tick handling */`

EOF (cancel) PDU then follows a path that eventually results in a call to CF_CFDP_R2_Reset: 
`if(t->state_data.r.r2.eof_cc==CC_NO_ERROR) {`
`    CF_CFDP_R2_Complete(t, 1); /* CF_CFDP_R2_Complete() will change state */`
`}`
`else {`
`    CF_CFDP_R2_Reset(t);`
`}`

Then within CF_CFDP_R2_Reset, the current transaction is already reset and freed.
`if((t->state_data.r.sub_state==RECV_WAIT_FOR_FIN_ACK)||(t->state_data.r.r2.eof_cc!=CC_NO_ERROR)||(t->history->cc!=CC_NO_ERROR)||t->flags.rx.canceled) {`
`    CF_CFDP_R1_Reset(t); /* it's done */`
`}`

My fix: added an ""else if"" section to CF_CFDP_R2_SubstateRecvEof:
`else if (t->state_data.r.r2.eof_cc == CF_CFDP_ConditionCode_CANCEL_REQUEST_RECEIVED) {`
`  t->flags.rx.send_fin = 1;`
`  t->history->txn_stat = CF_CFDP_ConditionCode_CANCEL_REQUEST_RECEIVED;`
`}`

**System observed on:**
 - Hardware
 - OS: Linux Ubuntu 20.04
 - Versions CF 3.0.0
**Additional context**
N/A

**Reporter Info**
Katie Chou
",,https://github.com/nasa/CF/issues/389
"Fix #387, Update minor out-of-family naming/consistency issues in CF","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #387
  - Add event for `CreatePipe()` failure during initialization (and created a new matching EID: `CF_CR_PIPE_ERR_EID`)
  - In `CF_HkCmd()`: Use `CFE_SB_TimeStampMsg()` instead of `CFE_MSG_SetMsgTime()` and use the `CFE_MSG_PTR` conversion macro - CF was the only app remaining to use `CFE_MSG_SetMsgTime()`
  - Add `memset` at the beginning of the initialization routine to zero-out the global data structure (defensive programming, and for consistency - almost all of the cFS modules/apps do this)
  - Remove check of the return value of `CFE_EVS_SendEvent()` reporting initialization success - this is very out-of-family for cFS and also inconsistent - CF does not check the return value of any other calls to `CFE_EVS_SendEvent()`
  - Remove null check in `CF_AppMain()` after successful call to `CFE_SB_ReceiveBuffer()` - out-of-family with cFS and also redundant (`CFE_SB_ReceiveBuffer()` with a successful return guarantees the returned pointer to be non-`NULL`)
 

Minor changes:
  - Comment in `CF_CmdAbandon_Txn()` noted incorrect parameter cannot be `NULL` - corrected this
  - Rename `tlm_header` to `TelemetryHeader`
  - Rename `run_status` to `RunStatus`
  - Rename `cmd_pipe` to `CmdPipe`
  - Rename Software Bus command pipe message pointer variables from `msg` to `BufPtr`
  - Rename `msg_id` to `MessageID`
  - Move 'Cmd' to end of command function names (e.g. `CF_CmdNoop()` changed to `CF_NoopCmd()`)
  - Rename `CF_CmdReset()` to `CF_ResetCountersCmd()` - more clear and specific, and in line with vast majority of cFS incl. cFE
  - Rename `CF_Init()` to `CF_AppInit()`

**Note:** CF does not verify length for non-command MIDs received in the app pipe (`CF_WAKE_UP_MID` and `CF_SEND_HK_MID`) - it would be worthwhile to rectify this at some point.

cFE and the other apps are generally inconsistent on this - some don't check non-command MIDs, some use a single VerifyLength function to check all MIDs arriving, some use separate VerifyLength functions for command and non-command MIDs...

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).

**Expected behavior changes**
Minor changes as noted above, no significant changes to behavior.

Aligning aberrant naming to the predominant patterns in cFS improves usability and eases future maintenance.

**Contributor Info**
Avi Weiss @thnkslprpt",enhancement,https://github.com/nasa/CF/pull/388
Some minor out-of-family naming/consistency issues in CF could be updated,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
CF is the only app to still use `CFE_MSG_SetMsgTime()` to timestamp the HK packet, rather than `CFE_SB_TimeStampMsg()`:
https://github.com/nasa/CF/blob/0f18ae4b8f800afefdf60c97809c737289f46942/fsw/src/cf_app.c#L47-L51

No `memset` to zero-out the global data structure upon initialization.

CF checks the return value of the call to `CFE_EVS_SendEvent()` at the end of a successful initialization - not incorrect but unnecessary. Returns from `CFE_EVS_SendEvent()` are only checked a handful of times across cFS out of several thousand instances. Also, CF does not check returns from this function anywhere else in the source code.
https://github.com/nasa/CF/blob/0f18ae4b8f800afefdf60c97809c737289f46942/fsw/src/cf_app.c#L251-L257

In `CF_AppMain()`, there is a check for `CFE_SUCCESS` _and_ for a null pointer of the buffer passed in to `CFE_SB_ReceiveBuffer()` - this is guaranteed by `CFE_SB_ReceiveBuffer()` to not be possible and is therefore unnecessary. cFE and almost all other apps do not do this.
https://github.com/nasa/CF/blob/0f18ae4b8f800afefdf60c97809c737289f46942/fsw/src/cf_app.c#L336-L343

Some other naming inconsistencies that could be updated to match standard cFS patterns such as common variables and function/command names also exist.

**Expected behavior**
Align with cFS where appropriate - consistency makes maintenance easier, and improves usability for consumers of cFS and the open-source apps.

**Reporter Info**
Avi Weiss @thnkslprpt",enhancement,https://github.com/nasa/CF/issues/387
"CF Draco RC4: Many Fiile Uploads caus CF to Hang or have ""Gap Errors""","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
On RST WFI FSW, when uploading many files (40-60 files), the CF application either stops responding ang hangs or it responds with 'Gap errors'. This is most easily seen when uploading a large number of table files. 

On RST WFI FSW, this bug can be tracked under https://etdjira.gsfc.nasa.gov/browse/WFI-2531


**To Reproduce**
This bug was originally seen by the WFI Simulator team when trying to upload large numbers of ALD files to the WFI FSW. This bug was reproduced in the WFI FSW Lab COTS GR740 string by uploading 2 to 3 sets of 40 table files. 

From WFI-2531: ""The script wfif_fgs_table_dump_and_load_test.prc dumps and reloads all FGS tables (43) total in sequence. Once in a while the script will hang because a table was not able to upload. CFDP page will sometimes show a ""gap"" error.""

**Expected behavior**
The CF application should be able to handle ""large"" numbers of file uploads without hanging or producing errors. 

**System observed on:**
 - Roman RST WPC, and LEON4 GR740 COTS 
 - RTEMS 5.0
 - CF Draco RC4 (and Draco RC2), WFI FSW 3.2

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Nicholas Yanchik, NASA Goddard Space Flight Center, WFI FSW PDL
nicholas.j.yanchik@nasa.gov
",bug,https://github.com/nasa/CF/issues/386
"Fix #384, Update `status` variables (0, -1) to their defined macros","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #384 
  - 'Magic-number' `status`/`return` values such as 0 and -1 have been replaced with their respective defined macros (`CFE_SUCCESS`, `CF_ERROR` etc.).

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).

**Expected behavior changes**
No change.
Improves expressiveness.

**Contributor Info**
Avi Weiss @thnkslprpt","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/385
"Magic number `status` variables (0, -1) can be updated to their defined macros","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
CF could use a quick clean-up of the `return`/`status` values that are still using `0` to represent success (or more specifically `CFE_SUCCESS`) and `-1` to represent error (or more specifically `CF_ERROR`).

**Expected behavior**
Use the more expressive defined macros if they are available.

**Reporter Info**
Avi Weiss @thnkslprpt",Equuleus-rc1,https://github.com/nasa/CF/issues/384
"Fix #382, Align CF Command Counter implementation to cFS standard","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #382
  - Command counters renamed
    - `cmd` renamed to `CommandCounter`
    - `err` renamed to `CommandErrorCounter`
  - Command counters changed from size 16 to size 8, and moved out of their own struct into the HK packet directly (this is how all other cFS components/apps implemented the counters)
  - `hk` renamed to `HkPacket` (most cFS components/apps use this common name for the housekeeping packet)

Note: if the `CamelCase` is an issue, can still implement these changes as `snake_case`, although I guess now is as good a time as any to start converting CF variables to `CamelCase`. If so I can open a new issue to flag that all variables should be changed over - all at once (if someone wants to implement that) or gradually as changes are made.
CF is the only cFS app/component to use `snake_case` for naming variables.

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit Tests etc.).

**Expected behavior changes**
`Command`/`CommandError` counters now held directly in the HK packet, instead of through an additional struct member.

This PR improves consistency across cFS, and makes future maintenance easier as variables are named and located as expected.

**Contributor Info**
Avi Weiss @thnkslprpt","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/383
CF command counters format inconsistent with cFS,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
CF uses a separate struct (`CF_HkCmdCounters_t`) to hold the command and error counters. CF is the only app/component of cFS to do this.

**Code snips**
https://github.com/nasa/CF/blob/930b0e51183ec9ce501ebe4210a1d777d5866496/fsw/src/cf_cmd.c#L51

**Expected behavior**
Align CF command counters to the standard cFS implementation.
i.e. `CF_AppData.HkPacket.CommandCounter`

**Reporter Info**
Avi Weiss @thnkslprpt",Equuleus-rc2,https://github.com/nasa/CF/issues/382
"Fix #380, Support polling with no delay","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #380 

**Testing performed**
CI and custom distro with zero delay, confirmed faster than 1 second polling

**Expected behavior changes**
Supports polling with zero timeout

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Project request

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/381
Support polling with no delay,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Polling has a timer that doesn't support zero delay, limiting performance:
https://github.com/nasa/CF/blob/930b0e51183ec9ce501ebe4210a1d777d5866496/fsw/inc/cf_tbldefs.h#L36-L40
https://github.com/nasa/CF/blob/930b0e51183ec9ce501ebe4210a1d777d5866496/fsw/src/cf_cfdp.c#L1513-L1515
https://github.com/nasa/CF/blob/930b0e51183ec9ce501ebe4210a1d777d5866496/unit-test/cf_cfdp_tests.c#L1144-L1148

**Describe the solution you'd like**
There's already a channel enable, no need to use interval to disable the channel.  Update to support 0 delay to maximize throughput when using the polling directory.

**Describe alternatives you've considered**
None

**Additional context**
I can't say I really understand why 0 timeout wasn't supported to begin with.  If anyone knows I'd be interested to hear it.  In rate constrained situations unnecessary delays on file transfers are a big impact.  Sending small files on a fast link could waste significant bandwidth by waiting a second between polling.

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, Equuleus-rc1",https://github.com/nasa/CF/issues/380
"Fix #377, Remove error event on nominal semaphore timeout","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #377 

**Testing performed**
Updated unit tests and functionally in prototype code

**Expected behavior changes**
No error event for nominal semaphore timeout (flow control)

**System(s) tested on**
Ubuntu 20.04

**Additional context**
- Added #378

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/379
Rework no message buffer error reporting to not spam,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
- Related to bug #377

Fix for #377 only addressed removal of error event on nominal semaphore timeout (flow control).  When a message buffer isn't available, this error event will flood when `silent` is false since every wakeup CF will try to resend the PDU.  Note `silent` is set to false on all non-file data PDUs.

I didn't see any justification for why the code was implemented this way (no event for file data PDUs, events on the rest).

This is the snip before the fix for #377.
https://github.com/nasa/CF/blob/b0269effd3c0c3f8120bba1abbdd50abcaf53e59/fsw/src/cf_cfdp_sbintf.c#L91-L116

**Describe the solution you'd like**
I think it would be more useful to know it happened and a count of how often.  Consider adding a counter for both semaphore timeouts and no message buffer available.  Only send an event on the HK cycle when ""no message buffer"" counter increments, and report both in HK.

**Describe alternatives you've considered**
Could just send the event once when the no message buffer available count transitions to non-zero.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/CF/issues/378
Silence logic around error event broken on semaphore timeout,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
If the semaphore times out there's no attempt to allocate a buffer.  If a buffer isn't allocated and silent is false, an error event is sent claiming there was no buffer available.

https://github.com/nasa/CF/blob/b0269effd3c0c3f8120bba1abbdd50abcaf53e59/fsw/src/cf_cfdp_sbintf.c#L91-L116

This silent logic doesn't make any sense to me, since it's passed in as 0 from all the non-file data PDUs but 1 for data.  If it was intended for the allocate buffer why only non-data PDUs?  I doubt it was ever intended for the semaphore timeout.

**To Reproduce**
I saw it when waiting for the semaphore to send an Eof PDU.  Could probably see it on the metadata send, but I initialize w/ a nonzero sem count.

**Expected behavior**
No event on semaphore timeout, this is nominal behavior for flow control.  TBH I'm not a huge fan of a possible flooding event on the failure to get a buffer.  I'd rather see a combined approach of a counter and probably a single event sent at the maximum rate of each HK cycle only when the counter increments.

**Code snips**
See above.

**System observed on:**
Ubuntu 20.04

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC","bug, Equuleus-rc1",https://github.com/nasa/CF/issues/377
"Fix #57, Remove local error return codes in CF_ValidateConfigTable()","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #57
  - Removed the local error return codes and replaced with one of the new CFE macros indicating validation failure.

**Testing performed**
GitHub CI actions all passing successfully.

**Expected behavior changes**
`CF_ValidateConfigTable()` will now return a relevant error code that is intelligible to outside functions, if they want to take action on it.
The function is noticeably simpler/cleaner now.

**Contributor Info**
Avi Weiss @thnkslprpt","enhancement, CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/376
"Fix #373, Optionally move files when complete","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Most trivial implementation I could think of.  Just adds entry to the table, if it's filled in moves the file instead of delete, falls back to a delete if the mv fails.  This moves on every TX complete for all styles... good enough for our required use-case but may not work for everyone.  If the use case is to support either move or delete, you can set up two channels (one w/ the move dir defined).
- Fix #373

**Testing performed**
Tested use case in project code.  CI (updated unit tests)

**Expected behavior changes**
If move_dir is filled it, attempts to move instead of remove (remove is performed if move fails).

**System(s) tested on**
Ubuntu 20.04

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/375
Seeking help in cross testing this CFDP implementation ,"I am reaching out to seek your help in cross-testing our CFDP implementation for the Python version built by us at LibreCube. As a beginner in C++ and new to the cFS software, I would appreciate any assistance you can provide in setting up a client or server or any tutorial for beginners that you may have available.

Our team has been working on developing a Python-based CFDP implementation, and we would like to ensure that it is compatible with the cFS software. We believe that your expertise in this area would be invaluable in helping us to achieve this goal.

Specifically, we are seeking assistance in the following areas:

1. Setting up a client and server for CFDP using the cFS software
2. Cross-testing our Python-based CFDP implementation with the cFS software
3. Any tutorial or guidance that you can provide for beginners in using the cFS software",,https://github.com/nasa/CF/issues/374
Add option to move files from polling directory instead of delete,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Only way to send a file without deleting is by command which unnecessarily limits design options.

Intra-app commands isn't ideal, but currently the only option if you want to automate sending files without deleting them.  Also nicer for automated data prioritization algorithms to query the number of files in the polling directory (assuming just file count resolution is needed), vs more complex methods of tracking how much data is actually queued via the individual commands, processing CF tlm or similar.

**Describe the solution you'd like**
Support moving the file from the polling directory instead of always deleting.  Possibly rework the `keep` option to support a `move` if the move directory is defined (via config) and available.  Also useful for commanded cases to just move when done.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",Equuleus-rc1,https://github.com/nasa/CF/issues/373
"Fix #270, Update CF_ProcessMsg() comment description","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #270 
Corrected description for the `CF_ProcessMsg()` function in `cf_app.h`

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
None - comment change only.

**Contributor Info**
Avi Weiss @thnkslprpt","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/372
"Fix #139, Remove use of message storage in CF_AppData global","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #139 
Removed the only remaining use of the global data structure to store the message buffer. No longer required and all tests passing without need for it.
Some typos and capitalizations of acronyms added along with this PR.
Code changes are in `cf_cfdp_sbintf.c`. The rest are typos/comments amendments.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/371
"Fix #105, Remove 'dummy' from variable names","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #105
**_Resubmission of https://github.com/nasa/CF/pull/367
Somehow I tied myself in a few knots trying to squash the merge commit and some clang-format corrections into a single commit.
Anyway, this new PR is from an updated branch so there should be no merge commits I believe._**
Removed (unnecessary) use of 'dummy' in several variable names and corresponding function names for completeness - e.g. `cf_config_table_tests_set_table_to_nominal()`). Note `Dummy_CF_TsnChanAction_fn_t()` left as is due to conflicting type defined with the exact same name as this function.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully (except cppcheck convert to sarif issue - already documented here: https://github.com/nasa/cFS/pull/657)

**Expected behavior changes**
None

**Contributor Info**
Avi Weiss @thnkslprpt","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/370
Audit CF for cyclomatic complexity compliance ,"Checklist (Please check before submitting)

    [x ] I reviewed the [Contributing Guide](https://github.com/nasa/FM/blob/main/CONTRIBUTING.md).
    [x ] I reviewed the [README file](https://github.com/nasa/FM/blob/main/README.md) to see if the feature is in the major future work.
    [x ] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

Is your feature request related to a problem? Please describe.
NASA guidelines in NPR 7150.2D recommends maintaining a cyclomatic complexity (cc) in software, in particular flight software of 15 or less.

cf_cmd.c:CF_CmdWriteQueue (cc of 18) and cf_cfdp_r.c:CF_CFDP_R_Tick (cc of 17) unnecessarily violate the recommendation of a cyclomatic complexity of 15 or less.

Describe the solution you'd like
Audit cf_cmd.c:CF_CmdWriteQueue and cf_cfdp_r.c:CF_CFDP_R_Tick to see if functions would benefit from simplification such that they comply with NPR 7150.2D recommendation.

Requester Info
Dan Knutsen",,https://github.com/nasa/CF/issues/369
"Fix #276, Update out-of-date doxygen text","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #276 
Renamed file (cf_def_cfg.c) updated to the new name (cf_def_config.c), and quick note about get/set functions added.

**Expected behavior changes**
None (documentation changes only).

**Contributor Info**
Avi Weiss @thnkslprpt","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/368
"Fix #105, Remove 'dummy' from variable names","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #105 
Removed (unnecessary) use of 'dummy' in several variable names.
Note there are several other issues open to clean up the unit tests in CF, including improving/shortening the test function names.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
None

**Contributor Info**
Avi Weiss @thnkslprpt",CCB:Approved,https://github.com/nasa/CF/pull/367
"Fix #365, Remove extraneous assignments to CFE_SUCCESS","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #365 
Extraneous assignments to CFE_SUCCESS were removed.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",Equuleus-rc1,https://github.com/nasa/CF/pull/366
Extraneous assignments to CFE_SUCCESS,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
CF has a few extraneous assignments to `CFE_SUCCESS` as in https://github.com/nasa/HS/issues/10

**Code snips**
https://github.com/nasa/CF/blob/19c18b9dbdb0093e9bea78322de777e8f282acfb/fsw/src/cf_app.c#L151-L156
https://github.com/nasa/CF/blob/19c18b9dbdb0093e9bea78322de777e8f282acfb/fsw/src/cf_cfdp.c#L1324-L1331

**Expected behavior**
Remove assignments - unnecessary code.

**Reporter Info**
Avi Weiss @thnkslprpt",Equuleus-rc1,https://github.com/nasa/CF/issues/365
"Fix #145, Clean up CF return codes","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #145
- most `int`/`int32` return types were converted to `CFE_Status_t` (cases of specifically unsigned or intentionally long/short types (e.g. `uint64`, `uint8`) were not changed)
- successful returns now almost all represented by `CFE_SUCCESS` rather than 0 (zero)
- unsuccessful returns now almost all represented by `CF_ERROR` macro, or specific error macros where appropriate for repeat cases
- new error return macros all negative (unlike previously where some were positive enum values)
- `CF_Timer_Expired()` changed to bool return type
- converted `CF_SendRet_t` enum error return values to macros (all negative)
   - deleted unused `CF_SendRet_FAILURE` enum value
- converted `CF_RxEofRet_t` enum error return values to macros (all negative)
   - deleted unused `CF_RxEofRet_INVALID` enum value

---

Minor changes:
- updated this test message: should say `(failed)`, not `(success)`:
   - https://github.com/nasa/CF/blob/19c18b9dbdb0093e9bea78322de777e8f282acfb/unit-test/cf_cmd_tests.c#L3569
- couple of typos that were noticed along the way (e.g. deode instead of decode)
- added documentation for `@retval CF_SEND_PDU_NO_BUF_AVAIL_ERROR` (previously `CF_SendRet_NO_MSG`) for `CF_CFDP_SendNak()` (was simply missing)
- `@retval CF_SEND_PDU_ERROR` (previously `CF_SendRet_ERROR`) was not actually implemented/used and was removed from the prototype descriptions of:
   - `CF_CFDP_SendFin()`
   - `CF_CFDP_SendAck()`
   - `CF_CFDP_SendMd()`
   - `CF_CFDP_SendEof()`
- removed `/* error return path */` comments that are no longer relevant since the `goto`'s were removed

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
Behavior essentially unchanged.
Removing positive error return values eases future maintainability.
Using a defined set of error return macros improves code clarity and makes CF more consistent with cFE and the other cFS apps.
Synchronizing the return types to `CFE_Status_t` simplifies the code, and makes it more type-safe.

Could consider adding to this PR, or in the future, defining unique error return macros for each unique return type.

**Contributor Info**
Avi Weiss @thnkslprpt","CCB:Approved, Equuleus-rc1",https://github.com/nasa/CF/pull/364
Decoding Segments using Incorrect Macro (CF_PDU_MAX_TLV),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Code snips**
While checking out the most recent version of the CF repository to test with a custom file sending application, I ran into this line while trying to figure out why NAK's were acting strangely:
https://github.com/nasa/CF/blob/19c18b9dbdb0093e9bea78322de777e8f282acfb/fsw/src/cf_codec.c#L1127

Shouldn't it look moreso like this? There are other lines referencing the ```CF_PDU_MAX_TLV``` macro, but those compare against the ```plseg->num_tlv``` struct member. When I modified it to this in my instance of cFS, all CFDP functions worked as expected:
```
if (plseg->num_segments >= CF_PDU_MAX_SEGMENTS)
```",bug,https://github.com/nasa/CF/issues/363
"Fix #361, add option for trailer bytes in CFDP PDUs","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds an option to insert platform-specific padding at the end of CFDP PDU encapsulation.  The padding area may be utilized by the deployment to add arbitrary verification information to the PDU.

Fixes #361

**Testing performed**
Build and run all tests
Run a CFDP file transfer

**Expected behavior changes**
None with default config.  New config option allows user to add padding to the end of CFDP PDUs for trailer bytes.

**System(s) tested on**
Debian

**Additional context**
The extra space is added only to the SB encapsulation of CFDP PDUs, this is not within the CFDP PDU itself (that is, the size inside the CFDP PDU does not include these extra bytes, but the size in the CFE SB message that holds the PDU does include it).

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/362
Add option for padding bytes / trailer at end of CF PDU,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Some deployment scenarios for CF may require some extra platform-specific trailing data to be appended to the end of the PDUs, for example a custom CRC or error check/correction code.

**Describe the solution you'd like**
To facilitate this, CF should offer an option to add extra padding bytes to the end of the PDU so that the platform may fill these bytes with the desired trailing data.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, draco-rc4",https://github.com/nasa/CF/issues/361
Superfluous header #includes,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
In a recent PR (in cFE) it was noted that some includes were not necessary either because the relevant files would have to be included separately anyway, or because they came 'for free' via nested includes in other headers that pull in the same files.

A quick run through of CF shows a few that might be able to be removed here as well (this branch still builds fine, at least the CI workflows).

**Code snips**
https://github.com/nasa/CF/compare/main...thnkslprpt:CF:cppclean-headers

**Reporter Info**
Avi Weiss @thnkslprpt",wontfix,https://github.com/nasa/CF/issues/360
CF Backwards Compatibility,it possible to simply update CF app (1.4xx) and have that new version of CF be backwards compatible with all the other apps CFE etc?,question,https://github.com/nasa/CF/issues/359
"Fix #357, Replace quotes with angle brackets in /inc","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #357 - replace quotes with angle brackets in /inc files.

**Testing performed**
1. Performed build verification testing
2. CI

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA Goddard
","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/358
Replace quotes with angle brackets in #include statements within /inc,"**Describe the solution you'd like**
Quotes should be replaced with angle brackets in #include statements that reside in the /inc location.  This will ensure that the preprocessor selects the files pre-designated to override the default files contained within the open source cFS build release - as opposed to selecting those located in the same directory.

**Requester Info**
Dan Knutsen
NASA Goddard
",draco-rc4,https://github.com/nasa/CF/issues/357
"Fix #355, Adds fsw/src to app target","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
-Fixes #355 

**Testing performed**
make install

**Expected behavior changes**
Successful cert_testbed build

**System(s) tested on**
- Ubuntu 20.04

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, Vantage Systems
","invalid, CCB:Ignore",https://github.com/nasa/CF/pull/356
Add fsw/src to app target,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Cannot build cert_testbed. `target_include_directories(xx PUBLIC fsw/src)` is needed to build tables, etc. Revise CMakeLists.txt

**To Reproduce**
Build in cert_testbed

**Expected behavior**
Error-free build

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - Ubuntu 20.04

**Additional context**
N/A

**Reporter Info**
Justin Figueroa, Vantage Systems
",invalid,https://github.com/nasa/CF/issues/355
"Fix #325, update requirements for more concise transaction status code","**Checklist (Please check before submitting)**

* [ x ] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [ x ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Addresses #325.
Updates requirements to support transaction status codes indicating early completion.

**Testing performed**
N/A - documentation update

**Expected behavior changes**
N/A - documentation update

**System(s) tested on**
Ubuntu 22.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Dylan Baker, NASA-GSFC Code 582","CCB:Approved, requirements, draco-rc4",https://github.com/nasa/CF/pull/354
"Fix #352, User's Guide CleanUp","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Pushing doxygen update to refactor the CF User's Guide for @semaldona 

**Testing performed**
Build/Reviewed updated User's Guide

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA Goddard
","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/353
User's Guide Needs Rework,"**Is your feature request related to a problem? Please describe.**
CF user's guide is not in line with the amount of detail provided for the other apps.

**Describe the solution you'd like**
Clean up doxygen + add more detail in regards to how to use the app.

**Requester Info**
Dan Knutsen
NASA Goddard
",draco-rc4,https://github.com/nasa/CF/issues/352
Double semicolon in #define macro?,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Code snips**
Does this macro expand out and result in a double-semicolon (i.e. an empty statement)?
https://github.com/nasa/CF/blob/e1daebed33b02929945caa44404e491ef7a56d02/unit-test/utilities/cf_test_utils.h#L222

For example, here:
https://github.com/nasa/CF/blob/e1daebed33b02929945caa44404e491ef7a56d02/unit-test/cf_chunk_tests.c#L355-L358

**Reporter Info**
Avi Weiss @thnkslprpt",bug,https://github.com/nasa/CF/issues/351
Coding Style: Braces around single-line statements in if/for blocks?,"**Describe the bug**
Most single-line statements (>97%) in if/for blocks are surrounded by braces, but not all.

**Expected behavior**
If not contrary to the coding standard, no change is required, although consistency is always nice...

**Additional context**
Most safety-focused coding standards require braces in call blocks, even for single-line statements (and often even for empty statements). I'm not sure where the cFS (GSFC) standard stands on this.

This is due to the perceived improvement in readability and maintainability (i.e. with braces, there is a lower risk of messing up the scope of a statement when something is either added or removed in the future).

**Code snips**
https://github.com/nasa/CF/blob/b9a88983e7396ce0ae0e42abe82e1fc9fd86bd51/fsw/src/cf_cfdp_s.c#L789-L790
https://github.com/nasa/CF/blob/b9a88983e7396ce0ae0e42abe82e1fc9fd86bd51/fsw/src/cf_cmd.c#L596-L597
A few further examples from around cFS to illustrate:
https://github.com/nasa/MD/blob/908165343533c8288631cc5a2a1e9b87dc3fb818/fsw/src/md_utils.c#L49-L50
https://github.com/nasa/to_lab/blob/9e2ad8cccafaad6d09902213971344d9e277e9f9/fsw/src/to_lab_app.c#L216-L219
https://github.com/nasa/cFS-GroundSystem/blob/73935aca4b417c717ef6b6be03bbf5e1ad5b48f5/Subsystems/cmdUtil/cmdUtil.c#L398-L399

**Reporter Info**
Avi Weiss @thnkslprpt ",question,https://github.com/nasa/CF/issues/350
"Fix #348, Moves interface definition files to inc","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
- Fixes  #348

**Testing performed**
make install
lcov

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
 - OS: Ubuntu 18.04

**Additional context**
Recommend fix of broken workflows as of https://github.com/nasa/CF/commit/b9a88983e7396ce0ae0e42abe82e1fc9fd86bd51 before considering this pull request.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
-Justin Figueroa, Vantage
","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/349
"Move interface definition files to ""inc"" location","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The interface definition files of all open source apps currently exist in the ""src"" directory.

**Describe the solution you'd like**
Create an ""inc"" dir to go with the ""src"" dir.  Move the interface definitions into this location: ""_msg.h"", ""_msgdefs.h"", ""_tbldefs.h"", and ""_events.h"". Consider moving header files in both ""platform_inc"" and ""mission_inc"" to ""inc""

**Describe alternatives you've considered**
Leaving as is.

**Additional context**
N/A

**Requester Info**
Justin Figueroa, Vantage Systems
",draco-rc4,https://github.com/nasa/CF/issues/348
"Fix #344, add doc-prebuild dependency","
**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
The documentation requires some artifacts to be in place, this added dependency ensures they are created before doxygen runs.

Fixes #344

**Testing performed**
Run documentation build

**Expected behavior changes**
No missing file if this is the first/only target built  (file will be created due to dependency)

**System(s) tested on**
Ubuntu 22.04

**Additional context**
Requires merging nasa/cfe#2214 and nasa/osal#1341 before this will actually work.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, dependency, draco-rc4",https://github.com/nasa/CF/pull/347
"Fix #345, correct doxygen parameters","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Corrects the doxygen for some newly added functions where the parameter names did not match.

Fixes #345

**Testing performed**
Build documentation

**Expected behavior changes**
No warnings about parameter name mismatches

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/346
Correct parameter names in doxygen,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The CF header files have some mismatches between the doxygen documentation and the function prototype.

**To Reproduce**
Build documentation, check warnings

**Expected behavior**
Should have no warnings

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",draco-rc4,https://github.com/nasa/CF/issues/345
Missing dependency in documentation build,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The application documentation build (doxygen) depends on having some artifacts from the parent scope already existing, but there is no explicit dependency to enforce this.  As a result, the build may fail, as it does in the github workflow.

**To Reproduce**
Failing in the github documentation workflow

**Expected behavior**
Should have a dependency on the parent target, so the needed file(s) get generated before running doxygen.

**System observed on:**
Github hosted runner

**Additional context**
This is a multi-part problem that requires a coordinate change across multiple repos.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",draco-rc4,https://github.com/nasa/CF/issues/344
PDU processing when crc_flag true,"**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The issue involves a difference in interpretation of the CFDP specification. In particular, the format and processing of CFDP PDUs when the PDU header indicates CRC present.

For FD PDUs, the code ignores 4 bytes instead of 2 bytes for the CRC at the end of the PDU (see context). That will result in ignoring the last 2 bytes of file data from FD PDUs encoded with a CRC.

If an EOF or FIN PDU is received with CRC present, the CRC at the end will (almost always) cause a decoding error in CF_CFDP_DecodeAllTlv called by CF_CFDP_DecodeEof/CF_CFDP_DecodeFin.


**To Reproduce**
Unknown. 
If helpful, I could provide what I believe to be valid CFDP PDUs and show how their processing differs from my expectation.


**Expected behavior**
The software could refuse PDUs with crc_flag true,
or, preferably, it could decrement the data_len of (all) PDUs with crc_flag true by 2 (bytes).


**Code snips**
This code has the per PDU CRC declaration:
https://github.com/nasa/CF/blob/281a94188cd7d885a5aed01ee041f3ece2b0486f/fsw/src/cf_logical_pdu.h#L365
The comments on lines 358-363 do not match my understanding.

File data processing excerpt:
https://github.com/nasa/CF/blob/281a94188cd7d885a5aed01ee041f3ece2b0486f/fsw/src/cf_cfdp.c#L726-737



**System observed on:**
N/A


**Additional context**

Unfortunately, the CFDP standard 4.1 CRC PROCEDURES has an external reference for the CRC and the reference is wrong:
        4.1.3.1 The CRC computation algorithm shall be the standard CCSDS Telecommand CRC
        algorithm specified in 4.2.1.3 of the CCSDS Telecommand Recommendation (reference [4]).
and 232.0-B-3 section 4.2.1.3 does not specify a CRC.
However, the only CRC in 232.0-B-3 is defined in 4.1.4 Frame Error Control Word as a 2 octet field.



**Reporter Info**
Bob Wiegand, NASA/GSFC",bug,https://github.com/nasa/CF/issues/343
"Fix #184, work around throttle sem creation race","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds a retry loop around OS_CountSemGetIdByName, because if this sem is created by another app there may be some delay until the other app gets to the point where it creates the sem.  This works around the race condition.

A retry limit is also imposed so CF will not spin here forever.

Fixes #184

**Testing performed**
Build and run tests, check file transfers with BP

**Expected behavior changes**
Should start up more reliably

**System(s) tested on**
Ubuntu 22.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/342
"Fix #288, Remove unnecessary CF_UnionArgs_Payload_t union","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #288 
`CF_UnionArgs_Payload_t` has been removed, given that only a single member of the 3 is used in CF. That member variable - `byte` - has been moved into the `CF_UnionArgsCmd_t` struct, which was the only place where `CF_UnionArgs_Payload_t` was used.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No impact on logic.

**Contributor Info**
Avi Weiss @thnkslprpt",CCB:Approved,https://github.com/nasa/CF/pull/341
"Fix #31, reformat bracketed block","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #31 

**Testing performed**
Unit testing

**Expected behavior changes**
no impact to behavior

**System(s) tested on**
 - OS: Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/340
"Fix #338, Move 'EID' to the end of Event ID names","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #338 
  - Moves the `INF_EID`/`ERR_EID` component of the Event ID names to the end, which aligns it with the rest of the cFS components/apps.

**Testing performed**
Github Actions (Build/Run + Unit tests) passing successfully.

**Expected behavior changes**
No impact on behavior (no logic changes).
The format of CF Event IDs is now aligned with the rest of the cFS components/apps, improving code consistency.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/CF/pull/339
 'EID' should be at the end of the Event ID names,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
During [recent updates](https://github.com/nasa/CF/pull/337) to the EIDs, it was noted that CF specifically has the 'EID' component of the Event ID names at the beginning rather than the end for almost all the Event IDs. All other cFS components/apps place it at the end of the Event ID.

**Code snips**
![Screenshot 2022-10-22 07 52 12](https://user-images.githubusercontent.com/9024662/197294182-429006a2-e590-4f32-b3d9-002d47d18ba0.png)

**Expected behavior**
I think it is worth moving 'EID' to the end of the CF Event ID names to improve consistency across the cFS apps and ease the identification of EIDs from CF in general.

At the same time, it is probably worth moving the additional type parameter in the Event ID names (`INF`, `ERR` etc.) to the end as well, which is also the predominant convention in cFS.

**Reporter Info**
Avi Weiss @thnkslprpt",enhancement,https://github.com/nasa/CF/issues/338
"Fix #336, Apply consistent Event ID names to common events","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #336
  - Consistent event IDs have been applied to the inconsistent cases to align them with a common Event ID naming convention.

**Testing performed**
Only GitHub CI actions.

**Expected behavior changes**
No impact on code behavior (no logic changes).
Consistent Event ID names for the events which are common to all/most cFS components and apps will improve consistency and ease make code review/debugging easier.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/CF/pull/337
Inconsistent Event ID naming,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Copy of https://github.com/nasa/cFE/issues/2175
After finding that there were 9 different Event IDs to indicate the same thing (Invalid Message ID) in https://github.com/nasa/CF/issues/262, I scrubbed the other common commands (e.g. Task Initialisation [INIT], NOOP, Reset Counters etc.) and found the same issue there - almost every component/app had their own variation of the Event ID name for the exact same event.

**Expected behavior**
Apply consistent Event ID names to the events which are common to all/most components and apps.

**Code snips**
Invalid Message ID:
`CFE_EVS_ERR_MSGID_EID`
`CFE_SB_BAD_MSGID_EID`
`CFE_TIME_ID_ERR_EID`
`CS_MID_ERR_EID`
`TO_LAB_MSGID_ERR_EID`
`SAMPLE_APP_INVALID_MSGID_ERR_EID`
`BP_INVALID_MID_ERR_EID`
`SCH_MD_ERR_EID`
`CI_LAB_COMMAND_ERR_EID`

Initialization:
`CFE_TIME_INIT_EID`
`CFE_TBL_INIT_INF_EID`
`CFE_EVS_STARTUP_EID`
`CF_EID_INF_INIT`
`BP_INIT_APP_INFO_EID`
`SCH_INITSTATS_INF_EID`
`CI_LAB_STARTUP_INF_EID`

NOOP:
`CFE_TIME_NOOP_EID`
`CFE_TBL_NOOP_INF_EID`
`CFE_SB_CMD0_RCVD_EID`
`CF_EID_INF_CMD_NOOP`
`FM_NOOP_CMD_EID`
`CI_LAB_COMMANDNOP_INF_EID`

Reset Counters:
`CFE_TIME_RESET_EID`
`CFE_TBL_RESET_INF_EID`
`CFE_EVS_RSTCNT_EID`
`CFE_SB_CMD1_RCVD_EID`
`CF_EID_INF_CMD_RESET`
`SC_RESET_DEB_EID`
`HS_RESET_DBG_EID`
`FM_RESET_CMD_EID`
`HK_RESET_CNTRS_CMD_EID`
`MD_RESET_CNTRS_DBG_EID`
`CI_LAB_COMMANDRST_INF_EID`

etc.

**Reporter Info**
Avi Weiss @thnkslprpt",enhancement,https://github.com/nasa/CF/issues/336
"Fix #262, Update inaccurate event ID name","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #262
  - Updates Event ID `CF_EID_ERR_INIT_CMD_LENGTH` to a more accurate name and something that more consistent with other apps - `CF_MID_ERR_EID`.

**Testing performed**
Only GitHub CI actions.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",CCB:Approved,https://github.com/nasa/CF/pull/335
Temporary files possible filename conflict,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The temporary filenames are created based on the sequence number in the PDU (in the CF_CFDP_R_Init()).

Imagine that two different CFDP entities are sending a PDU with the same sequence number (which can happen since this number is managed by each CFDP entity and it can be the same) to the same CFDP destination entity. For instance, the sequence number in this case is 'x'. For the first PDU the CF app would create the x.tmp file and store it in the temporary folder. Upon arriving the second PDU the CF app would also create a x.tmp file and then would store it in the temporary folder. This would create a conflict.

Wouldn't it be better if the temporary filename is the concatenation of the source entity ID and the sequence number? This would guarantee that each temporary file would be unique since each sequence number is unique for each entity ID.",bug,https://github.com/nasa/CF/issues/334
"Fix #109, Move variables declared mid-function to the top","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #109 
All variables (that I could find) that were declared mid-function were moved to the top of their respective functions.
 
**Testing performed**
Just the CI GitHub actions so far.

**Expected behavior changes**
Aligns CF with the rest of cFS and the relevant coding guidelines.
Makes it easier and quicker to identify all variables in a function.

**Contributor Info**
@thnkslprpt ",CCB:Approved,https://github.com/nasa/CF/pull/333
"Fix #265, change variable names to be more informative","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #265, change single-letter variable names to be more descriptive

**Testing performed**
Unit testing

**Expected behavior changes**
 no impact to behavior

**System(s) tested on**
 - OS: Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA
",CCB:Approved,https://github.com/nasa/CF/pull/332
"Fix #330, Clean up redundant comments and empty lines","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #330
Removes redundant comments (incl. `/* end of function */`, `/* end if */`, function name in function header comments).
There were also a few cases of unnecessary empty lines (e.g. on the last line before the closing brace of a function) and also missing empty lines (e.g. between functions) which were corrected. Some of these empty lines trigger the CI format checks.

**Testing performed**
None (only comments and empty lines were amended).

**Expected behavior changes**
No impact on behavior.
These updates will reduce clutter and inconsistency in the code, thereby improving readability.

**Contributor Info**
@thnkslprpt ","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/331
"Redundant comments (/* end of function */, /* end if */ etc.) and clean up empty lines.","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Copy of https://github.com/nasa/to_lab/issues/68 and https://github.com/nasa/sample_app/issues/111
There are quite a few redundant comments in the code, such as:
- `/* end of function */`-type comments
- `/* end if */`-type comments
- function header comments which include the function name

Another minor issue has to do with empty lines:
a) _unnecessary_ empty lines (e.g. first line after the opening brace of a function/struct, or the last line before the closing brace - the latter apparently sometimes triggers the CI checks).
b) _missing_ empty lines between functions (i.e. closing brace of last function, then next function beginning on the immediately next line without an empty line in between)

The unnecessary empty lines (at the beginning or end of a function, for example) represent a low single-digit percentage of the cases (the vast majority of functions/structs do not have these extra empty lines), so there is an argument to remove them purely for consistency, not just due to them being redundant.

**Expected behavior**
Remove redundant comments to reduce clutter and inconsistency in the code, and improve readability.

**Reporter Info**
@thnkslprpt ",draco-rc4,https://github.com/nasa/CF/issues/330
"Fix #325, add more concise transaction status code","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds a new concept of ""transaction status"" to replace use of CFDP condition code to indicate the result of a transaction.  To aid in transition this is equivalent in numeric value to the defined CFDP CC values but is extended with additional values for other conditions that can occur in the implementation but do not necessarily result in sending a FIN/EOF PDU.

This also adds setting of Transaction Status for some off-nominal cases where no CFDP CC was set.

Fixes #325 

**Testing performed**
Build and run all tests, confirm 100% coverage in unit tests for all new/modified functions
Run two instances of CFS running CF and perform file transfer between them, both nominal/successful and also intentionally create an error (filesystem rejection).  Confirm that the generated ""EOT"" telemetry message contains the expected code in both cases.

**Expected behavior changes**
For successful file transfers both sender and receiver send ""0"" (`NO_ERROR`) in the new `txn_stat` field of the EOT TLM message.  For non success both send an appropriate error code in the field.

**System(s) tested on**
Ubuntu 22.04 64-bit

**Additional context**
The `txn_stat` value overlaps with the previous CFDP condition code value, but it is extended with additional values.  Where overlapping, numeric values for CFDP CCs are kept the same, and the value is the same integer width at the same place, such that the EOT message format is not changed and software interpreting the message should not break.  

However, the software interpreting the EOT TLM will need to accept the wider range of possible code values.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/329
"Fix #102, Clean up remaining commented-out code","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #102.
Remaining stray 'C++ style' comments (single line // comments) in CF were removed to changed to 'C-style' comments ( /* ).
A few remaining lines of commented out (unused) code were also removed.

**Testing performed**
None (comment changes only - no code was modified).

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
@thnkslprpt ","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/328
"Fix #263, define special values in cmd processing as enums","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #263

**Testing performed**
Unit testing

**Expected behavior changes**
 no impact to behavior

**System(s) tested on**
 - OS: Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/327
"Fix #30, Correct 2 aberrant instances of CF_Transaction_t argument name","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #30
Amended the only 2 aberrant instances of CF_Transaction_t objects named 'ti', to align them with the other (several hundred) instances named 't'.

**Testing performed**
None, prior to submission of pull request.

**Expected behavior changes**
No impact on behavior.

**System(s) tested on**
n/a

**Contributor Info - All information REQUIRED for consideration of pull request**
@thnkslprpt","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/326
CF_CFDP_SendEotPkt sent with incorrect CC value,"**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x ] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
A call to CF_CFDP_SendEotPkt() was added to the CF_CFDP_ResetTransaction() function to give feedback on successful file transmission.  However, It is sent every time the transaction is discarded regardless of the cause.  I believe it was the intent that the t->history->cc could then be used to determine if it was successful. 

However, it is unclear if t->history->cc is being correctly set on on every possible condition that calls CF_CFDP_ResetTransaction().  Particularly with the CFDP send control loop,  it appears that there are cases where the the sending transaction is reset without setting t->history->cc which is used by CF_CFDP_SendEotPkt().   i.e. The CF_EotPacket telemetry would indicate success when it in fact did not complete successfully. 

Before CF_CFDP_SendEotPkt() was added to CF_CFDP_ResetTransaction(), it did not matter if t->history->cc was set before calling CF_CFDP_ResetTransaction() since it wasn't used in the function before freeing the transaction.

**To Reproduce**
Steps to reproduce the behavior:
example -Let CFPD Send t->inactivity_timer timeout before completing the transaction.

**Expected behavior**
 t->history->cc must be set correctly for all possible cases before calling  CF_CFDP_ResetTransaction().
Canceling a transaction or an error condition that leads to resetting the transaction must set t->history->cc to a value other than CF_CFDP_ConditionCode_NO_ERROR.

Unit tests for function that have an error condition that leads to resetting the transaction should verify that t->history->cc is also set to an error condition.

**Code snips**
void CF_CFDP_SendEotPkt(CF_Transaction_t *t)
{
    ...
        PktBuf->eot.cc         = t->history->cc;
    ...
}

**System observed on:**
 - Hardware N/A
 - OS: Centos
 - Versions 7

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Nathan Lynch JSC-ER611

","bug, draco-rc4",https://github.com/nasa/CF/issues/325
"Fix #30, Correct 2 aberrant instances of CF_Transaction_t argument name","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #30
Amended the only 2 aberrant instances of CF_Transaction_t objects named 'ti', to align them with the other (several hundred) instances named 't'.

**Testing performed**
None, prior to pull request submission.

**Expected behavior changes**
No impact on behavior.

**System(s) tested on**
n/a

**Additional context**
n/a

**Third party code**
n/a

**Contributor Info - All information REQUIRED for consideration of pull request**
@thnkslprpt
",invalid,https://github.com/nasa/CF/pull/324
"Fix #322, Resolve usersguide issues with doxygen 1.8.17","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/SC/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #322

**Testing performed**
Build doc with Ubuntu 20.04

**Expected behavior changes**
Successful doc build

**System(s) tested on**
 - Hardware: i5/Docker
 - OS: Ubuntu 20.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/323
Resolve issues building users guide with Ubuntu 20.04/Doxygen 1.8.17,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Doxygen `warnings for documented empty return type`

**Describe the solution you'd like**
Remove unnecessary documentation

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","docs, draco-rc4",https://github.com/nasa/CF/issues/322
Directory polling does not clean up open directory file descriptors,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
CF_CFDP_PlaybackDir is called by CF_CFDP_ProcessingPollingDirectories when the interval for the CF_Poll_t structure has expired. This function will attempt to reopen the directory. If the polling directory does not continuously receive new files to process, then the OS_DirectoryOpen call happens without a corresponding OS_DirectoryClose call, exhausting the amount of available file descriptors and causing this error.
`CF: failed to open playback directory /cf/dl , error=-14`

**To Reproduce**
Steps to reproduce the behavior:
1. Launch CF with a configured polling directory
2. Let ticker expire and attempt to reopen directory
3. Wait until FDs are exhausted and error appears

**Expected behavior**
I expect the directory file descriptor to be cleaned up before each OS_DirectoryOpen call. 

**Code snips**
Configuration table used:
```
CF_ConfigTable_t CF_config_table = {
    10,       /* ticks_per_second */
    33554432, /* max number of bytes per wakeup to calculate r2 recv file crc */
    24,       /* temp local id */
    {{
         32,   /* max number of outgoing messages per wakeup */
         512, /* max number of rx messages per wakeup */
         5,   /* ack timer */
         5,   /* nak timer */
         30,  /* inactivity timer */
         8,   /* ack limit */
         8,   /* nak limit */
         CF_PDU_CMD_MID,
         CF_PDU_TLM_MID,
         512,
         {{1, 0, CF_CFDP_CLASS_1, 21, ""/cf/dl"", ""."", 1}, {0}, {0}, {0}, {0}},
         """", /* throttle sem for channel 1, empty string means no throttle */
         1,
     }},
    1253, /* outgoing_file_chunk_size */
    ""/ram"",
};
```

**System observed on:**
 - SC3M, Microblaze
 - OS:  Linux 5.4
 - cFS 7.0, CF commit bff67f87

**Additional context**
I added a check in [CF_CFDP_PlaybackDir](https://aetd-git.gsfc.nasa.gov/epg/missions/stp-h9/fsw/cf/-/blob/e6c75da9af2847e3d2e7e50df12455be9a2a8c4b/fsw/src/cf_cfdp.c#L1347) that looks to see if the FD is 0. If it isn't, I close the directory and reopen it. This gets rid of the problem. 

**Reporter Info**
Dennis Afanasev, NASA Goddard Code 587
",bug,https://github.com/nasa/CF/issues/321
"Fix #319, Disable polling directory in default table","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #319 

**Testing performed**
CI

**Expected behavior changes**
Polling disabled by default, avoids messages about the directory not found

**System(s) tested on**
CI

**Additional context**
Also improved default table comments

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/320
Disable directory polling in default configuration table,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The default configuration table cf_def_config.c enables channel 0 directory polling on /cf/poll_dir at app startup. Unless that directory already exists on the target filesystem, CF will periodically emit the error event 65 message ""CF: failed to open playback directory /cf/poll_dir, error=-1"". When testing and validating the CF app running defaults, it is not ideal to have unnecessary error events being periodically reported.

**Describe the solution you'd like**
Disable all directory polling in the default configuration table. Because this feature requires foreknowledge of specific directories resident on the target filesystem, it should only be configured and enabled by end users. All channels should have polling disabled and no polling settings in the CF_PollDir_t structure.

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Sergio Maldonado, NASA GSFC, Arctic Slope Technical Services","enhancement, draco-rc3",https://github.com/nasa/CF/issues/319
"Fix #317, use UtAssert_INT32_EQ to check status","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Using the INT32_EQ macro avoids type conversion issues in the event that the int32 type is not equivalent to ""int"".

Fixes #317

**Testing performed**
Run all tests

**Expected behavior changes**
No longer has build failure on systems where int32 != int

**System(s) tested on**
RTEMS 4.11

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/318
"CF Build failure on systems where int32 is ""long""","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
On a system where the `int32` type is defined as `long` (rather than `int`), the CF unit tests fail to build with the following error:

```
/home/joe/code/cfecfs/github/apps/cf/unit-test/cf_codec_tests.c: In function 'Test_CF_CFDP_DecodeHeader':
/home/joe/code/cfecfs/github/apps/cf/unit-test/cf_codec_tests.c:730:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'int32' [-Werror=format=]
     UtAssert_True(ret_val == CFE_SUCCESS, ""CF_CFDP_DecodeHeader returned %d and should be 0"", ret_val);
     ^
/home/joe/code/cfecfs/github/apps/cf/unit-test/cf_codec_tests.c:748:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'int32' [-Werror=format=]
     UtAssert_True(ret_val == CFE_SUCCESS, ""CF_CFDP_DecodeHeader returned %d and should be 0"", ret_val);
     ^
/home/joe/code/cfecfs/github/apps/cf/unit-test/cf_codec_tests.c:755:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'int32' [-Werror=format=]
     UtAssert_True(ret_val == -1, ""CF_CFDP_DecodeHeader returned %d and should be -1"", ret_val);
     ^
/home/joe/code/cfecfs/github/apps/cf/unit-test/cf_codec_tests.c:762:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'int32' [-Werror=format=]
     UtAssert_True(ret_val == -1, ""CF_CFDP_DecodeHeader returned %d and should be -1"", ret_val);
     ^
```


**To Reproduce**
Build on any system where `int32` is not equivalent to `int`

**Expected behavior**
Should build successfully

**System observed on:**
RTEMS

**Additional context**
This is using UtAssert_True - problem would not exist if the `UtAssert_INT32_EQ` were used as intended.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, unit-test, draco-rc3",https://github.com/nasa/CF/issues/317
"Fix #315, Remove dynamic memory use in UTs","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #315 

**Testing performed**
CI

**Expected behavior changes**
Squash warnings... also more maintainable unit tests (much simpler)

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/316
Unnecessary use of dynamic memory in unit tests,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Dynamic memory used in UT for cf_crc and cf_clist.

**Describe the solution you'd like**
Refactor/simplify.

**Describe alternatives you've considered**
None

**Additional context**
Note this will also fix some static analysis warnings w/ the related unit tests.

**Requester Info**
Jacob Hageman - NASA/GSFC","unit-test, draco-rc3",https://github.com/nasa/CF/issues/315
"Fix #313, removes CF_CONFIG_TLM_MID from cf_msgids.h","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
-Fixes #313

**Testing performed**
Searched all cf child directories for `CF_CONFIG_TLM_MID` and found no uses of the variable. 100% unit test coverage.

**Expected behavior changes**
Remove unused `CF_CONFIG_TLM_MID` from cf_msgids.h.

**System(s) tested on**
 - Ubuntu 18.04

**Additional context**
None

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, ASRC Federal
","enhancement, CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/314
Remove config tlm packet MID,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The CF_CONFIG_TLM_MID constant is still defined in cf_msgids.h. The corresponding packet was removed in #256 and is no longer used.

**Describe the solution you'd like**
Remove CF_CONFIG_TLM_MID from cf_msgids.h

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Sergio Maldonado, NASA GSFC, Arctic Slope Technical Services
","enhancement, draco-rc3",https://github.com/nasa/CF/issues/313
"Fix #311, Use fixed size types in tlm EOT packet","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #311 

**Testing performed**
CI

**Expected behavior changes**
Fixed size types in tlm

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC (via stakeholder request)","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/312
Enums should not be used in tlm (portability),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The end of transaction tlm message `CF_EotPacket_t` uses enums which we tend to avoid due to portability issues:
https://github.com/nasa/CF/blob/fa06c37225b82da2935e73e9c4ff0def4e338441/fsw/src/cf_msg.h#L136-L138

**Describe the solution you'd like**
Replace with fixed size types

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

Reported/requested by stakeholder.","enhancement, draco-rc3",https://github.com/nasa/CF/issues/311
"Fix #277, Detect pdu truncation","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #277 
Detects and reports silent truncation of Entity ID or Transaction Sequence Number fields.
PDUs with EID/TSN fields that are too big for configured internal storage will be rejected and an event will be issued.

**Testing performed**
Updated and ran unit and coverage tests.
Tested with peer-to-peer CF setup with both correctly configured PDU fields were accepted, and PDUs with size mismatches were rejected rather than silently truncated.

**Expected behavior changes**
Now if the ground or a peer sends a PDU with either EID or TSN fields that are too big for the storage configured in the cf_platform_cfg.h file, the PDU will be rejected, the error counter will be incremented, and an event message will be issued. Before these PDUs would be silently accepted, and the error could depend on the data truncation that would occur.

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 20.04
 - Versions: cFS bundle main (as of 8/11/2022)

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Cudmore, NASA/GSFC, Code 582.0
","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/310
"Fix #308, Revert requirements whitespace changes from #302","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #308 

**Testing performed**
CI (note this is requirements whitespace change only)

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/309
Revert requirements custom whitespace changes,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Numerous ""custom"" whitespace changes snuck into #302

**Describe the solution you'd like**
Revert the custom changes.  The csv should be a direct export from the requirements management tool to keep the management process simple (export/commit vs export/edit/commit) and helps with version control (diff between versions reflects actual changes from the requirements CM tool).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","requirements, draco-rc3",https://github.com/nasa/CF/issues/308
"Fix #293 #306, CF chunk unit test cleanup and main code chunk add and gap bug fixes","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #293 
- Fix #306 

**Testing performed**
CI with ""real"" scenarios implemented (no longer random number)

**Expected behavior changes**
Fixes both the chunk add and chunk gap logic

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/307
Numerous bugs in CF chunk processing edge cases,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
As part of resolving #293, numerous bugs were discovered in cf_chunk.c both with adding to the list w/ `CF_ChunkListAdd` and computing gaps with `CF_ChunkList_ComputeGaps`.

Observed chunk add errors (covers described with non-inclusive end):
1) Adding a chunk that would completely replace chunks 2 and 3 (a CombineNext case).
Starting list {offset, size}: {0,1}, {11, 2}, {23,3}, {36,4}, {50,5} so it covers 0-1 11-13 23-26 36-40 50-55
CF_ChunkListAdd with {20,21} so it should completely replace chunk 2:{23,3} and 3:{36,4}
Results in {0,1}, {11,2}, {20,35}, {50,5} (note erroneous overlap of 2 and 3), expected: {0,1}, {11,2}, {20,21}, {50,5} covering 0-1 11-13 20-41 50-55

2) Adding a chunk that combines with chunk 1, 2, and 3 (prev, next, next).
Starting list {offset, size}: {0,1}, {11, 2}, {23,3}, {36,4}, {50,5} so it covers 0-1 11-13 23-26 36-40 50-55
CF_ChunkListAdd with {12,25} so it should combine with chunk 1-3
Results in {0,1}, {11,29}, {36,4}, {50,5} (note erroneous overlap of 1 and 2), expected: {0,1}, {11,29}, {50,5} covering 0-1 11-40 50-55

3) Adding a chunk that is a subset of chunk 3
Starting list {offset, size}: {0,1}, {11, 2}, {23,3}, {36,4}, {50,5} so it covers 0-1 11-13 23-26 36-40 50-55
CF_ChunkListAdd with {37,2} so it should just drop since it's a subset of 3
Results in {11, 2}, {23,3}, {36,4}, {37,2}, {50,5} (note numerous issues), expected no change

Observed chunk gap errors (gaps and covers described with non-inclusive end):
1) Misses a leading gap.
Starting list {offset, size}: {5,5}, {20,10}, {50,10} covers 5-10 20-30 50-60 so gaps 0-5, 10-20, 30-50 and anything after 60
CF_ChunkList_ComputeGaps with start 0, total 25
Results in {10,10}, so it missed the 0-5 gap

**To Reproduce**
See scenarios above.

**Expected behavior**
See scenarios above.

**Code snips**
CF_Chunks_EraseRange has problems if start == end and the memmove size is wrong:
https://github.com/nasa/CF/blob/a67eaf42c58df3cb154534eab8849189cf17979d/fsw/src/cf_chunk.c#L50-L52

CF_Chunks_CombinePrevious should combine whenever the offset is less than previous range (move ret=1 out of inner if):
https://github.com/nasa/CF/blob/a67eaf42c58df3cb154534eab8849189cf17979d/fsw/src/cf_chunk.c#L152-L160

CF_Chunks_CombineNext is overly complex and broken... ended up refactoring completely to get it to work:
https://github.com/nasa/CF/blob/a67eaf42c58df3cb154534eab8849189cf17979d/fsw/src/cf_chunk.c#L173-L222

CF_Chunks_ComputeGaps start logic is broken... again just refactored to straighten it out:
https://github.com/nasa/CF/blob/a67eaf42c58df3cb154534eab8849189cf17979d/fsw/src/cf_chunk.c#L432-L451

**System observed on:**
CI with #293 incorporated

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC","bug, draco-rc3",https://github.com/nasa/CF/issues/306
"Fix #296, Consistent CFE_EVS_SendEvent handling in UT","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #296 

**Testing performed**
CI

**Expected behavior changes**
None, just UT updates/cleanup

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/305
"Fix #301, Remove file dequeue cmd requirements","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #301 

**Testing performed**
NA

**Expected behavior changes**
None, requirements update only (command not implemented in 3.x)

**System(s) tested on**
NA

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/304
"Fix #213, updated CFDP class validation","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #213, add validation to `CF_CmdTxFile()` and `CF_CmdPlaybackDir()` to prevent negative CFDP class values.

**Testing performed**
Unit testing

**Expected behavior changes**
Reject command if CFDP class is negative

**System(s) tested on**
 - OS:  Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/303
"Fix #274, send packet when transaction resets","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #274, when a transaction resets, an information packet is sent

**Testing performed**
Unit testing 

**Expected behavior changes**
Sending a packet of information on a transaction when it is reset.

**System(s) tested on**
 - OS: Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/302
"Remove dequeue file command requirements, they are not implemented","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Dequeue File is not an implemented command, still listed in requirements CF5022, CF5022.1

**Describe the solution you'd like**
Remove these requirements

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","requirements, draco-rc3",https://github.com/nasa/CF/issues/301
"Fix #299, Clarify event text for commands that initiate actions","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #299 

**Testing performed**
CI

**Expected behavior changes**
None, text is just more clear

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/300
Clarify cmd processing success event text for cases that just initialize action,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Playback, transfer, and cancel commands just initiate the action which is then handled by the engine.  Event text implies otherwise:
https://github.com/nasa/CF/blob/557c1327e3452e961e6a4781cd4a957463b11cdd/fsw/src/cf_cmd.c#L168
https://github.com/nasa/CF/blob/557c1327e3452e961e6a4781cd4a957463b11cdd/fsw/src/cf_cmd.c#L211-L212
https://github.com/nasa/CF/blob/557c1327e3452e961e6a4781cd4a957463b11cdd/fsw/src/cf_cmd.c#L515

**Describe the solution you'd like**
Update text to indicate the action was successfully initiated

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc3",https://github.com/nasa/CF/issues/299
"Fix #297, base offsets for CF msgids","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Define the CF msgids as an offset from the CFE_PLATFORM_CMD_MID_BASE or CFE_PLATFORM_TLM_MID_BASE, which helps simplify configuration.

Users should add MSG offsets to the global mission config header.

Fixes #297

**Testing performed**
Build and run CF app

**Expected behavior changes**
MsgIds for CF can be more easily customized by setting MSG offsets in the global cfe_mission_cfg.h header file, the same way other CFE framework module msgids are set.  User does not need to modify this file in place to do so.

**System(s) tested on**
Ubuntu 22.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Ignore,https://github.com/nasa/CF/pull/298
"Use generic ""cf_msgids.h"" file that uses offsets from base MID","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Currently, the example `cf_msgids.h` file supplied with CF (under platform_inc) is hardcoded, e.g.:

https://github.com/nasa/CF/blob/557c1327e3452e961e6a4781cd4a957463b11cdd/fsw/platform_inc/cf_msgids.h#L33

This presents some challenges for the user:
- at a minimum the user needs to modify this file in place (because the build script just points to this dir, there is no selection/override currently)
- it is not really possible to use different MIDs on multiple instances of CF running on a multi-CPU deployment.


**Describe the solution you'd like**
Use offsets from `CFE_PLATFORM_CMD_MID_BASE` and `CFE_PLATFORM_TLM_MID_BASE` like CFE framework does.  For example:

https://github.com/nasa/cFE/blob/924b2be20a39f17355861396273856caccc8c89f/cmake/sample_defs/cpu1_msgids.h#L87

Thus the user only needs to specify the offset from the base (aka the ""topic ID"") in the mission_cfg.h file (which has global scope, not processor scope) and each CPU will automatically get non-overlapping MID numbers.

**Describe alternatives you've considered**
The alternative is to employ the `generate_config_includefile` cmake function to allow the user to specify this file per arch, but IMO the topicID/offset approach is simpler and more logical.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/CF/issues/297
Inconsistent use of CFE_EVS_SendEvent stub forces unnecessary UT complexity,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Since two patterns are used for checking events, it can't be setup by default at startup causing every test that wants to check events to have to set up the data buffer (using either pattern A or B):

Pattern A uses UT_CF_ResetEventCapture, UT_CF_CheckEventID_Impl, UT_CF_CapturedEventIDs, example:
https://github.com/nasa/CF/blob/557c1327e3452e961e6a4781cd4a957463b11cdd/unit-test/cf_app_tests.c#L299-L306

Pattern B set's up a custom buffer:
https://github.com/nasa/CF/blob/557c1327e3452e961e6a4781cd4a957463b11cdd/unit-test/cf_app_tests.c#L637-L664

**Describe the solution you'd like**
Use a single pattern and setup automatically (like pattern A)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","unit-test, draco-rc3",https://github.com/nasa/CF/issues/296
"Fix #224, support dynamic pdu packets","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #224
In order to support CF peer to peer transactions, this change will allow incoming PDU packets to be either command or telemetry packets. This is handled in the cf_cfdp_sbintf.c file that handles PDUs wrapped in CCSDS packets.
This change required renaming structures: 

```
CF_PduSendMsg_t to CF_PduTlmMsg_t
CF_PduRecvMsg_t to CF_PduCmdMsg_t
```
This rename makes it less confusing if CF receives a PDU wrapped in a TLM packet, for example. In this case, it would not make sense to receive a ""Send"" type packet.

In addition to renaming these structures, the typedefs were moved to cf_cfdp_sbint.h as a step toward decoupling the PDU send and receive from the software bus.

By allowing incoming PDU packets to be wrapped in command or telemetry CCSDS packets, CF can receive PDUs from the ground wrapped in a command packet, or PDUs from a CF peer wrapped in a telemetry packet.

**Testing performed**
1. Built and ran (updated) unit tests.
2. Set up a CF peer-to-peer configuration and verified a type 1 TX transaction works from one CF peer to another. Tested that the CF peer can receive the PDUs as telemetry or command packets. 

**Expected behavior changes**
 - No impact to normal behavior, but does enable direct peer to peer PDU transactions CF1(TLM PDU) -> CF2(TLM PDU)

**System(s) tested on**
 - PC Virtual Machine
 - OS: Ubuntu 20.04
 - Versions: cFS main (7/28/2022)

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Cudmore / NASA GSFC / Code 582.0","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/295
"Fix #18 #206 #287, Comment cleanup and spelling","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #18 
- Fix #206 
- Fix #287

**Testing performed**
CI

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/294
"CI code coverage failure, missing line/branch for random seed 1658872760","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Random value use in unit tests strikes again... missed a line/branch for random seed 1658872760.

**Describe the solution you'd like**
Remove random behavior for whatever caused this issue.

**Describe alternatives you've considered**
Replace all random functions w/ hard coded settings for now.  Eventually extract from code and use values that make sense (#86).

**Additional context**
#86 

**Requester Info**
Jacob Hageman - NASA/GSFC","unit-test, draco-rc3",https://github.com/nasa/CF/issues/293
"Fix #290, updated value in assert causing test to fail","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #290, bug in unit tests wasn't multiplying the number of transactions per channel by the number of channels, causing the unit test to not pass.

**Testing performed**
Ran unit test

**Expected behavior changes**
All unit tests pass

**System(s) tested on**
 - OS: Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/291
Num of transactions in channel should be multiplied by num of channels in unit test,"**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
In `Test_CF_CFDP_InitEngine()`, CF_NUM_TRANSACTIONS_PER_CHANNEL isn't multiplied by CF_NUM_CHANNELS, causing the assert to fail (see code snippet below)

**To Reproduce**
Run unit tests

**Expected behavior**
All unit tests should pass

**Code snips**
https://github.com/nasa/CF/blob/07747463131050606cc58127b932a4c580d4a57f/unit-test/cf_cfdp_tests.c#L853

**System observed on:**
- OS: Ubuntu 18.04
- 
**Reporter Info**
Haven Carlson - NASA",draco-rc3,https://github.com/nasa/CF/issues/290
"Fix #281, refactored to remove CF_CmdAcc() and CF_CmdRej()","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #281, remove the CF_CmdAcc() and CF_CmdRej() functions

**Testing performed**
Ran unit tests

**Expected behavior changes**
Or no impact to behavior

**System(s) tested on**
 - OS: Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/289
"CF_UnionArgs_Payload_t elements dword and hword not used, union not necessary","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
dword and hword are not used in the `CF_UnionArgs_Payload_t` union, only byte:
https://github.com/nasa/CF/blob/07747463131050606cc58127b932a4c580d4a57f/fsw/src/cf_msg.h#L159-L169

**Describe the solution you'd like**
Remove unnecessary union

**Describe alternatives you've considered**
`CF_UnionArgsCmd_t` is somewhat out of family in that it specifies unnecessary payload elements for some of the commands.  The only common benefit seems to be byte 0 which is channel, supporting all channels generically with 255.  Consider untangling all the layers of abstraction and go back to simple command processing.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, Equuleus-rc2",https://github.com/nasa/CF/issues/288
"CF_DELETE_QUEUE_NODE_CC not used, expected command length for CC 14 filled in","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Command code `CF_DELETE_QUEUE_NODE_CC` not used:
https://github.com/nasa/CF/blob/07747463131050606cc58127b932a4c580d4a57f/fsw/src/cf_msg.h#L140

CC 14 expected length is set but not used:
https://github.com/nasa/CF/blob/07747463131050606cc58127b932a4c580d4a57f/fsw/src/cf_cmd.c#L1296

**Describe the solution you'd like**
Remove unused elements, also clean up comments when done:
https://github.com/nasa/CF/blob/07747463131050606cc58127b932a4c580d4a57f/fsw/src/cf_msg.h#L116

**Describe alternatives you've considered**
None

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Full name and company/organization if applicable
","enhancement, draco-rc3",https://github.com/nasa/CF/issues/287
"Fix #285, flatten logic in CF_CFDP_InitEngine() to fix bug","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #285, fixed error in code where semaphore name being blank would skip to the end of `CF_CFDP_InitEngine()`

**Testing performed**
Ran unit tests

**Expected behavior changes**
If the semaphore name is blank, continue with function instead of exiting.

**System(s) tested on**
 - OS: Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA
","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/286
"`goto` refactor broke engine initialization, blank sem_name is not an error","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Semaphore name being blank is not an error condition, it should simply skip the semaphore get by name call.  The recent refactor changed this behavior which causes the engine to crash.

Error introduced here:
https://github.com/nasa/CF/blob/eba87dfc5e9e1769df72815cdca52508c0afad39/fsw/src/cf_cfdp.c#L1046-L1084

Old code:
https://github.com/nasa/CF/blob/bff67f871cc88fbd7f2399a029aacd088112978c/fsw/src/cf_cfdp.c#L1029-L1064

**To Reproduce**
Initialize engine without a semaphore name defined

**Expected behavior**
Still initialize the transactions if the semaphore name is blank

**System observed on:**
Observed from CTF testing (on Linux I assume)

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC","bug, draco-rc3",https://github.com/nasa/CF/issues/285
"Fix #283, pass correct parameter in Abandon cmd function","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #283, `CF_CmdCancel_Txn` was being passed to `CF_TsnChanAction()` instead of `CF_CmdAbandon_Txn`

**Testing performed**
Ran unit tests

**Expected behavior changes**
When the abandon command is called, it will run `CF_CmdAbandon_Txn`

**System(s) tested on**
 - OS:Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA
","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/284
Incorrect parameter in Abandon command,"**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
In the Abandon command code, `CF_CmdCancel_Txn` is being passed

**Expected behavior**
Abandon should pass `CF_CmdAbandon_Txn` instead

**Code snips**
https://github.com/nasa/CF/blob/c023d56cb2f05b4e7ac8748b63d9adf3b3152d55/fsw/src/cf_cmd.c#L541

**System observed on:**
Browser

**Reporter Info**
Haven Carlson - NASA",draco-rc3,https://github.com/nasa/CF/issues/283
"Fix #118, failed commands send error event message","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #118 , an error event message is sent if a command is not successful

**Testing performed**
Ran unit tests

**Expected behavior changes**
Behavior Change: All commands now send an error event message if unsuccessful

**System(s) tested on**
OS: Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/282
Remove CF_CmdAcc and CF_CmdRej,"**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [X] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Inline functions CF_CmdAcc and CF_CmdRej are one-liners so they are mostly unecessary.

**Describe the solution you'd like**
Replace their use and remove the functions.

**Additional context**
https://github.com/nasa/CF/blob/50c6b04f1980fce3854f8e28cca92bf640612388/fsw/src/cf_cmd.h#L79-L100

**Requester Info**
Haven Carlson - NASA",draco-rc3,https://github.com/nasa/CF/issues/281
Follow temporary file + rename pattern for all files,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Currently, there is a special case to handle situations where the MD PDU arrives out of order.  A temporary file is opened, and then renamed once the MD packet does arrive.

However, because this is only done for off-nominal cases, it is likely not as well tested as other paths (see bug #131). 

**Describe the solution you'd like**
This pattern of using a temp file should be standard operating procedure, not just something for special cases.  Reasons/advantages for always doing it this way described in my comment here: https://github.com/nasa/CF/issues/131#issuecomment-1183239857

This improves atomicity of file updates, prevents clobbering files and avoids cases where other apps might see partial files or other bad content.

**Describe alternatives you've considered**
N/A

**Additional context**
As the fix for #131 strictly only fixed the issue described, this is a more general enhancement that would improve CF.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/CF/issues/280
"Fix #131, Reset file psn and use OS_mv for out-of-order RX MD processing","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #131

Switches from OS_rename to OS_mv which supports ""rename"" across file systems (via copy/delete)
Resets file cached position (from the file open) so it gets recalculated correctly

**Testing performed**
CI (added unit test asserts)

**Expected behavior changes**
Should now handle an out-of-order MD, and a tmp dir being on a different filesystem than the final location

**System(s) tested on**
CI

**Additional context**
Note the functional/CTF test is the full verification of this capability

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/279
"Fix #275, Remove ppt design and VDD docs from codebase","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #275

**Testing performed**
CI - Doc change only

**Expected behavior changes**
None, just paperwork change in that these should be provided as assets on release.

**System(s) tested on**
CI

**Additional context**
Eventually converting to markdown would be good.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/278
Possible silent truncations of entity ID and transaction sequence number,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
The types for entity ID and transaction sequence number are sort of configurable (they are in the config.h but impact packet dfns):
https://github.com/nasa/CF/blob/50c6b04f1980fce3854f8e28cca92bf640612388/fsw/platform_inc/cf_platform_cfg.h#L60
https://github.com/nasa/CF/blob/50c6b04f1980fce3854f8e28cca92bf640612388/fsw/platform_inc/cf_platform_cfg.h#L79

If they are set to anything smaller than uint64 allowed by the spec, then they could get truncated silently when decoding packet headers in CF_CFDP_DecodeHeader:
https://github.com/nasa/CF/blob/50c6b04f1980fce3854f8e28cca92bf640612388/fsw/src/cf_codec.c#L848-L850

Although the impacts don't seem all that critical.  Sequence will roll over locally (should still locally match up), masking off high order eid bits and still getting a match/conflict for destination or source seems unlikely, although possible.

**Describe the solution you'd like**
Check that the encoded value will fit, otherwise send an event and drop the transaction.  Up to 3 extra checks per header decode.  

**Describe alternatives you've considered**
Make these all support the spec allowed 64 bit, no longer configurable.  Would impact memory footprint and cmd/tlm packets.

Leave as is seems like an option also.  Avoids the extra checks on every header that would be needed to avoid something that likely has minimal impact/likelihood.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

@TheSwarty","bug, draco-rc3",https://github.com/nasa/CF/issues/277
CF parameter configuration file reference incorrect in doxygen documentation,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Doxygen references non-existent file cf_def_cfg.c
https://github.com/nasa/CF/blob/50c6b04f1980fce3854f8e28cca92bf640612388/docs/dox_src/cfs_cf.dox#L174-L175

**Describe the solution you'd like**
Update, file name is cf_def_config.c, and probably should clarify that this is a table and that there are get/set commands.
https://github.com/nasa/CF/blob/main/fsw/tables/cf_def_config.c

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/CF/issues/276
Remove design and obsolete VDD from codebase (these are release assets),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Design ppt and VDD doc are binary and challenging to manage within actual codebase with little benefit.  Updates to either should not impact codebase hash.

**Describe the solution you'd like**
Remove from codebase, provide as release assets

**Describe alternatives you've considered**
Transition design material to markdown would support better text-based management, and possibly create a pdf from it to provide as the release asset (and that PDF could still be updated without impacting codebase hash).  Or integrate the design material into the Doxygen users-guide (or both, since Doxygen can reference markdown), which generates a pdf as a release asset.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc3",https://github.com/nasa/CF/issues/275
Generate diagnostics/info packet on transaction closure,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Difficult to automate follow-on actions based on transaction completion (history queue isn't automation friendly) or maintain a record of all transactions without dumping queues.

**Describe the solution you'd like**
Send a diagnostics/info packet whenever a transaction is closed for any reason including all the relevant info (RX/TX, channel, file source/target, status, class, etc)

**Describe alternatives you've considered**
Event could be an alternative, but harder to base automation on

**Additional context**
Stakeholder request

**Requester Info**
Jacob Hageman - NASA/GSFC

@TheSwarty","enhancement, draco-rc3",https://github.com/nasa/CF/issues/274
Abandon and Cancel commands with invalid transaction IDs are silently dropped (not rejected),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
CF requirements CF5006.1 and CF5007.1 state that, if the command-specified transaction is not in progress, CF shall reject the command. Requirements CF5015.1 and CF5017.1 cover ""all"" transactions and state that, if there are no transactions in progress, CF shall reject the command. CF does not reject such a command by either issuing an event message or incrementing the command failure counter. CF does not take any action other than incrementing the command counter.

**To Reproduce**
Steps to reproduce the behavior:
Issue the Abandon or Cancel command with a transaction ID that is invalid and/or not currently in progress.
Issue the Abandon or Cancel command with the ""all"" specifier when no transactions are currently in progress.

**Expected behavior**
To be consistent with other transaction based commands, CF should provide operator feedback if it fails to find the active transaction ID. At the minimum, it should issue an event message and increment the command failure counter.

**System observed on:**
Ubuntu 20.04 Linux 5.13

**Reporter Info**
Sergio Maldonado, NASA GSFC, Arctic Slope Technical Services
","bug, draco-rc3",https://github.com/nasa/CF/issues/273
"Fix #117 #155, Command handling updates","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
Fix #117, an information event message is sent if a command is successful
Fix #155, Remove `CF_CmdCon()`

**Testing performed**
Ran unit tests

**Expected behavior changes**
 - Behavior Change: All commands now send an information event message if successful

**System(s) tested on**
 - OS: Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/272
"Part #206, Fix #26, Document Event IDs and remove unused","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Part #206 

Added event ID documentation

- Fix #26 

Removed unused event ids

**Testing performed**
CI

**Expected behavior changes**
None, just improved documentation and no unused event IDs

**System(s) tested on**
CI

**Additional context**
Note, still working the rest of the documentation

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/271
CF_ProcessMsg() function incorrect description,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The CF_ProcessMsg(CFE_SB_Buffer_t *msg) description in the cf_app.h header file is incorrect. It is a duplicate of the CF_Init(void) function.

**To Reproduce**
N/A

**Expected behavior**
N/A

**Code snips**
N/A

**System observed on:**
N/A

**Additional context**
N/A

**Reporter Info**
N/A
",docs,https://github.com/nasa/CF/issues/270
"Fix #225, refactor goto statements","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #225, replaced all instances of `goto`

**Testing performed**
Ran unit tests

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
 Ubuntu 18.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Haven Carlson - NASA","CCB:Approved, draco-rc3",https://github.com/nasa/CF/pull/269
New RX PDU dropped due to max RX transactions reached on channel not counted,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
There's a strange comment about ""no known channel"" as justification for dropping a new RX PDU without incrementing the channel dropped receive counter, yet the channel number is known since it's received on the channel pipe and the local EID matches.
https://github.com/nasa/CF/blob/1ba450b3d7edd2cd63d9db104ce5201ccca16e28/fsw/src/cf_cfdp_sbintf.c#L260-L261

**Describe the solution you'd like**
I'd expect the dropped counter to increment as a way to track this condition per channel.  There isn't a transaction set up or a CF_CFDP_DispatchRecv called, but all the CF_CFDP_RecvDrop call does is increment the dropped counter anyways.

**Describe alternatives you've considered**
Maybe the received ""dropped"" counter is only intended for RX transactions that have been started... seems like useful information though.  Probably also useful to track with a counter if the event gets filtered.

**Additional context**
I couldn't find a requirement so likely derived.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/CF/issues/268
"Fix #194 #108 #215 #27 #266, Coverage improvements","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Unit test updates
- Fix #194 
- Fix #108 
- Fix #215 

FSW updates
- Fix #27 
- Fix #266

**Testing performed**
CI

**Expected behavior changes**
None, just achieves full coverage

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/CF/pull/267
Implicit default case in CF_WriteHistoryEntryToFile prevents full branch coverage,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
This will show up with the implicit default case uncovered since it's unreachable:
https://github.com/nasa/CF/blob/593d61aaa89a78a31ddabf777ca7176ac540c289/fsw/src/cf_utils.c#L190-L206

**Describe the solution you'd like**
Add the default case explicitly

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","coverage, draco-rc2",https://github.com/nasa/CF/issues/266
Noncompliance with the concept of informative variable names,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
A style thing, but pretty obscure one character names all over.  Good practice to use useful names that a new reader can easily pick up on and/or easier to maintain.  Example use of c, q, p, and t all in one line:
https://github.com/nasa/CF/blob/593d61aaa89a78a31ddabf777ca7176ac540c289/fsw/src/cf_utils.c#L370

**Describe the solution you'd like**
c -> chan
t -> txn
q -> queue_idx/q_index or whatever.
p -> priority (or whatever it is)
and so on.

**Describe alternatives you've considered**
May just be another one for the lesson's learned bucket.  Not sure how this got through code review.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/CF/issues/265
Remove unit test context_t elements as overkill for a coverage test,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
There's a significant amount of unit test logic dedicated to confirming argument inputs to stub functions that go above and beyond the requirements of a coverage test.  This logic is associated with defining and saving *_context_t structures from within stubs.  While there is technically nothing wrong with these tests (they all pass), the issue is with technical debt.  Unless the test is verifying requirements/spec/algorithm document there's also the question of what is truth.

**Describe the solution you'd like**
Use functional tests to verify function.  Remove context checks that don't add value in the coverage test context.

**Describe alternatives you've considered**
Leave as is, but whenever maintenance is performed encourage simplification. At minimum we should avoid this pattern in new or updated tests.

**Additional context**
Along the same lines as removing the randomness, these aren't intended to be fuzz tests.
- #86

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/CF/issues/264
Local #defines in cf_cmd.c used as special values in command processing (w/ repeat dfn in tests),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
`ALL_CHANNELS`, `ALL_POLLDIRS`, `COMPOUND_KEY` used in command processing shouldn't be defined in a *.c where it's inaccessible and somewhat hidden.  The names aren't great either, better to prefix w/ app.
https://github.com/nasa/CF/blob/593d61aaa89a78a31ddabf777ca7176ac540c289/fsw/src/cf_cmd.c#L41-L43

**Describe the solution you'd like**
Move into cfe_msg.h and rename as `CF_ALL_CHANNELS` and similar, which would allow removal from cf_test_utils.h:
https://github.com/nasa/CF/blob/593d61aaa89a78a31ddabf777ca7176ac540c289/unit-test/utilities/cf_test_utils.h#L53

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc4",https://github.com/nasa/CF/issues/263
Event ID name doesn't match use,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
`CF_EID_ERR_INIT_CMD_LENGTH` is used for reporting invalid MID received, note `CF_EID_ERR_CMD_GCMD_LEN` and `CF_EID_ERR_CMD_GCMD_CC` are used for actual ground command processing:
https://github.com/nasa/CF/blob/593d61aaa89a78a31ddabf777ca7176ac540c289/fsw/src/cf_app.c#L321-L322

**Describe the solution you'd like**
Event ID names should make sense, maybe `CF_EID_ERR_MID` or similar.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/CF/issues/262
"Fix #260, Remove registration of empty EVS filters","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #260

**Testing performed**
CI

**Expected behavior changes**
Eliminates CFE_EVS_Registration filter truncation message and no longer registers empty filters

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/CF/pull/261
Registering 100+ event filters w/ 0x0000 values serves no purpose (and overflows a typical filter buffer),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Registering event filters just to register event filters doesn't do anything but load the system.  If an event needs to be filtered operationally, just use the add filter command.  Note default `CFE_PLATFORM_EVS_MAX_EVENT_FILTERS` is 8, so the rest would get discarded and cause a filter buffer overflow event.

**Describe the solution you'd like**
Remove filter registration for those set to 0x0000 (all of them!)  Add operationally if/when needed, or if eventually an actual filter needs to be applied then add it.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc2",https://github.com/nasa/CF/issues/260
"Fix #173, Truncate files when created to avoid stale data","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #173

**Testing performed**
CI

**Expected behavior changes**
Truncates when creating files (avoids stale data if previous file was larger)

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/CF/pull/259
"Fix #217, Add mission rev and print in startup and noop events","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #217

**Testing performed**
CI

**Expected behavior changes**
Adds mission rev in startup and noop events

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/CF/pull/258
"Fix #120 #256, Move timers into channel config and remove cfg telemetry","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #120 
- Fix #256

**Testing performed**
CI (also built and ran unit tests locally)

**Expected behavior changes**
No longer supports reporting config in tlm, get it via table dump (better since it contains everything already)
Timer and limits are now channel specific configuration items matching requirements, note this will break existing tables

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/CF/pull/257
Remove config tlm packet and associated command,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
All the configuration information is in the table (and maintained there), the config packet is redundant and actually is missing all the channel data so it's not all that useful anyways.
https://github.com/nasa/CF/blob/bfeaa9a30094fbd5c8720e6b85bf71435b7ddc7d/fsw/src/cf_msg.h#L108-L127

**Describe the solution you'd like**
Remove this functionality along with requirement CF5004

**Describe alternatives you've considered**
None

**Additional context**
As part of making more configuration channel based, this redundancy was noted.  Not worth the effort to maintain a tlm packet that's basically a repeat of the table.
- #120

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc2",https://github.com/nasa/CF/issues/256
"Fix #254, Fix #220, Updates CLA information for Apache 2.0","Adds link to new CLAs in pull_request_template and contributing.md

**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #254
- Fixes #220
- Fixes https://github.com/nasa/cFS/issues/495

**Testing performed**
Visually inspected links in fork and in PR template.

**Expected behavior changes**
All references to CLAs should be updated to the cFS app CLA.

**System(s) tested on**
Google Chrome browser

**Additional context**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, ASRC Federal
","CCB:Approved, docs, draco-rc2",https://github.com/nasa/CF/pull/255
Update CLA Information,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [cFS README.md file](https://github.com/nasa/cFS/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Have new CLAs given the change in https://github.com/nasa/cFS/pull/491 with the combined CLA, 

**Describe the solution you'd like**

- [x] Update the instructions in each app's Contributing.md
- [x] Delete old CLA pdfs
- [ ] Update PR and Issue templates as needed


**Describe alternatives you've considered**

None

**Additional context**
None


**Requester Info**
Gerardo E. Cruz-Ortiz
","docs, draco-rc2",https://github.com/nasa/CF/issues/254
Update README.md - Fixed Typo,"```diff
- #core Flight System (cFS) CFDP Application (CF)
+ # core Flight System (cFS) CFDP Application (CF)
```","CCB:Approved, draco-rc4",https://github.com/nasa/CF/pull/253
"Fix #251, Removed the typo","**Checklist (Please check before submitting)**

*  I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).

*  I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Removed the typo in Readme.md
Fixes - #251

**Testing performed**
Steps taken to test the contribution:
1. Build steps ' Corrected the error'
1. Execution steps 'Saved the file'

**Expected behavior changes**
  No impact to behavior

**System(s) tested on**
 - Hardware: [intel corei5]
 - OS: [Windows ]
 - Versions: [11]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
 - Note CLA's apply to software contributions.
",duplicate,https://github.com/nasa/CF/pull/252
Typo in README.md,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
First section header lacks space between `#` and `core Flight System (cFS) CFDP Application (CF)`

**To Reproduce**
Observe that ""#core Flight System (cFS) CFDP Application (CF)"" is literal and does not look like a section header

**Expected behavior**
""core Flight System (cFS) CFDP Application (CF)"" looks like a section header

**Code snips**
https://github.com/nasa/CF/compare/main...jhnphm:patch-1

**System observed on:**
N/A

**Additional context**
N/A

**Reporter Info**
John N Pham, Northrop Grumman","docs, good first issue, draco-rc4",https://github.com/nasa/CF/issues/251
"Fix #249, Resolve UT variable coverage results","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #249

**Testing performed**
Built and ran unit tests with troublesome seed, got nominal results

**Expected behavior changes**
None, just avoids possible missing coverage in the unit test for CF_Chunks_FindSmallestSize

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/CF/pull/250
Inconsistent results in coverage test,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Likely related to random number use in unit tests (#228 

Failed coverage here: https://github.com/skliper/CF/runs/6581159060?check_suite_focus=true
```
Overall coverage rate:
  lines......: 99.9% (2678 of 2681 lines)
  functions..: 100.0% (258 of 258 functions)
  branches...: 99.2% (1056 of 1065 branches)
9 branches missed, 8 allowed
3 lines missed, 2 allowed
```
Note it passed in the very next run w/ no code changes (was just a requirements update)

**Describe the solution you'd like**
Remove whatever random test implementation is causing this (all others eventually to fix #86)

**Describe alternatives you've considered**
None

**Additional context**
#86

**Requester Info**
Jacob Hageman - NASA/GSFC","unit-test, draco-rc2",https://github.com/nasa/CF/issues/249
"Fix #239 #128 #127 #122 #121 #119, Requirements clean-up","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #239 
- Fix #128 
- Fix #127 
- Fix #122 (note issue #120 still exists)
- Fix #121 
- Fix #119 
- Part #120 (just removes duplicate element from requirement, doesn't fix issue)

Also removed old/obsolete requirements spreadsheet

**Testing performed**
NA - Requirements only

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
The update for #122 adds the timers at the channel level, so it's related to existing issue #120

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, requirements, draco-rc2",https://github.com/nasa/CF/pull/248
Updating UT to work with CMake build system,"I am looking for a methodology or guide to build and run or convert unit tests which are based on gcov for apps which have not been updated such as:
* https://github.com/nasa/CFS_CI
* https://github.com/nasa/CFS_TO
etc.
 The only app updated is: 
 * https://github.com/nasa/CF 

I have viewed the diffs between 2a292d041a3644844517cc10344abbf0c4ecccc2 and 7a48a8b2e8f4f5b103748685f076d9dc8b3b66fb but it is still not clear why things were shifted around. Can anyone clarify 

","duplicate, question",https://github.com/nasa/CF/issues/247
CFDP Backwards Compatibility,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
I have a system that is running CFDP version 3.0 and want to interface it with a system that is running the older version of CFDP 2.2.  Are the two versions compatible for file transfers?

**Describe the solution you'd like**
I would like to know if CFDP version 2.2 and 3.0 are compatible for file transfers.

**Describe alternatives you've considered**
I have looked at the documentation for CFDP available on the github page and have not seen anything suggesting they are compatible/incompatible with each other.  

**Additional context**
I know certain things have changed across the two versions, such as the HK Telemetry messages having a different format.  
**Requester Info**
Jeff Anderson
",question,https://github.com/nasa/CF/issues/246
"Fix #244, Add CodeQL","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
Added CodeQL to GitHub workflows
Fix #244 

**Testing performed**
1. Pushed to branch
2. Checked CodeQL ran successfully

**Expected behavior changes**
 no impact to behavior

**System(s) tested on**
Browser

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
 - Note CLA's apply to software contributions.
","CCB:Approved, dependency, draco-rc2",https://github.com/nasa/CF/pull/245
Add CodeQL to repository,"**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [X] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Use CodeQL for continuous integration

**Describe the solution you'd like**
Add CodeQL workflow

**Describe alternatives you've considered**
None

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Haven Carlson","continuous-integration, draco-rc2",https://github.com/nasa/CF/issues/244
"Fix #241 #242, Resolve static analysis warnings","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #241 
- Fix #242

**Testing performed**
CI + static analysis run

**Expected behavior changes**
None, just squashes static analysis warnings

**System(s) tested on**
 - Hardware: VM
 - OS: Ubuntu 18.04
 - Versions: Bundle main + apps + related static analysis resolution branches

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/CF/pull/243
Resolve static analysis warnings in unit tests,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Various static analysis warnings observed in unit tests (license restricts publishing)

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc2",https://github.com/nasa/CF/issues/242
Resolve static analysis warnings in fsw,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Various static analysis warnings observed (license restricts publishing)

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, draco-rc2",https://github.com/nasa/CF/issues/241
"Fix #214, Resolve buffer overflow in CF_Chunks_InsertChunk unit test","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #214 

Rewrites problematic CF_Chunk_InsertChunk tests that occasionally had a buffer overflow due to random number use.

**Testing performed**
Build and ran unit tests, confirmed passing.  Also confirmed no loss in coverage.

**Expected behavior changes**
Just fixes random unit test failures on a 32 bit system.

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit (and app addition)

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/CF/pull/240
File transfer priority level configuration requirement clarification,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
No

**Describe the solution you'd like**
Per requirement CF5030.1, the CF file-transfer priority levels shall be configurable. This functionality is not currently implemented in CF.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Sergio Maldonado NASA/GSFC/Arctic Slope Technical Services
","requirements, draco-rc2",https://github.com/nasa/CF/issues/239
z modifier not C89 compatible,"**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [X] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
`z` modifier not C89 compatible
`%z*` format specifier is not C89 compatible. Event messages utilizing `%zd` or `%zu` (or other `%z*`) format specifier will see ""zd"" in event/print message instead of desired numerical value.

**To Reproduce**
Steps to reproduce the behavior:
Build and run cFS CF App in C89 compatible but not fully C99 compatible environment. Send valid ground cmd but with invalid ground cmd length to CF app. CF will send an event (ERROR) with cmd expected length and actual length, however the actual length will just show `zd`. You can see this behavior when viewing CF's event printout.
For example:
`CF: invalid ground command length for command 0x02, expected 156 got zd`

**Expected behavior**
Event message will include numerical value for corresponding cmd length

**Code snips**
```
/* Line 1223, cf/fsw/src/cf_cmd.c */
CFE_EVS_SendEvent(CF_EID_ERR_CMD_GCMD_LEN, CFE_EVS_EventType_ERROR,
                              ""CF: invalid ground command length for command 0x%02x, expected %d got %zd"", cmd,
                              expected_lengths[cmd], len);
```
and corresponding unit test

**System observed on:**
 - Versions: CF v3.0.99

**Additional context**
Support for `z` modifier introduced in C99 (C99 adopted as an ANSI Standard in May 2000)
",wontfix,https://github.com/nasa/CF/issues/238
"Fix #236, Switch to reusable build-run workflow","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #236

**Testing performed**
Modified CI (pointed to skliper/branch for cFS workflow): https://github.com/skliper/CF/runs/6065276796?check_suite_focus=true

**Expected behavior changes**
None, CI

**System(s) tested on**
CI

**Additional context**
nasa/cFS#460

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC
","CCB:Approved, dependency, draco-rc2",https://github.com/nasa/CF/pull/237
Use build and run usable workflow at cFS level,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Local build-run workflow duplicates standard app logic for building and running with cFS

**Describe the solution you'd like**
Use reusable workflow instead

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFS#457

**Requester Info**
Jacob Hageman - NASA/GSFC","continuous-integration, draco-rc2",https://github.com/nasa/CF/issues/236
"Fix #212, Add unit test and coverage workflow","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #212 

**Testing performed**
CI w/ modified path/repo for reference: https://github.com/skliper/CF/actions/runs/2174432954

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
nasa/cFS#459

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, dependency, draco-rc2",https://github.com/nasa/CF/pull/235
Add unit test and coverage workflow,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
No unit test or coverage verification workflow implemented

**Describe the solution you'd like**
Add

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFS#458

**Requester Info**
Jacob Hageman - NASA/GSFC
","duplicate, draco-rc2",https://github.com/nasa/CF/issues/234
"Fix #232 #231, Cleanup and add functional requirements csv","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #232 
- Fix #231

**Testing performed**
None, doc only

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/CF/pull/233
Add CF functional requirements csv to repo for easier change history tracking,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
CF requirements hard to track changes during development and reference when supplied as assets.

**Describe the solution you'd like**
Add the requirements directly to the repo in the same format as cfe: https://github.com/nasa/cFE/blob/main/docs/cFE_FunctionalRequirements.csv

**Describe alternatives you've considered**
Endless.  But this follows the cFE pattern that has worked well (csv in repo, doc provided as asset at release)

**Additional context**
Cleanup listed in #231

**Requester Info**
Jacob Hageman - NASA/GSFC
","requirements, draco-rc2",https://github.com/nasa/CF/issues/232
Additional requirements cleanup based on csv,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
- CF4000 and CF4000.1 look identical
- Not clear what the difference is between CF4003 and CF3005.1 (if a channel has a unique message id, every PDU related to that channel will be associated with that message ID, no?)
- Out of family ID's (and some missing, only in summary): CF5002.0.7, CF5002.0.8, CF5002.0.9
- Multiple typos: CF1001 ""receieves"", CF3001 ""the the"", CF5001.1 ""processingall"" ""comand"", CF5030 ""evels"", 

**Describe the solution you'd like**
Resolve

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","requirements, draco-rc2",https://github.com/nasa/CF/issues/231
"Fix #229, Add doc build/deploy workflow","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #229

**Testing performed**
CI with forced fork/branch for reuse workflow and forced deploy: https://github.com/skliper/CF/runs/6009379924

**Expected behavior changes**
Doc build with enforcement of no warnings, will deploy to gh-pages on push to main

**System(s) tested on**
CI

**Additional context**
Depends on nasa/cFS#451

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, dependency, draco-rc2",https://github.com/nasa/CF/pull/230
Add documentation build/deploy workflow,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Build/deploy documentation not in workflow

**Describe the solution you'd like**
Add workflow to build and deploy documentation, see nasa/cFS#451

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFS#451

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc2",https://github.com/nasa/CF/issues/229
"Fix #216, #227 - Adds strict cppcheck and fixes remaining warnings (replace codec macros)","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #216 
- Fix #227 

**Testing performed**
Build/run unit tests, also manually ran strict cppcheck on fsw/

**Expected behavior changes**
None except now enforcing strict cppcheck in CI

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Workflow will fail until #226 is merged since one of the warnings were fixed there.
Also will fail until nasa/cFS#454 is merged based on the directory fix

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC
","CCB:Approved, dependency, draco-rc2",https://github.com/nasa/CF/pull/228
Replace codec code-compatibility macros with direct calls to the new functions,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
These were used to help transition the code from old endian dependent macros, but they obscure the fact values are being modified by taking address of the input.  They also cause static analysis warnings on occasion as identified in #216.

Example:
https://github.com/nasa/CF/blob/d0b3e25566b7cb8221d8a3f90017fe52ee0f43d4/fsw/src/cf_codec.c#L134-L138

**Describe the solution you'd like**
Convert the code to use the functions directly, remove offending macros.

**Describe alternatives you've considered**
None

**Additional context**
- #216

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, draco-rc2",https://github.com/nasa/CF/issues/227
"Fix #218, #56 - Resolve static analysis warnings","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #56 
- Fix #218

**Testing performed**
Build/unit test and run static analysis

**Expected behavior changes**
None, just cleaned up about half the static analysis warnings

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Note goto removal issue is still open which would address another significant set of warnings (#225)

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/CF/pull/226
"Replace use of `goto`, coding standard violation","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
`goto` violates power of ten and JPL coding standards, typically avoided in cFS code.

**Describe the solution you'd like**
Refactor

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning that showed up in #218 but wasn't resolved as part of that issue fix

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc3",https://github.com/nasa/CF/issues/225
Dynamically choose TLM or CMD message type for PDU,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Currently, the CF application uses the software bus for PDU transfer.  (This is an issue in itself, see #130).

However, in the meantime, when using SB it must make the PDU messages look like the CMD/TLM messages that SB typically deals with.  CF currently assumes/requires that all ingress/rx direction PDUs will have a CMD header, and all egress/tx direction PDUs will have a TLM header.

This assumption is a barrier to configuration of having two instances of CF potentially send files to each other - in such a configuration, there must be an intermediate entity to forward the ""TLM""-style egress PDU messages and convert them to ""CMD""-style ingress PDU messages on the other node, in both directions.


**Describe the solution you'd like**
To potentially make this configuration a bit easier, CF could dynamically choose which type of message header to use based on the configured MsgID values.  That is, if the user has configured CF to output on a MsgId which (per the MSG module) is identified as a CMD type, it should use a CMD header when assembling those egress PDUs.  Likewise, if the user has configured CF to input on a MsgID which is identified as a TLM type, then CF should strip a TLM header from that message.


**Describe alternatives you've considered**
Currently if CF-CF transfer is required, an intermediate transfer agent must fulfill this role to forward the PDU to the other entity and also convert to the other type (TLM->CMD) for ingest by CF.

**Additional context**
While this would address one pain point of this type of configuration, it still leaves two major ones:
- SB pipes have inherent buffering limits
- SB pipes cannot provide backpressure to sender (they just hit MsgLim and drop)

As a result the backpressure still needs to be implemented separately (via a sync sem) to avoid overflowing pipes.  I'd still rather fix #130 to address all the issues inherent with using SB as a bulk data transfer mechanism - it isn't designed to be that.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, draco-rc3",https://github.com/nasa/CF/issues/224
"Fix #221, Move cf_tbldefs.h to src","**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #221 

Moves cf_tbldefs.h so that the compiler doesn't pick up
the default platform_inc headers instead of the overridden
headers (if they exist) at the mission level.  The
table structure definitions are not configurable at a
platfrom level, much like the majority of other
applications.

**Testing performed**
Build/run unit tests

**Expected behavior changes**
Overridden headers at mission level will now be used by cf_tbldefs.h vs the defaults in fsw/platform_inc where the file was formerly co-located.

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/CF/pull/223
Warnings raised when CF_NUM_CHANNELS is set to something other than 2,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
https://github.com/nasa/CF/blob/d0b3e25566b7cb8221d8a3f90017fe52ee0f43d4/fsw/platform_inc/cf_platform_cfg.h#L104 is not actually changeable; the initializer at https://github.com/nasa/CF/blob/d0b3e25566b7cb8221d8a3f90017fe52ee0f43d4/fsw/src/cf_cfdp.c#L999 makes assumptions about the channels and their roles

**To Reproduce**
Set CF_NUM_CHANNELS to 1 and observe compile warning

**Expected behavior**
No warnings

**Code snips**

**System observed on:**
 - Hardware: SP0-s
 - OS: VxWorks 6.9

**Additional context**


**Reporter Info**
John N Pham, Northrop Grumman
","invalid, draco-rc2",https://github.com/nasa/CF/issues/222
 `cf_tbldefs.h` in platform_inc directory,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
 `cf_tbldefs.h` in platform_inc directory instead of with source, causing tables to use the non-overridden cf_platform_cfg.h file instead of the one in *_defs at the top level, since the compiler prefers includes relative to the current file over include paths specified on the command line. This is also different than most other apps which define their table structs in fsw/src. Workaround would be to also override cf_tbldefs.h, but the table struct isn't really something that one needs to customize in the first place. 

**To Reproduce**
Steps to reproduce the behavior:
Alter CF_NUM_CHANNELS in platform_cfg by copying to [mission]_defs/, modifying and using generate_config_includefile to override.

**Expected behavior**
CF config table uses the updated cf_platform_cfg.h instead of the original one.

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - SP0-s
 - OS: VxWorks 6.9

**Additional context**
Using snippets from JSC's modified arch_custom.cmake to override platform_cfg:
```c
 ## Add header inclusions from target_defs/<TARGET_NAME>/*.h
set(SPECIFIED_CONFIG ${BUILD_CONFIG_${TARGETSYSTEM}})
list(GET SPECIFIED_CONFIG 2 TGT_NAME)
list(GET SPECIFIED_CONFIG 0 PLATFORM_NAME)

file(GLOB headerFiles ""${MISSION_DEFS}/${TGT_NAME}/*.h*"")
foreach(headerFile ${headerFiles})
  get_filename_component(filename ${headerFile} NAME)
  string(FIND ${filename} ""_"" FPOS)
  math(EXPR SIDX ""${FPOS} + 1"")
  string(SUBSTRING ${filename} ${SIDX} -1 SUFX)
  string(SUBSTRING ${filename} 0 ${FPOS} PREX)
  generate_config_includefile(
    FILE_NAME           ${filename}
    MATCH_SUFFIX        ${SUFX}
    PREFIXES            ${TGT_NAME}/${PLATFORM_NAME}_${PREX} ${TGT_NAME}/${PREX}
  )
endforeach()
```

**Reporter Info**
John N Pham, Northrop Grumman","bug, draco-rc2",https://github.com/nasa/CF/issues/221
Apply latest contributor license agreement links,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Applies links to the latest contributor license agreements.

**Describe the solution you'd like**
Working links

**Additional context**
Depends on https://github.com/nasa/cFS/pull/448

**Requester Info**
Justin Figueroa, ASRC Federal
","docs, draco-rc2",https://github.com/nasa/CF/issues/220
"Fixes #212, Add unit test workflow","Changes enable_unit_test to true, changes ctest_output_on_failure to true,
Adds repo_name, changes ubuntu-latest to ubuntu-18.04, splits build-run
Copied and pasted this file from a successful run
Adds matrix method to ubuntu-18.04 and ubuntu-20.04

**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #212

**Testing performed**
Testing performed on fork: https://github.com/chillfig/CF/actions/runs/2054990660

**Expected behavior changes**
Passing workflow

**System(s) tested on**
Ubuntu 18.04
Ubuntu 20.04

**Additional context**
The build release tested on Ubuntu 20.04 catches a format truncation warning in nasa/osal. [#1241](https://github.com/nasa/osal/issues/1241) documents this issue. Passing workflow requires truncation suppression, depends on https://github.com/nasa/cFE/pull/2078.

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, ASRC Federal
",duplicate,https://github.com/nasa/CF/pull/219
Resolve additional internal static analysis warnings in fsw,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
4 ""red"" errors reported by internal static analysis (license restricts publishing results)

**Describe the solution you'd like**
Resolve the warnings (uninit variable * 3 and one non-distinct identifier)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","bug, draco-rc2",https://github.com/nasa/CF/issues/218
Report mission rev in startup and noop event string,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
`EVS Port1 66/1/CF 20: CF Initialized. Version 3.0.99`

Every other app reports major.minor.rev.mission_rev (mission_rev missing above)

**Describe the solution you'd like**
Add mission rev to version reporting both for startup and noop.  May actually need to add `MISSION_REV` define (not found during quick inspection).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, draco-rc2",https://github.com/nasa/CF/issues/217
Resolve cppcheck issues (and confirm they are getting flagged correctly),"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Style warnings when running strict cppcheck:
```
$ cppcheck --force --inline-suppr --std=c99 --language=c --enable=warning,performance,portability,style --suppress=variableScope –inconclusive fsw/
...
[fsw/src/cf_codec.c:362] -> [fsw/src/cf_codec.c:364]: (style) Variable 'Limit' is reassigned a value before the old one has been used.
[fsw/src/cf_codec.c:669]: (style) Redundant pointer operation on 'optional_fields' - it's already a pointer.
[fsw/src/cf_codec.c:793]: (style) Redundant pointer operation on 'pecrc' - it's already a pointer.
[fsw/src/cf_codec.c:1067]: (style) Redundant pointer operation on 'plcrc' - it's already a pointer.
[fsw/src/cf_codec.c:1067]: (style) Redundant pointer operation on 'pecrc' - it's already a pointer.
```

**Describe the solution you'd like**
Confirm these are getting flagged in CI.

**Describe alternatives you've considered**
None

**Additional context**
- #205

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, draco-rc2",https://github.com/nasa/CF/issues/216
Update and/or document missing coverage,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
`Failure: Coverage cf lines 99.9% functions 100.0% branches 99.2%`

**Describe the solution you'd like**
Fix where possible, elsewise issues should document all uncovered lines/branches and disposition (why it's ok as-is)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, draco-rc2",https://github.com/nasa/CF/issues/215
`Test_CF_Chunks_InsertChunk_PutGiven_chunk_IntoSome_chunks` occasionally fails on 32 bit system,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Not clear what the issue is, but random values being used in test.  Output observed:
```
[BEGIN] 16 Test_CF_Chunks_InsertChunk_PutGiven_chu
[ PASS] 16.001 cf_chunk_tests.c:581 - arg_chunks->count (11) == initial_count + 1 (11)
[ PASS] 16.002 cf_chunk_tests.c:586 - arg_chunks->chunks[i].offset (1762369143) == updated_offsets[i] (1762369143)
[ PASS] 16.003 cf_chunk_tests.c:588 - arg_chunks->chunks[i].size (847905902) == updated_sizes[i] (847905902)
[ FAIL] 16.004 cf_chunk_tests.c:586 - arg_chunks->chunks[i].offset (628830104) == updated_offsets[i] (1341639884)
[ PASS] 16.005 cf_chunk_tests.c:588 - arg_chunks->chunks[i].size (547308955) == updated_sizes[i] (547308955)
[ PASS] 16.006 cf_chunk_tests.c:586 - arg_chunks->chunks[i].offset (1708400675) == updated_offsets[i] (1708400675)
[ PASS] 16.007 cf_chunk_tests.c:588 - arg_chunks->chunks[i].size (1747104817) == updated_sizes[i] (1747104817)
[ PASS] 16.008 cf_chunk_tests.c:586 - arg_chunks->chunks[i].offset (1839674080) == updated_offsets[i] (1839674080)
[ PASS] 16.009 cf_chunk_tests.c:588 - arg_chunks->chunks[i].size (19865785) == updated_sizes[i] (19865785)
[ PASS] 16.010 cf_chunk_tests.c:586 - arg_chunks->chunks[i].offset (635068937) == updated_offsets[i] (635068937)
[ PASS] 16.011 cf_chunk_tests.c:588 - arg_chunks->chunks[i].size (262748747) == updated_sizes[i] (262748747)
[ PASS] 16.012 cf_chunk_tests.c:586 - arg_chunks->chunks[i].offset (1807586308) == updated_offsets[i] (1807586308)
[ PASS] 16.013 cf_chunk_tests.c:588 - arg_chunks->chunks[i].size (638705114) == updated_sizes[i] (638705114)
[ PASS] 16.014 cf_chunk_tests.c:586 - arg_chunks->chunks[i].offset (1600046893) == updated_offsets[i] (1600046893)
[ PASS] 16.015 cf_chunk_tests.c:588 - arg_chunks->chunks[i].size (376990135) == updated_sizes[i] (376990135)
[ PASS] 16.016 cf_chunk_tests.c:586 - arg_chunks->chunks[i].offset (2039586048) == updated_offsets[i] (2039586048)
[ PASS] 16.017 cf_chunk_tests.c:588 - arg_chunks->chunks[i].size (388822370) == updated_sizes[i] (388822370)
[ PASS] 16.018 cf_chunk_tests.c:586 - arg_chunks->chunks[i].offset (611348629) == updated_offsets[i] (611348629)
[ PASS] 16.019 cf_chunk_tests.c:588 - arg_chunks->chunks[i].size (863016801) == updated_sizes[i] (863016801)
[ PASS] 16.020 cf_chunk_tests.c:586 - arg_chunks->chunks[i].offset (1571317798) == updated_offsets[i] (1571317798)
[ PASS] 16.021 cf_chunk_tests.c:588 - arg_chunks->chunks[i].size (96336828) == updated_sizes[i] (96336828)
[ FAIL] 16.022 cf_chunk_tests.c:586 - arg_chunks->chunks[i].offset (790258762) == updated_offsets[i] (847905902)
[ FAIL] 16.023 cf_chunk_tests.c:588 - arg_chunks->chunks[i].size (628830104) == updated_sizes[i] (1762369143)
[  END] 16 Test_CF_Chunks_InsertChunk_PutGiven_chu TOTAL::23    PASS::20    FAIL::3     MIR::0     TSF::0     TTF::0     WARN::0
```

**To Reproduce**
Built on 32 bit system, ran the `coverage-cf-cf_chunk-testrunner` test repeatedly (maybe 3 errors in 10)?

**Expected behavior**
No failures.

**Code snips**
https://github.com/nasa/CF/blob/dafc8aeaaa5c21aa39ddc9f4348c13fbcb363834/unit-test/cf_chunk_tests.c#L533-L590

**System observed on:**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions Bundle main + CF main

**Additional context**
- #86

**Reporter Info**
Jacob Hageman - NASA/GSFC
","unit-test, draco-rc2",https://github.com/nasa/CF/issues/214
Potential acceptance of commands with invalid CFDP class,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
The check for CFDP class could let a ""class 0"" or negative class message through

The code that checks if the class is valid looks like
```c
if(cfdp_class > CF_CFDP_CLASS_2 )
{
CF_CmdRej(); 
return;
}
```

if `cfdp_class` is zero or negative this check might pass and let through an invalid command.


**To Reproduce**
n/a, haven't tested yet.

**Expected behavior**

Only accept Class-1 or Class-2. All other values should be rejected. 

**Code snips**

https://github.com/nasa/CF/blob/b950c9d2fe46edd96adcd5e247689efe4d382d81/fsw/src/cf_cmd.c#L150
https://github.com/nasa/CF/blob/b950c9d2fe46edd96adcd5e247689efe4d382d81/fsw/src/cf_cmd.c#L184




**System observed on:**
code-only check

**Additional context**
n/a

**Reporter Info**
Gerardo E. Cruz-ortiz, NASA","bug, draco-rc3",https://github.com/nasa/CF/issues/213
Add unit test workflow,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Missing unit test workflow.

**Describe the solution you'd like**
Add unit test workflow

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Justin Figueroa - ASRC Federal
","continuous-integration, draco-rc2",https://github.com/nasa/CF/issues/212
"Fix #210, Apply clang-format-10 whitespace formatting","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #210 

**Testing performed**
Whitespace only - CI

**Expected behavior changes**
None, whitespace only

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/211
Apply clang-format-10 formatting,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Was formatted w/ clang-format-13, rest of the repos (and CI) still use clang-format-10

**Describe the solution you'd like**
Apply clang-format-10 so CI will pass.

**Describe alternatives you've considered**
None, we can bulk update to 13 in the future.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, draco-rc1",https://github.com/nasa/CF/issues/210
"Fix #204, Doxygen frontpage refactor and cleanup","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #204

**Testing performed**
Documentation change only, but still built and ran unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, docs, draco-rc1",https://github.com/nasa/CF/pull/209
"Fix #207, Remove old license headers","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #207

**Testing performed**
CI, documentation only

**Expected behavior changes**
None, documentation only

**System(s) tested on**
N/A

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/208
Clean up old license headers,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Old headers still exist in the codebase.

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc1",https://github.com/nasa/CF/issues/207
"Add event, command code, command structure, and telemetry structure documentation","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Missing user's guide documentation.

Also some inlines in cf_utils.h missing documentation.

**Describe the solution you'd like**
Add descriptions.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc3",https://github.com/nasa/CF/issues/206
"Fix #93, Adds format check and static analysis workflows","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #93

**Testing performed**
Tested format check on fork: https://github.com/chillfig/CF/runs/5662467104?check_suite_focus=true

Tested static analysis on fork: https://github.com/chillfig/CF/runs/5662467266?check_suite_focus=true

**Expected behavior changes**
Passing workflow

**System(s) tested on**
Ubuntu 18.04

**Additional context**
The added format check workflow catches a format check error when it runs its ""error on differences"" step. Specifically, the workflow throws errors on the placement of ""\*"" with pointer variables written in the fsw and unit test files. The format check would rather that ""\*"" be on the left side of the whitespace than the right side.

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, ASRC Federal
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/205
"Implement Doxygen front page concept, clean up documentation, resolve doxygen warnings","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
 - Apply frontpage concept/documentation framework (mainpage can't be included in larger document)
 - Clean up/clarify sections and apply suggested patterns
 - Resolve warnings from building doxygen documentation

**Describe the solution you'd like**
See above.

**Describe alternatives you've considered**
None

**Additional context**
- nasa/cfe#2058
- nasa/cfe#2065
- nasa/osal#1228
- nasa/osal#1232

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc1",https://github.com/nasa/CF/issues/204
"Fix #202, Update LICENSE and copyright headers","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #202 

**Testing performed**
Documentation only, but built and ran unit tests anyways
```
make SIMULATION=native ENABLE_UNIT_TESTS=true OMIT_DEPRECATED=true BUILDTYPE=release install
make test
```

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit (w/ GSFC apps added)

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC
",draco-rc1,https://github.com/nasa/CF/pull/203
Add Apache 2.0 LICENSE file and update copyright headers,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Missing license file and out of date copyright info in file headers

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, docs, draco-rc1",https://github.com/nasa/CF/issues/202
"Fix #200, Follow include standard","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #200 

**Testing performed**
CI and local build/execute of unit tests

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",draco-rc1,https://github.com/nasa/CF/pull/201
Fix common_types.h include,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Not following standard:
https://github.com/nasa/CF/blob/e391163e01c9a4da83043e4729bb677e27f95430/fsw/src/cf_logical_pdu.h#L41

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, draco-rc1",https://github.com/nasa/CF/issues/200
Use `CFE_MSG_PTR` instead of `&(x).Msg`,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
`&(x).Msg` has been abstracted by `CFE_MSG_PTR` to avoid internal dependencies on CFE_MSG_Message_t 

```
src/cf_app.c:    CFE_MSG_SetMsgTime(&CF_AppData.hk.tlm_header.Msg, CFE_TIME_GetTime());
src/cf_app.c:    /* return value ignored */ CFE_SB_TransmitMsg(&CF_AppData.hk.tlm_header.Msg, true);
src/cf_app.c:    CFE_MSG_Init(&CF_AppData.hk.tlm_header.Msg, CFE_SB_ValueToMsgId(CF_HK_TLM_MID), sizeof(CF_AppData.hk));
src/cf_app.c:    CFE_MSG_Init(&CF_AppData.cfg.tlm_header.Msg, CFE_SB_ValueToMsgId(CF_CONFIG_TLM_MID), sizeof(CF_AppData.cfg));
src/cf_cmd.c:    CFE_MSG_SetMsgTime(&CF_AppData.cfg.tlm_header.Msg, CFE_TIME_GetTime());
src/cf_cmd.c:    /* return value ignored */ CFE_SB_TransmitMsg(&CF_AppData.cfg.tlm_header.Msg, true);
```

**Describe the solution you'd like**
Use `CFE_MSG_PTR`

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/CF/issues/199
"Fix #197, Resolve uninitialized variables in UT","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #197

**Testing performed**
Build 32 bit & run unit tests with valgrind 

**Expected behavior changes**
No uninitialized variable warnings

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/198
Uninitialized variables in UT when running 32 bit,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Multiple uninitialized variables identified in UT for 32 bit build (using valgrind):
```
coverage-cf-cf_app-testrunner.txt:==31792== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
coverage-cf-cf_chunk-testrunner.txt:==31807== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
coverage-cf-cf_clist-testrunner.txt:==31910== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
coverage-cf-cf_utils-testrunner.txt:==32108== ERROR SUMMARY: 65 errors from 13 contexts (suppressed: 0 from 0)
```

**Describe the solution you'd like**
Resolve

**Describe alternatives you've considered**
None

**Additional context**
Related to #196 testing, this is just the remaining issues after that change.

**Requester Info**
Jacob Hageman - NASA/GSFC","unit-test, draco-rc1",https://github.com/nasa/CF/issues/197
"Fix #195, Stack smashing in CF_Chunk unit test","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #195 

**Testing performed**
Built/ran 32 bit unit tests

**Expected behavior changes**
No longer stack smashing in UT

**System(s) tested on**
 - Hardware: i5/Container
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","unit-test, CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/196
CF_Chunk unit test stack smashing,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Stack smashing observed when compiling/testing 32 bit (-m32).  Issue is with a test not limiting the max count to the size of the array:
https://github.com/nasa/CF/blob/68c2d18f8d2be17843c74f20b536aef7adb97d0c/unit-test/cf_chunk_tests.c#L1467

**Describe the solution you'd like**
Limit correctly and use an index inbounds.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, draco-rc1",https://github.com/nasa/CF/issues/195
Unit test hooks should not pass back pointers out of context,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Multiple cases of pointers getting passed back out of context:
https://github.com/nasa/CF/blob/68c2d18f8d2be17843c74f20b536aef7adb97d0c/unit-test/utilities/ut_utils_cfe_hooks.c#L16
https://github.com/nasa/CF/blob/68c2d18f8d2be17843c74f20b536aef7adb97d0c/unit-test/utilities/ut_utils_cfe_hooks.c#L28
https://github.com/nasa/CF/blob/68c2d18f8d2be17843c74f20b536aef7adb97d0c/unit-test/utilities/ut_utils_cfe_hooks.c#L41
https://github.com/nasa/CF/blob/68c2d18f8d2be17843c74f20b536aef7adb97d0c/unit-test/utilities/ut_utils_cfe_hooks.c#L54
https://github.com/nasa/CF/blob/68c2d18f8d2be17843c74f20b536aef7adb97d0c/unit-test/utilities/ut_utils_cfe_hooks.c#L67
https://github.com/nasa/CF/blob/68c2d18f8d2be17843c74f20b536aef7adb97d0c/unit-test/utilities/ut_utils_cfe_hooks.c#L80
https://github.com/nasa/CF/blob/68c2d18f8d2be17843c74f20b536aef7adb97d0c/unit-test/utilities/ut_utils_cfe_hooks.c#L93
https://github.com/nasa/CF/blob/68c2d18f8d2be17843c74f20b536aef7adb97d0c/unit-test/utilities/ut_utils_cfe_hooks.c#L106

These could all be stale by the time they are checked.

**Describe the solution you'd like**
Clean up hooks.  Remove info not needed, anything critical should either check in context or copy the information out.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, draco-rc2",https://github.com/nasa/CF/issues/194
Add fixed size CCSDS packet option,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Some systems can't handle variable sized telemetry packets.

**Describe the solution you'd like**
Add an option to zero-fill the related CCSDS packets.

**Describe alternatives you've considered**
None.

**Additional context**
None

**Requester Info**
Jacob Hageman
",enhancement,https://github.com/nasa/CF/issues/193
"Fix #190, Use lowercase and updated table name in CI","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #190

**Testing performed**
CI

**Expected behavior changes**
CI should pass

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","continuous-integration, CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/191
Fix CI for table name update and follow lower case standard,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
CI broken by table update, also unnecessarily diverges from lowercase pattern

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","continuous-integration, draco-rc1",https://github.com/nasa/CF/issues/190
"Fix #188, Apply header guard standard","**Describe the contribution**
- Fix #188

**Testing performed**
CI

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/189
Apply header guard standard formatting,"**Is your feature request related to a problem? Please describe.**
Nonstandard guard used

**Describe the solution you'd like**
Apply standard

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc1",https://github.com/nasa/CF/issues/188
"Fix #186, CF table name and default polling disabled","**Checklist (Please check before submitting)**

* [ x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [ x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #186 

**Testing performed**
Built and default startup, confirmed table loaded w/ no errors (with CF app name in startup config)

**Expected behavior changes**
No polling errors reported, works with GSFC app naming patterns

**System(s) tested on**
 - Hardware: i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/187
"CF table updates - default to CF app name to match GSFC apps, disable polling by default","**Checklist (Please check before submitting)**

* [ x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [ x] I reviewed the [CF README.md file](https://github.com/nasa/CF/blob/main/README.md) to see if the feature is in the major future work.
* [ x] I performed a cursory search to see if the feature request is relevant, not redundant, nor in conflict with other tickets.

**Is your feature request related to a problem? Please describe.**
Current table name follows lab app pattern w/ *_APP, but GSFC apps don't have the _APP.  Polling directory enabled by default means the warnings/errors about no polling directory existing will show up unless created by the user.  Prefer default behavior to not see these.

**Describe the solution you'd like**
Change CF_APP to CF in table, set polling to disabled

**Describe alternatives you've considered**
Users can override, so not a big deal but nice to stay consistent with apps.  If we want to add *_APP everywhere probably makes more sense as a bulk update.  Note may run into name length issues on other apps by using up the extra 4 chars.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, draco-rc1",https://github.com/nasa/CF/issues/186
"Fix #138, Add Build Workflow","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [ ] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #138 

**Testing performed**
Tested on fork: https://github.com/ArielSAdamsNASA/CF/runs/4940387579?check_suite_focus=true

**Expected behavior changes**
Build cFS with the CF app and run ./core-cpu1

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal
","continuous-integration, CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/185
Possible race condition with creation of throttle sem (needs to exist before CF initializes),"**Describe the bug**
CFE ES starts all applications in their own thread.  Therefore, conceptually at least, all apps are starting at the same time.

If configured to use a throttle sem, the CF app expects that semaphore to be created _before_ it starts.  During startup, it will attempt to bind to that semaphore during CF_CFDP_InitEngine(), and if that fails, CF aborts (see #178).

Problem is, if the semaphore is created by another app, whether it be CI/TO or some other dedicated I/O app, there is no guarantee that the semaphore has been created before CF attempts to use it.

Secondary problem exists if the I/O app that owns the sem gets restarted or reloaded, the semaphore ID will likely change too.   This may be recoverable by disabling the engine and re-enabling it (but haven't tested that).

**To Reproduce**
Its a race condition, so not readily reproducible.
Start CF _before_ the app that creates the sem (still not guaranteed, but increases the chance the race will be lost)
Add an artificial delay during startup for the app that creates the sem (just further increases the chance the race will be lost)

**Expected behavior**
Should be guaranteed via sync mechanisms, or shouldn't be a hard error (e.g. maybe retry to bind later?)

Suggestion that CF might still start up but with the engine in a disabled state, so at least someone can correct the condition and enable the engine, rather than having CF abort/exit.

Adding a call to CFE_ES_WaitForStartupSync() before starting the engine might help too...

**Code snips**
https://github.com/nasa/CF/blob/2a024d8efd9f44f54b7a59f7face24f255536236/fsw/src/cf_cfdp.c#L1014-L1015

**System observed on:**
Ubuntu 21.10

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, draco-rc4",https://github.com/nasa/CF/issues/184
"Fix #146, set revision number to 99","**Describe the contribution**
Per CFE/CFS versioning patterns, development software should report itself as revision 99 to avoid confusion with released versions.

Fixes #146

**Testing performed**
Build and sanity check CF

**Expected behavior changes**
Revision reported as 99 now, example boot event:

    EVS Port1 66/1/CF_APP 20: CF Initialized. Version 3.0.99

**System(s) tested on**
Ubuntu 21.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/183
"Fix #94, move all bitfields into codec","**Describe the contribution**
Nothing outside of the codec code should need to know about the bitfields
in the CFDP protocol definition.  Everything else uses logical values.

This moves all DECLARE_FIELD macros into cf_codec.c and removes cf_field.h.

Fixes #94
Fixes #65 

**Testing performed**
Build and sanity check CF
Run all unit tests
Run some file transfers

**Expected behavior changes**
None, code clean up

**System(s) tested on**
Ubuntu 21.10

**Additional context**
This just puts these definitions on the ""need to know"" basis, by not exposing them outside the only file where they matter.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/182
"Fix #166, improve coverage on CF_CmdGetSetParam","**Describe the contribution**
Rewrites the unit test on this function in order to get full line coverage.
This needs to call the routine with every defined param ID to get each case.

Fixes #166

**Testing performed**
Build and run all unit tests, confirm coverage

**Expected behavior changes**
None for FSW, unit test coverage improvement

**System(s) tested on**
Ubuntu 21.10

**Additional context**
This also removes a bit of code from FSW that did a no-op for a size that wasn't uint32/uint16/uint8.  This was unreachable because there are no cases that have such a size, and it would be a software bug if there was.  

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/181
"Fix #178, remove throttle sem from default/example config","**Describe the contribution**
Removes the throttle sem name from the example configuration table.  Unless the user provides another app/library to create this sem, this configuration will not load.  With this sem removed then CF should at least be able to start up.

Fixes #178

**Testing performed**
Build CF

**Expected behavior changes**
Example config will not attempt to use a throttle sem.

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/180
"Fix #95, reject PDUs with large bit set","**Describe the contribution**
This bit indicates that the PDU has 64-bit size and offset fields. CF currently does not support large file sizes.  It needs to reject
these packets as they will corrupt the data because they are not decoded properly (decode is fixed at 32 bit sizes).

Fixes #95

**Testing performed**
Build and sanity check CF
Force sending PDU with bit set, confirm CF rejects the PDU.

**Expected behavior changes**
CF informs the user that it received a PDU that it does not understand.

**System(s) tested on**
Ubuntu 21.10

**Additional context**
CF does not and did not support this feature, the only difference here is that it CF will now properly detect and reject a received PDU with this bit set, and inform the user of that event, instead of attempting to ingest it and doing so wrongly (likely corrupting data in the process).

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/179
Change default configuration to not use throttling semaphore,"**Is your feature request related to a problem? Please describe.**
The default/example table source files include a semaphore name - cf_1_sem and cf_2_sem - for throttling on channel 1 and 2, respectively.

However, CF does not actually create the throttling semaphores, it expects the semaphore to be created before CF starts.  If a new user is starting CF by itself with no other support apps running, this semaphore will not exist.  

**Describe the solution you'd like**
To make it simpler to build and run CF with a default configuration, the example table should have an empty string for the semaphore name - this means no throttle.

**Additional context**
This will make CF at least boot up and load ""out of the box"" ... but probably any real deployment will need a throttle, so this means that we don't have an example of a throttling semaphore anymore.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, draco-rc1",https://github.com/nasa/CF/issues/178
"Fix #36, add CF_PURGE_QUEUE_CC","**Describe the contribution**
Adds missing enum label to CF_CMDS.

Fixes #36

**Testing performed**
Issued the command (code 21) from cmdutil and confirmed CF did something ....

**Expected behavior changes**
None, this command code was already in the dispatch table, so it worked before if CC 21 was manually sent using cmdutil.

**System(s) tested on**
Ubuntu 21.10

**Additional context**
This is just for completeness/correctness of the enum.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/177
"Fix #172, restore call to CF_CFDP_RecvNak","**Describe the contribution**
This call got inadvertently removed with recent change, caught by regression test.  This puts it back.

Fixes #172

**Testing performed**
Build and sanity check CF
Execute CF file transfers

**Expected behavior changes**
NAK should work properly again

**System(s) tested on**
Ubuntu 21.10

**Additional context**
In my test environment it is difficult to recreate a NAK situation...

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/176
"Fix #171, use osal_id_t for OSAL ID, not int32","**Describe the contribution**
Use the correct typedef for OSAL ID.  This also necessitates using the correct conversion macro where use as an integer is intended.

Fixes #171

**Testing performed**
Build with OSAL bleeding edge code, confirm no type conversion errors.

**Expected behavior changes**
None w/Caelum OSAL, as osal_id_t is equivalent to uint32.

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/175
"Fix #40, update traverse history/write file","**Describe the contribution**

- rename the functions to better indicate what they do
- do not discard the part of the output that has EID/TSN/CC information
- do not pass the return value of snprintf directly to write(), use strlen()
- simplify the code

Fixes #40

**Testing performed**
Build and unit test CF.
Run two instances of CFE+CF, execute transfer in both directions and confirm
Issue CF_WRITE_QUEUE_CC (15) to write the transaction and history queues to the file
Confirm contents of the file are correct.

**Expected behavior changes**
The file contains the information it is intended to contain, mainly the SEQ/DIR/PEER/CC bits are not omitted.  There is also no risk of buffer overruns.

Here is an example file output, after running two transactions between two nodes (one RX, one TX)
```
SEQ (2, 1)      DIR: RX PEER 2  CC: 0   SRC: /cf/testfile2      DST: /cf/testfile2
SEQ (1, 1)      DIR: TX PEER 2  CC: 0   SRC: /cf/testfile1      DST: /cf/testfile1
```

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/174
Write queue data does not truncate existing files,"**Describe the bug**
Discovered when testing CF_WRITE_QUEUE_CC command.  My test issued the command more than once, with the same target file name, but different type/queue parameters, to get the different content.  Noted that in cases where the second output was shorter than the first output, the old output remained in the file (stale data) at the end. 

This is because the call to OS_FileOpen() does not use the OS_FILE_FLAG_TRUNCATE flag, so the old data remains in the file, until it is actually overwritten.

**To Reproduce**
Run CF, run some transactions to get some history, then run CF_WRITE_QUEUE_CC with all types/all queues.
Then run CF_WRITE_QUEUE_CC again with the same output file, but a more specific type/queue parameter, so the output is smaller.
Observe that the old data from the first call is still at the end of the file, after the new entries - it was not truncated.

**Expected behavior**
In general any time a write file request is done, it should truncate the file, unless the requirement is specifically to preserve old data (i.e. append).  This is not an append, so it should truncate, and write the file from a clean slate.

**Code snips**
Problematic call to OS_OpenCreate is here (via wrapper):
https://github.com/nasa/CF/blob/d3ae3f9595033c7c4af4faffc4c4513c1a4b1aa5/fsw/src/cf_cmd.c#L705

However there may be other occurrences.  All calls to this function should be checked.

**System observed on:**
Ubuntu 21.10

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, draco-rc2",https://github.com/nasa/CF/issues/173
CF no longer processes nak pdu packets,"**Describe the bug**
A recent CF change removed the decoding of received NAK PDUs. In cf_cfdp_s.c, function CF_CFDP_S2_Nak, there should be a call to CF_CFDP_RecvNak which decodes the PDU prior to processing. Otherwise, the packet isn't decoded, the PDU is rejected as invalid, and the event report with ""received invalid nak pdu"" is issued.

**To Reproduce**
Execute CF tests in Linux that exercise receipt of NAK PDUs.

**Expected behavior**
Tests should pass and NAK PDUs should be accepted.

**System observed on:**
 Linux x86_64","bug, draco-rc1",https://github.com/nasa/CF/issues/172
"Use proper type instead of ""int32"" for OSAL IDs","**Describe the bug**
In some functions, e.g. CF_WriteQueueDataToFile, CF_WriteHistoryQueueDataToFile, the OSAL file descriptor is being passed as an `int32`.  This is incorrect, but allowed by the backward-compatibility features in OSAL.  In a future version, this will become an error.

**To Reproduce**
Build OSAL with type-safe ID.  Implicit conversion of ID to/from an integer will fail to compile.

**Expected behavior**
Use `osal_id_t` type instead, which is the correct type for an OSAL ID.

**Code snips**
https://github.com/nasa/CF/blob/d3ae3f9595033c7c4af4faffc4c4513c1a4b1aa5/fsw/src/cf_utils.h#L224
https://github.com/nasa/CF/blob/d3ae3f9595033c7c4af4faffc4c4513c1a4b1aa5/fsw/src/cf_utils.h#L239

**System observed on:**
Ubuntu 21.10

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",draco-rc1,https://github.com/nasa/CF/issues/171
"Fix #58, scrub all printf format codes","**Describe the contribution**
Use the correct printf format code and typecast for printing various values in log messages and events.

Fixes #58

**Testing performed**
Build and run tests on RTEMS and 32-bit PowerPC 

**Expected behavior changes**
Build succeeds without warnings or errors

**System(s) tested on**
RTEMS 4.11.3 on pc686 + QEMU
Yocto/Poky Linux on PPC 7400  + QEMU

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/170
"Fix #164, consistent ""chunk"" test sizes","**Describe the contribution**
Do not use a random uint16 to size the structure that is allocated on the stack.  Pick a reasonable size that is not likely to overrun
the stack, and use it.

This fixes a crash/stack overrun issue when running on RTEMS.

Fixes #164

**Testing performed**
Build and sanity check CF on PC-RTEMS

**Expected behavior changes**
Tests pass

**System(s) tested on**
RTEMS 4.11.3 via QEMU+pc686 BSP

**Additional context**
This _only_ fixes the random values that caused a stack overrun/crash.  Would still recommend fixing other use of random numbers in tests.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/169
"Fix #123, validate input params on TxFile and Playback cmds","**Describe the contribution**
The input parameters on TxFile and Playback commands was not being sufficiently validated before calling the internal routine.

Fixes #123
Fixes #126 

**Testing performed**
Send in commands with invalid parameters/channel number and confirm it is being rejected with the event.

**Expected behavior changes**
CF no longer segfaults with an out-of-range channel number

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/168
"Fix #125, correct accept/reject counter increments","**Describe the contribution**
For commands that rely on CF_TsnChanAction(), this is documented as returning a count of the number of transactions affected.  Therefore, a return value >0 means that the operation was successful (or at least it matched something), and a return value <=0 means failure.

- Fixes a case where the function did not adhere to its documented return
- Fixes passing the result to CF_CmdCond() which needs a translation.

Fixes #125

**Testing performed**
Build and sanity check CF

**Expected behavior changes**
Correct counters being incremented now

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/167
Improve UT coverage on CF_CmdGetSetParam(),"**Is your feature request related to a problem? Please describe.**
The unit test does not individually validate all of the values that ""param_id"" may have.  This did not show up in the LCOV reports previously.  However a recent PR changed the table lookup to a `switch()` block, the LCOV branch coverage now shows these param_id values as untested cases in the switch.

**Describe the solution you'd like**
Should add test cases to get back to 100% line and branch coverage.

**Additional context**
Note this was always the case, but it just didn't show up in the LCOV because of the code structure.  Now it does.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, draco-rc1",https://github.com/nasa/CF/issues/166
"Fix #60, rework loop in CF_CFDP_CycleTx","**Describe the contribution**
Modifies the loop inside this function to be more conventional, and easier to follow. Does not change the logic.

Fixes #60

**Testing performed**
Build and sanity check CF, run all tests

**Expected behavior changes**
None, this does not change loop logic

**System(s) tested on**
Ubuntu 21.10

**Additional context**
Do not use ""goto"" to jump _inside_ the middle of a loop, just use `while(true)` and break out when the stop condition was reached.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/165
"Test_CF_Chunks_Init_SetGiven_chunks_max_chunks_ToGiven_max_chunks creates object too large, crashes RTEMS","**Describe the bug**
The ""Test_CF_Chunks_Init_SetGiven_chunks_max_chunks_ToGiven_max_chunks"" test fails on RTEMS and crashes the kernel, because it creates an absurdly large structure on the stack and then memset()'s it to 0.  This appears to blow out the stack and probably overwrites some important structures.

**To Reproduce**
Execute CF tests on RTEMS

**Expected behavior**
Tests should pass

**Code snips**
https://github.com/nasa/CF/blob/c0b1f534c5e1b501b5585cc8cab27a5a38a19c92/unit-test/cf_chunk_tests.c#L1914-L1917

**System observed on:**
RTEMS 4.11.3 via QEMU/pc686

**Additional context**
Once again, appears to be related to use of random numbers ... when using a random number to indicate the size of an object, nothing good comes from that (see #86)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, draco-rc1",https://github.com/nasa/CF/issues/164
"Fix #63, remove macros within C code","**Describe the contribution**
Reworks the CF_CmdGetSetParam to be clearer in its implementation, not require the use of endian-specific conditionally-compiled code.

Fixes #63

**Testing performed**
Build and sanity test CF app
Send various get/set param commands (CC 10 and 11) and confirm working as expected

**Expected behavior changes**
None visible externally (i.e. CMD handling) but much cleaner internal handling of these values.

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/163
"Fix #161, disable the engine in CF_CFDP_DisableEngine","**Describe the contribution**
Restores setting a global flag which was mistakenly deleted in a previous cleanup.  This also adds a unit test check to confirm the global was set false.

Fixes #161

**Testing performed**
Build CF and run tests

**Expected behavior changes**
Engine gets disabled when CF_CFDP_DisableEngine is called

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/162
CF_CFDP_DisableEngine no longer disables the engine,"**Describe the bug**
The line which actually disables the engine got mistakenly deleted in a recent PR.  (Got swept up because it was grouped with the variable declarations with no whitespace between).

**To Reproduce**
Issue disable engine command, it does not actually disable

**Expected behavior**
Should disable the engine

**Code snips**
https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/src/cf_cfdp.c#L2287-L2288

**System observed on:**
N/A

**Reporter Info**
Sergio Maldonado (@semaldona)
","bug, draco-rc1",https://github.com/nasa/CF/issues/161
"Fix #61, remove dependence on ENDIAN macro for checksum","**Describe the contribution**
Removes the checksum ""optimization"" for big endian, as it is unlikely to be useful and creates endianness dependencies.

Fixes #61

**Testing performed**
Build and sanity check CF

**Expected behavior changes**
None on x86/little endian (removes code that was not used)
PPC/big endian will use the same code as x86, might be a bit slower but its safer and more testable (because its the same code)

**System(s) tested on**
Ubuntu 21.10

**Additional context**
The big endian optimization is probably not that useful because it requires that the HW can do misaligned 32-bit reads.  AFAIK most embedded CPUs do not have this capability, and if they can, it might not be all that much faster than reading it byte-by-byte.  So even though it looks like a 32-bit read in C code (and therefore 4x fewer loop iterations) it probably doesn't have much of a payoff, if one could find a hardware with this capability (not sure how it was originally tested).  In the end I don't think its worth trying to test and maintain this ""optimization"".

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/160
"Fix #62, make entity ID default to 32 bit","**Describe the contribution**
Entity IDs should be larger by default for real-world applicability, as this also restricts what CFDP can receive, not just what it sends.  Note CFDP will only use the number of bytes required to express the value, so values less than 256 will
still only use 1 byte, regardless of this config.  This just allows use of larger values.

Fixes #62

**Testing performed**
Build and sanity check CF

**Expected behavior changes**
Default ""out of the box"" config should support entity ID values up to 32 bits.  

**System(s) tested on**
Ubuntu 21.10

**Additional context**
This only affects what CF is capable of handling, if running with small (<256) entity ID values, there is no change to the runtime behavior at all; they will still be 8 bits in practice.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/159
"Fix #157, adjust padding in msg structs","**Describe the contribution**
Add explicit spare bytes where the compiler is likely to introduce padding into hte message structures.  CFS SB messages should avoid having any implicit padding, whenever possible.

Fixes #157

**Testing performed**
Build and run tests, send some commands to sanity check

**Expected behavior changes**
None really, the padding was implicitly in the messages already, this just makes it clear/explicit.

**System(s) tested on**
Ubuntu 21.04 (on 64-bit CPU)

**Additional context**
This probably needs COSMOS updates as well (TBD)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/158
CF Msg definitions explicit padding,"**Is your feature request related to a problem? Please describe.**
CFS apps should avoid having any implicit (compiler-induced) padding in the message structures.  Where items are likely to be spaced due to compiler alignment requirements, an explicit spare byte (or bytes) should be added between them.

**Describe the solution you'd like**
Specifically, the following structures need some padding updates:
- In `CF_SetParamCmd_t`: total size needs to be multiple of uint32 (+2 spare bytes at end)
- In `CF_HkPacket_t`: +4 bytes spare between the ""counters"" (CF_HkCmdCounters_t, 4 bytes in size) and the ""channel_hk"" (CF_HkChannel_Data_t, which contains uint64 values, and therefore has 8-byte alignment).
- In `CF_HkChannel_Data_t`: total size needs to be a multiple of uint64 (+4 more spare bytes at end).  This currently has 3 spare bytes, which puts the end at offset 84.  This is not a multiple of 8, needs 4 more to make it 88.

**Additional context**
Will need COSMOS updates, too.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",draco-rc1,https://github.com/nasa/CF/issues/157
"Fix #20, doxygen updates","**Describe the contribution**

Make sure _all_ functions in CF have a doxygen block on the declaration describing the inputs and outputs and a general summary of what the function does.
    
Additionally describe the purpose of structures and structure members where it is not totally obvious from the name.
    
Note: this also renames one member, CF_max_chunks, that appears to have been improperly scooped up in a previous batch rename.

Fixes #20

**Testing performed**
Build and sanity check CF operation.  This does not change any actual FSW or unit test logic.

**Expected behavior changes**
No impact to behavior, this only changes documentation (aside from the one rename)

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/156
Implementation of CF_CmdCond takes address of inline function,"**Is your feature request related to a problem? Please describe.**
While the compiler does not complain about this, it totally defeats the purpose of making these ""inline"" functions to begin with, as by definition they'll need to be compiled out-of-line in order to be able to call them via a function pointer.

**Describe the solution you'd like**
This complexity of using a function pointer is not necessary and counterproductive.  Make it simple and boring:

```
if (cond == 0)
{
    CF_CmdAcc();
}
else
{
    CF_CmdRej();
}
```

Not fancy, but pretty clear what the above is doing.  What's there now just obfuscates.  Note that the ""cond"" is not a boolean, its the return value of a command function that returns 0 on success.  So the logic is inverted.

**Additional context**
Existing function
https://github.com/nasa/CF/blob/b6de2056f70c6d3eb97664a5cd12a50c4978d5bc/fsw/src/cf_cmd.h#L81-L86

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, draco-rc3",https://github.com/nasa/CF/issues/155
Incorrect check at the start of CF_Chunks_EraseRange,"This only verifies that the ""start"" ID is less than the count:
https://github.com/nasa/CF/blob/b6de2056f70c6d3eb97664a5cd12a50c4978d5bc/fsw/src/cf_chunk.c#L57

It really needs to verify that the end is less than the count too (because it reads this memory).  This could also make the count go negative if the end was beyond the count.

In theory if the code is operating properly this should never happen, but since some error checking is done, it should at least be correctly done.

Recommend to make it check that `(start < end && end <= chunks->count)` instead.
",duplicate,https://github.com/nasa/CF/issues/154
"Fix #32, compile out CF_Asserts by default","**Describe the contribution**
Changes CF_Assert to be opt-in rather than opt-out, so that under normal verification and validation the asserts will _not_ be included, but they can still be added back during development, if desired.

They mainly exist as notes to developers as to what is supposed to be true, once debugged it is impossible to get these conditions, by definition. 

Also removes one channel calculation that was only for assert.  Note that the same condition is asserted later, so it was redundant anyway.

Fixes #32

**Testing performed**
Build and sanity check CF with CF_DEBUG_BUILD set both ways

**Expected behavior changes**
Branch coverage on LCOV report is much better with asserts compiled out.

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/153
"Fix #110, #149, update identifier names","**Describe the contribution**
Renames all remaining identifiers that did not have an appropriate name per the coding standards.  Specifically, this is anything
that did not start with CF prefix (#149) and anything that ended with an underscore only (#110).

Fixes #149 
Fixes #110

**Testing performed**
Build and sanity check CF, run all tests
Execute test file transfer between two CFE nodes

**Expected behavior changes**
None, internal symbol rename only

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/152
"Fix #129, reject FD packets with segment_metadata flag set","**Describe the contribution**
The CF does not currently interpret/use the segment metadata option inside file data PDUs.  Packets with this bit set should
be rejected.

Fixes #129

**Testing performed**
Build CF and run all tests
Execute test file transfers between two CFE nodes

**Expected behavior changes**
None, CF does not set this bit on Tx, it should never be set on Rx.

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/151
"Fix #148, use proper types for MsgId and mid values","Ensures use of the proper SB-provided types for MsgIDs and MsgId values (aka CFE_SB_MsgId_Atom_t).  This ensures that
the values are used and converted properly.

Fixes #148 
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/150
Some functions/typedefs remaining that do not follow naming convention,"A previous fix for #42 did a scrub of the global variables, but there are still several instances of localized identifier names that do not follow the convention.  These should also be fixed (easy search and replace).

- tick_args_t
- container_of
- chan_action_fn_t
- bool_arg_t
- susp_res_arg_t
- bool_msg_arg_t
- trans_seq_arg_t
- trav_arg_t
- traverse_all_args_t
- priority_arg_t

Most of these are for local helpers that were previously file-scoped (static) but after #137 have been moved to a header and made non-static for unit testing improvements.  So these should now be renamed to follow the convention since they are technically global scope, even if use is still limited to one unit.
",draco-rc1,https://github.com/nasa/CF/issues/149
"A uint16 is used for defining the input/output apids in the config table, doesn't support full sized message IDs","CF defines apid inputs/outputs as uint16's, then uses these with the CFE_MSG_Init API which expects message ID's of type `CFE_SB_MsgId_t`.
https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/platform_inc/cf_tbldefs.h#L50-L51
","bug, draco-rc1",https://github.com/nasa/CF/issues/148
"""count_bytes"" inside CF_CFDP_R2_CalcCrcChunk is not incremented during loop","The CF_CFDP_R2_CalcCrcChunk function has what appears to be an intent to limit the amount of bytes processed during each call.  There is a comparison of a local `count_bytes` to the configured `rx_crc_calc_bytes_per_wakeup` here:

https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/src/cf_cfdp_r.c#L721

However, nowhere during this loop is `count_bytes` incremented, so it is always 0, and thus this limit is never reached.

Found during rework of unit tests on here, branch coverage showed it not possible to get this condition because count_bytes is always 0.",draco-rc1,https://github.com/nasa/CF/issues/147
Set revision number to 99 on main branch to indicate development,"Really we should bake this into process such that it's the very first change on the development branch after a release.  Otherwise tlm will not be unique between official releases and development branch use.

https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/src/cf_version.h#L29-L31",draco-rc1,https://github.com/nasa/CF/issues/146
"Mixture of different return types, and many use ""int""","CF has a variety of different return types from its internal functions, and many are just `int`, and return 0 on success, or -1 on failure:

https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/src/cf_cfdp.h#L432

But some, for example the ""send"" routines, have a dedicated enum:

https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/src/cf_cfdp.h#L417

These can be tricky because it is still fundamentally an `int` (enum) but while the success is still a value of ""0"", the error codes are in positive values, not negative like the others.

Sometimes the return type is `int` but it indicates a size:

https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/src/cf_cfdp_pdu.h#L107

And in other cases the return type is `int` but it indicates a boolean value, where 0 is false and 1 is true:

https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/fsw/src/cf_timer.h#L52

This latter case is also easy to confuse with the first case, where 0 is success on many functions but a logical ""false"" here.

**Recommendation**:
CF should have a return code paradigm that is more consistent with CFE and other apps.

- If the return value is a boolean true/false then use `bool`
- If the return value is a size, then use `size_t`
- General helper functions should return a type based on `int32` (may be a typedef like `CFE_Status_t`) and have a set of predefined constants for use as return values, and use them consistently throughout the code.




",enhancement,https://github.com/nasa/CF/issues/145
"Unit tests including "".c"" file","The CF unit tests are using `#include` to wrap a .c file.  For example:

https://github.com/nasa/CF/blob/ba10b0bc4efccacabb7c16c250fe2c8a3f60fbf9/unit-test/cf_crc_tests.c#L3

This practice was determined to violate GSFC coding standards.  

It is likely done this way such that the test can access ""static"" items in the source file.  The preferred way is to simply declare the item in a header file so that unit test can access it more conventionally.",draco-rc1,https://github.com/nasa/CF/issues/144
"Fix #141, Add Contributing Guide","Fixes #141 

Added contributing guide that directs users to the cFS CONTRIBUTING.md file.",draco-rc1,https://github.com/nasa/CF/pull/143
"Fix #140, Add Issue & PR Templates","Fixes #140 

Added Bug Report, Feature Request, and Pull Request templates. ",draco-rc1,https://github.com/nasa/CF/pull/142
Add Contributing Guide,"Match the cFS repo in terms of documentation to allow the community to easily contribute.

Add a contributing guide similar to the one found in cFS. ",draco-rc1,https://github.com/nasa/CF/issues/141
Add PR & Issue Templates,"Match the cFS repo in terms of documentation to allow the community to easily contribute. 

Add a bug report and feature request template. 
",draco-rc1,https://github.com/nasa/CF/issues/140
Remove use of message storage in CF_AppData global,"Should this be a follow-on cleanup issue (if it isn't already)?

_Originally posted by @skliper in https://github.com/nasa/CF/pull/135#r771683338_

Related to https://github.com/nasa/CF/issues/91

Might depend on #87 

",enhancement,https://github.com/nasa/CF/issues/139
Add build workflow for continuous integration,"Develop a github actions workflow to compile CF with the rest of the framework. 

Will also need to modify sch_lab table to check if CF runs. ","continuous-integration, draco-rc1",https://github.com/nasa/CF/issues/138
"Fix #116 (plus others), separate logical vs. network PDU buffers","Improves the distinction between PDU data being actively interpreted or created during the PDU receive or transmit process, and the encoded form of that data.
    
CF formerly treated the two as the same, directly referencing the encoded form of the data.  This creates many repeated translations. Furthermore, it would sometimes write a modified value back to the packet in a partially-decoded form, so it was never clear what was in a given buffer at a given time (it could be native byte order or network byte order, in the same fields).
    
This introduces a ""logical"" buffer which correlates to the CFDP buffer, but is used for all in-work or temporary value storage.
All values in the logical buffer are normalized to the native machine, that is they are aligned properly and always in the
correct byte order for the host, so they can be used as normal values without any need for translation.
    
When it comes time to transmit data to/from the network, a dedicated Encode/Decode function is used, to translate the
entire content from its native form to the network form, or vice versa.
    
FSW should typically not access the encoded form of data, outside of the codec routines, except under very limited
circumstances with good reason (such as dynamically updating the total_length field in the base header after encode).

Fixes #116
Fixes #71
Fixes #68
Fixes #37
Fixes #35
Fixes #34
Fixes #33
Fixes #28

Also related to #61, #91, #95, #129, #109 - makes progress toward those goals but more work still needed.","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/137
"Fix #66, handle alt-success code from TBL API","The TBL API may return success codes other than CFE_SUCCESS, such as CFE_TBL_INFO_UPDATED.  From the standpoint of CF_CheckTables, these should all be considered successful.

Fixes #66",draco-rc1,https://github.com/nasa/CF/pull/136
"Fix #111, make dispatch tables and functions consistent","Standardize the dynamic handler functions to two basic types, one that accepts a PDU (recv) and one that does not (send).

Also create several dispatch table types, one based on file directive code, one based on Tx sub state, and one based
on Rx sub state.

Change the dispatcher functions to use these common types and create new dispatcher functions where there was not
a separate function already (this makes the pattern consistent).

Make all ""receive"" helper functions accept a pointer to the recieved PDU and actually use that pointer to read the data.  This
substantially reduces reliance on the global and fixes some cases where a pointer was actually passed into a function, but
ignored.  This takes a significant step toward removing the global entirely, but does not do so yet.

Fixes #111
Also related to/makes some progress on #90 and #91 but does not fix those yet.","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/135
Replace custom strnlen implementation with OSAL version,"TODO in code references replacing this function with an osal version 

https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L499-L522

Apps should avoid developing custom implementation of utilities especially generic ones like strnlen. 

See osal implementation below

https://github.com/nasa/osal/blob/4cc6dbb5019d0589d5ce52e3755a0b7a012ade3c/src/os/shared/inc/os-shared-common.h#L138-L159
",invalid,https://github.com/nasa/CF/issues/134
"Fix #41, no packing of CMD/TLM structs","The CMD/TLM structures are application-defined.  As such, they should not need to depend on compiler-specific extensions like packing.

Note that the definitions (mostly) already included explicit spare bytes where padding was likely to be needed, so the ""packed"" attribute was largely unnecessary here, only serving to make the definitions NOT compilant with C99.

Fixes #41","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/133
"CF updates its destination file ""in-place""","The CF application, when receiving files, will open the destination file as indicated in the Metadata PDU and immediately start writing data to it, thereby overwriting any data that was previously in the file at that position.

This can be dangerous, because the file transfer may not ultimately succeed.  For instance, CRC errors may occur, or part of the transfer might get lost.  But once data has been clobbered, there is no way to ""undo"" and restore the original data -- its gone.  So now the user has a situation where neither the new file nor the original file are valid - the file is just corrupt now.

It is often desirable to write data to a temporary file first, let the transfer run to completion (storing ALL data in the temporary file), and then rename the file to its final/correct filename only after the final CRC and size checks have passed and the data is known to be good (or at least to the extent that CF can verify it).

In fact, this is the _only_ way to safely update application binary object (.so files) on many targets, since the text/rodata memory pages may be mmap'ed directly to the file on disk.  If these are updated in place, and the file is an actively-running application, then the running code will immediately ""see"" the modifications, and likely crash/segfault depending on what it was doing at the time.

Recommendation here is to ALWAYS use a temporary file to store incoming data, never overwrite existing files until final validations have occurred.  This will also avoid some of the special logic that only handled corner cases (see issue #131) by making that more the norm than the exception.",enhancement,https://github.com/nasa/CF/issues/132
"Likely issues in processing of deferred/reordered ""md"" packets","There appears to be logic within CF to support a case where the MetaData PDU arrives late - that is, after file data has already started.  Basically, the logic is as follows:
- if the receiver gets PDU type is file data (not metadata) in the idle state (which is for a new/unknown transaction), it assumes the initial metadata PDU may have been lost, and it jumps directly to the file data state.  
- The PDU is then re-dispatched in the context of a class 2 file data state
- The CF_CFDP_R_Init() function, will see that this is initializing a transaction for which no metadata is known, and it will:
    - generate a NAK for the MD (looks like this is an attempt to get the sender to regenerate it)
    - populates the transaction with a generated temporary file name for the destination
- If the MD PDU subsequently arrives, it then kicks off the following sequence:
    - temporary file is closed
    - `OS_rename()`  from temporary file to file name in metadata PDU
    - re-open the file under its new name

The problem that is immediately visible here is that this close+reopen will reset the file position, but does not reset the cached position within the state object (`t->state_data.r.cached_pos`) that is used during writes to determine if an ""lseek"" is necessary.  So now the file pointer is back to the beginning, but the `cached_pos` likely reflects the end of the file, and as a result new data will clobber existing content.

But the bigger issue is that this code is essentially duplicate/specialized logic that only handles a corner case/exception so it is unlikely to be adequately tested.  ","bug, draco-rc4",https://github.com/nasa/CF/issues/131
CF should not require/hard-code use of the software bus for PDU transport,"The CF application creates a stream of data PDUs during operation, which are intended to be (somehow) transported to the remote node.  It is a point-to-point data flow.

Currently, CF assumes that the software bus will be used for this purpose.  Although this is the existing/de-facto data transport mechanism provided by the framework, it is not an ideal fit at all.  (Analogy of ""when all you have is a hammer, everything looks like a nail"" applies here).

- Software bus is broadcast (1:N) where CF data flows are 1:1 in nature
- Software bus has relatively small buffers, and is designed for minimizing latency and memory efficiency, not designed for bulk throughput
- Software bus does not provide any sort of back-pressure capability (e.g. if a sender like CF is sending PDUs faster than the receiver can process them).  Also note that it is not really practical for it to do so either, given it is a multicast design (1:N) - in a multicast, one would not stop sending just because one subscriber is not able to keep up.
- Similarly, by forwarding/bridging data PDUs from the OS network buffers to software bus Buffers, it effectively defeats any backpressure capabilities of the underlying network protocol.  For example, if a TCP connection were used for node-to-node transport over the physical network, this protocol will effectively throttle the sender to the rate that the receiver actually accepts the data through the use of ack's and sliding windows.  This is determined on the receive side by how deep the buffer is, inside the network stack.  By bridging the data to SB it essentially keeps this empty, and this gives a green-light for the sender to keep blasting data in.  This makes it difficult, if not impossible, to tune the system for good throughput - it means the sender must be artificially held off without any real feedback.
- Software bus is designed for commands and telemetry data, and all messages are assumed to be either a command or telemetry message.  Therefore, CF must add a fake telemetry header on the PDUs it generates, and other entities must add a fake command header on the PDUs it generates, in order to maintain this pattern (or else it will break software bus APIs).  This extra header is just unnecessary baggage, because SB is not designed for bulk data (i.e. this is where it is really contorting the problem domain to look more like a nail so the SB hammer will be able work with it).


While there may be valid reasons to use the Software Bus as a backhaul, it is certainly less than ideal and shouldn't be the only (hard-coded, forced) option.  There should be mode to use an I/O layer and go direct to network, which will solve many of the throughput and performance tuning issues, as well as just being a far cleaner design.

If anything using SB for bulk data backhaul should be the undesirable fallback option (if nothing else better exists) rather than the primary/only option.",enhancement,https://github.com/nasa/CF/issues/130
Support for segment metadata on File Data PDU,"According to CCSDS 727.0-B-5, table 5-14, a file data PDU may have segment metadata included.  This is indicated by a flag being set in the main PDU header, which means the data PDU has two extra fields as well as the specified number of segment metadata information blocks.

Currently CF does not even check for this bit or the presence of these fields.  

While it may not be required to support it, on the receive side CF should be required to check for and actively discard/reject packets for which these bits are set (and therefore it does not understand).  Instead, as it stands right now, it will read the extra fields as part of the offset, and generally corrupt the entire file, if this flag is set by a sender.  Hopefully the CRC check would detect the corruption, but it shouldn't do that to begin with.

Current code that receives the file data header only reads a single offset field, there is no provision to check for and handle the extra fields here, just the offset:

https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L1003

","bug, draco-rc1",https://github.com/nasa/CF/issues/129
File receive transactions are not canceled when a fault is detected,"Per requirement CF2002.1, CF should cancel the transaction when a fault is detected. Currently when CF detects a fault it will issue an event message an increment the fault counter. However it will continue to retry or closeout the transaction by issuing ACK or NAK PDUs. Some of this behavior appears to be consistent with CFDP Class 2 handling. Either the requirement needs updating or CF should comply and not attempt to continue the transaction when a fault is detected.","requirements, draco-rc2",https://github.com/nasa/CF/issues/128
Suspend request faults not detected,"Per requirement CF2002.1.2, a received suspend request fault should be detected. CF does not appear to detect this request and there is no associated fault counter for verification.","requirements, draco-rc2",https://github.com/nasa/CF/issues/127
PLAYBACK_DIR command does not validate parameters,Per requirements CF3001.6 and CF3001.7 CF should validate the channel number and class number parameter values. The PLAYBACK_DIR command does not validate the channel number. Invalid channel number are accepted and do not result in an incremented invalid counter or issuing an error event. The class number parameter is also not checked. Invalid class numbers are accepted as used during transaction processing.,draco-rc1,https://github.com/nasa/CF/issues/126
Command valid and rejected counters do not increment correctly,"For certain invalid commands CF will increment the valid counter. For certain valid commands CF will increment the invalid counter. The CF_TsnChanAction function does not appear to correctly interpret the return status from certain sub-functions that return the count of matched transactions. It assumes a non-zero return value is failure, but actually it is the count of transaction matches.

This can be seen with the following command opcodes: ABANDON, CANCEL, SUSPEND, RESUME

","bug, draco-rc1",https://github.com/nasa/CF/issues/125
TX FILE command causes system failure when engine is disabled,"When the CFDP engine is disabled and a TX FILE command is issued with valid or invalid parameter values, the system crashes.",invalid,https://github.com/nasa/CF/issues/124
TX FILE command does not validate channel parameter,"The TX FILE command does not validate the channel parameter value prior to execution. When specifying a channel value other than 0 or 1, the system crashes.","bug, draco-rc1",https://github.com/nasa/CF/issues/123
Configuration table does not contain all required items,"Per requirement CF4000.1.1, all specified values should be present in the configuration table. Currently, only some of the values are present. Values not specified in the requirement are also present in the table. For example, the history queue depth and channel name are specified but are not implemented.","requirements, draco-rc2",https://github.com/nasa/CF/issues/122
Housekeeping telemetry message does not contain all required values,"Per requirement CF6000, all specified values should be contained in the housekeeping packet. Currently only some of values are present. Values that are not specified in the requirement are also present.","requirements, draco-rc2",https://github.com/nasa/CF/issues/121
CFDP protocol timer configuration is not per channel (CF5002 and CF4000.1.1 failure),"Per requirement CF5002, protocol timer configuration should be per channel. Currently the values are applied to all channels.","bug, draco-rc2",https://github.com/nasa/CF/issues/120
Not all configuration table parameters are validated,"Per requirement CF7001.1.1, the following values must be validated in the configuration table:
a. Outgoing File Chunk Size 
b. Flight and Ground Entity Ids 
c. Message IDs 
d. CFDP Class 1 or 2

Currently, CF only validates item a. Outgoing File Chunk Size","requirements, draco-rc2",https://github.com/nasa/CF/issues/119
Not all invalid commands send an error event message,"Per requirement CF1004, all invalid commands should issue an error event message. For example, the TX_FILE command does not send the event message when certain parameters in the command are invalid. There are several other commands that need to be dispositioned for compliance.","bug, draco-rc4",https://github.com/nasa/CF/issues/118
Not all validated commands send an info event message,"Per requirement CF1003, validated commands should issue an info event message. This is not the case for most of the CF commands. The command counter increments but no event message is sent. This applies to the following command codes but there could be more:
ABANDON, CANCEL, ENABLE/DISABLE DEQUEUE, ENABLE/DISABLE ENGINE, ENABLE/DISABLE POLLDIR, FREEZE, THAW, SUSPEND, RESUME, PURGE, WRITE QUEUE","bug, draco-rc4",https://github.com/nasa/CF/issues/117
Decode procedures read header fields without checking length,"CF uses many variable-length fields in its header structure.  This requires aggressive buffer bounds checking at each point during decode, since a bad value (such as a bad ""length"" on an LV parameter) can throw off the decoder which may end up reading past the end of data and into undefined behavior territory.

CF really only sanity checks the length at a couple points here in the initial header receive:

Headers alone:
https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L874

Full PDU length field:
https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L886

However, note that even for the first check above (line 874) the code has already invoked CF_HeaderSize here:
https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L870

Notably, the `CF_HeaderSize()` function reads data from the packet header to compute header size.  Therefore this has already read some packet data before the length is even initially sanity checked.  If the input data was very short (such as from a MID misconfiguration) this would potentially segfault by immediately reading beyond the buffer.

Furthermore, every packet type that utilizes an LV or TLV style sub-fields (e.g. EOF, FIN, MD) needs to re-check the bounds at each of these entries.  For example in RecvMd it only confirms that the size is sufficient for fixed-size fields here:

https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L926

But later on when copying the LV data at these places, there is no check:
https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L939
https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L950-L951

These functions only check that the length is less than `CF_FILENAME_MAX_LEN` ... it does not check if the length has gone beyond the end of the input buffer.

__Recommendation__: Each and every step of encode + decode should confirm that the process is not reading or writing past the end of the buffer.  Particularly for variable length fields.

","bug, draco-rc1",https://github.com/nasa/CF/issues/116
"Fix #113, replace acknack count union","Using a union for the ack/nak counts is somewhat dangerous because undefined behavior will occur if accessed improperly.  In this case there is no need to have separate representations of the counter, they are both limited to the ""unit8"" range, so use a uint8.

Fixes #113","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/115
Simplify function names in unit test,"The function names in the unit test code are absurdly verbose.  Some of these unit test function names are 150+ characters in length (exceeding the clang-format line length limit on their own!).

This could be considered coding style, but this is so excessive that it warrants pruning them all back - Note that for portability, symbol names should ideally be kept under 32 significant characters.  This is per ISO STD C9899 section 5.2.4.1 - This says that an implementation is only required to recognize 31 significant chars on an external symbol name, or 63 on a local symbol name.  The fact that this goes so far beyond the c99-specified limits is a good reason to fix it.

Example: https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/unit-test/cf_cfdp_s_tests.c#L1224

Descriptive content on what the test is supposed to do belongs in comments, not within the function name itself.",unit-test,https://github.com/nasa/CF/issues/114
Odd union for ack/nak counters,"Union is declared here:
https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.h#L137-L141

This counter is then used in the TxS2/RxS2 state data structures.

It should not be necessary to create a union between the `unsigned` and `uint8` types for two reasons:
- `unsigned` is not a known/guaranteed range type, and the rollover point of this value is not guaranteed.  FSW discourages use of types which do not have fixed range unless for valid reasons (e.g. interfacing with library code that uses this type)
- `uint8` is simply the 8 LSBs of the value, there is no need to unionize in order to be able to count both modulo 256 as well as a longer type

In short, declaring a union like this has no benefit at all, but only introduces the possibility of accessing it wrong and getting undefined behavior.  Only downsides, no upside.

Recommendation is to replace with a normal `uint32` counter.",draco-rc1,https://github.com/nasa/CF/issues/113
Add contributing guide,Follow example in https://github.com/nasa/sample_app/blob/main/CONTRIBUTING.md ,duplicate,https://github.com/nasa/CF/issues/112
Function pointers should be typedef'ed,"CF uses function pointers to implement its state machines, but generally do not use a ""typedef"" for this, they are mostly declared inline.  For example:

https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L153-L154

https://github.com/nasa/CF/blob/a894069439316ef89ad7751f3a03036930158a07/fsw/src/cf_cfdp.c#L170

Not only is this hard to read, it does not facilitate or encourage any sort of uniformity/consistency in the dynamically-called functions.  No doubt this is likely a contributor to the fact that some functions take a pointer to the PDU header and some do not (see #90, #91).

Recommendation to fix:
- Determine a common set of arguments that all ""state handler"" functions are likely to need - from initial inspection, this is probably a pointer to the transaction structure, a pointer to the current PDU header, and a generic/opaque argument for any additional data (this may or may not be needed/used now, but future proofs the calling conventions in case state-specific data becomes needed)
- Declare a global-scope function pointer typedef that conforms to that spec (accepting the standard set of args)
- Convert all ""dispatcher"" code to use that typedef.

This will not only make the code more readable (function pointer syntax in C is particularly messy) but also encourage more uniformity on the arguments and patterns of state handler functions.  It will likely help solve the fact that some functions read their packet data from a global, while others read it from a passed-in pointer (and mixed within the same processing cycle!).
",draco-rc1,https://github.com/nasa/CF/issues/111
Function names differing only by trailing underscore,"CF has a number of cases where function names differ only in a trailing underscore(s), which is likely to violate some coding standards because they look too similar and can be easily confused.  An example offender is `CF_CFDP_TxFile()`, `CF_CFDP_TxFile_()`, and `CF_CFDP_TxFile__()`.

These internal helpers with only trailing underscores should be renamed to something more descriptive to make it clear what the intent of the function really is (e.g. in the example, the double-underscore version seems to be simply a wrapper to initialize the transaction structure ... seems to have nothing to do with sending files at all, really - just a generic initialization helper).",draco-rc1,https://github.com/nasa/CF/issues/110
Variables declared mid-function,"According to many coding standards (GSFC FSW included, AFAIK), variables should not be declared only at the top of functions, not in the middle.   However, CF has many cases of this.

Any variables declared mid-function should be moved to the top of the function to correct this.",enhancement,https://github.com/nasa/CF/issues/109
"Task: Evaluate unit test items marked ""TODO""","A simple search shows the text ""TODO"" currently appears 162 times in the CF source code, almost all of which are in unit test.  Future work items should be tracked in the issue list, not in the source code.

- If the intent is to actually do the work item, then there should be a github issue submitted to implement
- If it is determined that the work item is not necessary after all, then remove the TODO comment.
","unit-test, draco-rc2",https://github.com/nasa/CF/issues/108
Identify cases where value is computed and only used in Assert call,"In PR #81, rather than completely removing assertions in the code, this including a no-op function such that the condition is still evaluated, but not acted upon.  This was done because there are a few instances where a value was computed and used only for the assert, and no other reason.  If the assert is removed, then the value becomes unused and is flagged as such (i.e. compiler warning).

The fix in #81 was only an interim in order to get the code to compile and run.  The preferred fix would be to identify cases where a value is computed and only used in an assert, and remove them.  This is likely just a matter of removing the no-op function and fixing the warnings that come up.
","enhancement, draco-rc1",https://github.com/nasa/CF/issues/107
Task: Run unit tests through Valgrind,"A number of existing PRs address unit testing issues where structure objects are created on the stack, and values inside that object are used without any sort of `memset` or equivalent call to bring the object into a known/consistent state.  While many have been fixed, there are likely to be many more that remain.

The ""valgrind"" memcheck tool can be useful in finding these instances, as it will report if a value is read before it is written.

It would be helpful to run the unit tests under valgrind memcheck, and submit issues for the problems identified by this tool.",duplicate,https://github.com/nasa/CF/issues/106
"Remove use of ""dummy"" in variable names",,unit-test,https://github.com/nasa/CF/issues/105
Run through valgrind,"[CCB:2021-12-08](https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-December-08-2021) - APPROVED

- Run through valgrind

_Originally posted by @astrogeco in https://github.com/nasa/CF/issues/83#issuecomment-989011464_

@jphickey @skliper",wontfix,https://github.com/nasa/CF/issues/104
"Fix #67, remove use of bitfields in CF","Bit field behavior is platform-specific, bits are not specified to be in any particular order. Furthermore, unions of bitfields are likely undefined behavior. 

This removes the bitfields and replaces with normal fields.

Fixes #67

NOTE: The cost of doing this is slightly larger data size.  I checked the size of the structure before and after to quantify this - the ""flags"" structure grew by 16 bytes on my dev system (x86-64, gcc 11.2).

The net result is that the memory footprint of the CF global grows by 1600 bytes (due to 100 transactions in default config).  However, this is partially mitigated by a slight reduction in code size, of approximately 300 bytes.  It probably runs faster too (although I did not quantify that - not as easy to test) but the 300 bytes of extra code were obviously being executed every time these flags were read/written, that adds up.","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/103
Clean up commented-out functions in unit test,"The unit test contains a number of test sequences that are completely disabled/commented out.

For example:
https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/unit-test/cf_cfdp_r_tests.c#L1841-L1876

These serve no value, they are not testing anything, and only serve to clutter the code (it is not likely to work if un-commented, as it would be un-commented already if it did work).

Without a clear reason why these exist in the code, recommendation is to remove.  Version control serves the purpose of preserving historical code, if the concern is to keep a historical record of a previous test case (it does not need to stay in source file).
","unit-test, draco-rc4",https://github.com/nasa/CF/issues/102
"Fix #100, remove unused header ""cf_types.h""","The types defined in this file were not actually used in FSW.  This removes the file and the single inclusion of it.

Fixes #100.","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/101
"Unused header file ""cf_types.h""","This file exists under `fsw/platform_inc` and it defines two enumeration types.  Although the header itself is included in some files, the two enumerated types do not appear to be used anywhere.

Recommendation is to remove this file (dead code).
",draco-rc1,https://github.com/nasa/CF/issues/100
Support for alternate checksum type indicated in Metadata PDU,"Per the CCSDS blue book 727.0-B-5, section 5.2.5 - the metadata PDU has a 4-bit ""checksum type"" field.  The description says:

> Checksum algorithm identifier as registered in the SANA Checksum Types Registry.  
> Value zero indicates use of the legacy modular checksum.

It looks like CF only supports the legacy checksum, because it does not check this field at all, and there appears to be only one algorithm implemented.  However, this is not as significant as the large file size issue (#95) because it does not otherwise change the format, here the result will be a simple failure of the validation check if there is a mismatch between peers.

This is an interoperability concern.  If the intent is to only support legacy checksum, this should probably be documented in the release notes/version description document.  If the intent is for full compliance with CCSDS book 727.0-B-5, then this is missing.

Interim recommendation for FSW is to at least check this field on receipt of a Metadata PDU, and reject if the checksum type field is set to anything other than '0'.
",enhancement,https://github.com/nasa/CF/issues/99
"Fix #42, naming conventions and style compliance","Update identifier names across CF source code to match the CFS naming convention.  This convention is documented in the CFE framework, see https://github.com/nasa/cFE/blob/main/docs/cFS_IdentifierNamingConvention.md

Changes are mostly just search/replace.  Each file will be done separately, to keep the commit size within reason.  But these will not likely be easy to merge/split due to the number of lines affected so they need to be maintained as a series.

Fixes #42 ",draco-rc1,https://github.com/nasa/CF/pull/98
"Fix #96, remove unused CF_EndOfHeaderPtr function","Unused functions/dead code should not be included in FSW

Fixes #96","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/97
Unused function: CF_EndOfHeaderPtr,"This function is declared here:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp_pdu.h#L61

And defined here:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp_helpers.c#L191-L194

However, it does not appear to be called from anywhere in FSW - only called from unit test.  FSW just uses ""CF_HeaderSize"" and uses that value to advance a byte pointer.

Recommend removal of dead/unused code.",draco-rc1,https://github.com/nasa/CF/issues/96
"Support (or not) for ""Large"" file mode","The CFDP specification (specifically CCSDS 727.0-B-5, table 5-1) defines a ""Large File Flag"" bit.  When this bit is set in the PDU header, it means that all file sizes and offsets are 64 bits in size, rather than the historical 32 bits.

The CF implementation currently does not have this bit defined - the position it resides is defined as RESERVED in this code - and all file sizes are defined as a fixed 32 bits in the PDU structures, with no provisions to permit use of 64 bit values here.

The CF requirements also do not appear to require large file transfer to be supported.

However, even if large file is not supported by this implementation of CFDP, for interoperability reasons CF should at least recognize and check for this flag being set, and reject packets for which it is set.  Due to the fact that this flag changes the size and location of elements that follow, if it is ignored then one runs the risk of misinterpreting packets and triggering undefined behavior, which could corrupt the filesystem.
",draco-rc1,https://github.com/nasa/CF/issues/95
Instantiating globals in header files (FSW version),"The FSW has a macro called ""DECLARE_FIELD"" which creates a constant at global scope:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_field.h#L54-L55

The constant is scoped as ""static"" so it doesn't create a linker error, but it still creates a _separate_ instance of this global variable for each time the header is included.  

Confirmed by checking `cf.so` and observing that _each_ of these 8 fields occur in the binary file 8 times:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp_pdu.h#L73-L80

","bug, draco-rc1",https://github.com/nasa/CF/issues/94
Add format check and static-analysis workflows,"Add format check workflow to continuous integration to ensure new commits meet style guide

See 

https://github.com/nasa/sch_lab/blob/main/.github/workflows/format-check.yml","enhancement, continuous-integration, draco-rc1",https://github.com/nasa/CF/issues/93
"Should not use ""HK"" packet data elements as active/runtime control values","The `cf_hk_packet_t` values should be used strictly for reporting housekeeping status of CF out to external entities.  However, CF uses some values within this structure for some active control purposes as well. 

For example, the `hk.channel_hk[c].q_size` member is used for checking whether the soft limit is reached yet:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp.c#L1429

Note that these HK structures are currently marked as ""packed"" (see #41) so reading/writing from these structs is more costly than normal structures.  Furthermore, tracking depth using a single integer can be somewhat error prone (it is possible to ""miss"" an increment/decrement, and it will never self-correct).

",enhancement,https://github.com/nasa/CF/issues/92
Use of globals to store ephemeral / in-transit data,"CF stores its current working pointers in a global variable called `CF_AppData.engine`:

In particular:
`CF_AppData.engine.in.msg` has a pointer to the buffer last received from SB
`CF_AppData.engine.in.bytes_received` has the size of that buffer (and is actually updated during the course of processing)
`CF_AppData.engine.in.src` and `CF_AppData.engine.in.dst` have the data extracted from the header of the most recent message.
and so forth...

Importantly: __none of these values are supposed to be carried across wakeups__.  All values are reset in their entirety on every wakeup, and in fact with each channel.  All data is ephemeral and is only valid while the CFDP app is actively processing that packet.  As soon as processing of the current packet completes, the data is no longer valid.    When the wakeup cycle completes, only the `CF_AppData.engine.in.msg` is actively cleared.  All other fields will be left with whatever data was in them.

Also notable - there is a mixture of API calls where sometimes the pointer to the packet data is passed in directly, as it is here via the `ph` argument:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp_r.c#L436-L447

The call to `CF_CFDP_R_ProcessFd` also needs the packet data, but it does not pass it along.  Instead, this function grabs it from the global (theoretically the same packet):

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp_r.c#L221-L224

This inconsistency should be addressed.  If the intent is to _always_ store the current packet in a global, then code needing to access it should _always_ retrieve it from the global.  There should not be some APIs which pass a pointer to the structure, mixed with others that get it directly from the global (where they are supposed to be acting on the same data), as this creates the opportunity that they could diverge.  

For ephemeral data, it is fine to pre-allocate a buffer in a global to avoid dynamic allocation, but the pointer to this data should be passed consistently down through the API where needed.  This design allows for safer evolution, permitting the use of multiple buffers or even multiple threads should that become a requirement (e.g. create a child task per CFDP channel to make them more independent).
",enhancement,https://github.com/nasa/CF/issues/91
Inconsistent parameter passing (chan_num vs. channel pointer),"There does not seem to be any consistency in CF as to whether identifiers passed to functions are done in the form of a number (such as a channel number) where the function then gets the channel pointer internally by doing a table lookup, or by passing a pointer to the structure.  The CF contains both forms, and sometimes passes a pointer when the implementation really needed the number.

Example:
https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp.c#L1357-L1362

In this case the CF_ReceiveMessage was (for some reason) declared as accepting a pointer to the channel structure, but it really needs the channel number, so it does a bit of pointer arithmetic `(c - CF_AppData.engine.channels)` to get the number.

This type of pointer manipulation can be error prone, particularly if the code evolves in such a way where the `c` pointer might not be pointing to an entry in the table, this might produce an out-of-range channel number.  This can also happen during unit test where its common to pass in test values -- even if FSW never expects a value not within the table, its still possible to happen.  

Recommendation:  If channel numbers are generally always needed, pass only the channel number around.  It is safer because it can be more easily range-checked if necessary.

Alternative: Store the channel number inside the channel structure, so the FSW can more simply look it up and does not need to recompute it (avoids assumption that the pointer is pointing to a chan table entry).  This can avoid repetitiously looking up a chan_num to get the pointer, allowing direct pointers to be passed around.  But does cost a little memory and introduces the risk that something (e.g. a bug somewhere else) can overwrite or change the chan_num and make it wrong.
",enhancement,https://github.com/nasa/CF/issues/90
"Fix #88, consistent application target name","The application target should not have an ""app"" suffix.  Note that none of the other CFS apps have a suffix either, so this
makes CF consistent with that.

Also - this removes use of ""aux_source_directory"" - preference is to list the source files.

Fixes #88 ","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/89
"Target name inconsistencies - ""cf"" vs. ""cf_app""","The name patterns used by other CFS applications do not have an ""app"" suffix.  The ""sample_app"" is the only exception here, it only has this suffix to differentiate from the ""sample_lib"".

The build scripts do rely on some naming conventions - in particular the name of the directory should match the name of the main application target.  Since this repository is called ""CF"" (not CF_APP) and is cloned into a directory called ""cf"", the target name should also be ""cf"".  On the other hand, if the target is named ""cf_app"" this may problems with things like table builds and app installation, because the names in scripts won't match.

Recommendation is to change the cmake files to build this as a target named only `cf` and drop any `app` suffix.
","bug, draco-rc1",https://github.com/nasa/CF/issues/88
Consolidate repeated unit test setup code into helper functions,"In the CF unit tests, the ""preconditions"" for each test case are often very similar, but instead of being set up through some sort of helper function, the code is cut-and-pasted.  As a result, code to set up for particular preconditions may be repeated dozens of times in the unit test.

This incurs a significant maintenance cost when the FSW data structures need to change in any way (and they will, the FSW is not set in stone and will need to be maintained).  A small change to FSW can affect many different unit test cases.  This wouldn't be a big problem if the setup was in some sort of helper function, but since it is repeated, each affected case must be individually found and fixed.  As a result, the time cost of maintaining the unit test is extremely high.

To reduce this cost, common sequences of setup (such as setting up for an input PDU, an output PDU, etc) should be consolidated into a helper function, so only this function needs to change if the internal FSW structures change.",unit-test,https://github.com/nasa/CF/issues/87
Remove use of random numbers in coverage test,"The objective of a coverage test is to exercise the various paths in the implementation to ensure they do not trigger any undefined behavior.  It is not intended to be a ""fuzz test"" - although fuzz testing can be valuable, that is a separate test, typically done using a standard (non-stub) build via the public interface, where arbitrary/random input values are expected to be fully scrubbed and handled correctly - not for internal APIs that are expected to have more controlled inputs.

Currently the CF unit tests use lots of random values, and in particular may pass values that are not even within acceptable range, or do not make sense when paired with other inputs (e.g. a pointer and size where the size is a random value, exceeding the actual size of the object being pointed to).  This randomness does not really add value to the coverage test objective, if anything it detracts from it by (possibly) creating opportunities for test cases to follow different paths through the code under test with each invocation.

The unit tests for CF should be scrubbed to remove use of random values, replace with a single/specific value(s) that are guaranteed to follow the intended path through the code under test.
",unit-test,https://github.com/nasa/CF/issues/86
"Fix #55, resolve uninitialized pointer warning","Initialize the variables at the beginning of the function.  They will be set again in the loop, but this avoids the compiler warning.

Fixes #55","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/85
"Fix #54, pass actual size of buffer","The test must not pass a buffer size larger than the actual buffer, or else it will read beyond the end.

Fixes #54","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/84
"Fix #53, initialize local variables","Whenever the value of a local variable not directly set by the test code, make sure to set it to a value so it is
never seen as uninitialized.

Some of these are simply cases where the value is initialized within a loop.  Several lines of code triggered warnings that a
value may be used uninitialized, because the compiler logic might not recognize that the loop must run at least once.

In other cases a local buffer structure should be cleared/memset to 0 before being passed along.

Fixes #53","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/83
"Fix #52, do not use system assert in tests","Instead of using the system assert call, use UtAssert_Abort() to report critical conditions where continuation is not possible.

Note due to limitations of the UtAssert_Abort() function, this uses UtAssert_Failed() to report any runtime information, followed by
abort with a static/fixed message.

Fixes #52
","unit-test, CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/82
"Fix #51, do not assert when NDEBUG is set","This effectively ignores CF_Assert checks in the code when it is compiled with NDEBUG.  None of these checks should be needed after development.

In particular, this removes the use of the non-standard ""unlikely"" compiler extension that was used here.

Fixes #51","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/81
"Fix #50, do not instantiate globals in header file","Variables declared in headers should only be ""extern"", otherwise multiple instances will be defined.  This moves the instantiation
of variables to the most relevant C file.

Fixes #50 ","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/80
"Fix #49, aligned buffer for all test commands","Where ever a unit test is generating a buffer on the stack to send to a command processing function, this typically needs to be represented as a CFE_SB_Buffer_t* pointer, which by definition is supposed to be aligned to the worst-possible case, which may be greater than the alignment requirement of the actual command type.

To avoid warnings when converting between types, use a union to ensure the stack object meets the alignment requirements for CFE_SB_Buffer_t.

Furthermore, ensure all buffers instantiated on the stack are cleared (memset to 0) before operating on them or passing them to a CF function.

Fixes #49","unit-test, CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/79
"Fix #48, use proper CFE_SB_PipeID type","Correct the pipe ID assignment in UT to use the resourceID type.

This also uses a fixed/consistent value here, rather than a random value.  There is no real need to use a random value.

Fixes #48 ","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/78
"Fix #47, init data passed as const input","Any data structure passed to a function by pointer where that pointer is documented as input-only (const)
should always be initialized.  Some compilers will warn about this (even if the called function does not actively
dereference the pointer due to other constraints).

Fixes #47
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/77
"Fix #44, #46, instantiate properly sized and aligned buffers","For unit unit tests that invoke CF PDU processing functions on either input or output, ensure that the locally instantiated
""dummy"" PDU is both sized sufficiently and aligned correctly.

This removes quite a bit of questionable casting between the buffer types, and fixes a number of stack-smashing issues.

For completeness, this also clears (memset to 0) all instantiated buffers, before setting values in the test.  This ensures that the
entire message structure has predictable/repeatable content.

Fixes #44
Fixes #46 
","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/76
"Fix #73, correct status checks of CFE_SB_ReceiveBuffer","Check generically for CFE_SUCCESS, rather than a single error code, since there is more than one error.

This also corrects some minor coding standards items in cf_app.c - logic not really changed but improves readability.

Fixes #73","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/75
"Fix #72, correct allocation size for CFDP PDU","The call to CFE_SB_AllocateMessageBuffer needs to take into account the size of the extra SB header, not just the CF_MAX_PDU_SIZE.

Fixes #72","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/74
Incorrect check of status from CFE_SB_ReceiveBuffer(),"Checking of the status return from this CFE API call is not correct/sufficient:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp.c#L1365-L1369

This function may fail for a number of reasons, not limited to `CFE_SB_NO_MESSAGE`.

The preferred check should be:

    if (status != CFE_SUCCESS)","bug, draco-rc1",https://github.com/nasa/CF/issues/73
Size is insufficient in call to CFE_SB_AllocateMessageBuffer(),"The invocation of CFE_SB_AllocateMessageBuffer() here only allocates for CF PDU maximum size:

https://github.com/nasa/CF/blob/7b99b91cd50a347f8553fc68ea3b074ff0672251/fsw/src/cf_cfdp.c#L401

The returned buffer is only guaranteed to be large enough for a CFDP PDU itself, not the extra SB headers/encapsulation.  This needs to be a little larger to account the CFE SB headers.  Preferred call should be something more like:

    CF_AppData.engine.out.msg = CFE_SB_AllocateMessageBuffer(offsetof(pdu_s_msg_t, ph) + CF_MAX_PDU_SIZE);


","bug, draco-rc1",https://github.com/nasa/CF/issues/72
"Recieved software bus buffers must be treated as ""const""","The software bus is a broadcast mechanism and sends the same memory buffers to all subscribed applications/pipes.  The intent is that the data buffer should be `const` but for backward compatibility reasons the API does not enforce this.

However, CF actively writes to and modifies its received buffers, basically treating it as its own temporary storage location.  If this is combined in a system with another app that subscribes to CF traffic (e.g. Data store, DTN, or some other traffic monitor) then all other apps will see the same modifications to the data buffer, and this effectively creates a race condition / unpredictable behavior.

All received software bus buffers should be qualified as `const` in application code, and they should not be written to.  Apps should create their own buffers for temporary storage.
","bug, draco-rc1",https://github.com/nasa/CF/issues/71
"Fix #43, correct declaration of CF_CFDP_PlaybackDir_","This helper function was declared with fixed-length string arguments but in practice is used with other buffer lengths.  These arguments are changed to (more conventional) `const char *` instead.

Note that other cases where fixed-length string arguments are used are not changed by this commit, since it appears those are always used with a buffer of that length.

Fixes #43 ","CCB:Approved, draco-rc1",https://github.com/nasa/CF/pull/70
"Fix #43, correct declaration of CF_CFDP_PlaybackDir_","This helper function was declared with fixed-length string arguments but in practice is used with other buffer lengths.  These arguments are changed to (more conventional) `const char *` instead.

Note that other cases where fixed-length string arguments are used are not changed by this commit, since it appears those are always used with a buffer of that length.",duplicate,https://github.com/nasa/CF/pull/69
Should not use CFE_SB_GetUserDataLength (may be deprecated in future),"The SB function `CFE_SB_GetUserDataLength()` (along with the related user data pointer) are inherently flawed/unreliable, as they do not (and cannot) take into account any padding between the CFE_MSG cmd/tlm header and the start of the CFDP PDU in the current version of CFE (Caelum).

In the CF use case, structs are packed such that there really shouldn't be any padding here, but nonetheless, it would still be better to avoid using this function, and just subtract the offset of the PDU.  This code is in a better position to do this, because it knows the definition of the actual packet (`pdu_r_msg_t` or `pdu_s_msg_t`) and can compute it correctly with this information.  SB does not know this, and therefore cannot compute this correctly.
",draco-rc1,https://github.com/nasa/CF/issues/68
CF should not use bitfields,"Use of bitfields is discouraged by many coding standards (including GSFC) because the C standard does not specifically dictate how they are packed into the underlying integer type.  CF uses them in several internal structures, for example:

https://github.com/nasa/CF/blob/2ca7f978aea855ba4d6adc6e5370cbb2178129a5/fsw/src/cf_cfdp.h#L159-L165

If these truly need to be bit fields, then they should be implemented explicitly using shifts and masks.  However, initial inspection of the code would suggest they do not need to be bit fields, they can be made into separate fields.  While this may increase the memory footprint somewhat (struct is likely to be 5 bytes in the example instead of 4) this is probably a reasonable trade, because separate fields can be simply read/written directly rather than requiring a read-modify-write etc.  

Note that when using bit fields, the assembly instructions to do shifts and masks will still be generated by compiler, even though the C syntax ""looks"" simple - it is hiding it all.  So it may be considerably less efficient than accessing separate memory locations.  This of course depends on hardware architecture, caching, optimization by the compiler, etc but in general bitfields will always be less efficient, due to the extra shifting and masking.","bug, draco-rc1",https://github.com/nasa/CF/issues/67
CF_CheckTables Doesn't Handle CFE_TBL_INFO_UPDATED,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1804] CF_CheckTables Doesn't Handle CFE_TBL_INFO_UPDATED
_Originally submitted by_: Maldonado, Sergio E. (GSFC-580.0)[Arctic Slope Technical Services, Inc.] on Wed Nov 17 13:17:06 2021

_Original Description_:
The call to CFE\_TBL\_Manage in CF\_CheckTables doesn't account for the CFE\_TBL\_INFO\_UPDATED return status, only CFE\_SUCCESS. This results in a CF app run error and app shutdown after a new config table is loaded, validated, and activated.",draco-rc1,https://github.com/nasa/CF/issues/66
"CF ""cf_field.h"" macro cleanup","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1802] CF ""cf_field.h"" macro cleanup
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 11:13:49 2021

_Original Description_:
The ""cf\_field.h"" defines a macro called ""inc\_subfield"" .... thankfully this appears to not be used anywhere. Recommend removal.  
  
The other macros ""FIELD\_SET\_VAL"" and ""FIELD\_GET\_VAL"" have a couple recommended cleanups:  
  
1.They are multi-line/complex macros. Recommend to convert to inline functions instead - they only operate on ""uint8"" base values so this should not be a problem.  
2. They are then aliased to a shorthand ""FSV"" and ""FGV"", respectively. It appears the author simply didn't want to write the long names? Is there a real justification for having the same macro/function under two names? Only the shorthand is actually used in the code. Recommend to choose one name and use it.",draco-rc1,https://github.com/nasa/CF/issues/65
"CF ""MAX"" macro in cf_chunk.c should be an inline function","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1801] CF ""MAX"" macro in cf_chunk.c should be an inline function
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 10:57:57 2021

_Original Description_:
The ""MAX"" macro in cf\_chunk.c is often used as an example in C language textbooks of what \_not\_ to do because it evaluates its arguments more than once:  
  
#define MAX(a, b) (((a) > (b)) ? (a) : (b))  
  
This appears to be only used in two places in the code, neither of which appear to have side effects, but still recommend converting to an inline function to avoid any future issues. Worth noting that the arguments are also somewhat non-trivial so unnecessarily evaluating them twice might be a performance hit, even if its not a behavioral/correctness problem.",draco-rc1,https://github.com/nasa/CF/issues/64
CF odd use of macro in CF_CFDP_R2_CalcCrcChunk,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1800] CF odd use of macro in CF_CFDP_R2_CalcCrcChunk
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 10:25:30 2021

_Original Description_:
This function appears to define a local macro inline just to avoid writing the same text a few times over. Example:  
  
#define RXC t->state\_data.r.r2.rx\_crc\_calc\_bytes  
    if (!RXC)  
    {  
        CF\_CRC\_Start(&t->crc);  
    }  
  
The ""RXC"" is then used in a number of places later as well.  
  
Normally one would either declare a local pointer to the value, or just simply a local temp variable to hold the value during computation, updating the global at the end of the routine.  
  
The major issue with a macro like this is that it is not scoped to this function. The ""RXC"" string remains defined as a macro after this function, and may unexpectedly replace any other occurrence of this symbol later in the file, should it ever appear.  
",draco-rc1,https://github.com/nasa/CF/issues/63
CF should use larger cf_entity_id_t type as default,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1799] CF should use larger cf_entity_id_t type as default
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 10:10:01 2021

_Original Description_:
In the default configuration, the cf\_entity\_id\_t is defined as a uint8. While this is permissible per the spec, it means none of the ""variable size"" features implemented in the code will ever be used, because the size is always 1.  
  
In particular the ""CF\_GetMemcpySize"" function will only ever be called with a size of 1, which basically skips the loops in here.  
  
Although the test do call it with a bigger sizes (200!!?!) it does not seem to actually check the intended purpose of this routine, and the tests only appear to be included when ENDIAN==\_EL.  
",draco-rc1,https://github.com/nasa/CF/issues/62
CF should not depend on ENDIAN macro (_EL/_EB),"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1798] CF should not depend on ENDIAN macro (_EL/_EB)
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 09:52:19 2021

_Original Description_:
It is fairly trivial to write code that is endian-agnostic, or to check at runtime whether the processor should run these copy loops from high-to-low or low-to-high addresses. For example, in CF\_MemcpyToBE:  
  
#if ENDIAN == \_EL  
    dst += (dst\_size - 1);  
    while (dst\_size--)  
        *dst-- = *src++;  
#elif ENDIAN == \_EB  
    src += (src\_size - dst\_size);  
    while (dst\_size--)  
        *dst++ = *src++;  
#else  
  
This could be replaced by a simple loop with value shifts rather than making assumptions about memory byte ordering. This would be more correct and portable.  
  
The problem with any #ifdef blocks is that the disabled half of the block never gets executed or tested during the integration, until its ported to some other platform that requires that other block. There is also no guarantee or check that the EL/EB branch actually do the same thing as prescribed, they can diverge.  
",draco-rc1,https://github.com/nasa/CF/issues/61
CF has strange loop construct in CF_CFDP_CycleTx,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1797] CF has strange loop construct in CF_CFDP_CycleTx
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 09:34:12 2021

_Original Description_:
This is even noted in the comment that ""code reviewers won't like this"" ... which is certainly true. Not sure how this made it through review:  
  
            goto entry\_jump; /* code reviewers won't like this */  
            while (!args.ran\_one && c->qs[CF\_Q\_PEND])  
            {  
                /* didn't find anything on TXA to run, so pop one off Q\_PEND and try again.  
                 * Keep going until CF\_Q\_PEND is empty or something is run */  
                transaction\_t *t = container\_of(c->qs[CF\_Q\_PEND], transaction\_t, cl\_node);  
                cf\_move\_transaction(t, CF\_Q\_TXA);  
                /* args is ok, still { c, 0 } */  
            entry\_jump:  
                CF\_CList\_Traverse(c->qs[CF\_Q\_TXA], CF\_CFDP\_CycleTx\_, &args);  
            }  
  
Using a goto like this is somewhat dangerous as it goes from outside to inside a loop. Recommend to restructure the loop to use a more typical ""break"" statement.  
  
",draco-rc1,https://github.com/nasa/CF/issues/60
CF should use unions to simplify code and avoid improper casting,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1796] CF should use unions to simplify code and avoid improper casting
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 09:29:11 2021

_Original Description_:
In particular this applies to the ""msg"" member of the global, in the following structs:  
  
CF\_AppData.engine.out.msg  
CF\_AppData.engine.in.msg  
  
They are currently defined as a ""CFE\_SB\_Buffer\_t*"" type, which is what comes to/from SB calls. However, locally it is either a ""pdu\_s\_msg\_t"" or ""pdu\_r\_msg\_t"" (an extension) depending on direction. This is then cast inline at the point of use whenever the local type is required, e.g.  
  
    ret = &((pdu\_s\_msg\_t *)CF\_AppData.engine.out.msg)->ph;  
  
This is not only inelegant, but casting permits almost any type conversion, and offers no protection against a programmer mistake, such as if it was cast to a ""pdu\_r\_msg\_t*"" instead of ""pdu\_s\_msg\_t*"" .. that would compile just fine but cause odd memory corruption at runtime.  
  
Recommend to use a union for the ""msg"" member data type, i.e.   
  
union  
{  
    CFE\_SB\_Buffer\_t sb\_buf;  
    pdu\_r\_msg\_t pdu\_r\_msg;  
};  
  
Then by taking the address of either the ""sb\_buf"" or ""msg"" union member depending on what is being called and what it requires.  
  
In addition to being easier to read, this offers a layer of protection in that the data can only be converted into a limited set of types (union members).  
  
  
",enhancement,https://github.com/nasa/CF/issues/59
CF printing of fixed-width integers ,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1795] CF printing of fixed-width integers 
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 09:05:09 2021

_Original Description_:
When printing an integer, CF does not use consistent format specifiers and patterns. For example, in the CF\_CheckTables function:  
  
            CFE\_EVS\_SendEvent(CF\_EID\_ERR\_INIT\_TBL\_CHECK\_REL, CFE\_EVS\_EventType\_ERROR,  
                              ""CF: error in CFE\_TBL\_ReleaseAddress (check), returned 0x%08x"", status);  
  
""status"" is an int32 (actually should be CFE\_Status\_t, to be pedantic) but the format code %08x accepts an unsigned int value.  
  
On some platforms (e.g. RTEMS) the ""int32"" type is implemented as a ""long"" rather than an ""int"" so the implicit conversion from long -> unsigned int will trigger an error/warning.  
  
This is a portability problem. Whenever fixed-width integers are passed to system library printf-style calls, the caller needs to be explicitly convert the value to the intended type using a cast, e.g.  
  
    (unsigned int)status  
  
All printf-style calls (Events, syslog, etc) should be updated accordingly.  
",draco-rc1,https://github.com/nasa/CF/issues/58
"CF use of ""static const int32"" for return codes, not used anywhere","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1794] CF use of ""static const int32"" for return codes, not used anywhere
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 08:58:47 2021

_Original Description_:
In the table validation function ""CF\_ValidateConfigTable"" it has return values declared locally as a set of ""static const int32"" values:  
  
    static const int32 no\_ticks\_per\_second = -1;  
    static const int32 crc\_alignment = -2;  
    static const int32 outgoing\_chunk\_size = -3;  
  
Because they are local, these values are not available to code outside this function, so nothing can ever check for these status codes (and nothing ever does). The validation function caller only ever checks if the value is negative, and CF only checks if the TBL call returns something other than CFE\_SUCCESS.  
  
Since CF is already sending an event with the validation failure details, this error code is not necessary and not relevant. It should be remove and replaced with one of the generic cfe\_error constants.",enhancement,https://github.com/nasa/CF/issues/57
"CF Code Style - use of side-effects statements within ""if"" ","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1793] CF Code Style - use of side-effects statements within ""if"" 
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Wed Nov 17 08:55:11 2021

_Original Description_:
CF uses many statements such as this to check the status of a call and store in a local variable:  
  
    if ((status = CFE\_SB\_CreatePipe(&CF\_AppData.cmd\_pipe, CF\_PIPE\_DEPTH, CF\_PIPE\_NAME)) != CFE\_SUCCESS)  
  
Most other CFS code break this out into separate statements, i.e.  
  
   status = CFE\_SB\_CreatePipe(&CF\_AppData.cmd\_pipe, CF\_PIPE\_DEPTH, CF\_PIPE\_NAME)  
   if (status != CFE\_SUCCESS)  
  
I believe GSFC coding standards also prefer the latter form. Recommend updating these statements for readability.  
","enhancement, draco-rc2",https://github.com/nasa/CF/issues/56
"CF tests for ""CList"" functions pointers may be used uninitialized warnings","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1791] CF tests for ""CList"" functions pointers may be used uninitialized warnings
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 19:02:55 2021

_Original Description_:
In a number of the functions for the CList tests, the pointers are initialized only inside a for loop, with a random number of iterations.  
  
Because of this compiler may generate a warning that these may be used uninitialized, as it cannot guarantee that the loop will have set these. Although the code does have protection to ensure the loop count is never 0, the compiler does not always recognize this.  
  
Best practice is to initialize these pointers anyway - which will end up being a duplicate init, but it will squash the warning.  
  
Test functions affected are:  
Test\_CF\_CList\_InsertFront\_WhenNodeListIsGreaterThanTwoNodesAndTheyPointToCorrectNodesInsertNode  
Test\_CF\_CList\_InsertBack\_WhenNodeListIsGreaterThanTwoNodesAndTheyPointToCorrectNodesInsertNode  
Test\_CF\_ClistRemove\_RemovingHeadSetSecondNodeToHeadAndUpdateLastNode  
Test\_CF\_ClistRemove\_RemovingLastPointHeadAndNextToLastToEachOther  
Test\_CF\_ClistRemove\_RemovingAnyNodeHasNodesPrevAndNextPointToEachOther  
Test\_CF\_CList\_InsertAfter\_WhenAnyNodeSuccess\_after\_IsInsertedAfter\_start  
Test\_CF\_CList\_Traverse\_WhenListIsManyNodesErrorIn\_fn\_Call  
Test\_CF\_CList\_Traverse\_WhenListIsManyNodesSuccess  
  
",draco-rc1,https://github.com/nasa/CF/issues/55
CF test reads beyond end of buffer,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1790] CF test reads beyond end of buffer
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 18:56:38 2021

_Original Description_:
Inside the ""Test\_CF\_strnlen\_When\_end\_IsNot\_NULL\_ReturnLengthOfGiven\_s"" function, this calls ""CF\_strnlen()"" with a size of 8, where the actual buffer size is only 7.  
  
Recommend to call CF\_strnlen with a size of 7, which would be correct.",draco-rc1,https://github.com/nasa/CF/issues/54
CF tests use uninitialized values in buffers,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1789] CF tests use uninitialized values in buffers
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 18:54:24 2021

_Original Description_:
Many tests use a local stack buffer and pass a pointer to that buffer to a CF function. However, the tests often do not initialize the stack buffer, so the code under test may end up reading/using an uninitialized value as a result.  
  
All CF tests that create a ""dummy"" object on the stack should always at least memset that object to clear it, before calling the CF function, to achieve predictable/consistent behavior.  
  
For an example see Test\_CF\_CFDP\_FindTransactionBySequenceNumber\_DoNotFindTransaction, in this case the ""expected\_ptrs"" are initialized to refer to values inside ""dummy\_c"" when the dummy\_c object is not initialized.  
  
","unit-test, draco-rc1",https://github.com/nasa/CF/issues/53
"CF tests assume ""assert"" is available but do not include assert.h","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1788] CF tests assume ""assert"" is available but do not include assert.h
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 18:48:45 2021

_Original Description_:
Some CF test utility functions call ""assert"" on various items (e.g. Any\_file\_directive\_t\_Except).  
  
Several issues with this:  
- The ""assert.h"" system header was not included  
- The condition ""ERROR\_RETRIEVING\_ANY\_VALUE"" is a constant that is not even 0, so the assert will generally pass (it is boolean true).  
  
Recommendation is to use the UtAssert\_Abort() function instead.","bug, draco-rc1",https://github.com/nasa/CF/issues/52
"CF Assertions should not be compiled in when using ""release"" buildtype","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1787] CF Assertions should not be compiled in when using ""release"" buildtype
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 18:42:37 2021

_Original Description_:
See also #23 regarding the use of ""unlikely"" in this macro.  
  
When building with BUILDTYPE=release, the NDEBUG macro will be set. Typically this turns off assertions in the code, but in CF this is not the case, it redefines CF\_Assert to a local handler instead.  
  
Typically code will disable/compile-out assertion statements when in release mode, as they should never be triggered, so they just waste cycles.","bug, draco-rc1",https://github.com/nasa/CF/issues/51
CF test must not instantiate global variables in a header file,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1786] CF test must not instantiate global variables in a header file
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 17:37:09 2021

_Original Description_:
The 'cf\_test\_utils.h' instantiates (rather than simply declaring) a number of variables:  
  
Lines 45-46  
int32 result;  
uint16 EventID;  
  
Line 87:  
CFE\_MSG\_SetMsgTime\_context\_t context\_CFE\_MSG\_SetMsgTime;  
  
Line 93:  
CFE\_MSG\_GetMsgId\_context\_t context\_CFE\_MSG\_GetMsgId;  
  
Line 100  
CFE\_EVS\_SendEvent\_context\_t context\_CFE\_EVS\_SendEvent;  
  
Line 106:  
CFE\_MSG\_GetSize\_context\_t context\_CFE\_MSG\_GetSize;  
  
Line 382:  
type\_of\_context\_CF\_CList\_Traverse\_t type\_of\_context\_CF\_CList\_Traverse;  
  
Preferably, tests should be designed to not need global state (pass in the buffers as needed).   
  
If this is not possible, then for cases where these are actually accessed from multiple source files, the header should only declare the variable as ""extern"" and instantiate in the most appropriate .c file.   
  
Note for the case of CFE\_MSG\_GetSize -- this does not appear to be accessed from more than one C file so it likely does not even need to be ""extern"" - it can be just scoped to the one file that uses it.  
  
The tests fail to link due to this problem, because of the multiple definitions of these variable names.",draco-rc1,https://github.com/nasa/CF/issues/50
CF command tests need to use union when instantiating objects of type CFE_SB_Buffer_t,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1785] CF command tests need to use union when instantiating objects of type CFE_SB_Buffer_t
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 17:29:44 2021

_Original Description_:
This is similar in nature to previous issue described in #44 but in the ""cf\_cmd\_tests.c"" file.  
  
In this instance, command buffers are instantiated on the stack, but then cast to `CFE_SB_Buffer_t*`. The stack variables are not correctly aligned for this cast to be valid, and many compilers will (correctly) trigger a warning/error about this.  
  
Solution is to use a union to ensure alignment, where code like:  
  
    cf\_cmd\_unionargs\_t dummy\_msg;  
    CFE\_SB\_Buffer\_t* arg\_msg = (CFE\_SB\_Buffer\_t*)&dummy\_msg;  
  
Needs to become:  
  
    union  
    {  
        cf\_cmd\_unionargs\_t msg;  
        CFE\_SB\_Buffer\_t buf;  
    } dummy;  
  
such that &dummy.buf can serve as the pointer to pass to a function accepting a CFE\_SB\_Buffer\_t*.  
",draco-rc1,https://github.com/nasa/CF/issues/49
"CF test incorrect initialization of ""dummy_channel"" pipe ID","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1784] CF test incorrect initialization of ""dummy_channel"" pipe ID
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 17:22:51 2021

_Original Description_:
These three tests utilize a ""dummy\_channel"" structure:  
  
1. Test\_CF\_CFDP\_DisableEngine\_ClosesAllActiveFilesAndNoOpenPlaybackDirectoriesResetsAllQueueCountersDeletesPipe  
2. Test\_CF\_CFDP\_DisableEngine\_ClosesAllActiveFilesAndAnyOpenPlaybackDirectoriesResetsAllQueueCountersDeletesPipe  
3. Test\_CF\_CFDP\_DisableEngine\_ClosesAllActiveFilesAndAllOpenPlaybackDirectoriesResetsAllQueueCountersDeletesPipe  
  
These are calling `Any_uint8()` and assigning that value to to the `pipe` member of the structure. However on Caelum the Pipe IDs are actually 32 bits like other IDs (not 8) and when using strict ID types, this assignment will (correctly) fail with a compiler error as being invalid.  
  
The test needs to be explicit that it is intentionally using an integer as a made-up PipeID and needs to use the conversion macro do to so.",draco-rc1,https://github.com/nasa/CF/issues/48
CF test passing uninitialized buffer to input-only parameter,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1783] CF test passing uninitialized buffer to input-only parameter
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 17:16:22 2021

_Original Description_:
The test function Test\_CF\_CFDP\_CopyDataToLv\_FailsBecause\_len\_IsEqTo\_sizeof\_dest\_lv\_data\_Returns\_neg1 calls 'CF\_CFDP\_CopyDataToLv' but passes an uninitialized buffer (arg\_data) to the function when this parameter is documented as input only.  
  
The test passes because the value happens to be a ""don't-care"" in this case, so it does not affect the outcome/operation, but its bad practice to pass uninitialized data to an input, and also some compilers will generate a warning about this too.  
  
Interestingly, the call to 'AnyBufferOf\_uint8\_WithSize' which would have initialized this, is commented out. This may be a simple mistake - uncommenting this line will resolve the error.",draco-rc1,https://github.com/nasa/CF/issues/47
CF - Incorrect cast in test functions,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1782] CF - Incorrect cast in test functions
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 17:11:06 2021

_Original Description_:
Some CF test funtions incorrectly cast the pdu\_header\_t as a different type of header, for example inside 'Test\_CF\_CFDP\_RecvIdle\_CheckOf\_PDU\_HDR\_FLAGS\_TYPE\_Returns\_false\_But\_fdh\_directive\_code\_IsNot\_PDU\_METADATA\_SendEventAnd\_Increment\_recv\_error' it does this:  
  
    ((pdu\_file\_directive\_header\_t*)&dummy\_msg.pdu\_r\_msg.ph)->directive\_code = Any\_file\_directive\_t\_Except(PDU\_METADATA);  
  
The problem here is that the pdu\_file\_directive\_header\_t should \_follow\_ the standard pdu\_header\_t (ph), as it is an extension of this header, it does not replace this header. As a result this is not writing the value in the location expected.",draco-rc1,https://github.com/nasa/CF/issues/46
Some CF tests appear to use the buffer from the previous test,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1781] Some CF tests appear to use the buffer from the previous test
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 17:04:15 2021

_Original Description_:
The following CF test functions do not instantiate their own message buffer, but rather use the value contained in the global `CF_AppData.engine.in.msg`:  
  
1. Test\_CF\_CFDP\_R\_ProcessFd\_NoCrc\_cached\_pos\_NotEqTo\_offset\_And\_fret\_NotEqTo\_offset\_SendEventSetAndCountErrorReturn\_neg1  
2. Test\_CF\_CFDP\_R\_ProcessFd\_NoCrc\_fret\_NotEqTo\_bytes\_received\_Value\_SendEventSetAndCountErrorReturn\_neg1  
3. Test\_CF\_CFDP\_R\_ProcessFd\_NoCrc\_cached\_pos\_Gets\_bytes\_received\_Plus\_offset\_And\_data\_bytes\_IncreasesBy\_bytes\_received\_Return\_0  
4. Test\_CF\_CFDP\_R\_ProcessFd\_NoCrc\_cached\_pos\_NotEqTo\_offset\_But\_fret\_IsEqTo\_offset\_cached\_pos\_Gets\_bytes\_received\_Plus\_offset\_And\_data\_bytes\_IncreasesBy\_bytes\_received\_Return\_0  
  
This pointer likely points at a stack location from the \_previous\_ test function (whatever last set the msg pointer). Therefore the memory it points to at the time these tests execute is no longer valid. If anything writes to this memory, it will corrupt the local stack and potentially segfault/crash the test.",draco-rc1,https://github.com/nasa/CF/issues/45
CF unit tests use incorrect dummy buffers,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1780] CF unit tests use incorrect dummy buffers
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 16:59:31 2021

_Original Description_:
The CF unit tests contain an oft-repeated sequence to initialize a message pointer, for example:  
  
    /* Arrange */  
    pdu\_r\_msg\_t dummy\_ph;  
    int local\_result;  
  
    CF\_AppData.engine.in.msg = (CFE\_SB\_Buffer\_t*)&dummy\_ph;  
  
This sequence is not valid for two reasons:  
  
1. Because the `pdu_r_msg_t` instance is not aligned appropriately to be cast to a CFE\_SB\_Buffer\_t*. This invalid cast generates a warning on many compilers.  
  
2. Because the `pdu_r_msg_t` instance does not contain any additional data beyond the pdu\_header\_t value. Almost all CF calls will read beyond this header, depending on what the function call is, and some will write too. In the case of writing, this results in stack smashing, and the test may segfault/crash.  
  
Recommendation is to create a union for the message buffer, which can address the alignment problem and also be used to reserve some extra space for data beyond the header that many calls do access.  
  
It looks like this was done at one point in the ""pdu\_t"" type (in cfdp.h) but this was commented out. Recommend reinstating this and using it in unit tests as it will be more correct.",draco-rc1,https://github.com/nasa/CF/issues/44
CF_CFDP_PlaybackDir_ declared with fixed-length array parameters,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1779] CF_CFDP_PlaybackDir_ declared with fixed-length array parameters
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 16:49:50 2021

_Original Description_:
Typically, functions which accept a zero-terminated string are passed a pointer to the string.   
  
However, CF\_CFDP\_PlaybackDir\_ is declared as accepting a fixed-length array buffer, where the length is specified as CF\_FILENAME\_MAX\_LEN. For example:  
  
CF\_CFDP\_PlaybackDir\_(playback\_t *p, const char src\_filename[CF\_FILENAME\_MAX\_LEN], const char dst\_filename[CF\_FILENAME\_MAX\_LEN], cfdp\_class\_t cfdp\_class, uint8 keep, uint8 chan, uint8 priority, cf\_entity\_id\_t dest\_id)  
  
The problem with declaring it this way is that it implies the full length is required, and should \_only\_ be called with a fixed-length array of that size. Calling it with a shorter buffer, such as CF\_FILENAME\_MAX\_PATH, is invalid, even if the buffer is null terminated.  
  
In CF, this function is invoked from CF\_CFDP\_ProcessPollingDirectories, with a buffer of size CF\_FILENAME\_MAX\_PATH - which is not the same size. This results in an error/warning on compilers that check for this type of thing.  
  
Recommend to change this to a `const char *`",draco-rc1,https://github.com/nasa/CF/issues/43
CF Code Style and Coding standards compliance,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1778] CF Code Style and Coding standards compliance
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 16:40:53 2021

_Original Description_:
There are a number of style aspects of the CF source code that should be cleaned up to better comply with GSFC coding standards:  
  
- inconsistent indentation/spaces, brace/comment style, lots of lines with trailing whitespace.  
- inline variable instantiations  
- variables and other symbols at global scope not properly named  
  
Recommendations:  
- Make a one-time pass through ""clang-format"" using same rules as applied to CFE framework to clean up whitespace  
- All local variables should be declared at function start  
- All global variables should be qualified with the app prefix (e.g. `CF_`) and ideally all application state should be consolidated into a single top-level global variable (such that it can be memset to zero if/when application restarts).  
  
",draco-rc1,https://github.com/nasa/CF/issues/42
CF C99 compliance and use of packed structures,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1777] CF C99 compliance and use of packed structures
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 15:53:48 2021

_Original Description_:
CF currently uses the 'CF\_PACK` attribute on many of its structure types, which translates to the gcc ""\_\_attribute\_\_((packed))"" extension, without any provision for other compilers.   
  
This is a nonstandard/compiler-specific extension feature and makes the code NOT c99-compliant. Attempting to build this code with non-gcc compiler will likely fail as a result.  
  
Application source code should be limited to standard C99 features, and should not rely on vendor-specific extensions.",draco-rc1,https://github.com/nasa/CF/issues/41
CF_TraverseHistory string buffer handling,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1776] CF_TraverseHistory string buffer handling
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 14:22:27 2021

_Original Description_:
This issue was originally reported by IV&V, creating Jira issue to track its disposition and resolution.  
  
Function CF\_TraverseHistory() in cf\_utils.c in the CF App source code, writes some text to the buffer 'linebuf' on line 70. This buffer, however, is overwritten on line 74 before it is written to the file descriptor on line 75. It is questionable whether this was the desired behavior.",draco-rc1,https://github.com/nasa/CF/issues/40
Unreachable code block in check for CF_SEND_NO_MSG,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1775] Unreachable code block in check for CF_SEND_NO_MSG
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 14:19:04 2021

_Original Description_:
This issue was originally reported by IV&V, creating Jira issue to track its disposition and resolution.  
  
The code within the IF block in cf\_cfdp\_s.c in the CF App source code, namely lines 158-159 will never be executed. The IF block checks variable 'status' if it is CF\_SEND\_NO\_MSG on line 157, this variable originates from the return value of CF\_CFDP\_SendFd(), which can only return values CF\_SEND\_SUCCESS and CF\_SEND\_ERROR.","invalid, draco-rc2",https://github.com/nasa/CF/issues/39
Unreachable code block in check for CF_SEND_ERROR,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1774] Unreachable code block in check for CF_SEND_ERROR
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 14:16:04 2021

_Original Description_:
This issue was originally reported by IV&V, creating Jira issue to track its disposition and resolution.  
  
The code within the ELSE IF block in cf\_cfdp\_s.c in the CF App source code, namely lines 698-699 will never be executed. The ELSE IF block checks variable 'sret' if is is CF\_SEND\_ERROR on line 697, this value originates from the return value of CFDP\_S\_SendEof() which can only return values CF\_SEND\_SUCCESS and CF\_SEND\_NO\_MSG.","invalid, draco-rc2",https://github.com/nasa/CF/issues/38
CF use of STATIC_CAST without NULL checks,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1773] CF use of STATIC_CAST without NULL checks
_Originally submitted by_: Hickey, Joseph P. (GSFC-582.0)[VANTAGE SYSTEMS INC] on Tue Nov 16 14:05:37 2021

_Original Description_:
This issue was originally reported by IV&V, creating Jira issue to track its disposition and resolution.  
  
There are 7 instances in the CFS CF App source code in which the PDU hedaer pointer 'ph' can be a NULL value from a prior function call, and then it is passed into the function STATIC\_CAST() where it is eventually dereferenced without any checks.  
  
These calls to STATIC\_CAST() pass 'ph' to CF\_HeaderSize() which dereferences the pointer.  
  
cf\_cfdp.c line 476  
cf\_cfdp.c line 616  
cf\_cfdp.c line 654  
cf\_cfdp.c line 695  
cf\_cfdp\_r.c line 491  
cf\_cfdp\_s.c line 125  
cf\_cfdp.c line 1277  
  
  
",draco-rc1,https://github.com/nasa/CF/issues/37
CF Purge Queue Command Opcode Not Defined,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1765] CF Purge Queue Command Opcode Not Defined
_Originally submitted by_: Maldonado, Sergio E. (GSFC-580.0)[Arctic Slope Technical Services, Inc.] on Fri Oct 29 11:03:57 2021

_Original Description_:
The command opcode for Purge Queue is not present in the CF\_CMDS enumeration in cf\_msg.h. It should be present with a value of 21. The command dispatch table in cf\_cmd.c does have an entry for the command, as well as the implementation. Without the opcode defined, the command cannot be verified at the functional level. ","bug, draco-rc1",https://github.com/nasa/CF/issues/36
"CF method CF_HeaderSize returns an int, but it should be a size_t","**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1738] CF method CF_HeaderSize returns an int, but it should be a size_t
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Mon Oct  4 08:05:04 2021

_Original Description_:
The CF\_HeaderSize function determines the header size of the given pdu\_header\_t and returns this value. However, it is using an int type as the return, but it should never be able to be negative and it returns a sizeof value. There is no reason for it to be an int return type; initial unit tests did show that it can technically return values that are far too large and negative values that will crash the app.  
  
It should at a minimum be changed to a size\_t, but recommend something more like a uint8 as the practicality of it returning something larger than 255 is not likely to happen.",draco-rc1,https://github.com/nasa/CF/issues/35
CF method CF_CFDP_SendMd cannot get negative to return from CF_CFDP_CopyDataToLv,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1737] CF method CF_CFDP_SendMd cannot get negative to return from CF_CFDP_CopyDataToLv
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Wed Sep 29 16:44:26 2021

_Original Description_:
Two times a ret value from CF\_CFDP\_CopyDataToLv is checked to see if it is negative (<0) and neither call appears to every be able to return a negative value.  
  
Even the comments in the code allude to this fact:  
/* should not happen, since filename lengths are checked above */  
  
_(link removed)_  
  
_(link removed)_  
  
If this cannot happen then there is no need for the code to check for it? Unsure how to proceed with this, but it cannot be tested with unit tests.  
  
",draco-rc1,https://github.com/nasa/CF/issues/34
CF method CF_CFDP_ReceiveMessage will always segfault on line 1289,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1734] CF method CF_CFDP_ReceiveMessage will always segfault on line 1289
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Thu Sep 23 11:24:05 2021

_Original Description_:
Line 1289:  
++CF\_AppData.hk.channel\_hk[t->chan\_num].counters.recv.dropped;  
  
The only path to get into this line runs through an if(t) failure, which means t will always be NULL at this point. If it is changed to just chan\_num (a variable defined within the function) it will not fail. However, it is not known if that is the intent.   
  
There is a previous `if` block that redefines the variable t, from a transaction\_t* to a transaction\_t, but its scope is only within that `if` block. Thus when we reach line 1289, t is the transaction\_t* type and will always be NULL.  
  
_(link removed)_  
",draco-rc1,https://github.com/nasa/CF/issues/33
CF method CF_Assert call branches cannot be tested during unit testing,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1733] CF method CF_Assert call branches cannot be tested during unit testing
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Wed Sep 22 16:31:48 2021

_Original Description_:
Calls to CF\_Assert() cannot be stubbed by unit testing.  
The reasons:  
1. CF\_Assert uses assert which will kill the running process and subsequently the unit test runner when called by code under test.  
2. CF\_Assert can be stubbed  
    a. The stub cannot stop the return to the code under test.  
    b. The value required to cover the branch will cause a segfault upon return -- as the intent of CF\_Assert is to kill the app before it takes cFS with it.  
    c. There is currently no allowable way to have these branches tested during automated runs.  
    d. It is possible to run ad hoc tests to show the assert occurs, but the unit test will stop and not return to the original test code as the automated tests do.",draco-rc1,https://github.com/nasa/CF/issues/32
CF function CF_CFDP_ProcessPlaybackDirectory has an oddly bracketed block,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1732] CF function CF_CFDP_ProcessPlaybackDirectory has an oddly bracketed block
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Wed Sep 22 09:22:05 2021

_Original Description_:
In cfdp.c the function CF\_CFDP\_ProcessPlaybackDirectory has a block of code with no if/while et. Just a bracketed block of code that does not seem to have a reason to be bracketed.  
","enhancement, draco-rc4",https://github.com/nasa/CF/issues/31
CF function CF_CFDP_IsSender(transaction_t *ti) is odd one out because it uses ti,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1728] CF function CF_CFDP_IsSender(transaction_t *ti) is odd one out because it uses ti
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Tue Sep 14 10:58:59 2021

_Original Description_:
Every other function in cfdp.c that uses a transaction\_t* as an argument names it 't', but CF\_CFDP\_IsSender uses ti.","enhancement, good first issue, draco-rc4",https://github.com/nasa/CF/issues/30
CF CF_CFDP_MsgOutGet method double checks msg for NULL,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1727] CF CF_CFDP_MsgOutGet method double checks msg for NULL
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Mon Sep 13 09:59:14 2021

_Original Description_:
The function CF\_CFDP\_MsgOutGet in cf\_cfdp.c checks `if(!CF_AppData.engine.out.msg)` (line 356) as a top if block; however, it then checks it again as part of the if block   
`if(!CF_AppData.engine.out.msg&&((CF_AppData.config_table->chan[t->chan_num].sem_name[0]&&  
                    (OS_CountSemTimedWait(c->sem_id, 0)==OS_SUCCESS))||  
                    (!CF_AppData.config_table->chan[t->chan_num].sem_name[0])))`   
(starting on line 365 <- yep not a typo line 356 and 365, funny), but there is nothing in between that could change it.  
  
It would appear that this check in the second `if` is not required.",draco-rc1,https://github.com/nasa/CF/issues/29
CF method CF_CFDP_MsgOutGet returns 0x10 when it should be NULL,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1726] CF method CF_CFDP_MsgOutGet returns 0x10 when it should be NULL
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Fri Sep 10 14:28:59 2021

_Original Description_:
CF\_CFDP\_MsgOutGet has a path where it will return a 0x10 if the CF\_AppData.engine.out.msg is NULL. There are two if blocks after the msg NULL verification that if neither come back true the assignment on line 382 of cf\_cfdp.c:  
  
`ret = &((pdu_s_msg_t*)CF_AppData.engine.out.msg)->ph;`  
  
will make ret == 0x10, not NULL.  
The description of the return statement shows that this is not correct:  
  
`\retstmt Pointer to a pdu_header_t within a software bus buffer on success. Otherwise NULL.`",draco-rc1,https://github.com/nasa/CF/issues/28
CF method CF_CList_Remove appears to accept bad arguments,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1719] CF method CF_CList_Remove appears to accept bad arguments
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Thu Aug 26 13:23:38 2021

_Original Description_:
A bad node is passed to CF\_CList\_Remove, but it carries on unaware. This was found because branch 3 of `if((node->next==node)&&(node->prev==node))` can only be covered by a test that passes this situation, node->next == node, node->prev != node.  
  
The issue: should a single node enter, that has a node->next == node (meaning: pointing to itself), but a node->prev != node (meaning: NOT pointing to itself), the code continues as if this is a valid state. It may be impossible for a bad node to enter here, but that is not apparent at the unit test level for CF\_CList\_Remove nor is the Doxygen brief clear on that assumption.","enhancement, draco-rc2",https://github.com/nasa/CF/issues/27
Unused event ID,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1703] Unused event ID
_Originally submitted by_: Timmons, Elizabeth J. (GSFC-5820) on Tue Aug 10 20:51:47 2021

_Original Description_:
The event ID CF\_EID\_ERR\_PDU\_BAD\_RX\_MSG\_SIZE appears to be unused.","enhancement, draco-rc4",https://github.com/nasa/CF/issues/26
CF Purge command does not appear to be hooked in,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1701] CF Purge command does not appear to be hooked in
_Originally submitted by_: Timmons, Elizabeth J. (GSFC-5820) on Tue Aug 10 17:30:05 2021

_Original Description_:
CF comments make reference to a purge command, and functions exist for that command. However, the command code referenced in the comments (CF\_PURGE\_QUEUE\_CC) does not appear to exist and there does not appear to be an equivalent one.  
  
_(link removed)_  
  
_(link removed)_","enhancement, draco-rc1",https://github.com/nasa/CF/issues/25
CF method CF_CFDP_SendNak ph value can never be NULL,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1689] CF method CF_CFDP_SendNak ph value can never be NULL
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Fri Jul 30 17:27:32 2021

_Original Description_:
The CF\_CFDP\_SendNak function receives it's header from `&((pdu_s_msg_t*)CF_AppData.engine.out.msg)->ph` but even when CF\_AppData.engine.out.msg == NULL, ph is 0x10.   
  
The check if ph is NULL (`if (!ph)`) will never be able to fire.  
  
The check should be changed to see if CF\_AppData.engine.out.msg is NULL instead; this will ensure that if/when it is NULL a ph value of 0x10 will not be used.  
  
Note: This is probably not possible in the field, a ""nack"" should never be able to be returned without msg being populated, but in that case there is no reason to verify ph is not NULL. ",draco-rc1,https://github.com/nasa/CF/issues/24
Review use of 'unlikely',"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1236] Review use of 'unlikely'
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Fri Aug 28 17:49:32 2020

_Original Description_:
In cf\_assert.h the NDEBUG #ifdef runs in 'BUILDTYPE=release' mode which replaces CF\_Assert with  
    if(unlikely((x))) CF\_HandleAssert(\_\_FILE\_\_, \_\_LINE\_\_);  
This line is incorrect, because the other path uses  
    assert(x)  
However, assert does nothing when true, the unlikely path causes assert when true. This needs updated with (!x)  
  
Also, there are calls to CF\_Assert using ""short-circuit"" Boolean statements, these do not ""short-circuit"" because of the unlikely.  
  
unlikely is most commonly defined as:  
    \_\_builtin\_expect(!!(x), 0)",draco-rc1,https://github.com/nasa/CF/issues/23
CF-3.0 having a problem building unit tests with unlikely((x)),"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1217] CF-3.0 having a problem building unit tests with unlikely((x))
_Originally submitted by_: Gibson, Alan S. (GSFC-5870) on Mon Aug 10 15:05:16 2020

_Original Description_:
When building with   
`make ENABLE_UNIT_TESTS=TRUE SIMULATION=native`  
and   
`NDEBUG` defined  
I get a `undefined reference unlikely` error.  
Determine if we need to keep `unlikely` and if so, what needs done to get it to build with the unit tests.",draco-rc1,https://github.com/nasa/CF/issues/22
Add transaction watchpoint concept for transaction complete notification,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1211] transaction watchpoint
_Originally submitted by_: Seeger, Steven D. (GSFC-582.0)[Embedded Flight Systems, Inc] on Thu Aug  6 11:02:12 2020

_Original Description_:
It might be useful for operators to have a concept of transaction watchpoints. This could be implemented with the spare 16-bit per-channel register (or the spare 8-bit per-channel) coupled with a ground command specifying a bit in that register to be set when a transaction is complete. The benefit here is a proc could request a watchpoint and wait for the bit to be set when the file is done. This is more useful than a file counter because polling directories being active could skew the file counter.",enhancement,https://github.com/nasa/CF/issues/21
CF Doxygen Documentation Needs Updates,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1209] CF Doxygen Documentation Needs Updates
_Originally submitted by_: Timmons, Elizabeth J. (GSFC-5820) on Wed Jul 29 14:54:40 2020

_Original Description_:
The CF doxygen documentation is inaccurate for v3.0. ",draco-rc1,https://github.com/nasa/CF/issues/20
Investigate whether TX and RX PDU sizes need to be different,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1196] Investigate whether TX and RX PDU sizes need to be different
_Originally submitted by_: Timmons, Elizabeth J. (GSFC-5820) on Mon Jul 20 13:37:06 2020

_Original Description_:
Need to investigate uses cases where TX and RX PDU sizes need to be different. Need to investigate the impact of making a change to allow that.  
",enhancement,https://github.com/nasa/CF/issues/19
Improve commenting throughout CF v3.0,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1194] Improve commenting throughout CF v3.0
_Originally submitted by_: Timmons, Elizabeth J. (GSFC-5820) on Mon Jul 20 13:32:23 2020

_Original Description_:
CF v3.0 needs improved commenting throughout. Specifically:  
  
- file comments in every file describing the purpose of the file  
- explanations and limits for all configuration parameters  
- ensure that all comments are accurate","docs, draco-rc4",https://github.com/nasa/CF/issues/18
Cleanup CF v3.0 Perf ID handling,"**This issue was imported from the GSFC issue tracking system**

_Imported from_: [GSFCCFS-1190] Cleanup CF v3.0 Perf ID handling
_Originally submitted by_: Timmons, Elizabeth J. (GSFC-5820) on Fri Jul 17 13:22:51 2020

_Original Description_:
Encompasses several findings from the CF v3.0 code review:  
  
- Remove unused perf id CF\_DIRREAD\_PERF\_ID  
- Determine whether perf ids CF\_PDU\_RCVD\_PERF\_ID and CF\_VCxPDUSENT\_PERF\_ID should be added (currently used in stakeholder)  
- Ensure that CFE\_ES\_PerfLogExit is called when the app exits","enhancement, draco-rc1",https://github.com/nasa/CF/issues/17
"Fix #15, initial pass through the format tool used by CFE framework","This commit adjusts all white space in the CF source code to adhere to the rules applied to the other CFE framework components.

This affects many lines, but only changes white space in the source files.  No functionality changes are included here.

Fixes #15 ",draco-rc1,https://github.com/nasa/CF/pull/16
CF source code needs format/whitespace scrub,"In the CF-3.0.0 release candidate, the source code files have many formatting discrepancies from the CFE/CFS recommendations.

Before continuing development with other fixes, the source should be sent through the ""clang-format"" tool using the same rules as used for the CFE framework.  This will establish a baseline for fixing other issues reported by CF users thus far.

Since this is likely to affect many lines, it must be done as an isolated commit, before any other code changes are done, as it will not be easy to merge/rebase with this type of change.",draco-rc1,https://github.com/nasa/CF/issues/15
SUMMARY: update with various fixes for stakeholders,"This summary commit includes a number of minor updates/fixes from initial users/stakeholders of the CF-3.0.0 release candidate.

This PR is intended to bring the public github repo into sync with the version of CF that has been deployed by some internal users.  It includes a number of minor updates from the original CF-3.0 open source release.",draco-rc1,https://github.com/nasa/CF/pull/14
compile Errors with latest cFS,"It appears that the changes made in https://github.com/nasa/cFE/commit/4652c0d8ed1e5ad34380e345b5e0eb9e94fff68f result in CF no longer compiling due to depreciated code being removed.

I am working on altering the CF source to get it to compile with these changes, but wanted to ensure that this was not already in progress.",draco-rc1,https://github.com/nasa/CF/issues/13
Playback Directory Command - timing bug,"Related to issue #11 

The playback queue is starting to process a new file after the End-of-File (EOF) PDU is sent for an old transaction, while the old transaction isn’t truly finished (and the ‘active transactions’ count decremented) until the ACK-FIN PDU is received. Due to this, one or more transactions can still be active waiting for their ACK-FIN PDU to be received while the playback queue starts a new transaction. If I had to guess, this is a relic of class1 (unacknowledged) transactions which end after the EOF PDU is sent. 

This issue must have gone unnoticed for so long because in most cases it is hidden, as long as your files are reasonably large and your maximum number of simultaneous transactions is greater than 1 (ours is 7). This is because as long as the file is reasonably large, it will take more time to downlink the new file than it will take for the ACK-FIN from the old transaction to be received and fully closed out. Since the playback queue only transfers one file at a time, you’ll only have a maximum of two transactions active at once.

With maximum number of simultaneous transactions set to 7, if you try to download 8 small files via the playback directory command we encounter the issue (and is the case which found this bug in the first place). This is because the files are so small that 7 separate files can send all of their data and hit the ‘EOF’ phase before the first transaction receives its ‘ACK-FIN’ and fully closes out.

Even if the files are quite large, if I set the maximum number of simultaneous transactions to 1 the issue is encountered every time and the second file will fail to download. This is because a new transaction always attempts to start while the old transaction was between the ‘EOF Sent’ and ‘ACK-FIN received’ phases. 

Would it be valuable for me to submit a bug fix to this repository? Unsure if this repository is monitored. 

","bug, draco-rc2",https://github.com/nasa/CF/issues/12
Use of Playback Directory command,"I'd expect the Playback Directory command to function like the following. Assume 7 is the maximum number of transactions that can be occurring simultaneously and that the directory we're attempting to playback has 10 files in it:

- All of the files in the directory get queued.
- Transactions are started for 7 files, at which point the maximum number of transactions is reached.
- Once 1 transaction finishes, CF reads from the queue and starts a transaction for the 8th file.
- Continue until the entire directory has been downlinked.

However, during our testing the command is functioning like the following:
- All of the files in the directory get queued.
- Transactions are successfully started for 7 files, at which point the maximum number of transactions is reached.
- CF also attempts to start transactions for the remaining 3 files at the same time, but they error out since we're at the maximum number of transactions. The remaining files are never downlinked. 

I'm not sure if we're misunderstanding how the command is intended to be used or if there is a bug.","question, docs",https://github.com/nasa/CF/issues/11
Length error for little-endian,"https://github.com/nasa/CF/blob/cbda7b9cad82e0d37cd0080e21f79b18eb571b17/fsw/src/cf_app.c#L1023

The line above works for big-endian systems, however not consistent with the line below for little-endian systems. `pdu->length` calculated and checked below line w.r.t. big-endian, but the same calculation and check done above w.r.t. endianness of system. Running the app in a little-endian system results in length error for check `if(CF_AppData.RawPduInputBuf.length > CF_INCOMING_PDU_BUF_SIZE) 
` after the line above.
https://github.com/nasa/CF/blob/cbda7b9cad82e0d37cd0080e21f79b18eb571b17/fsw/src/PRI/pdu.c#L420

**SOLUTION:**

cf_app.c#L1023:

Previous Version:
```
CF_AppData.RawPduInputBuf.length = PduHdrPtr->PDataLen + PduHdrBytes; 
```
Next Version:
```
CF_AppData.RawPduInputBuf.length = MAKE_BIG16(PduHdrPtr->PDataLen) + PduHdrBytes;
```",obsolete,https://github.com/nasa/CF/issues/10
Null pointer dereference in cf_callbacks.c,"https://github.com/nasa/CF/blob/cbda7b9cad82e0d37cd0080e21f79b18eb571b17/fsw/src/cf_callbacks.c#L397

After the `QueueEntryPtr != NULL` check, the code continues with the check  `if (QueueEntryPtr->Preserve == CF_DELETE_FILE)`. If `QueueEntryPtr` is `null`, accessing `QueueEntryPtr->Preserve` causes etiher exception or invalid check.
```
if (Chan != `CF_ERROR)
{
	CF_AppData.Hk.Chan[Chan].SuccessCounter++;
	QueueEntryPtr = CF_FindPbNodeByTransNum(Chan, CF_PB_ACTIVEQ, TransInfo.trans.number);
	if (QueueEntryPtr != NULL)
	{
		QueueEntryPtr->Status = CF_STAT_SUCCESS;
	}
}

if (QueueEntryPtr->Preserve == CF_DELETE_FILE)
{
	OS_remove(&TransInfo.md.source_file_name[0]);
}  
```
",obsolete,https://github.com/nasa/CF/issues/9
Failures in sending files from cFS and ground software," Hi,

About 3 months ago, I asked the same question, but I didn't get any responses.
So I am asking the question again.  

I have been using CF app's version 6.8.
I understand that NASA is going to release an updated version of CF app with major changes sometime next year, but I need to resolve the following issue soon.

Whenever I tried to send a file (size of 200 bytes) from cFS (version 6.8) to ground software (cosmos or yamcs), I can send only 3 times.   Here's example with sending a small size file (it has 27 bytes) 4 times in a row.   
At the 4th try, cFS prints out ""started"", but no ""success"" message after that.

EVS Port1 43/1/CF 103: Outgoing trans started 0.24_1,src /cf/test.txt
EVS Port1 43/1/CF 21: Outgoing trans success 0.24_1,src /cf/test.txt

EVS Port1 43/1/CF 103: Outgoing trans started 0.24_2,src /cf/test.txt
EVS Port1 43/1/CF 21: Outgoing trans success 0.24_2,src /cf/test.txt

EVS Port1 43/1/CF 103: Outgoing trans started 0.24_3,src /cf/test.txt
EVS Port1 43/1/CF 21: Outgoing trans success 0.24_3,src /cf/test.txt

EVS Port1 43/1/CF 103: Outgoing trans started 0.24_4,src /cf/test.txt
EVS Port1 43/1/CF 80: CF:Playback File Cmd Error, File is Already Pending or Active:/cf/test.txt

* If you try to send a file bigger than 500 bytes or so, this problem can occur at the second or 3rd try.
* When I try to send a file with more than 1600 bytes to ground software, it doesn't work at all.
* I experimented with a file that has 1600 bytes.   cFS was able to send the file to ground software, but with a file with 1601 bytes, it couldn't.   Also after sending the 1600 byte file, cFS can't send another file regardless of the file size.

Sending a file from ground software to cFS works fine, but cFS can't finish sending a file from cFS to ground software after that.
Overall, it is hard to predict what cFS would do when it comes to sending a file to ground software.

Did anyone have the same issue as me?

Thanks,
Harry Kim",obsolete,https://github.com/nasa/CF/issues/8
File size limitation when sending files from cFS and ground software,"Whenever I tried to send a file (size of 200 bytes) from cFS (version 6.8) to ground software (cosmos or yamcs), I can send only 3 times.  At the 4th try, cFS prints out ""started"", but no ""success"" message after that.   

EVS Port1 43/1/CF 103: Outgoing trans started 0.24_2,src /cf/cf_test.txt
EVS Port1 43/1/CF 21: Outgoing trans success 0.24_2,src /cf/cf_test.txt
EVS Port1 43/1/CF 103: Outgoing trans started 0.24_1,src /cf/cf_test.txt
EVS Port1 43/1/CF 80: CF:Playback File Cmd Error, File is Already Pending or Active:/cf/cf_test.txt

If you try to send a file bigger than 500 bytes or so, this problem can occur at the second or 3rd try.

Also when I try to send a file with more than 1600 bytes to ground software, it doesn't work at all.
I experimented with a file that has 1600 bytes and cFS was able to finish the job, but with a file with 1601 bytes, it couldn't finish the job.  Also after sending the 1600 byte file, cFS can't send another file regardless of the file size.

Sending a file from ground software to cFS works fine, but cFS can't finish sending a file from cFS to ground software after that.
Overall, it is hard to predict what cFS would do when it comes to sending a file to ground software.

Did anyone have the same issue as me?",obsolete,https://github.com/nasa/CF/issues/7
request for configurable transaction packet MID ,"In our use case, we want to use CFDP to send files from CPU1 to CPU2 and from CPU1 to Ground. The two CPUs are connected via SBN, and the connection between CPU1 and the ground station is through TO and CI.

I had thought to use the MID of CFDP packets to filter which packets are let through TO and SBN. By setting up CF with two input channels and two output channels, each using separate MIDs, I could set TO to only listen for packets from one channel and SBN to listen for packets on the other CF channel.

It looks like all CFDP transfer packets use the CF_TRANS_TLM_MID, and that’s not configurable. Would it be possible to add a configuration value in cf_cfgtable to set MID for output channels, similar to what is done for the input channels?

Alternatively, is there a more standard way to do what I'm attempting?
","enhancement, draco-rc1",https://github.com/nasa/CF/issues/6
sending a text file from cosmos to cfs has failed due to size mismatch.,"
Hello,

To test if I can send a simple text file from cosmos to cfs,
I used a text file that contains one sentence ""This is a test file.""
I had the following error while testing with cf v6.8 although I didn't have this error with v6.7.

EVS Port1 43/1/CF 18: cfdp_engine: file size mismatch -- 8675833937941 / 4152025208 (eof/received)).

This error was from apps/cf/fsw/src/PRI/aaa.c line 388

boolean aaa__is_file_size_valid (MACHINE *m)
   {
     TRANS_STATUS      *mp = &(m->publik);   /* useful shorthand */
   /*------------------------------------------------------------*/
     if (mp->received_file_size > m->eof.file_size)
       {
         e_msg__ (""cfdp_engine: file size mismatch -- %Lu / %lu ""
                  ""(eof/received))\n"",
                  m->eof.file_size, mp->received_file_size);
         return (NO);
       }
     return (YES);
   }

Any idea why this error occurred?
Thanks in advance.
",obsolete,https://github.com/nasa/CF/issues/5
CF is incompatible with recent OSAL API changes,"The cf_playback.c file calls the OS_opendir, OS_readdir, and OS_closedir functions, which were removed in favor of the OS_DirectoryOpen, OS_DirectoryRead, and OS_DirectoryClose functions.  This is regarding OSAL 5.0.3-bv (git tag).  I expect to see other issues as I make fixes to pass unit testing.  I will post them here.",obsolete,https://github.com/nasa/CF/issues/4
Buffer overflow in machine_list.c,"```
static boolean m_is_this_slot_in_use [MAX_CONCURRENT_TRANSACTIONS];

...

  i = 0;
  while (m_is_this_slot_in_use[i] && (i < MAX_CONCURRENT_TRANSACTIONS))
    i ++;
```

Assume MAX_CONCURRENT_TRANSACTIONS = 2

On the first iteration of the loop, m_is_this_slot_in_use[i] will access array index 0, on the second pass array index 1, and on the third pass the out-of-bounds index 2, causing a buffer overflow.

The following simple fix will short-circuit the while loop, preventing the buffer overflow:

`  while ((i < MAX_CONCURRENT_TRANSACTIONS)  && m_is_this_slot_in_use[i])`
",obsolete,https://github.com/nasa/CF/issues/3
CFDP setup between two cFS projects,"Hi,
I have setup two cFS projects on a Linux VM with CF running on each one with CI and TO to test file transfer between the two projects as shown below:
![cfdp_issue_diagram](https://user-images.githubusercontent.com/59025127/71106105-57c2b800-2184-11ea-8edc-3fbf2a180174.gif)
When I try to transfer file /cf/cf.so from one side to the other (destination file name /cf/cf_sent.so) I get the following result (file sent from ppesim-cfs to pdpmep-fsw):
![CFDP file transfer attempt](https://user-images.githubusercontent.com/59025127/71106049-3e217080-2184-11ea-9e60-50dcb0272359.PNG)
When I change the code at cf_app.c line 1030 from:
![cf_app_c_Ln1030_changed](https://user-images.githubusercontent.com/59025127/71106055-411c6100-2184-11ea-8dbb-732cab71f6f8.PNG)
To:
![cf_app_c_Ln1030](https://user-images.githubusercontent.com/59025127/71106058-424d8e00-2184-11ea-8c41-c6bfcab791c4.PNG)
The received packet's length is shown to be correct but the file still doesn't make it across.
If I attempt to run the unchange CF code between the Linux VM (little endian machine) and a powerPC (big endian) I get a segmentation fault (most likely because the powerPC is running the cFS project as root which I confirmed by running the receiving end of the VM version as sudo and I got a segmentation fault as well).

To start, is there anything I am missing with setting up two CF applications this way? Or is there any more information you might need me to provide?

Thanks,
Ashraf.







",obsolete,https://github.com/nasa/CF/issues/2
Doesn't work by default with OSAL 4.2.1.0 official release,"I'm using the rc-2.2.2 branch with cfe 6.6 and OSAL 4.2.1.0. It doesn't build without the following changes:

1. fsw/src/cf_callbacks.c:1140 - st_size should be FileSize
2. fsw/src/cf_playback.c - all references to os_dirent_t's d_name entry should be changed to FileName.",question,https://github.com/nasa/CF/issues/1
