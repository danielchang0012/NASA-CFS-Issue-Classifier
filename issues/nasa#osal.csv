Title,Body,Labels,URL
"Fix #1402, Fixes errors in IC Bundle workflow file","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Addresses issue #1402.

**Testing performed**
Generated IC branch in fork.

**Expected behavior changes**
No additional ""#"" is placed in front of ""#Changelog"" in Changelog.md
No additional ""#"" is placed in front of ""#define OS_BUILD_NUMBER ..."" in src/os/inc/osapi-version.h
Additional occurrences of the string ""Changelog"" are not replaced in the Changelog.md file

**System(s) tested on**
GitHub

**Contributor Info - All information REQUIRED for consideration of pull request**
Dylan Z. Baker/NASA GSFC",,https://github.com/nasa/osal/pull/1403
Formatting Issues with ICBundle Workflow,"**Describe the bug**
Similar to nasa/cFE#2419. There are some small formatting issues that should be corrected in the changelog/version.h updates made by the ICBundle workflow:
1. An additional ""#"" is placed in front of ""#Changelog"" in Changelog.md
2. An additional ""#"" is placed in front of ""#define OS_BUILD_NUMBER ..."" in src/os/inc/osapi-version.h
3. Additional occurrences of the string ""Changelog"" are replaced in the Changelog.md file

**To Reproduce**
Steps to reproduce the behavior:
1. Push a code change to a user-owned feature branch
2. Submit a pull request for that code change
3. Go to the ""Actions"" tab in GitHub and run the ""Integration Candidate Bundle Generation"" workflow with the PR number as the input argument for the field labeled ""The pull request numbers to include (Comma separated):""
4. Wait for the workflow to complete
5. Inspect the newly updated/generated ""integration-candidate branch""
6. Observe the changes made to the Changelog.md and src/os/inc/osapi-version.h files by the workflow

**Expected behavior**
1. No additional ""#"" is placed in front of ""#Changelog"" in Changelog.md
2. No additional ""#"" is placed in front of ""#define OS_BUILD_NUMBER ..."" in src/os/inc/osapi-version.h
3. Additional occurrences of the string ""Changelog"" are not replaced in the Changelog.md file

**System observed on:**
GitHub

**Reporter Info**
Dylan Z. Baker/NASA GSFC",,https://github.com/nasa/osal/issues/1402
Message Receive timeout if system clock changes?,"**Is your feature request related to a problem? Please describe.**

### Discussed in https://github.com/nasa/cFS/discussions/691

<div type='discussions-op-text'>

<sup>Originally posted by **irowebbn** August  1, 2023</sup>
The cFE call for receiving a software bus message,  `CFE_SB_ReceiveBuffer`, uses the `OS_QueueGet` call to manage the OS-level interface for the message passing. Unlike the RTEMS and VxWorks implementations, the POSIX implementation of `OS_QueueGet` [uses an absolute timestamp from `CLOCK_REALTIME`](https://github.com/nasa/osal/blob/main/src/os/posix/src/os-impl-common.c#L149) to set the timeout periods to wait for a message. This appears to be because the [POSIX mqueue API requires it.](https://pubs.opengroup.org/onlinepubs/9699919799/functions/mq_timedreceive.html). 

The problem with basing the timeout off the absolute system clock rather than as a duration based on clock ticks (as RTEMS and Vxworks do), is that if they system clock changes, the timeout is affected. I have observed a situation if the system clock is updated (for example, after resetting the clock based on acquired GPS signal after being suspended) calls to `CFE_SB_ReceiveBuffer` that specify timeouts will be stuck forever if a message isn't sent. It is no longer possible to have task occur after a certain amount of time if a message isn't sent.

**Describe the solution you'd like**
 OS_QueueGet call should still wake up after its indicated timeout even if/when CLOCK_REALTIME gets updated in the background.

**Additional context**
This is an underlying limitation with the POSIX API, the mq_timedwait call uses CLOCK_REALTIME as its reference.  See https://stackoverflow.com/questions/33873374/pthreads-mq-timedreceive-pthread-cond-timedwait-and-clock-realtime 

**Requester Info**
Originally from @irowebbn in cFS discussion

",,https://github.com/nasa/osal/issues/1401
osal Integration candidate: Caelum-rc4+dev54,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1397. Addresses Issue #1396
- PR #1399. Addresses Issue #1398

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/690/checks)
[osal Checks](https://github.com/nasa/osal/pull/1400/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",,https://github.com/nasa/osal/pull/1400
"Fix #1398, separate bind and listen calls for streams","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Add OS_SocketBindAddress() and OS_SocketListen() to allow users to bind an address without also calling listen().  The use case is for client side connections where the source port needs to be controlled.

Fixes #1398

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
Users can call `OS_SocketBindAddress()` to bind a specific port/address for client-side connections

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1399
Socket API needs method to control source port for TCP client,"**Is your feature request related to a problem? Please describe.**
The `bind()` call could be used on a client-side role (without `listen()`) to control the source port for outgoing TCP connections.  

The `OS_SocketBind()` API assumes a server-side role, in that it does both a `bind()` and `listen()` call underneath.

Currently, the OSAL API does not have any way to control the port used for a TCP connection on the client side.  

**Describe the solution you'd like**
Introduce a method that can be used to control the source port used for client-side connections

For example: `OS_SocketBindClient()` and `OS_SocketBindServer()` (retaining existing OS_SocketBind for compatibility)

**Describe alternatives you've considered**
This could potentially be done in OS_SocketConnect, such as `OS_SocketConnectWithSourcePort()` ... but keeping it in bind keeps it more closely related to standard sockets API.

**Additional context**
This must be done with only new functions, cannot change definition of current OS_SocketBind.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/issues/1398
"Fix #1396, do not use intmax_t/uintmax_t types","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Replace these with long and unsigned long, respectively, as some old systems might not have these types even if it does provide stdint.h

Fixes #1396

**Testing performed**
Build on vxworks 6.9 (gcc 4.3.3)

**Expected behavior changes**
Build should succeed

**System(s) tested on**
GSFC VxWorks build host

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1397
"Some systems do not provide an ""intmax_t"" via stdint.h","**Describe the bug**
Although specified in C99, there are some old systems out there that do not provide an `intmax_t` or `uintmax_t` type in `stdint.h`.  Example is VxWorks 6.9 / Workbench 3.3 using gcc 4.3.3.

UtAssert uses these types, so it fails to build on this platform.

**To Reproduce**
Build UtAssert on VxWorks 6.9 - fails on missing types `intmax_t` and `uintmax_t`.

**Expected behavior**
Build should succeed

**System observed on:**
GSFC VxWorks build host

**Additional context**
Workaround would be to use `long` and `unsigned long` instead.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/issues/1396
osal Integration candidate: Caelum-rc4+dev52,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1393. Addresses Issue #1392

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/677/checks)
[osal Checks](https://github.com/nasa/osal/pull/1395/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@dmknutsen",,https://github.com/nasa/osal/pull/1395
Task API provides no mechanism to provide an instance parameter,"**Is your feature request related to a problem? Please describe.**
There is currently no way to provide a runtime parameter to a task that is visible to the specific function executed in the task thread.

**Describe the solution you'd like**
Both [POSIX](https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_create.html) and [RTEMS](https://docs.rtems.org/branches/master/c-user/rtems_data_types.html?highlight=rtems_task_argument#index-43) provide the ability to provide a single task function argument in the form of an opaque pointer (RTEMS isn't typed as a pointer but has a guaranteed size able to hold a pointer).

**Describe alternatives you've considered**
Without a mechanism to give a parameter to a task function, the only way to provide task-instance-specific data is some kind of an external thread-safe queue for each task function, and all of the excess bookkeeping required for that queue.

**Requester Info**
Brian Sipos, JHU/APL",,https://github.com/nasa/osal/issues/1394
"Fix #1392, Add additional counters to test summary","**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds additional counters to test summary.
Fixes #1392 

**Testing performed**
Executed functional tests and confirmed output is as expected.

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA Goddard
",CCB:Approved,https://github.com/nasa/osal/pull/1393
Counters included in test summary do not add up to total test count,"**Is your feature request related to a problem? Please describe.**
Test summary does does not contain information on all counters that increase the total test case count.  This results in the appearance of missing tests when the results are read.

**Describe the solution you'd like**
Add an information statement that includes the test counters for the remaining tests that increase the total test count.  

**Requester Info**
Dan Knutsen
NASA Goddard
",,https://github.com/nasa/osal/issues/1392
Condition Variable logic does not agree with common uses,"**Describe the bug**
The current condition variable API in the main branch does not agree with the common uses in POSIX and RTEMS which means there are many use cases that are not possible with the OSAL API.

The major disconnect is that the condition variable wait should operate on an external mutex, not an internal single-use mutex. This is how [POSIX](https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_cond_timedwait.html) and  [RTEMS](https://docs.rtems.org/branches/master/c-user/self_contained_objects.html#wait-for-condition-signal) both work, and it enables use cases where one mutex guards a resource but has multiple condition variables associated with it.

**To Reproduce**
This is an API bug and is present in the header and documented logic.
It is not possible to have a single guard mutex with multiple associated condition variables.

**Expected behavior**
The `OS_CondVarWait()` and `OS_CondVarTimedWait()` should take a handle to an external mutex to operate on, rather than an internal mutex.

**System observed on:**
This is an API issue and is not dependent on HW or OS versions.
This API is not present in the last release tag, so is only on the `main` branch.

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Brian Sipos, JHU/APL
",,https://github.com/nasa/osal/issues/1391
"Fix #1102, Correct return value bug in VxWorks `OS_ShellOutputToFile_Impl`","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1102
  - Corrects use of `ReturnCode` (instead of `Return`) to hold result of `OS_OpenCreate()`
  - Moves call to `OS_ObjectIdGetById()` out before the `if` to make code clearer (and remove the side-effect from the `if` condition)
  - Moves `if (Result == OK)` to inside the block, immediately after the one and only assignment to the `Result` variable (this check being outside that block was part of what caused the mixed-up OSAL/VxWorks returns previously)
  - Sets `ReturnCode` to `OS_ERROR` if `shellGenericInit()` does not return `OK` - thus correcting the behavior of the function (and the coverage test) to actually return an error if that call fails
  - Updated the coverage test return value from `OS_SUCCESS` to `OS_ERROR` when `OS_ObjectIdGetById()` is seeded with an error return 

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Coverage Tests etc.).

**Expected behavior changes**
`OS_ShellOutputToFile_Impl()` will actually return an error on all failure cases now.
Function logic and flow is clearer now - easing future maintenance.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1390
"Fix #1101, Add functional test for `NULL` `RemoteAddr` in `OS_SocketRecvFrom`","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1101
  - Adds an additional functional test for `OS_SocketRecvFrom()` testing a `NULL` input for the `RemoteAddr` parameter

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Coverage/Functional Tests etc.).

**Expected behavior changes**
No change to behavior (test changes only).

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1389
"Fix #864, Refactor duplicate `addrlen` swtiches into an inline function","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #864
  - `switch` to get `addrlen` from 3 functions refactored into into a single inline implementation
  - If someone can see a clear and worthwhile way to add `OS_SocketAddrInit_Impl()` I can add it.

**Testing performed**
GitHub CI actions all passing successfully (incl. Build + Run, Unit/Functional Tests etc.).
Local tests confirm net coverage unchanged.

**Expected behavior changes**
No change to behavior.

**System(s) tested on**
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS bundle.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1388
"Fix #1386, Refactor initializations of POSIX `return_code` variables to simplify code","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1386 
  - 3 `return_code` variables initialized to their `ERROR`/`FAILURE` state which removes the need to assign inside each error path.

**Testing performed**
GitHub CI actions all passing successfully, as do local Unit tests.

**Expected behavior changes**
No change to behavior.
code is simplified slightly - improving future maintainability.

**System(s) tested on**
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS bundle.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1387
Posix `return_code` variables could be initialized to `ERROR` to simplify code,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
A few `return_code` variables in the POSIX implementation units could be initialized to `ERROR`/`FAILURE` which would negate the need to assign at each failure point.

**Code snips**
https://github.com/nasa/osal/blob/5036fed76e440232016d7413cafdd2bb796144ce/src/os/posix/src/os-impl-binsem.c#L118-L240

Same for `OS_Posix_TableMutex_Init()` and `OS_Posix_TimeBaseAPI_Impl_Init()`.

**Expected behavior**
Simplify code by setting default to `ERROR`/`FAILURE` and assigning `SUCCESS` when necessary.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/issues/1386
OS_ObjectIdFromInteger argument narrowing error,"**Describe the bug**
When building for VxWorks 7 a C++ app, I get the error:
error: narrowing conversion of 'value' from 'long unsigned int' to 'uint32_t' {aka 'unsigned int'} inside { } [-Werror=narrowing]

I fixed it by changing code to:
#ifdef OSAL_OMIT_DEPRECATED
    osal_id_t idv = {(uint32)value};
#else
    osal_id_t idv = (osal_id_t)value;
#endif
    return idv;

The code above still narrow down value from long unsigned to int unsigned.
I understand that both VxWorks 7 and C++ are not supported, so really the question is:
- Shouldn't OS_ObjectIdFromInteger be taking an integer in spite of a long since the returned values is always an int?

**To Reproduce**


**Expected behavior**
Build without errors

**Code snips**
[osapi-idmap.h L105](https://github.com/nasa/osal/blob/5036fed76e440232016d7413cafdd2bb796144ce/src/os/inc/osapi-idmap.h#L105)

**System observed on:**
 - OS: Oracle Linux 8.7
 - v6.0.0-rc4+dev184

**Additional context**


**Reporter Info**
Claudio Olmi
NASA JSC
",,https://github.com/nasa/osal/issues/1385
osal Integration candidate: Caelum-rc4+dev47,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1383. Addresses Issue #1382

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/669/checks)
[osal Checks](https://github.com/nasa/osal/pull/1384/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@dzbaker",Equuleus-rc1,https://github.com/nasa/osal/pull/1384
"Fix #1382, Create Workflow for IC Bundle Generation","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
- Addresses issue #1382.

**Testing performed**
Generated IC branch in fork.

**Expected behavior changes**
Adds new workflow for integration candidate branch generation.

**Contributor Info - All information REQUIRED for consideration of pull request**
Dylan Z. Baker/NASA GSFC 582","CCB:Approved, Equuleus-rc1",https://github.com/nasa/osal/pull/1383
Automate Generation of Integration Candidate Branch,"**Is your feature request related to a problem? Please describe.**
Generating the integration candidate branch is a very straightforward process, although it can be highly time consuming. Automating this process can result in significant time savings.

**Describe the solution you'd like**
Use a GitHub workflow to automatically merge a set of pull requests into the integration candidate branch and push it to GitHub.

**Describe alternatives you've considered**
Scripts can be used to simplify this process as well, but it requires setup by the person maintaining the repository and isn't as portable.

**Requester Info**
Dylan Baker/NASA GSFC 582","enhancement, continuous-integration, Equuleus-rc1",https://github.com/nasa/osal/issues/1382
"Fix #1380, Light coding standards cleanup","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1380
  - Light clean-up for some 'easy wins' to improve compliance with some of the rules common to the relevant coding standards:
    - split up multiple declarations on a single line
    - remove redundant definitions (i.e. values that are not used before the variable is assigned a new value)
    - remove trailing whitespace in yaml files
    - add braces to single line `if`/`else` blocks
    - remove side-effects from statements where no refactoring or new variables are needed. For example:
      ![image](https://user-images.githubusercontent.com/9024662/232169414-c79e209a-ca39-4089-9c55-7e8e3e4a5f7d.png)

**Testing performed**
GitHub CI actions all passing successfully.

**Expected behavior changes**
No change to behavior.

This PR will:
- improve clarity & consistency
- improve compliance with rules common to all/most of the relevant coding standards
- reduce technical debt and ease future maintenance
- result in cleaner builds with fewer alerts/warnings from code scanners

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1381
Light coding standards cleanup,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Some of the items listed in https://github.com/nasa/osal/issues/933 could be cleared up without any changes to the code (i.e. easy wins):
- split up multiple declarations on a single line
- remove redundant definitions (i.e. values that are not used before the variable is assigned a new value)
- remove side-effects from statements where no refactoring or new variables are needed
- add braces to single line `if`/`else` blocks

**Expected behavior**
Comply with rules common to the relevant coding standards/guidelines where it makes sense, improves clarity, improves consistency and eases future maintenance.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/issues/1380
"Fix #1193, Change format of UtAssert_StringBufCompare","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1193 
  - Comparison strings are now formatted one above the other and aligned to make identifying the discrepancy easier.

An example:
![Screenshot 2023-03-24 13 52 31](https://user-images.githubusercontent.com/9024662/227426004-6dc906a5-0746-463d-895a-e975d27aa3a5.png)

**Testing performed**
GitHub CI actions and local cFS test suite run all passing successfully.

**Expected behavior changes**
The change makes it easier to identify the discrepancy between the strings in case of a failed test.

Only slight downside is the increase in length of the test log... (each call to `UtAssert_StringBufCompare()` now results in 3 lines printed instead of 1).
There are currently ~40 uses of `UtAssert_StringBufCompare()` in cFE and OSAL.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1379
"Fix #1103, Implement OS_ERR_INVALID_PRIORITY return code check for RTEMS","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1103 
  - Implements the `OS_ERR_INVALID_PRIORITY` error return code for RTEMS (in `OS_TaskCreate()`) and `OS_TaskSetPriority()`.

For POSIX, OSAL uses the internal function `OS_PriorityRemap()` to convert to a suitable (and not invalid) priority value before calling `pthread_setschedprio()`.

For VxWorks, `taskPrioritySet()` does set `ERRNO` to `S_taskLib_ILLEGAL_PRIORITY`, but I have not tried to include it in this PR. The issue can be left open if someone wants to look at that, or closed for now with this PR.

**Testing performed**
I don't think this file (`rtems/src/os-impl-tasks.c`) has any tests currently (see https://github.com/nasa/osal/issues/1207).
If someone can advise if this needs to be tested, and the best way of doing so, I would appreciate it.

**Expected behavior changes**
Calls on the RTEMS implementation to `OS_TaskCreate()` (which calls `rtems_task_create()`) and `OS_TaskSetPriority()` (which calls `rtems_task_set_priority()`) will now actually return `OS_ERR_INVALID_PRIORITY` if the RTEMS calls return `RTEMS_INVALID_PRIORITY`, rather than simply returning OS_ERROR.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1378
"Fix #958, Convert some UT_GetStubCount to UtAssert_STUB_COUNT","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #958 
  - The cases of `UT_GetStubCount()` which were just being checked via `UtAssert_True()` have been converted to use `UtAssert_STUB_COUNT()`, which automatically writes the expected and actual stub count to the test log.

**Testing performed**
GitHub CI actions all passing successfully.
Local testing with standard cFS suite shows all tests passing and no change in coverage.

**Expected behavior changes**
No change to code.
Tests also essentially identical, just a bit simpler, clearer and more useful for debugging.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1377
osal Integration candidate: Caelum-rc4+dev43,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1375. Addresses Issue #1359

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/661/checks)
[osal Checks](https://github.com/nasa/osal/pull/1376/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",Equuleus-rc1,https://github.com/nasa/osal/pull/1376
"Fix #1359, add assert macros for other data types","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds generic macros for asserting on integer values that can work with any integer data type, including size_t and 64-bit values where needed.

Fixes #1359

**Testing performed**
Build and run all tests

**Expected behavior changes**
New assert macros available.
Some logs have a slightly different output format but shouldn't affect much.

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/osal/pull/1375
osal Integration candidate: Caelum-rc4+dev41,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1371. Addresses Issue #1365
- PR #1372. Addresses Issue #1370

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/655/checks)
[osal Checks](https://github.com/nasa/osal/pull/1374/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",Equuleus-rc1,https://github.com/nasa/osal/pull/1374
osal Integration candidate: Caelum-rc4+dev40,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1327. Addresses Issue #1110

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/654/checks)
[osal Checks](https://github.com/nasa/osal/pull/1373/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@thnkslprpt",Equuleus-rc1,https://github.com/nasa/osal/pull/1373
"Fix #1370, workflow to validate OSAL API","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds a new build and test workflow that includes an API validation with both C and C++ compilers.  This should catch any cases where syntactical elements that work in C but do not work in C++ appear in the headers.

Fixes #1370

**Testing performed**
Build and run workflow

**Expected behavior changes**
OSAL API headers will now be checked against a C++ compiler.  

**System(s) tested on**
Github workflow

**Additional context**
Note that due to #1365, this currently fails (thus validating that this workflow is catching what it is supposed to).  Once the fix is merged, this should pass.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/osal/pull/1372
"Fix #1365, fixup API headers for C++","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Correct a few syntactical items that are valid C99 but not valid for C++03.  This includes use of the designated initializer, compound literals, variadic macros, and a trailing comma in enum declarations.

Note this only matters for public API headers, as some users may need to include these directly from a c++ file.  For normal C source files, these are all compiled as C99 and thus the syntax is fine.

Fixes #1365

**Testing performed**
Build and run all OSAL tests

**Expected behavior changes**
No impact to behavior, headers are now valid syntax for C++03 (and C99, of course)

**System(s) tested on**
Debian (using g++ 12.2 to check C++ syntax)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, Equuleus-rc1",https://github.com/nasa/osal/pull/1371
Add build script and workflow to validate API headers in C++,"**Is your feature request related to a problem? Please describe.**
As noted in issue #1365, there is currently no tests to check compatibility of the OSAL API with C++.  Although C++ is **not** an officially targeted platform for OSAL, some users do have C++ code and occasionally the OSAL header files are included from C++ code.

**Describe the solution you'd like**
This is two parts:
1. All public OSAL headers should have an conditional `extern ""C""`  to handle the case if/when they are included from a C++ file.
2. There should be a workflow check to confirm that the API header files for OSAL are compliant with C++ 03.

**Describe alternatives you've considered**
The only other workaround is to insist that the user never include OSAL headers directly from C++, instead provide their own C++ wrapper for the OSAL API.  But this is a fairly big thing when a few minor updates can make the OSAL headers more C++-friendly.

**Additional context**
Note that C++ would still be considered a secondary target here - a workflow can do some simple checks to at least make sure the headers don't contain any declarations that are outright incompatible with C++, but otherwise C++ support would be totally on the user to validate.

Notably - none of the unit tests run in C++.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",Equuleus-rc1,https://github.com/nasa/osal/issues/1370
osal Integration candidate: Caelum-rc4+dev39,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1367. Addresses Issue #1366

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/653/checks)
[osal Checks](https://github.com/nasa/osal/pull/1369/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@pepepr08",Equuleus-rc1,https://github.com/nasa/osal/pull/1369
"Fix #1107, Remove unreachable branch (superfluous if condition)","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1107
  - Superfluous `if` condition removed - removing an unreachable branch (condition is always `true`) and slightly improving test coverage.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1368
"Fix #1366, removed cast that hid bug at compile time","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fix #1366

**System(s) tested on**
 - Hardware: GR740
 - OS: RTEMS
 - Versions: cFS draco-rc2 + mods

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza | GSFC 582
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/osal/pull/1367
Remove cast when starting timebase callback,"**Describe the bug**
The cast was originally hiding a bug, as described in #1244. In #1244 comments, @jphickey suggested we remove the cast. The commit was made to remove this cast, but somehow the changes were lost.

**Code snips**
https://github.com/nasa/osal/blob/main/src/os/rtems/src/os-impl-timebase.c#L393

**Reporter Info**
Jose F. Martinez Pedraza / GSFC 582","bug, Equuleus-rc1",https://github.com/nasa/osal/issues/1366
Designated initializer in `osapi-clock.h` header breaks C++ compilation unit.,"**Describe the bug**
Designated initializer in `osapi-clock.h` header breaks C++ compilation unit. C++ does not support this until C++20
 
**To Reproduce**
`#include ""cfe.h""` in a C++ compilation unit
Build file, observe error. 


**Expected behavior**
Successful compilation

**Code snips**
Instance of designated initializer used here:
https://github.com/nasa/osal/blob/fa9671fa608ff5113f24990a78e6e7f8d47eb392/src/os/inc/osapi-clock.h#L253

Other instances in `OS_TimeFromTotalSeconds`, `OS_TimeFromTotalMilliseconds`, `OS_TimeFromTotalMicroseconds`, `OS_TimeFromTotalNanoseconds`. Issue seems to have been introduced in https://github.com/nasa/osal/pull/1310 . 

**System observed on:**
 - SP-0s
 - OS: VxWorks 6.9
 - Versions: cFE  v7.0.0-rc4+dev242, OSAL v6.0.0-rc4+dev179, PSP v1.6.0-rc4+dev67

**Additional context**
Inline header functions should use C++03 (latest standard supported by VxWorks 6.9) compatible constructs.  


**Reporter Info**
John N Pham, Northrop Grumman",Equuleus-rc1,https://github.com/nasa/osal/issues/1365
"Fix #1109, Remove unimplemented test stub prototype","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1109 
  - Removes stray (unimplemented) test stub prototype.

Note: unrelated minor typo piggy-backed onto this PR (to to).

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No change to behavior (prototype was not implemented).

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1364
osal Integration candidate: Caelum-rc4+dev38-v2,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1361. Addresses Issue #1361

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/649/checks)
[osal Checks](https://github.com/nasa/osal/pull/1363/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",Equuleus-rc1,https://github.com/nasa/osal/pull/1363
"Fix #1361, add doxygen for UT_ConfigureGenericStubReturnValue","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds a function and parameter description for this API which resolves a doxygen warning about it being undocumented.

Fixes #1361

**Testing performed**
Build full set of documentation

**Expected behavior changes**
Functions are fully documented

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/osal/pull/1362
Add missing doxygen to new UT Assert API,"**Is your feature request related to a problem? Please describe.**
cFS documentation workflow is failing with some undocumented parameters:

```
/home/runner/work/cFS/cFS/osal/ut_assert/inc/utstubs.h:201: warning: The following parameters of UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre, int32 DeferCount, const char *TypeName) are not documented:
  parameter 'ValuePtr'
  parameter 'ValueSize'
  parameter 'ValueGenre'
  parameter 'DeferCount'
  parameter 'TypeName'
```

**Describe the solution you'd like**
Add documentation

**Additional context**
This unfortunately is not found by OSAL CI workflows, it was found by CFS workflows only after merging to main.  Potentially need to tweak workflows so this type of thing gets detected by the OSAL checks and/or a way to point the CFS workflow at the IC branch so it can be identified before merge.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, Equuleus-rc1",https://github.com/nasa/osal/issues/1361
osal Integration candidate: Caelum-rc4+dev38,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1352. Addresses Issue #1344

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/649/checks)
[osal Checks](https://github.com/nasa/osal/pull/1360/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",Equuleus-rc1,https://github.com/nasa/osal/pull/1360
Add UtAssert_SIZET_EQ,"**Is your feature request related to a problem? Please describe.**
In many cases the code uses `UtAssert_UINT32_EQ` to check values that are actually `size_t` in the implementation.  This is mostly OK as long as the sizes are <4GiB, which is almost always the case on flight systems that usually don't have a lot of memory.

**Describe the solution you'd like**
To support larger systems in the future, UT assert should have a macro that compares `size_t` values natively without converting down to `uint32` first.

**Describe alternatives you've considered**
Continue using `uint32` comparisons, accept limitation that this cannot be used for objects/sizes greater than 4GiB.

**Additional context**
Intent is to be proactive, this will probably become a limiting factor to somebody at some point.  Plus it is more correct to be able to compare `size_t` values in a type-safe manner.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, Equuleus-rc1",https://github.com/nasa/osal/issues/1359
osal Integration candidate: Caelum-rc4+dev37,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1355. Addresses Issue #1173

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/647/checks)
[osal Checks](https://github.com/nasa/osal/pull/1358/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",Equuleus-rc1,https://github.com/nasa/osal/pull/1358
"Fix #1356, Remove stray remaining 'goto' in OSAL test code","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1356 
  - 2 uses of `goto` are replaced with simple return statements.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
No change to logic.
Program flow is clearer, and removes the only remaining use of `goto` in OSAL.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1357
Stray remaining use of 'goto' in test code,"**Describe the bug**
Noticed a single stray use of `goto` remaining in the test code.

**Expected behavior**
Use of `goto` is advised against by most coding guidelines.
Preference is to use other method of flow control.

**Code snips**
https://github.com/nasa/osal/blob/a9fece5f320617c850c5925c490ba31e916721b6/src/unit-tests/osfile-test/ut_osfile_test.c#L73-L94

**Reporter Info**
Avi Weiss @thnkslprpt",enhancement,https://github.com/nasa/osal/issues/1356
"Fix #1173, separate append on volume_name to system_mountpt","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Generating the system_mountpt string via a single call to snprintf triggered a compiler warning about overlapping memory.  However this does not seem like a real warning, as the volume_name should always be null terminated before the overlap would be possible.

By separating this to be a separate append of the volume_name along with an explicit size check to ensure the buffers indeed do not overlap, this avoids the warning.

Fixes #1173

**Testing performed**
Build and run all tests

**Expected behavior changes**
Avoids a false compiler warning about possible pointer overlap by explicitly checking and limiting the string length being appended.

No functional change, as the generated ""system_mountpt"" string should be identical.

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, Equuleus-rc1",https://github.com/nasa/osal/pull/1355
"Fix #1353, Align mismatched function prototype/implem. parameter names","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1353 
  - Similar to https://github.com/nasa/cFE/pull/1551/files from cFE

May as well clean these up now to avoid any potential future compiler warnings and ease maintainability/readability.

Note: one of these cases was noticed in https://github.com/nasa/osal/issues/185, but closed as 'won't fix' at the time.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
Function prototypes and their implementations should (ideally) always have matching parameter names.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1354
Scrub for mismatched function prototype/implementation parameter names,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Noticed a couple of mismatched parameter names between function prototypes and their implementations. A quick scrub of OSAL turned up 13 cases in total.

**Expected behavior**
While not a risk to behavior, these mismatched parameter names may cause compiler errors in the future on some systems, and can be confusing for maintenance and application programming.

**Code snips**
Cases identified:
![image](https://user-images.githubusercontent.com/9024662/213946583-558ec838-1eba-4edb-9703-8d0cd27a8565.png)

**Reporter Info**
Avi Weiss @thnkslprpt",enhancement,https://github.com/nasa/osal/issues/1353
"Fix #1344, UT assert stub return values","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Improves default support for return values of sizes other than 32 bits. Previously this required a custom handler for any value that was not a 32 bit integer.  With this update any integer value can be used, and a value translation will occur if the size is different.  Thus boolean values, 8,16, and 64-bit ints can be configured through the same basic API without needing to add a handler.
Fixes #1344

**Testing performed**
Build and run all tests, including CFS app tests, to confirm all still run as expected.

**Expected behavior changes**
No change to _existing_ behavior - all currently-implemented test cases should continue to behave as they have in the past, whether they used a 32-bit integer return or if they had a custom hook/handler.

Going forward, it should no longer be required to implement a custom handler for the sole purpose of adjusting the size of the return value in case it is not a 32-bit integer.  As a fallback default, any return value that is unset by a test will be memset to 0.  So a pointer stub return will get `NULL`, a boolean will get `FALSE`, and any numeric value of any time will be zero.  

The `UT_SetDeferredRetcode` and `UT_SetDefaultReturnValue` functions now accept a `UT_IntReturn_t` value instead of `int32`.  This typedef is defined using the C99 `ptrdiff_t` type, which will be 64 bits in size on modern hardware.  When passing by value from an int32, this should be transparent, but it is large enough to also allow test cases to pass in pointer values here without truncating.

**System(s) tested on**
Debian 

**Additional context**
API to set return values is still numeric in nature.  This adds some framework to allow fully-typed values and abstract objects bigger than `ptrdiff_t` values to be returned, but there is no API yet - that can be added in a future change.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, Equuleus-rc1",https://github.com/nasa/osal/pull/1352
osal Integration candidate: Caelum-rc4+dev34,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1348. Addresses Issue #1346
- PR #1347. Addresses Issue #1345

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/638/checks)
[osal Checks](https://github.com/nasa/osal/pull/1351/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper",draco-rc4,https://github.com/nasa/osal/pull/1351
"Fix #1349, Break up pc-rtems to support generic configuration","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #1349 

Splits up bsp_start.c so features can be optionally included: cmdline, shell, stand alone exe vs module
RTEMS configuration is now in bsp_init.c, included based on stand alone/module selection

**Testing performed**
Ran w/ LEON3 QEMU with/without shell and stand alone/module options.

**Expected behavior changes**
PC behavior shouldn't change based on default options matching previous behavior
Except for the file system and command line, the rest is usable by LEON3

**System(s) tested on**
LEON3 QEMU modified as documented by RCC:
```
apt-get update && apt-get install -y ninja-build pkg-config libglib2.0-dev python3 python3-pip python3-setuptools python3-wheel libpixman-1-dev && pip3 install meson
tar xvJf qemu-7.1.0.tar.xz
cd qemu-7.1.0
./configure --target-list=sparc-softmmu --enable-debug
make install
```
RCC-1.3.1
For running as a module I based it on https://github.com/alanc98/rki2, although there are mods...

**Additional context**
DRAFT submitted for initial discussion

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/1350
Break up pc rtems bsp to support generic/configurable use,"**Is your feature request related to a problem? Please describe.**
The PC RTEMS OSAL bsp references pc686 bsp specific calls and doesn't easily support reconfiguration.  See https://github.com/nasa/cFS/discussions/314 for more context.

**Describe the solution you'd like**
Break up the implementation to support source selection and allow for exclusion of bsp specific calls.

Could eventually make it generic-rtems w/ bsp specific options.

**Describe alternatives you've considered**
Add a new bsp... but this ends up copying almost all the pc-rtems code.

**Additional context**
I've got something in work but needs cleanup/discussion to ensure it's headed in the right direction.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/1349
"Fix #1346, Remove obsolete _USING_RTEMS_INCLUDES_","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #1346 

**Testing performed**
CI

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1348
"Fix #1345, Support adding default flags at task creation","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #1345 

**Testing performed**
CI, also tested on RTEMS5/leon3 with OS_FP_ENABLED

**Expected behavior changes**
No default change but supports adding flags at task creation

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1347
Remove obsolete `_USING_RTEMS_INCLUDES_`,"**Is your feature request related to a problem? Please describe.**
`_USING_RTEMS_INCLUDES_` is no longer used for anything.

https://github.com/nasa/osal/blob/b4d4eb6133ad7fc1f5981f2eac4e90d958ccf3fa/src/bsp/pc-rtems/src/bsp_start.c#L26
https://github.com/nasa/osal/blob/b4d4eb6133ad7fc1f5981f2eac4e90d958ccf3fa/src/os/rtems/src/os-impl-timebase.c#L29
https://github.com/nasa/osal/blob/b4d4eb6133ad7fc1f5981f2eac4e90d958ccf3fa/src/os/rtems/src/os-impl-loader.c#L30
https://github.com/nasa/osal/blob/b4d4eb6133ad7fc1f5981f2eac4e90d958ccf3fa/src/os/rtems/src/os-impl-no-module.c#L30

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, draco-rc4",https://github.com/nasa/osal/issues/1346
Add option to force RTEMS_FLOATING_POINT on all tasks,"**Is your feature request related to a problem? Please describe.**
Even if a task itself doesn't use floating point, if the RTEMS kernel is compiled with floating point enabled underlying functions may use it.  Under the current scheme, there isn't a way to force inclusion of the RTEMS_FLOATING_POINT flag for all tasks.

**Describe the solution you'd like**
Add override option to always add flag regardless of the flags passed in to the function call.

**Describe alternatives you've considered**
I'm not sure if this is a problem w/ other systems... could make the flag generic to OS's?

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc4",https://github.com/nasa/osal/issues/1345
Add better support for pointer return values in UT assert,"**Is your feature request related to a problem? Please describe.**
Currently, UT assert only as built-in support for 32-bit integer return values, in the form of `UT_SetDefaultReturnValue` and `UT_SetDeferredRetcode`.   The majority of CFE/CFS APIs have a 32-bit integer return value, so this has been good enough.

However, there are also a fair number of CFE functions that return pointer values, and these `int32` APIs do not currently work for pointer returns.  Any stub that returns a pointer must have its own custom handler function to help set the return value, and so support is spotty.  Every function that has a pointer return may have a slightly different way to control the return value, and a different range of things that can be done by the test to modify its behavior.

**Describe the solution you'd like**
Add two new APIs to UT assert:
- `UT_SetDefaultReturnObject`
- `UT_SetDeferredReturnObject`

These would work like the current integer functions, respectively, but accept pointers with a size instead of an integer.  This type of signature could support ALL types of return values, including 8-bit, 16-bit, 64-bit, and potentially even larger structures (even though code should not output large structures via return value, it could be done).

**Describe alternatives you've considered**
A halfway point could be to just add generic reusable handlers that return a pointer, and could be registered to any function.  But that would not be as clean, and would still need a separate function for each type.

**Additional context**
This can be added without breaking any currently-existing tests or stubs, because its only a new type of return record.  It would not change anything about the existing logic, just extend it.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, draco-rc4",https://github.com/nasa/osal/issues/1344
osal Integration candidate: Caelum-rc4+dev31,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1342. Addresses Issue #1340
- PR #1341. Addresses Issue #1339
- PR #1321. Addresses Issue #1262

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/629/checks)
[osal Checks](https://github.com/nasa/osal/pull/1343/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey
@thnkslprpt",draco-rc4,https://github.com/nasa/osal/pull/1343
"Fix #1340, Update action versions","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Use the ""v3"" version of checkout and upload-artifact actions, which resolves a warning about depending on an obsolete node.js version.

Fixes #1340 

**Testing performed**
Execute workflow

**Expected behavior changes**
No more warning about node.js 12

**System(s) tested on**
Github hosted runner

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1342
"Fix #1339, add doc-prebuild dependency","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
When building as part of CFE/CFS, register the osal header list file (osal-public-api.doxyfile) as a dependency of the doc-prebuild abstract target.  This way, CFE and any other CFS apps that refer to the OSAL headers in their documentation can easily ensure that this (and any other file produced by other modules) exist prior to attempting to run doxygen.

Fixes #1339

**Testing performed**
Build documentation

**Expected behavior changes**
None directly to OSAL, but dependent items can now operate correctly

**System(s) tested on**
Github hosted runner

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1341
Update workflows to use newer action versions,"**Describe the bug**
Calls to the checkout and upload-artifacts actions in the workflow files refer to deprecated version 2.  This should be updated to v3, which resolves a warning about deprecated node.js versions.

**To Reproduce**
See any workflow log, e.g. https://github.com/nasa/osal/actions/runs/3532697999, in the ""Annotations"" section.

**Expected behavior**
Should be clean.

**System observed on:**
Github hosted runner

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",draco-rc4,https://github.com/nasa/osal/issues/1340
"Add doxygen dependencies to ""doc-prebuild"" abstract target","**Is your feature request related to a problem? Please describe.**
nasa/cFE#2214 adds an abstract target for dependencies of the documentation build.  Currently OSAL requires generating the file `osal-public-api.doxyfile` before documentation builds are run, so this should be registered as a dependency.

This only affects documentation builds of CFE and CFS apps that in turn include OSAL headers as part of the document.  These are depending on some artifacts that are generated by the OSAL build recipe.

**Describe the solution you'd like**
Add dependencies so that CFE and CFS app documentation builds that refer to OSAL files will work.

**Additional context**
See nasa/CFE#2214 and nasa/CF#344 for more context

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, draco-rc4",https://github.com/nasa/osal/issues/1339
osal Integration candidate: Caelum-rc4+dev30,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1334. Addresses Issue #1333

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/620/checks)
[osal Checks](https://github.com/nasa/osal/pull/1338/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 22.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper",draco-rc4,https://github.com/nasa/osal/pull/1338
osal Integration candidate: Caelum-rc4+dev29,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1335. Addresses Issue #1270
- PR #1329. Addresses Issue #1328
- PR #1336. Addresses Issue #1324 and #1325

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/616/checks)
[osal Checks](https://github.com/nasa/osal/pull/1337/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 22.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey
@dmknutsen",draco-rc4,https://github.com/nasa/osal/pull/1337
"Fix #1324, Fix #1325, cppcheck updates ","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Passes a cmake configuration so cppcheck can use the exported commands, allowing it to use all header files that the actual build uses.

Also Resolves a number of other issues reported by cppcheck

Fixes #1324
Fixes #1325

**Testing performed**
Build and run tests
Verify results of static analysis workflow

**Expected behavior changes**
Static analysis workflow should be clean

**System(s) tested on**
Github workflow

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CCB:FastTrack, draco-rc4",https://github.com/nasa/osal/pull/1336
Fix #1270: Truncate symbol name if > OS_MAX_SYM_LEN,"**Checklist (Please check before submitting)**

* [x ] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Truncates symbol name in symbol table dump if the length exceeds OS_MAX_SYM_LEN.

**Testing performed**
Tested against VxWorks 6.9 

**Expected behavior changes**
Dump completes successfully when symbol names exceed OS_MAX_SYM_LEN.

**System(s) tested on**
 - Hardware: SP0
 - OS: VxWorks 6.9

**Contributor Info - All information REQUIRED for consideration of pull request**
Dan Knutsen
NASA Goddard
","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1335
"Fix #1333, Update CI to use Ubuntu 20.04","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #1333

**Testing performed**
CI

**Expected behavior changes**
Just updates CI to use Ubuntu 20.04

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1334
Update CI to use Ubuntu 20.04,"**Is your feature request related to a problem? Please describe.**
Ubuntu 18.04 EOL is approaching
cFS was already updated in nasa/cfs#559, cFE should match

**Describe the solution you'd like**
Update to use Ubuntu 20.04 in CI

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",draco-rc4,https://github.com/nasa/osal/issues/1333
osal Integration candidate: Caelum-rc4+dev28,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1323. Addresses Issue #1322

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/613/checks)
[osal Checks](https://github.com/nasa/osal/pull/1332/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",draco-rc4,https://github.com/nasa/osal/pull/1332
"Fix #1330, Move variables declared mid-function to the top","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #1330
  - A couple stray variables that were declared mid-function were moved to the top of their respective functions.

**Testing performed**
GitHub CI actions all passing successfully (excl. cppcheck issues being addressed in https://github.com/nasa/osal/issues/1325)

**Expected behavior changes**
All variables declared top of function as per cFS conventions/guidelines.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/osal/pull/1331
Variables declared mid-function,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
A few cases of variables declared mid-function left here.
Copy of https://github.com/nasa/CF/issues/109

**Expected behavior**
All variables should be declared at the top of the function.

**Reporter Info**
Avi Weiss @thnkslprpt",enhancement,https://github.com/nasa/osal/issues/1330
"Fix #1328, always provide UT stub library","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Move the UT stub library so it is not dependent on ENABLE_UNIT_TESTS

The ""ut_osapi_stubs"" library is mostly relevant for testing other applications, as opposed to testing OSAL itself.  Therefore this library should be provided regardless of whether OSAL is being tested.

Fixes #1328

**Testing performed**
Build and check OSAL in standalone build and CFE build

**Expected behavior changes**
The `ut_osapi_stubs` library is always available

**System(s) tested on**
Ubuntu 22.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1329
"Always build/provide OSAL stub library, decouple from ENABLE_UNIT_TESTS","**Is your feature request related to a problem? Please describe.**
Currently, OSAL only provides the stub library (`ut_osapi_stubs`) when `ENABLE_UNIT_TESTS` is set.

However, the `ENABLE_UNIT_TESTS` switch is supposed to cover the testing of OSAL itself, but the stubs are mostly relevant for testing _other_ components.

In a modular deployment, OSAL may be treated as an external/independent component.  As such, it may be built separately from the application, with headers and binary libraries installed in a system location e.g. `/usr/local` or similar.  To keep the installation footprint smaller and cleaner, generally build intended for system install like this would be done without unit tests.

However, the lack of `ut_osapi_stubs` when compiled in this mode means that other components in the system based on OSAL cannot be unit tested either.

**Describe the solution you'd like**
Always provide `ut_osapi_stubs`, independently of the `ENABLE_UNIT_TESTS` switch.  This will enable dependent applications to be unit tested, even if OSAL itself is not being tested.

**Additional context**
Note that UT assert is always provided this way for similar reasons - it is still useful for external ""black box"" testing (which is done using binaries that are built and linked normally, not stubbed out binaries), and furthermore other applications can be tested even if OSAL itself is not being tested.

In a CFS build, this disconnect was not apparent because the entire system gets the same `ENABLE_UNIT_TESTS` setting, but in a decoupled/standalone build this is not the case.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",draco-rc4,https://github.com/nasa/osal/issues/1328
"Fix #1110, Modify unreachable branch in OS_ObjectIdAllocateNew","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #1110 
Changes 2 mutually exclusive, consecutive `if` statements to an `if`/`else` block.
I believe this is the most parsimonious fix to this issue.

**Testing performed**
GitHub CI Unit Tests all passing successfully.

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi @thnkslprpt",CCB:Approved,https://github.com/nasa/osal/pull/1327
Support for FreeRTOS,@dzbaker and @dmknutsen https://github.com/nasa/osal/issues/620#issuecomment-1303272348 I had this issue. Can you please help me to get the support for FreeRTOS-CFS. ,question,https://github.com/nasa/osal/issues/1326
Additional errors reported by new cppcheck,"**Describe the bug**
The latest version of cppcheck reports the following errors/concerns in the OSAL source code:

```
src/os/portable/os-impl-posix-dl-symtab.c:140:35: style: Variable 'local_status' is assigned a value that is never used. [unreadVariable]
    int32            local_status = OS_ERROR;
                                  ^
src/os/posix/src/os-impl-console.c:83:26: style: Variable 'local_arg.opaque_arg' is assigned a value that is never used. [unreadVariable]
    local_arg.opaque_arg = arg;
                         ^
src/os/posix/src/os-impl-console.c:128:30: style: Variable 'local_arg.id' is assigned a value that is never used. [unreadVariable]
                local_arg.id = OS_ObjectIdFromToken(token);
                             ^
src/os/posix/src/os-impl-tasks.c:117:26: style: Variable 'local_arg.opaque_arg' is assigned a value that is never used. [unreadVariable]
    local_arg.opaque_arg = arg;
                         ^
src/os/posix/src/os-impl-tasks.c:578:20: style: Variable 'arg.id' is assigned a value that is never used. [unreadVariable]
    arg.id         = OS_ObjectIdFromToken(token);
                   ^
src/os/posix/src/os-impl-tasks.c:791:20: style: Variable 'arg.id' is assigned a value that is never used. [unreadVariable]
    arg.id         = global_task_id;
                   ^
src/os/posix/src/os-impl-tasks.c:817:28: style: Variable 'self_record.opaque_arg' is assigned a value that is never used. [unreadVariable]
    self_record.opaque_arg = pthread_getspecific(POSIX_GlobalVars.ThreadKey);
                           ^
src/os/posix/src/os-impl-timebase.c:308:26: style: Variable 'local_arg.opaque_arg' is assigned a value that is never used. [unreadVariable]
    local_arg.opaque_arg = arg;
                         ^
src/os/posix/src/os-impl-timebase.c:345:20: style: Variable 'arg.id' is assigned a value that is never used. [unreadVariable]
    arg.id         = OS_ObjectIdFromToken(token);
                   ^
src/os/rtems/src/os-impl-filesys.c:175:25: style: Variable 'return_code' is reassigned a value before the old one has been used. [redundantAssignment]
            return_code = OS_SUCCESS;
                        ^
src/os/rtems/src/os-impl-filesys.c:169:29: note: return_code is assigned
                return_code = OS_ERROR;
                            ^
src/os/rtems/src/os-impl-filesys.c:175:25: note: return_code is overwritten
            return_code = OS_SUCCESS;
                        ^
src/os/rtems/src/os-impl-timebase.c:475:34: style: Variable 'user_data.id' is assigned a value that is never used. [unreadVariable]
            user_data.id         = OS_ObjectIdFromToken(token);
```

**To Reproduce**
Execute the following cppcheck command in OSAL (same as what is used in the static analysis workflow ""strict"" setting):
`cppcheck --force --inline-suppr --std=c99 --language=c --enable=warning,performance,portability,style --suppress=variableScope --inconclusive src/bsp/ src/os/`

**Expected behavior**
Should pass cleanly

**System observed on:**
Ubuntu 22.04 (cppcheck version 2.7)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",draco-rc4,https://github.com/nasa/osal/issues/1325
Cppcheck flagging UT_DEFAULT_STUB as unknown macro,"**Describe the bug**
In recent runs of cppcheck, the following error is being reported

```
Run if [[ -s general_cppcheck_err.txt ]];
src/unit-test-coverage/vxworks/ut-stubs/src/vxworks-os-impl-common-stubs.c:32:1: error: There is an unknown macro here somewhere. Configuration is required. If UT_DEFAULT_STUB is a macro then please configure it. [unknownMacro]
UT_DEFAULT_STUB(OS_API_Impl_Init, (osal_objtype_t idtype))
^
Error: Process completed with exit code 255.
```

**To Reproduce**
Run static analysis workflow

**Expected behavior**
Should pass

**System observed on:**
Github workflow

**Additional context**
See https://github.com/nasa/osal/actions/runs/3345955942/jobs/5542154451

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, draco-rc4",https://github.com/nasa/osal/issues/1324
"Fix #1322, add BUGCHECK_VOID macro","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds a variant of the BUGCHECK macro that has no return value argument, which can be used in functions with no return value without the unusual syntax appearing in the code.

Fixes #1322

**Testing performed**
Basic build and run tests
Run cppcheck against source

**Expected behavior changes**
Cppcheck does not report a syntax error

**System(s) tested on**
Ubuntu 22.04 (using cppcheck v2.7)

**Additional context**
Just a wrapper macro is enough to satisfy cppcheck.  Added a note that the missing second argument (return value) is intentional on a void function.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1323
Cppcheck flagging BUGCHECK macro as syntax error,"**Describe the bug**
The use of the `BUGCHECK` macro with the second argument blank looks suspicious and it is reported as a syntax error by newer versions of the `cppcheck` tool:

```
Checking src/os/shared/src/osapi-printf.c ...
src/os/shared/src/osapi-printf.c:269:30: error: syntax error [syntaxError]
    BUGCHECK((String) != NULL, )
                             ^
```

**To Reproduce**
Execute a recent version of `cppcheck` against OSAL source code - observed in version 2.7.

**Expected behavior**
Should pass cleanly

**System observed on:**
Ubuntu 22.04

**Additional context**
The second argument being blank here is intentional, because it is a return value and this is a void function, so it needs to be empty.  The syntax is actually valid but it is just a bit unusual.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, draco-rc4",https://github.com/nasa/osal/issues/1322
"Fix #1262, Update incorrect function header comment","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #1262
Updates incorrect function purpose in function header comment.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
None. Comments change only.

**Contributor Info**
Avi Weiss @thnkslprpt","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1321
osal Integration candidate: Caelum-rc4+dev27,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1319. Addresses Issue #1318

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/606/checks)
[osal Checks](https://github.com/nasa/osal/pull/1320/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",draco-rc4,https://github.com/nasa/osal/pull/1320
"Fix #1318, adjust timing on condvar tests","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
The order of task wakeup when using OS_CondVarSignal() with multiple tasks pending may not be guaranteed.  This relaxes the test case so that a specific order is not assumed/required.  This also adjust certain sleep times to make sure the test waits long enough for the tasks to do the expected work.

Fixes #1318 

**Testing performed**
Execute the ""condvar"" test multiple times
Execute github workflows

**Expected behavior changes**
Should resolve/avoid intermittent failure due to tasks not running in expected order

**System(s) tested on**
Ubuntu 22.04

**Additional context**
As this failure was intermittent, this needs to be watched in the future to confirm there is no more failure

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",draco-rc4,https://github.com/nasa/osal/pull/1319
Intermittent failure in condvar functional test,"**Describe the bug**
Occasionally the ""condvar"" functional test fails with an unexpected result, snippet of the test log here:

```
[ PASS] 02.017 condvar-test.c:170 - curr_condition (5) != ALL_RUN_CONDITION (7)
[ PASS] 02.018 condvar-test.c:171 - curr_condition (5) != 0 (0)
[ FAIL] 02.019 condvar-test.c:172 - task_states[i].run_count (0) == 1 (1)
```

The test case is expecting that the tasks will wake up in the same order on which they started pending on the condvar, but in this run, the second task woke up before the first task did.

**To Reproduce**
Intermittent issue, not directly reproducible.  Not seen running locally, seems to occur only on cloud hosts where perhaps timing is not as accurate and system load is not predictable.

**Expected behavior**
Tests should pass

**System observed on:**
Github workflow

**Additional context**
As POSIX does not specifically guarantee an execution order here, this test case should be relaxed and not assume that tasks will execute work in the order they started.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",draco-rc4,https://github.com/nasa/osal/issues/1318
Allow UT assert tests to specify default verbosity,"**Is your feature request related to a problem? Please describe.**
By default, UT assert runs in verbose (not debug) mode, where all calls to any assert macro are added to a log, except for DEBUG messages.  This means there is a record of tests that PASS, which is generally desired for coverage testing.

However, if doing fuzz testing, the point is to run a test against a large, random data set and as such there may be thousands (or even millions) of assertions.  This will result in a very large log file full of ""PASS"" messages.

UT Assert does allow the verbosity to be set, but currently only via command line on a run-by-run basis.

**Describe the solution you'd like**
Allow a test to specify what its default verbosity is supposed to be.  For fuzz testing this can be a lower value than the normal coverage testing default.  

**Describe alternatives you've considered**
Currently test cases that run in a loop or otherwise would generate a large number of PASS results use a pattern where the result is checked directly in the test code, e.g.:

```
if (status != expected)
{
    UtAssert_Failed(""message"");
}
```

Such that an assertion is only logged if it fails.  However, a side effect of this means that the ""pass"" counter and total test counter does not increment to reflect that something was tested/checked - it only increments if it fails.  In contrast, by using the normal assert macro but reducing the verbosity means that the counters will still increment, it just doesn't write a log entry for PASS cases.  Furthermore, a user could manually _increase_ the log level if they actually do want to see them all.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1317
Add random number capability for OSAL and UT assert,"**Is your feature request related to a problem? Please describe.**
There are some circumstances where software (validly) needs high-quality random numbers, such as for cryptographic algorithms.  The ISO C standard API is not sufficient, as functions like `rand()` are only psuedo-random and thus are not useful for algorithms where true randomness is necessary.

Furthermore, to support the notion of ""fuzz testing"" the UT assert framework should also have a facility to easily get random numbers.

**Describe the solution you'd like**
Many OS's have a facility to interface with a true hardware random number generator or get much higher-quality random numbers through software by gathering entropy from a local platform-specific source (like keystrokes or mouse movements, or electrical noise from an ADC, etc).

**Describe alternatives you've considered**
Initially, this can be as simple as calling `srand()` once during startup with an unpredictable value, or the system clock tick counter if no real random source is available.  This way, if the application does call `rand()`, the numbers at least will not be the same every time.  

That would be good enough for low impact tasks like fuzz testing and things of that nature, but wouldn't be sufficient for crypto.

**Additional context**
To clarify - fuzz testing described here is a functional test concept, independent of coverage testing.  For coverage testing using UT assert, it is important that the test case follows predictable branches, and thus random numbers should **not** be used there.  Fuzz testing, if implemented, would be done as a completely separate test.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1316
Fixed Path Mapping not always working,"**Describe the bug**
Using the fixed path mapping function OS_FileSysAddFixedMap() with paths like **/ram0/cf** and **/ffx0/cf** will only work once.

**To Reproduce**

OS_FileSysAddFixedMap( , ""/ram0/cf"", ""/cf1"");
OS_FileSysAddFixedMap( , ""/ffx0/cf"", ""/cf2"");

**Expected behavior**
Both paths should be included in the object table

**Code snips**
This is the part of code that generates a unique dev_name, but 
https://github.com/nasa/osal/blob/fa9671fa608ff5113f24990a78e6e7f8d47eb392/src/os/shared/src/osapi-filesys.c#L259-L267

**System observed on:**
 - Hardware: Aitech SP0
 - OS: VxWorks 6.9
 - Versions: Latest

**Additional context**


**Reporter Info**
Claudio Olmi, NASA JSC",bug,https://github.com/nasa/osal/issues/1315
osal Integration candidate: Caelum-rc4+dev26,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1311. Addresses Issue #1304
- PR #1310. Addresses Issue #1307
- PR #1313. Addresses Issue #1284
- PR #1306. Addresses Issue #1305
- PR #1309. Addresses Issue #1308

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/597/checks)
[osal Checks](https://github.com/nasa/osal/pull/1314/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey
@thnkslprpt",draco-rc4,https://github.com/nasa/osal/pull/1314
"Fix #1284, add export targets and package script","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds optional ""install"" commands to CMake script, which is useful when building OSAL as a standalone software package.  The public API and static libraries will be installed to the specified system location, and can then be used to compile and link external OSAL applications without the need for the original OSAL source or build trees.

Note this also installs the ""osconfig.h"" file as this does affect the binary formats of some items (i.e. size of items using OS_MAX_API_NAME and other similar structure members).  The external application must be compiled using the same osconfig.h after installation.

Fixes #1284

**Testing performed**
Build OSAL with both CFE and standalone and run all tests (existing build)

Then run ""make install"" on standalone build to stage headers and library binaries to a build tree.  Tested an external application to using `find_package(NasaOsal)` and building against the OSAL headers and binaries provided by that exported package.

**Expected behavior changes**
Exports a CMake package containing targets that can be used by OTHER builds without necessarily having the full OSAL source tree integrated into that project.

**System(s) tested on**
Ubuntu 22.04

**Additional context**
This is necessary when developing standalone (non-CFE) software that still uses OSAL to provide portability to different systems and/or does any unit testing (the exported packages includes UT assert).

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

","CCB:Ready, draco-rc4",https://github.com/nasa/osal/pull/1313
osal Integration candidate: Caelum-rc4+dev25,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1283, rtems queue multi-size, mimic posix logic
- PR #1291, cmake script modernization
- PR #1298, Create CHANGELOG.md

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/590/checks)
[osal Checks](https://github.com/nasa/osal/pull/1312/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@thesamprice
@jphickey
@thnkslprpt",draco-rc4,https://github.com/nasa/osal/pull/1312
"Fix #1304, locks for condvar objects on rtems/vxworks","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Instantiate the condvar lock on rtems and vxworks even though the feature is not currently implemented.  This is because OS_MAX_CONDVARS must still be nonzero and if the ""Create"" function is called, it still goes through the motions of allocating an ID.

This also adds a NULL check in the lock implementation, and thus if a lock is not instantiated in the future this will not dereference a NULL pointer.

Fixes #1304

**Testing performed**
Build and run all tests

**Expected behavior changes**
Missing lock is instantiated
Add null check - Avoids possible null dereference in the event of a missing lock in the future

**System(s) tested on**
Ubuntu 22.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1311
"Fix #1307, Add time conversion reciprocal functions","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds the following APIs which are direct reciprocals of the existing time conversion functions:

```
OS_time_t OS_TimeFromTotalSeconds(int64 tm)
OS_time_t OS_TimeFromTotalMilliseconds(int64 tm)
OS_time_t OS_TimeFromTotalMicroseconds(int64 tm)
OS_time_t OS_TimeFromTotalNanoseconds(int64 tm)
```

Fixes #1307

**Testing performed**
Added test cases to cover the new APIs
Build and run all tests to confirm that the new functions are working as intended

**Expected behavior changes**
Adds reciprocal operations for existing time conversions

**System(s) tested on**
Ubuntu 22.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1310
"Fix #1308, Remove redundant/inconsistent comments (/* end of function */, /* end if */ etc.) and clean up empty lines.","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #1308
Removes redundant and inconsistent comments (e.g. `/* end of function */`, `/* end if */`, function name in function header comments).
There were also a few cases of unnecessary empty lines (e.g. on the last line before the closing brace of a function) and also missing empty lines (e.g. between functions) which were corrected. Some of these empty lines trigger the CI format checks.
I've left the commits separated for now to make life easier for whoever reviews this. I can squash them if/when this is ready for merge.

**Testing performed**
None (comment and whitespace changes only).

**Expected behavior changes**
No impact on behavior.
These updates will reduce clutter and inconsistency in the code, improving readability.

**Contributor Info**
@thnkslprpt ",draco-rc4,https://github.com/nasa/osal/pull/1309
"Redundant comments (/* end of function */, /* end if */ etc.) and clean up empty lines.","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Copy of https://github.com/nasa/to_lab/issues/68 and https://github.com/nasa/sample_app/issues/111
There are quite a few redundant comments in the code, such as:
- `/* end of function */`-type comments
- `/* end if */`-type comments
- function header comments which include the function name

Another minor issue has to do with empty lines:
a) _unnecessary_ empty lines (e.g. first line after the opening brace of a function/struct, or the last line before the closing brace - the latter apparently sometimes triggers the CI format checks).
b) _missing_ empty lines between functions (i.e. closing brace of last function, then next function beginning on the immediately next line without an empty line in between)

The unnecessary empty lines (at the beginning or end of a function, for example) represent a low single-digit percentage of the cases (the vast majority of functions/structs do not have these extra empty lines), so there is an argument to remove them purely for consistency, not just due to them being redundant and triggering the CI format checks.

**Expected behavior**
Remove redundant comments to reduce clutter and inconsistency in the code, and improve readability.

**Reporter Info**
@thnkslprpt ",draco-rc4,https://github.com/nasa/osal/issues/1308
"Time conversion routines should include inverse of ""Total"" functions","**Is your feature request related to a problem? Please describe.**
OSAL provides a number of time APIs to convert `OS_time_t` values into different standard units, all of which return an `int64` so as to represent the largest possible range (within C99 at least):

```
int64 OS_TimeGetTotalSeconds(OS_time_t tm)
int64 OS_TimeGetTotalMilliseconds(OS_time_t tm)
int64 OS_TimeGetTotalMicroseconds(OS_time_t tm)
int64 OS_TimeGetTotalNanoseconds(OS_time_t tm)
```

However, there is no direct inverse function.  For example, there is no way to go from an interval expressed in total milliseconds (such as the return value from `OS_TimeGetTotalMilliseconds()` back into an `OS_time_t` value.  

The original assumption was that the user should be able to use `OS_TimeAssembleFromMilliseconds()` to perform this task, but that is not a direct inverse as it takes two arguments - seconds and milliseconds - the latter of which is only 32-bits in size.  Thus the user must do divide and modulus operations to convert the single `int64` value to seconds and milliseconds, then use the OSAL API to recombine them again.

This results in a lot of extra math and complexity.

**Describe the solution you'd like**
Add 4 new functions which would be a true inverse operation of the 4 APIs listed above.  These would take a single `int64` as an input, and return an `OS_time_t` back:

```
OS_time_t OS_TimeFromTotalSeconds(int64 tm)
OS_time_t OS_TimeFromTotalMilliseconds(int64 tm)
OS_time_t OS_TimeFromTotalMicroseconds(int64 tm)
OS_time_t OS_TimeFromTotalNanoseconds(int64 tm)
```

The relationship should be such that calling e.g. `OS_TimeFromTotalMilliseconds(OS_TimeGetTotalMilliseconds(tm))` returns the original `OS_time_t` value again (within reasonable overflow limitations, particularly in the case of nanoseconds)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",draco-rc4,https://github.com/nasa/osal/issues/1307
"Fix #1305, Stop empty function catching CI workflow format checks","**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Quick fix of #1305

**Testing performed**
None

**Expected behavior changes**
Empty function will stop catching up workflow check and causing its failure.

**Contributor Info - All information REQUIRED for consideration of pull request**
@thnkslprpt 
","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1306
CI Workflow check catching empty function,"        > > @thnkslprpt Can you fix the issue pointed out in the format check workflow
> 
> Can I still address these now that the issue is closed and PR merged?

That's a good point, you may need to open a new PR to address it. You could either reopen the original issue or create a new one specific to the format check error. Let me know if you'd like me to create an issue for you. Thanks again!

_Originally posted by @dzbaker in https://github.com/nasa/osal/issues/1294#issuecomment-1269984889_
      ",draco-rc4,https://github.com/nasa/osal/issues/1305
Array access overflow in src/os/vxworks/src/os-impl-idmap.c,"**Describe the bug**
Array access overflow in src/os/vxworks/src/os-impl-idmap.c

**To Reproduce**
Enable FM in cFS on VxWorks. Streaming `semTake`/`semGive` errors should occur when `OSAL_CONFIG_DEBUG_PRINTF` is enabled

**Expected behavior**
Error printouts should not occur

**Code snips**
This [PR](https://github.com/nasa/osal/pull/1278) adds the following lines:
https://github.com/nasa/osal/blob/b8e9b83c9a09c8e47ee796105d2a1aed3001db56/src/os/shared/src/osapi-idmap.c#L163-L164

This allows `OS_OBJECT_TYPE_OS_CONDVAR` to become a valid index for the `OS_ObjectIdIteratorInit()->OS_ObjectIdTransactionInit()->OS_Lock_Global()->OS_Lock_Global_Impl()` call chain. Unfortunately, `OS_impl_objtype_lock_table` for VxWorks does not contain an entry for `OS_OBJECT_TYPE_OS_CONDVAR`:

https://github.com/nasa/osal/blob/b8e9b83c9a09c8e47ee796105d2a1aed3001db56/src/os/vxworks/src/os-impl-idmap.c#L74-L87

`OS_Lock_Global_Impl`/`OS_Unlock_Global_Impl` runs past the end of the array, which results in invalid vxids being passed to `semTake()`/`semGive()`

**System observed on:**
 - SP0-s (Simics)
 - OS: VxWorks
 - Versions: CFE: 9f42688b2bf92e18c6faf9e7ce1f9a4f2ea08316, OSAL: 38559d447fdeb1a85f8bb09938df30d7a50918a4, PSP (gateway): f1c952121ea73b0de50eeb62ef3c0bd9d4609ca0, FM: 6ed4fc2407cfc2f2c9db97bfea2a515c5416e480 )

**Additional context**

**Reporter Info**
John N Pham, Northrop Grumman ",draco-rc4,https://github.com/nasa/osal/issues/1304
Implicit declaration of function errors,"**Describe the bug**
Make fails due to implicit declaration of function errors for `fileno` and `fchmod` in uttools.c file

**To Reproduce**
Steps to reproduce the behavior:
1. Clone main cFS build
1. Copy Makefile and sample_defs as instructed
1. 
```
make prep
make
```
Error happens during the make build in the uttools.c file.

**Expected behavior**
Clean build of cFS OSAL module

**Code snips**
```C
~/cFS/osal/ut_assert/src/uttools.c:63:14: error: implicit declaration of function ‘fileno’ [-Werror=implicit-function-declaration]
   63 |         fd = fileno(fp);
      |              ^~~~~~
~/cFS/osal/ut_assert/src/uttools.c:66:13: error: implicit declaration of function ‘fchmod’; did you mean ‘chmod’? [-Werror=implicit-function-declaration]
   66 |             fchmod(fd, dststat.st_mode & ~(S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH));
      |             ^~~~~~
      |             chmod
```

**System observed on:**
 - x86_64 system
 - OS: Ubuntu 22.04
 - Versions: most recent commits.

**Reporter Info**
Ben L.
",draco-rc4,https://github.com/nasa/osal/issues/1303
Bump to v7.0.0-rc4+dev120,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1301, do not set file permissions on UT assert outputs

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/587/checks)
[osal Checks](https://github.com/nasa/osal/pull/1302/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@dmknutsen
@jphickey ",draco-rc4,https://github.com/nasa/osal/pull/1302
"Fix #1300, do not set file permissions on UT assert outputs","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
File permissions in general are a POSIX concept, but this tool should be pure C99.  It should not rely on any POSIX headers or POSIX-specific API calls.

Fixes #1300

**Testing performed**
Build and run tests

**Expected behavior changes**
No more build failures

**System(s) tested on**
Ubuntu 22.04

**Additional context**
Setting permissions explicitly is not really necessary.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Ready, CCB:FastTrack, draco-rc4",https://github.com/nasa/osal/pull/1301
Direct use of POSIX permission setting in UT assert,"**Describe the bug**
The UT assert framework is supposed to be portable, and this should adhere to strict C99.

However, in the goal of squelching a bogus CodeQL warning - some POSIX-specific logic got added in #827.  This seemed to work (likely because it was never run on a non-POSIX OS) until it was changed to use a different POSIX API (fstat/fchmod) to address another bogus CodeQL warning.

Now, builds are failing because the APIs used are marked as POSIX-specific but we are not compiling this code with `_POSIX_C_SOURCE` (nor should we, because its supposed to be pure C99).

This is currently breaking the mainline build.

**To Reproduce**
Build UT assert - get the error:
```
/home/runner/work/CF/CF/osal/ut_assert/src/uttools.c: In function ‘UtMem2BinFile’:
/home/runner/work/CF/CF/osal/ut_assert/src/uttools.c:63:14: error: implicit declaration of function ‘fileno’; did you mean ‘fopen’? [-Werror=implicit-function-declaration]
         fd = fileno(fp);
              ^~~~~~
              fopen
/home/runner/work/CF/CF/osal/ut_assert/src/uttools.c:66:13: error: implicit declaration of function ‘fchmod’; did you mean ‘chmod’? [-Werror=implicit-function-declaration]
             fchmod(fd, dststat.st_mode & ~(S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH));
             ^~~~~~
             chmod
```

This is directly from the validation workflow on a recent CF change.

**System observed on:**
Ubuntu (various)

**Additional context**
The CodeQL warnings about file permissions ""not being set"" are not really valid.  UNIX still allows file permissions to be set by the user, in the form of the umask setting.  So the permissions on a file created using pure C99 stdio calls (`fopen`) are not ""unset"" - they are just not set directly by the application, they are controlled externally.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, draco-rc4",https://github.com/nasa/osal/issues/1300
osal Integration candidate: Caelum-rc4+dev23,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1181, Use fstat and fchmod for TOCTOU Bug
- PR #1294, Remove 'return;' from last line of void functions.
- PR #1292, Remove unnecessary parentheses around return values.

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/586/checks)
[osal Checks](https://github.com/nasa/osal/pull/1299/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@ArielSAdamsNASA
@thnkslprpt",draco-rc4,https://github.com/nasa/osal/pull/1299
"Fix #552, Create CHANGELOG.md","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #552

**Testing performed**
None.

**Expected behavior changes**
Minimizes unnecessary clutter in README.md

**Contributor Info**
@thnkslprpt ","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1298
"Fix #1296, Adding commit-msg hook, copy to .git/hooks to enable.","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Adds a githook that matches the regex that the server side checks for.
- Include explicitly what issue it addresses [e.g. Fixes #1296 ]

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
 - Note CLAs apply to only software contributions.
",,https://github.com/nasa/osal/pull/1297
Enforce commit message name rule as githook,"**Is your feature request related to a problem? Please describe.**
Enforce commit message name rule as githook

I'm always frustrated when I push and then have to go back and rework my history.

**Describe the solution you'd like**
Git doesnt event let me commit changes.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.
Vacations?

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Sam Price
","wontfix, continuous-integration",https://github.com/nasa/osal/issues/1296
Potentially unsafe use of strcat,"**Describe the bug**
May cause buffer overflow since the size of the source string is not checked.

**Expected behavior**
Same behavior with check.

**Code snips**
https://github.com/nasa/osal/blob/06e2be98dcb28145bd0c0030e93bc4e659cf9b20/src/unit-test-coverage/ut-stubs/src/libc-string-stubs.c#L139-L139

**Additional context**
Caught by CodeQL. Severity is rated at critical. 
Can remove since it is part of coverage testing.

**Reporter Info**
Ariel Adams, MCSG Tech
",enhancement,https://github.com/nasa/osal/issues/1295
"Fix #1293, Remove 'return;' from last line of void functions.","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #1293
Removes all cases of redundant ""return;"" statements on the last line of void functions.

**Testing performed**
None, prior to submission.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
@thnkslprpt ","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1294
"Remove ""return;"" from last line of void functions","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
""return;"" at last line in void function is redundant.
Copy of https://github.com/nasa/cFE/issues/1540

**Describe the solution you'd like**
Remove

**Reporter Info**
@thnkslprpt ",draco-rc4,https://github.com/nasa/osal/issues/1293
"Fix #866, Remove unnecessary parentheses around return values.","**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #866
Removes parentheses in return statements in OSAL that return a single value/term.
This is aligns these return statements with the predominant style of cFS.

**Testing performed**
None, prior to submission of the pull request.

**Expected behavior changes**
No impact on behavior.

**System(s) tested on**
n/a

**Contributor Info - All information REQUIRED for consideration of pull request**
@thnkslprpt ","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1292
"Fix #1289, cmake script modernization","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Use target properties to define interfaces and compiler definitions rather than referencing global variables or using ""known"" paths in other modules.  This better aligns with current practices and creates a more robust build environment that is less dependent on specific path names existing in a given module.

This adds an ""osal_public_api"" interface target that contains the paths to the public API headers as its INTERFACE_INCLUDE_DIRECTORIES and any required compiler definitions as its INTERFACE_COMPILE_DEFINITIONS property.  Applications should use this rather than referring to the ""${OSAL_SOURCE_DIR}/src/os/inc"" include path directly.

Fixes #1289 

**Testing performed**
Build and confirm OSAL successfully builds on various platforms including Ubuntu 22.04 (new-ish CMake) and 18.04 (old-ish CMake).

**Expected behavior changes**
No impact to runtime behavior (no actual source code changes here)

Build script makes more use of CMake ""INTERFACE"" libraries to communicate compiler options, include paths, and definitions to dependencies, moving away from using global variables to perform this task.  Notably, this permits the targets to be imported into another build more easily.

**System(s) tested on**
Ubuntu 18.04 and 22.04 (native, newer and older CMake)
RTEMS 4.11 and 5.0

**Additional context**
All changes should be backward compatible, in that the ""magic variables"" are still being honored as the current version of the CMake script had previously implemented:

- OSAL_API_INCLUDE_DIRECTORIES (input)
- OSAL_USER_C_FLAGS (input)
-  UT_COVERAGE_COMPILE_FLAGS (output)
-  UT_COVERAGE_LINK_FLAGS (output)

The preferred method of configuring these items going forward would be to get/set the corresponding properties on the `osal_public_api` interface target for include directories and compile options, and use the `ut_coverage_compile` and `ut_coverage_link` interface targets for coverage testing flags.  Defining both methods for now allows for transition.  

If the OSAL_OMIT_DEPRECATED flag is set, then the UT_COVERAGE flags will not be exported.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1291
Free space calculations work for anything less than 4G but will fail for anything above 4G,"On PACE we noticed the upper bits of the free space entry jumping.

The bug is in the function OS_fsBytesFree in the file osal/src/os/vxworks6
The function has the following line
bytes_free_local = stat_buf.f_bfree * stat_buf.f_bsize;
where bytes_free_local is a uint64 and the bfree and bsize are 32 bit numbers. When the result of the multiplication is a number greater than 0xFFFF FFFF, bytes_free_local gives an incorrect result, where lower 32 bits are correct but upper 32 bits is set to 0xFFFFFFFF

The line was modified as follows to give the right results when bytes_free_local is greater than 4GBytes
bytes_free_local = (uint64)((uint64)(stat_buf.f_bfree) * (uint64)(stat_buf.f_bsize));
","duplicate, draco-rc4",https://github.com/nasa/osal/issues/1290
Clean up remaining deprecated/obsolete features used by the CMake scripts,"**Is your feature request related to a problem? Please describe.**
In recent years the CMake build has been adopting the current best-practices whenever feasible to do so, and moving away from features that have been marked as obsolete or deprecated.

- Use interface properties to propagate compiler flags, definitions, etc to dependencies, rather than setting ""magic variables"" that need to be known by the dependency
- Prefer `target_include_directories` as opposed to `include_directories` at directory scope
- Prefer `target_compile_definitions` as opposed to `add_definitions` at directory scope
- Use of `target_link_libraries` should include the scope keyword (PUBLIC/PRIVATE) rather than the ""bare"" signature (also noted by CFE user in nasa/cfe#2141)

**Describe the solution you'd like**
In particular - the following specific areas should be modernized:

- Public API location should be an interface library: https://github.com/nasa/osal/blob/38559d447fdeb1a85f8bb09938df30d7a50918a4/CMakeLists.txt#L89
- Management of impl-specific flags can also be done via interface library rather than manual propagation here: https://github.com/nasa/osal/blob/38559d447fdeb1a85f8bb09938df30d7a50918a4/CMakeLists.txt#L154-L163
- Use scope keyword on link libraries: https://github.com/nasa/osal/blob/38559d447fdeb1a85f8bb09938df30d7a50918a4/CMakeLists.txt#L282
- Implement UT coverage interface library as alternative to ""flag variables"" exported here: https://github.com/nasa/osal/blob/38559d447fdeb1a85f8bb09938df30d7a50918a4/CMakeLists.txt#L354-L355

**Additional context**
It is not currently possible to propagate the UT coverage flags if OSAL and the application are in separate builds.

Using the target-scope features and interface libraries is of particular benefit to making a proper OSAL ""package"" that can be compiled and linked separately from the application (see #1284)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",draco-rc4,https://github.com/nasa/osal/issues/1289
Add condition variable implementation for VxWorks,"**Is your feature request related to a problem? Please describe.**
Pull Request #1278 added a condition variable API implementation for POSIX, but RTEMS and VxWorks were set to use the ""not-impl"" module, with a plan to implement in the future.

**Describe the solution you'd like**
Add an implementation of condition variables for VxWorks 7.x

**Additional Context**
Only VxWorks 7.x is likely to be supportable, version 6.x will still need to use the ""not-impl"" module because the underlying sync mechanism may not exist.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1288
Add condition variable implementation for RTEMS,"**Is your feature request related to a problem? Please describe.**
Pull Request #1278 added a condition variable API implementation for POSIX, but RTEMS and VxWorks were set to use the ""not-impl"" module, with a plan to implement in the future.

**Describe the solution you'd like**
Add an implementation of condition variables for RTEMS

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1287
osal Integration candidate: Caelum-rc4+dev21,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1278, condition variable API for OSAL

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/568/checks)
[osal Checks](https://github.com/nasa/osal/pull/1286/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",draco-rc4,https://github.com/nasa/osal/pull/1286
"Complexity of ARGCHECK macros trigger JPL rule 24, multiple statements per line","**Is your feature request related to a problem? Please describe.**
Consider reworking ARGCHECK.  Although it reduces repeated lines in code, it does ""hide"" a return within the macro and isn't really the simplest macro when combined with OS_CHECK_STRING or similar.  Note it works... it's just not a trivial macro so ends up triggering coding standard warnings.

**Describe the solution you'd like**
Although we did just disable the warning in https://github.com/nasa/cFS/pull/561, it's a warning that would be good to apply to non-macro code at least.  Really this issue trades macro complexity with function complexity where there is no real right answer in my mind.  The point if this issue is to at least document this for future consideration, not necessarily back out the changes.

**Describe alternatives you've considered**
Leave as-is

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/1285
Standalone OSAL build should export a package for use by other builds,"**Is your feature request related to a problem? Please describe.**
OSAL is not standalone software that is typically installed on a PC, but rather it is always a component that is intended to be used within a larger software application.

Currently the CMake build does work in a standalone fashion (i.e. one can invoke `cmake </path/to/osal>` and build the software) and the software can be compiled but the result isn't really usable for inclusion in a larger app.  That is, there is no easy way for another (separate) application that needs to use OSAL to reference the headers and static library.

**Describe the solution you'd like**
CMake has a method for referencing a dependency through its import/export and packaging functionality described here: https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html

**Additional context**
Note this is _not_ necessary when building cFS - in that mode, OSAL is just included as a subdirectory within the larger build, and this should still be supported as an option for other (non-CFS) builds as well.  That is, the user can simply call `add_subdirectory(/path/to/osal)` from their application build, and link to the provided `osal` library as a regular target.  The export target is only useful in cases where OSAL is built as a standalone software application.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, draco-rc4",https://github.com/nasa/osal/issues/1284
"Fix #1279, rtems queue multi-size, mimic posix logic","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Refactor rtems queue to not do size check, and to mimic posix logic.

Fixes #1279 

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
 - Note CLAs apply to only software contributions.
","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1283
"Fix #1281, Rtems On task creation register name.","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [ ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Registers task name with rtems on creation
 Fixes #1281 

**Testing performed**
Steps taken to test the contribution:
Ran on microblaze, typed cpuuse in rtems task, saw names.

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: microblaze kcu105
 - OS:RTEMS


**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Nasa/ GSFC

",wontfix,https://github.com/nasa/osal/pull/1282
Rtems should show task names when typing `cpuuse`,"**Describe the bug**
typing `cpuuse` in console should show rtems names.

Add the following bits to `OS_TaskCreate_Impl` in rtems
```C
#include <rtems/score/threadimpl.h>
...
    ISR_lock_Context  lock_context_1;
    Thread_Control *the_thread;
...
    the_thread = _Thread_Get(impl->id, &lock_context_1 );
    _Thread_Set_name(the_thread, task->task_name);
    
```

**Expected behavior**
rtems should register its name, so it shows up when using rtems commands.

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - Hardware microblaze
 - OS: rtems 6

**Additional context**
Better debug info in rtems

**Reporter Info**
Nasa
",enhancement,https://github.com/nasa/osal/issues/1281
"Fix #1279, rtems allow variable length queue msgs.","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.
NA as Gov employee? NA as removing code not adding?

**Describe the contribution**
A clear and concise description of what the contribution is.
Drops check on size != rtems_size to allow variable length queue messages.
Matches the posix queue implementation.

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
Built and ran a non cfs system using posix.
built and ran the same cfs system using rtems, this fix allowed system to run.

1. Execution steps '...'
Ran on RTEMS on microblaze.

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: RTEMS queues changed to match posix queues for variable length messages 

**System(s) tested on**
RTEMS / Microblaze

**Additional context**
Add any other context about the contribution here.

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
NASA GSFC

",,https://github.com/nasa/osal/pull/1280
RTEMS osal queue mixed sizes,"**Describe the bug**
Im using queues to send variable length messages.
RTEMS queue get returns an error if the message queue returned size is not the max buffer size.
https://github.com/nasa/osal/blob/main/src/os/rtems/src/os-impl-queues.c#L235

This doesn't match the posix implementation.
https://github.com/nasa/osal/blob/main/src/os/posix/src/os-impl-queues.c#L194

The above logic in `shared/src/osapi-queue.c` uses `OS_QUEUE_INVALID_SIZE` If the queue size is greater than the buffer provided.
```c
        if (size < queue->max_size)
        {
            /*
            ** The buffer that the user is passing in is potentially too small
            */
            *size_copied = 0;
            return_code  = OS_QUEUE_INVALID_SIZE;
        }
```

**To Reproduce**
Steps to reproduce the behavior:
Visual inspection.

**Expected behavior**
Follow the posix logic.

**Code snips**
See above

**System observed on:**
MIcroblaze

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Sam Price 
","enhancement, draco-rc4",https://github.com/nasa/osal/issues/1279
"Fix #1252, condition variable API for OSAL","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Implementation of condition variable API for OSAL

Currently implemented only for POSIX, RTEMS can be added with future commit.

**Testing performed**
Coverage and functional test of condvar API is included

**Expected behavior changes**
Adds condition variable API

**System(s) tested on**
Ubuntu 22.04

**Additional context**
The BP/DTN implementation (https://github.com/nasa/bplib) makes use of condition variables to signal between worker tasks.  In order to support running this library natively, OSAL would need to provide this set of functionality.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, draco-rc4",https://github.com/nasa/osal/pull/1278
osal Integration candidate: Caelum-rc4+dev15,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1274, Remove stray terminators
- PR #1276, Add RTEMS timebase callback wrapper

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/536/checks)
[osal Checks](https://github.com/nasa/osal/pull/1277/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper
@pepepr08",draco-rc3,https://github.com/nasa/osal/pull/1277
"Fix #1244, Add RTEMS timebase callback wrapper","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #1244 by creating a wrapper function to convert timebase callback task argument from rtems_task_argument into osal_id_t

**Testing performed**
Steps taken to test the contribution:
1. Built with `OMIT_DEPRECATED = true` and `MISSION_RESOURCEID_MODE = ""STRICT""` for RTEMS/GR740
2. Run and verify successful cFS init

**System(s) tested on**
 - Hardware: GR740
 - OS: RTEMS 5
 - Versions: Draco-rc2 +

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F Martinez Pedraza / NASA GSFC code 582
","CCB:Approved, draco-rc3",https://github.com/nasa/osal/pull/1276
osal Integration candidate: Caelum-rc4+dev14,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #1272, Ensure address alignment of TCB for VxWorks 7

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/532/checks)
[osal Checks](https://github.com/nasa/osal/pull/1275/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
skliper",draco-rc3,https://github.com/nasa/osal/pull/1275
"Fix #1273, Remove stray terminators","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #1273

**Testing performed**
CI

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/osal/pull/1274
Remove stray terminators,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/osal/blob/1de47bb10050b9bdae46974f24a34281b53e4949/src/unit-tests/osfile-test/ut_osfile_test.c#L81
https://github.com/nasa/osal/blob/1de47bb10050b9bdae46974f24a34281b53e4949/src/unit-tests/osfile-test/ut_osfile_test.c#L89

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc3",https://github.com/nasa/osal/issues/1273
"Fix #1271, Ensure address alignment of TCB for VxWorks 7","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #1271

**Testing performed**
CI

**Expected behavior changes**
Resolves bug, otherwise no change in behavior

**System(s) tested on**
CI, will try to coordinate testing the fix on a real VxWorks 7, 32-bit platform

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/osal/pull/1272
Address alignment issue in VxWorks 7 on 32 bit processor,"**Describe the bug**
The task control bock (TCB) has an element with a 64 bit alignment requirement on some processors, but the way the OS_impl_task_internal_record_t is defined for VxWorks 7 does not enforce 64 bit alignment on a 32 bit system.  This causes taskInitialize to fail.

Note the use of a char array in the structure here:
https://github.com/nasa/osal/blob/1de47bb10050b9bdae46974f24a34281b53e4949/src/os/vxworks/inc/os-impl-tasks.h#L32-L47

Used here:
https://github.com/nasa/osal/blob/1de47bb10050b9bdae46974f24a34281b53e4949/src/os/vxworks/src/os-impl-tasks.c#L236-L243

**To Reproduce**
Need to get into a situation where the internal task record (and tcb since it's the first element) is not on a 64 bit boundary, and get's passed into taskInitialize, on a system that errors out if a 64 bit structure element isn't on a boundary.  Observed on GR712RC.

**Expected behavior**
Should initialize tasks successfully.  As a quick test a `uint64 val;` was added to the internal task record, forcing alignment and the task initialization worked.

**System observed on:**
 - Hardware: GR712RC
 - OS: VxWorks 7
 - Versions: should be observable in Caelum or later

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC
","bug, draco-rc3",https://github.com/nasa/osal/issues/1271
Consider skipping/truncating symbol if name to long,"os-impl-sytab::OS_SymTableIteratro_Impl will exit a symbol table dump if it detects a symbol name that violates the maximum defined length.  This results in an inability to dump the symbol map if a symbol does violate the max length.  Consider skipping the symbol or truncating it + notify user via entry in dump file.

    if (memchr(name, 0, OS_MAX_SYM_LEN) == NULL)
    {
        OS_DEBUG(""%s(): symbol name too long\n"", __func__);
        state->StatusCode = OS_ERR_NAME_TOO_LONG;
        return (false);
    }

path to file: osal/src/os/vxworks/src/os-impl-sytab.c

**Requester Info**
Dan Knutsen
NASA Goddard
","enhancement, draco-rc4",https://github.com/nasa/osal/issues/1270
read() vs OS_read() Clarification,"My application involves reading data from a serial device (IMU) in a nonblocking fashion. Furthermore, I am writing code for a particular linux architecture so benefits from the standpoint of enabling OS abstraction are not really important. So, other than that:
What is the difference between linux's read() and OS_read()?
Is there a specific one that is recommended given my situation? If so, why that one?",question,https://github.com/nasa/osal/issues/1269
osal Integration candidate: Caelum-rc4+dev12,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
PR #1267
- Fix #1263, Update cmake mimimum required to something more recent (or remove)

PR #1265
- Fix #1150, OSAL loader unit test builds hardcoded 32 modules, test fails if more modules are supported

PR #1264
- Fix #1263, Update cmake mimimum required to something more recent (or remove)

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/523/checks)
[osal Checks](https://github.com/nasa/osal/pull/1268/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
jphickey
dzbaker
skliper",draco-rc3,https://github.com/nasa/osal/pull/1268
"Fix #1263, Update minimum required cmake version","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #1263 

This updates the main minimum required version from 2.8.12 to 3.5

**Testing performed**
CI

**Expected behavior changes**
None, just updates minimum required version

**System(s) tested on**
CI

**Additional context**
- #1264

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc3",https://github.com/nasa/osal/pull/1267
OSAL wrapper around QT,"**Is your feature request related to a problem? Please describe.**
QT is an operating system abstraction layer that supports several different operating systems.
Would like to wrap an osal wrapper around QT

**Describe the solution you'd like**
Get a wrapper around QT.

**Describe alternatives you've considered**
- boost

**Additional context**
https://github.com/thesamprice/osal/tree/qt4/src/os/qt

Current status is it builds / links against qt, unit tests start to run.
Following needs done
- [ ] Work through getting the unit tests to run/ pass on mac
- [ ] Cleanup code / fix comments
- [ ] Work through getting unit tests to run/pass on windows


**Requester Info**

",enhancement,https://github.com/nasa/osal/issues/1266
"Fix #1150, Set OSAL Loader unit test number of modules to OSAL_CONFIG_MAX_MODULES.","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [ ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #1150

**Testing performed**
Printed value of MOD variable in CMakeLists.txt to ensure that it gets set to one more than the OSAL_CONFIG_MAX_MODULES value

Ran OSAL unit tests

**Expected behavior changes**
OSAL Loader unit tests will now support up to OSAL_CONFIG_MAX_MODULES modules.

**System(s) tested on**
 - OS: RHEL 8.6","CCB:Approved, draco-rc3",https://github.com/nasa/osal/pull/1265
"Fix #1263, update cmake_minimum_required","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Remove the extra/unneded cmake_minimum_required that was triggering a deprecation warning.  This will just inherit the minimum version of the parent.

Fixes #1263

**Testing performed**
Build using cmake 3.20

**Expected behavior changes**
No deprecation warning

**System(s) tested on**
RHEL 8

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, draco-rc3",https://github.com/nasa/osal/pull/1264
Update cmake mimimum required to something more recent (or remove),"**Is your feature request related to a problem? Please describe.**
The `cmake_minimum_required` command currently lists a very old version.  In fact some of the CFE/CFS build scripts assume at least version 3.5 to support things like target-specific includes and flags.

Notably, when using a recent version of cmake (e.g. 3.20) this generates a warning that says:

```
CMake Deprecation Warning at /home/jphickey/code/cfecfs/dtn/osal/src/unit-test-coverage/CMakeLists.txt:18 (cmake_minimum_required):
  Compatibility with CMake < 2.8.12 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.
```

**Describe the solution you'd like**
Update the cmake_minimum_version to 3.5 (this would match CFE)

**Additional context**
In this case the OSAL main project currently lists 2.8.12 so it does not generate a warning here (unlike some other modules which specified 2.6.4) but the ""unit-test-coverage"" submodule is where the problem lies.

However, in this case, as this is just added as a subdirectory from the main build - it probably does not need a separate minimum_version at all.  Suggestion would be to remove this line, it will inherit the minimum version from the top level project.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.","build-system, draco-rc3",https://github.com/nasa/osal/issues/1263
Comments incorrect on sockets,"**Describe the bug**
'src/os/portable/os-impl-bsd-sockets.c'
Shutdown comments refer to connecting.

```
/*----------------------------------------------------------------
   Function: OS_SocketShutdown_Impl
    Purpose: Connects the socket to a remote address.
             Socket must be of the STREAM variety.
    Returns: OS_SUCCESS on success, or relevant error code
 ------------------------------------------------------------------*/
int32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)
{
```


","good first issue, docs, draco-rc4",https://github.com/nasa/osal/issues/1262
bin sem test,"**Describe the bug**
Working through the unit tests for a qt port.
I hit a stumbling block on bin-sem-test.c function `BinSemCheck`.

When a task is deleted it may have registered callbacks with resources. 
In case of qt the task with a binary semaphore (QSemaphore) in a waiting state that gets deleted.
Ends up stalling the system when that QSemaphore is written to.


From what i gather free-rtos has a similar issue.

https://www.freertos.org/FreeRTOS_Support_Forum_Archive/August_2016/freertos_Releasing_Resources_on_Task_Exit_Delete_b113e7a9j.html

> Releasing Resources on Task Exit/Delete
> Posted by [rtel](http://sourceforge.net/users/rtel) on August 12, 2016
> If a semaphore is held by a task, and that task gets deleted, then there is nothing in the code that will automatically release the semaphore.  
> 
> Looking at the source code I don’t think there is an easy way around this.  The mutex can be reset by passing its handle into xQueueReset(), but then to make it a mutex rather than a queue you would need to call prvInitialiseMutex() too – and that function is not publicly accessible.
> 
> Perhaps, if you are 100% sure there are no other tasks blocked on the mutex, it could be deleted then re-created?



```c

void BinSemCheck(void)
{
    uint32            status;
    OS_bin_sem_prop_t bin_sem_prop;

    memset(&bin_sem_prop, 0, sizeof(bin_sem_prop));

    /* Delete the task, which should be pending in OS_BinSemTake() */
    status = OS_TaskDelete(task_1_id);
    UtAssert_True(status == OS_SUCCESS, ""OS_TaskDelete Rc=%d"", (int)status);

    status = OS_TimerDelete(timer_id);
    UtAssert_True(status == OS_SUCCESS, ""OS_TimerDelete Rc=%d"", (int)status);

    OS_TaskDelay(100);

    /* Confirm that the semaphore itself is still operational after task deletion */
    status = OS_BinSemGive(bin_sem_id); /* task 1 was pending on this, releasing this semaphore triggers task1 to wake up, but stalls out as it has been deleted */
    UtAssert_True(status == OS_SUCCESS, ""BinSem give Rc=%d"", (int)status);
```


A ctrl+c shows backtrace as follows.
```
* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP
  * frame #0: 0x00007fff207bf4ba libsystem_kernel.dylib`__psynch_mutexwait + 10
    frame #1: 0x00007fff207f02ab libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait + 76
    frame #2: 0x00007fff207ee192 libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow + 204
    frame #3: 0x0000000100185e6c QtCore`QWaitCondition::wakeAll() + 18
    frame #4: 0x0000000100183064 QtCore`QSemaphore::release(int) + 48
    frame #5: 0x000000010001236e bin-sem-test`::OS_BinSemGive_Impl(token=0x00007ffeefbfe918) at os-impl-binsem.cxx:247:19
    frame #6: 0x0000000100007f06 bin-sem-test`OS_BinSemGive(sem_id=262145) at osapi-binsem.c:168:23
    frame #7: 0x0000000100004e50 bin-sem-test`BinSemCheck at bin-sem-test.c:175:14
    ```

**System observed on:**
 - Hardware
 - OS: Qt 5, mac OS

**Additional context**
I subclassed my qt thread from the qt class, and have been using the terminate call.
I'll try a different method to see if that allows qt to cleanup semaphores from deleted tasks.

**Reporter Info**
Full name and company/organization if applicable
",question,https://github.com/nasa/osal/issues/1261
osal Integration candidate: Caelum-rc4+dev10,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**

PR #1255 
- Fix #1253, Resolve UT uninit vars static analysis warnings
- Fix #1254, Remove redundant checks in UT
- Part #1253, Resolve UT uninit vars static analysis warnings

PR #1257 

- Fix #1256, Add RTEMS 6 Support  

**Testing performed**

[cFS Bundle Checks](https://github.com/nasa/cFS/pull/492/checks)
[osal Checks](https://github.com/nasa/osal/pull/1260/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/492>
Commit and PR format-check failure expected for Integration Candidates

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
acudmore
skliper
",draco-rc2,https://github.com/nasa/osal/pull/1260
"Fix #1258, Add OS_StatusToString API","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #1258 

Related to:
- nasa/cFE#2110
- nasa/cFE#2010
- #1112

**Testing performed**
Added unit and functional tests, confirmed expected output

**Expected behavior changes**
None, just adds macro for future cleanup that will be Draco compliant

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
See links above.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/osal/pull/1259
Add OS_StatusToString API to support consistent status format representation in strings,"**Is your feature request related to a problem? Please describe.**
Related to https://github.com/nasa/cFE/issues/2010, providing an API (and using it) would resolve inconsistency in string representation of osal_status_t.

**Describe the solution you'd like**
Add `OS_StatusToString`

**Describe alternatives you've considered**
None

**Additional context**
- #1112

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc2",https://github.com/nasa/osal/issues/1258
"Fix #1256, add rtems 6 support","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**

- Fix #1256

These changes add support for RTEMS 6 in the RTEMS OSAL and pc-rtems OSAL BSP. The changes consist of modifications to the conditional compilation blocks and a couple of new conditional compilation blocks in the pc-rtems OSAL BSP startup code to account for an include and API that was deprecated in RTEMS 6.
In the RTEMS OSAL, the existing conditional compilation blocks were flipped from:

```
if RTEMS 5
   RTEMS 5 specific statement(s)
else
   RTEMS 4.11 specific statement(s)
endif
```

to:

```
if RTEMS 4.11
   RTEMS 4.11 specific statement(s)
else
   RTEMS 5 and above specific statement(s)
endif
```

By flipping the blocks as described above, it should work with future versions of RTEMS provided the API does not change.

There is also a change in the os-impl-loader.c file to solve a warning with GCC 12. GCC 12 is now used by RTEMS 6.

**Testing performed**
All tests were run on the QEMU RTEMS 4.11, QEMU RTEMS 5, and the new QEMU RTEMS 6 containers.

**Expected behavior changes**
There should be no impact to the behavior. All tests passed on RTEMS 4.11, 5, and 6.

**System(s) tested on**
QEMU x86 with pc-rtems RTEMS BSP and cFS pc-rtems platform. In addition these changes are being used on a generic-rtems platform that will be submitted in a future PR.

**Additional context**
This is the last set of code changes in the first round of RTEMS 6 updates described here:
https://github.com/nasa/cFS/discussions/468


**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Cudmore, NASA/GSFC Code 582.0","CCB:Approved, draco-rc2",https://github.com/nasa/osal/pull/1257
Add OSAL support for RTEMS 6,"**Is your feature request related to a problem? Please describe.**
RTEMS 6 is currently under development in the main branch of the RTEMS git repository. There are a few minor changes that have to be addressed in the OSAL code to support RTEMS 6.

**Describe the solution you'd like**
Modify the OSAL RTEMS implementation and OSAL pc-rtems BSP to support RTEMS 6 while still supporting RTEMS 4.11 and RTEMS 5.
This is done with approximately 6 minor changes. In the existing code there are conditional blocks selecting either RTEMS 5 and defaulting to RTEMS 4.11. For example:

```
ifdef _RTEMS_5_
   RTEMS 5 specific statement or define
else
   RTEMS 4.11 specific statement or define
endif
```

To support RTEMS 6, these blocks can be flipped as so:

```
ifdef OS_RTEMS_4_DEPRECATED
   RTEMS 4.11 specific statement or define
else
   RTEMS 5 and 6 (and hopefully future versions)
endif
```

By flipping these blocks, RTEMS 5 and 6 can be supported in the else block.

**Describe alternatives you've considered**
Alternatives include not supporting RTEMS 6, or just supporting RTEMS 6, neither of which are ideal. This solution will continue to support RTEMS 4.11, RTEMS 5, and add support for RTEMS 6.

**Additional context**
These changes depend on a number of other changes:
https://github.com/nasa/cFE/issues/2096
https://github.com/nasa/PSP/issues/338
https://github.com/nasa/osal/issues/1248
I will not submit a pull request for this fix until the above changes are all in the main branch of the cFS bundle.

**Requester Info**
Alan Cudmore, NASA/GSFC Code 582.0
","dependency, draco-rc2",https://github.com/nasa/osal/issues/1256
"Fix #1253 #1254, Resolve static analysis warnings","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #1253
- Fix #1254

**Testing performed**
CI + static analysis run

**Expected behavior changes**
None, just squashes static analysis warnings

**System(s) tested on**
 - Hardware: VM
 - OS: Ubuntu 18.04
 - Versions: Bundle main + apps + related static analysis resolution branches

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/osal/pull/1255
Redundant condition checks in UT,"**Is your feature request related to a problem? Please describe.**
Redundant conditions (unsigned int check >= 0) observed in UT

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, draco-rc2",https://github.com/nasa/osal/issues/1254
Uninitialized variable static analysis warnings in unit tests,"**Is your feature request related to a problem? Please describe.**
Uninitialized variable static analysis warnings observed for unit tests (license prevents publishing)

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, draco-rc2",https://github.com/nasa/osal/issues/1253
Add abstraction for condition variables,"**Is your feature request related to a problem? Please describe.**
POSIX condition variables can be useful for implementing worker thread pools, allowing worker task(s) to pend for work and dispatcher/manager tasks to unblock those workers once a job becomes available.  

**Describe the solution you'd like**
Abstraction of something like POSIX condition variables via OSAL APIs.

**Describe alternatives you've considered**
Some of the worker pool concepts may be implemented with simple semaphores, but those aren't ideal for some use cases:

- a counting sem needs a 1:1 relationship between gives and takes, so it is not ideal for cases where work can be ""batched"" - either where a single input can unblock multiple worker jobs, or multiple inputs can be handled by a single worker job.
- a binary sem helps the second case by capping the semaphore count at 1, such that multiple ""gives"" on the dispatch side only cause a single worker run.  But it does not allow for a dispatcher to unblock multiple workers, nor can it act on other conditions than a simple boolean.
 
Note that in the POSIX OSAL the binary semaphore is, in fact, implemented using condition variables underneath - where the condition is just a single boolean value.  But only this limited use-case is exposed/available to applications.  

As a backward-compatible compromise of sorts - it may be possible to build on the current binary sem concept but allow the application to register its own ""condition test"" routine beyond the simple boolean.  

**Additional context**
VxWorks support is not fully clear, I think VxWorks 7 has the underlying APIs to implement this, but 6.x might not.  

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, draco-rc4",https://github.com/nasa/osal/issues/1252
osal Integration candidate: Caelum-rc4+dev9,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**

PR #1249 

- Fix #1225, Update codeql workflows for reusable update

PR #1250 

- Fix #1248, add os-impl-no-select.c for RTEMS

**Testing performed**

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04
RTEMS 4.11, RTEMS 5

**Additional context**
Part of <https://github.com/nasa/cFS/pull/471>

**Third party code**

None

**Contributor Info - All information REQUIRED for consideration of pull request**
acudmore
skliper",draco-rc2,https://github.com/nasa/osal/pull/1251
"FIX #1248, add os-impl-no-select.c for RTEMS","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**

- Fix #1248 

Implements os-impl-no-select.c for RTEMS or any other OS that has a configuration without select.
Currently only used for RTEMS when the network stack is disabled in the OSAL. On RTEMS the select call only works with network file descriptors.
In current RTEMS 4.11 and 5 builds, when the OSAL_CONFIG_INCLUDE_NETWORK option is false, the select call will still be included even though it cannot be used. The does not fail because the select call is still available in the RTEMS libraries.

If you build RTEMS 4.11 or 5 without the default network stack, the select call will not be included in the RTEMS libraries, causing the OSAL build to fail. In addition, RTEMS 6 removes the legacy network stack, so a default OS build will cause the OSAL build to fail.

By selecting os-impl-no-select.c when the OSAL_CONFIG_INCLUDE_NETWORK option is false, the select call will be omitted, and it will build for RTEMS with and without the network stack.

**Testing performed**
Steps taken to test the contribution:
This was tested with RTEMS 4.11 and RTEMS 5 using the pc-rtems CI platform.
I ran all tests on 4.11 and 5 with OSAL_CONFIG_INCLUDE_NETWORK set to true and false. All tests pass, but I did notice that the OSAL module unload test did not pass on RTEMS 4.11 - I don't think this test is related.
This is also being used on LEON3/RTEMS 5.1 for GTOSat.

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
When building the cFS with the OSAL_CONFIG_INCLUDE_NETWORK to false for RTEMS only (currently), the OS_Select* calls will return OS_ERR_NOT_IMPLEMENTED. This is probably safer, since the underlying select call should only be used with network sockets/file descriptors anyway.

**System(s) tested on**
 - Build system: Docker containers for RTEMS 4.11 and 5 cFS CI tests
 - Target OS/cFS Platform: RTEMS 4.11/x86 with cFS pc-rtems platform, and RTEMS 5/x86 with cFS pc-rtems platform
 - This patch has also been in use for GTOSat on a LEON3/RTEMS 5.1 platform for a year.

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Cudmore, NASA GSFC/582.0","CCB:Approved, RTEMS, draco-rc2",https://github.com/nasa/osal/pull/1250
"Fix #1225, Update codeql workflows for reusable update","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #1225 

**Testing performed**
CI

**Expected behavior changes**
None, just fixes codeql workflows

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc2",https://github.com/nasa/osal/pull/1249
Add os-impl-no-select.c for operating systems that do not have select (RTEMS 6 with network off),"**Is your feature request related to a problem? Please describe.**
RTEMS 6.x removes the legacy network stack by default, and in doing so, removes the ""select"" call. Now, when the OSAL OSAL_CONFIG_INCLUDE_NETWORK option is set to FALSE, the OSAL/cFS build fails because it still expects a select call.

**Describe the solution you'd like**
I have implemented a src/os/portable/os-impl-no-select.c file along with the corresponding changes to the CMakeLists.txt file that uses os-impl-no-select.c when the INCLUDE_NETWORK option is FALSE, otherwise it uses os-impl-bsd-select.c as usual.

**Requester Info**
Alan Cudmore / NASA GSFC / Code 582.0","enhancement, RTEMS, draco-rc2",https://github.com/nasa/osal/issues/1248
Fix function documentation,"**Describe the bug**
Name of function on comment doesn't match the actual function name

**Code snips**
https://github.com/nasa/osal/blob/main/src/os/rtems/src/os-impl-timebase.c#L118-L127

**Reporter Info**
Jose F Martinez Pedraza / NASA GSFC 582
",invalid,https://github.com/nasa/osal/issues/1247
"Fix #1245, Apply latest contributor license agreement links","**Describe the contribution**
- Fixes #1245 

Adds checklist for CLA and contributing guide.

**Expected behavior changes**
Working links to the latest cfa documents and removal of old cfa documents

**Additional context**
Depends on https://github.com/nasa/cFS/pull/448

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, ASRC Federal
","CCB:Approved, CCB:FastTrack, dependency, draco-rc2",https://github.com/nasa/osal/pull/1246
Apply latest contributor license agreement links,"**Is your feature request related to a problem? Please describe.**
Applies links to the latest contributor license agreements (cfa). Removes old cfa documents.

**Describe the solution you'd like**
Working links

**Additional context**
Add any other context about the feature request here.Depends on https://github.com/nasa/cFS/pull/448

**Requester Info**
Justin Figueroa, ASRC Federal
",draco-rc2,https://github.com/nasa/osal/issues/1245
Strict-type errors/exception when creating TimeBase callback on RTEMS during cFS init,"**Describe the bug**
A memory alignment exception occurs when running with RTEMS on GR740 board when compiling with `OMIT_DEPRECATED = true` and `MISSION_RESOURCEID_MODE = ""STRICT""`

The exception occurs during cFS init, when starting the TimeBase callback task/thread:
https://github.com/nasa/osal/blob/main/src/os/rtems/src/os-impl-timebase.c#L392-L395

The callback thread `OS_TimeBase_CallbackThread` function argument is of type `osal_id_t`. 
https://github.com/nasa/osal/blob/main/src/os/shared/src/osapi-timebase.c#L381

RTEMS expects the callback function argument to be of type `rtems_task_argument`. The conversion from one type to another when starting the task causes the exception.

**To Reproduce**
Build for rtems5-gr740 with `OMIT_DEPRECATED = true` and `MISSION_RESOURCEID_MODE = ""STRICT""`
Run cFS on gr740 board

**Expected behavior**
Successful cFS init.

**System observed on:**
 - Hardware: GR740
 - OS: RTEMS 5
 - Versions: Draco

**Reporter Info**
Jose F Martinez Pedraza / GSFC 582
","bug, draco-rc3",https://github.com/nasa/osal/issues/1244
Incorrect status reporting from OS_SocketSendTo_Impl,"**Describe the bug**
The return value of `sendto` returns the number of characters sent on success and -1 on error. In `OS_SocketSendTo_Impl` the return of `sendto` is being assigned as os_status and returned. This results in a non-zero (`OS_SUCCESS`) status being reported back to the calling function which is interpreted as an error

**To Reproduce**
Steps to reproduce the behavior:
1. Put breakpoint on `OS_SocketSendTo_Impl`
2. Enable TO output using `cmdUtil`
3. Chaeck the value of `os_result`

**Expected behavior**
`os_result` should be `OS_SUCCESS` if the return value of `sendto != buflen`. 

**Code snips**

```
osal/src/os/portable/os-impl-bsd-sockets.c

OS_SocketSendTo_Impl { ...

 os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);
    if (os_result < 0)
    {
        OS_DEBUG(""sendto: %s\n"", strerror(errno));
        return OS_ERROR;
    }

    return os_result;
...
```

**Reporter Info**
Syed Huq, Kepler Communications.
",invalid,https://github.com/nasa/osal/issues/1243
Function header documentation for OS_ObjectIdAllocateNew() is incorrect,"Describe the bug
The comments in the function header for OS_ObjectIdAllocateNew() is outdated/incorrect. I see that this was previously reported in #17 but it appears that since then the function signature and implementation has again changed. https://github.com/nasa/osal/blob/88f72d788d33a12e7bf9d9f01c77346438730ffa/src/os/shared/src/osapi-idmap.c#L1169

To Reproduce
N/A. Only in the function comments.

Expected behavior
Description of the function should be with the function prototype as described in #17. In this case the removal of the Inputs and Outputs sections of the function header.

Reporter Info
Nathan Ohlson




",docs,https://github.com/nasa/osal/issues/1242
Format truncation warning in `UtAssert_DoTestSegmentReport` (Ubuntu 20.04),"**Describe the bug**
A ubuntu 20.04 release job reveals that the current implementation of osal/ut_assert/CMakeFiles/ut_assert.dir/src/utassert.c/UtAssert_DoTestSegmentReport potentially truncates the output to fit in `ReportBuffer`. 

**To Reproduce**
Steps to reproduce the behavior:
1. Go to https://github.com/chillfig/CF/actions/runs/2054990660
2. Click on [Build (ubuntu-20.04, release)](https://github.com/chillfig/CF/runs/5727815592?check_suite_focus=true)
3. Scroll down to lines 105-126 of the ""Make Install"" job

**Expected behavior**
Passing workflow

**Code snips**

![Screen Shot 2022-03-29 at 1 17 54 PM](https://user-images.githubusercontent.com/55672943/160668810-4fc95ad2-69fb-45d6-a14b-de8a1de3ee29.png)

**System observed on:**
Ubuntu 20.04

**Additional context**
`ReportBuffer` is currently implemented with size 144. UtAssert_DoTestSegmentReport may truncate the output to fit in the buffer.  Attempting to write `snprintf` with 8 uint32 variables, 1 character array of size 64 named `SegmentName`, and 56 bytes of hard-coded strings (e.g. ""TOTAL"", ""PASS"", ""FAIL"", ""MIR"").

**Reporter Info**
Justin Figueroa, ASRC Federal
",unit-test,https://github.com/nasa/osal/issues/1241
"HOTFIX #1233, Revert changes to versioning information","**Describe the contribution**

Per conversation in CCB:2022-03-24 and in https://github.com/nasa/cFE/commit/e5be0612ad6bf9db09ddf640306a65292abce2d5#commitcomment-69358417

Ensuring REVISION number is set to 99 and MISSION_REV = 0xFF

**Testing performed**
Text and documentation only

**Expected behavior changes**
No behavior change

**System(s) tested on**
n/a

**Additional context**
https://github.com/nasa/cFE/commit/e5be0612ad6bf9db09ddf640306a65292abce2d5#commitcomment-69358417

**Third party code**
none

**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA",draco-rc1,https://github.com/nasa/osal/pull/1240
osal Integration candidate: Caelum-rc4+dev7,"**Describe the contribution**

- HOTFIX #1190, Enable format check on all branches

PR #1234 
- HOTFIX #1233, Fix failed format check

PR #1236 
- Fix #1235, Update copyright header


PR #1238 
- Fix #1237, avoid calling memchr() with unknown size buffer

PR #1240
- HOTFIX #1233, Revert changes to versioning information

**Testing performed**
osal Checks <https://github.com/nasa/osal/pull/1239/checks>
cFS Bundle checks <https://github.com/nasa/cFS/445/checks>

Failed CodeQL workflow is being examined. 

**Expected behavior changes**
See PRs

**System(s) tested on**


**Additional context**
Part of nasa/cFS#445

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@astrogeco 
@jphickey 
@skliper ",draco-rc1,https://github.com/nasa/osal/pull/1239
"Fix #1237, avoid calling memchr() with unknown size buffer","**Describe the contribution**
In some systems, passing a large size value to memchr() causes it to return NULL, even if the char is guaranteed to be found within the actual valid buffer memory.

This modifies the string buffer comparison function to actively check for this sentinel value and use ""strlen()"" instead.

Fixes #1237

**Testing performed**
Build and sanity check, run all tests on both Ubuntu (latest version) and CentOS 7 VM

**Expected behavior changes**
Tests pass in both systems (no SEGV on CentOS 7)

**System(s) tested on**
Ubuntu 21.10
CentOS 7

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, unit-test, draco-rc1",https://github.com/nasa/osal/pull/1238
`UtAssert_StringBufCompare` SEGV when -1 for size passed in (on CentOS 7),"**Describe the bug**
`memchr(x, x, -1)` returns NULL on CentOS 7 (at least in one case), which within `UtAssert_StringBufCompare` causes the `memcmp` to  use the max size_t which causes a SEGV.

https://github.com/nasa/osal/blob/fafb045e7a5311e19affe0ddab724f1604e739f4/ut_assert/src/utassert.c#L459-L513

**To Reproduce**
Build and run this test case (others also use this pattern):
https://github.com/nasa/cFE/blob/a39b0a65fb2724692469ff492484b523fb4fa7e6/modules/config/ut-coverage/test_cfe_config.c#L138-L146

**Expected behavior**
No SEGV

**Code snips**
See above

**System observed on:**
 - Hardware: unknown
 - OS: CentOS 7
 - Versions: Bundle main

**Additional context**
[Add any other context about the problem here.](https://stackoverflow.com/questions/47315902/is-it-legal-to-call-memchr-with-a-too-long-length-if-you-know-the-character-wil)

**Reporter Info**
Jacob Hageman - NASA/GSFC","unit-test, draco-rc1",https://github.com/nasa/osal/issues/1237
"Fix #1235, Update copyright header","**Describe the contribution**
- Fix #1235 

**Testing performed**
Documentation only, but built/ran unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",draco-rc1,https://github.com/nasa/osal/pull/1236
Apply latest copyright header,"**Is your feature request related to a problem? Please describe.**
Updated copyright header

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc1",https://github.com/nasa/osal/issues/1235
"HOTFIX IC:Caelum-rc4+dev6, Fix failed format check","**Describe the contribution**
Fixes format check failure that sneaked into IC:Caelum-rc4+dev6

**Testing performed**
osal checks: <https://github.com/nasa/osal/pull/1234/checks>
cFS bundle checks: <https://github.com/nasa/cFS/commit/d77d1594e84c828d1d8192e78c56947d999dd6f8/checks>

**Expected behavior changes**
None

**System(s) tested on**
RTEMS 4.11/5
Ubuntu 18.04

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo Cruz-Ortiz, NASA",draco-rc1,https://github.com/nasa/osal/pull/1234
osal Integration candidate: Caelum-rc4+dev6,"**Describe the contribution**

PR #1230
    
- Partial #1225, Update cFS-build CodeQL reusable worfklow target

PR #1221

- Fix #1220, Implement OS_ModuleGetInfo_Impl for RTEMS

PR #1232
    
- Fix #1231, Doxygen strip path and expose common config

PR #1228 from skliper/fix1227-doxygen_mainpage
    
- Fix #1227, Refactor doxygen and remove mainpage

**Testing performed**

osal Checks <https://github.com/nasa/osal/pull/1233/checks>
cFS Bundle Checks <https://github.com/nasa/cFE/pull/2066/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04
RTEMS 4.11/5 (bundle)

**Additional context**
Part of https://github.com/nasa/cFS/pull/443

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper
@chillfig
",draco-rc1,https://github.com/nasa/osal/pull/1233
"Fix #1231, Doxygen strip path and expose common config","**Describe the contribution**
- Fix #1231

**Testing performed**
Built OSAL users guide locally and from bundle, no warnings.  Inspected generated documents

**Expected behavior changes**
None, but osal-common.doxyfile can now be used by other documents to resolve OSAL references

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1232
Strip mission source dir from doxygen path and provide common doxyfile to resolve references,"**Is your feature request related to a problem? Please describe.**
- Full path reported in doxygen generated stand-alone osal users guide
- OSAL common doxyfile could be refactored to be used by any docs that reference OSAL

**Describe the solution you'd like**
Add the following to users guide
```
STRIP_FROM_PATH += @MISSION_SOURCE_DIR@
```

Slight osal-common.doxyfile.in adjustments such that it can be used to resolve OSAL references.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc1",https://github.com/nasa/osal/issues/1231
"Partial #1225, Update cFS-build CodeQL reusable worfklow target","**Describe the contribution**
Partial #1225 
changes tests input to boolean, changes source input for uses,
component-path to osal, changes to tests to test, removes makeprep input

**Testing performed**
github actions check: https://github.com/chillfig/osal/actions/runs/1993521933

**Expected behavior changes**
Passing workflow

**System(s) tested on**
Ubuntu 18.4

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, ASRC Federal","CCB:Approved, continuous-integration, draco-rc1",https://github.com/nasa/osal/pull/1230
Format workflow not running on push to non-main branches,"**Describe the bug**
The format-check workflow has a restriction to only run on pushes to main.

**To Reproduce**
Create a new branch, push code changes to it, notice that format-check workflow does not execute. 

**Expected behavior**
Workflow runs on all pushes

**Code snips**
https://github.com/nasa/osal/blob/a173f3081497fa97d99956c868bcb59141620d7d/.github/workflows/format-check.yml#L4-L7

**System observed on:**
Github Actions

**Additional context**
Might be worth leveraging the reusable workflow in cFS <https://github.com/nasa/cFS/blob/main/.github/workflows/format-check.yml>

**Reporter Info**
Gerardo E. Cruz-Ortiz, NASA
","continuous-integration, draco-rc1",https://github.com/nasa/osal/issues/1229
"Fix #1227, Refactor doxygen and remove mainpage","**Describe the contribution**
- Fix #1227

**Testing performed**
Built osal users guide and mission documentation, confirmed content

**Expected behavior changes**
None, documentation only

**System(s) tested on**
 - Hardware: i5/wsl2
 - OS: Ubuntu 18.04
 - Versions: Bundle main + cfe doxygen commits + this commit

**Additional context**
nasa/cfe#2058

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC

Ping @jia-j-lin","dependency, draco-rc1",https://github.com/nasa/osal/pull/1228
Doxygen cleanup and convert from `mainpage` to front page concept,"**Is your feature request related to a problem? Please describe.**
See nasa/cfe#2055

**Describe the solution you'd like**
Replace mainpage with a front page and refactor.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC per project request

Ping @jia-j-lin
","docs, draco-rc1",https://github.com/nasa/osal/issues/1227
osal Integration candidate: Caelum-rc4+dev4,"**Describe the contribution**

PR #1215
- Fix #1214, Resolve UT uninitialized variable warnings 

PR #1219
- Fix #1218, Add ut_assert to doxygen and fix warnings

PR #1223 
- Fix #1222, Protect if OS_FDGetInfo called on socket

**Testing performed**
osal Checks <https://github.com/nasa/osal/pull/1226/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/432/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04
RTEMS (bundle)

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request*
@jphickey
@skliper",draco-rc1,https://github.com/nasa/osal/pull/1226
CodeQL Workflow Broken due to Name Change,"**Describe the bug**

Merging https://github.com/nasa/cFS/pull/413 broke the components' CodeQL workflow as expected. 

Need to update the osal codeQL workflows to match the patterns implemented in https://github.com/nasa/cFE/pull/2035

**To Reproduce**

See failed workflows 
- https://github.com/nasa/osal/actions/workflows/codeql-cfe-build.yml
- https://github.com/nasa/osal/actions/workflows/codeql-osal-default.yml

**Expected behavior**

Workflow executes

**Code snips**
None

**System observed on:**
GitHub Actions

**Additional context**
None

**Reporter Info**
Gerardo E. Cruz-Ortiz NASA","continuous-integration, draco-rc2",https://github.com/nasa/osal/issues/1225
"Consider populating the ""name"" field of datagram socket entries","**Is your feature request related to a problem? Please describe.**
As noticed in previous issue #1222, the datagram sockets are essentially name-less.  This means that the `name_entry` field of these entries is left unset, and will be NULL.

This is different than most other OSAL resource types, which all have names.

**Describe the solution you'd like**
Stream sockets (IIRC) generate a name consisting of the local IP address/port and remote IP address/port.  Datagram sockets are connectionless, but theoretically this field could still be populated with something unique, such that name-based APIs could work.

**Describe alternatives you've considered**
Leave as-is, where datagram sockets remain anonymous/nameless.

**Additional context**
Most name-based OSAL APIs (such as OS_CloseFileByName) intentionally only operate on files - they check if the entry is a socket and ignore it if it is, so having a name associated with sockets if of limited usefulness unless we open that up, which also may not be a bad idea. (i.e. one can get the name by calling OS_FDGetInfo, then pass that name to OS_CloseFileByName or OS_FileOpenCheck, etc).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.  
Based on CCB discussion of #1223 on 2022-02-23

",enhancement,https://github.com/nasa/osal/issues/1224
"Fix #1222, protect if OS_FDGetInfo called on socket","**Describe the contribution**
Datagram sockets do not have a name_entry, it is set NULL.  If the user calls OS_FDGetInfo() on this type of ID, it will
pass the first test, so this needs to be checked for non-NULL.

Fixes #1222

**Testing performed**
Build and sanity check OSAL
Run all tests
Confirm coverage test is exercising the new check

**Expected behavior changes**
Calling OS_FDGetInfo on a datagram socket returns an empty string in the Path field, it does not segfault.

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1223
Segfault when calling OS_FDGetInfo on datagram socket ID,"**Describe the bug**
Sockets opened with OS_SocketOpen get assigned an OSAL ID which is of the same type/classification as file IDs and shares the same global table.  However, these IDs do not have a name associated with them, and thus the `name_entry` field of the global structure is NULL for these objects.

The `OS_FDGetInfo` will validate this type of ID (because it is a file type) but will attempt to copy the name unconditionally, which results in a segfault because the pointer is NULL.

**To Reproduce**
1. Acquire a datagram socket ID using `OS_SocketOpen()`
2. Invoke `OS_FDGetInfo()` on that socket
3. Get Segfault in `strncpy()`

**Expected behavior**
Should not segfault, rather the returned name should be empty.

**Code snips**
Offending call to strncpy is here:
https://github.com/nasa/osal/blob/b0958583748eedd776622f0a873c769b7c554d48/src/os/shared/src/osapi-file.c#L535

**System observed on:**
Ubuntu 

**Additional context**
This code just needs to account for the name_entry being (validly) NULL on some types of entries.

**Reporter Info**
Originally found by @dmccomas in OSK implementation

","bug, draco-rc1",https://github.com/nasa/osal/issues/1222
Fix #1220 Implement OS_ModuleGetInfo_Impl for RTEMS,"**Describe the contribution**
A clear and concise description of what the contribution is.
- Fixes #1220 

**Testing performed**
The ES ""query application"" command yields a telemetry packet that contains section information supplied by OS_ModuleGetInfo_Impl. Compared object section sizes (.text, .data, .bss) in the telemetry given by the query app command to section sizes reported by the ""size"" tool in the platform toolchain. Checked the disassembly of application objects built in FSW to find symbols in each section (.text, .data, .bss) and used the MM application to report the addresses for each. Verified that symbol addresses reported were contained in the interval [addr, addr + size) for each section. 

Tested with cFS bundle:
https://github.com/ezpollack/cFS/actions/workflows/build-cfs-rtems4.11.yml
https://github.com/ezpollack/cFS/actions/workflows/build-cfs-rtems5.yml

**Expected behavior changes**
 - Behavior Change: OS_ModuleGetInfo will report section information for apps in RTEMS 4.11+. ES application info packet will contain valid section information for apps in RTEMS 4.11+. 

**System(s) tested on**
 - Hardware: Wildcat Processor Card (QEMU emulation) (GR740)
 - OS: RTEMS 5.1 via Gaisler's RTEMS LEON/ERC32 GNU cross-compiler system (RCC) 1.3.0
 - Versions: cFS Caelum RC4 + this commit + customizations for runtime environment (PSP + build system)

**Additional context**
This will only work for RTEMS 4.11+. Version 4.11 was the first version to support dynamic loading of objects via the RTEMS Runtime Loader (RTL). 

**Contributor Info - All information REQUIRED for consideration of pull request**
Eric Pollack - NASA/GSFC
","CCB:Approved, RTEMS, draco-rc1",https://github.com/nasa/osal/pull/1221
Implement OS_ModuleGetInfo_Impl on RTEMS,"**Is your feature request related to a problem? Please describe.**
ES ""query application"" command cannot provide loaded object section addresses and sizes in RTEMS since the implementation of OS_ModuleGetInfo_Impl is a stub. 

**Describe the solution you'd like**
Add an implementation of this using the RTEMS Runtime Loader API.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Eric Pollack - NASA/GSFC
","enhancement, draco-rc1",https://github.com/nasa/osal/issues/1220
"Fix #1218, Add ut_assert to doxygen and fix warnings","**Describe the contribution**
- Fix #1218 

**Testing performed**
Build detailed design, observe osal warnings go away.  Also built unit tests to confirm parameter name change worked.

**Expected behavior changes**
Squash doxygen warnings

**System(s) tested on**
 - Hardware: i5/wsl2
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1219
Add ut_assert to doxygen detailed design and fix warnings,"**Is your feature request related to a problem? Please describe.**
ut_assert not included, and when it is doxygen warnings are produced

**Describe the solution you'd like**
Include in osa-detaildesign.doxyfile.in and resolve warnings

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc1",https://github.com/nasa/osal/issues/1218
"Fix #1216, Remove explicit filename doxygen comments","**Describe the contribution**
- Fix #1216

**Testing performed**
Make doc, observe no filename warnings

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1217
Remove explicit file name references in doxygen file comments to avoid warnings,"**Is your feature request related to a problem? Please describe.**
File comment without a filename implies the comments apply to the current file.  Adding the file name makes doxygen try to match that file.  The issue is there's multiple files with the same name, so doxygen gets confused unless you add full path.  Really it's just overhead since the point is to comment the current file.

Sample warning if you `make doc` from the bundle:
```
/home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c:22: warning: the name `os-impl-binsem.c' supplied as the second argument in the \file statement matches the following input files:
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/rtems/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/vxworks/src/os-impl-binsem.c
Please use a more specific name by including a (larger) part of the path!
```

**Describe the solution you'd like**
Easiest to just remove the name since for every case the comment applies to the current file

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","docs, draco-rc1",https://github.com/nasa/osal/issues/1216
"Fix #1214, Resolve UT uninitialized variable warnings","**Describe the contribution**
- Fix #1214 

**Testing performed**
Built 32-bit and ran unit tests in valgrind, warnings squashed

**Expected behavior changes**
No more uninit variable warnings

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1215
Missing handler for OS_SocketAddrGetPort_Impl causing uninitialized variable UT warnings,"**Is your feature request related to a problem? Please describe.**
Unit under test call to `OS_SocketAddrGetPort_Impl` doesn't set port.

**Describe the solution you'd like**
Handler should set the port on success (at minimum) to avoid uninitialized variables in unit tests

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, draco-rc1",https://github.com/nasa/osal/issues/1214
"select-test failed, non-repeatable","**Is your feature request related to a problem? Please describe.**
First time I recall seeing it on Caelum+ osal, unfortunately it was a batch run so details not available:
```
64/119 Test  #64: select-test .............................***Failed    3.20 sec
```

**Describe the solution you'd like**
Investigate, probably needs many runs since it's frequently tested and I haven't seen it fail.

**Describe alternatives you've considered**
None

**Additional context**
OSAL git hash that failed: e3d2f4c1c1e455dc7b5b42a7776451d3a1853c1a, which is a commit past v6.0.0-rc4+dev29

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/osal/issues/1213
osal Integration Candidate: Caelum+dev2,"**Describe the contribution**

PR nasa/osal#1206, Search global and local symbol tables
PR nasa/osal#1201, Add missing space to UtAssert_STUB_COUNT
PR nasa/osal#1202, Add UINT8 and UINT16 equivalents for UtAssert_UINT32_ macros
PR nasa/osal#1203, correct warnings on gcc11
PR nasa/osal#1211, Set output in OS_stat handler

PR nasa/osal#1190, 

- Fix #1188, Reuse CodeQL, Static Analysis, Format Check 

**Testing performed**
osal Checks <https://github.com/nasa/osal/pull/1212/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/410/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04
RTEMS

**Additional context**
Part of nasa/cFS#410

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**

@ArielSAdamsNASA
@skliper
@jphickey
@kurtjd
",draco-rc1,https://github.com/nasa/osal/pull/1212
"Fix #1210, Set output in OS_stat handler","**Describe the contribution**
- Fix #1210 
- Provides consistent default OS_stat handler behavior

**Testing performed**
Tested with FM that relies on default behavior, CI

**Expected behavior changes**
Avoids uninitialized variable risk in unit tests

**System(s) tested on**
 - Hardware: i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1211
Ensure memory is set in OS_stat handler,"**Is your feature request related to a problem? Please describe.**
Risk of uninitialized variable use if buffer isn't set in OS_stat handler:
https://github.com/nasa/osal/blob/4cc6dbb5019d0589d5ce52e3755a0b7a012ade3c/src/ut-stubs/osapi-file-handlers.c#L199-L202

**Describe the solution you'd like**
Initialize to zero if not fully set (provides default behavior)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, draco-rc1",https://github.com/nasa/osal/issues/1210
"Fix #1208, typesafe definition of osal_id_t","**Describe the contribution**
Modifies the osal_id_t typedef to be a non-integer value.  The intent is to catch cases where it inappropriately being used as an integer value.

This is transparent so long as the osal_id_t typedef and provided check and conversion routines are used.

Fixes #1208 

**Testing performed**
Build and sanity check CFE and OSAL with and without OSAL_OMIT_DEPRECATED flag

**Expected behavior changes**
When OSAL_OMIT_DEPRECATED is enabled (opt-in) this will catch misuse of OSAL IDs as integers, or failure to use correct `osal_id_t` typedef to hold the value.

**System(s) tested on**
Ubuntu 21.10

**Additional context**
OSAL and CFE should all be compliant, but CFS apps probably are not yet compliant with this.  Hence why it is ""opt-in"" via OSAL_OMIT_DEPRECATED flag, like other similar changes done in the past.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, dependency, draco-rc1",https://github.com/nasa/osal/pull/1209
Type-safe implementation for osal_id_t,"**Is your feature request related to a problem? Please describe.**
The `osal_id_t` type is currently just a plain `uint32` to make it backward-compatible.  The problem is that a plain number does not convey the purpose/intent of this ID value.  Users can still do things like addition, subtraction, or interchange with other numbers, which are all invalid for a number being used as an ID.

As long as users are using the `osal_id_t` type and the associated checks/conversions also provided by OSAL (e.g. OS_ObjectIdDefined, etc) then this should be transparent.

**Describe the solution you'd like**
Make `osal_id_t` type-safe

**Additional context**
This was the intent all along with creating a separate `osal_id_t` typedef and using it across the CFE and PSP.
It does depend on having all the dependent code using the typedef, so probably want to stage this in using OSAL_OMIT_DEPRECATED flag or similar, so we can find the things that are still broken in this regard.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, draco-rc1",https://github.com/nasa/osal/issues/1208
Implement coverage test for RTEMS,"**Is your feature request related to a problem? Please describe.**
Coverage tests not implemented for RTEMS

**Describe the solution you'd like**
Add coverage tests

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/1207
"Fix #1204, Search global and local symbol tables","**Describe the contribution**
- Fix #1204 
- Refactors symbol table searching to include both local and global symbol tables for POSIX
- Renamed global search to generic since there  isn't currently a use case for global only search

**Testing performed**
DRAFT - not complete yet

**Expected behavior changes**
Improved portability, recovers prior behavior and will find symbols even if loaded as local only.

**System(s) tested on**
 - Hardware: i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1206
Optional support for symbol table dump and module address/size info on POSIX systems (adds GNU extension dependence),"**Is your feature request related to a problem? Please describe.**
Currently checksum app does not work on systems that use os-impl-posix-dl-symtab.c since module address/size data is not filled in, nor is OS_SymbolTableDump supported.

**Describe the solution you'd like**
Would add GNU extension dependence, but dl_iterate_phdr() could be used to get the information required for both symbol table dump and module address/size.  Example for getting module address here: https://stackoverflow.com/questions/19451791/get-loaded-address-of-a-elf-binary-dlopen-is-not-working-as-expected

**Describe alternatives you've considered**
None

**Additional context**
We've avoided GNU extension dependence, but if supported on the desired system it would be helpful to have the option for this functionality to work.  Another use case is when simulating a system that does have these functions implemented, it's likely desirable to support the capability.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/1205
`OS_SymbolLookup` should also support local symbol lookup,"**Is your feature request related to a problem? Please describe.**
Getting symbol addresses are an integral part of MM and MD.  For systems that load modules with local scope this could still be easily supported by looping through the modules w/o requiring app changes.

Currently it just looks for global or static symbols:
https://github.com/nasa/osal/blob/4cc6dbb5019d0589d5ce52e3755a0b7a012ade3c/src/os/shared/src/osapi-module.c#L352-L388

**Describe the solution you'd like**
Possibly just use OS_ForEach and loop through modules within OS_SymbolLookup, but on systems where local symbol table lookup just calls the global version that would waste cycles if a symbol doesn't exist since it would end up searching the global table for every module.

Consider a slight refactor... a generic OS_SymbolLookup_Impl could search just global on systems with only global, global and local on systems that support it.  Really doesn't seem to be a use case for OS_GlobalSymbolLookup_Impl which only searches the global table... possibly remove?

**Describe alternatives you've considered**
None others.

**Additional context**
See MM and MD use of symbol lookup, helpful to get from global or local scope.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, draco-rc1",https://github.com/nasa/osal/issues/1204
"Fix #1199, correct warnings on gcc11","**Describe the contribution**
- Fix #1199
These new warnings are detected by the new compiler. They are all places in unit test where an uninitialized value is passed via ""const"" pointer into a unit under test.  By definition a ""const"" pointer is always an input.

While the warning is pedantically true - should not pass an uninitialized struct as an input - these were all unit tests where the object value is a don't-care value, so it does not matter.  But to fix the warning, simply need to initialize a value before making the call.

Fixes #1199

**Testing performed**
Build and run all tests on GCC 11.2 (Ubuntu 21.10)

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 21.10

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1203
"Fix #1196, Add UINT8 and UINT16 equivalents for UtAssert_UINT32_<Comparison> macros","**Describe the contribution**
- Fix #1196 

Adds UINT8 and UINT16 equivalents for UtAssert_UINT32_<Comparison> macros.

**Testing performed**
1. Built according to steps listed in README
2. Performed tests on each new macro with relevant input to ensure correctness (for example, passing 0 and 255 + 1 to UtAssert_UINT8_EQ and verifying that test passed).

**Expected behavior changes**
Allows for users to call UtAssert comparisons on unsigned 8 and 16-bit values and provides expected wrap-around behavior without users needing to explicitly cast.

For example, `UtAssert_UINT8_EQ(0, 255 + 1)` outputs the following:  
Compare UINT8: 0 (0) == 255 + 1 (0)

**System(s) tested on**
 - Hardware: ThinkPad t480s
 - OS: Pop!_OS 21.10 64-bit

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Kurtis Dinelle (kurtisdinelle@gmail.com)
Student at Oregon State University
CLA already on file.
","CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1202
"Fix #1200, Add missing space to UtAssert_STUB_COUNT","**Describe the contribution**
- Fix #1200 by adding missing space to UtAssert_STUB_COUNT.

**Testing performed**
1. Built tests according to instructions in README Quick Start section.
2. Ran `./coverage-shared-task-testrunner | grep CallCount` in `build/unit-test-coverage/shared` to verify correct output.

**Expected behavior changes**
Example output (old): ""CallCountCFE_EVS_SendEvent() (0) == 0 (0)""  
Example output (new): ""CallCount CFE_EVS_SendEvent() (0) == 0 (0)""

**System(s) tested on**
 - Hardware: Lenovo ThinkPad t480s
 - OS: Pop!_OS 21.10 64-bit
 - Versions: N/A

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Kurtis Dinelle (kurtisdinelle@gmail.com)
Student at Oregon State University
","CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1201
UtAssert_STUB_COUNT missing a space in string output,"**Is your feature request related to a problem? Please describe.**
example output: ""CallCountCFE_EVS_SendEvent() (0) == 0 (0)""

**Describe the solution you'd like**
CallCount CFE_EVS_SendEvent() (0) == 0 (0)

**Describe alternatives you've considered**
None

**Additional context**
(https://github.com/nasa/osal/blob/4cc6dbb5019d0589d5ce52e3755a0b7a012ade3c/ut_assert/inc/utassert.h#L499-L501)

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, good first issue, draco-rc1",https://github.com/nasa/osal/issues/1200
New compile warnings with GCC 11.x,"**Describe the bug**
The newer versions of GCC report new warnings.  These appear to be mostly false alarms, but easy to fix nonetheless.

**To Reproduce**
Build OSAL using recent GCC

**Expected behavior**
Should compile without warnings or errors

**Code snips**

```
osal/src/unit-test-coverage/vxworks/src/coveragetest-tasks.c: In function ‘Test_OS_TaskDetach_Impl’:
src/unit-test-coverage/vxworks/src/coveragetest-tasks.c:151:28: error: ‘token’ may be used uninitialized [-Werror=maybe-uninitialized]
src/unit-test-coverage/shared/src/coveragetest-clock.c: In function ‘Test_OS_SetLocalTime’:
src/unit-test-coverage/shared/src/coveragetest-clock.c:55:26: error: ‘time_struct’ may be used uninitialized [-Werror=maybe-uninitialized]
osal/src/unit-tests/oscore-test/ut_oscore_task_test.c: In function ‘UT_os_task_getid_by_sysdata_test’:
osal/src/unit-tests/inc/ut_os_support.h:112:28: error: ‘sysdata’ may be used uninitialized [-Werror=maybe-uninitialized]
```

**System observed on:**
Ubuntu 21.10, gcc 11.2.0

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, draco-rc1",https://github.com/nasa/osal/issues/1199
Add simpler/semi-automatic unit test handling for pointer returns from stubs,"**Is your feature request related to a problem? Please describe.**
For implementation functions which return some form of `int32`, the stub generator and default handler automatically makes this return 0 if nothing sets up anything else.  The framework also provides a common method to provide alternate values.  This `int32` return was singled out because it is very common across OSAL, CFE, PSP, and apps.

The next most common return type (aside from void) is probably a pointer value.  But this is not handled automatically, the user is required to provide a handler function just to be able to use the stub at all - even just to get it to return NULL.  Furthermore there is no common method to get any other return value either.

Currently on a 64-bit platform one gets an error if attempting to use a generated stub ""out of the box"" because the framework sees a return type of size 8 which it refuses to translate from the int32 status value.

**Describe the solution you'd like**
Expand the automatic/int32 return paradigm to pointer returns.  Note on a 32-bit platform this probably already happens implicitly, since a pointer an an int32 are probably the same size, and ""0"" can be easily translated to NULL.  

This is just two things:
- Provide equivalent of `UT_SetDefaultReturnValue()` and `UT_SetDeferredRetcode()` but for pointers, so tests can have a common method to register a pointer return.
- If the handler/hook does not set a return pointer/override, then grab the pointer from the registered value if its was set, or return NULL (basically the same as is done for `int32` currently).

**Describe alternatives you've considered**
Leave as-is where tests must always implement a custom handler for every function that returns a pointer.

**Additional context**
Noted when developing CF unit tests, there are a number of FSW functions that return pointers, and it would be a good timesaver if one could simply run ""generate_stubs"" and use the stubs immediately as-is.  While this is true for integer return codes, functions returning pointers all require extra work in order to use the generated stubs.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1198
Augment UTAssert_Abort for more descriptive error messages,"**Is your feature request related to a problem? Please describe.**
See comments in https://github.com/nasa/CF/pull/82

**Describe the solution you'd like**
Additional arguments to UTAssert_Abort

**Describe alternatives you've considered**
None

**Additional context**
None 

**Requester Info**
@jphickey 
",duplicate,https://github.com/nasa/osal/issues/1197
Add UINT8 and UINT16 equivalents for UtAssert_UINT32_<Comparison> macros,"**Is your feature request related to a problem? Please describe.**
Using a UINT32 comparison for smaller uint types does not allow for roll-over situations that are considered a pass condition:
```
UtAssert_UINT32_EQ(Some_uint8_ValueUnderTest, UnknownStartValueThatHappensToBeMax_uint8 + 1);
```
outputs:
 &#x1F534;[ FAIL] 01.001 a_test.c:5 - Some_uint8_ValueUnderTest (0) == UnknownStartValueThatHappensToBeMax_uint8 + 1 (256)


**Describe the solution you'd like**
A UINT8  comparison could provide an output like this:
&#x1F7E2;[ PASS] 01.001 a_test.c:5 - Some_uint8_ValueUnderTest (0) == UnknownStartValueThatHappensToBeMax_uint8 + 1 (0)

Additionally, use could be made of the _desc_ argument in the actual call (UtAssert_GenericUnsignedCompare) to distinguish it from a UINT32 call and add pertinent information for the developer:
&#x1F7E2;[ PASS] 01.001 a_test.c:5  - Compare UINT8: SomeValueUnderTest (0) == UnknownStartValueThatHappensToBeMax + 1 (0)

**Describe alternatives you've considered**
Adding a typecast to every assert:
```
UtAssert_UINT32_EQ((uint8)SomeValueUnderTest, (uint8)(UnknownStartValueThatHappensToBeMax + 1));
```
which does provide decent output:
&#x1F7E2;[ PASS] 01.001 a_test.c:5 - (uint8)SomeValueUnderTest (0) == (uint8)(UnknownStartValueThatHappensToBeMax + 1) (0)

**Additional context**
The requirement for adding a typecast becomes cumbersome over time, but writing a line like this is simpler:
```
UtAssert_UINT8_EQ(SomeValueUnderTest, UnknownStartValueThatHappensToBeMax + 1);
``` 
and will provide just as much clarity, if not more.

**Requester Info**
Alan Gibson 
NASA/GSFC 587","enhancement, draco-rc1",https://github.com/nasa/osal/issues/1196
UtAssert_Abort should support a format string like other calls do,"**Is your feature request related to a problem? Please describe.**
Sometimes, the UtAssert test macros are used to test not just the output of the unit under test, but to check for sanity in the test cases themselves (e.g. that the appropriate preconditions were set, etc).  If the condition is not true, then the user gets a regular failure report in the test log.  This looks just like any other test failure, which is generally good enough in most cases (attention is brought to it, so it can be fixed).

But when using `UtAssert_Failed` or equivalent for this purpose, if checks fail, the test still continues to run.  On occasion the value being check is critical enough that the test should actually stop early, such as if a pointer is NULL or a value would cause divide by zero, etc.

UtAssert provides a `UtAssert_Abort()` function, but this is an oddball in that in only accepts a single preformatted string message, NOT a printf-style format string like all other asserts do.

**Describe the solution you'd like**
Extend UtAssert_Abort() to make it accept a printf-style format string like other assert 

**Additional context**
Test code should not use the system `assert.h` for this, because a failure will not go through the proper reporting channels.  UtAssert_Abort() is basically the equivalent idea, but its use was limited to some degree by the fact that it can't include detail information in the message (at least not easily).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/1195
Give the UtAssert_<type here>_<comparison here> macros versions that can add user 'desc',"**Is your feature request related to a problem? Please describe.**
Output is generic and some additional information is desired.  e.g. Turn '*received.RunStatus (3) == *test->expected.RunStatus (3)' into 'CFE_ES_RunLoop:*received.RunStatus (3) == *test->expected.RunStatus (3)'

**Describe the solution you'd like**
Take each of the macros in [utassert.h](https://github.com/nasa/osal/blob/main/ut_assert/inc/utassert.h) that are designed for these checks and add a second version that has _WITH_DESC or something of that nature.

**Describe alternatives you've considered**
Already written my own locally needed versions.

**Additional context**
As an example for UT_UNT32_EQ would look like extended:
```
#define UtAssert_UINT32_EQ_WITH_DESC(actual, ref, desc)                                                                           \
    UtAssert_GenericUnsignedCompare((uint32)(actual), UtAssert_Compare_EQ, (uint32)(ref), UtAssert_Radix_DECIMAL, \
                                    __FILE__, __LINE__, desc, #actual, #ref)
```

**Requester Info**
Alan Gibson
NASA/GSFC 587
",enhancement,https://github.com/nasa/osal/issues/1194
UtAssert_StringBufCompare output of strings could be put on top of each other for easier problem identification,"**Is your feature request related to a problem? Please describe.**
Differences in strings can be hard to identify when they are side by side.  Current output:
```
[ FAIL] 02.003 tests.c:38 - String: 'Space Error?   ?    ?      ?       ?' == 'Space Error?   ?    ?       ?       ?'
```

**Describe the solution you'd like**
Stack strings for easier identification of malformations.  For example:
```
[ FAIL] 02.004 tests.c:40 - String:
Received:'Space Error?   ?    ?      ?       ?'
Expected:'Space Error?   ?    ?       ?       ?'
```

**Describe alternatives you've considered**
Manual copy and paste into text editor.

**Additional context**
N/A

**Requester Info**
Alan Gibson  NASA/GSFC 587
",enhancement,https://github.com/nasa/osal/issues/1193
generate_stubs.pl generated files put the comments from the .h file instead of identifying the stub file name,"**Is your feature request related to a problem? Please describe.**
The top commenting from the header file being put into the stub file is stating that the generated stub file is the .h, because that is what the header states.

**Describe the solution you'd like**
Have the generated file identify itself as the stub file and if the .h comments are to be kept, have it identify them as such.

**Describe alternatives you've considered**
Manually fixing it on every generated file

**Additional context**
N/A

**Requester Info**
Alan Gibson  NASA/GSFC 587
",question,https://github.com/nasa/osal/issues/1192
osal Integration candidate: Caelum+dev1,"**Describe the contribution**

PR #1178     

- Fix #1177 Rename OS_XXXTime to OS_XXXLocalTime in comments

PR #1168
    
- Fix #1167, vxWorks intLib stub aliasing issue

PR #1169     

- Fix #1166, recognize ifdef __cplusplus


PR #1180     

- Fix #1139, Remove extern in stub prototypes
- Update generate_stubs.pl


PR #1112     

- Partial #1108, add typedef for OSAL status codes
- Fix #1166, recognize ifdef __cplusplus
- Fix #1167, vxWorks intLib stub aliasing issue

PR #1186

- Fix #1183, Add Duplicate Check to Local Unit Test


**Testing performed**
OSAL Checks <https://github.com/nasa/osal/pull/1191/checks>
Bundle Checks <https://github.com/nasa/cFS/pull/390/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
RTEMS 4.11
RTEMS 5
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/390>


**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@ArielSAdamsNASA
@jphickey
@Shefali321","community, draco-rc1",https://github.com/nasa/osal/pull/1191
"Fix #1188, Reuse CodeQL, Static Analysis, Format Check","**Describe the contribution**
Fixes #1188 

**Testing performed**
Tested on forked repos.
OSAL Static Analysis Reuse: https://github.com/ArielSAdamsNASA/osal/actions/runs/1391621678
cFS Static Analysis Reuse: https://github.com/ArielSAdamsNASA/cFS-JSF-Rules/actions/runs/1391690020
OSAL CodeQL Reuse cFE Build: https://github.com/ArielSAdamsNASA/osal/runs/4023159610?check_suite_focus=true
OSAL CodeQL Reuse OSAL Default: https://github.com/ArielSAdamsNASA/osal/actions/runs/1390702434
cFS CodeQL Reuse: https://github.com/ArielSAdamsNASA/cFS-JSF-Rules/actions/runs/1390777421
OSAL Format Check Reuse: https://github.com/ArielSAdamsNASA/osal/actions/runs/1390702433
cFS Format Check: https://github.com/ArielSAdamsNASA/cFS-JSF-Rules/actions/runs/1390865379

**Expected behavior changes**
cFS will hold the workflows for CodeQL, Static Analysis, and Format Check. These workflows will be called by all OSAL to reuse. These workflows will not work until https://github.com/nasa/cFS/pull/386 is merged. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal
","continuous-integration, draco-rc1",https://github.com/nasa/osal/pull/1190
Randomize location of OSAL temp directories,"**Is your feature request related to a problem? Please describe.**
When running unit tests in parallel or multiple instances of cFS in parallel on Linux, sometimes things break due to /dev/shm/osal:RAM* directories being at a fixed location. This is particularly a problem for our CI server which isn't allowed to spin up a container for each run due to policy reasons. 

**Describe the solution you'd like**
A flag or environment variable or something to randomize/set this directory, and any other directories that may be hardcoded. 

**Describe alternatives you've considered**
We have configured a lock on Jenkins to prevent multiple instances of the tests from being run in parallel. 

**Additional context**

**Requester Info**
John N Pham, Northrop Grumman",enhancement,https://github.com/nasa/osal/issues/1189
"Reuse CodeQL, Format Checker, and Static Analysis Workflows","**Is your feature request related to a problem? Please describe.**
When needing to change workflows, one must create an issue and PR for each submodule. This feature would reduce duplication.

**Describe the solution you'd like**
To reuse workflows, the workflow simply uses `uses` and the full path of the workflow. The cFS workflows, or targeted workflows, must include workflow_call and runs-on as seen below. 
```
on:
  push:
  pull_request:
  workflow_call:
    inputs:
      runs-on: 
        description: Platform to execute on
        type: string
        default: ubuntu-latest
```

**Describe alternatives you've considered**
Keep it as is. 

**Additional context**
Tested in forked cFS: https://github.com/ArielSAdamsNASA/cFS-JSF-Rules/actions/runs/1381659167
Tested in forked OSAL: https://github.com/ArielSAdamsNASA/osal/actions/runs/1381486439

**Requester Info**
Ariel Adams, ASRC Federal","continuous-integration, draco-rc1",https://github.com/nasa/osal/issues/1188
"Fix #1182, Format Workflow Add Duplicate Check, Remove Main, Fix Job Name","**Describe the contribution**
Fixes #1182 

**Testing performed**
https://github.com/ArielSAdamsNASA/osal/actions/runs/1372966955

**Expected behavior changes**
Skips push actions if there is a matching or duplicate pull-request action. Run on all branches for push and pull requests. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal
","duplicate, continuous-integration",https://github.com/nasa/osal/pull/1187
"Fix #1183, Add Duplicate Check to Local Unit Test","**Describe the contribution**
Fixes #1183 

**Testing performed**
https://github.com/ArielSAdamsNASA/osal/actions/runs/1372766073

**Expected behavior changes**
Skip workflows on push for local unit tests if there is a duplicate workflow. 


**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal","CCB:Approved, continuous-integration, draco-rc1",https://github.com/nasa/osal/pull/1186
"Fix #1184, Static Analysis Add Duplicate and Remove Main Push","**Describe the contribution**
Fixes #1184 

**Testing performed**
Forked repo, https://github.com/ArielSAdamsNASA/osal/actions/runs/1372520583.

**Expected behavior changes**
Static analysis workflow should run on all branches for both pull requests and push. The duplicate job prevents two instances of the static analysis to run at the same time. Pull requests are prioritized. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal","duplicate, continuous-integration",https://github.com/nasa/osal/pull/1185
Static analysis workflow missing duplicate check and restricted to main push,"**Is your feature request related to a problem? Please describe.**
Missing duplicate check and restricting to push to main:
https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/.github/workflows/static-analysis.yml#L4-L12

**Describe the solution you'd like**
Add duplicate check, remove main restriction

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","duplicate, continuous-integration",https://github.com/nasa/osal/issues/1184
Local unit test workflow missing duplicate check,"**Is your feature request related to a problem? Please describe.**
Missing duplicate check:
https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/.github/workflows/local_unit_test.yml#L7-L13

**Describe the solution you'd like**
Add

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","continuous-integration, draco-rc1",https://github.com/nasa/osal/issues/1183
"Format check workflow missing duplicate check, restricted to main push, job name doesn't match","**Is your feature request related to a problem? Please describe.**
No duplicate check, restricting to main and job name doesn't match:
https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/.github/workflows/format-check.yml#L4-L19

**Describe the solution you'd like**
Add duplicate check, remove main branch restriction, update name to match action, maybe ""format-check""?

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","duplicate, continuous-integration",https://github.com/nasa/osal/issues/1182
"Fix #1175, Use fstat and fchmod for TOCTOU Bug","**Describe the contribution**
Fixes  #1175 

**Testing performed**
GitHub Actions

**Expected behavior changes**
Resolve TOCTOU bug by using fstat and fchmod instead of stat and chmod. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal
",CCB:Approved,https://github.com/nasa/osal/pull/1181
"Fix #1139, Remove extern in stub prototypes","Removed 'extern' from function prototypes in stub generator script #1139.
","CCB:Approved, community, draco-rc1",https://github.com/nasa/osal/pull/1180
"Fix #1171, check chmod return","**Describe the contribution**
- Fix #1171 

Check the return values on the calls to `chmod`

**Testing performed**
Using the CI/ID pipeline on github.

**Expected behavior changes**
No expected behavior change

**System(s) tested on**
 - OS: Ubuntu 18.04

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
- Else if Company
  - **HAND SIGNED** Company CLA must be on file (once per release): [OSAL Company CLA](../docs/GSC_18370_Corp_CLA_form_1219.pdf)
- Else if Individual
  - **HAND SIGNED** Individual CLA must be on file (once per release): [OSAL Individual CLA](../docs/GSC_18370_Ind_CLA_form_1219.pdf)

JH edit: added fix keyword to autolink","CCB:Ignore, community",https://github.com/nasa/osal/pull/1179
Fix #1177 Rename OS_XXXTime to OS_XXXLocalTime in comments.,"**Describe the contribution**
- Fix #1177 
- rename comments from OS_XXXTime to OS_XXXLocalTime

**Testing performed**
Steps taken to test the contribution:
No code changed.

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - Or no impact to behavior

**System(s) tested on**
None

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
","CCB:Approved, docs, community, draco-rc1",https://github.com/nasa/osal/pull/1178
"Posix implementation comments refer to old time APIs, update to OS_GetLocalTime and OS_SetLocalTime","**Describe the bug**
A clear and concise description of what the bug is.

`OS_GetLocalTime`
src/os/portable/os-impl-posix-gettime.c: * This file contains implementation for OS_GetTime() and OS_SetTime()
Update comment to `OS_GetLocalTime` / `OS_SetLocalTime`


**To Reproduce**
Steps to reproduce the behavior:
git grep OS_GetTime

**Expected behavior**
A clear and concise description of what you expected to happen.

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Sam Price
","docs, draco-rc1",https://github.com/nasa/osal/issues/1177
TOCTOU Bug for mkdir,"**Describe the bug**
Calling function mkdir that uses local->system_mountpt after a check function. This can cause a time-of-check, time-of-use race condition.

**Expected behavior**
Alternative is to call mkdir, without a stat, and just ignore the EEXIST errno if it happens.

**Code snips**
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/os/posix/src/os-impl-filesys.c#L247-L253

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",bug,https://github.com/nasa/osal/issues/1176
TOCTOU Bug for chmod,"**Describe the bug**
Calling function chmod that uses Filename after a check function. This can cause a time-of-check, time-of-use race condition.

**Expected behavior**
Use fchmod as seen in OS_FileChmod_Impl.

**Code snips**
https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/ut_assert/src/uttools.c#L62-L69

https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/ut_assert/src/uttools.c#L111-L117

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
","bug, draco-rc4",https://github.com/nasa/osal/issues/1175
"Fix #1172, Check Return Value for setsockopt","**Describe the contribution**
A clear and concise description of what the contribution is.
- Include explicitly what issue it addresses [e.g. Fixes #X]

Resolves #1172
**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
- Else if Company
  - **HAND SIGNED** Company CLA must be on file (once per release): [OSAL Company CLA](../docs/GSC_18370_Corp_CLA_form_1219.pdf)
- Else if Individual
  - **HAND SIGNED** Individual CLA must be on file (once per release): [OSAL Individual CLA](../docs/GSC_18370_Ind_CLA_form_1219.pdf)
","CCB:Ignore, community",https://github.com/nasa/osal/pull/1174
Copy of Overlapping Memory in snprintf,"**Describe the bug**
In the call to function snprintf, the object pointed to by argument local->volume_name may overlap with the object pointed to by argument local->system_mountpt.

local->system_mountpt is 64 bytes off of the address of OS_filesys_table[OS_ObjectIndexFromToken(token)].

local->volume_name is 32 bytes off of the address of OS_filesys_table[OS_ObjectIndexFromToken(token)]

**Expected behavior**
Resolve possible overlap. 

**Code snips**
https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/src/os/posix/src/os-impl-filesys.c#L175

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
","bug, draco-rc4",https://github.com/nasa/osal/issues/1173
Check Return Value for setsockopt,"**Describe the bug**
Calling setsockopt(impl->fd, 1, 2, &os_flags, 4U) without checking return value. This library function may fail and return an error code.

**Expected behavior**
Check return value for setsockopt

**Code snips**
https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/src/os/portable/os-impl-bsd-sockets.c#L199

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Additional context**
Possible solution 
```
if (setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags)) == 0)
{
    setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags));
}
```

**Reporter Info**
Ariel Adams, ASRC Federal
","bug, good first issue",https://github.com/nasa/osal/issues/1172
Check Return Value of chmod,"**Describe the bug**
Calling chmod(Filename, dststat.st_mode & 0xffffffc0U) without checking return value. This library function may fail and return an error code.

**Expected behavior**
Check the return value of chmod.

**Code snips**
https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/ut_assert/src/uttools.c#L66

https://github.com/nasa/osal/blob/42af0f73c952b4e4c7fbc06c97d354a1430f4ac3/ut_assert/src/uttools.c#L115

**Additional context**
From Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

Possible solution:
```
if (chmod(Filename, dststat.st_mode & ~(S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH)) == 0) 
{
      chmod(Filename, dststat.st_mode & ~(S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH));
      stat(Filename, &dststat);
}
```

**Reporter Info**
Ariel Adams, ASRC Federal
","bug, good first issue",https://github.com/nasa/osal/issues/1171
"Update codename to Caelum and license header for release, version 6.0.0","**Is your feature request related to a problem? Please describe.**
Development version still labeled as 5.0.0 (whoops, should have been 5.0.99).

**Describe the solution you'd like**
Upon official release, update relevant version/license info.

**Describe alternatives you've considered**
None

**Additional context**
Wait until official release

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/1170
"Fix #1166, recognize ifdef __cplusplus","**Describe the contribution**
Add feature to generate_stubs.pl input phase to recognize and skip over `#ifdef __cplusplus` blocks.  This makes it so it
can be used on C headers which are C++-enabled too.

The logic should be fairly easy to extend to other `#if` conditionals as needed.

Fixes #1166

**Testing performed**
Generate stubs for a C header that has C++-aware extern wrappers in it.

**Expected behavior changes**
Stubs for prototypes inside C++ extern ""C"" block are generated successfully.

**System(s) tested on**
Ubuntu

**Additional context**
Tempting to attempt to use gcc proprocessor here (-E) to get full evaluation of all preprocessor logic, but this would depend on the target headers and may introduce more problems than it solves.  So in the interim this just adds a local check that specifically looks for `#ifdef __cplusplus` and filters out everything inside this block.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1169
"Fix #1167, vxWorks intLib stub aliasing issue","**Describe the contribution**
Use a separate local variable rather than casting to (void **).

Fixes #1167 

**Testing performed**
Build with strict aliasing, confirm no warnings

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1168
"Strict aliasing issue in vxWorks ""intLib"" stub","**Describe the bug**
When compiling with strict aliasing mode (gcc w/ `-O3 -fstrict-aliasing -Wstrict-aliasing=2`), a warning gets triggered in `vxworks-intLib-stubs.c` as follows:

```
osal/src/unit-test-coverage/ut-stubs/src/vxworks-intLib-stubs.c: In function ‘OCS_INUM_TO_IVEC’:
osal/src/unit-test-coverage/ut-stubs/src/vxworks-intLib-stubs.c:60:61: error: dereferencing type-punned pointer might break strict-aliasing rules [-Werror=strict-aliasing]
   60 |         UT_GetDataBuffer(UT_KEY(OCS_INUM_TO_IVEC), (void **)&VecTbl, &VecTblSize, NULL);
      |                                                             ^~~~~~~
cc1: all warnings being treated as errors
```

**To Reproduce**
Build with new-ish gcc (10.3) w/ `-O3 -fstrict-aliasing -Wstrict-aliasing=2` options and tests enabled (so stubs are built).

**Expected behavior**
Should be clean.

**System observed on:**
Ubuntu

**Additional context**
Could be argued that stubs should not be built with optimization+strict aliasing rules, but the fix is relatively easy to avoid this warning.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, cFS-Caelum, draco-rc1",https://github.com/nasa/osal/issues/1167
"UT assert stub generator bypasses functions marked `extern ""C""`","**Describe the bug**
The `generate_stubs.pl` script ignores all contents inside `{}` blocks.  Unfortunately, for header files which are made C++-aware, it is typical to wrap C function calls in an `extern ""C""` block which means it gets ignored by the tool.  It does not understand the `#ifdef __cplusplus` surrounding it.

**To Reproduce**
Attempt to generate stubs against a header file which includes an extern ""C"" block.  The prototypes inside the block are not processed.

**Expected behavior**
Should process prototypes inside the extern ""C"" block.

**System observed on:**
Ubuntu.

**Additional context**
Prototypes were expected to all occur at the top-most scope but the `extern ""C""` keyword for C++ changes this.  Really, the file needs to be run through the C (not C++) preprocessor first, so the `#ifdef` here has the intended effect.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, cFS-Caelum, draco-rc1",https://github.com/nasa/osal/issues/1166
sem-speed-test: deadlocks sometimes when pthread_cancel is called on the threads that are actively using semaphores,"**Is your feature request related to a problem? Please describe.**

This report is similar to #1160 and #1164 because a resource, in this case a thread, gets destroyed by `pthread_cancel` while another thread wants to `sem_wait` or `sem_post` on semaphore that was just before `sem_wait`-d or `sem_post`-d by waiting on by the destroyed thread.

This is how the `pthread_join` called by `OS_TaskDelete` gets deadlocked on macOS:

```
(lldb) thread backtrace 
* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP
  * frame #0: 0x00007fff203b59ee libsystem_kernel.dylib`__ulock_wait + 10
    frame #1: 0x00007fff203eaf60 libsystem_pthread.dylib`_pthread_join + 362
    frame #2: 0x000000010614f389 sem-speed-test`OS_TaskDelete_Impl(token=0x00007ffee9ac08f0) at os-impl-tasks.c:694:15
    frame #3: 0x000000010614ad9d sem-speed-test`OS_TaskDelete(task_id=65537) at osapi-task.c:239:23
    frame #4: 0x000000010613fea1 sem-speed-test`SemRun at sem-speed-test.c:216:14
    frame #5: 0x0000000106142839 sem-speed-test`UtTest_Run at uttest.c:174:17
    frame #6: 0x0000000106141e29 sem-speed-test`OS_Application_Run at utbsp.c:232:5
    frame #7: 0x0000000106154fca sem-speed-test`main(argc=1, argv=0x00007ffee9ac0a08) at bsp_start.c:247:5
    frame #8: 0x00007fff20404f3d libdyld.dylib`start + 1
    frame #9: 0x00007fff20404f3d libdyld.dylib`start + 1
```

Is it undefined behavior when a thread gets `pthread_cancelled` while waiting or posting on a semaphore? This at least seems to be the case on macOS where the `pthread_join` deadlocks on a cancelled thread.

**Describe the solution you'd like**

With all due appreciation of the testing setup created in `sem-speed-test`, the thread loops of the task 1 and task 2 could be managed explicitly as to when their job should be finished so that the `pthread_cancel` does not catch both threads while they are still managing the semaphores.

**Describe alternatives you've considered**

For now, I have created a simple hack in the task 1 and task 2: their thread loops both depend on two global variables:

```c
bool      task_1_done = false;
bool      task_2_done = false;

...
while (!task_1_done && task_1_work < SEMTEST_WORK_LIMIT) {
...
}

while (!task_2_done && task_2_work < SEMTEST_WORK_LIMIT) {
...
}
```

And then before actually deleting the tasks:

```c
    /* Give the initial sem that starts the loop */
    SEMOP(Give)(sem_id_1);

    /* Time Limited Execution */
    OS_TaskDelay(5000);

    // Let the threads finish their job.
    task_1_done = true;
    task_2_done = true;
    OS_TaskDelay(1000);

    // TODO: Deleting task is sometimes OS_SUCCESS and sometimes OS_ERR_INVALID_ID
    status = OS_TaskDelete(task_1_id);
    // UtAssert_True(status == OS_ERR_INVALID_ID, ""Task 1 delete Rc=%d"", (int)status);

    status = OS_TaskDelete(task_2_id);
    // UtAssert_True(status == OS_ERR_INVALID_ID, ""Task 2 delete Rc=%d"", (int)status);
```

With this change, the `pthread_cancel` followed by `pthread_join` does not block on macOS.

**Additional context**

This behavior is 100% reproducible on macOS, branch of the #1161.

I have also applied the Clang's Thread Sanitizer to this and other tests. The thread sanitizer immediately complains about possible races related to unprotected access to the global variables managed by the tests. It could become a separate ticket when the more trivial issues reported so far are resolved.

**Requester Info**

Stanislav Pankevich (Personal contribution).
","bug, unit-test",https://github.com/nasa/osal/issues/1165
queue-test: a message queue gets closed while still being used,"**Is your feature request related to a problem? Please describe.**

This report is similar to #1160 because a resource, in this case a message queue, gets closed while it's still being used by another thread.

This issue silently works on Linux because of its `mqueue` implementation details. The macOS implementation of `mqueue` in #1161 maintains a mutex in each of its methods including the `mq_close` method.

The deadlock results from the following collision:

1) Main thread attempts to OS_QueueDelete that calls into `mq_close` that wants to acquire the queue's mutex.
2) The task1 that has been deleted just before was still waiting on `mq_timedreceive` holding the queue's mutex.

```c
    status = OS_TimerDelete(timer_id);
    UtAssert_True(status == OS_SUCCESS, ""Timer delete Rc=%d"", (int)status);

    // When a task is deleted below, its executing thread gets cancelled and destroyed but at that moment 
    // the task1 is still waiting on the message queue.
    status = OS_TaskDelete(task_1_id);
    UtAssert_True(status == OS_SUCCESS, ""Task 1 delete Rc=%d"", (int)status);
    status = OS_QueueDelete(msgq_id); // deadlock here
    UtAssert_True(status == OS_SUCCESS, ""Queue 1 delete Rc=%d"", (int)status);
```

**Describe the solution you'd like**

One could argue that the `queue-test` works on Linux and therefore the macOS implementation of `mqueue` should accommodate. At the same time, similar to the #1160, it looks like macOS implementation actually highlights the fact that the `queue-test` relied on undefined behavior.

**Describe alternatives you've considered**

For now, there is a custom hack to `trylock` on the mqueue's mutex before actually trying to close the mqueue.

```c
    // TODO: without this trylock, queue-test deadlocks on macOS
    if ((n = pthread_mutex_trylock(&mqhdr->mqh_lock)) == EBUSY)
    {
        (void)pthread_mutex_unlock(&mqhdr->mqh_lock);
    }
    if ((n = pthread_mutex_lock(&mqhdr->mqh_lock)) != 0) {
        errno = n;
        return (-1);
    }
```

**Additional context**

See the stacktrace of the blocked thread below. Note that I cannot provide the second thread that holds the lock because that thread is pthread_cancelled by that point (and the mutex has leaked).

**Requester Info**

Stanislav Pankevich (Personal contribution)

---

Stacktrace:

```
* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP
  * frame #0: 0x00007fff203b64ca libsystem_kernel.dylib`__psynch_mutexwait + 10
    frame #1: 0x00007fff203e72ab libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait + 76
    frame #2: 0x00007fff203e5192 libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow + 204
    frame #3: 0x00000001076e20af queue-test`mq_notify(mqd=0x00007fdcc96040e0, notification=0x0000000000000000) at mq_notify.c:26:14
    frame #4: 0x00000001076e366e queue-test`mq_close(mqd=0x00007fdcc96040e0) at mq_close.c:25:9
    frame #5: 0x00000001076e00b7 queue-test`OS_QueueDelete_Impl(token=0x00007ffee85328a8) at os-impl-queues.c:175:9
    frame #6: 0x00000001076dae67 queue-test`OS_QueueDelete(queue_id=131073) at osapi-queue.c:142:23
    frame #7: 0x00000001076d12e5 queue-test`QueueTimeoutCheck at queue-test.c:122:14
    frame #8: 0x00000001076d4309 queue-test`UtTest_Run at uttest.c:174:17
    frame #9: 0x00000001076d38f9 queue-test`OS_Application_Run at utbsp.c:232:5
    frame #10: 0x00000001076e6dfa queue-test`main(argc=1, argv=0x00007ffee8532a08) at bsp_start.c:247:5
    frame #11: 0x00007fff20404f3d libdyld.dylib`start + 1
    frame #12: 0x00007fff20404f3d libdyld.dylib`start + 1
```

Full test log, note that the mqueue's mutex is locked 19 times but unlocked only 18 times.

```
/Users/stanislaw/workspace/projects/code/osal/cmake-build-debug/tests/queue-test

[BEGIN] UNIT TEST

[BEGIN] 01 SETUP
[  END] No test cases

[BEGIN] 01 QueueTimeoutTest
[ PASS] 01.001 queue-test.c:154 - MsgQ create Id=20001 Rc=0
[ PASS] 01.002 queue-test.c:161 - Task 1 create Id=10001 Rc=0
[ PASS] 01.003 queue-test.c:167 - Timer 1 create Id=90001 Rc=0
[ INFO] queue-test.c:168:Timer Accuracy = 10000 microseconds 
Starting task 1
Delay for 1 second before starting
[ PASS] 01.004 queue-test.c:174 - Timer 1 set Rc=0
mq_timedreceive: lock
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 10
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 15
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 20
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 25
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 30
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 35
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 40
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 45
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 50
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 55
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 60
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 66
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 70
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 75
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 80
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 85
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 90
mq_timedreceive: unlock
mq_timedreceive: lock
TASK 1: Timeout on Queue! Timer counter = 95
[ PASS] 01.005 queue-test.c:119 - Timer delete Rc=0
[ PASS] 01.006 queue-test.c:121 - Task 1 delete Rc=0
```","bug, unit-test",https://github.com/nasa/osal/issues/1164
coverage-vxworks-timebase: potential bug in the test implementation reported by Clang Address Sanitizer on macOS,"**Describe the bug**

When the Address Sanitizer is enabled in macOS / clang, I get the following error in the `OS_VxWorks_TimeBaseAPI_Impl_Init` test. The reproducibility is 100%.

There are two more issues found using Address Sanitizer. I have linked them to this ticket in the form of a comment.

```
17/75 Test #17: coverage-vxworks-timebase .........Subprocess aborted***Exception:   0.32 sec

[BEGIN] UNIT TEST

[BEGIN] 01 SETUP
[  END] No test cases

[BEGIN] 01 OS_VxWorks_TimeBaseAPI_Impl_Init
=================================================================
==32782==ERROR: AddressSanitizer: global-buffer-overflow on address 0x0001018062b8 at pc 0x000101860845 bp 0x7ffeee4446e0 sp 0x7ffeee443ea8
WRITE of size 480 at 0x0001018062b8 thread T0
    #0 0x101860844 in __asan_memset+0xf4 (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x46844)
    #1 0x1017c238b in Osapi_Test_Setup+0x6b (coverage-vxworks-timebase-testrunner:x86_64+0x10000738b)
    #2 0x1017de8c7 in UtTest_Run+0x237 (coverage-vxworks-timebase-testrunner:x86_64+0x1000238c7)
    #3 0x1017d79a8 in OS_Application_Run+0x8 (coverage-vxworks-timebase-testrunner:x86_64+0x10001c9a8)
    #4 0x1017df318 in main+0x178 (coverage-vxworks-timebase-testrunner:x86_64+0x100024318)
    #5 0x7fff20404f3c in start+0x0 (libdyld.dylib:x86_64+0x15f3c)

0x0001018062b8 is located 40 bytes to the left of global variable 'OS_stub_timecb_table' defined in '/Users/stanislaw/workspace/projects/code/osal/src/unit-test-coverage/ut-stubs/src/osapi-shared-idmap-table-stubs.c:42:20' (0x1018062e0) of size 240
0x0001018062b8 is located 0 bytes to the right of global variable 'OS_stub_timebase_table' defined in '/Users/stanislaw/workspace/projects/code/osal/src/unit-test-coverage/ut-stubs/src/osapi-shared-idmap-table-stubs.c:41:20' (0x101806240) of size 120
SUMMARY: AddressSanitizer: global-buffer-overflow (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x46844) in __asan_memset+0xf4
Shadow bytes around the buggy address:
  0x100020300c00: 00 00 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9 f9
  0x100020300c10: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00
  0x100020300c20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100020300c30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f9 f9
  0x100020300c40: f9 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00
=>0x100020300c50: 00 00 00 00 00 00 00[f9]f9 f9 f9 f9 00 00 00 00
  0x100020300c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100020300c70: 00 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9
  0x100020300c80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100020300c90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100020300ca0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==32782==ABORTING
```

**To Reproduce**

Enable Address Sanitizer in the root CMakeLists.txt.

```
add_compile_options(""-fsanitize=address"")
add_link_options(""-fsanitize=address"")

#add_compile_options(""-fsanitize=thread"")
#add_link_options(""-fsanitize=thread"")

#add_compile_options(""-fsanitize=undefined"")
#add_link_options(""-fsanitize=undefined"")
```

Run the tests, including the 

**Expected behavior**

I suspect a memory management error that needs to be investigated. When the issue is fixed, the Address Sanitizer should report no issues.

**Code**

`–`

**System observed on:**
 - Hardware Mac
 - OS: macOS Big Sur
 - Versions https://github.com/nasa/osal/pull/1161

**Additional context**

`–`

**Reporter Info**

Stanislav Pankevich (Personal contribution)
","bug, unit-test",https://github.com/nasa/osal/issues/1163
linkage problem on macOS: ld: symbol(s) not found for architecture x86_64,"**Is your feature request related to a problem? Please describe.**

There is a solvable linkage problem on macOS: `ld: symbol(s) not found for architecture x86_64`. 

```
Undefined symbols for architecture x86_64:
  ""_OS_impl_filehandle_table"", referenced from:
      _Test_OS_SocketConnect_Impl in coveragetest-bsd-sockets.c.o
      _Test_OS_SocketAccept_Impl in coveragetest-bsd-sockets.c.o
      _Test_OS_SocketRecvFrom_Impl in coveragetest-bsd-sockets.c.o
      _OS_SocketOpen_Impl in os-impl-bsd-sockets.c.o
      _OS_SocketBind_Impl in os-impl-bsd-sockets.c.o
      _OS_SocketConnect_Impl in os-impl-bsd-sockets.c.o
      _OS_SocketShutdown_Impl in os-impl-bsd-sockets.c.o
      ...
  ""_OS_stream_table"", referenced from:
      _Test_OS_SocketOpen_Impl in coveragetest-bsd-sockets.c.o
      _Test_OS_SocketBind_Impl in coveragetest-bsd-sockets.c.o
      _Osapi_Test_Setup in coveragetest-bsd-sockets.c.o
      _OS_SocketOpen_Impl in os-impl-bsd-sockets.c.o
      _OS_SocketBind_Impl in os-impl-bsd-sockets.c.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[3]: *** [unit-test-coverage/vxworks/coverage-vxworks-bsd-sockets-testrunner] Error 1
make[2]: *** [unit-test-coverage/vxworks/CMakeFiles/coverage-vxworks-bsd-sockets-testrunner.dir/all] Error 2
make[1]: *** [all] Error 2
```

**Describe the solution you'd like**

The issue seems to be coming from the differences between `gcc` on Linux and `clang` on macOS. The following simple modification makes the error to go away for the `OS_module_table` symbol.

```diff
-OS_module_internal_record_t OS_module_table[OS_MAX_MODULES];
+OS_module_internal_record_t OS_module_table[OS_MAX_MODULES] = {0};
```

```diff
-OS_timecb_internal_record_t OS_timecb_table[OS_MAX_TIMERS];
+OS_timecb_internal_record_t OS_timecb_table[OS_MAX_TIMERS] = {0};
```

and so on...

This change is implemented consistently in https://github.com/nasa/osal/pull/1161.

**Describe alternatives you've considered**

It doesn't seem to be possible to implement it differently on macOS / clang.

**Additional context**

This solution makes sense only if the macOS OSAL is integrated into the OSAL CI. Otherwise, it will not be obvious to a Linux programmer that the practice of initializing the global variables has to be followed.

**Requester Info**
Stanislav Pankevich (Personal contribution)
",enhancement,https://github.com/nasa/osal/issues/1162
os/posix: port of the posix implementation to macOS (take 2),"**Describe the contribution**

This is an improved version of the previous macOS-related PR: https://github.com/nasa/osal/pull/352. Since 2020, the improvements in the OSAL's build system made it possible to reuse most of the Linux/POSIX layer and reduce the size of the diff to just a few lines plus the addition of several small libraries that are missing on macOS.

**Testing performed**

- I am running the OSAL's tests on a macOS machine.
- There is a separate GitHub action for running this changeset on GitHub Actions's macOS machine.
- I don't have a non-trivial cFS simulation with many apps to test the full cFS integration on macOS just yet.

**Expected behavior changes**

With this change, it should be possible to run the cFS OSAL on macOS.

Related nice-to-have and non-blocking issues:

- [ ] https://github.com/nasa/osal/issues/1160
- [ ] https://github.com/nasa/osal/issues/1162
- [ ] https://github.com/nasa/osal/issues/1163
- [ ] https://github.com/nasa/osal/issues/1164
- [ ] https://github.com/nasa/osal/issues/1165

**System(s) tested on**
 - Hardware: Mac
 - OS: macOS Big Sur 11.5.2 (20G95)
 - Versions: https://github.com/nasa/osal/commit/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327 + this changeset.

**Additional context**

I am not sure how much the macOS port is relevant to the community. This work still needs discussion (5-10 trivial-to-medium discussion items) and I clearly need someone from the cFS team to support this effort.

**Third party code**

I have left a comment on the `mqueue.h` file that points to the book where the implementation was adapted from.

**Contributor Info - All information REQUIRED for consideration of pull request**

Stanislav Pankevich, Personal.

The individual CLA has been signed.",,https://github.com/nasa/osal/pull/1161
tests: Calling sem_destroy() on semaphores that are still being used,"**Is your feature request related to a problem? Please describe.**

(I would like to open this as a general discussion so using the Feature ticket as the closest one)

Running some of the OSAL's tests on macOS results in `BUG IN CLIENT OF LIBDISPATCH: Semaphore object deallocated while in use""`. Instead of `<semaphore.h>` macOS's provides `<dispatch/semaphore.h>` and with some minor differences, the API is very similar. The above error message is a protection built in the implementation of semaphores to prevent a user from calling `dispatch_release()` on a semaphore that is still being used.

**Describe the solution you'd like**

3 of the current OSAL's test are hitting this error (see Appendix below) and I am wondering if it would be practical to improve the design of these tests.

I would also like to check with someone my understanding that destroying the resources while they are still being used results in undefined behaviour and that the undefined behaviour should be avoided even if the scope is test code, not the OSAL code itself.

**Describe alternatives you've considered**

For now, I am using an alternative implementation of semaphores found [here](https://stackoverflow.com/a/48778462/598057) but I think it would be better to use the `dispatch_semaphore.h` as a more native implementation on macOS.

**Additional context**

`–`

**Requester Info**

Stanislav Pankevich, individual contribution.

---

# Appendix: Calling sem_destroy() when a semaphore is still being used

### 70 - osal_core_UT (ILLEGAL)

```
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)
  * frame #0: 0x00007fff2026d229 libdispatch.dylib`_dispatch_semaphore_dispose.cold.1 + 27
    frame #1: 0x00007fff202400bc libdispatch.dylib`_dispatch_semaphore_dispose + 46
    frame #2: 0x00007fff2023ec1a libdispatch.dylib`_dispatch_dispose + 87
    frame #3: 0x000000010804c130 osal_core_UT`mac_sem_destroy(psem=0x00000001082b1f90) at posix-macos-semaphore2.c:44:5
    frame #4: 0x0000000108049964 osal_core_UT`OS_CountSemDelete_Impl(token=0x00007ffee7bcf8d8) at os-impl-countsem.c:114:9
    frame #5: 0x000000010803f386 osal_core_UT`OS_CountSemDelete(sem_id=196634) at osapi-countsem.c:135:23
    frame #6: 0x0000000108038416 osal_core_UT`UT_os_count_sem_take_test at ut_oscore_countsem_test.c:235:9
    frame #7: 0x000000010803e4f9 osal_core_UT`UtTest_Run at uttest.c:174:17
    frame #8: 0x000000010803dae9 osal_core_UT`OS_Application_Run at utbsp.c:232:5
    frame #9: 0x000000010805154a osal_core_UT`main(argc=1, argv=0x00007ffee7bcf9d8) at bsp_start.c:247:5
    frame #10: 0x00007fff20404f3d libdyld.dylib`start + 1
    frame #11: 0x00007fff20404f3d libdyld.dylib`start + 1
```
    
```
_dispatch_semaphore_dispose.cold.1:
	movq   %rsi, %rax
	subq   (%rdi), %rax
	leaq   0x62a5(%rip), %rcx         ; ""BUG IN CLIENT OF LIBDISPATCH: Semaphore object deallocated while in use""
	movq   %rcx, 0x604a3566(%rip)     ; gCRAnnotations + 8
	movq   %rax, 0x604a358f(%rip)     ; gCRAnnotations + 56
	ud2
```

### 54 - count-sem-test (ILLEGAL)

```
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)
  * frame #0: 0x00007fff2026d229 libdispatch.dylib`_dispatch_semaphore_dispose.cold.1 + 27
    frame #1: 0x00007fff202400bc libdispatch.dylib`_dispatch_semaphore_dispose + 46
    frame #2: 0x00007fff2023ec1a libdispatch.dylib`_dispatch_dispose + 87
    frame #3: 0x0000000102c1f980 count-sem-test`mac_sem_destroy(psem=0x0000000102c3cbc8) at posix-macos-semaphore2.c:44:5
    frame #4: 0x0000000102c1d1c4 count-sem-test`OS_CountSemDelete_Impl(token=0x00007ffeecff47c8) at os-impl-countsem.c:114:9
    frame #5: 0x0000000102c13156 count-sem-test`OS_CountSemDelete(sem_id=196609) at osapi-countsem.c:135:23
    frame #6: 0x0000000102c12e7d count-sem-test`OS_CleanUpObject(object_id=196609, arg=0x00007ffeecff493c) at osapi-common.c:332:13
    frame #7: 0x0000000102c160fc count-sem-test`OS_ForEachDoCallback(obj_id=196609, ref=0x00007ffeecff4880) at osapi-idmap.c:247:5
    frame #8: 0x0000000102c1731d count-sem-test`OS_ObjectIdIteratorProcessEntry(iter=0x00007ffeecff4898, func=(count-sem-test`OS_ForEachDoCallback at osapi-idmap.c:243)) at osapi-idmap.c:1370:14
    frame #9: 0x0000000102c1743a count-sem-test`OS_ForEachObjectOfType(idtype=3, creator_id=0, callback_ptr=(count-sem-test`OS_CleanUpObject at osapi-common.c:315), callback_arg=0x00007ffeecff493c) at osapi-idmap.c:1436:13
    frame #10: 0x0000000102c173a7 count-sem-test`OS_ForEachObject(creator_id=0, callback_ptr=(count-sem-test`OS_CleanUpObject at osapi-common.c:315), callback_arg=0x00007ffeecff493c) at osapi-idmap.c:1410:9
    frame #11: 0x0000000102c12cf9 count-sem-test`OS_DeleteAllObjects at osapi-common.c:386:9
    frame #12: 0x0000000102c12c49 count-sem-test`OS_API_Teardown at osapi-common.c:262:5
    frame #13: 0x0000000102c123b9 count-sem-test`UtTest_Run at uttest.c:180:17
    frame #14: 0x0000000102c11979 count-sem-test`OS_Application_Run at utbsp.c:232:5
    frame #15: 0x0000000102c24c1a count-sem-test`main(argc=1, argv=0x00007ffeecff4a08) at bsp_start.c:247:5
    frame #16: 0x00007fff20404f3d libdyld.dylib`start + 1
    frame #17: 0x00007fff20404f3d libdyld.dylib`start + 1
```

```
_dispatch_semaphore_dispose.cold.1:
	movq   %rsi, %rax
	subq   (%rdi), %rax
	leaq   0x62a5(%rip), %rcx         ; ""BUG IN CLIENT OF LIBDISPATCH: Semaphore object deallocated while in use""
	movq   %rcx, 0x604a3566(%rip)     ; gCRAnnotations + 8
	movq   %rax, 0x604a358f(%rip)     ; gCRAnnotations + 56
	ud2
```

### 55 - count-sem-timeout-test (ILLEGAL)

```
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)
  * frame #0: 0x00007fff2026d229 libdispatch.dylib`_dispatch_semaphore_dispose.cold.1 + 27
    frame #1: 0x00007fff202400bc libdispatch.dylib`_dispatch_semaphore_dispose + 46
    frame #2: 0x00007fff2023ec1a libdispatch.dylib`_dispatch_dispose + 87
    frame #3: 0x0000000106f7a840 count-sem-timeout-test`mac_sem_destroy(psem=0x0000000106f97bc8) at posix-macos-semaphore2.c:44:5
    frame #4: 0x0000000106f78084 count-sem-timeout-test`OS_CountSemDelete_Impl(token=0x00007ffee8c997b8) at os-impl-countsem.c:114:9
    frame #5: 0x0000000106f6e016 count-sem-timeout-test`OS_CountSemDelete(sem_id=196609) at osapi-countsem.c:135:23
    frame #6: 0x0000000106f6dd3d count-sem-timeout-test`OS_CleanUpObject(object_id=196609, arg=0x00007ffee8c9992c) at osapi-common.c:332:13
    frame #7: 0x0000000106f70fbc count-sem-timeout-test`OS_ForEachDoCallback(obj_id=196609, ref=0x00007ffee8c99870) at osapi-idmap.c:247:5
    frame #8: 0x0000000106f721dd count-sem-timeout-test`OS_ObjectIdIteratorProcessEntry(iter=0x00007ffee8c99888, func=(count-sem-timeout-test`OS_ForEachDoCallback at osapi-idmap.c:243)) at osapi-idmap.c:1370:14
    frame #9: 0x0000000106f722fa count-sem-timeout-test`OS_ForEachObjectOfType(idtype=3, creator_id=0, callback_ptr=(count-sem-timeout-test`OS_CleanUpObject at osapi-common.c:315), callback_arg=0x00007ffee8c9992c) at osapi-idmap.c:1436:13
    frame #10: 0x0000000106f72267 count-sem-timeout-test`OS_ForEachObject(creator_id=0, callback_ptr=(count-sem-timeout-test`OS_CleanUpObject at osapi-common.c:315), callback_arg=0x00007ffee8c9992c) at osapi-idmap.c:1410:9
    frame #11: 0x0000000106f6dbb9 count-sem-timeout-test`OS_DeleteAllObjects at osapi-common.c:386:9
    frame #12: 0x0000000106f6db09 count-sem-timeout-test`OS_API_Teardown at osapi-common.c:262:5
    frame #13: 0x0000000106f6d279 count-sem-timeout-test`UtTest_Run at uttest.c:180:17
    frame #14: 0x0000000106f6c839 count-sem-timeout-test`OS_Application_Run at utbsp.c:232:5
    frame #15: 0x0000000106f7fada count-sem-timeout-test`main(argc=1, argv=0x00007ffee8c999f8) at bsp_start.c:247:5
    frame #16: 0x00007fff20404f3d libdyld.dylib`start + 1
    frame #17: 0x00007fff20404f3d libdyld.dylib`start + 1
```

```
_dispatch_semaphore_dispose.cold.1:
	movq   %rsi, %rax
	subq   (%rdi), %rax
	leaq   0x62a5(%rip), %rcx         ; ""BUG IN CLIENT OF LIBDISPATCH: Semaphore object deallocated while in use""
	movq   %rcx, 0x604a3566(%rip)     ; gCRAnnotations + 8
	movq   %rax, 0x604a358f(%rip)     ; gCRAnnotations + 56
	ud2
```
","bug, unit-test",https://github.com/nasa/osal/issues/1160
Potential aliasing warning in socket code,"**Describe the bug**
When using certain compiler versions and optimization flags, the address conversions in `os-impl-bsd-sockets.c` may trigger warnings.

**To Reproduce**
Build using GCC 10.3 with `-O3 -fstrict-aliasing -Wstrict-aliasing=2` options

Example warning:
```
osal/src/os/portable/os-impl-bsd-sockets.c: In function ‘OS_SocketAddrFromString_Impl’:
osal/src/os/portable/os-impl-bsd-sockets.c:724:42: error: dereferencing type-punned pointer might break strict-aliasing rules [-Werror=strict-aliasing]
  724 |     Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;
      |                                          ^~~~~~~~~~~~~~~
```

**Expected behavior**
Should be clean.

**Code snips**
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/src/os/portable/os-impl-bsd-sockets.c#L719

**System observed on:**
Ubuntu 21.04

**Additional context**
This is due to direct casting of the data, to be pedantically correct should probably memcpy the address value, rather than directly cast it, to be super safe.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1159
osal Integration candidate: 2021-09-21,"**Describe the contribution**


*Combines*

PR #1149

- Fix #1148, Enable symbol api test and MIR dump too large

PR #1152

- Fix #1151, MIR symbol too long or table to long for osloader test

PR #1155  

- Fix #1154, add bsp-specific configuration flag registry 

PR #1157 

- Fix #1153, add os-specifc socket flag function 

**Testing performed**
osal Checks <https://github.com/nasa/osal/pull/1158/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/359/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu
RTEMS (see cFS Bundle Checks)

**Additional context**
Part of https://github.com/nasa/cFS/pull/359

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 
@skliper ",,https://github.com/nasa/osal/pull/1158
"Fix #1153, add os-specifc socket flag function","**Describe the contribution**
Adds the capability for the bsd sockets implementation to use a function provided by the OS layer to set the socket flags.

This allows VxWorks to have an alternative implementation that uses ioctl rather than fcntl to set the flags.

Fixes #1153

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
VxWorks will use `ioctl()` rather than `fcntl()` to set the socket flags

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",vxworks,https://github.com/nasa/osal/pull/1157
Expand use of the BSP specific configuration registry across the rest of the resources,"**Is your feature request related to a problem? Please describe.**
#1155 implements use of the registry for vxworks tasks but generically supports all resources.

**Describe the solution you'd like**
Add to all implementations/resources where implementation layer flags can be passed in.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA?GSFC
",enhancement,https://github.com/nasa/osal/issues/1156
"Fix #1154, add bsp-specific configuration flag registry","**Describe the contribution**
Adds a simple BSP API to get/set integer flags for each resource type.  All bits are platform-defined, so this can be used to store any arbitrary platform flag.

Initial use case is for setting task flags on vxWorks platforms which require a certain task flag to be set.

Fixes #1154

**Testing performed**
Build and sanity check CFE, run all tests.

**Expected behavior changes**
None on the framework build.  However this feature can be used internally to get around an issue where some vxWorks task flags need to be set only on one specific platform.

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/1155
SP0/VxWorks6.9 SPE unavailable exception encountered,"**Describe the bug**
Apparently VxWorks needs VX_SPE_TASK defined for tasks on a 32 bit system if any SPE instructions are inserted by the compiler.  Lacking this I hit ""SPE unavailable exception"" from within a child task on the SP0 with VxWorks 6.9.

Side note - Turns out under certain circumstances VX_FP_TASK behaves like VX_SPE_TASK.

Flags are set here:
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/src/os/vxworks/src/os-impl-tasks.c#L132-L139

**To Reproduce**
Run the cfe functional test on SP0, observe the SPE unavailable exception related to the TestTblNonAppContext task started by TestTableBadContext in tbl_registration_test.c:
https://github.com/nasa/cFE/blob/64a6a59456fa9e47dc93e4bb9cecacc3d86d1862/modules/cfe_testcase/src/tbl_registration_test.c#L246-L248

Note - I'm not sure how consistent this is, since it'll only occur if SPE instructions are added by the compiler (no clue why it happened w/ this task).

**Expected behavior**
No exception - could be achieved by allowing additional flags to be added from the PSP build configuration?

**System observed on:**
 - Hardware: SP0
 - OS: VxWorks 6.9
 - Versions Bundle main

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/osal/issues/1154
fcntl(G_GETFL) fails on VxWorks 6.9,"**Is your feature request related to a problem? Please describe.**
Now that we check the return for fcntl, turns out it fails on VxWorks 6.9 (not implemented).  Used in OS_SocketOpen_Impl and OS_SocketAccept_Impl:
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/src/os/portable/os-impl-bsd-sockets.c#L163
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/src/os/portable/os-impl-bsd-sockets.c#L444

**Describe the solution you'd like**
Consider trying ioctl if fcntl fails?  Rumor has it ioctl is supported.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","bug, vxworks",https://github.com/nasa/osal/issues/1153
"Fix #1151, MIR symbol too long or table to long for osloader test","**Describe the contribution**
- Fix #1151 

Makes either symbol too long or table to big error code returns into MIR, since it's not an actual failure of the test.

**Testing performed**
Ran on SP0 and CI

**Expected behavior changes**
MIR for symbol table configuration related errors

**System(s) tested on**
 - Hardware: SP0
 - OS: VxWorks 6.9
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/1152
OSAL loader test hard fails if size exceeded,"**Is your feature request related to a problem? Please describe.**
Hard failure if UT_SYMTABLE_SIZE_LIMIT not big enough:
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/src/unit-tests/osloader-test/ut_osloader_symtable_test.c#L199-L202

**Describe the solution you'd like**
MIR if symbol table isn't large enough

**Describe alternatives you've considered**
Could consolidate this and test/symbol-api-test

**Additional context**
Similar issue as fixed in #1149

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/osal/issues/1151
"OSAL loader unit test builds hardcoded 32 modules, test fails if more modules are supported","**Is your feature request related to a problem? Please describe.**
Test failure based on hard 32 setting in CMakeList.txt in the osal tree larger OS_MAX_MODULES is configured:
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/src/unit-tests/osloader-test/CMakeLists.txt#L13

**Describe the solution you'd like**
Possibly relate to OSAL_CONFIG_MAX_MODULES  (+1):
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/default_config.cmake#L244

Otherwise at minimum make it configurable, and if so test should TSF with a useful message like increase XXX to match YYY.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, draco-rc3",https://github.com/nasa/osal/issues/1150
"Fix #1148, Enable symbol api test and MIR dump too large","**Describe the contribution**
- Fix #1148 

Always runs symbol tests now and checks for not implemented.  Also will report MIR for a symbol table that won't fit instead of causing a failure.

**Testing performed**
Ran on MCP750, confirmed pass.  CI.

**Expected behavior changes**
Symbol test now isn't skipped

**System(s) tested on**
 - Hardware: MCP750
 - OS: VxWorks 6.9
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/1149
"Symbol API test uses old OS_INCLUDE_MODULE_LOADER, ends up skipping tests","**Is your feature request related to a problem? Please describe.**
Possibly missed in #427 conversion to source selection, TestSymbolApi depends on the old define which means it hasn't been getting tested for a while:
https://github.com/nasa/osal/blob/2a2defbb6b5ecc9a0f6d5af96ff73f88edc27327/src/tests/symbol-api-test/symbol-api-test.c#L35

**Describe the solution you'd like**
Convert to check for OS_ERR_NOT_IMPLEMENTED (applies to OS_SymbolLookup, OS_SymbolTableDump already has it)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/osal/issues/1148
" Typos in documentation, print statements, and comments","**Is your feature request related to a problem? Please describe.**
Found multiple typos throughout the codebase


**Describe the solution you'd like**
Correct grammar and spelling errors

**Describe alternatives you've considered**
None

**Additional context**
Retroactively created for #1137",docs,https://github.com/nasa/osal/issues/1147
"Remove softsleep, as a dead store.","**Describe the contribution**
A clear and concise description of what the contribution is.
- Removes softsleep, as it doesnt appear to be used.

**Testing performed**
Steps taken to test the contribution:

2. Run through your ci pipeline

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Deleting code

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
",CCB:Approved,https://github.com/nasa/osal/pull/1146
osal Integration candidate: 2021-09-07,"**Describe the contribution**
PR #1142 

- Fix #1141, add typecast to memchr call 

PR #1144  

- Fix #1143, Regex update in coverage enforcement to match .0 

**Testing performed**

osal Checks <https://github.com/nasa/osal/pull/1145/checks>
cFS Bundle Checks <https://github.com/nasa/cfs/pull/351/checks>


**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu CI

**Additional context**
Part of <https://github.com/nasa/cfs/issues/351>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@jphickey ",,https://github.com/nasa/osal/pull/1145
"Fix #1143, Regex update in coverage enforcement to match .0","**Describe the contribution**
- Fix #1143 

Updates the regex to always get 4 matches (was ignoring .0%) so coverage enforcement will work as expected.  Also simplified the comparison.

**Testing performed**
Ran regex offline with various inputs including .0% case.

**Expected behavior changes**
CI will work more consistently

**System(s) tested on**
 - Hardware: Intel i5/Docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, continuous-integration",https://github.com/nasa/osal/pull/1144
Coverage verification will fail if percentage is a round number,"**Is your feature request related to a problem? Please describe.**
`grep -oP ""[1-9]+[0-9]*""` will only find three matches for any percentage that ends with `.0%`, where 4 matches are expected.

**Describe the solution you'd like**
Change the first match to 0-9

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",continuous-integration,https://github.com/nasa/osal/issues/1143
"Fix #1141, add typecast to memchr call","**Describe the contribution**
This function is documented as returning `void*`, and on some compilers this requires an explicit cast to `const char*` to avoid a warning.

Fixes #1141

**Testing performed**
Build and sanity check CFE

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Additional context**
Isolated from draft contribution from @thesamprice in #1140

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1142
Typecast memcchr in os-shared-common.h,"**Describe the bug**
memchr is called and then assigned to a const char * without a cast.
This causes failures on certain compilers (llvm).

https://www.cplusplus.com/reference/cstring/memchr/
```
const void * memchr ( const void * ptr, int value, size_t num );
      void * memchr (       void * ptr, int value, size_t num );
```

In file `os-shared-common.h`
change 
```
    const char *end = memchr(s, 0, maxlen);
```
to 
```
    const char *end = (const char *)memchr(s, 0, maxlen);
```

**System observed on:**
 - Hardware
 - OS: [MAC]
 - Versions [OSAL Hash 7ebb463]
```
clang --version
Apple clang version 12.0.0 (clang-1200.0.32.29)
Target: x86_64-apple-darwin19.6.0
Thread model: posix
InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
```


**Reporter Info**
Sam Price - GSFC

![image](https://user-images.githubusercontent.com/817712/132370131-1a74b03d-1873-48fd-bc17-c9a86f975c8f.png)
",bug,https://github.com/nasa/osal/issues/1141
Draft: Qt5,"**Describe the contribution**
A clear and concise description of what the contribution is.
- Include explicitly what issue it addresses [e.g. Fixes #X]

Adds QT as an operating system.

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

Built on mac using mac ports install of qt
```
export PATH=/opt/local/libexec/qt5/bin:$PATH
cmake ..
```

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [Macbook]
 - OS: [qt5]
 - Versions: []

**Additional context**
Several things not implemented,
Unsure how to implement timers / etc.

**Third party code**
If included, identify any third party code and provide text file of license
Qt library is linked against.

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
You have my info.
",invalid,https://github.com/nasa/osal/pull/1140
Remove `extern` from function prototypes in stub generator script,"**Is your feature request related to a problem? Please describe.**
Function prototype `extern` prefix has no effect, from generator script:
https://github.com/nasa/osal/blob/2cd118e76d4609033654df2f20483d7f5a592ce5/ut_assert/scripts/generate_stubs.pl#L330

**Describe the solution you'd like**
Remove.

**Describe alternatives you've considered**
None

**Additional context**
nasa/cfe#1319

**Requester Info**
Jacob Hageman - NASA/GSFC
","good first issue, unit-test, draco-rc1",https://github.com/nasa/osal/issues/1139
osal Integration candidate: 2021-08-31,"**Describe the contribution**

PR #1136

- Fix #1135, add bitmask assert macros

**Testing performed**

osal checks <https://github.com/nasa/osal/pull/1138/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/348/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu
RTEMS (bundle)

**Additional context**
Part of https://github.com/nasa/cFS/pull/348

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey ",,https://github.com/nasa/osal/pull/1138
"Fix #1147, Correct typos in documentation, print statements, and comments","**Describe the contribution**
Fixed various minor text typos in README docs, comments and a few debug/error message strings.

- Fix #1147
  
**Testing performed**
None (non-executable code).

**Expected behavior changes**
None. Code execution is unchanged/unaffected.

**System(s) tested on**
n/a

**Additional context**
n/a

**Code contributions**
n/a",community,https://github.com/nasa/osal/pull/1137
"Fix #1135, add bitmask assert macros","**Describe the contribution**
Add a pair of macros that can confirm a value has bits set or does not have bits set.  By using bitmask-aware macros, the logged
information can include both the raw/actual value as well as the specific bits being tested.

Fixes #1135

**Testing performed**
Build and run all tests

**Expected behavior changes**
None here, just adds new macros

**System(s) tested on**
Ubuntu

**Additional context**
Tested by updating the new time clock state checks to use this macro.  Looks a little something like this in the log:

```
[BEGIN] 94 Test Clock
[ INFO] time_current_test.c:126:Testing: CFE_TIME_GetClockState, CFE_TIME_GetClockInfo
[ PASS] 94.001 time_current_test.c:145 - CFE_TIME_GetClockInfo() (0x33e0) &~ CFE_TIME_FLAG_CLKSET (0x8000)
[ PASS] 94.002 time_current_test.c:148 - CFE_TIME_GetClockInfo() (0x33e0) & CFE_TIME_FLAG_SRCINT (0x2000)
[ PASS] 94.003 time_current_test.c:149 - CFE_TIME_GetClockInfo() (0x33e0) & CFE_TIME_FLAG_SIGPRI (0x1000)
[ PASS] 94.004 time_current_test.c:150 - CFE_TIME_GetClockInfo() (0x33e0) &~ CFE_TIME_FLAG_REFERR (0x10)
[ PASS] 94.005 time_current_test.c:151 - CFE_TIME_GetClockInfo() (0x33e0) &~ CFE_TIME_FLAG_UNUSED (0xf)
[  END] 94 Test Clock           TOTAL::5     PASS::5     FAIL::0     MIR::0     TSF::0     TTF::0     WARN::0
```

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1136
Add UtAssert bit field check macros,"**Is your feature request related to a problem? Please describe.**
Bit fields are a common method of storing multiple boolean values into a single data field.  UtAssert should provide macros that aid in testing code that uses this type of storage.

**Describe the solution you'd like**
Add some new UtAssert macros to check bit fields.  These macros should include in the log the raw value of the bit field being checked (as a hex number) as well as the specific mask bits being checked for.  Two forms should be included, one which passes if the bit(s) are set, and one which passes if the bit(s) are not set.

This should be able to use the same underlying Generic assert helper function, just with a different macro wrapper around it that checks a bit mask.

**Describe alternatives you've considered**
May use the existing UtAssert_UINT32_EQ/NEQ, in either of these forms:

1. UtAssert_INT32_EQ(BitField, BitField | CHECK_BITS) 
2. UtAssert_INT32_EQ(BitField & CHECK_BITS, CHECK_BITS) 

Downsides: the resulting log is not quite as concise as it should be:
 - Its not clear that this is a bitmask check - as it is logged as a normal value check.
 - Only either the raw value (form 1) or the bitmask value (form 2) will be logged.  It will not log both pieces of info.
 - Values will be logged in decimal/base-10 by default which is not easy to read when examining bit flags - base-16 is preferable.

All of the above should be solvable by simply making a different wrapper macro around the existing `UtAssert_GenericUnsignedCompare` function.

**Additional context**
See nasa/cfe#1860 for a use case

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, unit-test",https://github.com/nasa/osal/issues/1135
"Fix #1133, Disable Unit Tests in CodeQL","**Describe the contribution**
Fix #1133 

**Testing performed**
Tested on forked repo: https://github.com/ArielSAdamsNASA/osal/security/code-scanning?query=branch%3AUnit-test-off

**Expected behavior changes**
Disabled unit tests for both CodeQL workflows. Shows less code scanning alerts with it disabled. Alerts should only be shown for flight code. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal",wontfix,https://github.com/nasa/osal/pull/1134
Disable Unit Tests in CodeQL,"**Is your feature request related to a problem? Please describe.**
Do not analyze unit and functional test code for CodeQL. 

**Describe the solution you'd like**
Disable unit tests in the workflow. 

**Requester Info**
Ariel Adams, ASRC Federal
","wontfix, continuous-integration",https://github.com/nasa/osal/issues/1133
osal Integration candidate: 2021-08-24,"**Describe the contribution**

PR #1131 

Fix #1130, add test case types similar to NA 

**Testing performed**
osal CI <https://github.com/nasa/osal/pull/1132/checks>
cFS Bundle CI <https://github.com/nasa/cFS/pull/340/checks>

**Expected behavior changes**
See PR

**System(s) tested on**
Ubuntu

**Additional context**
Part of <https://github.com/nasa/cfs/issues/340>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey ",,https://github.com/nasa/osal/pull/1132
"Fix #1130, add test case types similar to NA","**Describe the contribution**
Add two more test case variants, similar to NA, where failure of the test case does not translate to failure of the overall
test.

The additional cases have different levels of default visibility, and may be handled differently by the end user.  That is, some
tests may be skipped because they are truly NA (and nothing for the user to do to change that) and some tests may be skipped
because the system was not set up in a way that allowed them to be run (and the user must fix that and re-run).

Fixes #1130

**Testing performed**
Build and run all tests.  Also modify CFE test to use new casetype, confirm working as expected.

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Additional context**
Intended to differentiate between the nuances of all tests that are currently marked ""N/A"".  For some cases, its purely informational because the check does not apply, and nothing more needs to be done.  For other cases, a test might be skipped because the user did not start the system in a way where the tests could be run, and the user should correct that.  Lastly, for some cases, the condition was NA simply because there was more than one acceptable result for that test case.

For the first two, they should remain visible in the log by default, because they add some value to indicate what was (and was not) tested.  However the first requires no action of the user, and the second does require the user to correct something, so they should be marked differently.  The third is only relevant to software developers, it doesn't add much value to the log, so it can be hidden by default, but can still be seen by increasing the test verbosity to the debug level.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1131
"UtAssert ""N/A"" test case type is slightly overloaded","**Is your feature request related to a problem? Please describe.**
There are a number of similar situations for which the ""N/A"" (aka `UTASSERT_CASETYPE_NA`) log type is used, but have different nuances:

1. When a certain functionality is not implemented at all (e.g. network tests on a system without network stack, the API returns `OS_ERR_NOT_IMPLEMENTED`).  In this case a single ""N/A"" entry is used and the whole group of tests is skipped.
2. When a certain functionality is implemented, but cannot be tested due to external factors, such as the state of the system, how it was booted, etc.  (e.g. in the ""CDS"" test in ES, when calling CFE_ES_RegisterCDS(), if the CDS memory was not cleared before the test, the result may be ""CFE_ES_CDS_ALREADY_EXISTS"").  In this case the ""N/A"" entry is used to advise the user that the test is **incomplete** due these external factors, and that the user should take action to correct this and get a complete test result.
3. When there is more than one possible acceptable result from a specific function call.  In this case, the test code checks for each acceptable result, but are checked with `UTASSERT_CASETYPE_NA` to indicate that although this value was checked and does not match, it does _not_ constitute a failure of the test (the test can go on to check for the other possible acceptable results).

**Describe the solution you'd like**
These three different ""N/A"" nuances should ideally have a different case type.  (specific words/abbreviations can be discussed).  As the traditional meaning of ""N/A"" is ""Not applicable"", it likely line up best with the use case (1) above, where a test is truly not applicable on that platform/setup.  

For the other two, a separate casetype should be added to better convey the intent:

For item (2) above is to warn the user that the results are incomplete due to external factors, and they need to take action to correct those external factors to get a complete result.  This shouldn't necessarily be a failure; the test can still succeed in reduced form, but the report should be very clear that tests were skipped or not complete, and the user needs to take manual action to correct it.

For item (3) above, the intent is allow a ""soft"" test - where multiple values are acceptable, it is necessary to ""PASS"" (and log it) if a value _does_ match the acceptable value, but _not_ fail if the value does not match - because there are other acceptable values.  Typically these checks wouldn't need to go in the log at all; they may only be of interest to developers implementing the test, it does not provide much value in a final report log to see values that were checked for but didn't match.  (In that sense, visibility of these tests should be similar to DEBUG, but we should not overload DEBUG either).  

**Describe alternatives you've considered**
Leave all these case types as N/A

**Additional context**
Existing overload of N/A is not horribly broken/wrong, but it makes the logs a little harder to process, and not as clear as to what action (if any) the user needs to take for the N/A reports.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1130
Add standalone osal builds for RTEMS in continuous integration,"**Is your feature request related to a problem? Please describe.**

The cFS bundle has builds running on RTEMS. It would be helpful to do a standalone osal build using the same toolchain. 

**Describe the solution you'd like**
Port the workflows in the cFS bundle repo to the osal repo and modify for a standalone build
- https://github.com/nasa/cFS/blob/main/.github/workflows/build-cfs-rtems4.11.yml 
- https://github.com/nasa/cFS/blob/main/.github/workflows/build-cfs-rtems5.yml

**Describe alternatives you've considered**
None 

**Additional context**
See https://github.com/nasa/osal/blob/main/.github/workflows/local_unit_test.yml for example of a standalone osal build
","good first issue, continuous-integration, build-system, RTEMS, qemu",https://github.com/nasa/osal/issues/1128
osal Integration candidate: 2021-08-10,"**Describe the contribution**

PR #1117 
- Fix #1115, Add absolute branch coverage check 

**Testing performed**
osal Checks <https://github.com/nasa/osal/pull/1127/checks>
cFS Checks <https://github.com/nasa/cFS/pull/333/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
CI - Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/333>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@nmullane
",,https://github.com/nasa/osal/pull/1127
osal Integration candidate: 2021-08-03,"**Describe the contribution**

PR #1122 
- Fix #1118 Add UtAssert_MIR macro

PR #1125 
- Fix #1124, add generic asserts from CFE coverage testing


PR #1121 
- Fix #1120, add osapi-shell-stubs.c to OSAL stub library

**Testing performed**
osal Checks <https://github.com/nasa/osal/pull/1126/checks>
cFS Checks <https://github.com/nasa/cFS/pull/328/checks> 

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu CI

**Additional context**
Part of <https://github.com/nasa/cFS/pull/328>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 
@pepepr08 ",,https://github.com/nasa/osal/pull/1126
"Fix #1124, add generic asserts from CFE coverage testing","**Describe the contribution**
Migrates some of the assert extensions that were added for CFE coverage testing to the UtAssert level, so they can be used
in a wider scope of tests, not just CFE coverage.

The existing macros (e.g. UtAssert_INT32_EQ) are updated to use the same facility.

All macros are now also a single line and return the boolean pass/fail status, which was a useful feature of the CFE macros.

Fixes #1124 

**Testing performed**
Build and run all tests (functional + coverage) and confirm results are normal.

**Expected behavior changes**
No operational change to existing asserts, but formatting of some logs may change a little bit, so it may affect some scripts that are looking for very specific message (although it did not affect any of my log parsing scripts).

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1125
Migrate CFE generic integer assert tests to common UT Assert,"**Is your feature request related to a problem? Please describe.**
Recently CFE added a number of useful generic test assertion macros, for greater than / less than, booleans, and other commonly needed checks in the CFE coverage test.

It would be nice to use these same assertions in the functional test too, and perhaps other app/lib tests, since they are pretty generic.

**Describe the solution you'd like**
Migrate the code from CFE coverage test-specific area into general UT Assert to be usable in the full range of test environments.   

Currently the macros and code are in https://github.com/nasa/cFE/tree/main/modules/core_private/ut-stubs, thus private to CFE ""coverage"" test environment.

**Describe alternatives you've considered**
Could copy the macros and functions into `cfe_assert` so it can be used in functional tests, but then there would be two copies, and it would still be limited to CFE (no app/lib tests could use).

**Additional context**
Putting them into UT assert itself allows for the single/common implementation for both coverage and functional and any other app/lib test.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, unit-test",https://github.com/nasa/osal/issues/1124
Autogenerate UtAssert documentation,"**Is your feature request related to a problem? Please describe.**
UtAssert headers have doxygen style comments but aren't included in any of the current documentation generation paths.

**Describe the solution you'd like**
Either add a unique doxygen UtAssert users guide or add to an existing document.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","duplicate, docs",https://github.com/nasa/osal/issues/1123
Fix #1118 Add UtAssert_MIR macro,"**Describe the contribution**
Fixes #1118 Added UtAssert_MIR macro to avoid misuse of `UtAssertEx` when using the MIR case type `UTASSERT_CASETYPE_MIR`

**Testing performed**
1. Ran cFS Unit Tests

**Expected behavior changes**
No changes expected. Macro UtAssert_MIR is now available for use.

**System(s) tested on**
Ubuntu 18.04 VM

**Contributor Info - All information REQUIRED for consideration of pull request**
Jose F. Martinez Pedraza / NASA GSFC",CCB:Approved,https://github.com/nasa/osal/pull/1122
"Fix #1120, add osapi-shell-stubs.c to OSAL stub library","**Describe the contribution**
Adds the missing file to the library

Fixes #1120

**Testing performed**
Build and run unit tests

**Expected behavior changes**
Dependencies which invoke `OS_ShellOutputToFile` should now link successfully

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1121
"UT stub library missing ""shell"" API","**Describe the bug**
The `osapi-shell-stubs.c` file was not included in the `ut_osapi_stubs` library, and hence apps needing to test shell functions will get a linker error due to this missing function.

**To Reproduce**
Attempt to build the unit test for an app that calls `OS_ShellOutputToFile` API.  Link fails with the missing symbol.

**Expected behavior**
Build should succeed.

**Code snips**
List is here.  The ""shell"" stub file is there (generated from header) but was missed/omitted from the library somehow.
https://github.com/nasa/osal/blob/f11d04961d0410af1adb6a2202549b195be3fa5a/src/ut-stubs/CMakeLists.txt#L55-L97

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test",https://github.com/nasa/osal/issues/1120
"Unexercised code at the ""functional"" level of testing","**Is your feature request related to a problem? Please describe.**
Although the coverage test which link directly to the implementation *.c file for all of these do fully exercise the functions, they are not called from the ""functional"" level of testing which links to the osal library (and uses public include paths).  So it's possible they could pass all current testing but not get linked/included properly in relation to the library.  Also a call at the functional level would cover alternative implementations, not just what's provided currently (""black box"" testing).  Helps even for the inlines/macros in headers, since they could move and get missed in the public includes (not likely, but possible).

OS_GetBuildNumber
OS_GetVersionCodeName
OS_GetVersionNumber
OS_GetVersionString
OS_ObjectIdToArrayIndex

Inline:
OS_ObjectIdDefined
OS_ObjectIdEqual
OS_ObjectIdFromInteger
OS_ObjectIdToInteger
OS_TimeAdd
OS_TimeAssembleFromMicroseconds
OS_TimeAssembleFromMilliseconds
OS_TimeAssembleFromNanoseconds
OS_TimeAssembleFromSubseconds
OS_TimeGetFractionalPart
OS_TimeGetMicrosecondsPart
OS_TimeGetMillisecondsPart
OS_TimeGetNanosecondsPart
OS_TimeGetSubsecondsPart
OS_TimeGetTotalMicroseconds
OS_TimeGetTotalMilliseconds
OS_TimeGetTotalNanoseconds
OS_TimeGetTotalSeconds
OS_TimeSubtract

**Describe the solution you'd like**
Add a simple test for these at the functional level (tests/unit-tests).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, unit-test",https://github.com/nasa/osal/issues/1119
Add UtAssert_MIR macro (similar to UtAssert_NA),"**Is your feature request related to a problem? Please describe.**
Use of UTASSERT_CASETYPE_MIR not standardized like NA, leads to potential for misuse

**Describe the solution you'd like**
Add a similar macro as UtAssert_NA

**Describe alternatives you've considered**
None

**Additional context**
Related to nasa/cFE#1711

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/1118
"Fix #1115, Add absolute branch coverage check","Check for absolute number of missed branches in GitHub workflow instead of checking a percentage branch coverage.

Ensure that the number of missed branches does not increase from the current 4 missed branches.

**Describe the contribution**
Fixes  #1115. The PR #1114 that is currently in the integration candidate branch has only 4 missed branches in the unit tests. This PR checks that the number of missed branches is <= 4 instead of checking the percentage branch coverage. This puts an absolute limit on the number of missed branches.

**Testing performed**
Steps taken to test the contribution:
1. The local_unit_test workflow will currently fail on any branch that is not the current integration candidate, so I merged this PR into my fork's integration candidate branch to see it pass [here](https://github.com/nmullane/osal/runs/3164099654?check_suite_focus=true). 
2. The error output when the coverage is not high enough can be seen [here](https://github.com/nmullane/osal/runs/3164037705?check_suite_focus=true#step:8:17)

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - This PR will only change the behavior of the local_unit_test GitHub Actions workflow and will fail the test if more than 4 branches are not covered by the unit tests.

**System(s) tested on**
 - GitHub Actions Runner

**Contributor Info - All information REQUIRED for consideration of pull request**
Niall Mullane - GSFC 582 Intern
",CCB:Approved,https://github.com/nasa/osal/pull/1117
osal Integration candidate: 2021-07-27,"## Context

Part of https://github.com/nasa/cFS/pull/313

### Tests

osal Checks <https://github.com/nasa/osal/pull/1116/checks>
cFS Checks <https://github.com/nasa/cFS/pull/313/checks>

### Authors

@skliper 

## Description

### PR #1114 

Fix #791, Add unit test branch coverage ",,https://github.com/nasa/osal/pull/1116
Enforce branch coverage in workflow (set limit on uncovered branches),"**Is your feature request related to a problem? Please describe.**
#1114 gets us down to 4 uncovered branches (with issues for each), need to enforce so this doesn't slip w/ future updates.

**Describe the solution you'd like**
Workflow currently checks for 100% line coverage:
https://github.com/nasa/osal/blob/f11d04961d0410af1adb6a2202549b195be3fa5a/.github/workflows/local_unit_test.yml#L35-L41

Add check of branches, suggesting reading in the branches*(AAA of BBB branches) and confirming BBB-AAA <= 4 (suggesting the bash math support to keep things simple).

**Describe alternatives you've considered**
Minimum % coverage is somewhat weak since it doesn't really catch if you add more uncovered branches (as long as you add enough covered ones also).  Hard count check is better.  Really getting to 100% is even better, but we aren't there yet.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",continuous-integration,https://github.com/nasa/osal/issues/1115
"Fix #791, Add unit test branch coverage","**Describe the contribution**
Fix #791 - added branch coverage and minor test updates to use macros (not full update)

**Testing performed**
Build/run coverage tests and confirm branch coverage (and success)

Full branch coverage except #1107, #1110, #1111:
```
  lines......: 100.0% (3327 of 3327 lines)
  functions..: 100.0% (361 of 361 functions)
  branches...: 99.8% (1692 of 1696 branches)
```

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Intel i5/docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/1114
osal Integration candidate: 2021-07-20,"## Context 

Part of <https://github.com/nasa/cfs/pull/311/checks>

### Tests

osal  <https://github.com/nasa/osal/pull/1113/checks>
Bundle <https://github.com/nasa/cfs/pull/311/checks>

### Authors
@skliper

## Description

### PR #1106

Fix #1105, Add independent OS_rename functional test parameter checks
",,https://github.com/nasa/osal/pull/1113
"Partial #1108, add typedef for OSAL status codes","**Describe the contribution**
Minimal change to add a typedef for `osal_status_t`, a macro for constants/literals `OSAL_STATUS_C`, and an inline function to convert to ""long"" for printing/logging.

Partial/related to #1108 (this PR is just for the typedef and conversions, so that CFE/App code can potentially use the type)

**Testing performed**
Build and run CFE, run all tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu

**Additional context**
This PR is only intended to avoid a chicken/egg scenario with the `osal_status_t` type.  That is, just to make it exist, so other entities can theoretically start using it, even if OSAL itself does not (yet).

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, draco-rc1",https://github.com/nasa/osal/pull/1112
Shared module uncovered branch due to run time logic based on compile time config,"**Is your feature request related to a problem? Please describe.**
Run time logic for compile time config example:
https://github.com/nasa/osal/blob/cb95655f1743890835a10847439380b5ef7e31a0/src/os/shared/src/osapi-module.c#L98-L100

Full branch coverage of while loop requires both `OS_STATIC_SYMTABLE_SOURCE` set to `NULL` and non-NULL.

Note by design the build system has a 1 to 1 to 1 relation - code/ut code/test exec, so an extra build would break the pattern.

**Describe the solution you'd like**
Possibilities:
 - break build pattern and build additional ""special"" test w/o `OS_STATIC_SYMTABLE_SOURCE` defined
 - source selection based on compile time config (or utilize preprocessor)
 - add a function to set and/or get the static symbol table pointer
 - build/run twice from the test procedure... once with the definition removed from the unit-test-coverage CMakeLists.txt

**Describe alternatives you've considered**
None

**Additional context**
Coverage testing

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/osal/issues/1111
Unreachable error branch in `OS_ObjectIdAllocateNew`,"**Is your feature request related to a problem? Please describe.**
Code checks for error and if so returns, then checks for not error (always true):
https://github.com/nasa/osal/blob/cb95655f1743890835a10847439380b5ef7e31a0/src/os/shared/src/osapi-idmap.c#L1236-L1245

**Describe the solution you'd like**
Could be an else, or just remove check... (or test for == OS_SUCCESS and the else could be the error case)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/osal/issues/1110
Stray `UT_Stub_SetReturnValue` prototype,"**Is your feature request related to a problem? Please describe.**
Prototype with no implementation here:
https://github.com/nasa/osal/blob/cb95655f1743890835a10847439380b5ef7e31a0/ut_assert/inc/utstubs.h#L458

Macro here:
https://github.com/nasa/osal/blob/cb95655f1743890835a10847439380b5ef7e31a0/ut_assert/inc/utstubs.h#L494-L502

**Describe the solution you'd like**
Remove stray.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/osal/issues/1109
Add typedef for OSAL status codes,"**Is your feature request related to a problem? Please describe.**
In the recent versions of CFE, a typedef (`CFE_Status_t`) is added and used for the return type on any function that returns a CFE status code, while OSAL continues to use a bare `int32` return type.

Although the type does need to be integer in nature (to maintain semantics of equality checks, etc), the typedef does still serve a useful purpose, in that it implies behavioral characteristics of the function i.e. that its return value should be checked against the set of defined status values for that module where certain values have defined meaning - as opposed to a generic number.

**Describe the solution you'd like**
OSAL should define an `OS_Status_t` (which can be a typedef to `int32`) and prototypes of functions returning a status value should be updated to `OS_Status_t` to more clearly indicate when the return value should be compared against the set of constants defined in `osapi-error.h`.

**Describe alternatives you've considered**
Leave as `int32` (inconsistent with CFE).

**Additional context**
In particular, having a separate type and macros helps identify cases where improper or incomplete type conversions are done, for instance see nasa/cfe#1599

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1108
Unreachable branch on unknown fstype in `OS_FileSys_Initialize`,"**Is your feature request related to a problem? Please describe.**
`filesys->fstype == OS_FILESYS_TYPE_UNKNOWN` is always true due to memset of filesys to zero in `OS_OBJECT_INIT` call.  Nothing else can logically set it otherwise or reason to not set if the other conditions are true.
https://github.com/nasa/osal/blob/cb95655f1743890835a10847439380b5ef7e31a0/src/os/shared/src/osapi-filesys.c#L176-L188

**Describe the solution you'd like**
Remove dead branch.

**Describe alternatives you've considered**
Clear justification for leaving in.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC
","unit-test, coverage",https://github.com/nasa/osal/issues/1107
"Fix #1105, Add independent OS_rename functional test parameter checks","**Describe the contribution**
Fix #1105 - individual parameter checks for `OS_rename`

**Testing performed**
Build/run unit tests, passed

**Expected behavior changes**
None, unit test only

**System(s) tested on**
 - Hardware: Intel i5/docker
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/1106
`OS_rename` unit test doesn't independently check parameter validity,"**Is your feature request related to a problem? Please describe.**
Overloaded parameter test:
https://github.com/nasa/osal/blob/cb95655f1743890835a10847439380b5ef7e31a0/src/unit-tests/osfile-test/ut_osfile_fileio_test.c#L1096-L1106

**Describe the solution you'd like**
Test each individually

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/osal/issues/1105
`OS_TaskDelay` implementation wrt errors not consistent,"**Is your feature request related to a problem? Please describe.**
In the RTEMS implementation if `OS_Milli2Ticks` fails (over max int) it'll wait 10 ticks, although comment is somewhat misleading since 10 isn't a minimum... passing in 0 would also cause no wait:
https://github.com/nasa/osal/blob/cb95655f1743890835a10847439380b5ef7e31a0/src/os/rtems/src/os-impl-tasks.c#L212-L237
VxWorks doesn't wait a minimum if `OS_Milli2Ticks` fails, just returns an error:
https://github.com/nasa/osal/blob/cb95655f1743890835a10847439380b5ef7e31a0/src/os/vxworks/src/os-impl-tasks.c#L325-L343
POSIX just converts to `timespec` and uses `clock_nanosleep`.

**Describe the solution you'd like**
Technically `OS_TaskDelay` should be functionally tested with a 0 and max value input, not that I'd ever want to wait that long (although RTEMS and VxWorks should return quickly due to the OS_Milli2Ticks error response).  It would be nice if behavior was consistent, although for 0 it looks to me like none of them would yield.  If we really want a yield in all cases then it needs an update.

**Describe alternatives you've considered**
None.

**Additional context**
From functional test scrub.

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/1104
`OS_ERR_INVALID_PRIORITY` not used,"**Is your feature request related to a problem? Please describe.**
`OS_ERR_INVALID_PRIORITY` error code is defined but not used anywhere.  Documented as a return code for both `OS_TaskCreate` and `OS_TaskSetPriority` APIs.

**Describe the solution you'd like**
Use or remove.

**Describe alternatives you've considered**
Could leave in if it's just not applicable to any of the open source OS's, but seems strange it wouldn't apply for at least one of them.

**Additional context**
Discovered in unit/coverage testing.  Relation to #222.

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/1103
Return OS_ERROR if `OS_ObjectIdGetById` fails in vxworks `OS_ShellOutputToFile_Impl`,"**Is your feature request related to a problem? Please describe.**
Coverage test highlights somewhat unexpected behavior in the VxWorks `OS_ShellOutputToFile_impl` where it will still return success if `OS_ObjectIdGetById` doesn't return OS_SUCCESS.  There isn't a real case where `OS_ObjectIdGetById` would fail that I know of, but the logic is a bit strange.
https://github.com/nasa/osal/blob/cb95655f1743890835a10847439380b5ef7e31a0/src/os/vxworks/src/os-impl-shell.c#L79-L102

**Describe the solution you'd like**
Return OS_ERROR if there is an error.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/1102
Add `OS_SocketRecvFrom` functional test for NULL `RemoteAddr` case,"**Is your feature request related to a problem? Please describe.**
API documentation claims `RemoteAddr` parameter for `OS_SocketRecvFrom` can be null, but this is not functionally tested/confirmed.

**Describe the solution you'd like**
Add a test to confirm implementation meets API description.

**Describe alternatives you've considered**
None.

**Additional context**
Note this case is included in the coverage test.

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/osal/issues/1101
osal Integration candidate: 2021-07-13,"## Context

Part of <https://github.com/nasa/cFS/pull/297> 

## Testing

osal Checks <https://github.com/nasa/osal/pull/1100/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/297/checks>

## Authors 
@jphickey 

## Description 

### PR #1089,  

Fix #1083, timer reconfig tests



",,https://github.com/nasa/osal/pull/1100
Move test runs out of Code QL Workflow,"**Is your feature request related to a problem? Please describe.**
[codeql-cfe-build.yml](https://github.com/nasa/osal/blob/main/.github/workflows/codeql-cfe-build.yml) runs the osal unit tests with a bundle-level build context (see line 106 below). Tests should be in their own workflow. 

https://github.com/nasa/osal/blob/5e8f40b003896c8a60bebc2249d7cb61c33c22de/.github/workflows/codeql-cfe-build.yml#L70-L110

**Describe the solution you'd like**
Create new workflow for building and testing osal with a cFS bundle context. 

**Describe alternatives you've considered**
Move bundle test to the ""local_unit_test"" 
",continuous-integration,https://github.com/nasa/osal/issues/1099
osal Integration candidate: 2021-06-29,"## Context 

Part of <https://github.com/nasa/cfs/pull/287>

## Tests

<https://github.com/nasa/cfs/pull/287/checks>
<https://github.com/nasa/osal/pull/1098/checks>

## Authors

@jphickey 
@skliper 


## Description

### PR #1081
Fix #1080, add range to OS_TaskDelay checks


### PR #1085
Fix #1084, Return `OS_OBJECT_ID_UNDEFINED` for root task ID on RTEMS


### PR #1090
Fix #1082, increase UT symbol dump size limit

### PR #1091
Fix #1087, do not register RTOS timer for external sync

### PR #1093
Fix #1088, avoid task delete during UtPrintf 

### PR #1097
Fix #1096, Add osal prefix to Network API group

### PR #1092
Fix #1086, increase timeout in network-api-test
",,https://github.com/nasa/osal/pull/1098
"Fix #1096, Add OSAL prefix to Network API group","**Describe the contribution**
Fix #1096 - Doxygen group name update

**Testing performed**
CI, Doc only

**Expected behavior changes**
None, updated doc

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, docs",https://github.com/nasa/osal/pull/1097
Network ID APIs group missing OSAL prefix,"**Is your feature request related to a problem? Please describe.**
Missing prefix:
https://github.com/nasa/osal/blob/64a6b31b5448a6301c64b001e043d4c7d9570131/src/os/inc/osapi-network.h#L34

**Describe the solution you'd like**
Add prefix.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/osal/issues/1096
osal_timer_UT inconsistent on MCP750 / VxWorks,"**Describe the bug**
The timer test does not have consistent results when run on the MCP750 + VxWorks 6.9 platform

**To Reproduce**
Run ""osal_timer_UT"" and occasionally a failure occurs in the ""nominal"" timer case:

```
[ PASS] 05.006 ut_ostimer_timerio_test.c:468 - OS_TimerSet(g_timerIds[4], startTime, intervalTime) (0) == OS_SUCCESS (0)
[ FAIL] 05.007 ut_ostimer_timerio_test.c:475 - 4# Nominal - callback status -1
```

**Expected behavior**
Test should pass reliably

**Code snips**
This is partly related to the fact that the MCP750 implementation has something wrong with its timer implementation.  The test reports these warnings:

```
OS_TimeBaseSet_Impl():576:WARNING: timer 524301 start_time requested=1000us, configured=16666us
OS_TimeBaseSet_Impl():582:WARNING: timer 524301 interval_time requested=500000us, configured=516666us
```

This means there is increased jitter in the callbacks, which is then compounded by the rather crude delta check:

https://github.com/nasa/osal/blob/64a6b31b5448a6301c64b001e043d4c7d9570131/src/unit-tests/ostimer-test/ut_ostimer_test.c#L104

**System observed on:**
MCP750 / VxWorks 6.9

**Additional context**
Other timer tests which average the counts over total time pass fine.  But this one checks the delta on every interval, so one case of too much jitter and it fails.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, docs, unit-test",https://github.com/nasa/osal/issues/1095
VxWorks osal_file_UT test does not pass with default config,"**Describe the bug**
The osal_file_UT uses a small ramdisk as its temporary file system to run the tests.  However, with the default configuration of `OSAL_CONFIG_MAX_NUM_OPEN_FILES` at 50, one gets the following error:

    OS_FileOpen_Impl():114:open(RAM3:0/tmpFile26.txt): errno = 0x380004

This errno correlates to `S_dosFsLib_NO_FREE_FILE_DESCRIPTORS` 

Reducing the value of `OSAL_CONFIG_MAX_NUM_OPEN_FILES` to 24, the test passes OK

**To Reproduce**
Run osal_file_UT on MCP750 / VxWorks 6.9 with default config

**Expected behavior**
Test should pass with default config

**Code snips**
If applicable, add references to the software.

**System observed on:**
MCP750 / VxWorks 6.9

**Additional context**
The RAMDISK only has 64 blocks, so this might be related.  The other option, if acceptable, might be to document in the release notes that this particular test on this platform requires the OSAL_CONFIG_MAX_NUM_OPEN_FILES to be reduced from its default value.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, docs, unit-test",https://github.com/nasa/osal/issues/1094
"Fix #1088, avoid task delete during UtPrintf","**Describe the contribution**
In the osal_core_UT test, the test task was being deleted while it was in the midst of a UtPrintf call, which left the BSP mutex in a locked state, causing deadlock.

Using SEM_DELETE_SAFE attribute avoids task deletion for the mutex holder, and adding a small delay to the test case makes all the messages appear as expected (accounts for slow serial console on test platform).

Fixes #1088

**Testing performed**
Run osal_core_UT

**Expected behavior changes**
Test now passes, does not deadlock

**System(s) tested on**
MCP750 / VxWorks 6.9

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1093
"Fix #1086, increase timeout in network-api-test","**Describe the contribution**
The number of asserts being printed was still taking longer than 1000ms on a 9600 baud serial link, so increasing the timeout allows tests to pass.

Fixes #1086

**Testing performed**
Run network-api-test

**Expected behavior changes**
Test now passes

**System(s) tested on**
MCP750 / VxWorks 6.9

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1092
"Fix #1087, do not register RTOS timer for external sync","**Describe the contribution**
Skip the registration of a timer in VxWorks when the assigned_signal is 0 (this indicates an external sync function is used).

Fixes #1087

**Testing performed**
Run time-base-api-test

**Expected behavior changes**
Test now passes

**System(s) tested on**
MCP750 / VxWorks 6.9

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, vxworks",https://github.com/nasa/osal/pull/1091
"Fix #1082, increase UT symbol dump size limit","**Describe the contribution**
For the MCP750, the symbol table fairly large and requires a considerably larger limit to avoid the OS_ERR_OUTPUT_TOO_LARGE limit.  This also uses a different name, so that the user can actually see the symbol dump file if they want (otherwise the next test overwrites the file).

Fixes #1082

**Testing performed**
Run osal_loader_UT

**Expected behavior changes**
Symbol table dump test now passes

**System(s) tested on**
MCP750 / VxWorks 6.9

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1090
"Fix #1083, timer reconfig tests","**Describe the contribution**
The underlying OS mechanism that rejects calls to timer APIs from timer callbacks does not work on anything except POSIX.  This skips these unit tests on non-POSIX platforms, and also adds documentation clearly indicating that the API must not be called from a timer context.

Fixes #1083

**Testing performed**
Run unit tests

**Expected behavior changes**
Test now passes because this check is skipped on these platforms

**System(s) tested on**
MCP750 / VxWorks 6.9
QEMU / RTEMS 4.11

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1089
osal_core_UT hanging on MCP750/VxWorks,"**Describe the bug**
When I run `osal_core_UT` on the MCP750, it seems to run fine until it gets to the `OS_TaskCreate` test.  About 5 tasks into the process of creating OS_MAX_TASKS, output stops, and the test just hangs.  Here are the last few lines of output:

```
[ PASS] 36.004 ut_oscore_task_test.c:138 - OS_TaskCreate(&g_task_ids[3], g_task_names[3], generic_test_task, OSAL_STACKPTR_C(&g_task_stacks[3]), 0, OSAL_PRIORITY_C(UT_TASK_PRIORITY), 0) (-40) == OS_ERR_INVALID_SIZE (-40)
[ PASS] 36.005 ut_oscore_task_test.c:145 - OS_TaskCreate(&g_task_ids[4], g_long_task_name, generic_test_task, OSAL_STACKPTR_C(&g_task_stacks[4]), sizeof(g_task_stacks[4]), OSAL_PRIORITY_C(UT_TASK_PRIORITY), 0) (-13) == OS_ERR_NAME_TOO_LONG (-13)
[ PASS] 36.006 ut_oscore_task_test.c:158 - OS_TaskCreate(&g_task_ids[i], task_name, generic_test_task, OSAL_STACKPTR_C(&g_task_stacks[i]), sizeof(g_task_stacks[i]), OSAL_PRIORITY_C(UT_TASK_PRIORITY), 0) (-14) == OS_ERR_NO_FREE_IDS (-14)
[ INFO] ut_oscore_task_test.c:87:Starting GenericTask: CREATE_TASK0, id: 10001
[ INFO] ut_oscore_task_test.c:87:Starting GenericTask: CREATE_TASK1, id: 10002
[ INFO] ut_oscore_task_test.c:87:Starting GenericTask: CREATE_TASK2, id: 10003
[ INFO] ut_oscore_task_test.c:87:Starting GenericTask: CREATE_TASK3, id: 10004
[ INFO] ut_oscore_task_test.c:87:Starting GenericTask: CREATE_TASK4, id: 10005
[ INFO] ut_oscore_task_test.c:87:Starting GenericTask: CREATE_TASK5,
```

**To Reproduce**
Run `osal_core_UT` on the MCP750 test platform

**Expected behavior**
Test should pass

**System observed on:**
MCP750 VxWorks 6.9

**Additional context**
This test used to pass, so very confusing as to why it seems to be locking up now.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test, vxworks",https://github.com/nasa/osal/issues/1088
VxWorks timebase still registers signal with RTOS when sync function is not NULL,"**Describe the bug**
When calling `OS_TimeBaseCreate` with the 3rd argument (external_sync) non-NULL, it is supposed to use the external sync function rather than an register an RTOS timer to implement the tick.  However, the VxWorks implementation still tries to register the RTOS timer, which has a signal number of 0, so it fails in `timer_create()`.

**To Reproduce**
Run timebase-api-test on VxWorks, observe failure:

```
[ PASS] 01.012 time-base-api-test.c:116 - OS_TimeBaseCreate(&time_base_id2, ""TimeBaseB"", NULL) (0) == OS_SUCCESS (0)
OS_VxWorks_RegisterTimer():248:timer_create() failed: errno=22
OS_TimeBaseCreate_Impl():507:Error during timer registration
[ FAIL] 01.013 time-base-api-test.c:117 - OS_TimeBaseCreate(&time_base_id, ""TimeBaseC"", UT_TimerSync) (-32) == OS_SUCCESS (0)
```

**Expected behavior**
Test should pass

**System observed on:**
MCP750, VxWorks 6.9

**Additional context**
VxWorks just needs to skip `timer_create()` and other RTOS timer configs when assigned_signal is 0.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, vxworks",https://github.com/nasa/osal/issues/1087
network-api-test timeout still too short for MCP750,"**Describe the bug**
The console/printf operations on MCP750 take a considerable amount of time (only 9600 baud serial).  It appears some extra assert statements added in this test have made it so even 1000ms is not sufficient.  (looks like the ServerFn might be timing out on a write while the client is printing a bunch of asserts, which then causes an error later when the client finally gets to the read).

**To Reproduce**
Run test on MCP750, observe unexpected timeout error:

    [ FAIL] 04.040 network-api-test.c:680 - OS_TimedRead() (-4) == 4

**Expected behavior**
Test should pass

**System observed on:**
MCP750 VxWorks 6.9

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, unit-test, vxworks",https://github.com/nasa/osal/issues/1086
"Fix #1084, root task ID on RTEMS","**Describe the contribution**
Ensures that OS_GetTaskId_Impl() returns OS_OBJECT_ID_UNDEFINED if called from the root task - as this does not have an OSAL task ID.

Fixes #1084

**Testing performed**
Run unit tests on RTEMS

**Expected behavior changes**
Tests pass

**System(s) tested on**
RTEMS 4.11.3

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1085
RTEMS OS_GetTaskId_Impl returns invalid value from root task,"**Describe the bug**
The ""root"" or initial task is technically not an OSAL task and does not have an OSAL ID.  If OSAL OS_GetTaskId() is called, it should return OS_OBJECT_ID_UNDEFINED.  However on RTEMS it returns a nonzero value which is not a valid task ID.

**To Reproduce**
Run unit tests on RTEMS

**Expected behavior**
OS_GetTaskId() should return OS_OBJECT_ID_INVALID if the ""rtems classic name"" is not actually an OSAL task ID.

**System observed on:**
RTEMS 4.11.3

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test, RTEMS",https://github.com/nasa/osal/issues/1084
"Timer ""reconfig"" tests do not work on RTEMS or VxWorks","**Describe the bug**
The ""reconfig"" tests were added to verify that timer config calls from the context of a timer callback are rejected. Unfortunately the underlying mechanism that allows this to happen only works on POSIX (via the pthread keys, which can do this).  On RTEMS and VxWorks, the mechanism which gets the task ID (`OS_TaskGetId_Impl`) doesn't return the timer ID when called from a timer task.

**To Reproduce**
Run timer tests on VxWorks or RTEMS, timer reconfig tests will fail.

**Expected behavior**
Test should pass.

**System observed on:**
MCP750 VxWorks 6.9
RTEMS 4.11.3

**Additional context**
Might be fixable on RTEMS but probably difficult to fix on VxWorks.  May want to consider just skipping this test?

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test, RTEMS",https://github.com/nasa/osal/issues/1083
UT Symbol table dump size too small on MCP750 (vxworks),"**Describe the bug**
The unit test case that verifies the `OS_SymbolTableDump()` function has a size limit of only 32000 bytes.  The actual size of the symbol table on the MCP750 test platform is larger, and this returns an error.

**To Reproduce**
Run loader test on MCP750, dump test will fail due to symbol table size limit getting reached

**Expected behavior**
Test should pass

**System observed on:**
MCP750, VxWorks 6.9

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test",https://github.com/nasa/osal/issues/1082
"Fix #1080, add range to OS_TaskDelay checks","**Describe the contribution**
To account for potential of imprecise timing/clock sampling when running on a VM, allow for a wider range of time values to pass the test.

Fixes #1080 

**Testing performed**
Build and run tests using QEMU

**Expected behavior changes**
Test now pass even if the time difference is not exactly the expected range.

**System(s) tested on**
RTEMS 4.11.3 under QEMU

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/osal/pull/1081
Add range to OS_TaskDelay test,"**Describe the bug**
When running cFS in a VM (e.g. QEMU) the timings and the system clock is not as precise/predictable.  As a result, I have occasionally seen the newly-added functional test for OS_TaskDelay fail as follows:

```
[BEGIN] 40 OS_TaskDelay
[ PASS] 40.001 ut_oscore_task_test.c:404 - OS_TaskDelay(100) (0) == OS_SUCCESS (0)
[ FAIL] 40.002 ut_oscore_task_test.c:408 - Elapsed time 98 msec, expected 100
[ PASS] 40.003 ut_oscore_task_test.c:413 - OS_TaskDelay(250) (0) == OS_SUCCESS (0)
[ FAIL] 40.004 ut_oscore_task_test.c:417 - Elapsed time 249 msec, expected 250
[  END] 40 OS_TaskDelay         TOTAL::4     PASS::2     FAIL::2     MIR::0     TSF::0     TTF::0     N/A::0   
```

**To Reproduce**
Execute osal_core_UT on a cFS system running in a VM

**Expected behavior**
Tests should pass reliably.

**System observed on:**
RTEMS 4.11.3 running in QEMU

**Additional context**
Likely related to some sloppiness in how the emulated real time clock works under a hypervisor.  Suggestion is to just extend the acceptable range a big (i.e. >=95 instead of >=100)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test, RTEMS",https://github.com/nasa/osal/issues/1080
osal Integration candidate: 2021-06-22,"## Context 
Part of <https://github.com/nasa/cfs/issues/270>

## Tests

osal Checks <https://github.com/nasa/osal/pull/1079/checks>
Bundle Checks <https://github.com/nasa/cfs/pull/270/checks>

## Authors

@jphickey 

## Description

### PR #1066 

Fix #1052, implement missing parameter/retcode test permutations

",,https://github.com/nasa/osal/pull/1079
"HOTFIX Integration Candidate:2021-06-15, osal-api-guide workflow","## Description

The osalguide workflow needed an update after nasa/osal#1067 and nasa/osal#1071

First commit: updated the warnings.log location

Second commit: renames the file.

## Tests

On github actions

",continuous-integration,https://github.com/nasa/osal/pull/1078
Remove the UT object limit since original purpose no longer appilcable,"**Is your feature request related to a problem? Please describe.**
The UT object validity table was to check against old style passed in ID's vs the opaque ID's in current use.  This required a limit, which can cause UT failures if it's exceeded.

**Describe the solution you'd like**
Remove the UT object validity table logic to eliminate the potential UT failure.

**Describe alternatives you've considered**
None

**Additional context**
Related to #1075

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/osal/issues/1077
osal Integration candidate:2021-06-15,"## Tests

osal Checks <https://github.com/nasa/osal/pull/1076/checks>
cFS Bundle Checks <https://github.com/nasa/cfs/issues/265/checks>


## Context

Part of https://github.com/nasa/cfs/issues/265 

## Authors

@jphickey 
@astrogeco 
@pepepr08 
@ArielSAdamsNASA 
@skliper 

## Description

### PR #1042  

Fix #1025, Implement Coding Standard Rules in CodeQL

### PR #1071  

Fix #1068, rename doc to docs

### PR #1065  

Fix #1061, add mutex lock around UtAssert globals

### PR #1056  

Fix #1013, resolve discrepancies between file API and unit tests

### PR #1057  

Fix #1014, resolve discrepancies between filesys API and unit tests

### PR #1055  

Fix #1015, resolve discrepancies between idmap API and unit tests

### PR #1064  

Fix #1019, resolve discrepancies between select API and unit tests

### PR #1060  

Fix #1020, resolve discrepancies between socket API and unit tests

### PR #1063  

Fix #1062, const correct OS_SelectFdIsSet

### PR #1073  

HOTFIX:2021-06-15, Add missing OS_Select param doc

### PR #1067  

Fix #1036 Add Workflow to build and verify OSAL API Guide

### PR #1070  

Fix #1069, add detail design template

### PR #1072  

Fix #399, Update error codes and documentation

### PR #1075  

Fix #1074, Increase UT object limit for testing


",,https://github.com/nasa/osal/pull/1076
"Fix #1074, Increase UT object limit for testing","**Describe the contribution**
Fix #1074 - increases the UT object limit bits from 16 to 32

**Testing performed**
CI

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
Fix for stakeholder

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/osal/pull/1075
Increase the number of UT objects allowed to support > 127,"**Is your feature request related to a problem? Please describe.**
Right now the 128th object fails on creation (even though the UT code says 128 are supported):
https://github.com/nasa/osal/blob/c540688551bdaffd4f150b0edf51a1bc3c175d25/src/ut-stubs/utstub-helpers.h#L57-L67

**Describe the solution you'd like**
Bump to 32, since 128 isn't unreasonable on a large system.

**Describe alternatives you've considered**
None

**Additional context**
The use case was for pipes, they hit the 64 limit and doubled, then encountered UT errors.

**Requester Info**
Jacob Hageman - NASA/GSFC, ping @excaliburtb
",unit-test,https://github.com/nasa/osal/issues/1074
"HOTFIX:2021-06-15, Add missing OS_Select param doc","**Describe the contribution**

Fix usersguide doxygen warning for OS_SelectSingle and OS_SelectMultiple msecs input parameter.

**Testing performed**

**Expected behavior changes**
No doxygen warning

**System(s) tested on**

**Additional context**
See https://github.com/nasa/cFS/pull/265/checks?check_run_id=2798133902

**Third party code**
None",,https://github.com/nasa/osal/pull/1073
"Fix #399, Update error codes and documentation","**Describe the contribution**
Updates the documentation related to status code test/check, provide description of how to check for any error status in a future-proof manner.

Also updates the list of error code string conversions to match the current set (some were missing).

Fixes #399 

**Testing performed**
Build documentation and verify content. Build complete FSW and run all unit tests.

**Expected behavior changes**
Documentation has better description of status code checking/handling
`OS_GetErrorName()` function will work for all currently-defined codes.  (FSW does not actually use this function).

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1072
"Fix #1068, rename doc to docs","**Describe the contribution**
This is a simple rename of the `doc` subdirectory, for consistency with other modules.  Also corrects various files where it referred to ""doc""

Fixes #1068 

**Testing performed**
Build cFE documentation

**Expected behavior changes**
None, but will affect scripts/tools that look for a specific ""doc"" directory name

**System(s) tested on**
Ubuntu

**Additional context**
If accepted, this will likely need a corresponding update in the cFE/cFS bundle

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, docs, build-system",https://github.com/nasa/osal/pull/1071
"Fix #1069, add detail design template","**Describe the contribution**
This file indicates which input dirs to use for the cFE detail design document.  It should be controlled with OSAL, as this
knows the detail of the directory tree.

Fixes #1069 

**Testing performed**
Build cFE detail design document, confirm correct/expected content, with no duplicate ""mainpage""

**Expected behavior changes**
Detail design document has `src/os` and `src/bsp` content, but NOT the mainpage that is specific for the OSAL API guide.

**System(s) tested on**
Ubuntu

**Additional context**
Related to nasa/cfe#1612

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1070
Provide file for cFE detail design,"**Is your feature request related to a problem? Please describe.**
By default, when building cFE mission ""detail design"" document, the entire module directory is added to the doxygen input, which will recursively pick up all source files, but also everything else too.  

This can lead to conflicts with e.g. ""mainpage"", where OSAL provides its own mainpage for its API guide, but this should NOT be used for other documentation that includes OSAL, like the detail design doc.

**Describe the solution you'd like**
OSAL should provide a detaildesign template file that indicates which sources should be used, rather than everything.

**Describe alternatives you've considered**
cFE itself could exclude certain parts in its templates, but that means cFE must have knowledge of OSAL directory tree.

**Additional context**
Related to nasa/cfe#1612

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1069
"Rename ""doc"" to ""docs"" for consistency","**Is your feature request related to a problem? Please describe.**
Most other cFS modules put the documentation in a `docs` subdirectory, except OSAL and PSP, which put it in `doc`

**Describe the solution you'd like**
Be consistent, use `docs` since this is what cFE and the majority of cFS apps use.

**Additional context**
Inconsistent naming means over complicated scripts and tools, that have to look in multiple different possible names/locations

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1068
Fix #1036 Add Workflow to build and verify OSAL API Guide,"**Describe the contribution**
Fix #1036 Adding a workflow that will build the OSAL API Guide, and check that there are no errors or warnings. 

Currently, the warning-check job always finds warnings. Workflow will complete successfully once documentation warnings are fixed.

Marked as draft since it needs integration-candidate to be merged to main.

**Testing performed**
Steps taken to test the contribution:
1. Pushed workflow file.
2. Verified workflow runs as expected.

**Expected behavior changes**
A new workflow will run on every push and pull request.

**System(s) tested on**
 - Tested on the Github servers where CI actions get to run. (Ubuntu 18.04)

**Contributor Info**
Jose F. Martinez Pedraza/NASA GSFC
",CCB:Approved,https://github.com/nasa/osal/pull/1067
"Fix #1052, implement missing parameter/retcode test permutations","**Describe the contribution**
Another pass through the API to ensure that:
1. every function parameter marked ""nonnull"" in doxygen has an individual `OS_INVALID_POINTER` retcode test
2. every function parameter marked ""nonzero"" in doxygen has an individual `OS_ERR_INVALID_SIZE` retcode test
3. every function parameter accepting an `osal_id_t` type has two `OS_ERR_INVALID_ID` retcode tests, and that it is tested with `OS_OBJECT_ID_UNDEFINED` and `UT_OBJID_INCORRECT` (which is not zero, but not valid).

**Testing performed**
Run all unit tests, and run validation script on tests logs to confirm parameters have been exercised and confirmed for each required retcode.

**Expected behavior changes**
Missing tests are implemented

**System(s) tested on**
Ubuntu

**Additional context**
This PR will have each subsystem done as separate commits

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1066
"Fix #1061, add mutex lock around UtAssert globals","**Describe the contribution**
Adding a mutex around modifications to globals allows UtAssert statements to be done from any test thread.

Fixes #1061

**Testing performed**
Build and run all unit tests, confirm correct operation

**Expected behavior changes**
UtAssert statements can now be used from any test task without risk of interference

**System(s) tested on**
Ubuntu

**Additional context**
Will require an update to CFE if accepted

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1065
"Fix #1019, resolve discrepancies between select API and unit tests","**Describe the contribution**
Ensures correlation between the test cases and documented return values for the OSAL select API.  This substantially overhauls the select-test to get better coverage of the various features.

Fixes #1019

**Testing performed**
Build and sanity check, run all unit tests, re-run cross reference script to confirm retcodes are exercised in the unit tests.

**Expected behavior changes**
Better coverage of the various select API return codes in the tests.

**System(s) tested on**
Ubuntu

**Additional context**
This does asserts in sub-tasks (preexisting condition) so rather than rewrite I suggest fixing #1061 to make it safer.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1064
"Fix #1062, const correct OS_SelectFdIsSet","**Describe the contribution**
This function does not modify its ""Set"" argument, therefore it should be qualified as ""const"".

Fixes #1062 

**Testing performed**
Build and sanity check, run all unit tests

**Expected behavior changes**
None, just const correct API

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1063
Set parameter on OS_SelectFdIsSet should be const,"**Is your feature request related to a problem? Please describe.**
This function only checks bits (read only), it does not modify the ""Set"" argument

**Describe the solution you'd like**
The pointer should be qualified `const`

**Additional context**
#854 (part of CFS-38 review) corrected the internal function, but it looks like this one was missed.
It is part of the public API but adding const here shouldn't break anything.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1062
"Use ""BSP"" lock to protect UtAssert globals","**Is your feature request related to a problem? Please describe.**
As originally noted in #955, the UtAssert global data structures are not protected against concurrent modification by multiple test threads.

UtAssert* functions should not be invoked from child threads, but many tests do this anyway. Although no observed failures can be traced directly to this, it is not correct.

**Describe the solution you'd like**
The BSP lock that was originally implemented to clean up console output can also serve to protect these data structures.  This lock can make it so UtAssert calls can be safely done from any test thread.

**Describe alternatives you've considered**
The tests which use child tasks could be redesigned to only assert from the main thread, but this can be difficult to do in some cases.

**Additional context**
This is the second half of the request in #955, split into a separate work item.  Adding a mutex around the modifications is lower risk than changing the internal data structure initialization, and they can be implemented separately.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1061
"Fix #1020, resolve discrepancies between socket API and unit tests","**Describe the contribution**
Ensures correlation between the test cases and documented return values for the OSAL socket API.

Fixes #1020

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1060
Add test to validate priority-based wakeup on semaphores,"**Is your feature request related to a problem? Please describe.**
OSAL semaphores should implement priority-based wakeup, as opposed to FIFO.  This currently is not validated by any test.

**Describe the solution you'd like**
Should implement a new unit test to confirm that priority-based semaphores are working as expected.  Basic procedure should be something like:

1. Create a semaphore with value 0
2. Create a low priority task which blocks on the semaphore
3. Create a high priority task which also blocks on the semaphore
4. Give the semaphore
5. Confirm only high priority task woke up, low priority still blocked
6. Give the semaphore again
7. Confirm low priority task woke up

**Additional context**
This test depends on actual task priorities being set in the OS scheduler, which may not happen when running as a normal user and using OS_CONFIG_PERMISSIVE_MODE option.  This test would have to be bypassed in that case.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, unit-test",https://github.com/nasa/osal/issues/1059
osal Integration candidate: 2021-06-01,"## Context

Part of <https://github.com/nasa/cFS/pull/263>

## Tests

osal Checks <https://github.com/nasa/osal/pull/1058/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/263/checks>


## Authors 

@jphickey 
@ArielSAdamsNASA 
@rosspeters6
@skliper 

## Description


### PR #1033

Fix #913, include doxygen targets locally

### PR #1053

Fix #1023, resolve discrepancies between timer API and unit tests 

Ensures correlation between the test cases and documented return values for the OSAL timer API.


### PR  #1040 

Fix #1008, resolve discrepancies between binsem API and unit tests

### PR #1029 

Fix #1009, add missing clock retcode tests 

### PR #1046 

 Fix #1010, resolve discrepancies between common API and unit tests 
 
 ### PR #1041 

Fix #1011, resolve discrepancies between countsem API and unit tests 

### PR #1045

Fix #1012, resolve discrepancies between dir API and unit tests 


### PR #1043

Fix #1016, resolve discrepancies between module API and unit tests 

### PR #1044 

Fix #1017, resolve discrepancies between mutex API and unit tests 

### PR #1038 

Fix #1018, resolve discrepancies between queue API and unit tests 

### PR #1037 

Fix #1021, resolve discrepancies between task API and unit tests 

### PR #1051 

Fix #1022, resolve discrepancies between timebase API and unit tests

### PR #1030 

Fix #1024, check misc API return codes 

### PR #1039

Fix #1035, Rename CodeQL cFE Build and add Duplicate Job 

### PR #1049 

Fix #1048, filter only whole words for keyword match 

### PR #962  

Fix #961, update OSAL Config Guide link 

",community,https://github.com/nasa/osal/pull/1058
"Fix #1014, resolve discrepancies between filesys API and unit tests","**Describe the contribution**
Ensures correlation between the test cases and documented return values for the OSAL filesys API.

Fixes #1014

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1057
"Fix #1013, resolve discrepancies between file API and unit tests","**Describe the contribution**
Ensures correlation between the test cases and documented return values for the OSAL file API.

Fixes #1013

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, unit-test",https://github.com/nasa/osal/pull/1056
"Fix #1015, resolve discrepancies between idmap API and unit tests","**Describe the contribution**
Ensures correlation between the test cases and documented return values for the OSAL idmap API.

Fixes #1015

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**NOTE:** This does update one return code from the the internal function `OS_ObjectIdTransactionInit`, changing it from OS_ERR_INCORRECT_OBJ_TYPE to OS_ERR_INVALID_ID.  There was one case in OS_GetResourceName where this status code gets eventually returned to an application caller, and OS_ERR_INVALID_ID makes it more consistent with other APIs in this regard.  (In other modules the idtype is hard coded so it does not affect these, this error isn't triggered except for coverage tests).

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1055
Add workflow to locally build osal documentation ,"**Is your feature request related to a problem? Please describe.**
Once https://github.com/nasa/osal/pull/1033 is merged we can now build the osalguide locally and check that PRs don't break the osal docs. 

**Describe the solution you'd like**
Create a ""docs"" workflow github actions workflow

**Describe alternatives you've considered**
Figure out how to trigger the cFS bundle workflows from OSAL PRs

**Additional context**
None
","duplicate, good first issue, docs, continuous-integration",https://github.com/nasa/osal/issues/1054
"Fix #1023, resolve discrepancies between timer API and unit tests","**Describe the contribution**
Ensures correlation between the test cases and documented return values for the OSAL timer API.

Fixes #1023 

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1053
Ensure all unit test cases for invalid ID use UNDEFINED plus another value,"**Is your feature request related to a problem? Please describe.**
When checking for proper ID validation, the specific value `OS_OBJECT_ID_UNDEFINED` must be rejected as it is always invalid.  However, the set of values that should be rejected is much larger than this - proper ID validation should only permit a small subset of values to be accepted.

**Describe the solution you'd like**
In order to confirm that ID values are being validated properly, test cases checking for `OS_ERR_INVALID_ID` should pass in `OS_OBJECT_ID_UNDEFINED` as well as some other value, which should be nonzero, but also _not_ in the valid range - to confirm that the implementation is doing the proper validation and not simply checking for equality with `OS_OBJECT_ID_UNDEFINED`.

**Additional context**
This came up as part of return/status code validation efforts - test cases are currently inconsistent,  some tests are only using `OS_OBJECT_ID_UNDEFINED`, while some only use `UT_OBJID_INCORRECT`.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/1052
"Fix #1022, resolve discrepancies between timebase API and unit tests","**Describe the contribution**
Ensures correlation between the test cases and documented return values for the OSAL timebase API.

Fixes #1022 

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1051
osal Integration candidate: 2021-05-25,"## Context

Part of <https://github.com/nasa/cfs/pull/260/>

## Tests 

osal Checks <https://github.com/nasa/osal/pull/1050/checks>
cFS Bubdle Checks <https://github.com/nasa/cfs/pull/260/checks>

## Description

### PR #1026

Fix #991, Add count sem timeout test


### PR #1028

Fix #1027, defer cancellation when BSP locked 

Removes chance of deadlock by ensuring `OS_TaskGetId` returns the task ID it knows about, regardless of whether the task is pending cancellation or not. Defers cancellation of the task while the BSP is locked, ensure it reaches the unlock, then restores the previous cancel state. 

Fixes a bogus debug message about unlocking from the wrong task if the task is pending delete.


## Authors

@jphickey 
@zanzaben ",,https://github.com/nasa/osal/pull/1050
"Fix #1048, filter only whole words for keyword match","**Describe the contribution**
In the stub generator script, filter only whole words when ignoring keywords.  Do not match if the word appears as a substring inside a larger word.

Fixes #1048

**Testing performed**
Regenerate stubs, and build and run all unit tests.

**Expected behavior changes**
Corrects the argument name in OS_TimeBaseCreate stub (only occurrence discovered so far)

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1049
"Stub generator script filtering all ""extern"" strings","**Describe the bug**
In order to parse the headers the ""generate_stubs.pl"" script needs to filter out ""extern"" keywords.  Problem is, it is filtering the ""extern"" string even if it appears inside a larger string, not just the keywords.

**To Reproduce**
View the generated stub for ""OS_TimeBaseCreate"".  The last parameter should be `external_sync` but it its appearing in the generated code as `al_sync` instead.

**Expected behavior**
Should appear in the generated code as `external_sync`, same as header.

**Code snips**
https://github.com/nasa/osal/blob/1d183e9a079036ff0c91f36eab9c1f29a69547f2/src/ut-stubs/osapi-timebase-stubs.c#L41

**System observed on:**
Ubuntu

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1048
Add a functional test for `OS_RegisterEventHandler`,"**Is your feature request related to a problem? Please describe.**
Missing functional test of `OS_RegisterEventHandler`

**Describe the solution you'd like**
Add a test that confirms the handlers are called for the defined events

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/osal/issues/1047
"Fix #1010, resolve discrepancies between common API and unit tests","**Describe the contribution**
Ensures correlation between the unit-tests and documented return values for the OSAL common API.

Fixes #1010 

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1046
"Fix #1012, resolve discrepancies between dir API and unit tests","**Describe the contribution**
Ensures correlation between the unit-tests and documented return values for the OSAL directory API.

Fixes #1012 

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1045
"Fix #1017, resolve discrepancies between mutex API and unit tests","**Describe the contribution**
Ensures correlation between the unit-tests and documented return values for the OSAL mutex API.

Fixes #1017

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1044
"Fix #1016, resolve discrepancies between module API and unit tests","**Describe the contribution**
Ensures correlation between the unit-tests and documented return values for the OSAL module API.

Fixes #1016

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1043
"Fix #1025, Implement Coding Standard Rules in CodeQL","**Describe the contribution**
Fix #1025 
Created two configuration files, one for default queries and security queries and another for jpl rules. Waiting for https://github.com/nasa/osal/pull/1039 to be merged to add these queries in the newly created workflow, codeql-cfe-build.yml. 
**Testing performed**
Testing done on cFE forked repository, ArielSAdamsNASA/cFE which used the same files, but with different configuration paths.

Jobs were failing when the entire path of the configuration file were not used. Have to use nasa/cFE/.github/codeql/config-name@branch-name. The branch must be included in the path. 

The CodeQL analysis workflow will fail for this PR since it is calling for a configuration file in main the main branch. It will not work until the configuration files are merged into main. 

In the screenshot is the same workflow as in this pull request, but the configuration path is changed to the forked repo and tested branch. 

![image](https://user-images.githubusercontent.com/69638935/119024913-36fa2580-b969-11eb-9aac-ede0002804a0.png)

**Expected behavior changes**
There should be one job for security queries and one job for JPL and MISRA queries. 

**Describe alternatives you've considered**
Can allow all branches to run CodeQL for pull requests as seen in cFE and PSP instead of just the main branch like cFS. 

**Third party code**
Skip duplicate workflows license: https://github.com/fkirc/skip-duplicate-actions/blob/master/LICENSE

CodeQL license: https://github.com/github/codeql-action/blob/main/LICENSE

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal","CCB:Approved, continuous-integration",https://github.com/nasa/osal/pull/1042
"Fix #1011, resolve discrepancies between countsem API and unit tests","**Describe the contribution**
Ensures correlation between the unit-tests and documented return values for the OSAL countsem API.

Fixes #1011

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1041
"Fix #1008, resolve discrepancies between binsem API and unit tests","**Describe the contribution**
Ensures correlation between the unit-tests and documented return values for the OSAL binsem API.

Fixes #1008

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1040
"Fix #1035, Rename CodeQL cFE Build and add Duplicate Job","**Describe the contribution**
Fixes #1035 
Rename codeql-build.yml to codeql-cfe-build.yml for clarity of what the workflow does. Changed from CodeQL Analysis to CodeQL cFE Build as workflow name. 

**Expected behavior changes**
Users can differentiate between this workflow and the osal default workflow.

**Third party code**
Skip duplicate actions license: https://github.com/fkirc/skip-duplicate-actions/blob/master/LICENSE

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal 
","CCB:Approved, continuous-integration",https://github.com/nasa/osal/pull/1039
"Fix #1018, resolve discrepancies between queue API and unit tests","**Describe the contribution**
Ensures correlation between the unit-tests and documented return values for the OSAL queue API.

Fixes #1018

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1038
"Fix #1021, resolve discrepancies between task API and unit tests","**Describe the contribution**
Ensures correlation between the unit-tests and documented return values for the OSAL task API.

Fixes #1021 

**Testing performed**
Build and run unit tests, re-run cross reference script to confirm

**Expected behavior changes**
All documented return values are tested or noted that they cannot be tested in functional test

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1037
Add documentation build and confirmation of no warnings to CI,"**Is your feature request related to a problem? Please describe.**
Should build and confirm no warnings as part of OSAL CI to catch errors in PRs.  Currently not checked until at the bundle level.

**Describe the solution you'd like**
Add documentation build and no-warning/error verification to OSAL CI.

**Describe alternatives you've considered**
None

**Additional context**
Pending merge of #1033

**Requester Info**
Jacob Hageman - NASA/GSFC
",continuous-integration,https://github.com/nasa/osal/issues/1036
Rename CodeQL cFE Build and Add Duplicate Jobs,"**Is your feature request related to a problem? Please describe.**
Users may be confused of the two CodeQL workflows. Multiple jobs may run at the same time.

**Describe the solution you'd like**
Make it clear that there is an analysis for osal using the cFE configuration build. Rename codeql-build.yml to codeql-cfe-build.yml. Rename the workflow from ""CodeQL Analysis"" to ""CodeQL Analysis cFE Build"". 
```
cp ./cfe/cmake/Makefile.sample Makefile         
cp -r ./cfe/cmake/sample_defs sample_defs
```
Add the multiple jobs action so the workflow does not run multiple times. 

**Additional context**
https://github.com/fkirc/skip-duplicate-actions

**Requester Info**
Ariel Adams, ASRC Federal
",continuous-integration,https://github.com/nasa/osal/issues/1035
"Fix #1025, Add Coding Standard Rules in CodeQL","**Describe the contribution**
Fix #1025 
Added the duplicate jobs action to avoid duplicate jobs from running. Added a separate job for coding standard queries. Created two configuration files, one for default queries and security queries and another for jpl rules. 

**Testing performed**
Testing done on forked repository, ArielSAdamsNASA/cFE. 

Jobs were failing when the entire path of the configuration file were not used. Have to use nasa/cFE/.github/codeql/config-name@branch-name. The branch must be included in the path. 

The CodeQL analysis workflow will fail for this PR since it is calling for a configuration file in main the main branch. It will not work until the configuration files are merged into main. 

To prove that this workflow will work, I tested a workflow on a forked repository. In the screenshot, the configuration path is changed to the forked repo and tested branch and successfully runs both CodeQL jobs. 

![image](https://user-images.githubusercontent.com/69638935/119024913-36fa2580-b969-11eb-9aac-ede0002804a0.png)

**Expected behavior changes**
There should be one job for security queries and one job for JPL and MISRA queries. 

**Third party code**
Skip duplicate workflows license: https://github.com/fkirc/skip-duplicate-actions/blob/master/LICENSE

CodeQL license: https://github.com/github/codeql-action/blob/main/LICENSE

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal",duplicate,https://github.com/nasa/osal/pull/1034
"Fix #913, include doxygen targets locally","**Describe the contribution**
Add the ""doxyfile"" templates and various OSAL doxygen pages locally under the ""doc/src"" directory.  Add a CMake script
to build the documentation in either a standalone or integrated build environment.

Fix #913 

**Testing performed**
Build OSAL ""api guide"" documentation in a standalone build environment, confirm output works and matches what is generated from the CFE build.

**Expected behavior changes**
Able to build OSAL API Guide in a standalone environment, independently of CFE build.

**System(s) tested on**
Ubuntu

**Additional context**
If this is merged, then a logical follow on would be to remove the same templates and dox files from CFE tree and have the CFE documentation call this script to build the OSAL API guide.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1033
Include doxyfile templates in OSAL,"**Is your feature request related to a problem? Please describe.**
Currently the OSAL API is marked up with doxygen, but the required `Doxyfile` config file/template exists in the CFE repo, not in the OSAL repo.

**Describe the solution you'd like**
The `Doxyfile` and other support/config files for the OSAL guide should exist in this repository, in the docs directory, so OSAL documentation can be generated on its own without CFE.

**Additional context**
OSAL is supposed to be a standalone product, but currently only CFE users can generate OSAL documentation.  It also makes management harder having certain config files in a separate repo.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","duplicate, enhancement",https://github.com/nasa/osal/issues/1032
"Fix #984, Document OS_ObjectIdToArrayIndex as public","**Describe the contribution**
Fix #984 - Updates the public nature of OS_ObjectIdToArrayIndex and related documentation

**Testing performed**
CI, documentation only 

**Expected behavior changes**
None, documentation

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/osal/pull/1031
"Fix #1024, check misc API return codes","**Describe the contribution**
Correct missing doxygen retvals and other discrepancies between test and documentation

Note, other tests were OK, but depend on support being enabled and supported by RTOS.  Script will report N/A items (due to no impl) as missing.  Confirmed OS_HeapGetInfo() is OK on RTEMS.

Fixes #1024

**Testing performed**
Run unit tests, revalidate test log against documentation

**Expected behavior changes**
No change to FSW, test/doc only

**System(s) tested on**
Ubuntu
RTEMS 4.11

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1030
"Fix #1009, add missing clock retcode tests","**Describe the contribution**
Corrects unit test retval discrepancies in clock code

Note that the success case for OS_SetLocalTime is tested, but is marked as a MIR test case because it requires
elevated permission, it is expected to fail when running as a normal user on Linux.

Fixes #1009 

**Testing performed**
Run all unit tests, confirm documented return values are checked, and checked return values are documented.

**Expected behavior changes**
No change to FSW, test/doc only

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1029
"Fix #1027, defer cancellation when BSP locked","**Describe the contribution**

Resolves two related issues:
- OS_TaskGetId does not return a valid value for tasks where cancellation is pending, but they are still running.  This in turn is likely to trigger other (bogus) debug checks which invoke OS_DEBUG and in turn do console writes.
- The console write itself is a cancellation point, which is now done while holding a BSP mutex.  If canceled here, then the mutex is not released.

Solution is in two parts:
- OS_TaskGetId should return the task ID it knows about, regardless of whether the task is pending cancellation or not.
- Defer cancellation of the task while the BSP is locked, ensure it reaches the unlock, then restore the previous cancel state.

Fixes #1027 

**Testing performed**
Run mutex-test repeatedly, ensure no deadlocks

**Expected behavior changes**
No chance of deadlock, and also fixes a bogus debug message about unlocking from the wrong task if the task is pending delete.

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/1028
Occasional deadlock issue in tests that delete tasks,"**Describe the bug**
When running the unit tests repeatedly, occasionally some tests are getting into a deadlock.  These tests are ones that:

1. use sub-tasks to do various work
2. those sub-tasks use OS_printf()
3. use an asynchronous OS_TaskDelete during their cleanup/teardown

In the event that the sub-task was in the midst of an OS_printf() call when OS_TaskDelete was invoked, the underlying BSP lock will not get released.

Observed in mutex-test, but others may have similar patterns.

**To Reproduce**
Run mutex-test repeatedly, may deadlock at some runs.  (it is a race condition, not 100% reproducible)

**Expected behavior**
Should run consistently.

**System observed on:**
Ubuntu

**Additional context**
This really just a symptom of a generic/known issue with OS_TaskDelete, in that other resources held by that task are not necessarily tracked or freed, depending on what it was doing at the time it was deleted.

Linux/Pthreads does have a workaround but the issue is likely to exist on all OS's

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/1027
"Fix #991, Add count sem timeout test","**Describe the contribution**
Fixes #991
Adds count semaphore timeout test

**Testing performed**
Build and run unit test

**Expected behavior changes**
Adds about 8 seconds to unit tests. 

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/osal/pull/1026
Implement JPL Rules in CodeQL,"**Is your feature request related to a problem? Please describe.**
CodeQL does not use JPL rules, which is used in the upcoming coding standard. 

**Describe the solution you'd like**
Implement JPL rules for CodeQL. Continue using the security queries, but keep them separate from the JPL results. Can use two different workflows, one for the coding standard and one for the security queries. 

**Describe alternatives you've considered**
Might be able to use one workflow, as long as the results can be easily identified as a coding standard issue or security issue. 

**Additional context**
JPL queries are found here: https://github.com/github/codeql/tree/main/cpp/ql/src/JPL_C

**Requester Info**
Ariel Adams, ASRC Federal ",continuous-integration,https://github.com/nasa/osal/issues/1025
Unit test status code discrepancies in other public headers,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

File `src/os/inc/osapi-heap.h`, function `OS_HeapGetInfo()`:
- [x] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-network.h`, function `OS_NetworkGetHostName()`:
- [x] OK: OS_ERR_INVALID_SIZE
- [x] OK: OS_INVALID_POINTER
- [x] ONLY IN TEST: OS_SUCCESS

File `src/os/inc/osapi-shell.h`, function `OS_ShellOutputToFile()`:
- [x] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER
- [x] ONLY IN DOXY: OS_SUCCESS

**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/osal/issues/1024
Unit test status code discrepancies in osapi-timer.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

File `src/os/inc/osapi-timer.h`, function `OS_TimerCreate()`:
- [x] OK: OS_ERR_NAME_TAKEN
- [x] OK: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_ERR_NO_FREE_IDS
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS
- [ ] ONLY IN DOXY: OS_TIMER_ERR_INVALID_ARGS
- [ ] ONLY IN DOXY: OS_TIMER_ERR_UNAVAILABLE

File `src/os/inc/osapi-timer.h`, function `OS_TimerAdd()`:

File `src/os/inc/osapi-timer.h`, function `OS_TimerSet()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [ ] ONLY IN DOXY: OS_ERR_INCORRECT_OBJ_STATE
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_SUCCESS
- [ ] ONLY IN DOXY: OS_TIMER_ERR_INTERNAL
- [ ] ONLY IN DOXY: OS_TIMER_ERR_INVALID_ARGS

File `src/os/inc/osapi-timer.h`, function `OS_TimerDelete()`:
- [ ] ONLY IN DOXY: OS_ERR_INCORRECT_OBJ_STATE
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_SUCCESS
- [ ] ONLY IN DOXY: OS_TIMER_ERR_INTERNAL

File `src/os/inc/osapi-timer.h`, function `OS_TimerGetIdByName()`:
- [ ] ONLY IN DOXY: OS_ERR_INCORRECT_OBJ_STATE
- [x] OK: OS_ERR_NAME_NOT_FOUND
- [x] OK: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-timer.h`, function `OS_TimerGetInfo()`:
- [ ] ONLY IN DOXY: OS_ERR_INCORRECT_OBJ_STATE
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS


**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/osal/issues/1023
Unit test status code discrepancies in osapi-timebase.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

**NOTE**: This API does not have a ""unit-tests"" program to test these status codes - Hence why they are all flagged as being only in doxygen. The ""time-base-api-test"" program does exercise many of them, but isn't included in this test run.

File `src/os/inc/osapi-timebase.h`, function `OS_TimeBaseCreate()`:
- [ ] ONLY IN DOXY: OS_ERR_INCORRECT_OBJ_STATE
- [ ] ONLY IN DOXY: OS_ERR_NAME_TOO_LONG
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-timebase.h`, function `OS_TimeBaseSet()`:
- [ ] ONLY IN DOXY: OS_ERR_INCORRECT_OBJ_STATE
- [ ] ONLY IN DOXY: OS_TIMER_ERR_INVALID_ARGS

File `src/os/inc/osapi-timebase.h`, function `OS_TimeBaseDelete()`:
- [ ] ONLY IN DOXY: OS_ERR_INCORRECT_OBJ_STATE

File `src/os/inc/osapi-timebase.h`, function `OS_TimeBaseGetIdByName()`:
- [ ] ONLY IN DOXY: OS_ERR_INCORRECT_OBJ_STATE
- [ ] ONLY IN DOXY: OS_ERR_NAME_NOT_FOUND
- [ ] ONLY IN DOXY: OS_ERR_NAME_TOO_LONG
- [ ] ONLY IN DOXY: OS_INVALID_POINTER
- [ ] ONLY IN DOXY: OS_SUCCESS

File `src/os/inc/osapi-timebase.h`, function `OS_TimeBaseGetInfo()`:
- [ ] ONLY IN DOXY: OS_ERR_INCORRECT_OBJ_STATE
- [ ] ONLY IN DOXY: OS_ERR_INVALID_ID
- [ ] ONLY IN DOXY: OS_INVALID_POINTER
- [ ] ONLY IN DOXY: OS_SUCCESS

File `src/os/inc/osapi-timebase.h`, function `OS_TimeBaseGetFreeRun()`:
- [ ] ONLY IN DOXY: OS_ERR_INVALID_ID
- [ ] ONLY IN DOXY: OS_INVALID_POINTER
- [ ] ONLY IN DOXY: OS_SUCCESS

**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",unit-test,https://github.com/nasa/osal/issues/1022
Unit test status code discrepancies in osapi-task.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

File `src/os/inc/osapi-task.h`, function `OS_TaskCreate()`:
- [x] ONLY IN DOXY: OS_ERROR
- [x] ONLY IN DOXY: OS_ERR_INVALID_PRIORITY
- [x] ONLY IN DOXY: OS_ERR_INVALID_SIZE
- [x] OK: OS_ERR_NAME_TAKEN
- [x] OK: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_ERR_NO_FREE_IDS
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-task.h`, function `OS_TaskDelete()`:
- [x] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-task.h`, function `OS_TaskInstallDeleteHandler()`:
- [x] ONLY IN TEST: OS_ERR_INVALID_ID

File `src/os/inc/osapi-task.h`, function `OS_TaskDelay()`:
- [x] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-task.h`, function `OS_TaskSetPriority()`:
- [x] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_ERR_INVALID_ID
- [x] ONLY IN DOXY: OS_ERR_INVALID_PRIORITY
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-task.h`, function `OS_TaskGetIdByName()`:
- [x] OK: OS_ERR_NAME_NOT_FOUND
- [x] OK: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-task.h`, function `OS_TaskGetInfo()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-task.h`, function `OS_TaskFindIdBySystemData()`:
- [x] ONLY IN DOXY: OS_INVALID_POINTER
- [x] ONLY IN DOXY: OS_SUCCESS

**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/osal/issues/1021
Unit test status code discrepancies in osapi-sockets.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**

**NOTE**: This API does not have a ""unit-tests"" program to test these status codes - Hence why they are all flagged as being only in doxygen.  The ""network-api-test"" program does exercise many of them, but isn't included in this test run.

Resolve the following mismatches:

File `src/os/inc/osapi-sockets.h`, function `OS_SocketAddrInit()`:
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-sockets.h`, function `OS_SocketAddrToString()`:
- [ ] ONLY IN DOXY: OS_ERR_INVALID_SIZE
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-sockets.h`, function `OS_SocketAddrFromString()`:
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-sockets.h`, function `OS_SocketAddrGetPort()`:
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-sockets.h`, function `OS_SocketAddrSetPort()`:
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-sockets.h`, function `OS_SocketOpen()`:
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-sockets.h`, function `OS_SocketBind()`:
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-sockets.h`, function `OS_SocketConnect()`:
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-sockets.h`, function `OS_SocketShutdown()`:

File `src/os/inc/osapi-sockets.h`, function `OS_SocketAccept()`:
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-sockets.h`, function `OS_SocketRecvFrom()`:
- [ ] ONLY IN DOXY: OS_ERR_INVALID_SIZE
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-sockets.h`, function `OS_SocketSendTo()`:
- [ ] ONLY IN DOXY: OS_ERR_INVALID_SIZE
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-sockets.h`, function `OS_SocketGetIdByName()`:
- [ ] ONLY IN DOXY: OS_ERR_NAME_NOT_FOUND
- [ ] ONLY IN DOXY: OS_ERR_NAME_TOO_LONG
- [ ] ONLY IN DOXY: OS_INVALID_POINTER
- [ ] ONLY IN DOXY: OS_SUCCESS

File `src/os/inc/osapi-sockets.h`, function `OS_SocketGetInfo()`:
- [ ] ONLY IN DOXY: OS_ERR_INVALID_ID
- [ ] ONLY IN DOXY: OS_INVALID_POINTER
- [ ] ONLY IN DOXY: OS_SUCCESS


**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/osal/issues/1020
Unit test status code discrepancies in osapi-select.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

File `src/os/inc/osapi-select.h`, function `OS_SelectMultiple()`:
- [ ] ONLY IN TEST: OS_SUCCESS

File `src/os/inc/osapi-select.h`, function `OS_SelectSingle()`:
- [x] OK: OS_INVALID_POINTER
- [ ] ONLY IN TEST: OS_SUCCESS

File `src/os/inc/osapi-select.h`, function `OS_SelectFdZero()`:
- [x] OK: OS_INVALID_POINTER
- [ ] ONLY IN TEST: OS_SUCCESS

File `src/os/inc/osapi-select.h`, function `OS_SelectFdAdd()`:
- [x] OK: OS_INVALID_POINTER
- [ ] ONLY IN TEST: OS_SUCCESS

File `src/os/inc/osapi-select.h`, function `OS_SelectFdClear()`:
- [x] OK: OS_INVALID_POINTER
- [ ] ONLY IN TEST: OS_SUCCESS

File `src/os/inc/osapi-select.h`, function `OS_SelectFdIsSet()`:
- [ ] ONLY IN DOXY: false
- [ ] ONLY IN DOXY: true

**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/osal/issues/1019
Unit test status code discrepancies in osapi-queue.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

File `src/os/inc/osapi-queue.h`, function `OS_QueueCreate()`:
- [x] OK: OS_ERROR
- [x] ONLY IN DOXY: OS_ERR_INVALID_SIZE
- [x] OK: OS_ERR_NAME_TAKEN
- [x] OK: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_ERR_NO_FREE_IDS
- [x] OK: OS_INVALID_POINTER
- [x] ONLY IN DOXY: OS_QUEUE_INVALID_SIZE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-queue.h`, function `OS_QueueDelete()`:
- [x] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-queue.h`, function `OS_QueueGet()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_QUEUE_EMPTY
- [x] OK: OS_QUEUE_INVALID_SIZE
- [x] OK: OS_QUEUE_TIMEOUT
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-queue.h`, function `OS_QueuePut()`:
- [x] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_QUEUE_FULL
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-queue.h`, function `OS_QueueGetIdByName()`:
- [x] OK: OS_ERR_NAME_NOT_FOUND
- [x] OK: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-queue.h`, function `OS_QueueGetInfo()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/osal/issues/1018
Unit test status code discrepancies in osapi-mutex.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

File `src/os/inc/osapi-mutex.h`, function `OS_MutSemCreate()`:
- [ ] ONLY IN TEST: OS_ERROR
- [x] OK: OS_ERR_NAME_TAKEN
- [x] OK: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_ERR_NO_FREE_IDS
- [x] OK: OS_INVALID_POINTER
- [x] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-mutex.h`, function `OS_MutSemGive()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-mutex.h`, function `OS_MutSemTake()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-mutex.h`, function `OS_MutSemDelete()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-mutex.h`, function `OS_MutSemGetIdByName()`:
- [x] OK: OS_ERR_NAME_NOT_FOUND
- [x] OK: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-mutex.h`, function `OS_MutSemGetInfo()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS


**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/osal/issues/1017
Unit test status code discrepancies in osapi-module.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

File `src/os/inc/osapi-module.h`, function `OS_SymbolLookup()`:
- [x] OK: OS_ERROR
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-module.h`, function `OS_ModuleSymbolLookup()`:
- [x] OK: OS_ERROR
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-module.h`, function `OS_SymbolTableDump()`:
- [x] ONLY IN DOXY: OS_ERROR
- [ ] ONLY IN DOXY: OS_ERR_NOT_IMPLEMENTED
- [x] ONLY IN TEST: OS_FS_ERR_PATH_INVALID
- [x] OK: OS_INVALID_POINTER
- [ ] ONLY IN DOXY: OS_SUCCESS

File `src/os/inc/osapi-module.h`, function `OS_ModuleLoad()`:
- [x] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_ERR_NAME_TAKEN
- [x] ONLY IN DOXY: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_ERR_NO_FREE_IDS
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-module.h`, function `OS_ModuleUnload()`:
- [x] ONLY IN DOXY: OS_ERROR
- [x] ONLY IN TEST: OS_ERR_INVALID_ID
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-module.h`, function `OS_ModuleInfo()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS


**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/osal/issues/1016
Unit test status code discrepancies in osapi-idmap.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

File `src/os/inc/osapi-idmap.h`, function `OS_GetResourceName()`:
**NO CURRENT TESTS** - Test cases and retvals likely need to be added

File `src/os/inc/osapi-idmap.h`, function `OS_ConvertToArrayIndex()`:
- [ ] ONLY IN DOXY: OS_ERR_INCORRECT_OBJ_TYPE
- [ ] ONLY IN DOXY: OS_SUCCESS

File `src/os/inc/osapi-idmap.h`, function `OS_ObjectIdToArrayIndex()`:
- [ ] ONLY IN DOXY: OS_ERR_INCORRECT_OBJ_TYPE
- [ ] ONLY IN DOXY: OS_ERR_INVALID_ID
- [ ] ONLY IN DOXY: OS_INVALID_POINTER
- [ ] ONLY IN DOXY: OS_SUCCESS

**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",unit-test,https://github.com/nasa/osal/issues/1015
Unit test status code discrepancies in osapi-filesys.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

File `src/os/inc/osapi-filesys.h`, function `OS_FileSysAddFixedMap()`:
- [ ] ONLY IN DOXY: OS_ERR_NAME_TOO_LONG
- [ ] ONLY IN DOXY: OS_FS_ERR_PATH_TOO_LONG
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-filesys.h`, function `OS_mkfs()`:
- [x] OK: OS_FS_ERR_DEVICE_NOT_FREE
- [ ] ONLY IN DOXY: OS_FS_ERR_DRIVE_NOT_CREATED
- [ ] ONLY IN TEST: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-filesys.h`, function `OS_mount()`:
- [x] OK: OS_ERR_NAME_NOT_FOUND
- [ ] ONLY IN DOXY: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [ ] ONLY IN TEST: OS_SUCCESS

File `src/os/inc/osapi-filesys.h`, function `OS_initfs()`:
- [x] OK: OS_FS_ERR_DEVICE_NOT_FREE
- [ ] ONLY IN DOXY: OS_FS_ERR_DRIVE_NOT_CREATED
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-filesys.h`, function `OS_rmfs()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_ERR_NAME_NOT_FOUND
- [ ] ONLY IN DOXY: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [ ] ONLY IN DOXY: OS_SUCCESS

File `src/os/inc/osapi-filesys.h`, function `OS_unmount()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_ERR_NAME_NOT_FOUND
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-filesys.h`, function `OS_FileSysStatVolume()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-filesys.h`, function `OS_chkfs()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [ ] ONLY IN DOXY: OS_ERR_NOT_IMPLEMENTED
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [ ] ONLY IN DOXY: OS_SUCCESS

File `src/os/inc/osapi-filesys.h`, function `OS_FS_GetPhysDriveName()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_ERR_NAME_NOT_FOUND
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-filesys.h`, function `OS_TranslatePath()`:
- [ ] ONLY IN DOXY: OS_FS_ERR_NAME_TOO_LONG
- [x] OK: OS_FS_ERR_PATH_INVALID
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-filesys.h`, function `OS_GetFsInfo()`:
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/osal/issues/1014
Unit test status code discrepancies in osapi-file.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:


File `src/os/inc/osapi-file.h`, function `OS_OpenCreate()`:
- [x] OK: OS_ERROR
- [ ] ONLY IN TEST: OS_ERR_NO_FREE_IDS
- [ ] ONLY IN TEST: OS_FS_ERR_NAME_TOO_LONG
- [ ] ONLY IN TEST: OS_FS_ERR_PATH_INVALID
- [ ] ONLY IN TEST: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-file.h`, function `OS_close()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-file.h`, function `OS_read()`:
- [ ] ONLY IN DOXY: 0
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER

File `src/os/inc/osapi-file.h`, function `OS_write()`:
- [ ] ONLY IN DOXY: 0
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER

File `src/os/inc/osapi-file.h`, function `OS_TimedRead()`:
- [ ] ONLY IN DOXY: 0
- [ ] ONLY IN DOXY: OS_ERROR_TIMEOUT
- [ ] ONLY IN DOXY: OS_ERR_INVALID_ID
- [ ] ONLY IN DOXY: OS_ERR_INVALID_SIZE
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-file.h`, function `OS_TimedWrite()`:
- [ ] ONLY IN DOXY: 0
- [ ] ONLY IN DOXY: OS_ERROR_TIMEOUT
- [ ] ONLY IN DOXY: OS_ERR_INVALID_ID
- [ ] ONLY IN DOXY: OS_ERR_INVALID_SIZE
- [ ] ONLY IN DOXY: OS_INVALID_POINTER

File `src/os/inc/osapi-file.h`, function `OS_chmod()`:
**NONE** - no specific retvals in API, and no checks in test (possibly need to add).

File `src/os/inc/osapi-file.h`, function `OS_stat()`:
- [x] OK: OS_ERROR
- [ ] ONLY IN DOXY: OS_FS_ERR_NAME_TOO_LONG
- [x] OK: OS_FS_ERR_PATH_INVALID
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-file.h`, function `OS_lseek()`:
- [x] OK: OS_ERROR
- [x] OK: OS_ERR_INVALID_ID

File `src/os/inc/osapi-file.h`, function `OS_remove()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_FS_ERR_NAME_TOO_LONG
- [x] OK: OS_FS_ERR_PATH_INVALID
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-file.h`, function `OS_rename()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_FS_ERR_NAME_TOO_LONG
- [x] OK: OS_FS_ERR_PATH_INVALID
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-file.h`, function `OS_cp()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_FS_ERR_NAME_TOO_LONG
- [x] OK: OS_FS_ERR_PATH_INVALID
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-file.h`, function `OS_mv()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_FS_ERR_NAME_TOO_LONG
- [x] OK: OS_FS_ERR_PATH_INVALID
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-file.h`, function `OS_FDGetInfo()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-file.h`, function `OS_FileOpenCheck()`:
- [x] OK: OS_ERROR
- [x] OK: OS_INVALID_POINTER
- [ ] ONLY IN TEST: OS_SUCCESS

File `src/os/inc/osapi-file.h`, function `OS_CloseAllFiles()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-file.h`, function `OS_CloseFileByName()`:
- [ ] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_FS_ERR_PATH_INVALID
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS


**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",unit-test,https://github.com/nasa/osal/issues/1013
Unit test status code discrepancies in osapi-dir.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

File `src/os/inc/osapi-dir.h`, function `OS_DirectoryOpen()`:
- [x] ONLY IN TEST: OS_FS_ERR_PATH_INVALID
- [x] ONLY IN TEST: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] ONLY IN TEST: OS_SUCCESS

File `src/os/inc/osapi-dir.h`, function `OS_DirectoryClose()`:
- [x] ONLY IN TEST: OS_SUCCESS

File `src/os/inc/osapi-dir.h`, function `OS_DirectoryRewind()`:
- [x] ONLY IN TEST: OS_SUCCESS

File `src/os/inc/osapi-dir.h`, function `OS_DirectoryRead()`:
- [x] ONLY IN TEST: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER

File `src/os/inc/osapi-dir.h`, function `OS_mkdir()`:
- [x] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_FS_ERR_PATH_INVALID
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] ONLY IN DOXY: OS_SUCCESS

File `src/os/inc/osapi-dir.h`, function `OS_rmdir()`:
- [x] OK: OS_ERROR
- [x] OK: OS_FS_ERR_PATH_INVALID
- [x] OK: OS_FS_ERR_PATH_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS


**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/osal/issues/1012
Unit test status code discrepancies in osapi-countsem.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

File `src/os/inc/osapi-countsem.h`, function `OS_CountSemCreate()`:
- [ ] ONLY IN TEST: OS_ERROR
- [x] OK: OS_ERR_NAME_TAKEN
- [x] OK: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_ERR_NO_FREE_IDS
- [x] OK: OS_INVALID_POINTER
- [ ] ONLY IN DOXY: OS_INVALID_SEM_VALUE
- [ ] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-countsem.h`, function `OS_CountSemGive()`:
- [x] OK: OS_ERR_INVALID_ID
- [ ] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-countsem.h`, function `OS_CountSemTake()`:
- [x] OK: OS_ERR_INVALID_ID
- [ ] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-countsem.h`, function `OS_CountSemTimedWait()`:
- [x] OK: OS_ERR_INVALID_ID
- [ ] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SEM_TIMEOUT
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-countsem.h`, function `OS_CountSemDelete()`:
- [x] OK: OS_ERR_INVALID_ID
- [ ] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-countsem.h`, function `OS_CountSemGetIdByName()`:
- [x] OK: OS_ERR_NAME_NOT_FOUND
- [x] OK: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-countsem.h`, function `OS_CountSemGetInfo()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS


**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/osal/issues/1011
Unit test status code discrepancies in osapi-common.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:

File `src/os/inc/osapi-common.h`, function `OS_API_Init()`:
- [x] ONLY IN DOXY: OS_ERROR
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-common.h`, function `OS_RegisterEventHandler()`:
- [x] ONLY IN DOXY: OS_ERROR
- [x] ONLY IN DOXY: OS_INVALID_POINTER
- [x] ONLY IN DOXY: OS_SUCCESS

**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",unit-test,https://github.com/nasa/osal/issues/1010
Unit test status code discrepancies in osapi-clock.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:


File `src/os/inc/osapi-clock.h`, function `OS_GetLocalTime()`:
- [x] OK: OS_INVALID_POINTER
- [x] ONLY IN TEST: OS_SUCCESS

File `src/os/inc/osapi-clock.h`, function `OS_SetLocalTime()`:
- [x] ONLY IN DOXY: OS_INVALID_POINTER


**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",unit-test,https://github.com/nasa/osal/issues/1009
Unit test status code discrepancies in osapi-binsem.h,"**Is your feature request related to a problem? Please describe.**
The unit tests and API documentation should match, where all status codes in the API documentation are tested in a unit test, and likewise all codes being tested for are documented in the API.  

**Describe the solution you'd like**
Resolve the following mismatches:
File `src/os/inc/osapi-binsem.h`, function `OS_BinSemCreate()`:
- [x] ONLY IN TEST: OS_ERROR
- [x] OK: OS_ERR_NAME_TAKEN
- [x] OK: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_ERR_NO_FREE_IDS
- [x] OK: OS_INVALID_POINTER
- [x] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-binsem.h`, function `OS_BinSemFlush()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-binsem.h`, function `OS_BinSemGive()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-binsem.h`, function `OS_BinSemTake()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-binsem.h`, function `OS_BinSemTimedWait()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SEM_TIMEOUT
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-binsem.h`, function `OS_BinSemDelete()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] ONLY IN DOXY: OS_SEM_FAILURE
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-binsem.h`, function `OS_BinSemGetIdByName()`:
- [x] OK: OS_ERR_NAME_NOT_FOUND
- [x] OK: OS_ERR_NAME_TOO_LONG
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

File `src/os/inc/osapi-binsem.h`, function `OS_BinSemGetInfo()`:
- [x] OK: OS_ERR_INVALID_ID
- [x] OK: OS_INVALID_POINTER
- [x] OK: OS_SUCCESS

**Additional context**
Originally noted in #331, split into separate work items. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",unit-test,https://github.com/nasa/osal/issues/1008
Remove test run from CodeQL workflow,"**Describe the bug**
CodeQL workflow is running unit tests which is confusing. 

**To Reproduce**
See https://github.com/nasa/osal/actions/runs/835716057

**Expected behavior**
Code QL workflow should only run enough of the build steps to run the CodeQL analysis

**Alternative**
Keep the tests here,  rename the workflow, and run the tests and codeql as separate jobs for parallelization

**Code snips**
https://github.com/nasa/osal/blob/9756b0396807a7dcd64230f01f38e4cad5f3d4f7/.github/workflows/codeql-build.yml#L49-L50

**System observed on:**
github actions 

**Additional context**
Ensure that new CodeQL workflow in #986 doesn't have the ""run tests"" step",continuous-integration,https://github.com/nasa/osal/issues/1007
osal Integration candidate: 2021-05-18,"## Context

Part of <https://github.com/nasa/cFS/pull/259>

## Testing 

osal checks <https://github.com/nasa/osal/pull/1006/checks>

cFS Bundle Checks <https://github.com/nasa/cFS/pull/259/checks>

## Description

### PR #985 
Fix #983, rename hooks to handlers

CCB 2021-05-05 review item. Makes filenames better match terms used in implementation.

### PR #1000

Fix #999, propagate status code in OS_rmdir 

The status code from the low level implementation needs to be returned from the caller, in case it was not OS_SUCCESS.

The status returned from OS_rmdir() should now be correct if the implementation failed.

### PR #1001 

Fix #981, rework ""unit-tests"" to use macros

Adds details to log file and can be cross referenced back to documentation. Updates most of the conditions in the ""unit tests"" to use the support macros whenever possible. The macros display the function being called as well as the return value being checked for and enables that documented return codes are being tested. Removes repetition in the test programs.

### PR #1003

Fix #1002, remove extra newlines in utassert logs 

If messages (e.g. from UtPrintf, etc) already have a newline, do not add another.

Extra blank lines in test log are removed.

This should preserve extra newlines in the event that the test case was intentionally adding whitespace, by only appending one if it was not there to begin with.

### PR #990

Fix #982, Add test for object id inline functions 

`OS_ObjectIdToInteger`, `OS_ObjectIdFromInteger`, `OS_ObjectIdEqual`, `OS_ObjectIdDefined` now have tests.

### PR #998, 

Fix #994, fixed invalid inputs for OS_mkdir

Changed tests to use valid inputs for all OS_mkdir calls.

### PR #812 - Community Contribution!

Improves config guide documentation issues referenced in  #384, #640, #672

### PR #987

Fix #986, Show CodeQL Preview 

## Authors

@ArielSAdamsNASA 
@jphickey 
@Kronos3
@zanzaben ",community,https://github.com/nasa/osal/pull/1006
Implement OS_mkdir access settings,"**Is your feature request related to a problem? Please describe.**
See conversations in <https://github.com/nasa/osal/pull/998>",enhancement,https://github.com/nasa/osal/issues/1005
Access parameter in OS_makedir,"[CCB:2021-05-12](https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-May-12-2021) APPROVED

_Originally posted by @astrogeco in https://github.com/nasa/osal/issues/998#issuecomment-839893908_",duplicate,https://github.com/nasa/osal/issues/1004
"Fix #1002, remove extra newlines in utassert logs","**Describe the contribution**
If messages (e.g. from UtPrintf, etc) already have a newline, do not add another.

Fixes #1002

**Testing performed**
Build and run OSAL unit tests

**Expected behavior changes**
Extra blank lines in test log are removed.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This should preserve extra newlines in the event that the test case was intentionally adding whitespace, by only appending one if it was _not_ there to begin with.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1003
UtAssert should enforce newline on messages only if its missing,"**Is your feature request related to a problem? Please describe.**
Currently the `UT_BSP_DoText` used by UtAssert appends a newline after every message, see here:
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/ut_assert/src/utbsp.c#L184

However, in many calls to `UtPrintf()` the test author already included a `\n` in the format string, such as here:
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/unit-tests/oscore-test/ut_oscore_task_test.c#L85

As a result there is extra whitespace in the log, example here:
https://gist.github.com/jphickey/ccb739d1f1cf6b36caca73e5ee9205cf#file-osal_core_ut-log-L391


**Describe the solution you'd like**
The append of the newline in `UT_BSP_DoText()` should only happen if the message did _not_ have a trailing newline already.  This will still accomplish the intent of making sure output messages end in a newline and do not run together, but will clean up extra unintended blank lines in the log files.

**Additional context**
This is mainly just a nitpick/pet peeve about the extra blank lines that come with ""UtPrintf"", but it also does potentially impact parsing log files with scripts. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, unit-test",https://github.com/nasa/osal/issues/1002
"Fix #981, rework ""unit-tests"" to use macros","**Describe the contribution**
Update most of the conditions in the ""unit tests"" to use the support macros whenever possible.  The macros display the
function being called as well as the return value being checked for, and therefore this makes it so the test log file can be
cross referenced back to the documentation to ensure the documented return codes are being tested.

As a nice side effect this also removes quite a bit of repetition in the test programs.

Fixes #981

**Testing performed**
Build and run all OSAL unit tests

**Expected behavior changes**
Log file produced has much more detail, and can now be cross referenced back to documentation.

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 (pc686+qemu)

**Additional context**
See gist of complete test output log for ""osal_core_UT"": https://gist.github.com/jphickey/ccb739d1f1cf6b36caca73e5ee9205cf
Dependency note: PR #1000 fixes the OS_rmdir test.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1001
"Fix #999, propagate status code in OS_rmdir","**Describe the contribution**
The status code from the low level implementation needs to be returned from the caller, in case it was not OS_SUCCESS.

Fixes #999 

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
The status returned from `OS_rmdir()` should now be correct if the implementation failed.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/1000
"Return value of ""OS_rmdir"" implementation not being passed through","**Describe the bug**
The return value of `OS_DirRemove_Impl()` (the low level implementation) is not getting propagated back to the caller of `OS_rmdir()` as it should be.

**To Reproduce**
Call `OS_rmdir()` on a directory that shouldn't be removable, e.g. if it is not empty.  The `OS_DirRemove_Impl()` function fails and returns `OS_ERROR`, but the application gets returned `OS_SUCCESS`.

**Expected behavior**
Caller should get the error code, not `OS_SUCCESS`.

**Code snips**
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-dir.c#L251

**System observed on:**
Ubuntu 20.04

**Additional context**
Noticed this when validating return codes in #331 and #981

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/999
"Fix #994, fixed invalid inputs for OS_mkdir","**Describe the contribution**
Fixes #994
Changed tests to use valid inputs for all OS_mkdir calls. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/osal/pull/998
"Fix #995, quiet cppcheck","## Describe the contribution
Fix #995, removes --quiet option so files checked go to stdout

## Testing performed
CI

## Expected behavior changes
Reports files checked in CI

## System(s) tested on
Github Actions CI (Ubuntu 18.04)

## Additional context
See nasa/cfe#1488","continuous-integration, CCB:FastTrack",https://github.com/nasa/osal/pull/997
osal Integration candidate: 2021-05-11,"## Context 

Part of <https://github.com/nasa/cfs/pull/256>

## Tests

osal checks <https://github.com/nasa/osal/pull/996/checks>
cFS Bundle checks <https://github.com/nasa/cfs/pull/256/checks>

## Description

### PR #978 


Fix #640, configuration guide updates

Significant update to the configuration guide for the current build system (CMake) and the currently provided set of OS/BSP layers. Many of the examples in this guide referred to items which are now obsolete.


### PR #974 

Fix #963, improve documentation of UtAssert API calls 

The UtAssert API documentation was very terse and some references are obsolete/incorrect. This converts to doxygen form and
corrects the stale/incorrect references.

In particular - UtMemSet does not exist, but the standard C memset call should be used to fill a memory region with a constant value.

### PR #977

Fix #545, update OS_TaskCreate doc
Clarify use of the stack_size parameter, and that it should not be 0.


### PR #980

Related to #331, 

Ensure consistency between the return values generated by each OSAL API and the doxygen documentation. 

Fix missing or incorrect explicitly-returned status code in the coverage tests. 

Correct one argument name mismatch in QueueCreate where it was prototyped as ""data_size"" but implemented as ""max_size"".


## Authors
@jphickey ",,https://github.com/nasa/osal/pull/996
Enable users to confirm that cppcheck workflow is successfull ,"## Description
The ""all"" static analysis check suppresses standard output with --quiet, so can't see that it actually did anything

## Solution 
Remove --quiet

## Alternatives 
None

## Additional context
See nasa/cfe#1488 and nasa/cfe#1489 for reference",continuous-integration,https://github.com/nasa/osal/issues/995
OS_mkdir tests should use valid access settings (even though not implemented yet),"**Is your feature request related to a problem? Please describe.**
Per note in the API:
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/inc/osapi-dir.h#L109-L111

Yet tests don't use sensible values (examples):
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/tests/file-api-test/file-api-test.c#L474
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/unit-tests/osfile-test/ut_osfile_dirio_test.c#L170

**Describe the solution you'd like**
Use appropriate values.  755 is definitely not correct and could lead to confusion.

**Describe alternatives you've considered**
At minimum don't use an incorrect value.  0 is probably least-bad...

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/osal/issues/994
"Fix #988, do not require nonblock mode","**Describe the contribution**
In some versions of VxWorks the fcntl F_GETFL/F_SETFL opcodes do not appear to be implemented, and thus it is not possible
to set O_NONBLOCK mode.  However, this mode is not necessarily required, it is more of a backup/failsafe.

The ""selectable"" flag should not be dependent on whether O_NONBLOCK flag got set.

This also adjust some timeouts and adds some delays to improve the reliability of network-api-test on VxWorks.  The timeouts
were only 10ms, and this is much too short as messages are getting written on a 9600 baud console (avg 1ms/char).  A single log message can easily take 50-60ms alone.

Fixes #988 

**Testing performed**
Execute network-api-test on supported platforms (esp. VxWorks 6.9 in particular)

**Expected behavior changes**
Test now passes reliably.

**System(s) tested on**
Ubuntu 20.04 (native)
VxWorks 6.9 (MCP750)

**Additional context**
This also requires/depends on #992 for reliable operation.  The console mutex is required to ensure that the various information messages from the client/server tasks inside network-api-test do not clobber eachother, but it also helps synchronize them too.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/993
"Fix #989, add local mutex to BSP console","**Describe the contribution**
Adds a generic mutex facility to the low level BSP.  This is mainly for use with low level BSP console output, but could be used for other items that should only be accessed by one task at a time.

This needs to be actually implemented in the BSP layer, so it can be used by UtAssert report outputs (pass/fail message) in addition to OS_printf().  Note that UtAssert always uses the OSAL BSP and does its text output via this layer, but it does __not__ necessarily use the full OSAL with its OS_printf/console abstraction.  So by implementing the lock in the BSP, it works with all modes of operation.

This also converts `OS_DEBUG` outputs to use the same console output facility rather than calling `fprintf()` directly.

The combination of a mutex and all common print outputs (UtAssert, OS_printf, OS_DEBUG) going through the same
path makes the test output on VxWorks much more coherent.

Fixes #989 

**Testing performed**
Build and sanity check CFE and run all unit tests on native and RTEMS.  Also build and run select tests on VxWorks to confirm.

**Expected behavior changes**
Console Output when running UtAssert-based tests is not garbled, much more coherent and readable.

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 (QEMU)
VxWorks 6.9 (MCP750)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/992
Add functional test to confirm `OS_CountSemTimedWait` waits up to the requested amount of time,"**Is your feature request related to a problem? Please describe.**
There's only 2 checks, one for the OS_SEM_TIMEOUT return and one immediate success case.  Nothing to confirm the passed in wait value is being honored.

**Describe the solution you'd like**
Add a time check (maybe as part of count-sem-test)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/osal/issues/991
"Fix #982, Add test for object id inline functions","**Describe the contribution**
Fixes #982 
Adds test for inline object id functions

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:Approved,https://github.com/nasa/osal/pull/990
OS_DEBUG on VxWorks needs to use same BSP facility as OS_printf,"**Describe the bug**
The ""OS_DEBUG"" macro, when enabled, ends up calling `fprintf` directly.  On VxWorks the characters from these debug statements get intermixed with other output from the async utility task / console writer.  This makes it just about impossible to read.  Furthermore unit tests call the BSP function directly, so there is potentially a third task writing chars at the same time during tests, making it worse.

**To Reproduce**
Run functional/unit tests on VxWorks.

**Expected behavior**
Output should be at least decipherable/readable.  Adding some sort of mutex on OS_BSP_ConsoleOutput_Impl() would probably help greatly.

**System observed on:**
MCP750, Vxworks 6.9

**Additional context**
Here is a cut and paste of some output from the ""network-api-test"" that I'm currently looking into for other issues.  This isn't even the worst example I've seen.  But it is very hard to see what's actually going on here.

```
[BEGIN] 01 TestDatagramNetworkApi
OS_SocketOpen_Impl():163:fcntl(F_GETFL): errno = 0x16
[ PASS] 01.Result = 16
001 network-api-test.c:73 - OS_SocketOpen() (0) == OS_SUCCESS
[ PASS] 01.002 network-api-test.c:74 - p1_socket_id (393217) != 0
[ PASS] 01.003 network-api-test.c:78 - OS_SocketAddrInit() (0) == OS_SUCCESS
[ PASS] 01.004 network-api-test.c:82 - OS_SocketAddrSetPort() (0) == OS_SUCCESS
[ PASS] 01.005 network-api-test.c:86 - OS_SocketAddrFromString() (0) == OS_SUCCESS
[ PASS] 01.006 network-api-test.c:90 - OS_SocketBind() (0) == OS_SUCCESS
OS_SocketOpen_Impl():163:fcntl(F_GETFL): errno = 0x16
[ P
ASS] 01.007 network-api-test.c:97 - OS_SocketOpen() (0) == OS_SUCCESS
[ PASS] 01.008 network-api-test.c:98 - p2_socket_id (393218) != 0
[ PASS] 01.009 network-api-test.c:102 - OS_SocketAddrInit() (0) == OS_SUCCESS
[ PASS] 01.010 network-api-test.c:106 - OS_SocketAddrSetPort() (0) == OS_SUCCESS
[ PASS] 01.011 network-api-test.c:110 - OS_SocketAddrFromString() (0) == OS_SUCCESS
[ PASS] 01.012 network-api-test.c:114 - OS_SocketBind() (0) == OS_SUCCESS
[  N/A] 01.013 network-api-test.c:125 - INET6 not supported
[ PASS] 
01.014 network-api-*test.c:135 - OS_Soc*ketOpen() (-2) == OBS_INVALID_POINTER
[U PASS] 01.015 netwoGrk-api-test.c:139 -* OS_SocketOpen() (-*28) == OS_ERR_NOT_I MPLEMENTED
[  N/A] O01.016 network-api-Stest.c:145 - INET6 _not supported
[ PASSS] 01.017 network-aopi-test.c:160 - OS_cSocketAddrInit() (-k2) == OS_INVALID_POeINTER
[ PASS] 01.01t8 network-api-test.Oc:165 - OS_SocketAdpdrInit() (-28) == OeS_ERR_NOT_IMPLEMENTnED
[ PASS] 01.019 n(etwork-api-test.c:1)69 - OS_SocketAddrI:nit() (-2) == OS_IN1VALID_POINTER
[ PAS3S] 01.020 network-a4pi-test.c:174 - OS_:SocketAddrSetPort()c (-34) == OS_ERR_BAhD_ADDRESS
[ PASS] 0e1.021 network-api-tcest.c:178 - OS_SockketAddrSetPort() (-2 ) == OS_INVALID_POI'NTER
[ PASS] 01.022( network-api-test.cs:183 - OS_SocketAddorFromString() (-2) c== OS_SUCCESS
[ PASkS] 01.023 network-a_pi-test.c:189 - OS_iSocketBind() (-16) d== OS_ERR_INVALID_I)D
[ PASS] 01.024 ne twork-api-test.c:19!4 - OS_SocketBind()= (-35) == OS_ERR_IN CORRECT_OBJ_STATE
[N PASS] 01.025 netwoUrk-api-test.c:230 -L OS_SocketSendTo() LPassed. sizeof(Buf1') (4) == 1
[ PASS]  01.026 network-api-Ftest.c:235 - OS_SocAketRecvFrom() PasseId. sizeof(Buf2) (4)L == 1
[ PASS] 01.02E7 network-api-test.Dc:236 - Buf1 (111)  == Buf2 (111)
[ PAS-S] 01.028 network-a-pi-test.c:242 - OS_>SocketAddrToString( ) (0) == OS_SUCCESSO
[ PASS] 01.029 netSwork-api-test.c:245_ - OS_SocketAddrToSItring() (0) == OS_SNUCCESS
[ PASS] 01.0V30 network-api-testA.c:248 - AddrBufferL1 (127.0.0.1) == AdIdrBuffer2 (127.0.0.D1)
_POINTER


**BU[G PASS] 01.031 netwo*rk-api-test.c:257 -* OS_SocketSendTo()  Passed. sizeof(Buf1O) (4) == 1
[ PASS] S01.032 network-api-_test.c:262 - OS_SocSketRecvFrom() Passeod. sizeof(Buf3) (4)c == 1
[ PASS] 01.03k3 network-api-test.ec:263 - Buf3 (222) t== Buf4 (222)
[ PASAS] 01.034 network-adpi-test.c:269 - OS_dSocketAddrToString(r) (0) == OS_SUCCESSI
[ PASS] 01.035 netnwork-api-test.c:272i - OS_SocketAddrToSttring() (0) == OS_S(UCCESS
[ PASS] 01.0)36 network-api-test:.c:275 - AddrBuffer43 (127.0.0.1) == Ad9drBuffer4 (127.0.0.91)
[ PASS] 01.037 n:etwork-api-test.c:2c79 - OS_SocketAddrGhetPort() (0) == OS_eSUCCESS
[ PASS] 01.c038 network-api-teskt.c:280 - PortNum ( 0) == 9998
[ PASS] '01.039 network-api-(test.c:284 - OS_SocAketGetInfo() (0) ==d OS_SUCCESS
[ PASS]d 01.040 network-apir-test.c:285 - prop.)creator (0) == 0
[  PASS] 01.041 networ!k-api-test.c:286 - =prop.name (127.0.0. 1:9999) == 127.0.0.N1:9999
[ PASS] 01.0U42 network-api-testL.c:289 - OS_SocketGLetIdByName() (0) ==' OS_SUCCESS
[ PASS]  01.043 network-apiF-test.c:291 - objidA (393217) == p1_socIket_id
[ PASS] 01.0L44 network-api-testE.c:301 - OS_SocketSDendTo(NULL) (-2) ==  OS_INVALID_POINTER-
[ PASS] 01.045 net-work-api-test.c:305> - OS_SocketSendTo( ) (-2) == OS_INVALIOD_POINTER
[ PASS] 0S1.046 network-api-t_est.c:310 - OS_SockIetSendTo() (-16) ==N OS_ERR_INVALID_ID
V[ PASS] 01.047 netwAork-api-test.c:315 L- OS_SocketRecvFromI() (-2) == OS_INVALDID_POINTER
[ PASS] _01.048 network-api-Ptest.c:319 - OS_SocOketRecvFrom(NULL) (I-2) == OS_INVALID_PNOINTER
[ PASS] 01.0T49 network-api-testE.c:324 - OS_SocketRRecvFrom() (-16) == 
OS_ERR_INVALID_ID
[
 PASS] 01.050 netwo
rk-api-test.c:328 -* OS_SocketRecvFrom(*) (-40) == OS_ERR_IBNVALID_SIZE
[ PASS]U 01.051 network-apiG-test.c:332 - OS_So*cketRecvFrom() (-40*) == OS_ERR_INVALID _SIZE
[ PASS] 01.05O2 network-api-test.Sc:337 - OS_SocketAd_drToString() (-2) =S= OS_INVALID_POINTEoR
[ PASS] 01.053 nectwork-api-test.c:34k1 - OS_SocketAddrToeString() (-2) == OSt_INVALID_POINTER
[ APASS] 01.054 networdk-api-test.c:345 - dOS_SocketAddrToStrirng() (-2) == OS_INVIALID_POINTER
[ PASSn] 01.055 network-apii-test.c:350 - OS_StocketAddrGetPort() ((-2) == OS_INVALID_)POINTER
[ PASS] 01.:056 network-api-tes4t.c:354 - OS_Socket9AddrGetPort() (-2) 9== OS_INVALID_POINT:ER
[ PASS] 01.057 ncetwork-api-test.c:3h58 - OS_SocketAddrGeetPort() (-2) == OSc_INVALID_POINTER
[ kPASS] 01.058 networ k-api-test.c:363 - 'OS_SocketGetIdByNam(e() (-2) == OS_INVAALID_POINTER
[ PASS]d 01.059 network-apid-test.c:367 - OS_SorcketGetIdByName() ()-17) == OS_ERR_NAME _NOT_FOUND
[ PASS] !01.060 network-api-=test.c:372 - OS_Soc ketGetInfo() (-2) =N= OS_INVALID_POINTEUR
[ PASS] 01.061 neLtwork-api-test.c:37L7 - OS_SocketGetInf'o() (-16) == OS_ERR _INVALID_ID
FAILED[   END] 01 TestDatag-ramNetworkApi TOTAL-::61    PASS::59   > FAIL::0     MIR::0      TSF::0     TTFO::0     N/A::2   
```


**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/989
"""network-api-test"" does not run successfully on VxWorks","**Describe the bug**
Running the ""network-api-test"" on VxWorks fails with several issues.  The fcntl `F_GETFL`/`F_SETFL` calls return errno `EINVAL` followed by other failures.

**To Reproduce**
Run the ""network-api-test"" program on MCP750 w/VxWorks 6.9.  Various failures are reported.  Eventually the test hangs because a timeout test is reached, but timeouts do not function correctly due to issues with the previous fcntl F_GETFL calls.

**Expected behavior**
Test should pass.

**System observed on:**
MCP750 w/VxWorks 6.9

**Additional context**
This is partly related to modifications in PR #910/issue #863 which was a product of the CFS-38 review.  Previously it would not check the result of the `fcntl` calls so the ""selectable"" flag was always set.  Now the result is checked and the ""selectable"" flag only gets set if the flags were set.  So the fcntl was always failing on VxWorks but it was previously ignored.  But even if the O_NONBLOCK flag doesn't get set, `select()` should still be usable.  The flag is mainly set as a protection in case two tasks call a blocking API at the same time.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.  (on behalf of JSC team)",bug,https://github.com/nasa/osal/issues/988
"Fix #986, Show CodeQL Preview","**Describe the contribution**
Fix #986 
Checkout just the osal repository rather than the entire cFS bundle to allow CodeQL to provide a code preview. 
Code preview is not available when the entire cFS bundle is checked out. The osal itself must be the only repository checked out. 
Since the tests require the cFE repo, they are removed.  

**Testing performed**
Tested locally on forked repository 
![image](https://user-images.githubusercontent.com/69638935/117340871-05606500-ae67-11eb-945e-2837306c923d.png)

Tested on this PR. Example of code scanning result found here: https://github.com/nasa/osal/security/code-scanning/142?query=ref%3Arefs%2Fpull%2F987%2Fmerge
**Expected behavior changes**
Code preview should be available in the osal repository. 

**Additional context**
Tests are not used. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal 
","CCB:Approved, continuous-integration",https://github.com/nasa/osal/pull/987
Show CodeQL Preview,"**Is your feature request related to a problem? Please describe.**
Code preview is not available for code scanning results from CodeQL. 

**Describe the solution you'd like**
The preview is available when the osal submodule is checked out rather than the cFS bundle. I have not found a way to checkout just the submodule AND use the tests. 

Currently, the workflow checks out the cFS bundle. 
```
    steps:
      - name: Checkout bundle
        uses: actions/checkout@v2
        with:
          repository: nasa/cFS
          submodules: true

      - name: Checkout submodule
        uses: actions/checkout@v2
        with:
          path: osal
```
To show the preview, only the osal submodule needs to be checked out:
```
      - name: Checkout submodule
        uses: actions/checkout@v2
```

**Describe alternatives you've considered**
Would like to keep the tests, but believe they require the cFS bundle. 

**Additional context**
Community Support Thread: https://github.community/t/codeql-with-submodules/159839/10
> The reason is that we currently don’t look for files across submodules for the preview.

**Requester Info**
Ariel Adams, ASRC Federal 
",continuous-integration,https://github.com/nasa/osal/issues/986
"Fix #983, rename hooks to handlers","**Describe the contribution**
CCB 2021-05-05 review item.  Makes filenames better match terms used in implementation.

Fixes #983

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
None, only renames files

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Also renames terms in the generator script, the ""--hook-suffix"" option is renamed to ""--handler-suffix"", etc.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/985
"Update `OS_ObjectIdToArrayIndex` documentation related to it being an API, inconsistent documentation in implementation","**Is your feature request related to a problem? Please describe.**
`'OS_ObjectIdToArrayIndex` is an external API:
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/inc/osapi-idmap.h#L203-L232

Yet internally there's a few style patterns and references that treat it like it's internal:
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-idmap.c#L1529-L1543
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-idmap.c#L1413

Note the implementation file itself has some inconsistencies:
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-idmap.c#L41-L42
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-idmap.c#L129-L133
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-idmap.c#L135-L142
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/os/shared/src/osapi-idmap.c#L230-L233

**Describe the solution you'd like**
Update comments, make sure headers are in the right place

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/osal/issues/984
Differentiate hook and handler function filenames,"**Is your feature request related to a problem? Please describe.**
From [CCB:2021-05-05](https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-May-05-2021)

in https://github.com/nasa/cFE/issues/1463#issuecomment-832825759_

**Describe the solution you'd like**
Rename *hooks.c as *handler.c for stubs

**Describe alternatives you've considered**
None

**Additional context**
See nasa/cfe#1463

",enhancement,https://github.com/nasa/osal/issues/983
Add tests for object id inline functions,"**Is your feature request related to a problem? Please describe.**
`OS_ObjectIdToInteger`, `OS_ObjectIdFromInteger`, `OS_ObjectIdEqual`, `OS_ObjectIdDefined` are missing tests.

**Describe the solution you'd like**
Add tests.  

Since these are inline they can be completely exercised via explicit coverage tests (suggest adding to coveragetest-idmap.c).  

Note these can be trivial, just need to convert a to and from a range of ID's (note these are just to/from integers, NOT indexes...), check each for equal to itself but not equal to the others, check that OS_OBJECT_ID_UNDEFINED results in undefined and the rest are defined.  This also ensures an ID didn't ""wrap"" by exercising Array Index conversions from array index 0 and max for each type (as defined in configuration).

**Describe alternatives you've considered**
Could be added to a ""functional/full stack"" test but no point since they don't have any external dependencies.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, unit-test",https://github.com/nasa/osal/issues/982
"Improve consistency in the result reporting in ""unit-tests""","**Is your feature request related to a problem? Please describe.**
In order to be able to cross check and confirm that the unit tests are actually checking for the status codes that they should be, the test cases need to be clear about the API being called and the return value/status code being tested for in that test case.  However, the functional tests are currently not consistent in how results are reported.

**Describe the solution you'd like**
Example from the binsem test, which is better because it at least uses a macro that includes both the function name/API being called (`OS_BinSemCreate`) as well as the status code being tested for (`OS_INVALID_POINTER`):

https://github.com/nasa/osal/blob/a061666924644a7d23b17d3d060dc9e704913447/src/unit-tests/oscore-test/ut_oscore_binsem_test.c#L84

Which translates to a line like this in the log file:
`[ PASS] 05.002 ut_oscore_binsem_test.c:84 - OS_BinSemCreate(&sem_ids[0], NULL, 1, 0) (-2) == OS_INVALID_POINTER (-2): null pointer arg 2`

However a similar test case from OS_ModuleLoad displays neither:
https://github.com/nasa/osal/blob/a061666924644a7d23b17d3d060dc9e704913447/src/unit-tests/osloader-test/ut_osloader_module_test.c#L99-L105

The latter translates only to a line like this in the log file, which doesn't say much at all:
`[ PASS] 01.002 ut_osloader_module_test.c:103 - #2 Null-pointer-arg-2`

A clear and concise description of what you want to happen.

**Additional context**
This is a prerequisite to completing #331 - The information in the log file needs to be made more like the BinSem case, so it can be cross referenced back to confirm the functional tests are checking for the items they are supposed to be checking for.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/981
"Partial #331, scrub return values","**Describe the contribution**
Confirm consistency between the return values generated by each OSAL API and the doxygen documentation.  Each explicitly-returned status code should have a corresponding ""retval"" entry in the documentation.

Also confirms that each explicitly-returned status code has a matching case in the coverage tests that specifically checks for
that return value.  Some were actually missing, where as some were just being reported incorrectly.

Finally this also corrects one argument name mismatch in QueueCreate where it was prototyped as ""data_size"" but implemented as ""max_size"".

Related to #331  (but more work to do, so should not close yet)

**Testing performed**
Build and sanity check CFE, run all unit tests, build osalguide documentation and confirmed no warnings

**Expected behavior changes**
None, test and documentation updates only.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/980
osal Integration candidate: 2021-05-04,"## Description

### PR #973 

Fix #964, UtPrintx function

Fixes infinite loop  in `UtPrintx()`. Adds the data's memory address to output. Note, UtPrintf displays the the file/line of the `UtPrintx` function, **not the actual test location**; it is better to call `UT_BSP_DoText` directly.



### PR #976

Fix #960, add socket shutdown implementation

Adds `OS_SocketShutdown()` API wrapper around BSD's socket shutdown() API. This allows a data transfer of a stream socket to be gracefully shut down prior to socket closure.

## Context

Part of <https://github.com/nasa/cFS/pull/252>

## Testing 

osal checks <https://github.com/nasa/osal/pull/979/checks>
cFS Bundle checks <https://github.com/nasa/cFS/pull/252/checks>

## Authors

@jphickey 
",,https://github.com/nasa/osal/pull/979
"Fix #640, configuration guide updates","**Describe the contribution**
Significant update to the configuration guide for the current build system (CMake) and the currently provided set of OS/BSP layers.  Many of the examples in this guide referred to items which are now obsolete.

However, this does *NOT* fix references to the applications and in particular the ""tasking example"" as this still may be brought back.

Fixes #640 

**Testing performed**
View guide in markdown viewer, confirm commands/pathnames in guide seem to match current version

**Expected behavior changes**
None - documentation only

**System(s) tested on**
Commands in document were validated on Linux and RTEMS where possible

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/978
"Fix #545, update OS_TaskCreate doc","**Describe the contribution**
Clarify use of the stack_size parameter, and that it should not be 0.

Fixes #545 

**Testing performed**
Build and sanity check, run all unit tests

**Expected behavior changes**
None, documentation update only

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Other items listed in #545 are fixed by PR #972

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CCB:FastTrack",https://github.com/nasa/osal/pull/977
"Fix #960, add socket shutdown implementation","**Describe the contribution**
Adds an OS_SocketShutdown() wrapper around the BSD socket shutdown() API.  This allows a data transfer of a stream socket to be gracefully shut down prior to socket closure.

Fixes #960

**Testing performed**
Build and sanity check CFE, run all unit tests
The ""network-api-test"" program is enhanced with several more test cases to confirm that the shutdown functionality is working as intended.

**Expected behavior changes**
`OS_SocketShutdown()` API added.  No effect unless API is used, existing code not changed.

**System(s) tested on**
Ubuntu 20.04, RTEMS 4.11

**Additional context**
This PR depends on PR #971, so this is based on the IC right now.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/976
osal Integration candidate: 2021-04-27,"## Description


### PR #972

Fix #970, update documentation for read/write


[docs] Clarifies that that zero will be returned on EOF condition in the API documentation for OS_read/write/TimedRead/TimedWrite. In the case of the timed API calls, the `OS_ERR_TIMEOUT` status code will be returned if the timeout expired without the handle becoming readable/writable during that time.

### PR #966

Fix #832, add ""handler"" feature to utassert stub API


Addresses a shortcomings in the UT Assert hook functions. Namely the assumed return type of int32 which is not always the case.

Adds the concept of a ""handler"" function to UT assert to replace hard-coded custom logic in UT assert. A handler is the custom logic that exists between the hook function and the return to the stub caller. The handler is directly responsible for setting all outputs.

Adds a script to auto-generate stub functions that match this pattern. Given an API header file, the script extracts
the declarations, and generates a source file with stub definitions that rely on a separate handler to deal with the needed outputs.

Refactors `os-shared-printf.h`) into two parts to improve the compatibility with the script method.

Updates all existing stubs in OSAL to use the auto-generated stub logic from the script, created directly from the C header. This ensures that stubs will match the FSW implementation. 

Only affects coverage testing with stubs, and should be fully backward compatible with existing tests.


### PR #953 

<!-- Fix #419 #729 #954, Adds local makefile and bundle/local unit test actions with coverage verification  -->

Fix #419 - Adds local makefile (trivial single build sample, can use different build directories for multiple platform)
Fix #729 - Adds bundle and local unit test run and coverage verification
Fix #954 - Added missing line coverage


[continuous-integration] Adds a local osal-specific makefile to help build unit tests. Adds a new github workflow that runs the unit tests in both the context of the bundle configuration and the local OSAL config. Verifies 100% line coverage.



### PR #971 

Fix #969, socket accept using incorrect record 
Fixes incorrect token use in `OS_SocketAccept`. Enables the `network-api-test` to handle multiple connections that re-use the same acceptor socket between them. 


### PR #959  

Fix #957, move async console option 


Promotes the `OS_CONFIG_CONSOLE_ASYNC` option into the shared layer to remove duplicate implementation code and add more coverage testing.

Adds an osconfig option to allow the user to elect this mode at configuration time.

No externally-visible impacts



## Context

Part of nasa/cFS#250

## Testing

OSAL Checks <https://github.com/nasa/osal/pull/975/checks>
cFS bundle Checks <https://github.com/nasa/cFS/pull/250/checks>

## Authors

@jphickey 
@skliper 
",,https://github.com/nasa/osal/pull/975
"Fix #963, improve documentation of UtAssert API calls","**Describe the contribution**
The UtAssert API documentation was very terse and some references are obsolete/incorrect.  This converts to doxygen form and
corrects the stale/incorrect references.

In particular - UtMemSet does not exist, but the standard C memset call should be used to fill a memory region with a constant value.

Fixes #963

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
None - documentation only

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/974
"Fix #964, UtPrintx function","**Describe the contribution**
Fix the UtPrintx() routine such that the loop stops correctly.  Also improves the output to print the address, not just the data.

Note if UtPrintf is used, one sees the file/line of the UtPrintx function, not the actual test location, so it is better to call
UT_BSP_DoText directly so it omits this extraneous info.

Fixes #964 

**Testing performed**
Temporarily Update a test to use UtPrintx() -- this function was not used in any current tests -- and confirm that the output now works as expected.

**Expected behavior changes**
No infinite loop in UtPrintx, and also it now includes the memory address of the data, not just the data itself.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/973
"Fix #970, update documentation for read/write","**Describe the contribution**

Update the API documentation for OS_read/write/TimedRead/TimedWrite. Clarify that zero will be returned on EOF condition, and in the case of the timed API calls, the OS_ERR_TIMEOUT status code will be returned if the timeout expired without the handle becoming readable/writable during that time.

This is intended behavior such that it allows the caller to differentiate between a handle which is in a state where it cannot read/write any more data (e.g. at EOF, or a pipe/socket with remote end closed) and a handle which is simply idle or busy.

Fixes #970 

**Testing performed**
Build and sanity check, run all tests

**Expected behavior changes**
None - documentation update only

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/972
"Fix #969, socket accept using incorrect record","**Describe the contribution**
This improves the network-api-test to do multiple connections, re-using the same acceptor socket between them.

As reported in #969, the OS_SocketAccept call was using the incorrect token, using the server/acceptor socket when it should have used the connection socket.

The bug overwrote data in the acceptor socket, but it would only cause an issue when the user attempted to use the server socket to accept a second connection, but the tests only performed a single connection.

With the improvement to network-api-test to run multiple connections, it now reveals the bug in the test.  Without the fix, the test failed on the second connection.  With the fix to OS_SocketAccept to use the correct token, the test passes fine again.

Fixes #969 

**Testing performed**
Build and sanity check CFE, run all unit tests (particularly network-api-test).

**Expected behavior changes**
OS_SocketAccept() does not clobber the server socket, allows it to be re-used for additional connection(s) as intended.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/971
return for a timeout is negative 4,"https://github.com/nasa/osal/blob/afb5f7ba3ea48823e44490ce4258aa92a073087f/src/os/shared/src/osapi-file.c#L208

Not sure which layer of abstraction to report this but the comment states that a timeout should return 0.  However, on Linux/portable BSD... the eventual call to OS_DoSelect is returning OS_ERROR_TIMEOUT (-4) and flowing that all the to the OS_TimedRead API. I would prefer it to be ""caught"" and returned as 0 at some point but.. more than anything.. just need the comment to match.",docs,https://github.com/nasa/osal/issues/970
Wrong token name used in accept call,"https://github.com/nasa/osal/blob/afb5f7ba3ea48823e44490ce4258aa92a073087f/src/os/shared/src/osapi-sockets.c#L269

This is a bug. I think it should be conn_token.. not sock_token",bug,https://github.com/nasa/osal/issues/969
Add UtAssert method to verify expected stub argument value(s),"**Is your feature request related to a problem? Please describe.**
In some tests cases it is desired to not only verify that a specific stub function was called, but also to verify the specific arguments that the stub function was called with.

This is currently possible by writing a hook function to check the argument values, but that requires writing a specific hook for every API.

**Describe the solution you'd like**
Provide a more generic facility such that a test case can pre-assemble an object (similar to the Context object which is passed to the hook) that has the _expected_ argument names + values.  Then provide a generic method to compare those to the _actual_ argument values when the function is called.  The latter bit can be done by common code at the same time the user-defined hooks are invoked.

**Describe alternatives you've considered**
A scaled-back alternative might be to provide a facility to register a persistent hook that is called for every function, and is not forgotten/unregistered when the stubs are reset like other hooks are.

This would allow a test case to register a function to be called with _every_ stub on _every_ test without having to re-register it every time.  Calling this an alternative because the test case can then implement its own generic argument value check hook, but this would simplify the process by allowing it to apply universally and persistently.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/968
osal Integration candidate: 2021-04-20,"## Description

### PR #950 

Fix #932 - changed parameter names to avoid collisions

Renames `access` as `access_mode` in `osapi-file.h`.
Renames `time` as `TimeSp` in `os-impl-posix-gettime.c`.


### PR #946

Fix #945, shell implementation on posix and rtems 

Deletes the broken RTEMS `os-impl-shell.c` file so so OSAL builds with `OSAL_CONFIG_INCLUDE_SHELL=true`. RTEMS will always report `OS_ERR_NOT_IMPLEMENTED`.


## Context

Part of <https://github.com/nasa/cFS/pull/248>

## Testing

osal Checks <https://github.com/nasa/osal/pull/967/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/248/checks>

## Authors
@jphickey 
@skliper ",,https://github.com/nasa/osal/pull/967
"Fix #832, add ""handler"" feature to utassert stub API","**Describe the contribution**
Adds the concept of a ""handler"" function to UT assert.  A handler is basically the custom logic that exists between the hook function and the return to the stub caller.  In current UT stubs, this is hard coded, and it generally comprises setting output parameters and translating return values as needed.

This concept adds the basic plumbing to allow the handler to be configured just like a hook function already does.  The difference
is that the handler is directly responsible for setting all outputs.

This also includes a script to auto-generate stub functions that match this pattern.  Given an API header file, the script extracts
the declarations, and generates a source file with stub definitionsthat rely on a separate handler to deal with the needed outputs.

Lastly, all existing stubs in OSAL will be updated to use the auto-generated stub logic from the script, created directly from the C header.  This ensures that stubs will match the FSW implementation.  Note - one header in FSW (`os-shared-printf.h`) was broken into two parts, to improve the ability to do this.

Fixes #832

**Testing performed**
Build and sanity check CFE
Run all unit tests, ensure all tests pass.  Confirm that unmodified coverage test scripts are passing as-is, and coverage is still 100%.

**Expected behavior changes**
This change only affects coverage testing with stubs, and should be __fully backward compatible with existing tests__.
Once a stub is regenerated via the auto-generator script:
 - Stub is exactly in sync with FSW implementation
 - any return type handled (not just `int32`)
 - all args passed through context
 - handler can be completely overridden by test case when desired, such that test case can have 100% control over the stub call.

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11

**Additional context**
The ""handler"" function uses a different hook function prototype than the hook functions do.  The latter is kept the same for backward compatibility with existing tests.

The intent is to address a few long-standing shortcomings in the design of the hook function.  In particular, hook function design assumes/requires that the function returns `int32`.  While most do, some do not, and this is a major issue if the goal is to completely replace the handler associated with a stub.

In this design there is now a dedicated data buffer to hold the return value, which can be of any data type, and a macro that the handler (or hook) implementation can use to fill/set that return value.  However the framework will automatically populate that buffer from the `int32` status code if the hook/handler did not populate it, which was what ~90% of stub functions did in their ""post-hook"" logic.  This simplifies things in that those functions don't need any handler at all unless they had other work to do.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/966
WIP CI Fail check,I am just checking the continuous integration. This is not a real pull request. ,"invalid, CCB:Ignore",https://github.com/nasa/osal/pull/965
Why does UtPrintx have an infinite loop in it?,"**Describe the bug**
Any use of UtPrintx results in an infinite printing of the given Memory and Length.

**To Reproduce**
Steps to reproduce the behavior:
1. Put UtPrintx in a unit test, give it an address and size (from 0 to max uint32)
2. Run tests
3. Enter loop

**Expected behavior**
1. Print the number of bytes given as _Length_ starting at the given address _Memory_ (with newline at end)
2. Return

**Code snips**
https://github.com/nasa/osal/blob/b37da18bd5efed6d86344e4cafaa42c833b015fb/ut_assert/src/uttools.c#L188-L207

**System observed on:**
 - RHEL 7.8

**Reporter Info**
Alan Gibson
NASA/GSFC 587
","bug, question, unit-test",https://github.com/nasa/osal/issues/964
Cannot find recommended method (UtMemSet) suggested in comments,"**Describe the bug**
UtMemSet is not found in ut-assert, but it suggested to be used in comments from utassert.h and uttools.h

**To Reproduce**
https://github.com/nasa/osal/blob/b37da18bd5efed6d86344e4cafaa42c833b015fb/ut_assert/inc/utassert.h#L125-L128
https://github.com/nasa/osal/blob/b37da18bd5efed6d86344e4cafaa42c833b015fb/ut_assert/inc/uttools.h#L61-L63

**Additional context**
Other comments in the same files suggest to use methods that do exist, UtMemFill and UtMem2BinFile.

**Reporter Info**
Alan Gibson
NASA/GSFC 587
","docs, unit-test, refactor",https://github.com/nasa/osal/issues/963
"Fix #961, update OSAL Config Guide link","**Describe the contribution**
Fixes github link in OSAL README.

**Testing performed**
- Went to https://github.com/rosspeters6/osal/blob/fix-961-update-osal-config-guide-link/README.md in Firefox to render Markdown
- Clicked ""Configuration Guide"" link at bottom of document
- Confirmed that Firefox navigated me to valid doc link: https://github.com/nasa/osal/blob/main/doc/OSAL-Configuration-Guide.md

Fixes #961 

**Expected behavior changes**
Link now properly navigates users to Config Guide documentation. 

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 18.04
 - Versions: Firefox 87.0 (64-bit)

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Ross Peters
","CCB:Approved, docs, CCB:FastTrack, community",https://github.com/nasa/osal/pull/962
OSAL Configuration Guide Link is broken in README,"**Describe the bug**
The link to the OSAL Configuration Guide is broken in blob/main/README.md.

**To Reproduce**
Go to https://github.com/nasa/osal/blob/main/README.md and then click on the ""Configuration Guide"" link near the bottom of the file. It navigates to the old PDF file link.

**Expected behavior**
I expected the link to take me to the Markdown file in the repo.

**Code snips**
`See the [Configuration Guide](https://github.com/nasa/osal/blob/master/doc/OSAL-Configuration-guide.pdf) for more information.` (should reference doc/OSAL-Configuration-Guide.md).

**System observed on:**
Documentation only.

**Additional context**
N/A

**Reporter Info**
Ross Peters
",docs,https://github.com/nasa/osal/issues/961
Add socket shutdown API,"**Is your feature request related to a problem? Please describe.**
No support for graceful shutdown of TCP sockets

**Describe the solution you'd like**
Add shutdown API

**Describe alternatives you've considered**
None

**Additional context**
Stakeholder request

**Requester Info**
Jacob Hageman - NASA/GSFC

ping @excaliburtb
",enhancement,https://github.com/nasa/osal/issues/960
"Fix #957, move async console option","**Describe the contribution**
Puts the ""async"" option into the shared layer instead of the impl layer.

This allows both options to be coverage tested and also allows a bit more of the logic to be common instead of duplicated in the 3 implementations.

This also adds back an osconfig option to allow the user to elect this mode at configuration time.

Fixes #957 

**Testing performed**
Build and sanity check CFE with `OSAL_CONFIG_CONSOLE_ASYNC` set each way
Confirm coverage test also exercises both runtime paths, regardless of compile time config.
Confirm (via debugger on native build) that when `OSAL_CONFIG_CONSOLE_ASYNC` is set false, the extra utility task is NOT spawned.

**Expected behavior changes**
No externally-visible impacts
Gets better path coverage on both modes of operation

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11.3 (QEMU)
VxWorks 6.9 (MCP750)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/959
Convert stub count checks to use UtAssert_STUB_COUNT,"**Is your feature request related to a problem? Please describe.**
Many stub count checks call `UT_GetStubCount` directly, utilize `UtAssert_True` for the test and don't print the expected/actual stub count.

**Describe the solution you'd like**
Use the stub.  The standard print is more useful.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/osal/issues/958
Impossible to test OS_CONSOLE_ASYNC false case,"**Is your feature request related to a problem? Please describe.**
Now that OS_CONSOLE_ASYNC is defined locally, it's impossible to functionally test false case or get full branch coverage on `OS_ConsoleCreate_Impl` without modifying the code under test:
https://github.com/nasa/osal/blob/ba0ac40d3b58b4d12f32a2222c8c8ed2fb663c65/src/os/vxworks/src/os-impl-console.c#L41-L48

https://github.com/nasa/osal/blob/ba0ac40d3b58b4d12f32a2222c8c8ed2fb663c65/src/os/vxworks/src/os-impl-console.c#L146-L148

**Describe the solution you'd like**
Either need to be able to exercise this option or remove it.

**Describe alternatives you've considered**
None

**Additional context**
Prevents full branch coverage

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/957
osal Integration candidate: 2021-04-13,"## Description

### PR #941 

Fix #871, allow OSAL re-initialization
Fix #691, Combine initialized and shutdown flags into one

Replaces the separate ""Initialized"" and ""Shutdown"" flags with a single state flag.  Creates a global single source of truth for the OSAL state. This enables users to run tests and `OS_API_Init()` multiple times without a reboot in the middle to reset the state.
- Multiple invocations of `OS_API_Init()` are allowed - subsequent calls can be ignored
- Deleting of any internal objects that did get created if `OS_API_Init()` fails (this leaves system in same state as when it started)
- Allows Re-initialization of OSAL after `OS_ApplicationShutdown()` - may be relevant when running unit tests several times without rebooting.

### PR #948 

Fix #944, add OS_API_Teardown 
Fix #197, Black Box Unit Tests Do Not Ensure Resources Are Cleaned Up Between Tests

Adds `OS_API_Teardown` to complement `OS_API_Init. This cleans up all OSAL resources ideally leaving the system in a state where `OS_API_Init()` may be invoked again.

### PR #940 

Fix #939, rework shell test 

Reworks the shell unit test which was probably not working. Note this requires modifying the osal config to enable shell, otherwise test is skipped.

## Context

Part of <https://github.com/nasa/cFS/pull/242/>

## Testing

osal checks <https://github.com/nasa/osal/pull/956/checks>
bundle checks <https://github.com/nasa/cFS/pull/242/checks>

## Authors

@jphickey ",,https://github.com/nasa/osal/pull/956
UtAssert improvements for multiple test invocations,"**Is your feature request related to a problem? Please describe.**
UtAssert currently assumes that there will only be one test set to execute.  After booting, a set of tests is collected, then executed, and once the test is complete the process will end (either by simply exiting the process on Linux debug environment, or stopping the parent VM/container, or doing a processor reset if on real hardware).

The newly added CFE functional test now permit more than one test set to run, based on commands.  A test can be started, completed, and then another test can be started, all in one ""lifetime"" of the UtAssert global data structures.

Although this generally works there could be some improvements

**Describe the solution you'd like**
At the end of a test run the list is destroyed, and it leaves the list pointer as NULL.  This means no additional tests can be registered after a call to UtTest_Run.  (Luckily re-invoking UtTest_EarlyInit is a workaround - this is risky though because if any tests were in the list already, early init will drop them and leak the memory, it does not check for this).  Preferably this should leave the structure in a state where more tests can be registered without a complete re-init.

**Additional context**
Neither of these suggestions are critical at this time - would be nice to have, but nothing that prevents CFE functional test from basically running, using the workaround of re-invoking `UtTest_EarlyInit()` between every test cycle.

The biggest risk is the fact that re-invoking UtTest_EarlyInit does not protect against clobbering already-registered tests, but this shouldn't happen if the proposed test pattern is followed (its more of something that isn't protected against happening, not something actually happening).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/955
OSAL line coverage missing if using OS_DEBUG,"**Is your feature request related to a problem? Please describe.**
Missing test cases in bsd-sockets accept function.

**Describe the solution you'd like**
Cover branches/lines.

**Describe alternatives you've considered**
None

**Additional context**
See #953

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/osal/issues/954
"Fix #419 #729 #954, Adds local makefile and bundle/local unit test actions with coverage verification","**Describe the contribution**
Fix #419 - Adds local makefile (trivial single build sample, can use different build directories for multiple platform)
Fix #729 - Adds bundle and local unit test run and coverage verification
Fix #954 - Added missing line coverage

**Testing performed**
Self testing!  Also checked distclean and install independently.

**Expected behavior changes**
Runs the unit tests again, both from the context of the bundle config and local OSAL config.  Verifies 100% line coverage.

**System(s) tested on**
 - Hardware: Local docker container
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + these commits

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, continuous-integration, build-system",https://github.com/nasa/osal/pull/953
format codes,"**Describe the contribution**
A clear and concise description of what the contribution is.
- Include explicitly what issue it addresses [e.g. Fixes #X]

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
- Else if Company
  - **HAND SIGNED** Company CLA must be on file (once per release): [OSAL Company CLA](../doc/GSC_18370_Corp_CLA_form_1219.pdf)
- Else if Individual
  - **HAND SIGNED** Individual CLA must be on file (once per release): [OSAL Individual CLA](../doc/GSC_18370_Ind_CLA_form_1219.pdf)
",invalid,https://github.com/nasa/osal/pull/952
osal Integration candidate: 2021-04-06,"## Description

### PR #931 

Fix #916, scrub include guards

Replaces nonstandard header file block comments and include guards. No behavior changes

### PR #937 

Fix #844, switch to use CLOCK_REALTIME 

Removes `CLOCK_MONOTONIC` as the osal colck source since PSP no longer needs it. `OS_GetLocalTime()` and `OS_SetLocalTime()` will work as described.

### PR #938 

Fix #887, specify shell name in ShellOutputToFile

Replaces `shellName` with a specific `localShellName` that can be polled safely and changes its type to a char of `OS_MAX_API_NAME` length for safety.

## Context
Part of <https://github.com/nasa/cFS/pull/238>

## Tests

osal checks <https://github.com/nasa/osal/pull/951/checks>
cFS bundle checks <https://github.com/nasa/cFS/pull/238/checks>

",,https://github.com/nasa/osal/pull/951
"Fix #932, Eliminate time and access name collisions with VxWorks","**Describe the contribution**
Fix #932 - changed parameter names to avoid collisions

**Testing performed**
Build/run unit tests, passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: Local docker container
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/950
"Fix #197, test teardown cleanup","**Describe the contribution**
Invokes OS_API_Teardown as a test teardown function for all unit tests.  This returns the global state objects to their initial state and therefore allows the test to be re-run/repeated without rebooting.  It also ensures that any resources allocated by the test are removed before the test finishes.

**Testing performed**
Build and run all unit tests, confirm passing

**Expected behavior changes**
Test resources are cleaned up to the extent possible, and set back to initial state.  Tests can be repeated if desired.

**System(s) tested on**
Ubuntu 20.04
MCP750 Vxworks 6.9

**Additional context**
Depends on #948 

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",invalid,https://github.com/nasa/osal/pull/949
"Fix #944, add OS_API_Teardown","**Describe the contribution**
This cleans up all OSAL resources as best as possible, ideally leaving the system in a state where OS_API_Init() may be invoked again.

Fixes #944
Fixes #197 

**Testing performed**
Build and run all unit tests, confirm correct behavior
Test in conjunction with fix for #197, confirm test can be run multiple times on VxWorks without reboot

**Expected behavior changes**
Adds OS_API_Teardown API to complement OS_API_Init

**System(s) tested on**
Ubuntu 20.04 (native)
MCP750 vxworks 6.9

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/osal/pull/948
Duplicated documentation in unit-tests is out of date and doesn't add anything,"**Is your feature request related to a problem? Please describe.**
Tests in the unit-tests directory repeat API documentation, leading to possible inconsistencies.

Example - OS_create was removed, this actually tests OS_OpenCreate
https://github.com/nasa/osal/blob/65c584feea04b4c77389667a1e30ae56b4da35ce/src/unit-tests/osfile-test/ut_osfile_fileio_test.c#L139

**Describe the solution you'd like**
Remove duplicated documentation

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/osal/issues/947
"Fix #945, shell implementation on posix and rtems","**Describe the contribution**
Fix #945 

Due to other changes the shell implementation on RTEMS and POSIX failed to build under certain configurations.  

- On POSIX the check of `active_id` field was not valid.  Using the existing `OS_CloseAllFiles()` function does what is needed here and is much simpler.
- On RTEMS, the shell does not recognize the redirect operators.  This was basically cut and pasted from Linux/bash shell syntax and probably never worked on RTEMS, and there was no test to verify.  Now that ""shell-test"" exists, it confirms that this does not actually work.

For now, the broken impl file is simply deleted, and RTEMS will always use `os-impl-no-shell.c`.  In a future version, the implementation can be fixed properly.  

**Testing performed**
Build POSIX and RTEMS with shell enabled (OSAL_CONFIG_INCLUDE_SHELL=true)
Run ""shell-test"" and confirm behavior on POSIX (passes) and RTEMS (skips)

(Note that CFE does not directly use the OSAL shell function, but apps might; it is optional)

**Expected behavior changes**
Broken code is removed, so OSAL builds with `OSAL_CONFIG_INCLUDE_SHELL=true` on all platforms, but RTEMS will still result in OS_ERR_NOT_IMPLEMENTED always.

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11.3

**Additional context**
I briefly investigated what it would take to fix this on RTEMS properly.  The issue is that the `rtems_shell_init()` function attaches to a ""device name"" (typically /dev/console for interactive use), not individual input/output file descriptors.  So it appears to be a matter of creating a pseudoterminal-type device that ""reads"" from the script and writes to the file.  But it also appeared this was an area that changed a fair bit in RTEMS between 4.11 and 5.x release, so any solution would be unlikely to work on both, and this is why I decided its probably not worth pursuing for now.  (a stakeholder who wants the shell to work on RTEMS can always re-implement).

But since the existing code in `os-impl-shell.c` was very broken, it is just removed (not even useful as a basis for future; better to use posix or vxworks as basis instead).

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/osal/pull/946
RTEMS fails to build with shell enabled,"**Describe the bug**
The prototype for the OS_ShellOutputToFile_Impl() function has gotten stale and needs an update.  Unfortunately this isn't built as part of any regularly-run test routine.

**To Reproduce**
Change OSAL config to enable shell
Build on RTEMS

**Expected behavior**
Build should pass

**Code snips**
https://github.com/nasa/osal/blob/65c584feea04b4c77389667a1e30ae56b4da35ce/src/os/rtems/src/os-impl-shell.c#L55

**System observed on:**
RTEMS 4.11.3 target, Ubuntu 20.04 host.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/945
OSAL should have an inverse function to OS_API_Init(),"**Is your feature request related to a problem? Please describe.**
Once OSAL is initialized, normally it runs forever until rebooted, or the process exits in the case of Linux.  In that light, resources obtained during OS_API_Init() cannot directly/simply be released via the API - there is no opposite/inverse routine defined.

However under testing conditions, and for general completeness of API, it is useful to have an inverse function to tear down the API structures and return the system to the state it was prior to the `OS_API_Init()` call.

This can (_almost_) be done with the current OSAL API, but it must be done in two parts:

1. `OS_DeleteAllObjects()` will clean up any remaining user-instantiated objects in the tables.
2. `OS_ApplicationShutdown(true)` will cause any internal resources, such as the console utility task, to also self-exit.

The combination of these two basically leaves the system in a state similar to what it was before `OS_API_Init()` was run.  (its not perfect, but its close).

But its not ideal because a user shouldn't have to call two functions (one of which also has a parameter) to undo the init call.

**Describe the solution you'd like**
Implement a `void OS_API_Teardown(void)` routine which would be just be a wrapper around these two currently-existing functions, to make it simpler to do this.

Importantly, being a void/void routine means that it can be easily used with unit tests and the `UtTest_AddTeardown()` routine.

**Describe alternatives you've considered**
Leave as-is

**Additional context**
Issue #197 which calls for something like this that unit tests can use.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/944
OSAL Timer UT failing intermittently,"**Describe the bug**
On my virtual machine running Ubuntu 20.04, OSAL_timer_UT fails roughly 50% of the times I run it. Specifically the OS_TimerSet test. 


**To Reproduce**
Run Make test

**Expected behavior**
It should pass 100% of the time. 

**Code snips**
Here is the printout 

BEGIN] 05 OS_TimerSet
[ PASS] 05.001 ut_ostimer_timerio_test.c:525 - #1 Invalid-id-arg
[ INFO] 05.002 ut_ostimer_timerio_test.c:532 - #2 Internal-error
[ INFO] ut_ostimer_timerio_test.c:553:
OS_TimerSet() - #3 Interval-too-short (clk_accuracy=10000)

[ PASS] 05.003 ut_ostimer_timerio_test.c:560 - #3 Interval-too-short
[ INFO] ut_ostimer_timerio_test.c:591:
OS_TimerSet() - #1 Nominal condition (clk_accuracy=10000)

[ FAIL] 05.004 ut_ostimer_timerio_test.c:600 - #4 Nominal
[  END] 05 OS_TimerSet          TOTAL::4     PASS::2     FAIL::1 

**System observed on:**
Ubuntu 20.04

**Reporter Info**
ALex Campbell GSFC","enhancement, unit-test",https://github.com/nasa/osal/issues/943
Timer-add-api-test failing intermittently ,"**Describe the bug**
On my virtual machine running Ubuntu 20.04, The Timer-add-api-test fails roughly 50% of the times I run it. 

**To Reproduce**
Run make test 

**Expected behavior**
It should pass 100% of the time. 

**Code snips**
Here is the printout from the test 

[BEGIN] 01 TestTimerAddApi
[ PASS] 01.001 timer-add-api-test.c:84 - OS_TimeBaseCreate() (0) == OS_SUCCESS
[ PASS] 01.002 timer-add-api-test.c:88 - OS_TimeBaseSet() (0) == OS_SUCCESS
[ PASS] 01.003 timer-add-api-test.c:93 - Timer 0 Created RC=0 ID=90001
[ PASS] 01.004 timer-add-api-test.c:93 - Timer 1 Created RC=0 ID=90002
[ PASS] 01.005 timer-add-api-test.c:93 - Timer 2 Created RC=0 ID=90003
[ PASS] 01.006 timer-add-api-test.c:93 - Timer 3 Created RC=0 ID=90004
[ PASS] 01.007 timer-add-api-test.c:113 - Timer 0 programmed RC=0
[ PASS] 01.008 timer-add-api-test.c:113 - Timer 1 programmed RC=0
[ PASS] 01.009 timer-add-api-test.c:113 - Timer 2 programmed RC=0
[ PASS] 01.010 timer-add-api-test.c:113 - Timer 3 programmed RC=0
[ INFO] timer-add-api-test.c:119:Starting Delay loop.

[ PASS] 01.011 timer-add-api-test.c:140 - Timer 0 delete RC=0. Count total = 53
[ PASS] 01.012 timer-add-api-test.c:140 - Timer 1 delete RC=0. Count total = 61
[ PASS] 01.013 timer-add-api-test.c:140 - Timer 2 delete RC=0. Count total = 29
[ PASS] 01.014 timer-add-api-test.c:140 - Timer 3 delete RC=0. Count total = 37
[ PASS] 01.015 timer-add-api-test.c:157 - Expected ticks = 61
[ FAIL] 01.016 timer-add-api-test.c:163 - Timer 0 count >= 58
[ PASS] 01.017 timer-add-api-test.c:164 - Timer 0 count <= 64
[ PASS] 01.018 timer-add-api-test.c:157 - Expected ticks = 71
[ FAIL] 01.019 timer-add-api-test.c:163 - Timer 1 count >= 68
[ PASS] 01.020 timer-add-api-test.c:164 - Timer 1 count <= 74
[ PASS] 01.021 timer-add-api-test.c:157 - Expected ticks = 34
[ FAIL] 01.022 timer-add-api-test.c:163 - Timer 2 count >= 31
[ PASS] 01.023 timer-add-api-test.c:164 - Timer 2 count <= 37
[ PASS] 01.024 timer-add-api-test.c:157 - Expected ticks = 44
[ FAIL] 01.025 timer-add-api-test.c:163 - Timer 3 count >= 41
[ PASS] 01.026 timer-add-api-test.c:164 - Timer 3 count <= 47
[ PASS] 01.027 timer-add-api-test.c:170 - OS_TimerAdd() (0) == OS_SUCCESS
[ PASS] 01.028 timer-add-api-test.c:175 - OS_TimerAdd() (-2) == OS_INVALID_POINTER
[ PASS] 01.029 timer-add-api-test.c:179 - OS_TimerAdd() (-16) == OS_ERR_INVALID_ID
[ PASS] 01.030 timer-add-api-test.c:183 - OS_TimerAdd() (-2) == OS_INVALID_POINTER
[ PASS] 01.031 timer-add-api-test.c:187 - OS_TimerAdd() (-15) == OS_ERR_NAME_TAKEN
[ PASS] 01.032 timer-add-api-test.c:191 - OS_TimerAdd() (-2) == OS_INVALID_POINTER
[  END] 01 TestTimerAddApi      TOTAL::32    PASS::28    FAIL::4     MIR::0     TSF::0     TTF::0     N/A::0   

COMPLETE: 1 tests Segment(s) executed

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Alex Campbell GSFC",unit-test,https://github.com/nasa/osal/issues/942
"Fix #871, allow OSAL re-initialization","**Describe the contribution**
Replaces the separate ""Initialized"" and ""Shutdown"" flags with a single state flag.  This simplifies things and makes for a single source of truth for the state of OSAL globally.

Note this is not strictly necessary, but it will likely be required if the intent is to be able to run tests (and OS_API_Init()) multiple times without a reboot in the middle to reset the state.

Fixes #871 
Fixes #691 

**Testing performed**
Build and sanity check CFE
Run all unit tests

**Expected behavior changes**
- Multiple invocations of `OS_API_Init()` are allowed - subsequent calls can be ignored
- Deleting of any internal objects that did get created if `OS_API_Init()` fails (this leaves system in same state as when it started)
- Allows Re-initialization of OSAL after `OS_ApplicationShutdown()` - may be relevant when running unit tests several times without rebooting.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/941
"Fix #939, rework shell test","**Describe the contribution**
The shell may add extra output beyond the intended content, but the shell-test was only looking for exact match.  Extra output may include whitespace and/or an echo of the command itself.

This reworks the shell test to allow for this extra output, as long as the intended string appears in the content of the file it will
pass.

Fixes #939

**Testing performed**
Build and run the shell test
Note this requires modifying the osal config to enable shell, otherwise test is skipped.

**Expected behavior changes**
Test passes.

**System(s) tested on**
Ubuntu 20.04 (native, posix)
MCP750 vworks6.9

**Additional context**
Not clear how this test ever worked... maybe different versions of VxWorks work differently here.  But this approach should (hopefully) be a little more agnostic to the platform-specific shell behavior.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/940
shell-test does not appear to work on VxWorks,"**Describe the bug**
The ""shell-test"" program attempts to run the following command:

    echo -n ""ValueToEchoInTheFile""

But this does not appear to work correctly on VxWorks 6.9.  The test reports:

```
[ FAIL] 01.005 shell-test.c:83 - Read: 
echo -n ""ValueToEch, Written: ValueToEchoInTheFile
```

**To Reproduce**
Enable shell and run ""shell-test"" on MCP750

**Expected behavior**
Test should pass

**System observed on:**
MCP750 VxWorks 6.9

**Additional context**
I'm not familiar enough with VxWorks, it seems the interactive shell does not even have an ""echo"" command so I am not sure how this is expected to work to begin with.

If run directly on the shell as a test, I get:
```
-> echo -n ""ValueToEchoInTheFile""
C interp: unknown symbol name 'echo'.
```

So it is not clear to me how this is expected to work.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test",https://github.com/nasa/osal/issues/939
"Fix #887, specify shell name in ShellOutputToFile","**Describe the contribution**
Rather than using a default name, use a specific name so that it can be polled more safely.

Fixes #887

**Testing performed**
Build and run coverage tests
Also enable shell and run ""shell-test"" on MCP750

**Expected behavior changes**
No longer using a string pointer which may be invalid.

**System(s) tested on**
MCP750, vxworks 6.9

**Additional context**
Although this while loop seems to be working OK, the overall ""shell-test"" actually fails on the MCP750 because it looks like the shell does not have an ""echo"" function.  This seems to be a separate issue, not sure if/how this test ever worked.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/938
"Fix #844, switch to use CLOCK_REALTIME","**Describe the contribution**
The portable clock_gettime implementation had been using CLOCK_MONOTONIC to support its use as a PSP timebase for some platforms that used it this way.  However with updates on the PSP side this is not required anymore.

Preference should be to use CLOCK_REALTIME as it better aligns with the described semantics of the OSAL clock function, and makes for a better default.  This can still be easily changed back if the user desires.

Fixes #844

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
OS_GetLocalTime() and OS_SetLocalTime() will work as described.  

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This depends on _not_ using the OSAL clock as a monotonic timebase.  nasa/psp#285 is required to fix this.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/937
Add option to build osal with coverage flags so functional test coverage can be reported,"**Is your feature request related to a problem? Please describe.**
Ideally functional tests should strive for full coverage, with the exception being impossible paths based on the inability to force return codes or other lower level behaviors that can't be triggered when using the ""full stack"".  Additional ""coverage"" testing (utilizing stubs) is really only necessary to cover this final % where calls need to be stubbed out to force alternate paths.

Coverage report on functional tests helps for reporting test traceability (coverage tests don't count for API verification), and to easily identify missing functional tests or test cases.  It's better to strive for coverage w/ functional tests first (higher value tests, checking for correct full-stack behavior), then fill in the gaps with targeted coverage tests.

**Describe the solution you'd like**
Add the option to include coverage reporting on OSAL.  Currently thinking this could be independent from ENABLE_UNIT_TESTS, since it may be useful to build or not build with these flags for higher level analysis (easily show what parts of OSAL are exercised by cFE tests, etc).

**Describe alternatives you've considered**
Debated adding a coverage (osal-coverage) target along side the non-coverage target (osal), but who wants twice the compile time?  Easy enough to build one or the other depending on need.  Could just add the (osal-coverage) target when unit tests are enabled and always use it with the functional tests... debatable.  Different targets could avoid accidentally linking a coverage-enabled osal.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/osal/issues/936
"Fix #934, Remove unused SCRIPT_MODE flag","**Describe the contribution**
Fix #934, Removes the flag defined in tests/CMakeLists.txt that isn't used anywhere

**Testing performed**
Build/run unit tests, passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/935
Remove unused SCRIPT_MODE definition,"**Is your feature request related to a problem? Please describe.**
The following define no longer does anything:
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/tests/CMakeLists.txt#L11-L13

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
Likely OBE from transition to the osal/ut_assert

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/osal/issues/934
Improve compliance with public coding standards (and document non-compliance),"**Is your feature request related to a problem? Please describe.**
cFS Core has been developed and maintained utilizing internal coding standards, which isn't much help to the wider community when the question of coding standards come up.  Lacking documented compliance and there's a few easy fixes that could be implemented to improve compliance.

**Describe the solution you'd like**
Could document compliance against public standards (JPL/power of 10/etc).

Some easy updates where we could improve compliance:
 - () around **all** macros: currently not on constants 
 - () for precedence: currently rely on precedence rules in many cases
 - a handful of elements could be file static
 - a handful of elements could be local static
 - side effects in expressions: there's a handful that could be expanded

Warnings we monitor and minimize occurrences:
 - Conditional compilation: still have cases to support alternate configurations
 - Recursion: avoided in general, carefully analyzed (current identified cases are 1 level of recursion in debug support and one other that is protected from occurring)
 - Pointer type inside typedef: in general minimized (function pointers, etc)
 - Complex macros: minimized (although utilized in debugging/testing)
 - Definitely use function pointers (callbacks, etc), but to satisfy requirements

Areas we don't comply and debatable value:
 - unchecked parameter dereferences in helper functions and ""false alarms"" based on status return checks (we check status return and skip logic, but don't explicitly check a provided pointer isn't NULL)
 - function too long: could be a topic of future refactor but heritage/working code should trade value vs risk
 - not enough assertions: style difference
 - Basic Numerical Types Used: we use fixed width types where appropriate, but don't strictly disallow basic types where they make sense

Other non-compliances identified are analyzed and dispositioned (internally), examples:
 - Cast Alters Value: all over in print statements to print hex (unsigned) status (signed) values
 - Many false alarms for various rules (all confirmed false)
 - Redundant conditions, unreachable code, useless assignments to support configurability (wouldn't be if configuration changes)

**Describe alternatives you've considered**
None

**Additional context**
Note - marking for discussion to trigger input.  Nothing ""breaking"" or ""critical"" identified.

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping @dmknutsen 
",enhancement,https://github.com/nasa/osal/issues/933
Non-distinct identifiers,"**Is your feature request related to a problem? Please describe.**
VxWorks defines `time` in time.h
Conflicts with:
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/os/portable/os-impl-posix-gettime.c#L70
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/os/portable/os-impl-posix-gettime.c#L100

VxWorks defines `access` in unistd.h
Conflicts with:
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/os/portable/os-impl-posix-files.c#L70
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/os/portable/os-impl-posix-files.c#L226
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/os/portable/os-impl-posix-dirs.c#L74

**Describe the solution you'd like**
Deconflict

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, vxworks",https://github.com/nasa/osal/issues/932
"Fix #916, scrub include guards","**Describe the contribution**
Apply script to scrub all header file block comments and include guards on OSAL.

Fixes #916

**Testing performed**
Build and sanity check, run all unit tests

**Expected behavior changes**
None, comment and ifdef consistency fixups only

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/931
"Fix #929, use test function for osal_id_t","**Describe the contribution**
Do not initialize or compare osal_id_t directly to integers, use the provided comparison function.

Fixes #929

**Testing performed**
Build and run unit tests

**Expected behavior changes**
System builds and runs again when using a type-safe/non-integer osal_id_t type.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/930
file api unit test uses osal_id_t as integer,"**Describe the bug**
The type `osal_id_t` should not be used as an integer, and normal integer operations or comparisons should not be used with this type.  However it looks like a couple cases in file API test were recently added which are comparing this to a `uint32` type directly.

**To Reproduce**
Build OSAL with a type-safe osal_id_t, fails to build in `file_api_test.c`

**Expected behavior**
Build should succeed.

**Code snips**
Comparisons to uint32:
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/tests/file-api-test/file-api-test.c#L179
https://github.com/nasa/osal/blob/53f7f6167052a94de4d2de96c62dd71a63601654/src/tests/file-api-test/file-api-test.c#L241

**System observed on:**
Ubuntu 20.04

**Additional context**
Should use `!OS_ObjectIdDefined()` inline function to test.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/929
Make OS_strnlen public,"**Is your feature request related to a problem? Please describe.**
The OS_strnlen() wrapper could be useful for apps, because `strnlen` is not a standardized function, but many times this behavior is needed/desired when reading fixed size string buffers.

An inline function exists in OSAL to provide a substitute but it is currently in an internal header.

**Describe the solution you'd like**
Move the function to the public header so apps can also use it.

**Describe alternatives you've considered**
Leave as is

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/928
osal Integration candidate: 2021-03-30,"## Describe the contribution
Fix #843, remove BIG/LITTLE bit order macros 
Fix #846, Minor clean up and clarification in comments/naming
Fix #831, Finish os-impl-bsd-socket.c coverage testing 
Fix #888, better return codes from OS_SymbolTableDump_Impl
Fix #853, remove OS_TaskRegister
Fix #934, Remove unused SCRIPT_MODE flag
Fix #929, use test function for osal_id_t 


## Testing performed
osal checks <https://github.com/nasa/osal/pull/927/checks>
bundle checks <https://github.com/nasa/cFS/pull/227/checks>

## Expected behavior changes

### PR #878

Removes `SOFTWARE_BIG_BIT_ORDER` and `SOFTWARE_LITTLE_BIT_ORDER` macros from `common_types.h`. These are not needed by OSAL and cannot handle all cases.  Application code with endianness dependency that was relying on these symbols may break. Users should leverage code in cFE: `cfe_endian.h`. See <https://github.com/nasa/cFE/pull/1218> for more details.

### PR #918

Applies minor code and documentation cleanup: white space, typos, etc.

### PR #923 

Adds test to get full coverage of vxworks in `os-impl-bsd-socket.c` resulting in full line coverage for OSAL

### PR #915 

Adds more descriptive return codes if `OS_SymbolTableDump_Impl` does not do what is expected. Adds a new error `OS_ERR_OUTPUT_TOO_LARGE` if the size limit was insufficient. Return `OS_ERROR` if an empty file was written - this likely indicates some fundamental issue with the VxWorks symbol table. Returns `OS_ERR_NAME_TOO_LONG` if one of the symbol names was too long. Improves unit test to check for/verify these responses.

### PR #926
Removes the unneeded `OS_TaskRegister()` and all references to it in code, tests, and documentation. No impact to behavior, but does affect API and has depenedencies


### PR #935

Removes unused `-SCRIPT_MODE` flag in cmake

### PR #930 
Remove comparison between `osal_id_t` and `integers` to use the provided comparison function, `OS_ObjectIdDefined()`. System builds and runs again when using a type-safe/non-integer osal_id_t type.


## Additional context
Part of nasa/cfs#227

## Authors

@skliper 
@jphickey 

",,https://github.com/nasa/osal/pull/927
"Fix #853, remove OS_TaskRegister","**Describe the contribution**
The `OS_TaskRegister()` function is no longer needed and has been a no-op since v5.0.0.

This removes the function and all references to it in code, tests, and documentation.

Fixes #853 

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
No impact to behavior, but does affect API and has depenedencies

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Function removal affects API - Needs to be merged with nasa/cfe#1250.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/926
HOTFIX: osal Integration candidate 2021-03-23,"**Describe the contribution**
Fix #863  

**Testing performed**
Bundle Tests <https://github.com/nasa/cFS/pull/225/checks> 
Osal Tests <https://github.com/nasa/osal/pull/925/checks>

**Expected behavior changes**
See #910 

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Missing part of IC:2021-03-23 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey ",,https://github.com/nasa/osal/pull/925
Trigger for static analysis 20210323,"**Describe the contribution**
CodeQL results not showing up on branch pushed to fork.  Test PR for static analysis

**Testing performed**
N/A

**Expected behavior changes**
N/A

**System(s) tested on**
CI

**Additional context**
For static analysis

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","invalid, CCB:Ignore",https://github.com/nasa/osal/pull/924
"Fix #831, Finish os-impl-bsd-socket.c coverage testing","**Describe the contribution**
Fix #831 - adds test to get full coverage of os-impl-bsd-socket.c

**Testing performed**
Built/run unit tests, pass

**Expected behavior changes**
Full line coverage of os-impl-bsd-socket.c for OSAL

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC

Ping @ejtimmon - example for stubs/hooks/etc",,https://github.com/nasa/osal/pull/923
"Fix #921, make non-selectable FD an error","**Describe the contribution**
Fix #921
Do not silently ignore a filehandle which was included in the `OS_FdSet` but the ""selectable"" flag is false.  Instead translate this to the `OS_ERR_OPERATION_NOT_SUPPORTED` error.

**Testing performed**
Run unit tests on native and RTEMS and make sure all passing

**Expected behavior changes**
Passing a filehandle into `OS_SelectMultiple()` (via the OS_FdSet) for which the RTOS does not implement select() should return the 
OS_ERR_OPERATION_NOT_SUPPORTED error (again)

**System(s) tested on**
Ubuntu 20.04 (native) and RTEMS 4.11.3 (cross)

**Additional context**
This is old behavior but was masked by the fact that OS_SelectMultiple_Impl() actually returned the same error - OS_ERR_OPERATION_NOT_SUPPORTED - for an _empty_ set as it did if one passed a non-empty set that had a non-selectable filehandle within it.  If the handles passed in did not support select() then the implementation treated it as an empty set.

A recent change modified that behavior and gave it a different code if the sets were truly empty vs. being not empty but having a bad FD inside it.

However the unit tests were relying specifically on the OS_ERR_OPERATION_NOT_SUPPORTED code being generated in order to skip the test cases on RTEMS.

This change basically restores the return code of OS_ERR_OPERATION_NOT_SUPPORTED but still keeping a unique code for if/when the sets are passed in completely empty.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/922
RTEMS silently discards non-selectable file handles in OS_SelectMultiple(),"**Describe the bug**
The conversion from the `OS_FdSet` to the internal `fd_set` inside OS_FdSet_ConvertIn_Impl() will ignore filehandles for which the `selectable` flag is not set.  The select() is then called _without_ this file included in the set, and the result is returned.

This is misleading because the user is not aware that the implementation ignored one (or more) if the filehandles in the set.    If the user requested it by including in the set, it should return an error to the caller, not silently ignore.

**To Reproduce**
Now exposed by unit tests in the current IC (this makes the function no longer return OS_ERR_OPERATION_NOT_SUPPORTED and the test that should be skipped is not actually skipped because of this).

**Expected behavior**
Return an error instead of silently ignoring the handle for which select() cannot be done.

**System observed on:**
RTEMS 4.11.3

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/921
"Fix #919, check index inside fdset conversions","**Describe the contribution**
Add an extra limit check for the index, as it is possible due to padding that this goes beyond the end of the array.

Fixes #919 

**Testing performed**
Validate all coverage tests now pass

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Should fix the issue seen in integration candidate #917 

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/920
fd_set coversions in select impl can read beyond the end of OS_impl_filehandle_table,"**Describe the bug**
The loop inside OS_FdSet_ConvertIn_Impl and OS_FdSet_ConvertOut_Impl is limited by `sizeof(OS_FdSet)`, which itself is sized to accommodate OS_MAX_NUM_OPEN_FILES as a bit mask.

The problem is that the size is (necessarily) padded up to a multiple of 8 bits.  If OS_MAX_NUM_OPEN_FILES was not a multiple of 8, and some of these ""padding"" bits are set as 1, these functions will attempt to read entries beyond the end of `OS_impl_filehandle_table`.

**To Reproduce**
In normal use cases where the correct API is used (e.g. `OS_SelectFdAdd()`) it is not possible to set these extra bits - as the OS_SelectFdAdd() checks if the filehandle is valid before setting the bit.

But in coverage tests, the structure is `memset()` to all ones (0xFF) which causes undefined behavior as it will end up reading beyond the end of the array.

**Expected behavior**
Must not read beyond the end of the array even if extra bits are set.

**System observed on:**
Ubuntu 20.04

**Additional context**
Observed as failure in https://github.com/nasa/osal/pull/917.  This issue was not introduced by those merges, it just so happens that it changed the preconditions such this became exposed.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.",bug,https://github.com/nasa/osal/issues/919
"Fix #846, Minor clean up and clarification in comments/naming","**Describe the contribution**
Fix #846, Minor cleanup detailed in #846 identified during code review

**Testing performed**
Build/run unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/918
osal Integration Candidate: 2021-03-23,"## Describe the contribution

Fix #875, move copyblock size to a #define and add comments
Fix #873, removed rogue while loop
Fix #868, scripted replacement for #include <os and #include <OSC_ matches of < and > with ""
Fix #859, consolidates the duplicated switch in OS_SocketOpen_Impl
Fix #854, Const correct input pointers 
Fix #851, removed network prototypes defined in osapi_sockets.h that are also in osapi_network.h
Fix #842, removes NULL redefine from common_types.h
Fix #911, Add Contributing Guide
Fix #752, Utilize UTASSERT_CASETYPE_NA to report OS_ERR_NOT_IMPLEMENTED
Fix #855,  Add assert for FD_SET_SIZE in relation to OSAL_set 
Fix #857, correct interval calculation in DoSelect
Fix #862, comments describing select after connect 
Fix #858, add check for EAGAIN in addition to EINTR 
Fix #861, compile time assert for sockaddr size 
Fix #416, add shell functional test
Fix #863, check/report fcntl status 
Fix #867, better error translation for ESPIPE errno 
Fix #869, rename OS_U32ValueWrapper_t 
Fix #876, break up logic in return statement
Fix #889, report timer_gettime error 
Fix #886, return moduleInfoGet error
Fix #883, remove unreachable test
Fix #882, make module comment same as other services 
Fix #919, check index inside fdset conversions 
Fix #921, make non-selectable FD an error 

## Tests 
osal Tests <https://github.com/nasa/osal/pull/917/checks>
cFS Bundle Tests <https://github.com/nasa/cFS/pull/223/checks>


## Expected behavior changes

### PR #890

Moves copyblock size to a macro and add comments. Defines `OS_CP_BLOCK_SIZE` and adds clear documentation that it could be adjusted for page size, performance, etc.

### PR #891 

Removes while loop

### PR #892 

Replaces all `#include`s of `<os` and `<OSC_` matches with `""` to match coding standard. 

### PR #893 

Consolidates the duplicated switch in `OS_SocketOpen_Impl`

### PR #894 
Describe the contribution
Add `const` to input pointers for `OS_FdSet_ConvertIn_Impl` and `OS_ObjectIdTransactionFinish`

### PR #895 

Removes network prototypes defined in `osapi_sockets.h` that are also in `osapi_network.h`

### PR #896 

Removes `NULL` redefine from `common_types.h`

### PR #912 

Adds `Contributing.md` that points to bundle-level contribution guide

### PR #914 
Reports test cases that ""fail"" as ""not implemented"" with new `UtAssert_NA` macro instead of `UtPrintf`

### PR #897 

Calls to `OS_SelectSingle` and `OS_SelectMultiple` will fail if an FD within the set is outside the range of the underlying `FD_SETSIZE` from the C library.

### PR #898 

Fixes calculation used for the relative time interval in the select() call. Also adds a UT case that specifically exercises the carryover described. Fixes delay when this carry condition is hit

### PR #909 

Documents algorithm that provides application-controlled timeout on the connection initiation. Also adds a debug statement if the connect fails for a reason other than `EINPROGRESS`. No impact to normal behavior.

### PR #902 

Adds check for `EAGAIN` if the system fails to allocate kernel-internal resources. 

### PR #908 

Adds a `CompileTimeAssert` to confirm that the size of the abstract buffer for socket addresses is large enough to store any of the enabled address types thereby removing the need for runtime tests.

With this change, if `OS_SOCKADDR_MAX_LEN`is not large enough for the address type, osal will fail to compile. This enforces that the abstract size is large enough for any/all enabled address types, regardless of what is actually used.

### PR #840 

Adds missing functional test for `OS_ShellOutputToFile`

### PR #910 

Add test for `fcntl()` error return of `-1` and report `errno`. If setting `O_NONBLOCK` fails, then debug message is printed and blocking mode is used and timeouts will not work as a result.

### PR #903 
Improves error codes when attempting to seek on a pipe/socket. Translates the `OS_ERR_OPERATION_NOT_SUPPORTED` error rather than ""not implemented"". The `ESPIPE` errno means that seeking is not supported on the given file handle. 

### PR #901 

Renames `OS_U32ValueWrapper_t` as `OS_VoidPtrValueWrapper_t` to better indicate its purpose. The point is to pass a value through a void*. Adds a compile-time assert to check that this is only used to directly pass values which have a size  of less than or equal to sizeof(void*).

### PR #900 

Refactors the return statement for `OS_FileSys_FindVirtMountPoint()` so it is easier to read and adds some informational comments.

### PR #907 

Reports an error if calling `timer_gettime` after `timer_settime` fails.

### PR #906 

Returns `OS_ERROR` status to caller after an error on `moduleInfoGet()`

### PR #899 

Removes an extraneous/unreachable `OS_ObjectIdDefined` check and its accompanying debug statement. The only way this check could have been reached would be if the normal unlock process was bypassed such that the underlying OS mutex was unlocked but OSAL state still had it owned by a task. This condition never happens at runtime.

### PR #905 

Updates documentation for `OS_MAX_MODULE`

### PR #920 

Adds an extra limit check for the while loop index in `OS_FdSet_ConvertIn_Impl`, as it is possible due to padding that this goes beyond the end of the array. If `OS_MAX_NUM_OPEN_FILES` was not a multiple of 8, and some of these ""padding"" bits are set as 1, these functions will attempt to read entries beyond the end of `OS_impl_filehandle_table`.

### PR #922 

Restores the return code of `OS_ERR_OPERATION_NOT_SUPPORTED` while keeping a unique code for if/when the sets are passed in completely empty. Passing a filehandle into `OS_SelectMultiple()` via the `OS_FdSet` for which the RTOS does not implement `select()` should return `OS_ERR_OPERATION_NOT_SUPPORTED`. 


## Additional context
Part of <https://github.com/nasa/cFS/pull/223>

## Authors

@zanzaben 
@jphickey 
@skliper 
@ArielSAdamsNASA ",,https://github.com/nasa/osal/pull/917
Comments on header guard endif don't match ifdef,"**Is your feature request related to a problem? Please describe.**
For example:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/common_types.h#L31-L32
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/common_types.h#L191

**Describe the solution you'd like**
Comments should be consistent w/ code

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/916
"Fix #888, better return codes from OS_SymbolTableDump_Impl","**Describe the contribution**
Improve the error codes from this function.

- Introduces a new error `OS_ERR_OUTPUT_TOO_LARGE` if the size limit was insufficient (instead of `OS_SUCCESS`).
- Return `OS_ERROR` if an empty file was written - this likely indicates some fundamental issue with the VxWorks symbol table.
- Return `OS_ERR_NAME_TOO_LONG` if one of the symbol names was too long, (instead of generic `OS_ERROR`).

Improve unit test to check for/verify these responses.

Fixes #888

**Testing performed**
Build and sanity check, run all unit tests, confirm coverage of new cases.

**Expected behavior changes**
Better/more descriptive return codes if OS_SymbolTableDump_Impl does not do what is expected.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/osal/pull/915
"Fix #752, Utilize UTASSERT_CASETYPE_NA to report OS_ERR_NOT_IMPLEMENTED","**Describe the contribution**
Fixes  #752
Create new macro UtAssert_NA to use instead of UtPrintf to report cases when not implemented

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This is a redo of #816 which was closed because it was going to be part of #787 but that won't be done in the near future so this task is back as its own pull request. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",,https://github.com/nasa/osal/pull/914
Move osal guide into this repository,"**Is your feature request related to a problem? Please describe.**
The osal guide currently ""lives"" inside the cFE repo in the [`cmake`](https://github.com/nasa/cFE/tree/main/cmake) directory. It would make more sense to keep the documentation files in the osal repository. 

**Describe the solution you'd like**
Move `.dox` and `doxyfile.in` files to this repository. Will need to add a script that builds those in a standalone fashion.

**Describe alternatives you've considered**
Keep as is. Move ALL docs to the bundle repository.

**Additional context**
None
","docs, build-system",https://github.com/nasa/osal/issues/913
"Fix #911, Add Contributing Guide","**Describe the contribution**
Fix #911 
Added a contributing guide that links to the main cFS contributing guide. 

**Expected behavior changes**
Users should be able to view the contributing guide contents easily from the OSAL repo. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal","docs, CCB:FastTrack",https://github.com/nasa/osal/pull/912
Add Contributing Guide,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the OSAL repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the cFS contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal
",docs,https://github.com/nasa/osal/issues/911
"Fix #863, check/report fcntl status","**Describe the contribution**
The fcntl() function is documented as returning -1 on error, so test for this condition and report errno if so.  There is no
recourse/handling - this just reports the error.

However - failure to set the O_NONBLOCK flag via this method will fall back to blocking mode being used (timeouts will not
work as a result).

Fixes #863

**Testing performed**
Build and sanity check, run unit tests, check coverage

**Expected behavior changes**
if setting O_NONBLOCK fails, then debug message is printed and blocking mode is used.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
No real recourse in code - this shouldn't fail, but if it does, errno is printed so user can diagnose why it failed.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/910
"Fix #862, comments describing select after connect","**Describe the contribution**
A select() is used after connect() to provide application-controlled timeout on the connection initiation.

This just adds some comments to describe why this is done.  It also adds a debug statement if the connect fails for a reason other than `EINPROGRESS`.

Fixes #862

**Testing performed**
Build and sanity test, run unit tests

**Expected behavior changes**
This does add one more OS_DEBUG statement for an unexpected error.  No impact to normal behavior.  

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/909
"Fix #861, compile time assert for sockaddr size","**Describe the contribution**
OSAL provides an abstract buffer for socket addresses, independent of the underlying implementation.  The size of this buffer is
configurable by the user via compile-time options.

This adds a CompileTimeAssert to confirm that the size of this abstract buffer is large enough to store any of the enabled
address types. This also removes the need for runtime tests.

Fixes #861

**Testing performed**
Build and sanity test, run unit tests

**Expected behavior changes**
This change means that the `OS_SOCKADDR_MAX_LEN`  __must__ be configured large enough for all enabled address types.  For instance, ipv6 addresses are likely to be larger than ipv4 addresses in the implementation.  It is therefore possible to se OS_SOCKADDR_MAX_LEN large enough for ipv4 but not large enough for ipv6.

A configuration such as this used to work if the runtime code only used ipv4 addresses.  If runtime code used ipv6 address, it would fail at runtime.  With this change, a configuration such as this will fail to compile, and enforce that the abstract size is large enough for any/all enabled address types, regardless of what is actually used.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/908
"Fix #889, report timer_gettime error","**Describe the contribution**
In VxWorks the impl calls timer_settime followed by timer_gettime on the same timer to check if rounding occurred.  If the second call fails this reports it as an error.

Note unless there is some sort of OS bug this should be impossible to happen as this code only runs after a successful timer_settime.

Fixes #889

**Testing performed**
Build and sanity check, run unit tests

**Expected behavior changes**
A failure to call timer_gettime after timer_settime is reported as an error.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/907
"Fix #886, return moduleInfoGet error","**Describe the contribution**
Propagate a VxWorks error on moduleInfoGet() call into OS_ERROR return.

Fixes #886

**Testing performed**
Build and sanity check, run unit tests

**Expected behavior changes**
Error on moduleInfoGet() gets returned to caller as OS_ERROR status.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/906
"Fix #882, make module comment same as other services","**Describe the contribution**
In the current implementation, the same patterns apply to modules as the rest of the OSAL services.  

Fixes #882

**Testing performed**
Build and run tests

**Expected behavior changes**
None - comment only

**System(s) tested on**
Ubuntu 20.04

**Additional context**
In a previous version there as a special case for 0 modules but this is no longer true, and the comment had become outdated.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/905
A bug in OS_TaskExit workwith vxworks,"very sorry to bother you
i work with vxwork6.7 
got an error when task exiting 
OS_Unlock_Global():730:ERROR: global 1 released by task 0xffffffff when owned by task <my_task_id>

when exiting a task , in OS_TaskExit
OS_ObjectIdFinalizeDelete(OS_SUCCESS, &token); will change final id to UNDEFINED

in OS_ObjectIdFinalizeDelete
OS_ObjectIdTransactionFinish change  task_record_active_id to final_id(i.e UNDEFINED)
and then OS_Unlock_Global(token->obj_type)

but when OS_lock_Global(token->obj_type) is called task id is true task id
OS_Unlock_Global(token->obj_type)  get taskid from task record active id (i.e UNDEFINED) So produce an error 

Maybe changing OS_ObjectIdFinalizeDelete(OS_SUCCESS, &token) to  OS_ObjectIdFinalizeDelete(OS_ERROR, &token) help?

very very appreciate your reply

 
",duplicate,https://github.com/nasa/osal/issues/904
"Fix #867, better error translation for ESPIPE errno","**Describe the contribution**
The ESPIPE errno means that seeking is not supported on the given file handle.  Translate to the `OS_ERR_OPERATION_NOT_SUPPORTED` error rather than not implemented as it better indicates the actual condition.

Fixes #867

**Testing performed**
Build and sanity check, run tests

**Expected behavior changes**
Better error code if attempting to seek on a pipe/socket

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/903
"Fix #858, add check for EAGAIN in addition to EINTR","**Describe the contribution**
This is documented as a possible errno from select on some systems, and the call should be repeated in that case.

Fixes #858 

**Testing performed**
Build and sanity check, run unit tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/osal/pull/902
"Fix #869, rename OS_U32ValueWrapper_t","**Describe the contribution**
The ""U32"" designation in the name had become confusing because all the members had over time migrated to a separate non-uint32/dedicated type.

The point is to pass a value through a void* so a name change better indicates that purpose.

Also adds a compile time assert to this intent - this wrapper may only be used to directly pass values which have a size less than or equal to `sizeof(void*)` -- if anything is bigger than this it will not work.

Fixes #869 

**Testing performed**
Build and run all tests, sanity check

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/901
"Fix #876, break up logic in return statement","**Describe the contribution**
The return statement from OS_FileSys_FindVirtMountPoint() was performing several match operations and was hard to understand.

This breaks up the statement so it is easier to read and adds some informational comments.

Fixes #876 

**Testing performed**
Build and run unit tests

**Expected behavior changes**
None - actual logic is the same.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/osal/pull/900
"Fix #883, remove unreachable test","**Describe the contribution**

The only way for this test happen would be if somehow the normal unlock process was bypassed, such that the underlying OS mutex was unlocked but OSAL state still had it owned by a task.  Removing as extraneous/unneeded.

Fixes #883 

**Testing performed**
Build and run CFE, run unit tests

**Expected behavior changes**
None.  This condition never happens at runtime, and only a debug statement if it did.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
As noted, it is not _entirely_ unreachable in all circumstances - if there was some sort of bug that cause the wrong mutex to get released and/or otherwise throw off OSAL state, this debug message would tell you that it happened.  But outside of a bug somewhere, this really should never happen....

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/899
"Fix #857, correct interval calculation in DoSelect","**Describe the contribution**
When calculating the relative time interval for the select() call, the increment should have been a decrement.

This also adds a UT case that specifically exercises the carryover described.

Fixes #857

**Testing performed**
Run test case specifically targeting this carry condition, confirm calculation result is correct now (400ms rather than 2.4s)

**Expected behavior changes**
No extra delay when this carry condition is hit

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This just fixes the current calculation - but a better fix would be to use the interval logic now in `osapi-clock.h` (this wasn't available when this code was initially implemented).  Should do a follow-on issue to look into this for next version.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/898
"Fix #855, check against FD_SETSIZE in bsd-select","**Describe the contribution**
The `select()` implementation utilizes its own set size limit that should be checked.

Fixes #855

**Testing performed**
Build and run all unit tests, confirm coverage of select is testing new branches/returns.

**Expected behavior changes**
Calls to OS_SelectSingle/OS_SelectMultiple will fail if an FD within the set is outside the range of the underlying `FD_SETSIZE` from the C library.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Unfortunately this is a limitation/problem of the `select()` API - valid file handles may be effectively un-selectable due simply to the fact that `FD_SETSIZE` may be lower than the maximum number of open file descriptors.

The only alternative is to use `poll()` instead which uses a different API that does not have this limitation, but has a different issue in that it requires an array of `struct pollfd` data structures to be allocated somehow.

However in practice it is very unlikely to hit the `FD_SETSIZE` limit because this is (probably) much higher than the `OS_MAX_NUM_OPEN_FILES` limit.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/897
"Fix #842, Remove NULL redefine","**Describe the contribution**
Fix #842 - removes NULL redefine from common_types.h

Note: identified in OSAL code review and as implemented it was **always** defining NULL

**Testing performed**
Build/run unit tests, passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/896
"Fix #851, Remove duplicate network prototypes","**Describe the contribution**
Fix #851 - removed network prototypes defined in `osapi_sockets.h` that are also in `osapi_network.h`

**Testing performed**
Build/execute unit tests, passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/895
"Fix #854, Const correct input pointers","**Describe the contribution**
Fix #854 - const input pointers for OS_FdSet_ConvertIn_Impl and OS_ObjectIdTransactionFinish

**Testing performed**
Build/execute unit tests, passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC, OSAL code review",CCB:FastTrack,https://github.com/nasa/osal/pull/894
"Fix #859, Consolidate duplicated switch in OS_SocketOpen_Impl","**Describe the contribution**
Fix #859 - consolidates the duplicated switch in OS_SocketOpen_Impl

**Testing performed**
Build/execute unit tests, passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/893
"Fix #868, Use quotes for local includes","**Describe the contribution**
Fix #868 - scripted replacement for `#include <os` and `#include <OSC_` matches of `<` and `>` with `""`

**Testing performed**
Build and execute unit tests

**Expected behavior changes**
None, just coding standard

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/892
"Fix #873, Remove rogue while loop in OS_DeleteAllObjects","**Describe the contribution**
Fix #873 - removed rogue while loop

**Testing performed**
Build/run unit tests, passed
CI

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/891
"Fix #875, Move copyblock size to define","**Describe the contribution**
Fix #875 - move copyblock size to a `#define` and add comments

**Testing performed**
Build and run unit tests, passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/890
Report timer_gettime error in OS_TimeBaseSet_Impl,"**Is your feature request related to a problem? Please describe.**
If timer_gettime fails the rounding error will not be reported, silently ignored:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-timebase.c#L566

**Describe the solution you'd like**
Report error, return failure

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/889
Report symEach errors in OS_SymbolTableDump_Impl,"**Is your feature request related to a problem? Please describe.**
Errors not reported:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-symtab.c#L262

**Describe the solution you'd like**
Check for non-NULL, report error (write to file?), return error.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/888
OS_ShellOutputToFile_Impl in VxWorks is not thread safe,"**Is your feature request related to a problem? Please describe.**
Filename is common:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-shell.c#L96

**Describe the solution you'd like**
At minimum document.  Consider refactor for shell safe implementation.  Although current cFS concept is to use a single app and even this should be avoided when possible (direct shell use is discouraged in production ops).

**Describe alternatives you've considered**
Deprecate/remove.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/887
Return error on moduleInfoGet error in VxWorks,"**Is your feature request related to a problem? Please describe.**
`OS_ModuleGetInfo_Impl` always returning success in VxWorks:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-loader.c#L175-L179

**Describe the solution you'd like**
Return error.  It's not like the other cases where other info isn't available and success makes sense.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/886
Remove MCP750 specific ATA device mapping,"**Is your feature request related to a problem? Please describe.**
This code is out of OSAL scope:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-filesys.c#L115-L128

**Describe the solution you'd like**
Move to PSP or similar.

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/885
Remove OS_BinSemFlush,"**Is your feature request related to a problem? Please describe.**
Leads to race conditions, shouldn't be used.  Also other flushes aren't implemented, so consistency.
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-binsem.c#L145

**Describe the solution you'd like**
Deprecate/remove

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/884
Remove impossible to reach (operationally) code,"**Is your feature request related to a problem? Please describe.**
OS_MutSemTake_Impl will block until this thread owns the mutex, check would require OS error:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-mutex.c#L214-L219

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/883
Inconsistent OS_MAX_MODULE limit/documentation,"**Is your feature request related to a problem? Please describe.**
Comments don't match check:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-module.c#L49-L58

**Describe the solution you'd like**
Fix implementation (if needed), fix comments (if needed)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/882
Avoid collisions in key value generation,"**Is your feature request related to a problem? Please describe.**
Could be collisions in key value:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-idmap.c#L742-L749

**Describe the solution you'd like**
Analyze and fix if needed.  Add comments if it would help, remove bug label if not a real issue.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code reivew
","wontfix, CFS-38",https://github.com/nasa/osal/issues/881
Fix constraints/bounds in OS_ObjectIdFindNextFree,"**Is your feature request related to a problem? Please describe.**
The local_id is constrained by serial, which is constrained by max_id. Then serial is further constrained by local_id. Seems circular:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-idmap.c#L661

Bounds check?
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-idmap.c#L666

**Describe the solution you'd like**
Scrub logic and fix if needed, and/or add comments if they would help.  If not in error remove bug label.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","invalid, CFS-38",https://github.com/nasa/osal/issues/880
Social media ,https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-file.c#L423,invalid,https://github.com/nasa/osal/issues/879
"Fix #843, remove BIG/LITTLE bit order macros","**Describe the contribution**
The ""common_types.h"" file will no longer provide these as they are not needed by OSAL and do not/cannot handle all cases.

Fixes #843

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
Application code with endianness dependency that was relying on these symbols may break (it should be fixed).

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Needs nasa/cfe#1218 in order to not break the CFE build.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:FastTrack,https://github.com/nasa/osal/pull/878
OS_FS_GetPhysDriveName should take a buffer size,"**Is your feature request related to a problem? Please describe.**
OS_FS_GetPhysDriveName assumes buffer size:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-filesys.c#L631-L632

**Describe the solution you'd like**
Update/replace with API that takes buffer size

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/877
Refactor excessive logic/side effects in return statement,"**Is your feature request related to a problem? Please describe.**
Excessive logic in OS_FileSys_FindVirtMountPoint return statement.  This isn't coding standard compliant and takes a while to sort out when first observed:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-filesys.c#L107-L108

**Describe the solution you'd like**
Refactor/comment to make more clear.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/876
#define or configurable copy block size,"**Is your feature request related to a problem? Please describe.**
Hard coded copy block size:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-file.c#L423

**Describe the solution you'd like**
Make a `#define` with clear documentation that it could be adjusted for page size or whatever, performance, etc.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/875
Replace questionable enum use,"**Is your feature request related to a problem? Please describe.**
Could conflict configurable OS_MAX_COUNT_SEMAPHORES and OS_OBJECT_TYPE_OS_COUNTSEM 
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-countsem.c#L55-L59

**Describe the solution you'd like**
Adjust implementation.

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/874
Remove rogue while loop,"**Is your feature request related to a problem? Please describe.**
Leftover while loop:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-common.c#L355-L356

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/873
Convert long switch's to static const array/jump tables/function pointer tables,"**Is your feature request related to a problem? Please describe.**
Don't really need a switch, could use a function pointer table, aka jump table (as long as you are OK using function pointers...):
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-common.c#L140
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-common.c#L281
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-common.c#L74

Could be static const array:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-idmap.c#L159
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-idmap.c#L199

**Describe the solution you'd like**
Convert to function pointer table

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review","enhancement, CFS-38",https://github.com/nasa/osal/issues/872
Return success on multiple OS_API_Init calls,"**Is your feature request related to a problem? Please describe.**
OS_API_Init writes error to the syslog and returns error if called multiple times.  Doesn't really cause any issues, could just write to the syslog and return success.
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-common.c#L115-L119

**Describe the solution you'd like**
Consider returning success

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/871
Improve performance of OS_DebugPrintf,"**Is your feature request related to a problem? Please describe.**
OS_DebugPrintf checks the level and doesn't do the work, but the caller still sets up the variable arguments. It's better to have a table of function pointers that change when the level changes to either the debug printf or a no-op.
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/inc/os-shared-globaldefs.h#L83-L87

**Describe the solution you'd like**
Table of function pointers

**Describe alternatives you've considered**
Leave as-is (future work), this is debug code which wouldn't typically be included in production

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/870
Update OS_U32ValueWrapper_t name and consider using uintptr_t,"**Is your feature request related to a problem? Please describe.**
Confusion in name where `U32` is used for a union that'll hold a `void *`.  Also recommendation to consider using `uintptr_t`

**Describe the solution you'd like**
Consider rename/`uintptr_t` use.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/869
"Scrub for include <> vs """" use (<> should be system only)","**Is your feature request related to a problem? Please describe.**
<> used on non-system header includes.  Example:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/inc/os-shared-dir.h#L32

**Describe the solution you'd like**
Full scrub/fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review","enhancement, CFS-38",https://github.com/nasa/osal/issues/868
Better error code for ESPIPE lseek failure (not OS_ERR_NOT_IMPLEMENTED),"**Is your feature request related to a problem? Please describe.**
OS_ERR_NOT_IMPLEMENTED error code used for ESPIPE lseek error:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-posix-io.c#L132-L141

**Describe the solution you'd like**
Replace error code with something more appropriate

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/867
Scrub use of () in return statements,"**Is your feature request related to a problem? Please describe.**
Inconsistent use of (), style.  Example below but should fix all.
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-no-symtab.c#L50-L60

**Describe the solution you'd like**
Fix.

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38, draco-rc4",https://github.com/nasa/osal/issues/866
Add generic circular buffer implementation,"**Is your feature request related to a problem? Please describe.**
Console circular buffer not unique, could utilize a generic implementation

**Describe the solution you'd like**
Implement generic circular buffer

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman NASA/GSFC, OSAL code review","enhancement, CFS-38",https://github.com/nasa/osal/issues/865
Remove addrlen switch duplication,"**Is your feature request related to a problem? Please describe.**
Switch to get addrlen repeated multiple times:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L188-L201
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L248-L262
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L484-L498
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L545-L561

**Describe the solution you'd like**
Calculate once and store or implement once and inline

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/864
Check fcntl return status or explicitly (void),"**Is your feature request related to a problem? Please describe.**
Return status not checked/reported
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L364

**Describe the solution you'd like**
Add check and debug error output or explicitly void.  Need to resolve w/ documentation research.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/863
Rationale for select right after connect (or remove),"**Is your feature request related to a problem? Please describe.**
Rationale for select() right after connect()? If the socket is selectable, then it wasn't made non-blocking. (see line 162) connect blocks until the connection is made or an error occurs.
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L283

**Describe the solution you'd like**
Justify (add comment) or remove.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/862
Use compile time assert on address length check in bind,"**Is your feature request related to a problem? Please describe.**
Known at compile time:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L203

**Describe the solution you'd like**
Use CompileTimeAssert

**Describe alternatives you've considered**
What if sizeof(struct sockaddr_in6) is > OS_SOCKADDR_MAX_LEN but only AF_INET is used?  Not really an error?  Maybe only really known if OS_NETWORK_SUPPORTS_IPV6 is not defined?

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/861
Move set of SO_REUSEADDR to bind/listen,"**Is your feature request related to a problem? Please describe.**
Opening every socket as SO_REUSEADDR isn't needed:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L151

**Describe the solution you'd like**
Move to more appropriate function

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review","enhancement, CFS-38",https://github.com/nasa/osal/issues/860
Consolidate switch logic in OS_SocketOpen_Impl,"**Is your feature request related to a problem? Please describe.**
Duplicate switch cases that could be consolidated:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L102-L113
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-sockets.c#L129-L138

**Describe the solution you'd like**
Consolidate

**Describe alternatives you've considered**
Was separate if future domains were added... but is currently awkward looking.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
",enhancement,https://github.com/nasa/osal/issues/859
Add check for EAGAIN in OS_DoSelect loop,"**Is your feature request related to a problem? Please describe.**
On some other UNIX systems, select() can fail with the error EAGAIN if the system fails to allocate kernel-internal resources,
rather than ENOMEM as Linux does. POSIX specifies this error for poll(2), but not for select(). Portable programs may wish to
check for EAGAIN and loop, just as with EINTR.

https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L222

**Describe the solution you'd like**
Add check for EAGAIN

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review","enhancement, CFS-38",https://github.com/nasa/osal/issues/858
Fix math in OS_DoSelect,"**Is your feature request related to a problem? Please describe.**
 imagine simplified example with decimal value: now = 0.8, and end == 1.2. that means we should sleep for 0.4 seconds. using the above logic, we get:

tv.tv_sec = 1
tv.tv_usec = -6

so, tv.tv_usec < 0:

tv.tv_usec now becomes 4 (correct!)
tv.tv_sec now becomes 2 (huh?)

so now we wait 2.4 seconds instead of 0.4

Maybe we need a --tv.tv_sec?

**Describe the solution you'd like**
Confirm/fix if needed. Remove bug if not real.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","bug, CFS-38",https://github.com/nasa/osal/issues/857
Use pselect in OS_DoSelect to avoid needed conversions,"**Is your feature request related to a problem? Please describe.**
Could avoid timespec to timeval conversion:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L204-L206
if pselect was used here:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L221

**Describe the solution you'd like**
Use pselect, need to check VxWorks/RTEMS support

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/856
Add assert for FD_SET_SIZE in relation to OSAL_set,"**Is your feature request related to a problem? Please describe.**
FD_SET has limits:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L97

**Describe the solution you'd like**
Should respect the FD_SET_SIZE limit (prefer compile time error)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/855
Const correctness on input parameters,"**Is your feature request related to a problem? Please describe.**
Missing const for a few parameters.

OSAL_set:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L75

final_id (need to confirm):
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-idmap.c#L1106

**Describe the solution you'd like**
Add const

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/854
Either deprecated or require OS_TaskRegister,"**Is your feature request related to a problem? Please describe.**
OS_TaskRegister has comments that it is obsolete, but never got officially deprecated.

**Describe the solution you'd like**
Need to either officially deprecate or officially support.

**Describe alternatives you've considered**
None

**Additional context**
Impacts apps, better now in a major release than later for removal.

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review","enhancement, CFS-38",https://github.com/nasa/osal/issues/853
Deprecate OS_NetworkGetId and OS_NetworkGetHostName,"**Is your feature request related to a problem? Please describe.**
OS_NetworkGetId and OS_NetworkGetHostName are not really all that useful in an OS agnostic sense.

**Describe the solution you'd like**
Deprecate/remove

**Describe alternatives you've considered**
Leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/852
Remove duplicate prototype definition,"**Is your feature request related to a problem? Please describe.**
Duplicated prototypes for OS_NetworkGetId and OS_NetworkGetHostName:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-sockets.h#L385
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-sockets.h#L399
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-network.h#L53
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-network.h#L67

**Describe the solution you'd like**
Remove from osapi-sockets.h

**Describe alternatives you've considered**
Deprecate/remove (see issue #852)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/851
Wider adoption of 64 bit interval (generic timekeeping) pattern,"**Is your feature request related to a problem? Please describe.**
Some API's and implementations still use msec:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-select.h#L89
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/inc/os-shared-select.h#L54
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/inc/os-shared-select.h#L79

Consider refactor of timebase init with same pattern:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-timebase.c#L295

**Describe the solution you'd like**
Consider wider adoption of the generic 64 bit interval pattern

**Describe alternatives you've considered**
Leave as-is (future work).

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/850
Implement OS_printf/console at shared OSAL level,"**Is your feature request related to a problem? Please describe.**
Entire OS_printf/OSAL console implementation could be handled at the OSAL level and not via implementation. Every OS needs a thread, a circular buffer, and a semaphore to wake that thread and write to console. All we really need is for that thread to call printf(). There's a vxWorks specific impl and there's a POSIX impl, etc. It seems it could be OSAL only using all OSAL primitives and standard C.

**Describe the solution you'd like**
Use OSAL primitives at shared level

**Describe alternatives you've considered**
Leave as-is (future work)>

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/849
OS_MutSemGive - add unique error code for attempted release by non-owning thread,"**Is your feature request related to a problem? Please describe.**
Attempt to release by non-owning thread is a useful error to identify uniquely (and it's already checked):
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-mutex.h#L73-L78
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-mutex.c#L173-L177

**Describe the solution you'd like**
Add unique error code

**Describe alternatives you've considered**
Currently allowing the OS to decide if it's an error or not, could leave as-is (future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/848
Move OS_mount and similar platform specific (or even pre-load of cFS actions) outside OSAL,"**Is your feature request related to a problem? Please describe.**
OS_mount is more in-line with PSP concept.  Occasionally done by OS before even loading cFS.

**Describe the solution you'd like**
Consider moving/removing from OSAL

**Describe alternatives you've considered**
Leave as-is, not critical (consider for future work)

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/847
"Typo, copy/paste, comment clean-up","**Is your feature request related to a problem? Please describe.**
General issue to capture typo, copy/paste cleanup from OSAL code review.

Extra space:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-dir.h#L124

Add comment to justify numbers: common pattern to represent 8 obtjects in a byte (single bit)
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-select.h#L41

Clarify in comments if OS_TaskDelay is a ""busy"" wait or scheduled (sleep):
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-task.h#L142-L154

Document Input parameter as actually in/out:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L112-L123

Make capitalization consistent output -> Output:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L123

Clarify comment - Explicitly zero for consistency in operations and to avoid confusion:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-bsd-select.c#L182

Clarify comment - Test for existence and is a directory
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/portable/os-impl-posix-dirs.c#L85-L89

Duplicate function comments:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-common.c#L258-L274

check_mode -> lock_mode:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-idmap.c#L1073-L1076

Comment cleanup, vsnprintf also does the format, `Call vsnprintf to format and determine the actual size of the string to write`:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-printf.c#L284-L289

data_size -> max_size:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-queue.c#L90

Clarify constants in comments:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-select.c#L144
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-select.c#L169
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/shared/src/osapi-select.c#L197

Justify constant return - `Return OK since called from taskSpawn (where it's not easily accessible), error is reported in debug message`:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-console.c#L122

Clarify - `locally scoped statically allocated buffer`:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-tasks.c#L169

Justify constants (+500/1000) rounds:
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/vxworks/src/os-impl-timebase.c#L325

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
No impacts

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/846
Remove OS_DIRENTRY_NAME macro,"**Is your feature request related to a problem? Please describe.**
os_dirent_t is exposed, don't really need a macro to get to the element
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/osapi-dir.h#L37-L38

**Describe the solution you'd like**
Remove references, deprecate, remove.

**Describe alternatives you've considered**
Leave it, provides a layer of abstraction if names change.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review","enhancement, CFS-38",https://github.com/nasa/osal/issues/845
Clarify OS_GetLocalTime/OS_SetLocalTime use in relation to OSAL_GETTIME_SOURCE_CLOCK,"**Is your feature request related to a problem? Please describe.**
Not really clear/consistent on OS_SetLocalTime and OS_GetLocalTime in relation to OSAL_GETTIME_SOURCE_CLOCK.  Currently defaulted to CLOCK_MONOTONIC, so a OS_SetLocalTime may fail.  Really need to clarify intent of the design/APIs to be more clear on how they should be used since the OSAL_GETTIME_SOURCE_CLOCK is used in both and the setting has different impacts in the different contexts.

**Describe the solution you'd like**
May benefit from individual configuration parameters, or maybe OS_SetLocalTime should never be CLOCK_MONOTONIC.  Add a bit more context to API/configuration documentation.  Use cases?

**Describe alternatives you've considered**
Anything to clarify/explain intent.

**Additional context**
Debated ""bug"", could switch.

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/844
Clean up endian temporary compatibility macro,"**Is your feature request related to a problem? Please describe.**
Missing an else (likely error) case (or !defined(__BYTE_ORDER))
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/common_types.h#L145-L171

It's also a misnomer (BYTE not BIT), and one of many various patterns (see nasa/cFE#1209)

**Describe the solution you'd like**
At minimum add the error case, ideally clean/remove/consolidate.

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFE#1209

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review","enhancement, CFS-38",https://github.com/nasa/osal/issues/843
Remove redefine of NULL,"**Is your feature request related to a problem? Please describe.**
The following code will **always** redefine/define NULL which wasn't the intent
https://github.com/nasa/osal/blob/ead5723f59ee49b36a36d6cb66c4cfe680ebbd68/src/os/inc/common_types.h#L128-L130

**Describe the solution you'd like**
Remove, NULL is standard C

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review
","enhancement, CFS-38",https://github.com/nasa/osal/issues/842
Benchmark replacing strncpy use with local/safe version(s),"**Is your feature request related to a problem? Please describe.**
strncpy null **fills** when not always needed, and doesn't guarantee NULL termination.

**Describe the solution you'd like**
Benchmark current implementation against local inline implementation(s) that always NULL terminates, consider option to null fill or not, etc.  strlcpy flavor with a fill option?  May differ per compiler/platform/etc.

**Describe alternatives you've considered**
Leave as-is.

**Additional context**
Might be a good new user/intern project - @ejtimmon 

**Requester Info**
Jacob Hageman - NASA/GSFC, OSAL code review","enhancement, CFS-38",https://github.com/nasa/osal/issues/841
"Fix #416, add shell functional test","**Describe the contribution**
Fixes #416
Adds functional test for shell commands

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",dependency,https://github.com/nasa/osal/pull/840
Fix #832 Override default stub logic,"**Describe the contribution**
This is a new set hook function that allows a test designer to bypass the remaining default stub implementation after the hook is called.  Test designers can do this as needed, but current tests will be unaffected because it must be set in a test to be used.  Current tests will never set the override and their expectations of the stub code running after the hook are still valid.  Stubs will need updated to make the check for the override, but that is all that will need to change in them.

**Testing performed**
I have written 7 unit type tests to show that the behavior without the override set continues to be the same.  Each of these tests is doubled with a control test, for a total of 14 tests.  The tests are run with no changes, with cFS commit 5ca472a and using my working version of cfs_cf (unit-test-cf-3.0), this shows that the results of each pair of tests are the same; which is the expectation as they are duplicates.  The repo for cfs_cf is given the new UT_SetHookOverrideStubFunction instead of UT_SetHookFunction in 7 of the tests with each duplicate test left untouched as the control test.  A build is attempted showing that the function does not exist.  The repo, osal, is updated with the changes implementing the override and the repo, cfe, gets a two stubs updated to allow the bypass (CFE_MSG_GetSize, CFE_MSG_GetMsgId).  After a successful full rebuild, the 14 tests are run again.  The results confirm the changes have provided the desired behavior.  While the control tests all still receive the same results as the no updates test run, all of the override tests have their expected changes.  

Details of the specific tests:

1 Test_GetSize_Returns_1 & Test_GetSize_Returns_1_Control
- Initial testing: both receive TSF - as expected, forced return value >= 0, no data buffer set
- Override Control: receives TSF - as expected, forced return value >= 0, no data buffer set
- Override Updated: No TSF, No extra pass == No stub code after hook - as expected Override enabled, no data buffer set

2 Test_GetSize_wUTSDB_Returns_1 & Test_GetSize_wUTSDB_Returns_1_Control
- Initial testing: both receive extra PASS - as expected, forced return value >= 0, yes data buffer set
- Override Control: receive extra PASS - as expected, forced return value >= 0, yes data buffer set
- Override Updated: No TSF, No extra pass == No stub code after hook - as expected Override enabled, yes data buffer set

3 Test_GetSize_Returns_0  & Test_GetSize_Returns_0_Control
- For brevity, these results are the same as 1, I used 1, 0, -1 in my tests because it is the cross over point, >= 0

4 Test_GetSize_wUTSDB_Returns_0 & Test_GetSize_wUTSDB_Returns_0_Control
- Same as 2

5 Test_GetSize_Returns_neg1 & Test_GetSize_Returns_neg1_Control
6 Test_GetSize_wUTSDB_Returns_neg1 & Test_GetSize_wUTSDB_Returns_neg1_Control
- all grouped together because all are same, no TSF, no extra PASS, forced return < 0, code does not run anyway

7 Test_GetSize_OtherKey &Test_GetSize_OtherKey_Control
- Initial testing: both receive 3 TSF - as expected, forced return value >= 0, 2 to CFE_MSG_GetSize, 1 to CFE_MSG_GetMsgId
- Override Control: same as Initial testing - as expected
- Override Updated: 1 TSF, no extra PASS - as expected, both CFE_MSG_GetSize overridden, but CFE_MSG_GetMsgId is not
[OverrideExperiment.txt](https://github.com/nasa/osal/files/6094000/OverrideExperiment.txt)
[do-no-harm.txt](https://github.com/nasa/osal/files/6094012/do-no-harm.txt)

**Expected behavior changes**
Test designers will have the option to use UT_SetHookOverrideStubFunction instead of UT_SetHookFunction.
When this is selected any stub behavior that appears after the hook function is called can be bypassed; as long as the stub checks for the override and allows it.
No other behavior will be changed, as it was a requirement that the change have no impact to current operations.

**System(s) tested on**
- PC
- RHEL 7.8
- cFS commit https://github.com/nasa/cFS/commit/5ca472a450deae7bbbd434465e611f8a6ab3c849
- cfs_cf unit-test-cf-3.0 branch

**Additional context**
The override control tests show there is no behavioral changes unless the new override function is used.  The override updated tests show that the desired outcome is achieved in each instance.

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Gibson NASA/GSFC 587
","duplicate, CCB:Ignore",https://github.com/nasa/osal/pull/839
Integration candidate: 2021-03-05,"**Describe the contribution**
PR #837

**Testing performed**
Steps taken to test the contribution:
CI

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@ArielSAdamsNASA ",,https://github.com/nasa/osal/pull/838
"Fix #836, Add Testing Tools to the Security Policy","**Describe the contribution**
Fix #836 
Updated the Security Policy to include the type of testing done for OSAL or the cFS bundle under a new section titled ""Testing"". Provided a disclaimer that under the Apache license, liability is not provided. 

Added that security reports should be emailed. 

**Expected behavior changes**
Users should now be aware of the type of testing OSAL or the cFS bundle undergoes. 

**Additional context**
References: 
https://github.com/thanos-io/thanos/security/policy
https://github.com/phpMussel/phpMussel/security/policy
https://github.com/timberio/vector/security/policy

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal 
","docs, CCB:FastTrack",https://github.com/nasa/osal/pull/837
Add Testing Tools to the Security Policy,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/osal is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/osal while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",docs,https://github.com/nasa/osal/issues/836
osal Integration candidate: 2021-03-02,"**Describe the contribution**
Fix #833 - Initializes the file descriptor (output parameter) for all cases in OS_OpenCreate
Fix #795 - Adds all the currently possible source files for `VxWorks` to coverage statistics and adds coverage tests
Fix #780, restrict permissions on file create
Fix #828, Change the comment style
Fix #821, OSAL should have a ""OS_GetVersionString()"" function

**Testing performed**
See <https://github.com/nasa/cFS/pull/204/checks>

**Expected behavior changes**
PR #834 - Avoids various ""possible uninitialized variable"" warnings for routines that utilize this API.

PR #826 - Renames `sockaddr*` structures to `sa*` to deconflict from structure name in `os-impl-bsd-sockets.c`. Adds `OS_NETWORK_SUPPORTS_IPV6` to `os-impl-bsd-sockets.c` compilation. Renames `bsd-select-stubs.c` to `sys-select-stubs.c`. Coverage now includes all currently possible files in VxWorks build

PR #827 - Resolves CodeQL security warning by restricting permissions on file create.

PR #829 - Changes comments using ""cpp"" comment style to ""c"" style

PR #824 - Adds _new_ accessor functions APIs to get version strings and return the values of string macros defined in `osapi-version.h`. 
1. The ""simple"" version currently `OS_VERSION` macro - this is the semantic version without any extra detail.  This is returned by `OS_GetVersion()`.
2. The ""descriptive"" version in `OS_VERSION_STRING` macro - this has extra detail like the most recent official release.  This is returned by `OS_GetVersionDescription()`.
3. The release code name, now returned by `OS_GetVersionDescription()`.

These functions are the preferred way to get the OSAL version string, from now on users should avoid using the macro definitions as it is evaluated at OSAL library compile time, rather than application compile time, and thus will remain correct in the event that OSAL is relinked without recompiling the application.
Adds `osapi-version.c` to implement these 3 calls and associated coverage test. This allows the version.c file to be auto-generated in the future.


**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/204>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@jphickey 
@zanzaben ",,https://github.com/nasa/osal/pull/835
"Fix #833, Initialize file descriptor in OS_OpenCreate","**Describe the contribution**
Fix #833 - Initializes the file descriptor (output parameter) for all cases in OS_OpenCreate

Avoids various ""possible uninitialized variable"" warnings for routines that utilize this API.

**Testing performed**
Build and execute unit tests, passed

**Expected behavior changes**
Avoids static analysis warning, output never unset.

**System(s) tested on**
 - Hardware: cFS Lab 5
 - OS: CentOS 7
 - Versions: Bundle main + this commit

**Additional context**
nasa/cFE#1185

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/834
Always initialize file descriptor in OS_OpenCreate,"**Is your feature request related to a problem? Please describe.**
Numerous false alarms on possible uninitialized variable with OS_OpenCreate use.

**Describe the solution you'd like**
Initialize the file descriptor to OS_OBJECT_ID_UNDEFINED:
https://github.com/nasa/osal/blob/98a251618c4f54e343ff9e2e52d55671cf26a91e/src/os/shared/src/osapi-file.c#L106-L115

**Describe alternatives you've considered**
Could initialize before passing in from each call, but this would provide consistency

**Additional context**
Static analysis warnings (on use)

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/833
Update UT stubs/support such that user registered hook/return value override/etc skips the rest of the default stub logic,"**Is your feature request related to a problem? Please describe.**
Some logic implemented in stubs after the hook call is dependent on a status of OS_SUCCESS or positive, which is overly restrictive for a stub user that wants full control stub behavior (ability to return a positive and explicitly control implementation)

**Describe the solution you'd like**
Provide a mechanism to skip stub logic if user has registered an ""override"" action.

**Describe alternatives you've considered**
None

**Additional context**
User requested

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping @asgibson @jphickey 
",unit-test,https://github.com/nasa/osal/issues/832
Finish adding line coverage to portable os-impl-bsd-sockets.c,"**Is your feature request related to a problem? Please describe.**
#826 added os-impl-bsd-sockets.c to the vxworks coverage statistics, but not full coverage

**Describe the solution you'd like**
Finish the coveragetest-bsd-sockets.c to get full line coverage of portable/os-impl-bsd-sockets.c

**Describe alternatives you've considered**
None

**Additional context**
#826, #795

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/osal/issues/831
osal Integration candidate: 2021-02-23,"**Describe the contribution**
Fix #798 and #799, tests fail when no network 
Fix #814, UT Stub match macro behavior 
Fix #819, Remove redundant logic 
Fix #817, Simplify name truncation in OS_CreateSocketName 
Fix #779, Change global vars to not be hidden by local vars. 
Fix #770, Remove deprecated elements 
Fix #737, UT_Stub_CheckForceFail -> UT_Stub_CheckDefaultReturnValue 

**Testing performed**
See <https://github.com/nasa/cFS/pull/193/checks>

**Expected behavior changes**

PR #813 - Makes tests skip after getting their first not implemented error.

PR #815 - Updates stub helpers to match the behavior of calling the default implementation stub macro (NULL VA list)

PR #820 - Removes redundant logic and assignment to fix static analysis warnings

PR #818 - Truncates at the end of the logic flow for socket name as opposed to possibly 3 different locations. Fixes static analysis warning.

PR #794 - Renames `timer_id` in unit tests to `local_timer_id` to avoid conflicts

PR #822 - Removes all deprecated elements

PR #823 - No behavior change. Renames `UT_Stub_CheckForceFail` to `UT_Stub_CheckDefaultReturnValue`, also only sets `Value` if not `NULL` (can pass in NULL value doesn't matter)


**System(s) tested on**
Ubuntu 18.04 

**Additional context**
Part of <https://github.com/nasa/cFS/pull/193>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@zanzaben 
@skliper ",,https://github.com/nasa/osal/pull/830
"Fix #828, fix comment style","**Describe the contribution**
Fixes #828
Change the comment style 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/829
C++ comment style and commented out code violations,"**Is your feature request related to a problem? Please describe.**
C++ comment style and commented out code violates style guidelines

https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/tests/select-test/select-test.c#L266

**Describe the solution you'd like**
Clean up

**Describe alternatives you've considered**
None

**Requester Info**
Alex Campbell GSFC",enhancement,https://github.com/nasa/osal/issues/828
"Fix #780, restrict permissions on file create","**Describe the contribution**
Fixes #780
adds restriction check to file open.  

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/osal/pull/827
"Fix #795, Add uncovered vxworks source files to coverage statistics","**Describe the contribution**
Fix #795 - Adds all the currently possible source files for vxworks to coverage statistics and adds coverage tests

- Renamed sockaddr* structures to deconflict from structure name in os-impl-bsd-sockets.c to make stubbing out the OS structures easier.
- Compiling os-impl-bsd-sockets.c in coverage test with OS_NETWORK_SUPPORTS_IPV6 to cover that option also
- Renamed bsd-select-stubs.c to sys-select-stubs.c since it's really stubbing sys/select.h not the bsd implementation of select

**Testing performed**
Build and execute unit tests, passed

**Expected behavior changes**
None, but coverage now includes all currently possible files in vxworks build

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
Not full coverage yet on  os-impl-bsd-sockets.c (plan to keep improving prior to CCB)
Also will squash

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/826
Comment copy/paste errors in os-shared-idmap.h,"**Is your feature request related to a problem? Please describe.**
Various comments aren't right:
https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/shared/inc/os-shared-idmap.h#L162-L169
https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/shared/inc/os-shared-idmap.h#L180-L187
https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/shared/inc/os-shared-idmap.h#L226-L254
https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/shared/inc/os-shared-idmap.h#L294-L304

Just examples, needs full scrub

**Describe the solution you'd like**
Prefer removal of the function name in the comment, and update the actual comment to match purpose.  Even better is switch to doxygen comments.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/osal/issues/825
"Fix #821, add accessor functions for version strings","**Describe the contribution**
Adds 3 simple API calls:

    const char *OS_GetVersion(void);
    const char *OS_GetVersionCodeName(void);
    const char *OS_GetVersionDescription(void);

These directly return the values of string macros defined in `osapi-version.h`.

The accessor function should be the preferred way to get the OSAL version string (vs. using macro directly) as it is evaluated at OSAL library compile time, rather than application compile time, and thus will remain correct in the event that OSAL is relinked without recompiling the application.

Fixes #821 

**Testing performed**
Build and run all unit tests, sanity check CFE.

**Expected behavior changes**
This adds _new_ APIs to get version strings - does not change anything existing within OSAL.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Looking at the existing macros I determined we really needed 3 functions for version info:

1. There is the ""simple"" version currently in `OS_VERSION` macro - this is the semantic version without any extra detail.  This is returned by `OS_GetVersion()`.
2. There is the ""descriptive"" version currently in `OS_VERSION_STRING` macro - this has extra detail like the most recent official release.  This is returned by `OS_GetVersionDescription()`.
3. Finally the release code name, which might be useful to obtain separately/in isolation from the rest of the details..  I separated this from the `OS_VERSION_STRING` macro and this is returned by `OS_GetVersionDescription()`.

I resisted the temptation to simply toss these into `osapi-common.c` and instead added a new/separate source file called `osapi-version.c` to implement these 3 calls.    In turn this meant a new coverage test needed to be added too (since the pattern in OSAL is one coverage test per file unit).

Putting this in a separate source file is better as it maintains the pattern/relationship between .c and .h files, and it also allows the version.c file to be auto-generated at some point if we decide to go that route in the future.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/824
"Fix #737, UT_Stub_CheckForceFail -> UT_Stub_CheckDefaultReturnValue","**Describe the contribution**
Fix #737 - renames UT_Stub_CheckForceFail to UT_Stub_CheckDefaultReturnValue, also only sets Value if not NULL (can pass in NULL value doesn't matter)

**Testing performed**
Build and execute unit tests (with corresponding nasa/cFE#1173)

**Expected behavior changes**
None, name change

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + nasa/cFE#1173 + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:FastTrack, dependency",https://github.com/nasa/osal/pull/823
"Fix #770, Remove deprecated elements","**Describe the contribution**
Fix #770 - removes all deprecated elements

**Testing performed**
Build and execute unit tests, passes.

**Expected behavior changes**
None for compiles with OMIT_DEPRECATED=true

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/822
"OSAL should have a ""OS_GetVersionString()"" function","**Is your feature request related to a problem? Please describe.**
Currently the OSAL version is a string that is made available as a macro - `OS_VERSION_STRING` - which defined in `osapi-version.h`

The problem with this is that because its a preprocessor macro - the replacement is done at the point the macro is _referenced_ and therefore the value ends up getting built into the binary code for whatever referenced this (in CFE use case this is `cfe_es_task.o`)

This means if that code is later linked with a different/updated OSAL library (but the CFE code using OSAL is **not** recompiled) it will still report the original OSAL version string, which is wrong.

**Describe the solution you'd like**
There should be a function call into OSAL to get the version string, rather than a macro in a header.  Therefore if/when re-linking without recompilation, it will report the correct value.

**Additional context**
In summary - the OSAL version string should be stored within the OSAL library binary file, rather than stored within the CFE library binary file.  This is confirmed via the ""strings"" tool that right now its in the wrong place:

    $ strings build/native/default_cpu1/cfe-core/libcfe-core.a | grep osal
    cFS Versions: cfe v6.8.0-rc1+dev348, osal v5.1.0-rc1+dev262, psp

This shows that the actual string showing the OSAL version as reported by the cFE event is baked into the CFE library, not the OSAL library where it should be.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/821
"Fix #819, Remove redundant logic","**Describe the contribution**
Fix #819 - removes redundant logic (static analysis warnings)

**Testing performed**
Build and execute unit tests, passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/820
Minor redundancy cleanup from static analysis warnings,"**Is your feature request related to a problem? Please describe.**
Two minor redundant logic/checks:
https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/vxworks/src/os-impl-timebase.c#L397-L411
https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/vxworks/src/os-impl-network.c#L88

No actual issues, just minor cleanup.

**Describe the solution you'd like**
Remove first, refactor second so the bound is just checked in one place

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warnings

**Requester Info**
Jacob Hageman - NASA",enhancement,https://github.com/nasa/osal/issues/819
"Fix #817, Simplify name truncation in OS_CreateSocketName","**Describe the contribution**
Fix #817 - just truncating at the end for socket name (not possibly 3 different locations)

**Testing performed**
Built and executed unit tests, passed

**Expected behavior changes**
Will just truncate socket name at the end

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
Note coverage test isn't doing full branch coverage, still getting full line coverage.  Branch coverage is an existing issue.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA",,https://github.com/nasa/osal/pull/818
Unreasonable Size Argument - OS_CreateSocketName static analysis warning,"**Is your feature request related to a problem? Please describe.**
Static analysis warns when using sizeof(sock->stream_name) in OS_strnlen check and later math `OS_MAX_API_NAME - len` passed to snprintf which out of context could then be a negative number (but isn't because OS_SocketAddrToString_Impl limits to OS_MAX_API_NAME, so this is a false positive):

https://github.com/nasa/osal/blob/ff4f52312297a3cdf3ddc0cf5ead95f27954630b/src/os/shared/src/osapi-sockets.c#L101-L110

**Describe the solution you'd like**
Truncating the port while fully adding the parent name or possibly even truncating both seems like it could be confusing.  Just truncate at the end.

**Describe alternatives you've considered**
Could use OS_MAX_API_NAME to limit len in first check, but seems like overkill since the size is OS_MAX_PATH_LEN.

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/817
"Fix #752, Utilize UTASSERT_CASETYPE_NA to report OS_ERR_NOT_IMPLEMENTED","**Describe the contribution**
(would have fixed #752)
use UTASSERT_CASETYPE_NA  instead of UtPrintf to report cases when not implemented 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",invalid,https://github.com/nasa/osal/pull/816
"Fix #814, UT Stub match macro behavior","**Describe the contribution**
Fix #814 - Updates stub helpers to match the behavior of calling the default implementation stub macro (NULL va list)

**Testing performed**
Build/execute unit tests, passed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/815
Local stub helper update to match macro behavior,"**Is your feature request related to a problem? Please describe.**
Custom call to `UT_DefaultStubImpl` don't match standard macro behavior (NULL terminate for functions not including va list).

**Describe the solution you'd like**
Match macro (avoids static analysis warning)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman
","bug, unit-test",https://github.com/nasa/osal/issues/814
"Fix #798 and #799, tests fail when no network","**Describe the contribution**
Fixes #798 
Fixes #799
made the tests skip after getting their first not implemented error. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/osal/pull/813
"Work #384, #640, #672, Minor fixes to osal config guide","**Describe the contribution**
I noticed a few things missing from the documentation.
There were also duplicate entries in one of the tables

Partially addresses #384, #640, #672

**Testing performed**
(none)

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Gentoo Linux - amd64

**Contributor Info**
Andrei Tumbar (NASA JPL) andrei.tumbar@jpl.nasa.gov / andreitumbar@gmail.com
","docs, CCB:FastTrack, community, squash",https://github.com/nasa/osal/pull/812
"Fix #809, cast args to printf in queue-test","**Describe the contribution**

Using `%u` conversion requires an `unsigned int` arg, not `uint32` (it matches on some platforms, not on others).

Fixes #809

**Testing performed**
Build and run tests on RTEMS 4.11.3.

**Expected behavior changes**
No more format mismatch warning/error.

**System(s) tested on**
RTEMS 4.11.3 QEMU target on Ubuntu 20.04 build host

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

",CCB:FastTrack,https://github.com/nasa/osal/pull/811
"Fix #808, length-limited string length checks","**Describe the contribution**

Create a wrapper around `memchr()` that mimics the non-C99 function `strnlen()` which is defined in POSIX-2008.

Use this instead of `strlen()` whenever the string being checked either originates in or will be copied into a fixed-length array buffer.

Fixes #808 

**Testing performed**
Build and sanity check CFE
Run all unit tests on both native and RTEMS

**Expected behavior changes**
No behavior changes except if a bug causes strings to be unterminated.

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11.3 (qemu)

**Additional context**
Worth noting that in most cases this was testing the length of a string in the internal OSAL table entry, which was already length-checked when created.  So this check is somewhat redundant, the only way this could catch something is if there is memory corruption of some sort.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/810
RTEMS build broken due to format mismatch (again),"**Describe the bug**
Somewhere a printf in ""queue_test.c"" got changed without the requisite cast, now generates a warning on RTEMS.

```
/home/joe/code/cfecfs/github/osal/src/tests/queue-test/queue-test.c: In function 'task_1':
/home/joe/code/cfecfs/github/osal/src/tests/queue-test/queue-test.c:89:13: error: format '%u' expects argument of type 'unsigned int', but argument 6 has type 'uint32' [-Werror=format=]
             UtAssert_True(data_received == expected, ""TASK 1: data_received (%u) == expected (%u)"",
             ^
/home/joe/code/cfecfs/github/osal/src/tests/queue-test/queue-test.c:89:13: error: format '%u' expects argument of type 'unsigned int', but argument 7 has type 'uint32' [-Werror=format=]
```


**To Reproduce**
Build for RTEMS 4.11 with default config

**Expected behavior**
Should build successfully

**System observed on:**
RTEMS 4.11.3 target on Ubuntu 20.04 build host.

**Additional context**
Need to always remember to always cast args in printf when using fixed-width types.  This breaks very frequently.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test, RTEMS",https://github.com/nasa/osal/issues/809
Convert from strlen to strnlen where appropriate,"**Is your feature request related to a problem? Please describe.**
Per security standards strlen should be avoided if possible:
```
src/os/vxworks/src/os-impl-shell.c:        OS_write(fdCmd, Cmd, strlen(Cmd));
src/os/vxworks/src/os-impl-symtab.c:    if (strlen(name) >= OS_MAX_SYM_LEN)
src/os/shared/src/osapi-sockets.c:        len = strlen(sock->stream_name);
src/os/shared/src/osapi-sockets.c:        len = strlen(sock->stream_name);
src/os/shared/src/osapi-idmap.c:            name_len = strlen(record->name_entry);
src/os/shared/src/osapi-filesys.c:    mplen = strlen(filesys->virtual_mountpt);
src/os/shared/src/osapi-filesys.c:    if (strlen(dev_name) >= OS_FS_DEV_NAME_LEN)
src/os/shared/src/osapi-filesys.c:    VirtPathLen = strlen(VirtualPath);
src/os/shared/src/osapi-filesys.c:    if (strlen(name_ptr) >= OS_MAX_FILE_NAME)
src/os/shared/src/osapi-filesys.c:            SysMountPointLen = strlen(filesys->system_mountpt);
src/os/shared/src/osapi-filesys.c:            VirtPathBegin    = strlen(filesys->virtual_mountpt);
```

**Describe the solution you'd like**
Replace with strnlen where possible.

**Describe alternatives you've considered**
None

**Additional context**
Security analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, security, refactor",https://github.com/nasa/osal/issues/808
"Fix #805, Null terminate when using strncpy","**Describe the contribution**
Fix #805 - fixed a couple missing null terminations and applied the general pattern (sizeof where it works)

**Testing performed**
Build and execute unit tests

**Expected behavior changes**
Avoid missing null termination issues, no longer truncating filename in OS_ModuleInfo (src/os/shared/src/osapi-module.c)

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/807
OS_ShellOutputToFile_Impl in src/os/rtems/src/os-impl-shell.c issues,"**Is your feature request related to a problem? Please describe.**
 - Does a strncpy to LoadCmd, then a snprintf to LocalCmd
 - Doesn't check for no truncation prior to sending so could do strange things
 - cmd could take up more than allotted space

**Describe the solution you'd like**
Remove the strncpy?  Check the full command fit prior to execution?

**Describe alternatives you've considered**
Already can be optionally excluded from build...

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/806
Improper Null termination,"**Is your feature request related to a problem? Please describe.**
A few cases of possible missing termination:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/shared/src/osapi-module.c#L258
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/shared/src/osapi-errors.c#L123

**Describe the solution you'd like**
Terminate.

**Describe alternatives you've considered**
None

**Additional context**
Secuity analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC
","bug, security",https://github.com/nasa/osal/issues/805
"Fix #803, Add check of semaphore to avoid unreachable code in posix OS_BinSemCreate_Impl","**Describe the contribution**
Fix #803 - adds a check to send the semaphore to avoid unreachable code, basically a non-op placeholder to avoid refactoring unreachable code which would make it less future-proof

**Testing performed**
Build and execute unit tests, passed

**Expected behavior changes**
None, avoids static analysis warning and uncoverable code

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
Eventually when coverage is added to posix this will help meet the 100% goal

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/804
Unreachable code in posix OS_BinSemCreate_Impl,"**Is your feature request related to a problem? Please describe.**
Can't reach:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/posix/src/os-impl-binsem.c#L217-L220

**Describe the solution you'd like**
Refactor to eliminate dead code.

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, posix",https://github.com/nasa/osal/issues/803
"Fix #793, Remove unreachable code in OS_SocketOpen_Impl for BSD socket","**Describe the contribution**
Fix #793, Just simplifies switch statements based on previous checks.  Can always be expanded again if additional cases are implemented.

**Testing performed**
Build and execute unit tests, passed

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
Static analysis warning fix

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/802
"Fix #797, Update os-impl-no-symtab.c to match APIs","**Describe the contribution**
Fix #797 - updates os-impl-no-symtab.c to match latest APIs

**Testing performed**
Builds.

**Expected behavior changes**
Now can build without dynamic loader (OSAL_CONFIG_INCLUDE_DYNAMIC_LOADER FALSE)

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/801
"Fix #796, Update os-impl-no-sockets.c to match APIs","**Describe the contribution**
Fix #796 - updates os-impl-no-sockets.c to match latest APIs

**Testing performed**
Builds.

**Expected behavior changes**
Now can build without network (OSAL_CONFIG_INCLUDE_NETWORK FALSE)

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/800
network-api-test fails if OSAL_CONFIG_INCLUDE_NETWORK is false,"**Is your feature request related to a problem? Please describe.**
Set all INCLUDEs to false and network-api-test failed

**Describe the solution you'd like**
Should cleanly handle OS_ERR_NOT_IMPLEMENTED

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","bug, unit-test",https://github.com/nasa/osal/issues/799
select-test fails if network isn't included,"**Is your feature request related to a problem? Please describe.**
select-test hung when run with all the include options being false, suspect it's due to OSAL_CONFIG_INCLUDE_NETWORK

**Describe the solution you'd like**
Select test should handle either configuration (check for OS_ERR_NOT_IMPLEMENTED and skip tests that don't apply)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, unit-test",https://github.com/nasa/osal/issues/798
os-impl-no-symtab.c out of date,"**Describe the bug**
Conflicting types for the implementations

**To Reproduce**
Attempt to compile w/ os-impl-no-symtab.c:  OSAL_CONFIG_INCLUDE_DYNAMIC_LOADER FALSE

**Expected behavior**
Should compile

**Code snips**
Many of the implementations don't match, sample:
```
src/os/portable/os-impl-no-symtab.c:55:7: error: conflicting types for ‘OS_ModuleSymbolLookup_Impl’
 int32 OS_ModuleSymbolLookup_Impl(uint32 local_id, cpuaddr *SymbolAddress, const char *SymbolName)
src/os/shared/inc/os-shared-module.h:115:7: note: previous declaration of ‘OS_ModuleSymbolLookup_Impl’ was here
 int32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName);

```

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions cFS Bundle

**Additional context**
Seen when adding a coverage test for this code (#795), #796

**Reporter Info**
Jacob Hageman - NASA/GSFC","bug, public-api, breaking",https://github.com/nasa/osal/issues/797
os-impl-no-sockets.c out of date,"**Describe the bug**
Conflicting types for the implementations

**To Reproduce**
Attempt to compile w/ os-impl-no-sockets.c: OSAL_CONFIG_INCLUDE_NETWORK FALSE

**Expected behavior**
Should compile

**Code snips**
Many of the implementations don't match, sample:
```
src/os/portable/os-impl-no-sockets.c:52:7: error: conflicting types for ‘OS_SocketOpen_Impl’
 int32 OS_SocketOpen_Impl(uint32 sock_id)
src/os/shared/inc/os-shared-sockets.h:54:7: note: previous declaration of ‘OS_SocketOpen_Impl’ was here
 int32 OS_SocketOpen_Impl(const OS_object_token_t *token);
```

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions cFS Bundle

**Additional context**
Seen when adding a coverage test for this code (#795)

**Reporter Info**
Jacob Hageman - NASA/GSFC","bug, public-api",https://github.com/nasa/osal/issues/796
Update coverage tests for VxWorks at minimum to include reporting of all code that could be included in build,"**Is your feature request related to a problem? Please describe.**
Currently os-impl-bsd-socket.c can be included (and is by default) in the VxWorks build:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/vxworks/CMakeLists.txt#L67

but it's not included in coverage testing or reported as part of status
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/unit-test-coverage/vxworks/CMakeLists.txt#L31

So although code coverage reports 100%, we are NOT covering the possible FSW 100%... so it's a bit misleading.

**Describe the solution you'd like**
All possible code should be reported for coverage.  Short term is just to add tests (track by hand) but eventually may benefit from a quick check that all the files included in the build are included in coverage analysis.

**Describe alternatives you've considered**
None

**Additional context**
Illuminated by investigation into #793, unreachable code wasn't being reported even though it was in the core build.

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, unit-test, vxworks",https://github.com/nasa/osal/issues/795
"Fix #779, Change global vars to not be hidden by local vars.","**Describe the contribution**
Fixes #779 
Rename global timer_id to local_timer_Id

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/osal/pull/794
Unreachable code in os-impl-bsd-sockets.c:,"**Is your feature request related to a problem? Please describe.**
2nd set of default cases are unreachable, since there's a return from a prior check:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/portable/os-impl-bsd-sockets.c#L102-L147

Specifically line 142 and 146 are legitimately dead code.

**Describe the solution you'd like**
Refactor to eliminate dead code

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, security",https://github.com/nasa/osal/issues/793
"Fix #790, Return status from OS_ConsoleAPI_Init","**Describe the contribution**
Fix #790 - now returning status from OS_ConsoleAPI_Init so debug warnings will get reported correctly on errors

**Testing performed**
Build and executed unit tests, passed (note the OS_ConsoleAPI_Init test does not check status)

**Expected behavior changes**
Will send debug message on error

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
See #791 to add full branch coverage to unit tests w/ return checking

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/792
Implement 100% branch coverage with return verification,"**Is your feature request related to a problem? Please describe.**
See OS_ConsoleAPI_Init test, called once with no return checking... doesn't meet expectations for coverage (current minimum goal is all lines, all branches).  Note future standards may require MC/DC.
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/unit-test-coverage/shared/src/coveragetest-printf.c#L35-L57

**Describe the solution you'd like**
Add full branch coverage to unit tests

**Describe alternatives you've considered**
Add MC/DC coverage to unit tests

**Additional context**
#790, #792

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/osal/issues/791
Return code not passed back in OS_ConsoleAPI_Init - static analysis warning,"**Is your feature request related to a problem? Please describe.**
OS_ConsoleAPI_Init always returns success, but could error.  Inconsistently implemented (if return_code is being recorded, return it... if it isn't needed why set it?)

**Describe the solution you'd like**
Either don't have a return value, or return the actual status.  In test/coverage the expected return value should be confirmed.

**Describe alternatives you've considered**
None

**Additional context**
Static analysis warning since return_code is unused

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, security",https://github.com/nasa/osal/issues/790
"Fix #788, Resolve coercion alters value warnings","**Describe the contribution**
Fix #788 - fixed two locations with local return code defined as uint32, should be int32 (or eventually the status type)

**Testing performed**
Build and execute unit tests, passed

**Expected behavior changes**
No functional change, just resolves warnings

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
Static analysis warning

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:FastTrack",https://github.com/nasa/osal/pull/789
Coercion Alters Value - static analysis warnings,"**Is your feature request related to a problem? Please describe.**
A few locations where a type is incorrect (just listing an example here, see PR for all fixes):
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/shared/src/osapi-errors.c#L99-L129

Note returns status which is int32, but return_code is uint32.  No real bugs identified yet, but cleaning up warnings makes it easier to spot real issues in the future.

**Describe the solution you'd like**
Fix types where needed.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, security",https://github.com/nasa/osal/issues/788
"Consolidate around single base set of unit test APIs (can extend, but should be based on a consistent set)","**Is your feature request related to a problem? Please describe.**
I realize we've discussed this before, but our unit tests are all over the place.

**Describe the solution you'd like**
We should implement gold-standard patterns, and drive the rest of the system towards that goal as we update unit tests.  Really the ASSERT* macros at this point seem like the most informative/standard set but they aren't available to OSAL.  Update the ut_assert macros or add ones that match this pattern.

**Describe alternatives you've considered**
None

**Additional context**
Developers have added all sorts of non-standard debug statements when if we just used the informative macros the output would be standardized (see #786)

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/osal/issues/787
"Fix #785, Clean commented out code","**Describe the contribution**
Fix #785 - cleans commented out code (all from test code)

**Testing performed**
Build/execute unit test, passes

**Expected behavior changes**
None, just avoids static analysis warnings

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Would really benefit from ASSERT macro in cFE... maybe consider moving/consolidating these general macros?  Almost all the debug code that was commented out would be better replaced by ASSERT.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","unit-test, CCB:FastTrack",https://github.com/nasa/osal/pull/786
Remove commented out code where it doesn't have a benefit,"**Is your feature request related to a problem? Please describe.**
Pages of commented out code warnings show up in static analysis.

**Describe the solution you'd like**
General scrub and removal where it's not necessary.

**Describe alternatives you've considered**
None, any valuable comments will be retained

**Additional context**
CodeQL warnings

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, docs, unit-test",https://github.com/nasa/osal/issues/785
"Fix #783, Initialize locals flagged in static analysis","**Describe the contribution**
Fix #783, Simply adds initialization where flagged by static analysis as possibly uninitialized

**Testing performed**
Build and run unit tests

**Expected behavior changes**
No functional change to non-test code, avoids returning uninitialized values from stubs.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/784
Refactor to avoid possible uninitialized local variables,"**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/ut-stubs/osapi-utstub-idmap.c#L137-L152
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/unit-tests/osfile-test/ut_osfile_dirio_test.c#L519
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/unit-tests/osfile-test/ut_osfile_dirio_test.c#L651

Note the only one in non-test code is a false alarm so I'm not marking as a bug and not critical, but easy to squash:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/os/shared/src/osapi-idmap.c#L678

**Describe the solution you'd like**
Fix.

**Describe alternatives you've considered**
None

**Additional context**
CodeQL warnings

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test, security",https://github.com/nasa/osal/issues/783
"Fix #781, Terminate UT macro variadic lists","**Describe the contribution**
Fix #781 - terminates the variadic lists with NULL in the unit test macros

**Testing performed**
Build and execute unit tests, pass

**Expected behavior changes**
Avoids CodeQL warning

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/782
"Unterminated variadic call in UT tools, CodeQL warning","**Is your feature request related to a problem? Please describe.**
CodeQL warning on:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/ut_assert/inc/utstubs.h#L479
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/ut_assert/src/utstubs.c#L845-L855

**Describe the solution you'd like**
Terminate list with NULL in macro

**Describe alternatives you've considered**
None

**Additional context**
CodeQL warning

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, unit-test, security",https://github.com/nasa/osal/issues/781
File created without restricting permissions in unit test tools,"**Is your feature request related to a problem? Please describe.**
CodelQL security warnings against following code:
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/ut_assert/src/uttools.c#L60
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/ut_assert/src/uttools.c#L102-L124

**Describe the solution you'd like**
https://github.com/nasa/elf2cfetbl/blob/6d1d12ea2d4ab7bcc7044f8e4c60a268d7a1f640/elf2cfetbl.c#L1455-L1464

**Describe alternatives you've considered**
None

**Additional context**
CodeQL analysis results

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, unit-test, security",https://github.com/nasa/osal/issues/780
"Local variable hides global in queue-test.c, bin-sem-timeout-test.c, bin-sem-test.c","**Is your feature request related to a problem? Please describe.**
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/tests/queue-test/queue-test.c#L56
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/tests/queue-test/queue-test.c#L61

Similar in bin-sem-timeout-test.c and bin-sem-test.c

**Describe the solution you'd like**
Preference is to implement a style such that it's easy to differentiate global vs local variables (local lower case, global camel or similar) or put global variables in a structure (easy to init/clear).

**Describe alternatives you've considered**
None

**Additional context**
CodeQL warning

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, unit-test",https://github.com/nasa/osal/issues/779
"Fix #777, Static allocation of DummyVec in OSC_INUM_TO_IVEC stub","**Describe the contribution**
Fix #777, declares DummyVec as static to avoid warning (and returning stack allocated memory) when returning VecTbl.

**Testing performed**
Build and execute unit tests, passed.

**Expected behavior changes**
Bug in stub fixed (could have been issues if return value used).

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle + this commit

**Additional context**
CodeQL warning resolution

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/778
OSC_INUM_TO_IVEC stub returning stack allocated memory,"**Is your feature request related to a problem? Please describe.**
CodeQL warning on line 72 (returning VecTbl):
https://github.com/nasa/osal/blob/09a2c5e793639e508174a2446989274acf36f25e/src/unit-test-coverage/ut-stubs/src/vxworks-intLib-stubs.c#L51-L77

**Describe the solution you'd like**
Make DummyVec static

**Describe alternatives you've considered**
Remove, no longer used in OSAL testing but could be used by PSP implementations.  Leaving in for now.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, unit-test, security",https://github.com/nasa/osal/issues/777
"Fix #775, Add CodeQL analysis to workflow","**Describe the contribution**
Fix #775 - adds CodeQL analysis

Differences from bundle - just builds osal, has timeout

**Testing performed**
Ran on fork

**Expected behavior changes**
Adds Code QL analysis on push to main and pull requests (to main)

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","continuous-integration, CCB:FastTrack",https://github.com/nasa/osal/pull/776
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, continuous-integration, security",https://github.com/nasa/osal/issues/775
osal Integration candidate: 2021-02-02,"**Describe the contribution**
Fix #742, make sure all pointers are checked for null
Fix #742, remove null checks from internal methods.
Fix #602, bring OSAL code coverage back up to 100%
Fix #765, add null pointer check.
Fix #771, Add workflow timeout and format check 
Fix #777, Static allocation of DummyVec in OSC_INUM_TO_IVEC stub
Fix #783, Initialize locals flagged in static analysis
Fix #785, Clean commented out code
Fix #788, Resolve coercion alters value warnings
Fix #790, Return status from OS_ConsoleAPI_Init
Fix #797, Update os-impl-no-symtab.c to match APIs
Fix #793, Remove unreachable code in OS_SocketOpen_Impl for BSD socket
Fix #781, Terminate UT macro variadic lists
Fix #803, Add check of semaphore to avoid unreachable code in posix
Fix #808, length-limited string length checks
Fix #809, cast args to printf in queue-test
Fix #775, Add CodeQL analysis to workflow 
Fix #805, Null terminate when using strncpy 
Fix #769, Apply standard formatting

**Testing performed**
See https://github.com/nasa/cFS/pull/182/checks

**Expected behavior changes**

PR #768 - Adds test cases for `OS_ObjectIdFinalizeDelete`, `OS_DeleteAllObjects`, and others to get 100% line and function coverage on VxWorks and shared/portable layers.

PR #766 - Ensures APIs check for `NULL` inputs or have documentation stating that a null value is allowed.

PR #772 - Adds timeout to static analysis check and adds format check. Removes old .travis.yml and updates badges in readme.

PR #776 - Adds Code QL analysis on push to main and pull requests (to main)

PR #786 - Cleans commented-out code in tests to address static analysis warnings

PR #784 - Initializes local variables to avoid returning uninitialized values from stubs and address static-analysis findings

PR #789 - Replaces two local return codes defined as `uint32` with `int32` to resolve static-analysis warnings 

PR #802 - Simplifies switch statements based on previous checks. Removes unreachable, dead code to resolve static-analysis warnings

PR #782 - Terminates  unit test macros variadic lists with `NULL` to address CWE-121 CodeQL warning

PR #804 - Adds a check to send the semaphore to avoid unreachable code

PR #792 - Adds a status return to `OS_ConsoleAPI_Init` so debug warnings will get reported correctly on errors.

PR #778 - Declares `DummyVec` as static to avoid warning and returning stack allocated memory when returning `VecTbl` in `OSC_INUM_TO_IVEC` stub

PR #801 - Updates types in `os-impl-no-symtab.c` to match latest APIs

PR #800 - Updates types in `os-impl-no-symtab.c` to match latest APIs

PR #807 - Fixes missing `NULL` terminations and applies the standard ""sizeof"" pattern where appropriate. No longer truncates filename in `OS_ModuleInfo`.

PR #811 - Fixes `%u` conversion in RTEMS so to address build warning

PR #810 - Create a wrapper around `memchr()` that mimics the non-C99 function `strnlen()` defined in POSIX-2008. Use this instead of `strlen()`` whenever the string being checked either originates in or will be copied into a fixed-length array buffer. No behavior changes except if a bug causes strings to be unterminated.

PR #773 - No behavior change, applies the standard formatting using `clang-format`

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of https://github.com/nasa/cFS/pull/182

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@jphickey 
@zanzaben ",,https://github.com/nasa/osal/pull/774
"Fix #769, Apply standard formatting","**Describe the contribution**
Fix #769 - applies standard formatting (again), format check should eliminate need for huge sets of changes like this since we should maintain continuous compliance.

**Testing performed**
NA - Whitespace only.

**Expected behavior changes**
Will pass #772

**System(s) tested on**
None

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/773
"Fix #771, Add workflow timeout and format check","**Describe the contribution**
Fix #771, adds timeout to static analysis check and adds format check.  Removes old .travis.yml and updates badges in readme.

**Testing performed**
CI

**Expected behavior changes**
Timeout and format check

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","continuous-integration, CCB:FastTrack",https://github.com/nasa/osal/pull/772
Add workflow timeouts and format check,"**Is your feature request related to a problem? Please describe.**
- No timeout in workflow (default is 360 minutes) could consume allocations
- Missing format check
- Remove old travis configuration
- Update badges

**Describe the solution you'd like**
Add timeout and format check

**Describe alternatives you've considered**
None

**Additional context**
Similar to transition in nasa/cFS and nasa/PSP

**Requester Info**
Jacob Hageman - NASA/GSFC
",continuous-integration,https://github.com/nasa/osal/issues/771
Remove deprecated code (release candidate prep),"**Is your feature request related to a problem? Please describe.**
`OSAL_OMIT_DEPRECATED` elements exist to help with upgrade/transition and reduce frequency of breakage.

**Describe the solution you'd like**
Remove deprecated code for major release.

**Describe alternatives you've considered**
Could tag before removal for any user that would benefit from a ""gentle"" transition.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, deprecate",https://github.com/nasa/osal/issues/770
Apply style formatting (release candidate prep),"**Is your feature request related to a problem? Please describe.**
Code has diverged from automated style.

**Describe the solution you'd like**
Apply automated style formatting.

**Describe alternatives you've considered**
None

**Additional context**
Suggest adding as a check in workflow until release.  Style has been very stable, should be manageable to enforce at least in the short term (release candidate and release prep).  Could enforce just on RC branch(es) if there's an issue w/ general enforcement.

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/769
"Fix #602, bring OSAL code coverage back up to 100%","**Describe the contribution**
Adds test cases where necessary to get 100% line coverage on VxWorks implementation + shared/portable layers.

Fixes #602

**Testing performed**
Build CFE with unit tests
Run all unit tests and check coverage report (FSW not affected)

**Expected behavior changes**
No impact to OSAL implementation - only affects coverage tests.
Coverage testing is now back at 100% functions + 100% lines.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/768
osal Integration candidate: 2021-01-19,"**Describe the contribution**

Fix #746, Add UtDebug message from OS_printf stub
Fix #692, Resolve typos in unit test assert OR statements
Fix #577, Document nested tests not supported
Fix #753, Remove UT_CheckForOpenSockets
Fix #229, add mqueue functional test
Fix #757, Readd extern C in osapi.h to support C++ use
Fix #692, display message when not implemented error occurs
Fix #591, add test teardown failure to test summary
Fix #699, format printf correctly
Fix #685, change file create to use read write
Fix #748, add additional casts
Fix #743, Create Security Policy
Fix #429, update OS_time_t definition to 64  ticks
Fix #718, deprecate OS_fsBlocksFree and OS_fsBytesFree
Fix #761, Terminate string in TestReadWriteLseek
Fix #724, Refactor UT_ClearForceFail to UT_ClearDefaultReturnValue
Fix #722, update UT_SetDefaultReturnValue comments
Fix #229, mqueue test uses sequence of numbers
Fix #760, Install modules and clean up files for unit tests

**Testing performed**
See https://github.com/nasa/cFS/pull/177/checks

**Expected behavior changes**

PR #748 

PR #759    

PR #696  

PR #747  

PR #751  

PR #763  

PR #758  

PR #725  

PR #694  

PR #754  

PR #749  

PR #739

PR #695  

PR #735     

PR #764  

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of https://github.com/nasa/cFS/pull/177/

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 
@zanzaben 
@skliper 
@ArielSAdamsNASA ",,https://github.com/nasa/osal/pull/767
"Fix #742, make sure all pointers are checked for null","**Describe the contribution**
Fixes #742 
Went through all the api's and made sure all pointers have a null check, or a comment stating that it can be null. 

Fixes #765 

**Testing performed**
Build and run unit test

**Expected behavior changes**
none

**System(s) tested on**
Ubuntu 20.04

**Additional context**
13 To Do left in here that will be fixed by #765 

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/osal/pull/766
API's Null pointer check in void methods ,"**Is your feature request related to a problem? Please describe.**
Some pointers are used in methods that return void so the OS_CHECK_POINTER function doesn't work in those methods since it returns an error code. There needs to be a way to check that pointers are valid inside void methods. 

**Describe the solution you'd like**
Need to discuss the best solution 

**Additional context**
related to #742, That branch has this comment marking everywhere it comes up. 
    /* TODO: void pointer, https://github.com/nasa/osal/issues/765 */

**Requester Info**
Alex Campbell GSFC",enhancement,https://github.com/nasa/osal/issues/765
"Fix #760, Install modules and clean up files for unit tests","**Describe the contribution**
Fix #760 - Installs the modules used in unit testing and added removal of files where they were left-over after tests completed

**Testing performed**
Built and ran unit tests (also installed and ran osal_loader_UT from build/exe/* directory).  Confirmed no files were left over in /dev/shm

**Expected behavior changes**
UT's work and clean up files

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC

Ping @jhnphm",,https://github.com/nasa/osal/pull/764
"Fix #761, Terminate string in TestReadWriteLseek","**Describe the contribution**
Fix #761, Terminate string in TestReadWriteLseek

**Testing performed**
Initialized the character arrays to known values, observed missing termination in report, fixed w/ this comment and observed the garbage no longer being reported.

**Expected behavior changes**
No impact to main code, UT only (and just the report, test passes either way).

**System(s) tested on**
 - cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/763
cFS fails to start if executed off of a large NFS home directory,"**Describe the bug**
If cFS is executed off of an NFS home directory, an output similar to the following is created:

```
OS_BSP_Initialize():Maximum user msg queue depth = 1024
CFE_PSP: Default Reset SubType = 1
CFE_PSP: Default CPU ID = 8
CFE_PSP: Default Spacecraft ID = 42
CFE_PSP: Default CPU Name: ciu
OS_Posix_GetSchedulerParams():190:Policy 1: available, min-max: 1-99
OS_Posix_GetSchedulerParams():190:Policy 2: available, min-max: 1-99
OS_Posix_TaskAPI_Impl_Init():376:Selected policy 2 for RT tasks, root task = 99
OS_Posix_TaskAPI_Impl_Init():392:Could not setschedparam in main thread: Operation not permitted (1)
CFE_PSP: OS_FileSysAddFixedMap() failure: -106
CFE_PSP: Starting the cFE with a POWER ON reset.
CFE_PSP: Clearing out CFE CDS Shared memory segment.
CFE_PSP: Clearing out CFE Reset Shared memory segment.
CFE_PSP: Clearing out CFE User Reserved Shared memory segment.
1980-079-14:44:45.09866 POWER ON RESET due to Power Cycle (Power Cycle).
1980-079-14:44:45.09868 ES Startup: CFE_ES_Main in EARLY_INIT state
CFE_PSP: CFE_PSP_AttachExceptions Called
1980-079-14:44:45.09887 ES Startup: CFE_ES_Main entering CORE_STARTUP state
1980-079-14:44:45.09888 ES Startup: Starting Object Creation calls.
1980-079-14:44:45.09888 ES Startup: Calling CFE_ES_CDSEarlyInit
1980-079-14:44:45.09899 ES Startup: Calling CFE_EVS_EarlyInit
1980-079-14:44:45.09901 Event Log cleared following power-on reset
1980-079-14:44:45.09902 ES Startup: Calling CFE_SB_EarlyInit
1980-079-14:44:45.09903 ES Startup: Calling CFE_TIME_EarlyInit
1980-012-14:03:20.00000 ES Startup: Calling CFE_TBL_EarlyInit
1980-012-14:03:20.00005 ES Startup: Calling CFE_FS_EarlyInit
EVS Port1 42/8/CFE_EVS 1: cFE EVS Initialized. cFE DEVELOPMENT BUILD v6.8.0-rc1+dev236 (Codename: Bootes), Last Official Release: cfe v6.7.0
1980-012-14:03:20.15048 SB:Registered 4 events for filtering
EVS Port1 42/8/CFE_SB 1: cFE SB Initialized
EVS Port1 42/8/CFE_SB 14: No subscribers for MsgId 0xa1f,sender CFE_SB
EVS Port1 42/8/CFE_ES 1: cFE ES Initialized
EVS Port1 42/8/CFE_SB 14: No subscribers for MsgId 0xa1f,sender CFE_ES
EVS Port1 42/8/CFE_ES 2: cFS Versions: cfe v6.8.0-rc1+dev236, osal v5.1.0-rc1+dev184, psp v1.5.0-rc142. cFE chksm 6317
EVS Port1 42/8/CFE_SB 14: No subscribers for MsgId 0xa1f,sender CFE_ES
EVS Port1 42/8/CFE_ES 91: Mission demo4-128-g78d3e72-dirty.HALO, CFE git version: demo3-210-g1ede295, OSAL git version: demo3-182-g957e598-dirty
EVS Port1 42/8/CFE_SB 14: No subscribers for MsgId 0xa1f,sender CFE_ES
EVS Port1 42/8/CFE_ES 92: Build 202101150523 phamj@va31spax062h.atk.com
EVS Port1 42/8/CFE_TIME 1: cFE TIME Initialized
EVS Port1 42/8/CFE_TBL 1: cFE TBL Initialized. cFE DEVELOPMENT BUILD v6.8.0-rc1+dev236 (Codename: Bootes), Last Official Release: cfe v6.7.0
1980-012-14:03:20.50107 ES Startup: Finished ES CreateObject table entries.
1980-012-14:03:20.50108 ES Startup: CFE_ES_Main entering CORE_READY state
1980-012-14:03:20.50108 ES Startup: Error, Can't Open ES App Startup file: /cf/cfe_es_startup.scr EC = 0xFFFFFF94
1980-012-14:03:20.50108 ES Startup: CFE_ES_Main entering APPS_INIT state
1980-012-14:03:20.50109 ES Startup: CFE_ES_Main entering OPERATIONAL state
EVS Port1 42/8/CFE_TIME 21: Stop FLYWHEEL
^C1980-012-14:05:59.69445 ExceptionID 0x1110000 in TaskID 0: Caught SIGINT
1980-012-14:05:59.69446 Processor Reset count not reached (0/2)
CFE_PSP: Exiting cFE with PROCESSOR Reset status.

CFE_PSP: Shutdown initiated - Exiting cFE
OS_FileSysMountVolume_Impl():251:ERROR: Cannot create mount point ./cf: File exists
```

- cfe_es_startup.scr cannot be found. 

**To Reproduce**
Execute Linux cFS binary off of an NFS home directory

**Expected behavior**
cFS reads cfe_es_startup.scr successfully

**Code snips**
https://github.com/nasa/osal/blob/bfca5b21f5fc2032505256fc67ae974f53a2a319/src/os/posix/src/os-impl-filesys.c#L247-L254

**System observed on:**
Linux (RHEL7),  OSAL 5.1.0-rc1+dev184

**Reporter Info**
John N Pham, Northrop Grumman
",question,https://github.com/nasa/osal/issues/762
TestReadWriteLseek has off by one error,"**Describe the bug**
TestReadWriteLseek calls strlen but fails to account for null terminator, causing garbage characters to be written to test log

**To Reproduce**
Build and run file-api-test
Depending on the contents of memory, bogus characters may be written to build/[arch]/default_[cpu]/Testing/Temporary/LastTest.log

**Expected behavior**
Valid characters in LastTest.log

**Code snips**
Should be `size = strlen(buffer)+1`
https://github.com/nasa/osal/blob/bfca5b21f5fc2032505256fc67ae974f53a2a319/src/tests/file-api-test/file-api-test.c#L333

**System observed on:**
Linux

**Reporter Info**
John N Pham, Northrop Grumman
","bug, unit-test, community",https://github.com/nasa/osal/issues/761
OSAL tests fails under various conditions,"**Describe the bug**

osal_loader_UT would fail while running on the target, since the utmod/* files aren't installed along w/ the test executable to build/exe/*

In addition, under certain circumstances, the following tests may fail, i.e. if another user has run the tests and files are left in /dev/shm (the tests don't clean up the files):
file-api-test
select-test

**To Reproduce**
For the first case, run test out of build/exe/[cpu]

For the second case, run file-api-test/select-test once, chown the files under /dev/shm/RAM[N] to some other user, and run again.  

**Expected behavior**
Tests should succeed

**Code snips**

Should have an install line for the test modules here:
https://github.com/nasa/osal/blob/bfca5b21f5fc2032505256fc67ae974f53a2a319/src/unit-tests/osloader-test/CMakeLists.txt#L18-L20

Should test if actual directory is writable, not just if the parent tmp directory is writable,
https://github.com/nasa/osal/blob/bfca5b21f5fc2032505256fc67ae974f53a2a319/src/os/posix/src/os-impl-filesys.c#L156-L165

This alone wouldn't solve the issue though, just punt it to the next available tmp directory. You'd probably also want to use mkstemp() or similar to generate a randomly named directory under the tmp folder. 

**System observed on:**
 - Linux

**Reporter Info**
John N Pham, Northrop Grumman
","bug, unit-test, community",https://github.com/nasa/osal/issues/760
"Fix #718, deprecate OS_fsBlocksFree and OS_fsBytesFree","**Describe the contribution**
Deprecates the `OS_fsBlocksFree()` and `OS_fsBytesFree()` functions because the return value is inadequate for larger file systems.

Users should call OS_FileSysStatVolume() and read the respective output members of the structure as indicated.

Fixes #718 

**Testing performed**
Build CFE and unit test with both OMIT_DEPRECATED as true and false

**Expected behavior changes**
Any calls to these functions will become an error if building with `OMIT_DEPRECATED=true`

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/759
"Fix #757, Read extern C in osapi.h to support C++ use","**Describe the contribution**
Fix #757, Readd extern C in osapi.h to support C++ use

**Testing performed**
Build and unit test, passes.
@johnphamngc - could you test in C++ context and confirm this resolves your issue?

**Expected behavior changes**
Works to include header in C++ again, no other functional change

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/758
Typo in osapi.h,"**Describe the bug**
Typo in osapi.h causes compilation failure when included into a c++ file

**To Reproduce**
Include osapi.h into a c++ file

**Expected behavior**
Successful compilation

**Code snips**

The following line is missing its corresponding `extern ""C"" {` and fails to build under C++: 
https://github.com/nasa/osal/blob/89bd11a98fa529538a851139a5682bc7ac5b4373/src/os/inc/osapi.h#L97-L99

Appears to be introduced in https://github.com/nasa/osal/commit/f0bd42edb8d731c2ba899292b3fd8f56e0f5fcb4

**System observed on:**
Linux


**Reporter Info**
John N Pham, Northrop Grumman



",bug,https://github.com/nasa/osal/issues/757
"Fix #755, resolve subtasks not ending on time","**Describe the contribution**
Fix #755 

Removed the second semaphore that was trying to make sure the subtasks finish closing and instead just forcibly close them from the main task. 

**Testing performed**
Ran the select test 300 times on my computer with no fails. 

**Expected behavior changes**
Test should not fail or hang 

**System(s) tested on**
 Ubuntu 20.04


**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",CCB:FastTrack,https://github.com/nasa/osal/pull/756
"""Select Test"" still hanging ","**Describe the bug**
Select test can still sometimes get stuck and hang forever. #707 fixed one cause but this is a different way it can happen. 
It's caused because it is waiting for a subtask to finish but if for whatever reason that subtask never even starts, then it gets stuck waiting forever 

**To Reproduce**
Run the test over and over until you see it happen. 

**Expected behavior**
Test should never under any circumstance hang forever. 

**Code snips**
If applicable, add references to the software.

**System observed on:**
The CI

**Reporter Info**
Alex Campbell GSFC","bug, unit-test",https://github.com/nasa/osal/issues/755
"Fix #753, Remove UT_CheckForOpenSockets","**Describe the contribution**
Fix #753 - removes UT_CheckForOpenSockets which was an old hack to check if unit tests cleaned up sockets.  No longer applicable since the UT framework resets the state for each unit test.

**Testing performed**
Built and ran unit tests with nasa/cfe#1085

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 -  Versions: Bundle main + nasa/cFE#1085 + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",dependency,https://github.com/nasa/osal/pull/754
Remove UT_CheckForOpenSockets,"**Is your feature request related to a problem? Please describe.**
See also nasa/cFE#901, was used to check that unit tests closed sockets but is no longer applicable.

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","unit-test, removed",https://github.com/nasa/osal/issues/753
Test case reporting of not-implemented functionality not uniform,"**Is your feature request related to a problem? Please describe.**
Various messages in the unit tests are used to report API's that are not implemented, and it's not trivial to get a list:
https://github.com/nasa/osal/blob/81c4fa807c514aa4d769ac1c6eb3689897280ece/src/tests/file-api-test/file-api-test.c#L262-L271
https://github.com/nasa/osal/blob/81c4fa807c514aa4d769ac1c6eb3689897280ece/src/unit-tests/oscore-test/ut_oscore_misc_test.c#L263-L268

**Describe the solution you'd like**
Utilize UTASSERT_CASETYPE_NA to report all OS_ERR_NOT_IMPLEMENTED returns.  Also useful to know if it's the API or an option that is specifically being tested.

**Describe alternatives you've considered**
Macro

**Additional context**
See links above

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/osal/issues/752
"Fix #577, Document nested tests not supported","**Describe the contribution**
Fix #577 - adds documentation to the UtTest_Add API that nesting (UtTest_Add from within an added test) silently fails.

**Testing performed**
None, documentation only.  

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
nasa/cFE#841

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/751
osal Integration candidate: 2021-01-12,"**Describe the contribution**

Fix #702, use iterators instead of for loops
Fix #645, implement separate lock/unlock key
Fix #703, implement exclusive/reserved lock
Fix #642, make OS_TaskDelete sync
Fix #703, unit test 
Fix #697, use POSIX dir implementation on V
Fix #580, improve FS_BASED mounts on 
Fix #708, chmod error h
Fix #471, order of operations for delete all
Fix #445, add pointer parameter checks
Fix #573, add OS_FileSysSta
Fix #544, add pointer check
Fix #606, Resolve cast-align error in VxWorks OS_TaskGet
Fix #429, update OSAL code to use time ac
Fix #429, check time conversions in coverage test
Fix #644, Remove alignment macros
Fix #429, add ""assemble"" routines for milli/mi
Fix #732 change uint32 to size_t
Fix #755, resolve subtasks not ending on time

**Testing performed**
See <https://github.com/nasa/cFS/pull/174/checks>

**Expected behavior changes**

PR #704 
  - Address issues with OSAL global table management:
    - use iterators whenever possible
    - use an unlock key rather than task ID so OS_TaskExit() doesn't trigger a warning
    - general cleanup of lock/unlock impl and remove redundant logic
    - unlock global tables during create/delete
    - keep threads ""attached"" in POSIX, so they can be joined when deleted.
  - No longer triggers warning with OS_TaskExit() on VxWorks (see #645)
  - `OS_TaskDelete()` on POSIX does not return until the task has actually exited (see #642)

PR #710 
  - The chmod test is now skipped on VxWorks rather than failing. The `OS_FileChmod_Impl()` function now returns `OS_ERR_NOT_IMPLEMENTED` when run on a file system that does not have permissions, which in turn causes the unit test to be skipped rather than fail.   
  - Corrects a file handle leak. 

PR #716 
  -  Add parameter check to `OS_SocketSendTo` and adjust coverage test to validate.

PR #717 
  - Replace `OS_fsBytesFree` and `OS_fsBlocksFree` with `OS_FileSysStatVolume`. This new API for getting stats on file system. Uses existing `OS_FileSysStatVolume_Impl` call and exposes it in the public API.

PR #711 
  - When cleaning up for shutdown, delete resources that have a task/thread first, followed by other resource types. This helps avoid possible dependencies as running threads might be using the other resources. No detectable external impact; internally, the tasks are deleted first during shutdown, which only has an impact if/when tasks are actively using other OSAL resources.

PR #709
  - The mount/unmount *VxWorks* implementation was not adequately checking for and handling the `FS_BASED` pass -through mapping type - which should be mostly a no-op. Create a mount point directory if it does not already exist when using this mapping type for consistency with POSIX.
  - Adds a documentation note to `OS_FileSysAddFixedMap()`: The virtual mount point cannot be empty - so `OS_FileSysAddFixedMap(.., ""/"", ""/"")` does not work but `OS_FileSysAddFixedMap(.., ""/"", ""/root"")` does work and allows one to open files in the root as `""/root/""` from OSAL applications. Mount-point directories do not need to previously exist when using OS_FileSysAddFixedMap

PR #720 
  - store `taskTCB` return in a `void *`, then cast to `OS_impl_task_internal_record_t *` to avoid a strict alignment compiler error

PR #734 
  - Removes the non-portable `OS_PACK` and `OS_ALIGNED` macros.

PR #706 
  - Uses the POSIX dir implementation on VxWorks 6.9. The only incompatibility is the prototype for `mkdir()`which is missing the second argument; this is worked around with a compatibility macro for VxWorks 6.x builds. 
  - Translate and convert the VxWorks coverage test cases to the portable dir implementation, which benefits VxWorks7, RTEMS, and POSIX.

PR #733 
  - Fixes prototypes so they run on RTEMS by replacing uint32 with size_t

PR #715 
  - Adds` OS_CHECK_POINTER` macros to `OS_ConvertToArrayIndex` and `OS_TimeBaseGetFreeRun` so they can handle NULL pointers and return the correct error.

PR #723 
  - Adds access functions to convert/extract different units from an OS_time_t value - so that other code in CFE/PSP/Apps can be updated to use the access functions and thereby not break when the internal time definition changes. Replaces the `int32` with `OS_time_t` in the ""stat"" structure used by the file module. Updates the pointer argument to `OS_SetLocalTime()` to be `const`. Prototype change of `OS_SetLocalTime()` should be backward compatible.

**Additional context**
Part of <https://github.com/nasa/cFS/pull/174>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@jphickey 
@zanzaben ",,https://github.com/nasa/osal/pull/750
Fix #685 change file create to use read write,"**Describe the contribution**
fixes #685
Changed the file create to read write to work on RTEMS

**Testing performed**
Ran the test on RTEMS 5

**Expected behavior changes**
Test should pass

**System(s) tested on**
Ubunto 20.04, RTEMS 5


**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campell GSFC",,https://github.com/nasa/osal/pull/749
"Fix #699, format printf correctly","**Describe the contribution**
Fixes #699
Fixed the formatting to correctly build. Have been unable to test on RTEMS 4

**Testing performed**
Tested on RTEMS 5 and worked. 

**Expected behavior changes**
Able to build 

**System(s) tested on**
Ubuntu 20.04 RTEMS 5

**Additional context**
Needs to be tested on RTEMS 4

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",CCB:FastTrack,https://github.com/nasa/osal/pull/748
"Fix #746, Add UtDebug message from OS_printf stub","**Describe the contribution**
Fix #746 - added UtDebug in OS_printf stub

**Testing performed**
Built tests and confirmed debug output

**Expected behavior changes**
Outputs the OS_printf input as a debug message from stub

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/747
Output format string as debug message in OS_printf stub,"**Is your feature request related to a problem? Please describe.**
OS_printf stub is silent, more helpful when debugging tests to see at minimum the format string

**Describe the solution you'd like**
Output the format string as a debug messae similar to CFE_EVS_SendEvent

**Describe alternatives you've considered**
Could put in a hook, but this is general and useful enough to add

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/osal/issues/746
vxWorks OSAL missing OS_WaitForStateChange_Impl,"**Describe the bug**
After the merge of vxworks7 support, a rebase was done. It turns out a new required function OS_WaitForStateChange_Impl in the implementation is missing.

**System observed on:**
p5020
vxworks7

**Reporter Info**
Steven Seeger, EFSI, Inc. (GSFC-582)
",duplicate,https://github.com/nasa/osal/issues/745
osal Integration Candidate: 2021-01-05,"**Describe the contribution**

Fix #574, Document UtAssert_Message parameters
Fix #598, Correct UtAssert_ZERO description typo`
Fix #707, Resolve issues of auto tests in parallel build
Fix #726, Resolve user's guide generation warnings


**Testing performed**
See Github Actions <https://github.com/nasa/cFS/pull/172/checks>

**Expected behavior changes**

PR #713 - Document UtAssert_Message parameters, also adds ""see also"" note for helper macros.

PR #714 - Fix doxygen typo

PR #721 - Replace `OS_BinSemFlush` with `OS_BinSemGive` to prevent a rare race condition. Change the port numbers to be different from network test for when tests are run in parallel.

PR #728 - Fix doxygen format errors. Usersguide now builds without warnings.

PR #731 - Suppress invalid cppcheck warning in `OS_WaitForStateChange`

PR #741 - Add cppcheck static analysis workflow to osal CI 

**System(s) tested on**

Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/172>

**Third party code**
none

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@zanzaben 
@astrogeco ",,https://github.com/nasa/osal/pull/744
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns. 

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal
","docs, security",https://github.com/nasa/osal/issues/743
Scrub API's for null pointer checks,"**Is your feature request related to a problem? Please describe.**
All pointers should be checked for NULL prior to accessing, a few cases where this was observed have been fixed but need to do a complete scrub.

**Describe the solution you'd like**
Scrub and add any missing null pointer checks

**Describe alternatives you've considered**
None

**Additional context**
Use the new macros...

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/742
"Fix #740, Re-add automated static code analysis ","**Describe the contribution**
Fix #740

**Testing performed**
See action runs in fork <https://github.com/astrogeco/osal/actions>

**Expected behavior changes**
Static analysis workflow runs on pull requests and push.

Workflow saves log file as an artifact for analysis.

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of Travis CI to GitHub Actions migration

**Third party code**
n/a",CCB:FastTrack,https://github.com/nasa/osal/pull/741
Re-add static code analysis for pull requests,"**Describe the bug**
The Travis CI runner ran cppcheck which we don't have anymore

**To Reproduce**
Submit pull request, notice that Travis CI doesn't run anymore.

**Expected behavior**
A success or failure report of a cppcheck run.

**Code snips**
Check from travis.yml

```
  #cppcheck flight software osal/src/bsp, osal/src/os
    - cppcheck --force --inline-suppr --std=c99 --language=c --error-exitcode=1
      --enable=warning,performance,portability,style --suppress=variableScope
      --inconclusive --quiet src/bsp src/os 2>cppcheck_flight_osal.txt
    - |
      if [[ -s cppcheck_flight_osal.txt ]]; then
        echo ""You must fix cppcheck errors before submitting a pull request""
        echo """"
        cat cppcheck_flight_osal.txt
        exit -1
      fi
```

**System observed on:**
n/a

**Additional context**
Part of ongoing TravisCI to GitHub Actions migration
","bug, continuous-integration",https://github.com/nasa/osal/issues/740
"Fix #692, fix or statements","**Describe the contribution**
Fixes #692
fixed the or statement to correctly compare against both options. 

**Testing performed**
Build and run unit test

**Expected behavior changes**
will correctly cath failures when they happen

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",,https://github.com/nasa/osal/pull/739
fix #737 - deprecates UT_Stub_GetForceFail() and allows NULL for the …,"…value pointer

Closes #737 

**Describe the contribution**
The `UT_Stub_SetForceFail()` was deprecated and replaced with `UT_Stub_SetDefaultReturnValue()`. Same has been done for `UT_Stub_ClearForceFail()` and `UT_Stub_CheckForceFail()`. Also, made it so that NULL can be passed as the `value` out parameter to `UT_Stub_CheckDefaultReturnValue()` for when a user just wants to check whether it's set or not but doesn't care what the value is.

**Testing performed**
Built and ran SB UT.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",duplicate,https://github.com/nasa/osal/pull/738
deprecate UT_Stub_CheckForceFail(),"With the deprecation of `UT_Stub_SetForceFail()`, its functionality was replaced with `UT_Stub_SetDefaultReturnValue()`.

The `UT_Stub_CheckForceFail()` should likewise be deprecated. 

https://github.com/nasa/osal/blob/d698a4d7ddc66826a4c7c287468b5f1aa6ca372f/ut_assert/inc/utstubs.h#L321","unit-test, deprecate",https://github.com/nasa/osal/issues/737
"Fix #712, Replace UT_OS_LOG with UtPrintf","**Describe the contribution**
Fix #712 - replaces UT_OS_LOG with UtPrintf (it was just a duplicated macro)

**Testing performed**
Standard build and run of unit tests

**Expected behavior changes**
No change, just code duplication cleanup

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/736
"Fix #429, OS_time_t with single tick counter","**Describe the contribution**

Use a single 64-bit tick counter to implement `OS_time_t`, rather than a split 32 bit seconds + 32 bit microseconds counter.
    
This benefits in several ways:

- increases the timing precision by 10x (0.1us ticks)
- increases the representable range by 400x (+/-14000 yrs)
- simplifies addition/subtraction (no carry over)
- avoids ""year 2038"" bug w/32-bit timestamps

Fixes #429 

**Testing performed**
Build and run all unit tests, sanity check CFE

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 + pc686 (qemu)

**Additional context**
This is the final step listed in issue #429, and it depends on several dependencies being merged already:

- PR nasa/cfe#1058
- PR nasa/psp#228
- PR nasa/osal#723

It is submitted as a separate PR from #723 due to the dependencies, so it doesn't necessarily all have to be merged at once.  However if CCB wants to accelerate the rollout this can be all done in a single merge cycle.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

",,https://github.com/nasa/osal/pull/735
"Fix #644, Remove alignment macros","**Describe the contribution**
Fix #644 - removes the non-portable OS_PACK and OS_ALIGNED macros

**Testing performed**
Built and ran unit tests, no issues (no dependencies in bundle)

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/734
"Fix #732, change uint32 to size_t","**Describe the contribution**
Fixes #732

change prototypes should be the same, from uint32 to size_t

**Testing performed**
Build on RTEMS 5

**Expected behavior changes**
Able to build

**System(s) tested on**
Ubuntu 20.04 as build host for RTEMS 5.0.0

**Additional context**
Dependant on nasa/osal#704 to successfully build

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",dependency,https://github.com/nasa/osal/pull/733
RTEMS 5 needs size_t type to build,"**Describe the bug**
There are a few methods that won't build in rtmes 5 because they use uint32 instead of size_t

Relevant Files and line numbers:
bsp_console.c 44
os-impl-network.c 60
os-impl-queues.c 159, 256
os-impl-tasks.c 376

**To Reproduce**
Build for RTEMS 5 per instructions and default config. Build fails.

**Expected behavior**
Build should succeed.

**System observed on:**
Ubuntu 20.04 as build host for RTEMS 5.0.0


**Reporter Info**
Alex Campbell GSFC","bug, RTEMS",https://github.com/nasa/osal/issues/732
"Fix #730, Suppress invalid redundantAssignment warning from cppcheck","**Describe the contribution**
Fix #730 - suppresses the invalid warning.

**Testing performed**
Re-ran cppcheck and observed no warnings

**Expected behavior changes**
None except no warning

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/731
Resolve cppcheck redundantAssignment failure,"**Is your feature request related to a problem? Please describe.**
Running -
```
cppcheck --force --inline-suppr --std=c99 --language=c --error-exitcode=1 --enable=warning,performance,portability,style --suppress=variableScope --inconclusive --quiet src/bsp src/os 2>cppcheck_flight_osal.txt
```
Results in - 
```
[src/os/shared/src/osapi-idmap.c:753] -> [src/os/shared/src/osapi-idmap.c:765]: (style) Variable 'objtype->table_owner' is reassigned a value before the old one has been used.
```

**Describe the solution you'd like**
Resolve

**Describe alternatives you've considered**
None

**Additional context**
travis CI no longer running on main repo

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, continuous-integration",https://github.com/nasa/osal/issues/730
Add actions in workflow to replace former CI implementation ,"**Is your feature request related to a problem? Please describe.**
CI no longer running for PR's in nasa repo

**Describe the solution you'd like**
Implement CI as GitHub Actions

**Describe alternatives you've considered**
None

**Additional context**
Similar to transition in nasa/cFS

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, continuous-integration",https://github.com/nasa/osal/issues/729
"Fix #726, Resolve user's guide generation warnings","**Describe the contribution**
Fix #726 - closed group and removed old group.

**Testing performed**
`make usersguide` locally and confirmed no warnings

**Expected behavior changes**
No warnings on user's guide build

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/728
Users guide generation warning,"**Is your feature request related to a problem? Please describe.**
Generated from user's guide action from cFS
```
/home/runner/work/cFS/cFS/osal/src/os/inc/osapi-bsp.h:95: warning: end of file while inside a group
/home/runner/work/cFS/cFS/osal/src/os/inc/osapi-idmap.h:274: warning: end of file while inside a group
```

**Describe the solution you'd like**
Resolve warnings

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","bug, docs",https://github.com/nasa/osal/issues/726
"Fix #724, #722, rename ut clear force fail","**Describe the contribution**
Fixes #724  
Rename UT_ClearForceFail to UT_ClearDefaultValue

Fixes #722
Update the comments of UT_SetDefaultReturnValue to match the more general function

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**Additional context**
There will be more pull requests from other sub modules that are dependant on this. 

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/osal/pull/725
Change UT_ClearForceFail to UT_ClearDefaultReturnValue,"**Is your feature request related to a problem? Please describe.**
UT_SetForceFail was deprecated in favor of UT_SetDefaultReturnValue, so UT_ClearForceFail is no longer a mirror

**Describe the solution you'd like**
Change UT_ClearForceFail to UT_ClearDefaultReturnValue

**Describe alternatives you've considered**
None

**Additional context**
See also #722, the comments should be updated for UT_SetDefaultReturnValue and UT_ClearDefaultReturnValue

**Requester Info**
Jacob Hageman - NASA/GSFC","unit-test, deprecate",https://github.com/nasa/osal/issues/724
"Fix #429, add OS_time_t access functions","**Describe the contribution**

Initially the first commit just adds access functions to convert/extract different units from an `OS_time_t` value - so that other code in CFE/PSP/Apps can be updated to use the access functions and thereby not break when the internal time definition changes.  There will then be a second commit that updates the actual time format.

It also uses OS_time_t in the ""stat"" structure used by the file module rather than having this be a `int32`.

Minor detail - also updates the pointer argument to `OS_SetLocalTime()` to be `const`

Fixes #429

**Testing performed**
Build and sanity check CFE

**Expected behavior changes**
Initially just a set of new access functions - no impact to behavior
Eventually will change the internal format of `OS_time_t` which will break any code that is _not_ using the access functions.
Prototype change of `OS_SetLocalTime()` should be backward compatible.

**System(s) tested on**
Ubuntu 20.04 
RTEMS 4.11.3 

**Additional context**
Initial commit which just adds the access functions and updates OSAL can be merged at any time, it does not have any dependencies and does not break anything.

Second commit will depend on nasa/cfe#1051 and nasa/psp#227 (may be a separate PR depending on how review/merge cycles go)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/723
update UT_SetDefaultReturnValue comment,"While I agree with the new function name, the comments are duplicated from the (now deprecated) `UT_SetForceFail()`, I suggest a re-write of the comments for this important function.

https://github.com/nasa/osal/blob/d698a4d7ddc66826a4c7c287468b5f1aa6ca372f/ut_assert/inc/utstubs.h#L183","enhancement, docs, unit-test",https://github.com/nasa/osal/issues/722
Fix #707 change sem flush to solve race condition,"**Describe the contribution**
fixes #707
Removed Sem flush and changed it to sem give to prevent a rare race condition. 
Change the port numbers to be different from network test for when test are run in parallel. 

**Testing performed**
Ran the unit tests in parallel 

**Expected behavior changes**
Test shouldn't lock or fail 

**System(s) tested on**
Ubuntu 20.04


**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/721
"Fix #606, Resolve cast-align error in VxWorks OS_TaskGetId_Impl","**Describe the contribution**
Fix #606 - store taskTCB return in a `void *`, then cast to `OS_impl_task_internal_record_t *` just for the pointer math to avoid a strict alignment compiler error

Note the error was observed with cast-align=strict on Ubuntu 20.04 with ENABLE_UNIT_TESTS=true

**Testing performed**
Built without the error after fix.  Built/ran unit tests on Ubuntu 18.04 and they all passed.

**Expected behavior changes**
None other than avoid compiler error

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04 (and 20.04 to confirm strict alignment error resolved)
 - Versions: Bundle + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/720
4 different ways of identifying file systems,"**Is your feature request related to a problem? Please describe.**
Unlike other OSAL resources, the File System related calls (OS_mount/unmount/mkfs/rmfs/initfs etc) identify the target by string rather than as a numeric ID.  

Aside from being inconsistent, this is also ambiguous and confusing because the are actually 4 different possible strings use here:
1. Device name (e.g. ""/ramdev0"")
2. Volume name (e.g. ""RAM"")
3. System Mount point (e.g. ""/dev/shm/osal:RAM"")
4. Virtual Mount point (e.g. ""/ram"")

Furthermore not all functions use the same name.  When implementing OS_FileSysStatVolume I noticed that the old OS_fs(Bytes|Blocks)Free() and OS_chkfs use virtual mount point (4), while the others use device name (1).  The OS_FS_GetPhysDriveName() actually returns the system mount point (3) not the actual device (1) that other calls require. 

**Describe the solution you'd like**
Ideally, change these APIs to work with IDs rather than names because IDs are not ambiguous.  One can also find/lookup an ID based on any of the names (lookup functions don't all currently exist but easy to add).

**Describe alternatives you've considered**
If API changes are not possible at this stage, then then we should at least be consistent and choose one name to use.  Probably the device name (1) should be the one, as it seems the one used by most calls currently.

**Additional context**
The fact that `OS_chkfs()` uses a virtual mount point should probably be considered a bug, as it implies the file system is already mounted at the time the call is done.  Most OS's do not permit a file system check of a mounted device.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/719
Deprecate OS_fsBlocksFree and OS_fsBytesFree,"**Is your feature request related to a problem? Please describe.**
As noted in #573 these functions return the value directly, which does double duty as an error code and therefore is limited to being `int32` - but this type is not big enough for large file systems.

**Describe the solution you'd like**
Deprecate these functions in favor of `OS_FileSysStatVolume()` added in PR #717, which returns the information as a OS_statvfs_t object containing all relevant information.

**Additional context**
References to these functions within OSAL tests need to be fixed/replaced, as well as references in CFE/apps.  This is a follow-on/completion of the fix for #573 / PR #717.  Deprecation has to be done separately because the new function needs to exist before the refs can be changed.

**Requester Info**
Joseph Hickey, Vantage Systems. Inc.
","enhancement, deprecate",https://github.com/nasa/osal/issues/718
"Fix #573, add OS_FileSysStatVolume","**Describe the contribution**
Add OS_FileSysStatVolume as replacement for OS_fsBytesFree and OS_fsBlocksFree.

Fixes #573

**Testing performed**
Run all unit tests.

**Expected behavior changes**
New API for getting stats on file system.
Uses existing OS_FileSysStatVolume_Impl call - just exposes it in public API.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This PR is only adding a new API, it is not (yet) deprecating the existing OS_fsBlocksFree/OS_fsBytesFree calls.  Applications and CFE will need an update before these calls can be deprecated, but the new API needs to be in place before the existing refs can be fixed.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/717
"Fix #544, add pointer check","**Describe the contribution**
Add parameter check to OS_SocketSendTo and adjust coverage test to validate.

Fixes #544 

**Testing performed**
Run all unit tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/716
"Fix #445, add pointer parameter checks","**Describe the contribution**
Add OS_CHECK_POINTER macros to OS_ConvertToArrayIndex and OS_TimeBaseGetFreeRun.

Fixes #445

**Testing performed**
Run all unit tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/715
"Fix #598, Correct UtAssert_ZERO description typo","**Describe the contribution**
Fix #598 - typo fix

**Testing performed**
CI - comment change only

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","docs, unit-test, CCB:FastTrack",https://github.com/nasa/osal/pull/714
"Fix #574, Document UtAssert_Message parameters","**Describe the contribution**
Fix #574 - document UtAssert_Message parameters, also adds see also for helper macros

**Testing performed**
CI, comment change only.

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
Worth considering making this internal, no identified use case for direct call.  Would be confusing to output any message other than info/debug.

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","unit-test, CCB:FastTrack",https://github.com/nasa/osal/pull/713
Replace UT_OS_LOG use in unit-tests with UtPrintf,"**Is your feature request related to a problem? Please describe.**
UT_OS_LOG is the same as UtPrintf

**Describe the solution you'd like**
Remove duplicate macro

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","good first issue, unit-test",https://github.com/nasa/osal/issues/712
"Fix #471, order of operations for delete all","**Describe the contribution**
When cleaning up for shutdown, delete resources that have a task/thread first, followed by other resource types.  This helps avoid possible dependencies as running threads might be using the other resources.

Fixes #471

**Testing performed**
Build and run unit tests
Sanity check CFE, ensure shutdown works as expected

**Expected behavior changes**
No visible impact ... internally the tasks are deleted first during shutdown, which only has an impact if/when tasks are actively using other OSAL resources.

**System(s) tested on**
Ubuntu 20.04 (native)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/711
"Fix #708, chmod error handling","**Describe the contribution**
Implement better error translations in the OS_FileChmod_Impl() function.
Also corrects a file handle leak.

This makes it return OS_ERR_NOT_IMPLEMENTED when run on a file system that does not have permissions, which in turn causes the unit test to be skipped rather than fail.

Fixes #708 

**Testing performed**
Build and run all unit tests

**Expected behavior changes**
The chmod test is now skipped on VxWorks rather than failing.

**System(s) tested on**
Ubuntu 20.04 (native)
VxWorks 6.9 (mcp750)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/710
"Fix #580, improve FS_BASED mounts on VxWorks","**Describe the contribution**
The mount/unmount implementation was not adequately checking for and handling the `FS_BASED` (pass -through) mapping type - which should be mostly a no-op.  But to be consistent with POSIX it should also create a mount point directory if it does not already exist when using this mapping type.

Adds a documentation note to `OS_FileSysAddFixedMap()` regarding the limitation that the virtual mount point cannot be empty - so `OS_FileSysAddFixedMap(.., ""/"", ""/"")` does not work - never did.  However `OS_FileSysAddFixedMap(.., ""/"", ""/root"")` does work and allows one to open files in the root as ""/root/<file>"" from OSAL applications.

Fixes #580

**Testing performed**
Build and run all unit tests on native
Sanity check CFE
Confirm behavior of `OS_FileSysAddFixedMap()` + `OS_TranslatePath()` when mapping to root FS.

**Expected behavior changes**
Mount point directories do not need to be already existing when using `OS_FileSysAddFixedMap`

**System(s) tested on**
Ubuntu 20.04 (native)
VxWorks 6.9 (mcp750)

**Additional context**
Auto-creating the mount point dir is relevant to unit tests - this simplifies running the unit tests by not requiring the user to pre-create this directory.  Otherwise without this one gets unit test failures if the directory doesn't already exist.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",dependency,https://github.com/nasa/osal/pull/709
"More test failures related to ""chmod"" implementation","**Describe the bug**
The current `OS_FileChmod_Impl` on POSIX has some issues/limitations:

1. A while back this was changed from using the filename based calls to using a file descriptor, which ""protects"" against a theoretical issue where the file may get renamed while the operation is in progress.  However this introduced a potential for a file descriptor leak --  If the `fstat()` call fails, the `OS_ERROR` is returned, but the file descriptor is left open.
2. Any failure is reported as the generic `OS_ERROR` ... This should do a better job of translating the `errno` to a more specific error code.  In particular, not all file systems support unix-style file permissions - such as the very common FAT32/DOSFS - and in this case the `fchmod()` call is likely to return -1 with `errno` set to something like `ENOTSUP` or `ENOSYS`.
3. Also a file system can be mounted read only, which also prevents chmod() from working.

The main issue of 2+3 above is that the generic `OS_ERROR` code causes the chmod unit test to fail. 

**To Reproduce**
Run the chmod test on VxWorks using a DOSFS mounted filesystem (e.g. CF:0 on the MCP750 test platform).

**Expected behavior**
The chmod test cases should be skipped without failing the overall test in cases where the mounted file system does not support/allow permission to be changed.  

**System observed on:**
VxWorks 6.9 on MCP750

**Additional context**
So this is just a matter of translating the `errno` values for these conditions into `OS_ERR_NOT_IMPLEMENTED` instead of `OS_ERROR`, because the test is already implemented to check for and skip the rest of the test when it gets this return code.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, posix",https://github.com/nasa/osal/issues/708
"Race condition in ""select"" test","**Describe the bug**
Running the OSAL select test, I ran into a deadlock situation where the ""multi"" test got stuck and never finished.

**To Reproduce**
Hit or miss... Run test repeatedly on a system with other loads (e.g. parallel builds)

**Expected behavior**
Test should complete

**Code snips**
Checking the test status/backtrace it looks like two tasks (main + ""Server_Fn"") are waiting on the binary sem.  In particular the Server_Fn is stuck here:

https://github.com/nasa/osal/blob/d698a4d7ddc66826a4c7c287468b5f1aa6ca372f/src/tests/select-test/select-test.c#L162

While the main task is waiting in the teardown code (the `TestSelectMultipleRead` has completed, and it has invoked `Teardown_Multi` which in turn invokes `Teardown_Single` here):

https://github.com/nasa/osal/blob/d698a4d7ddc66826a4c7c287468b5f1aa6ca372f/src/tests/select-test/select-test.c#L273

**System observed on:**
Ubuntu 20.04

**Additional context**
This is likely related to the use of `OS_BinSemFlush`.  We should probably deprecate this function, as I cannot see how this can ever be used safely without it being a race condition.  VxWorks offers it which (I think) is why OSAL also offers it, but its a fundamentally broken concept.

I can confirm that looking at the traceback in gdb, the flush_count is indeed already 1 - meaning the flush had already happened by the time the Server_Fn entered the bin sem take routine.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, unit-test",https://github.com/nasa/osal/issues/707
"Fix #697, use POSIX dir implementation on VxWorks6","**Describe the contribution**

Instead of keeping/maintaining a one-off implementation for VxWorks 6, use the POSIX implementation for this module.  The only incompatibility is the prototype for mkdir() which is missing the second argument.  This can be worked around with a simple compatibility macro that is only enabled for VxWorks 6.x builds.  This replaces previous PR #698.

Fixes #697.

**Testing performed**
Build and run all unit tests
Sanity check CFE

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04 (native)
VxWorks 6.9 (mcp750)

**Additional context**
The actual posix dir implementation did not change at all - just using it on VxWorks 6.9 too.

Also translates/converts the coverage test cases from vxworks specific to the portable dir implementation, which benefits VxWorks7, RTEMS and POSIX too.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/706
Tests that use network stack do not run on RTEMS,"**Is your feature request related to a problem? Please describe.**
The RTEMS network stack needs to be explicitly initialized in a platform-specific manner.  However, the barebone/minimal BSP that runs the unit tests does not do this initialization.  Therefore when running the network tests, it just gives an immediate error:

```
[BEGIN] 01 TestDatagramNetworkApi
rtems-net: network sema obtain: network not initialised

fatal error, exiting
```

**Describe the solution you'd like**
Not clear at this point.  The network init is quite board specific (refers to a specific nic driver) so probably doesn't fit as part of the OSAL BSP.  Suggest just documenting this limitation.


**Additional context**
As the network tests only use the loopback address (127.0.0.1) it might be possible to bring up the RTEMS network stack with only this interface and no ""real"" nic.  That might be a possibility to get these tests to run without making the BSP too complicated.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, RTEMS",https://github.com/nasa/osal/issues/705
"Fix #642, 645, 701, 702, 703 - OSAL global table management","**Describe the contribution**
Address multiple issues with the OSAL global table management - general cleanup and bug fixes.

Fixes #702 - use iterators whenever possible
Fixes #645 - use an unlock key rather than task ID so OS_TaskExit() doesn't trigger a warning
Fixes #701 - general cleanup of lock/unlock impl and remove redundant logic
Fixes #703 - unlock global tables during create/delete 
Fixes #642 - keep threads ""attached"" in POSIX, so they can be joined when deleted.

**Testing performed**
Build and run all tests for all platforms
Sanity check CFE and also confirmed RELOAD/RESTART commands are working correctly.

**Expected behavior changes**
No longer triggers warning with OS_TaskExit() on VxWorks (see #645)
OS_TaskDelete() on POSIX does not return until the task has actually exited (see #642)

Most other changes are internal only and do not change behavior.

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11.3 + pc686
VxWorks 6.9 + mcp750

**Additional context**
Noted other issues when running some unit tests on VxWorks target that are not related to this change / preexisting issues.  Will file separate bugs about those.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/704
Unlock globals during create/delete ops,"**Is your feature request related to a problem? Please describe.**
For a number of resource create/delete operations, they may take some non-deterministic amount of time to execute in the system, and may require obtaining some type of mutex in the underlying C library too (e.g. if something invokes malloc).  This is especially true of creating and deleting tasks, which may need to malloc() memory for the stack, and need to create a new task resource in the kernel.

Because of this, OSAL should not hold its own global table mutex while the whole operation takes place, as this will also prevent _other_ unrelated ops from completing.

**Describe the solution you'd like**
These operations should reserve an entry in the table but mark it as reserved, not with a normal ID (so distinct from a normal entry).  It can then unlock the global table and complete the non-deterministic parts of the operation, then re-lock when complete.

**Additional context**
This is required for #642, already have it implemented but felt it was worth splitting into a separate issue/commit for tracking purposes.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/703
Replace remaining loops through all objects with iterators,"**Is your feature request related to a problem? Please describe.**
Previous changes introduced the concept of an iterator in the OSAL shared layer to iterate across all objects of a particular type.  However there remains a few cases where code is still doing a ""for"" loop through each index.

**Describe the solution you'd like**
For consistency of operation, these should be converted to iterators.

**Additional context**
Importantly the iterator handles locking of the global table.  Using the iterator ensures that this is done consistently, and provides the appropriate token object for any calls to other functions.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/702
Clean up inconsistent implementation of OS_Lock_Global_Impl/OS_Unlock_Global_Impl,"**Is your feature request related to a problem? Please describe.**
Only the ""shared"" layer invokes these impl (low level) APIs - they are not invoked directly by applications, and the shared layer has already done its error checking.  Therefore they should never be invoked with a bad object type, and there is no recourse if the implementation fails.

**Describe the solution you'd like**
- Make sure ""shared"" layer is doing the appropriate scrubbing of object type before calling ""impl"" layer.
- Remove duplicate/unnecessary error checking in ""impl"" layer that was already performed at ""shared"" layer.
- Make ""impl"" functions return `void` - these should never fail, and there is no feasible recovery if they do.  The only way they can fail is if they weren't initialized properly.  The OS_DEBUG message that is printed is the only recourse.

**Additional context**
Error checking should be consolidated at ""shared"" layer, layer whenever possible, as this keeps ""impl"" layer simpler, and also ensures that the same error checking is done on all platforms - so all platforms work the same.  Right now the error checking in these functions is not quite the same between POSIX/VxWorks/RTEMS.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/701
Update unit tests to work with bug and argument macro non-default settings,"**Is your feature request related to a problem? Please describe.**
#688/#689 implement bug and argument check macros.  The default setting matches what unit tests currently check for.  Any other setting won't pass unit tests (disabling checks will cause segfaults/errors, strict will abort the tests).

**Describe the solution you'd like**
- Implement argument check tests in a way they can be easily skipped based on settings
- Add option to skip

**Describe alternatives you've considered**
None.

**Additional context**
Issue generated from conversion in #689

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/osal/issues/700
Build broken on RTEMS 4.11,"**Describe the bug**
A recent change has broken the build for RTEMS (again).  These are printf format warnings.

```
/home/joe/code/cfecfs/github/osal/src/tests/select-test/select-test.c: In function 'TestSelectSingleRead':
/home/joe/code/cfecfs/github/osal/src/tests/select-test/select-test.c:321:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'uint32' [-Werror=format=]
     UtAssert_True(StateFlags == 0, ""OS_SelectSingle() (%d) == None"", StateFlags);
     ^
/home/joe/code/cfecfs/github/osal/src/tests/select-test/select-test.c:331:5: error: format '%d' expects argument of type 'int', but argument 6 has type 'uint32' [-Werror=format=]
     UtAssert_True(StateFlags == OS_STREAM_STATE_READABLE, ""OS_SelectSingle() (%d) == OS_STREAM_STATE_READABLE"",
     ^
/home/joe/code/cfecfs/github/osal/src/tests/select-test/select-test.c: In function 'TestSelectSingleWrite':
/home/joe/code/cfecfs/github/osal/src/tests/select-test/select-test.c:436:9: error: format '%d' expects argument of type 'int', but argument 6 has type 'uint32' [-Werror=format=]
         UtAssert_True(StateFlags == 0, ""OS_SelectSingle() (%d) == None"", StateFlags);
         ^
```

Appears to be added by PR #683 ....

**To Reproduce**
Build for RTEMS 4.11 per instructions and default config.  Build fails.

**Expected behavior**
Build should succeed.

**System observed on:**
Ubuntu 20.04 as build host for RTEMS 4.11.3 / pc686 BSP.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/699
"Fix #697, use VERSION_LESS instead of VERSION_GREATER_EQUAL","**Describe the contribution**
The VERSION_GREATER/LESS_EQUAL comparisons wer not introduced until CMake 3.7.  However, the basic VERSION_GREATER/LESS (no equal) comparison is much older, and 2.8.12 has no complaint about it.  So use VERSION_LESS and invert the condition.

Fixes #697 

**Testing performed**
Build for VxWorks 6.9 on RHEL 7.9

**Expected behavior changes**
Makefiles are generated and build succeeds.

**System(s) tested on**
VxWorks 6.9 using RHEL 7.9 host

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",invalid,https://github.com/nasa/osal/pull/698
Build broken for VxWorks on RHEL 7,"**Describe the bug**
The newest RHEL 7 comes by default with CMake version 2.8.12.2 in the official OS repos.
However the ""VERSION_GREATER_EQUAL"" comparison was added in 3.7.  Thus the build became broken on this platform after merging #610.

**To Reproduce**
Attempt to build for VxWorks using RHEL 7.x as the host platform.  Make file generation fails immediately with:

```
CMake Error at /home/jphickey/cfecfs/github/osal/src/os/vxworks/CMakeLists.txt:48 (if):
  if given arguments:

    ""CMAKE_SYSTEM_VERSION"" ""VERSION_GREATER_EQUAL"" ""7.0""

  Unknown arguments specified
```

**Expected behavior**
Build should succeed.

**Code snips**
https://github.com/nasa/osal/blob/d698a4d7ddc66826a4c7c287468b5f1aa6ca372f/src/os/vxworks/CMakeLists.txt#L48

**System observed on:**
Red Hat Enterprise Linux Workstation release 7.9 (Maipo)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, vxworks",https://github.com/nasa/osal/issues/697
"Fix #743, Create OSAL Security Policy Markdown","**Describe the contribution**
Fixes #743 
Created a draft of a security policy markdown file for OSAL. The purpose of a security policy is to inform users on how to submit bugs or vulnerabilities. It is ideal to include a section for supported versions.

**Additional context**
Optional sections that may be included:

- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal","docs, CCB:FastTrack, security",https://github.com/nasa/osal/pull/696
"Fix #229, mqueue functional test","**Describe the contribution**
Fixes #229 
Generalized queue timeout test to also test message queue functionality 

**Testing performed**
Build and run the unit tests 

**Expected behavior changes**
Adds 2 seconds to the unit tests 

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/osal/pull/695
"Fix #591, add test teardown failure to test summary","**Describe the contribution**
Fixes #591
added test teardown failures to the test summary 
also changed the print out to use the same style as startup failures. 

**Testing performed**
Used a test that always fails teardown and verified that it was reported in the test summary. 

**Expected behavior changes**
N/A

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",,https://github.com/nasa/osal/pull/694
OSAL should separate task allocation from task activation,"**Is your feature request related to a problem? Please describe.**
Currently `OS_TaskCreate()` both allocates and activates a task.  However in embedded software it is often useful to pre-allocate a task - which creates the stack and ID and anything else that might fail - but hold it stopped in the kernel scheduler while other initialization is completed.  When the app is ready, it makes a separate call to activate the previously-allocated task.  

The benefit is that the activation step doesn't do any new allocation so it is very unlikely to fail (simplifying error clean up), as well as being fast to execute as it just unblocks the task.

Most RTOS's actually do it this way internally, where VxWorks uses `taskInit` followed by `taskActivate`, and RTEMS uses `rtems_task_create` followed by `rtems_task_start`.  Notably POSIX/pthreads does not separate these two actions, but easy to mimic/replicate via the new OS_WaitForStateChange() function.

**Describe the solution you'd like**
Add two new functions:
 - `int32 OS_TaskAllocate(...)`, similar to OS_TaskCreate but without starting the task
 - `int32 OS_TaskActivate(...)`, which starts the task

The existing `OS_TaskCreate()` becomes just a combination of the two.  Which it really as it is today anyway, but the two are coupled down in the `OS_TaskCreate_Impl` layer and therefore cannot be invoked separately in OSAL user applications.  This would bring it up one layer and (optionally) allow the app developer to leverage it, if they want.

**Additional context**
The ""timebase"" objects on VxWorks also would benefit from having a separate allocate/start. 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/693
Incorrect assertions in network-api-test,"**Describe the bug**
The test is not correctly checking the return value in a few places.  For example:

https://github.com/nasa/osal/blob/9407cdf0be77521d850c587c0f749779c4656c3e/src/tests/network-api-test/network-api-test.c#L129

https://github.com/nasa/osal/blob/9407cdf0be77521d850c587c0f749779c4656c3e/src/tests/network-api-test/network-api-test.c#L133

**To Reproduce**
Make the subject code return something other than OS_SUCCESS or OS_ERR_NOT_IMPLEMENTED.  Assert statement will still be true.

**Expected behavior**
Probably should be `actual == OS_SUCCESS || actual == OS_ERR_NOT_IMPLEMENTED`

**System observed on:**
N/A - inspection

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test",https://github.com/nasa/osal/issues/692
Combine initialized and shutdown flags into one,"**Is your feature request related to a problem? Please describe.**
The OSAL global state structure has two flags, one for ""initialized"" (set during OS_API_Init) and one for shutdown (set during OS_ApplicationShutdown).  Although similar in purpose, they are defined and work differently.

**Describe the solution you'd like**
Should combine these into just one state variable, which should be 0 prior to initialization (i.e. such that the application loader provided by the OS will zero it before OSAL loads), then set to a nonzero value for normal runtime, and another special nonzero value for shutdown.

**Additional context**
Just a suggestion for cleaning up/simplifying what is already there...

Structure defined here:
https://github.com/nasa/osal/blob/9407cdf0be77521d850c587c0f749779c4656c3e/src/os/shared/inc/os-shared-common.h#L40-L67.

Using a full 32 bit value with all bits - even though there are only a few states - provides protection in case of a random bit flip.  At least in the case of an application shutdown, the entire system operation shouldn't be dependent on a single bit in memory.  This is why the current ""shutdown flag"" is not just a simple 0/1.  So this should be preserved, but it should be trivial to combine this with the ""Initialized"" field.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/691
OSAL Integration Candidate: 2020-12-22,"**Describe the contribution**
Combines IC-2020-12-15 and 2020-12-22

Fix #377 Add ""OSAL Select"" functional tests
Fix #410, breakup OSAL includes
Fix #542, Avoid UT failure if SEM_VALUE_MAX >= UINT32_MAX
Fix #569, Check and report sysconf error return
Fix #610, Add vxworks 7 support
Fix #670, clean up task definitions in core test
Fix #673 #677, improve global lock on POSIX
Fix #679, Convert OSAL Config Guide to markdown
Fix #686, Use errno in clock_getres error reporting 
Fix #688, Implement macro to facilitate argument checking


**Testing performed**
See <https://github.com/nasa/cFS/pull/162/checks>

**Expected behavior changes**
 
PR #659 - Convert the OSAL Configuration Guide from docx and pdf to a markdown file. 

PR #671 - Test Tasks do not run at 100%. Move all definitions and instantiations out of the core-test header file and reuse the already-existing single task definition.

PR #675 - Break up `osapi-os-*.h` files into units that correspond to the implementation units. Kept old header file names for compatibility.

PR #678 - Reworks the POSIX global lock implementation. Does not change the POSIX signal mask when locking/unlocking the global. 
  - Fixes a race condition. 
  - Adds a condition variable to the global lock structure. improves handling of tasks competing for access to the same object. 
  - No longer changing signal masks repeatedly/unexpectedly. May be relevant to some BSP/driver developers.

PR #682 -   Checks return of sysconf for error and reports them. Only sets PageSize on success. If sysconf fails it provides a mechanism to avoid error propagation.

PR #687 -  Uses `errno` instead of status return from `clock_getres` with `strerror` reporting.

PR #599 - Adds support for VxWorks 7

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/162>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 
@skliper 
@zanzaben 
@ArielSAdamsNASA ",,https://github.com/nasa/osal/pull/690
"Fix #688, implement value check and bug report macros","**Describe the contribution**
Provide a set of macros to facilitate the argument value checking typically performed by every public API.

- `BUGREPORT()` is a printf-like macro that reports an invalid/unexpected condition has been found which indicates a bug in the application (i.e. uncorrectable).
- `BUGCHECK()` provides a simplified method to confirm a condition is true.  If not true, then it invokes `BUGREPORT` and (possibly) returns an error code to the caller.  This is used for items which __must__ be true or else indicate serious bugs where execution cannot/should not continue normally.
- `ARGCHECK()` confirms a condition is true, but amy take a mitigation/corrective action rather than treat it as a bug if false.  This can be used for ""normal"" range checking which should always produce a soft failure/error code response or enforce a suitable minimum/maximum value.

Fixes #688 

**Testing performed**
Execute the ""bin sem"" tests - Note only the ""bin sem"" implementation has been updated to use these macros thus far.
Confirm the basic modes work:

1. Normal/default mode where `OSAL_CONFIG_BUGCHECK_DISABLE=false` and `OSAL_CONFIG_BUGCHECK_STRICT=false`.  In this case the error code is returned and the test passes normally.  No change to behavior, but new error printfs are visible when running the test programs and they pass in bad values.  **Note**: this is the historical behavior and the application keeps running.  This requires the application to actually check/handle the error code.  As these indicate bugs, It is quite likely that the application does not expect the error response and/or is already in a bad state such that it will not handle it correctly, causing a more obfuscated failure later on.
2. Efficient mode where `OSAL_CONFIG_BUGCHECK_DISABLE=true` (`OSAL_CONFIG_BUGCHECK_STRICT` is not used).   May be used by applications that have reached a high level of stability and have been confirmed never to invoke functions with outrightly bad arguments.  Bug checks are not performed at all, but other argument checks still are.
3. Strict mode where `OSAL_CONFIG_BUGCHECK_DISABLE=false` and `OSAL_CONFIG_BUGCHECK_STRICT=true`.  In this mode any BUGREPORT actions result in an `abort()` which in turn intentionally causes the application to generate core dump if possible (i.e. if `ulimit -c` permits).  The core file may then be opened via debugger to determine the cause of the failure with full context available.  The intent here is to catch the error early while the context/stack is still present, and avoid the obfuscation that is likely to occur with (1).

**Expected behavior changes**
No impact to behavior (beyond additional debug printfs) when using default mode.
Other modes change behavior as noted above.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/osal/pull/689
Implement macro to facilitate argument checking,"**Is your feature request related to a problem? Please describe.**
OSAL and CFE contain many argument checks at the beginning of functions.  These would benefit from a macro to keep them consistent and readable in the application code, as well as offer alternative implementations/options for controlling how these are handled on an application-wide basis.

**Describe the solution you'd like**
Provide assert-style macros in OSAL that can facilitate argument checking, bug checking, and error handling.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/688
"Fix #686, Use errno in clock_getres error reporting","**Describe the contribution**
Fix #686 - Now uses errno instead of status return  from clock_getres with strerror reporting

**Testing performed**
Built and ran unit tests on linux, which doesn't mean much since it doesn't include this code in functional or coverage testing.
Requesting retest from @ericgilligan-nasa

**Expected behavior changes**
Fixed error message

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None.

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/pull/687
OSAL not reporting correct error string if clock_getres() call in OS_Posix_TimeBaseAPI_Impl_Init fails,"https://github.com/nasa/osal/blob/9407cdf0be77521d850c587c0f749779c4656c3e/src/os/posix/src/os-impl-timebase.c#L228

From clock_getres man pages:
> clock_gettime(), clock_settime() and clock_getres() return 0 for success, or -1 for failure (in which case errno is set appropriately).

The return value of `clock_getres()` is just 0 or -1. If it returns -1 in the event of a failure, it sets `errno`, so the `OS_DEBUG` line should use `strerror(errno)`, not `strerror(status)`, otherwise it always reports:

```
OS_Posix_TimeBaseAPI_Impl_Init():222:failed in clock_getres: Unknown error -1
```

",bug,https://github.com/nasa/osal/issues/686
File chmod test failing on RTEMS,"**Describe the bug**
When running unit tests against the latest baseline, there is a new failure on RTEMS:

```
[BEGIN] 04 TestChmod
OS_FileOpen_Impl():111:open(/RAM/Filename1): Invalid argument
[ FAIL] 04.001 file-api-test.c:257 - status after creat = -1
[ FAIL] 04.002 file-api-test.c:259 - status after close = -16
```

**To Reproduce**
Build with unit tests and execute on RTEMS 4.11 + pc686 + QEMU as documented in README.  The chmod test fails.

**Expected behavior**
Test should pass.

**System observed on:**
RTEMS 4.11.3, pc686 BSP, running in QEMU

**Additional context**
Appears to be introduced in PR #665  

Reinforces need (again) for CI script that runs the RTEMS build.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test, RTEMS",https://github.com/nasa/osal/issues/685
Implement better wait for status change in VxWorks/RTEMS,"**Is your feature request related to a problem? Please describe.**
As a follow on to previous PR #678, this implements a new ""impl"" function which waits for a global table change to complete using an OS-specific primitive.  But only POSIX/pthreads was initially updated to use a proper wait primitive for this operation.  For VxWorks and RTEMS, these continue to use a simple unlock - task delay - re-lock and poll for the change.

This works but can potentially introduce noticable extra/unnecessary delay.  In particular, during task startup the parent task is using the accessing record at the same time the child starts up and also needs to access the same record.  Therefore the child task will hit this wait condition.  On POSIX the child resumes immediately once the parent task has completed its use of the record.  But currently for VxWorks and RTEMS they must wait for the Task Delay to expire.

**Describe the solution you'd like**
Need to investigate/consider the various sync primitives that the OS provides, and use something more appropriate that will not add extra unnecessary delay or polling.

**Describe alternatives you've considered**
Keep polling.  It isn't ""broken"" in a strict sense - the contention should be resolved and the right thing will happen after the delay expires.  It's just not what the user might expect (that is, there might be a millisecond or two delay between OS_TaskCreate returning and the user task actually running).

**Additional context**
RTEMS Barrier might be an option.  However I do not see any way to sync a barrier with a condition (like a POSIX condition variable) - so these leave open the possibility that the other task finishes its operation _just before_ the current task is about to wait - meaning it will end up waiting for an event that has already happened.

But so long as a timeout is _also_ used, that means it will just fall back to the timeout - so if this happens its not worse than what is implemented now.

Originally discussed in review of #678 at CCB 2020-12-09

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, RTEMS",https://github.com/nasa/osal/issues/684
"Fix #377, Add ""OSAL Select"" functional tests","**Describe the contribution**
Fixes #377 
Added new functional tests for the the select and select multiple functions. 

**Testing performed**
Ran the new tests. 

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/osal/pull/683
"Fix #569, Check and report sysconf error return","**Describe the contribution**
Fix #569 - Checks return of sysconf for error and if so reports, only sets PageSize on success.

**Testing performed**
Build and run unit tests

**Expected behavior changes**
None since sysconf should never fail, but if it does provides mechanism to avoid error propagation

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None.

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/682
"Fix #542, Avoid UT failure if SEM_VALUE_MAX >= UINT32_MAX","**Describe the contribution**
Fix #542 - avoids a potential unit test failure if an invalid semaphore value can not be passed in

**Testing performed**
Build and run unit tests, passed

**Expected behavior changes**
None.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Unable to reproduce error from issue (requires feedback from @mbenson1) but this fix avoids a potential error case.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/681
OSAL Integration Candidate: 2020-12-08,"**Describe the contribution**

Fix #120, Exit console loop on shutdown
Fix #290, Remove obsolete printf tests
Fix #608, Add RTEMS 5.x support
Fix #631, add new functional tests for OS_chmod
Fix #648, scrub array references in shared layer
Fix #648, rename internal fields for consistency
Fix #648, sanitize array refs on impl layer
Fix #649, use full object ID in timecb list
Fix #650, OS_chmod uses read or write access.
Fix #664, change type of sync callback argument to osal_id_t

**Expected behavior changes**

PR #661 - Add support for RTEMS 5.1. The change provides defines and necessary ifdefs so RTEMS 4.11 can continue to be supported.

PR #663 - `OS_chmod` now checks for either read or write access instead of just read access

PR #665 - Adds functional test for `OS_chmod`

PR #666 - Refactor the table array access across OSAL. Use a token concept in combination with a macro to obtain the table entry instead of indexing arrays directly. All access is then done through this table pointer. Use the full object ID in the timer call back list. Update the timer sync callback prototype. Pass the entire OSAL ID to the sync function, not just the index. This is technically an API change.

PR #667 - Replaces condition on forever loops to end on shutdown. Loops now exit on shutdown.

PR #674 - Removes obsolete printf tests that didn't work


**Testing performed**
See https://github.com/nasa/cFS/pull/160/checks

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/160>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@acudmore 
@jphickey 
@zanzaben ",,https://github.com/nasa/osal/pull/680
Convert doc/OSAL-Configuration-guide.doc to markdown,"**Is your feature request related to a problem? Please describe.**
Doc and PDF not GitHub friendly

**Describe the solution you'd like**
Convert to markdown and remove doc/pdf

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, docs",https://github.com/nasa/osal/issues/679
"Fix #673 and #677, update global locks","**Describe the contribution**
Reworks the POSIX global lock implementation.

- Does not change the POSIX signal mask when locking/unlocking the global.  Aside from being unnecessary, there was also a race condition in here (Fixes #673)

- Adds a condition variable to the global lock structure.  In the event that there is more than task competing for access to the same object, this allows the second task to be woken immediately instead of polling for a change (Fixes #677).

**Testing performed**
Build and run all unit tests
Build and sanity check CFE

**Expected behavior changes**
No longer changing signal masks repeatedly/unexpectedly.  (may be relevant to some BSP/driver developers)

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",conflicts,https://github.com/nasa/osal/pull/678
Implement better way to wait for status change,"**Is your feature request related to a problem? Please describe.**
If the object exists but is not in the correct state to access it, then the `OS_ObjectIdConvertToken()` will simply loop/retry the operation using `OS_TaskDelay()`.  This is not ideal and likely creates more delay than what is really needed.

https://github.com/nasa/osal/blob/fa0cffaf4610d7bc11fc867aef325f5823c32fab/src/os/shared/src/osapi-idmap.c#L367-L376

**Describe the solution you'd like**
Should use a proper primitive to wait until the underlying state changes and wake up the task immediately.

**Describe alternatives you've considered**
Continue using polling w/task delays (still an option for OS types which don't have the proper primitive)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/677
"Fix #642, synchronous task delete on POSIX","**Describe the contribution**
Make OS_TaskDelete actually wait for the task to exit, not simply a cancellation request.

Fix #642

**Testing performed**
Build and run CFE and all unit tests
Test the CFE ""reload app"" command as documented in nasa/cfe#952 which depends on having OS_TaskDelete actually exit the task

**Expected behavior changes**
No impact to external API/observed behavior.

Internally, the global tables are now _unlocked_ when using an EXCLUSIVE lock type, which is used for create and delete ops.  Instead of holding the global lock, the ID is set to ""RESERVED"" (FFFFFFFF) which effectively prevents any other task from obtaining a reference to that object.  This way OSAL can more safely call C library functions which block, including (but not limited to) pthread_join, while allowing ops on other records to proceed.

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11

**Additional context**
Required as part of the fix for CFE requirement documented in nasa/cfe#952.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",duplicate,https://github.com/nasa/osal/pull/676
"Fix #410, breakup includes","**Describe the contribution**
Break up `osapi-os-*.h` files into units which correspond to the implementation units.  The old header file names still exist for compatibility.

Fix #410

**Testing performed**
Build and run CFE and unit tests.

**Expected behavior changes**
None - just header refactoring, no actual change.

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11


**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/osal/pull/675
"Fix #290, Remove obsolete printf tests","**Describe the contribution**
Fix #290 - removes obsolete printf tests

**Testing performed**
None, this code didn't work to begin with.

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
None.

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/674
POSIX unnecessarily setting signal masks in global lock,"**Describe the bug**
As part of the global lock the POSIX implementation is setting the signal mask of the parent process.   However, the signal mask which is being set is the same mask that was already set in the parent process during the initialization.

**To Reproduce**
N/A

**Expected behavior**
The signal mask is already configured during initialization, so it should not be re-configured when locking/unlocking the global object tables.

**Code snips**
Locking: 
https://github.com/nasa/osal/blob/fa0cffaf4610d7bc11fc867aef325f5823c32fab/src/os/posix/src/os-impl-idmap.c#L98

Unlocking:
https://github.com/nasa/osal/blob/fa0cffaf4610d7bc11fc867aef325f5823c32fab/src/os/posix/src/os-impl-idmap.c#L149

**System observed on:**
Ubuntu 20.04

**Additional context**
I have investigated and I cannot find any justification for this anymore.  In older versions of OSAL the signal(s) were not blocked and therefore e.g. SIGINT, SIGALRM etc could be handled by any thread.  In this design it was likely important to make sure that a timer/interrupt doesn't get processed while internal OSAL ops are being performed.

But In the current OSAL design all of these signals are blocked initially in the main task - which all normal tasks then inherit.  So this is only resetting the same mask that was already configured.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/673
Add a stand-alone example build with osal (modernize src/examples/ tasking-example?),"**Is your feature request related to a problem? Please describe.**
Difficult for new user to set up a new trivial build using just OSAL.

**Describe the solution you'd like**
Helpful to include a simple CMake setup and a bare-bones c file to show simplest version of OSAL use.  There's src/examples, but it's not set up to build/run out of the box.  Also update the instructions in the users guide.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC - Stakeholder request",enhancement,https://github.com/nasa/osal/issues/672
"Fix #670, clean up task definitions in core test","**Describe the contribution**
Move all definitions and instantiations out of the header file. Reuse the single task definition that was already defined.

Also only define 3 instances of each type, as this is all that the test actually uses (no need for 20).

Fixes #670 

**Testing performed**
Build and run the unit tests

**Expected behavior changes**
Test Tasks do not run at 100%

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/671
osal core test is not a good example of how to write tasks,"**Describe the bug**
The `osal-core-test.c` refers to task functions that are actually defined (not just declared) in `osal-core-test.h`

Furthermore, these tasks just implement a tight loop:
https://github.com/nasa/osal/blob/fa0cffaf4610d7bc11fc867aef325f5823c32fab/src/tests/osal-core-test/osal-core-test.h#L254-L262

Multiple Problems:
1. Against coding standards to implement code in a header.
2. Same function is defined 20 times.
3. The task has no blocking statement at all, so it spins using 100% cpu after it is started.
4. On some operating systems (e.g. POSIX), unless async task cancellation is enabled this also means the task also cannot be deleted, because it will never execute a cancellation point.

Although the `osal-core-test` program passes and attempts to delete these tasks, in reality they keep running on POSIX and do not actually exit.

**To Reproduce**
View in a debugger after creating + deleting these tasks - the threads are still there.   CPU usage is also very high (e.g. 300%) for the remainder of the test because these tasks are spinning and do not exit.

**Expected behavior**
There is no need to redefine the same function. Recommend to use the `task_generic_no_exit()` function (which already exists) for all of these tasks.  This function also uses `OS_TaskDelay()` so it does not consume max CPU and also this serves as a cancellation point thus allowing the task to be deleted normally.

**System observed on:**
Ubuntu 20.04

**Additional context**
This becomes a bigger issue when #642 is done, as the tasks effectively are un-deletable.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test",https://github.com/nasa/osal/issues/670
type mismatch,"Variable return_code should be of type int32.
",duplicate,https://github.com/nasa/osal/pull/669
Add check of sem_wait/rtems_semaphore_obtain in console  loop,"**Is your feature request related to a problem? Please describe.**
Console loop could spin if the semaphore returns error.

**Describe the solution you'd like**
Check for real errors (not just interrupted), and exit loop if needed.

**Describe alternatives you've considered**
None.

**Additional context**
Mentioned in #667

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/668
"Fix #120, Exit console loop on shutdown","**Describe the contribution**
Fix #120 

Replaced condition on forever loops to end on shutdown. 

**Testing performed**
Built and ran unit tests for posix, built on vxworks (planning to build on RTEMs using the latest setup instructions...)

**Expected behavior changes**
- Loop will exit on shutdown

**System(s) tested on**
 - Hardware: cFS Dev server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this change

**Additional context**
What about also checking for a semaphore error on posix/rtems (or at least non-interrupt)?  Would make it consistent with vxworks.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/pull/667
"Fix #648, 649, 664 - refactor all table array access","**Describe the contribution**
Refactor the table array access across OSAL.  Multiple fixes combined into one PR as they depend on each other.

Fix #648 :  Rather than indexing arrays directly, use a token concept in combination with a macro to obtain the table entry.  All access is then done through this table pointer.  The token contains all relevant information about an object, importantly it has the ""truth"" as to what actual object ID is being manipulated.  This is necessary when operations such as new/delete may change the value in the table itself - the token always has the right value.

Fix #649 : Use the full object ID in the timer call back list.  This avoids complexities (and issues) associated with trying to regenerate the ID when the list changes.

Fix #664 : Update the timer sync callback prototype.  Pass the entire OSAL ID to the sync function, not just the index.  This is technically an API change (although they are both uint32, the value changes).  AFAIK this sync feature isn't actively used so this shouldn't really have an impact though.

**Testing performed**
Build and run all tests for native (POSIX), rtems 4.11 and VxWorks

**Expected behavior changes**
No impact to behavior - just a substantial cleanup of the internal patterns.

**System(s) tested on**
Ubuntu 20.04, rtems 4.11

**Additional context**
This is also necessary as a prerequisite to a couple other OSAL issues - where the original ID needs to be preserved across ops which create/delete entities.  The token provides this.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/666
"Fix #631, Add new functional tests for OS_chmod","**Describe the contribution**
Fixes #631 by adding new function tests

**Testing performed**
These new test, but ran them on the branch from #650 

**Expected behavior changes**
The new tests added to make test

**Additional context**
Dependant on #650 

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",dependency,https://github.com/nasa/osal/pull/665
Incorrect parameter type in Timebase sync callback,"**Is your feature request related to a problem? Please describe.**
Timebase sync callback prototype is currently defined as:

    typedef uint32 (*OS_TimerSync_t)(osal_index_t timer_id); /**< @brief Timer sync */

But indices (table position) is an internal OSAL value that shouldn't be used externally from OSAL.  More importantly, it is easy to alias, and cannot be differentiated if an object is deleted and then created again.

**Describe the solution you'd like**
Use the full ID value, not the index.  So the prototype would be:

    typedef uint32 (*OS_TimerSync_t)(osal_id_t timer_id); /**< @brief Timer sync */

**Describe alternatives you've considered**
Leave as is.

**Additional context**
I was going to roll this into a larger change, but figured this technically qualifies as an ""API change"" so writing it as a separate issue for specific awareness.  However, nothing outside of OSAL itself (and the included tests) actually implements a sync callback.  PSPs could, but none currently do, so this really shouldn't have any current impact to users.  But if users do start using this option, better to have the full ID value than just the index.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, public-api",https://github.com/nasa/osal/issues/664
fix #650 OS_chmod uses read or write access.,"**Describe the contribution**
Fixes #650 by checking for either read or write access instead of just read access 

**Testing performed**
Used the Chmod tests I am building in another branch that found this issue in the first place. 

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
-No changes 

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",,https://github.com/nasa/osal/pull/663
osal Integration Candidate: 2020-11-24,"**Describe the contribution**

Fix #559, Refactoring UT_SetForceFail to UT_SetDefaultReturnValue
Fix #635, add typedefs for osal stack and priority
Fix #655, use 3 argument form of open
Fix #651, use unsigned types in VxWorks stack calculation
Fix #559, cleaning up Rebasing
Fix #586, add functional test of one shot timer

**Testing performed**

**Expected behavior changes**

PR #646 - Rename `UT_SetForceFail` to `UT_SetDefaultReturnValue` since some functions that retain more than 1 value are not necessarily failing

PR #653 - Add a 5th timer to TimerTest functional to test the one shot (zero-length time interval) case.

PR #654 - Ensure all APIs use the proper type. Sizes are now size_t; these will now be 64 bits on a 64 bit platform.

PR #656 - Fix build issue on VxWorks 6.9 by using the 3 argument form of `open()`. Passing `0` as the mode solves the build issue. This parameter is ignored when not creating a file.

PR #658 -  The address calculations now use `unsigned long` instead of `long` to ensure that all rounding and base address adjustments behave the same way in the event that the addresses lie in the upper half of memory (i.e. start with a 1 bit) which would put it in the negative range of a long type.



**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/158>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@zanzaben 
@jphickey 
",,https://github.com/nasa/osal/pull/662
Fix #608 - Add RTEMS 5.x support,"**Describe the contribution**
Fix #608

This change adds support for RTEMS 5.1 in the OSAL.
The change provides defines and necessary ifdefs so RTEMS 4.11 can continue to be supported.

**Testing performed**
Following the instructions in the pc-rtems PSP:
https://github.com/nasa/PSP/blob/main/fsw/pc-rtems/README.txt
and the updated README_RTEMS_5.txt from PSP pull request 197, I built the RTEMS toolchains, the pc686 BSPs and cFS bundle for both RTEMS 4.11 and RTEMS 5.x. I then ran the bundle on both RTEMS 5.1 and RTEMS 4.11 on QEMU x86.
Note, that for RTEMS 5, the latest RTEMS 5.x git repository has to be used, since there was an RFS file system bug that prevented the bundle from working on the pc-rtems platform.

I did not run the complete set of tests yet on RTEMS 5.1.

**Expected behavior changes**
For RTEMS 4.11 there should be no behavior changes at all.
For RTEMS 5.1 there should be no behavior changes as well.

**System(s) tested on**
 - Hardware: QEMU x86
 - OS: RTEMS
 - Versions: RTEMS 4.11 and RTEMS 5.1

**Additional context**
This change requires cFE Pull request 1031.
It is associated with PSP pull request 220, but since that contains readme files, it is not required to build.

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Cudmore NASA/GSFC Code 582.0
",,https://github.com/nasa/osal/pull/661
OSAL does not build cleanly with conversion warnings enabled,"**Is your feature request related to a problem? Please describe.**
OSAL does not build cleanly if `-Wconversion` warnings are enabled.  In the CFE builds this warning is neither enabled nor disabled so it is left with the compiler default.  Most gcc cross toolchains currently used disable it by default, but with the toolchain provided in VxWorks 7 this is enabled by default, so this difference becomes apparent.

**Describe the solution you'd like**
First needs CCB discussion as to whether we want to be ""conversion clean"".  

Downside is that it requires a bunch of extra type casting for things that would normally work implicitly without issue - which makes code ugly - and the casts can become outtdated/stale if the underlying type changes and that doesn't always generate a compiler message but can cause problems due to multiple conversions and/or changing for equality of wrong types.  So unnecessary extra type casts can be a real risk to behavior, not just readability.

Upside is that every now and then it will identify a truncation or sign conversion issue that might be a real problem.

Once decided one way or the other, we should explicitly set the `-Wconversion` or `-Wno-conversion` setting in CFE so that it is consistent and not dependent on compiler default.

**Additional context**
Originally identified in #599  - split to separate issue (not limited to just VxWorks 7 - that's just what brought it up)

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, question",https://github.com/nasa/osal/issues/660
"Fix #679, Add Markdown version of OSAL Configuration Guide","**Describe the contribution**
Pandoc was used to convert the OSAL Configuration Guide to a markdown file. During the conversion, issues were presented such as broken tables. Tables were fixed and block codes were added where appropriate. 

Fix #679

**Additional context**
Please provide feedback on whether the markdown file is acceptable in terms of formatting. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal 
",,https://github.com/nasa/osal/pull/659
"Fix #651, use unsigned types in VxWorks stack calculation","**Describe the contribution**
This should avoid any inconsistencies in the event that the memory address translates to a negative numeric value.

Fixes #651 

**Testing performed**
Build and sanity check CFE
Run all unit tests

**Expected behavior changes**
None - just avoids possible sign conversions.

**System(s) tested on**
Ubuntu 20.04
VxWorks 6.9

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/658
Consider limiting size of read/write/seek to INT32_MAX,"**Is your feature request related to a problem? Please describe.**
The OSAL API returns results as `int32`, and this includes the size of data read/written from operations like OS_read and OS_write.  However it is possible to read/write a larger buffer than what can be expressed as `int32`.  If this overflow happens then the result is likely to become negative and be interpreted as an error.

**Describe the solution you'd like**
`OS_read` and `OS_write` should probably cap the amount they will transfer in a single call to be `INT32_MAX`.  This should in turn limit the size of the result that would need to be returned to the caller.

OS_lseek() returns the file offset, so this probably doesn't work with files bigger than 2GB.

**Describe alternatives you've considered**
Use a larger data type e.g. `int64` as return, but this is potentially slow on 32 bit CPUs where 64 bit values may need to be emulated by the C library.

**Additional context**
If `size_t`  (buffer size parameter) is 64 bits and the return value is 31 bits (usable) then there is a large set of potential values which are not representable.

However - this problem has existed even when the input size was `uint32` rather than `size_t` ... because anything bigger than `INT32_MAX` is a problem - so this isn't new, its just potentially more of a concern with large files./file systems and 64 bit platforms.

Read/Write actions should always be allowed (per API) to transfer fewer bytes than the request was for - app should retry with the remainder.  So capping at `INT32_MAX` should not be a problem - no app should expect an extremely large transfer like that to happen in one go.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/657
"Fix #655, use 3 argument form of open","**Describe the contribution**
VxWorks only provides the 3 argument form of `open()`.  Passing 0 as the mode solves the build issue.  This parameter is ignored when not creating a file.

Fixes #655 

**Testing performed**
Build and sanity check CFE

**Expected behavior changes**
No behavior change.  Fixes build issue on VxWorks 6.9

**System(s) tested on**
VxWorks 6.9

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:FastTrack, vxworks",https://github.com/nasa/osal/pull/656
VxWorks build failure in OS_FileChmod_Impl,"**Describe the bug**
Failure occurs on a VxWorks 6.9 build:

```
/home/jphickey/cfecfs/github/osal/src/os/portable/os-impl-posix-files.c: In function 'OS_FileChmod_Impl':
/home/jphickey/cfecfs/github/osal/src/os/portable/os-impl-posix-files.c:202: error: too few arguments to function 'open'
make[7]: *** [osal/vxworks_impl/CMakeFiles/osal_vxworks_impl.dir/__/portable/os-impl-posix-files.c.obj] Error 1
```

Looks like this was recently introduced in the 2020-11-03 IC in via #639 ... 

**To Reproduce**
Build for MCP750 / vxworks 6.9 platform using standard method and default config.

**Expected behavior**
Build succeeds.

**Code snips**
Looks like VxWorks 6.9 doesn't implement `open()` per POSIX specs - it only has the 3 argument form (with mode) and not the 2 argument form.

**System observed on:**
VxWorks 6.9

**Additional context**
Hopefully we can get a CI that includes VxWorks....

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, vxworks",https://github.com/nasa/osal/issues/655
"Fix #635, Reduce use of uint32, add more OSAL typedefs","**Describe the contribution**

Scrub all uses of `uint32` type across OSAL, and replace most usage of this generic type with more appropriate, purpose-specific typedefs.

All use of `uint32` to store an object size is now replaced with `size_t`.

Adds proper typedefs for:
    
- `osal_priority_t` - used for indicating a task priority
- `osal_stackptr_t` - for indicating a task stack pointer
- `osal_index_t` - for indicating a table position/array index of all internal tables
- `osal_objtype_t` - for indicating the type of an object
    
Fixes #635 

**Testing performed**
Build and sanity test OSAL on supported platforms
Run all unit tests

**Expected behavior changes**
None.  This is mainly a scrub of all APIs to use the proper type, but keeps it as `uint32` most of the time, so it really shouldn't change anything.  Except for sizes which are now `size_t` - so they will be 64 bits on a 64 bit platform.

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11


**Additional context**
This does expose another API problem with functions that return a size as an `int32` (e.g. OS_read, OS_write, etc) .... as an `int32` cannot represent the full range of possible values.  We may need a type to correlate with POSIX `ssize_t` to address this.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/654
"Fix #586, Add one shot timer functional test","**Describe the contribution**
Fixes #586, added a one shot timer. 

Added a 5th timer to functional test to test the one shot (zero-length time interval) case.

**Testing performed**
Build and run unit test.

**Expected behavior changes**
No behavior change 

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
",,https://github.com/nasa/osal/pull/653
Integration Candidate: 2020-11-10,"**Describe the contribution**

Fix #637, static module unload fix
Fix #641, add flags to OS_ModuleLoad

**Testing performed**
Bundle CI on astrogeco: https://travis-ci.com/github/astrogeco/cFS/builds/201769124

**Expected behavior changes**

PR #638 -  Ensure that the handle is not NULL before invoking dlclose(). In particular the handle will be NULL for static modules. Shutdown after CTRL+C occurs normally (no segfault).

PR #643 - Add a ""flags"" parameter to OS_ModuleLoad() to indicate the desired symbol visibility:
- GLOBAL (0, the default, and matches current behavior)
- LOCAL which hides from other modules and prevents other modules from binding to symbols in this module, thereby ensuring/preserving the ability to unload in the future

CFE should use LOCAL flag for apps, and GLOBAL flags for libraries.


**System(s) tested on**

**Additional context**
Part of <https://github.com/nasa/cFS/pull/156>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey ",,https://github.com/nasa/osal/pull/652
VxWorks stack address calculation should use unsigned type,"**Is your feature request related to a problem? Please describe.**
The VxWorks task create implementation calculates a stack base address which involves adjustment such as rounding and accounting for whether the stack grows up or down (per VxWorks requirements of `taskInit()`.

This does the calculation as integers, and currently uses the `long` type.

The risk is that if the address happens to lie in the negative range of this type, then the rounding/adjustments may need to go in the opposite direction.

**Describe the solution you'd like**
The address calculations should use `unsigned long` instead of `long` just to ensure that all rounding and base address adjustments behave the same way in the event that the addresses lie in the upper half of memory (i.e. start with a 1 bit) which would put it in the negative range of a `long` type.

**Additional context**
This is really just a suspicion of a possible issue - can't really confirm/test because we don't have direct control of where these stack buffers get allocated in memory.

But either way using `unsigned` would be more correct anyway - and would simply avoid the possibility that the operation works differently depending on its value.

It probably used `long` in the first place only because that is what the arguments to `taskInit()` are declared as.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, vxworks",https://github.com/nasa/osal/issues/651
OS_chmod is requiring read access ,"**Describe the bug**
If you don't have read access to a file then OS_chmod will not be able to change it. This is most likely caused by chmod opening the file as a way to avoid filename race potential, see the code snip. 

**To Reproduce**
1) Set the file access to write only. 
2) Try to change the access using OS_chmod
3) will get an OS_ERROR

**Expected behavior**
You should be able to change the permissions of a file without read access. 

**Code snips**
https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/portable/os-impl-posix-files.c#L201-L206

**System observed on:**
 Ubuntu 20.04

**Reporter Info**
Alex Campbell GSFC
",bug,https://github.com/nasa/osal/issues/650
Incorrect call to OS_ObjectIdCompose_Impl in OS_TimerDelete,"**Describe the bug**
OSAL has an incorrect setting of `first_cb` when deleting timers.

https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/shared/src/osapi-time.c#L432-L436

The second argument to `OS_ObjectIdCompose_Impl()` is a serial number, not a table index.  These are only the same value until table entries start to be re-used, after this they become different, and this will start to fail.  This should really not be using `OS_ObjectIdCompose_Impl()` at all here.

**To Reproduce**
- Create and delete several timebases - at least `OS_MAX_TIMEBASES` - such that table entries start to be re-used.
- Create another valid timebase for the test (do not delete).
- Create at least two timers based on this timebase
- Delete one of the timers.

At this point the ID in the timebase callback ring (`first_cb` member) may refer to an invalid entry - a timebase ID which does not exist.

**Expected behavior**
Should look up the `active_id` from the actual table entry instead - do not re-compose the ID, because `next_ref` is a table index, not a serial number.

**System observed on:**
Ubuntu 20.04

**Additional context**
It is only possible to trigger this after a rather extensive sequence of creating and deleting these resources.  So this is probably unlikely to ever occur in a real system where timers are typically created and run forever.    Should still be fixed though.

This was initially discovered by enforcing type-safety in the `osal_index_t` and `osal_id_t` - during this scrub it revealed that this was passing an `osal_index_t` to a function which is supposed to accept a serial number.  So type safety = good.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/649
Scrub OSAL for direct array references,"**Is your feature request related to a problem? Please describe.**
In OSAL  there are quite a few places with direct array references to an index, such as:

https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/shared/src/osapi-sockets.c#L239

In many functions this is repeated many times over (i.e. makes several accesses into the table entry for the given item).

**Describe the solution you'd like**
This should be separated to use local pointer(s) to the entry/entries in use.

First do a lookup, e.g.:

    stream = OSAL_TABLE_ENTRY(OS_stream_table, local_id);

Then use `stream->` to refer to that entry from there on, e.g.:

    if (stream->socket_type != OS_SocketType_STREAM)


**Additional context**
This makes the code a lot more readable and more maintainable.  The CFE was already scrubbed for this, so it makes sense for OSAL to also do the same.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/648
"Some ""close"" operations not doing standard delete procedure","**Describe the bug**
All close/delete ops should go through `OS_FinalizeDelete()` so things are cleaned up consistently.
But there remain a couple places where this is not done - `OS_close()` and its variants e.g. `OS_CloseFileByName` and `OS_CloseAllFiles`

**To Reproduce**
This is apparent if there is some action in the PSP handler for deallocation.  It will not get invoked for these close ops because it doesn't go through the common delete path.

**Expected behavior**
Should go through common path.

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/647
"Fix #559, Rename set force fail","**Describe the contribution**
Fixes #559 by changing UT_SetForceFail to UT_SetDefaultReturnValue

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
 Ubuntu 20.04

**Additional context**


**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell - NASA/GSFC
",,https://github.com/nasa/osal/pull/646
OS_TaskExit() on VxWorks causes task table owner to be the deleted task,"**Describe the bug**
OS_TaskExit() calls OS_ObjectIdFinalizeDelete(). This function sets  the task's record->active_id to 0, which is also being used as the task ID on VxWorks. ObjectIdFinalizeDelete() subsequently calls OS_Unlock_Global, which errors out and does not clear the owner, as the task ID is now zeroed out and does not match the owner of the table. This does not occur on Linux

**To Reproduce**
Steps to reproduce the behavior:
On VxWorks, call CFE_ES_ExitChildTask with OSAL_CONFIG_DEBUG_PRINTF  enabled

**Expected behavior**
Error message should not be printed out

**Code snips**
https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/shared/src/osapi-idmap.c#L745-L777
https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/shared/src/osapi-idmap.c#L625-L676
https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/vxworks/src/os-impl-tasks.c#L385-L413
https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/posix/src/os-impl-tasks.c#L736-L751

**System observed on:**
 - SP0
 - OS: VxWorks 6.9
 - Versions: CFE 6.8, OSAL  5.1.0-rc1+dev16, 

**Additional context**
See attached screenshots for stack traces
![image](https://user-images.githubusercontent.com/63735778/98269251-82b02900-1f5b-11eb-83f9-0af820169aa8.png)
![image](https://user-images.githubusercontent.com/63735778/98269098-5b595c00-1f5b-11eb-836c-4abd911c123e.png)
**Reporter Info**
John N. Pham, Northrop Grumman


",bug,https://github.com/nasa/osal/issues/645
Remove OS_PACK define,"**Is your feature request related to a problem? Please describe.**
Shouldn't use non-standard packing options.  Really should scrub the list.

https://github.com/nasa/osal/blob/1a826576f8dd9eb37f47da0e633b1d4712b8ac61/src/os/inc/common_types.h#L52-L75

**Describe the solution you'd like**
Remove/scrub

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/644
"Fix #641, add OS_ModuleLoad flags","**Describe the contribution**
Add a ""flags"" parameter to OS_ModuleLoad() and use this to indicate the desired symbol visibility - either GLOBAL (0, the default, and matches current behavior) or LOCAL, which means symbols are hidden from other modules.

This is intended as a ""hint"" to OSAL as to how the module will be used - LOCAL prevents other modules from binding to symbols in this module, thereby ensuring/preserving the ability to unload in the future.  CFE should use LOCAL flag for apps, and GLOBAL flags for libraries, which are typically not ever unloaded.

Fixes #641

**Testing performed**
Build and run unit test
Sanity check CFE (update/patch required update to CFE to add flags parameter on API call)

**Expected behavior changes**
No impact to behavior if flags are passed as 0.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Related to nasa/cfe#952

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/643
OS_TaskDelete is not synchronous on POSIX,"**Describe the bug**
The current POSIX implementation of `OS_TaskDelete()` uses `pthread_cancel()`.  This is a cancellation _request_ but the target thread continues to run until it hits a cancellation point.  As a result, when the OS_TaskDelete() function returns, it is likely that the target thread is actually still running for a short period of time.

But if the intent is to actually unload the module, as is done in the CFE ""restart"" and ""reload"" commands, it is critical to ensure that all uses/references to code within the to-be-unloaded module have actually been released.  So it is important to make sure that the cancellation request has been executed and the task is actually deleted before proceeding to the `OS_ModuleUnload()` call.

Currently with the POSIX implementation, there is no way to guarantee this, so this becomes a race condition during restart/reload operations on this platform.

**To Reproduce**
Not directly reproducible in current code - this race condition is currently masked by the fact that modules are loaded with `RTLD_GLOBAL`, so if the runtime loader still sees the module being referenced using its internal refcount, it doesn't actually unload it when `dlclose()` is called.  So in this case the task finishes up normally and there is no apparent problem.

But when this is fixed - such as when using `RTLD_LOCAL` as suggested in #641 - then this race condition becomes a problem, and as a result a CFE reload or restart command sometimes triggers a segmentation fault in the event that `OS_ModuleUnload()` gets called before the task has fully been deleted.

**Expected behavior**
`OS_TaskDelete()` should  ensure that the task has been fully removed, not just pending removal, before it returns to the caller.

Suggestion to achieve this:

- Keep threads in the attached (joinable) state by default
- Use `pthread_join()` to wait for the cancelled task to actually exit.

**System observed on:**
Ubuntu 20.04

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/642
Add OS_ModuleLoad flags to indicate symbol table visibility,"**Is your feature request related to a problem? Please describe.**
On POSIX platforms with a real dynamic loader/shared object implementation, using the `RTLD_GLOBAL` flag to dlopen() can make it tricky or impossible to unload modules later.  This flag makes the symbols globally available to satisfy other relocations, and unloading of the module will be deferred or prevented entirely as long as the runtime loader thinks a symbol is being used.

This ultimately causes a requirement failure on this platform as documented in nasa/cfe#952 - because the module isn't _actually_ unloaded when `dlclose()` is called, and even though the new/replacement app module was loaded, CFE will end up restarting the original code, not the new (reloaded) code.

Loading a module with `RTLD_LOCAL` instead seems to prevent this issue - because the symbols are simply not made available for other modules/entities to use.  This ensures that when the time comes to unload the module, nothing else is referencing the module, and `dlclose()` actually does unload it.

But this LOCAL flag cannot be used for all modules, because libraries do need their symbols added to the global table, or else it will not be possible to load apps that depend on those libraries 


**Describe the solution you'd like**
Add a ""flags"" parameter onto the existing `OS_ModuleLoad()` API, so it becomes:

    int32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)

The ""flags"" parameter can be used to indicate the symbol visibility.  A flag value of 0 should map to ""global"" - which is what the current implementation does - to make an easy transition for existing code.

In order to be able to look up an entry point in a module loaded with this option, this necessitates another new API:

    int32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *SymbolAddress, const char *SymbolName)

Which is the same as `OS_SymbolLookup()` but accepts a module ID value and operates on that module, rather than on the global scope.  This should be the ID that was returned from the OS_ModuleLoad call.

For RTOS implementations that do not have this symbol visibility option they can ignore the flag, continue to map everything into the global symbol table as they currently do, and `OS_ModuleSymbolLookup` and `OS_SymbolLookup` become equivalent.

**Additional context**
Note that most all other OSAL ""create"" functions (tasks, queues, semaphores, etc) already have a ""flags"" parameter on the API, reserved for future use.  Unfortunately, this flags parameter was not part of the original `OS_ModuleLoad()` API definition, making it an exception to the pattern.  So by adding this, although it is a breaking change, it makes it more consistent with the rest of the APIs.

The alternative would be to define a separate `OS_ModuleLoadWithFlags()` API, but this pattern does not exist anywhere else, so it would continue to be an exception with respect to the overall OSAL API.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, breaking",https://github.com/nasa/osal/issues/641
OSAL Configuration Guide - OSAL_INCLUDEDIR Not Found,"**Describe the bug**
The OSAL Configuration Guide mentions OSAL_INCLUDEDIR in section 2.4.2, Variables that must be specified. This CMAKE variable is not found in any files nor reported issue. 

**Expected behavior**
Update the OSAL Configuration Guide if OSAL_INCLUDEDIR is no longer in use. 

**Reporter Info**
Ariel Adams, ASRC Federal ",docs,https://github.com/nasa/osal/issues/640
Integration Candidate: 2020-11-03,"**Describe the contribution**

Fix #327 and Fix #333, Squash LGTM warnings
Fix #623, add debug messages for mutex double locks
Fix #628, Update UtAssert macros with dynamic string formatting

**Testing performed**
See framework-bundle CI: https://github.com/nasa/cFS/pull/154/checks

**Expected behavior changes**

PR #634 - When `OS_DEBUG` is enabled, this adds a message if mutex give/take actions occur outside the expected sequence. This informs the user (via the debug console) if a lock is taken more than once or if a lock is given by a different task than the one that originally took it: 
```
OS_MutSemTake():216:WARNING: Task 65547 taking mutex 327685 while owned by task 65547
```

PR #633 - No behavior changes
 - Removes all FIXME comments
 - Resolves security/filename race issue by opening file and acting on descriptor by adding fstat stub
 - Squashed the minor recommended bugs

PR #629 - UtAssert macros now accept variable string arguments.The `UtAssert_True` wrapper around call is no longer needed to accommodate dynamic string output, thus removing the double assert. UtAssert macros will now be able to offer more information by themselves.

**System(s) tested on**
Ubuntu CI

**Additional context**
https://github.com/nasa/cFS/pull/154

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 
@agibson
@skliper ",,https://github.com/nasa/osal/pull/639
"Fix #637, fix OS_ModuleUnload for static modules","**Describe the contribution**
Ensure that the handle is not NULL before invoking `dlclose()`.  In particular the handle will be NULL for static modules.

Fixes #637 

**Testing performed**
Build and sanity test CFE with apps linked statically.

**Expected behavior changes**
- Shutdown after CTRL+C occurs normally (no segfault)
- Also confirmed that specifying an incorrect entry point symbol in startup script also benign.  (because a bad entry point also causes module to be ""unloaded"" as part of cleanup, which triggered the bug too)

**System(s) tested on**
Ubuntu 20.04 
i686-rtems4.11 / pc686 via QEMU

**Additional context**
This issue only affects statically linked apps, which ""go through the motions"" of module loading for consistency in operation, but do not actually load a module - because its already linked.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/638
OS_ModuleUnload() for statically loaded module may segfault,"**Describe the bug**
Calling `OS_ModuleUnload()` on a statically loaded module will still attempt to call `dlclose()` but the handle is NULL because no module was loaded.  At least on Linux/Glibc this actually causes a segmentation fault.

**To Reproduce**
Using the CFE framework switch any app (e.g. sample_app) from a regular dynamic app to a static app.
Build and run CFE, then shutdown with CTRL+C.
The shutdown ends up calling `OS_DeleteAllObjects()` which in turn will trigger this bug - one gets a segfault instead of a clean exit.

**Expected behavior**
Should shutdown cleanly.

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/637
Clean out old osprintf tests related to ARINC653 and GHS,"**Is your feature request related to a problem? Please describe.**
Old tests no longer in scope are still in code base.

See https://github.com/nasa/osal/blob/main/src/unit-tests/osprintf-test/ut_osprintf.h and all related code.

**Describe the solution you'd like**
Prune.

**Describe alternatives you've considered**
None.  If platforms ever do get brought back in should be implemented using current techniques.

**Additional context**
None.

**Requester Info**
Full name and company/organization if applicable
",unit-test,https://github.com/nasa/osal/issues/636
More consistent types for OSAL resources,"**Is your feature request related to a problem? Please describe.**
CFE issue nasa/cfe#663 describes mismatched types used across CFE for certain items, such as stack size and priority of tasks.
To help resolve this OSAL should provide a typedef for the ""right"" types to use when interfacing with OSAL.

**Describe the solution you'd like**
Should add at least:
- `osal_priority_t` - type used for OSAL task priority
- `osal_stackptr_t` - type used for OSAL stack pointer

**Additional context**
This will identify the correct type to use, instead of the mishmash currently seen in CFE as described in nasa/cfe#663.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/635
"Fix #623, add debug messages for mutex double locks","**Describe the contribution**

If `OS_DEBUG` is enabled, this adds a message if mutex give/take actions occur outside the expected sequence.  In particular,
this warns if a task takes a mutex more than once.

Fixes #623 

**Testing performed**
Build and sanity test CFE with debug events enabled, confirm normal boot and operation.
Send ""remove packet"" request to TO_LAB.

Confirm warning is generated as follows (this is a known issue in CFE doing multiple locks):

    OS_MutSemTake():216:WARNING: Task 65547 taking mutex 327685 while owned by task 65547

**Expected behavior changes**
If debugging is enabled this now informs the user (via the debug console) if a lock is taken more than once.
It will also warn if a lock is given by a different task than what originally took it.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/634
"Fix #327 and #333, Squash LGTM warnings","**Describe the contribution**
- Turned all FIXME comments into issues (and removed FIXME)
- Fix #333: security/filename race issue resolved by opening file and acting on descriptor (had to add fstat stub)
- Fix #327: squashed the minor recommended bugs

**Testing performed**
Built and ran unit tests, passed.

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
#630, #632 - new issues from FIXME
#631 - uncovered missing functional test on OS_chmod
 
**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/633
Resolve SEM_VALUE_MAX not defined test issue,"**Is your feature request related to a problem? Please describe.**
Was a FIXME:

https://github.com/nasa/osal/blob/5a8f0afa3a6ef6945661d6fc893d4592d9360b5a/src/unit-tests/oscore-test/ut_oscore_countsem_test.c#L123-L136

**Describe the solution you'd like**
Address/disposition as an issue.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/632
OS_chmod missing functional test,"**Is your feature request related to a problem? Please describe.**
Missing functional test (coverage test exists).

**Describe the solution you'd like**
Add functional test

**Describe alternatives you've considered**
None

**Additional context**
Required for cert

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/osal/issues/631
File/socket can be closed while actively inside a OS_SelectMultiple() call in another thread,"**Is your feature request related to a problem? Please describe.**
Converting FIXME into an issue:

https://github.com/nasa/osal/blob/5a8f0afa3a6ef6945661d6fc893d4592d9360b5a/src/os/shared/src/osapi-select.c#L88-L101

**Describe the solution you'd like**
Address/disposition as an issue.

**Describe alternatives you've considered**
None

**Additional context**
#327

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/630
"Fix #628, Update UtAssert macros with dynamic string formatting","**Describe the contribution**
Changed all UtAssert macros to take variable string arguments, feature request #628 

**Testing performed**
Steps taken to test the contribution, cFS/main branch commit 20097ef64e455ace25a1535ea43090a739eb7c0c:
https://github.com/nasa/cFS/
1. make clean
2. make ENABLE_UNIT_TESTS=TRUE SIMULATION=native
3. make test
4. All cFE unit tests pass

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
UtAssert_True wrapper around call will no longer be necessary to accommodate dynamic string output, thus removing the double assert.  UtAssert macros will now be able to offer more information by themselves.

**System(s) tested on**
PC, RHEL 7.6

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Gibson  NASA GSFC/587
","enhancement, unit-test",https://github.com/nasa/osal/pull/629
In utassert.h allow all UtAssert macros to use UtAssertEx and __VA_ARGS__ for dynamic output strings,"**Is your feature request related to a problem? Please describe.**
I have to add UtAssert_True as an outer shell to any of the asserts that do not use dynamic arguments.

**Describe the solution you'd like**
Update all the macros (except for UtAssert_Simple) to use UtAssertEx as the base function, removing description and adding __VA_ARGS__.  

**Describe alternatives you've considered**
UtAssert_True wrapper around calls, but this results in two asserts per check which is unnecessary.

**Additional context**
Wrote up the change and did not see any issues while building or running tests.

**Requester Info**
Alan Gibson  NASA GSFC/587
","enhancement, unit-test",https://github.com/nasa/osal/issues/628
Integration Candidate: 2020-10-20,"**Describe the contribution**
Fix #625 

**Testing performed**
Bundle CI: https://github.com/nasa/cFS/pull/152/checks

**Expected behavior changes**
PR #626 

**System(s) tested on**
Ubuntu CI

**Additional context**
Part of <https://github.com/nasa/cFS/pull/152>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper ",,https://github.com/nasa/osal/pull/627
"Fix #625, Apply standard formatting","**Describe the contribution**
Fix #625 - apply standard formatting

**Testing performed**
Build/run unit tests, all pass.

**Expected behavior changes**
None, whitespace only

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: current bundle w/ this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:FastTrack",https://github.com/nasa/osal/pull/626
Apply standard formatting,"**Is your feature request related to a problem? Please describe.**
Various formatting styles in codebase

**Describe the solution you'd like**
Apply standard formatting, if it's an improvement then submit for fasttrack (minimize impacts to open work).  If standard format requires hand mods, update such that application of standard format in the future doesn't require repeat modification.

**Describe alternatives you've considered**
Leave as-is if not an improvement.

**Additional context**
Preparation activity for certification code review.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/625
Add OS config option for fast mutexes,"**Is your feature request related to a problem? Please describe.**
Currently OSAL always creates recursive mutexes, with no option to control this..  Normal or non-recursive mutexes are more efficient than recursive mutexes.

**Describe the solution you'd like**
Add an OS config compile time option to elect ""fast"" or non-recursive mutexes.

**Additional context**
This is a follow-on to issue #623

CFE currently won't run with non-recursive mutexes due to known issues.  But as long as the default remains to be recursive mutexes, then this option can be added for future use without breaking anything.  Obviously this option couldn't be enabled for CFE until the known issues are fixed.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/624
Add OS_DEBUG warning if task locks a mutex multiple times,"**Is your feature request related to a problem? Please describe.**
As noted in nasa/CFE#948, there are cases in CFE where a mutex may be taken by the same task more than once.  This is technically allowed because OSAL enables recursive mutexes for all supported OS types.

But my concern is that:

- recursive mutexes aren't guaranteed to be provided - i.e. some minimal RTOS's might not have this facility at all. 
- if recursive mutexes are provided, they are slower than the normal (non-recursive) counterpart.
- anything that depends on recursive mutexes generally indicates deeper code design flaws - i.e. insufficient separation of internal vs. external APIs, function loops, circular subsystem dependencies, etc.

**Describe the solution you'd like**
Start by introducing an `OS_DEBUG` warning if the same task takes a mutex more than once.  This can help identify the issues, and it is very easy to add.  It also won't be displayed unless OSAL is compiled with debug messages enabled.

**Additional context**
A future / follow up change, once dependencies on recursive mutexes are fix, could be to allow the user to optionally elect to use non-recursive/fast mutexes via an osconfig option.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/623
OS_FileRename_Impl yields different results on different operating systems,"**Describe the bug**
An FM test is showing different behavior on Linux and vxWorks. The issue is in a test that does a file rename. There's a test that renames a file to the name of an existing file. On Linux, this file is overwritten. On vxWorks, the call to rename() fails. It would be good to have consistent behavior for FM across both operating systems.

**To Reproduce**
Walt Moleski can provide more information on reproducing.

**Expected behavior**
It would be ok for the rename to fail or for the rename to succeed. The CCB should decide what the desired behavior should be. FM test except the rename to succeed.

The expected result is consistency across both operating systems, so that FM can pass its tests on both.

**System observed on:**
Linux (PC) and vxWorks 6.9 (mcp750?)

**Reporter Info**
Steven Seeger GSFC - 582 (Embedded Flight Systems, Inc.)
","wontfix, CCB:Splinter",https://github.com/nasa/osal/issues/622
Integration candidate 2020-10-13,"**Describe the contribution**
Fix #556
Fix #618

**Testing performed**
See Bundle PR - https://github.com/nasa/cFS/pull/147/checks

**Expected behavior changes**

PR #617 - Deprecate `OS_open` and `OS_creat` to and replaced them with by `OS_OpenCreate`, which implements both functions via flags, and follows the correct OSAL API patterns.

PR #619 - Change use of uint32 for ID to the correct typedef. Also use ObjectIdFromInteger/ObjectIdToInteger where it is intended to convert these values to integers e.g. for the ""name"" fields in RTEMS.

**System(s) tested on**
Ubuntu CI

**Additional context**
Part of https://github.com/nasa/cFS/pull/147

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 

",,https://github.com/nasa/osal/pull/621
FreeRTOS port,"Hi,

It seems that you only provide the OSAL for Linux, rtems and vxworks. However you regularly mention FreeRTOS in your documentation. Do you plan to share the sources for the FreeRTOS port ? Not sure the amount of work such operation require and the limitations (especially concerning the file system) . It would be great to have more information about this point. 

Thanks in advance !

**Requester Info**
Jonathan Michel, master student at the University of Applied Science of Western Switzerland working on [CHESS](https://www.epflspacecraftteam.com/).
",question,https://github.com/nasa/osal/issues/620
"Fix #618, Use osal_id_t in RTEMS implementation","**Describe the contribution**

Change use of uint32 for ID to the correct typedef.  Also use ObjectIdFromInteger/ObjectIdToInteger where it is intended to
convert these values to integers e.g. for the ""name"" fields in RTEMS.

Fixes #618 

**Testing performed**
Build and sanity test CFE on RTEMS
Confirm all unit tests working

**Expected behavior changes**
None

**System(s) tested on**
RTEMS 4.11.3 / pc686 (QEMU) via Ubuntu 20.04 build host

**Additional context**
For consistency with all other modules

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/619
Update RTEMS osal to use osal_id_t typedef,"**Is your feature request related to a problem? Please describe.**
While fixing #615 I noticed that the RTEMS OSAL is still using `uint32` for its IDs.  

**Describe the solution you'd like**
This should be changed to use the `osal_id_t` typedef instead.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/618
"Fix #556, Deprecate OS_open and OS_creat","**Describe the contribution**

These functions are replaced by OS_OpenCreate, which implements both functions via flags, and follows the correct OSAL API patterns.

Fixes #556 

**Testing performed**
Build and run all tests, sanity check CFE
Check coverage of file-related APIs (still 100%)

**Expected behavior changes**
`OS_open()` and `OS_create()` are deprecated.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This initially puts the items inside an `OSAL_OMIT_DEPRECATED` block for review and testing, like has been done traditionally.
Should discuss at CCB whether this should become a hard-cut given that the next release will be a major one.
Although the previous discussions on the topic agreed to hard cut at major releases, these are such widely-used routines that this will cause grief to a lot of users.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/617
"Fix #615, RTEMS build issues","**Describe the contribution**

Correct issues involving recent OS_Milli2Ticks change.

Note - for OS_TaskDelay it is important that this doesn't degrade into a no-op.  So if OS_Milli2Ticks fails here, this returns the
error but still also does a non-zero delay.

**Testing performed**
Build and sanity check CFE under RTEMS
Run all unit tests

**Expected behavior changes**
Builds and runs correctly

**System(s) tested on**
RTEMS 4.11.3 + pc686 BSP target (QEMU) using Ubuntu 20.04 build host

**Additional context**
Includes the typo fix in #614 plus others.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/616
RTEMS build broken,"**Describe the bug**
Needs updates to fix issues related to `OS_Milli2Ticks`
- Missing prototype
- References to old function prototype still exist in some RTEMS source files.

**To Reproduce**
Build default configuration for RTEMS 4.11.  Fails to compile with errors such as:
```
/home/joe/code/cfecfs/github/osal/src/os/rtems/src/os-impl-countsem.c: In function 'OS_CountSemTimedWait_Impl':
/home/joe/code/cfecfs/github/osal/src/os/rtems/src/os-impl-countsem.c:212:5: error: implicit declaration of function 'OS_Milli2Ticks' [-Werror=implicit-function-declaration]
     TimeInTicks = OS_Milli2Ticks(msecs);
     ^
```

**Expected behavior**
Should compile cleanly.

**System observed on:**
Ubuntu 20.04 (host) cross buiding for RTEMS 4.11.3 / pc-686 BSP

**Additional context**
Typo noted in #614 but there are more problems than just that....

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/615
Fixed typo in rtems binsem TimeInTicks variable name,"**Describe the contribution**
This addresses a typo in the rtems os-impl-binsem.c file for a variable name. 

Fixes https://github.com/nasa/osal/issues/613 

**Testing performed**
Compiled using rtems toolchain, but not run on hardware.

**Expected behavior changes**
Prior to this change, compilation failed for an rtems platform. The code should now compile for rtems.

**System(s) tested on**
 - Hardware: Dell latptop(Build Machine) - AAC Sirius(Host Machine)
 - OS: Ubuntu 18.04(Build Machine) - RTEMS 4.11(Host Machine)
 - Versions: OSAL Main

**Contributor Info - All information REQUIRED for consideration of pull request**
Adam St. Amand - Personal
","bug, duplicate, CCB:PendingCLA",https://github.com/nasa/osal/pull/614
Typo in RTEMS binsem.c Variable Name,"
https://github.com/nasa/osal/blob/27c24693c02b3800e8c95a5b6a44cb1c56451b6b/src/os/rtems/src/os-impl-binsem.c#L249

I believe the line is meant to read the following:

`if (OS_Milli2Ticks(msecs, &TimeInTicks) != OS_SUCCESS)`
",bug,https://github.com/nasa/osal/issues/613
Integration Candidate: 2020-10-07,"**Describe the contribution**
Fix #540 
Fix #615 

**Testing performed**
Bundle CI: https://github.com/nasa/cFS/pull/145/checks

**Expected behavior changes**

PR #541 - Adds an event callback mechanism to certain state changes in OSAL. This allows the CFE PSP to be notified at these points, and therefore it can add platform-specific functionality. This can, for instance, set the task name as requested in #532 or set the processor affinity in a multi-core setup. 

PR #616 - Correct issues involving recent OS_Milli2Ticks change. 

**System(s) tested on**
Ubuntu on Travis CI

**Additional context**
Part of https://github.com/nasa/cFS/pull/145

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey ",,https://github.com/nasa/osal/pull/612
Update OSAL Configuration Guide ,"**Is your feature request related to a problem? Please describe.**
The [OSAL Configuration Guide](https://github.com/nasa/osal/blob/master/doc/OSAL-Configuration-guide.pdf) is out of date. More specifically, I found in section 2.1.1, Setup the OSAL Source Distribution, that the OSAL source distribution directories are not aligned with our current directories. For example, osal/src/make and osal/src/inc no longer exists. 

**Describe the solution you'd like**
A new revision should be published. Last revision was on 1/31/2016. 

**Requester Info**
Ariel Adams, ASRC Federal 
",duplicate,https://github.com/nasa/osal/issues/611
Add support for vxWorks 7,"**Is your feature request related to a problem? Please describe.**
cFS traditionally has supported vxWorks 6. There are projects interested in using vxWorks 7 with cFS, so support must be added. This requires work in PSP and OSAL.

**Describe the solution you'd like**
An ideal solution is to support both vxWorks 6 and 7 with as little cloning of old vxWorks 6 as possible. On PSP, the current work is to copy mcp750-vxworks for the working platform. (5020) OSAL's goal is to have the vxworks osal support both 6 and 7.

**Describe alternatives you've considered**

**Additional context**

**Requester Info**
Steven Seeger / Embedded Flight Systmes, Inc. / GSFC Code 582

","enhancement, vxworks",https://github.com/nasa/osal/issues/610
Add OSAL debug messages for cases where multiple error conditions result in the same return code,"**Is your feature request related to a problem? Please describe.**
There are multiple functions in which multiple error conditions result in the same return code.  For instance, in OS_FileRename_Impl, the return code OS_ERROR is used for any failure of the rename() function.  This obscures the cause of the error and makes debugging more challenging.  

**Describe the solution you'd like**
Add an OS_Debug statement in these cases to provide additional information (such as errno value) describing the specific cause of the error.  

**Describe alternatives you've considered**
Alternatives include:
- Adding unique return codes -> this would greatly bloat the number of return codes.
- Using some kind of future event mechanism (see OSAL #221 ) 

**Additional context**

**Requester Info**
Elizabeth Timmons/NASA GSFC Code 582
",enhancement,https://github.com/nasa/osal/issues/609
Add support for RTEMS 5.1 - RTEMS OSAL and pc-rtems OSAL BSP updates,"**Is your feature request related to a problem? Please describe.**
The cFS Bundle currently supports RTEMS 4.11. Now that RTEMS 5.1 has been released, I would like to update the necessary components to support RTEMS 5.1 on the pc-rtems platform. This involves minor modifications to the cfe repository, the PSP repository, and the OSAL repository. These changes can be done in such a way that preserves the current RTEMS 4.11 support and adds RTEMS 5.1 support.

**Describe the solution you'd like**
I would like to add support for RTEMS 5.1 while maintaining compatibility with the existing RTEMS 4.11 support. For the OSAL repository there are a few minor changes needed to allow support of RTEMS 5.1 and RTEMS 4.11:
- Minor changes in the OSAL pc-rtems BSP
- Minor changes in the RTEMS OSAL implementation files

**Describe alternatives you've considered**
Alternatives include:
- Not supporting newer versions of RTEMS, but several projects will depend on RTEMS 5 support.
- Dropping RTEMS 4.11 support and just making the changes needed for RTEMS 5, but there may be projects that depend on RTEMS 4.11. We can consider dropping RTEMS 4.11 support on a future release.

**Additional context**

**Requester Info**
Alan Cudmore / NASA GSFC Code 582
","enhancement, RTEMS",https://github.com/nasa/osal/issues/608
Integration Candidate: 2020-09-23,"**Describe the contribution**
Fix #104 
Fix #604 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/142/checks

**Expected behavior changes**
PR #603 - Removes OS_Tick2Micros and internalize OS_Milli2Ticks.
PR #605 - Adds ut_assert address equal macro.

**System(s) tested on**
Ubuntu - CI

**Additional context**
https://github.com/nasa/cFS/pull/142

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
",,https://github.com/nasa/osal/pull/607
Cast-align warning in OS_TaskGetId_Impl for vxworks,"**Is your feature request related to a problem? Please describe.**
```
/home/jhageman/cFS-GitHub/osal/src/os/vxworks/src/os-impl-tasks.c: In function ‘OS_TaskGetId_Impl’:
/home/jhageman/cFS-GitHub/osal/src/os/vxworks/src/os-impl-tasks.c:411:12: warning: cast increases required alignment of target type [-Wcast-align]
  411 |     lrec = (OS_impl_task_internal_record_t *)taskTcb(taskIdSelf());
```

Recreate by building on Ubuntu 20.04, set `cast-align=strict` in `sample_defs/arch_build_custom.cmake` and prep with `ENABLE_UNIT_TESTS=true`

**Describe the solution you'd like**
Resolve warnings.

**Describe alternatives you've considered**
None

**Additional context**
Observed on Ubuntu 20.04 w/ cast-align=strict

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, vxworks",https://github.com/nasa/osal/issues/606
"Fix #604, Add ut_assert address equal macro","**Describe the contribution**
Fix #604 - adds the macro

**Testing performed**
Used the macro in work related to nasa/cfe#903 (built and ran unit tests locally using it)

**Expected behavior changes**
Additional macro available

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: main bundle + this commit

**Additional context**
None.

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, unit-test, CCB:FastTrack",https://github.com/nasa/osal/pull/605
Add ut_assert address equal macro,"**Is your feature request related to a problem? Please describe.**
Address equal macro would be handy.

**Describe the solution you'd like**
Add it.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/604
"Fix #104, Remove OS_Tick2Micros and internalize OS_Milli2Ticks","**Describe the contribution**
Fix #104 
- Removed OS_Tick2Micros implementation, tests, stubs, references
- Moved prototype from API to internal for OS_Milli2Ticks
- Updated OS_Milli2Ticks to return status
- Added check for rollover in OS_Milli2Ticks
- OS_Milli2Ticks now sets and limits ticks as int
- Updated all internal use of OS_Milli2Ticks to check for error
  and returns immediately on error (won't wait maximum amount)
- Coverage tests updated to check for new error cases
- OS_Milli2Ticks stub updated (default implementation)

**Testing performed**
Built and ran unit tests, all pass, coverage maintained (although not 100 due to previous lapses, see #602)

**Expected behavior changes**
API's no longer exposed... no known uses identified so shouldn't be an impact

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
None.

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, public-api, removed",https://github.com/nasa/osal/pull/603
Code coverage for shared dropped below 100% (again),"**Is your feature request related to a problem? Please describe.**
shared/src/osapi-common.c: OS_DeleteAllObjects missing coverage
shared/src/osapi-idmap.c: OS_ObjectIdFinalizeDelete not covered

**Describe the solution you'd like**
1. Add coverage back in
1. Enforce 100% coverage in CI

**Describe alternatives you've considered**
At minimum add coverage back... CI really should enforce or we will keep missing code coverage.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/osal/issues/602
Nasa,,invalid,https://github.com/nasa/osal/issues/601
Integration Candidate: 2020-09-16,"**Describe the contribution**
Fix #584 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/140/checks

**Expected behavior changes**
PR #585 - Sets Revision to 99 for development builds

**System(s) tested on**
Ubuntu - CI

**Additional context**
 https://github.com/nasa/cFS/pull/140


**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",,https://github.com/nasa/osal/pull/600
"Fix #610, Add vxworks7 support","**Describe the contribution**
This is a more Joe-approved vxworks7 addition without the copy of the code.

Fix #610

**Testing performed**
None yet. I'm going to bed. But I wanted to look at it with the CCB. I will try and do testing before the CCB.

**Contributor Info - All information REQUIRED for consideration of pull request**
Steven Seeger, Embedded Flight Systems, Inc.
",conflicts,https://github.com/nasa/osal/pull/599
UtAssert_Zero in utassert.h doxygen brief incorrectly states nonzero,"**Describe the bug**
What appears to be a copy paste error, the assert zero states it is checking for nonzero.  This mimics the assert nonzero brief above it.

**To Reproduce**
https://github.com/nasa/osal/blob/c3b139863d7edfc904983bea050b2147c8b784ab/ut_assert/inc/utassert.h#L193-L210

**Expected behavior**
State ""Confirm an integer value is zero"" instead.

**Code snips**
see above.

**System observed on:**
N/A

**Additional context**
N/A.

**Reporter Info**
Alan Gibson NASA GSFC/587
","docs, unit-test",https://github.com/nasa/osal/issues/598
new osal_id_t code and unit tests using osal stubs,"**Describe the bug**
The SBN application's coverage tests include tests of tasks, such as:

```static void SendTask_Nominal(void)
{
...
    PeerPtr->Connected  = true;
    PeerPtr->SendTaskID = 1;

    UT_SetDeferredRetcode(UT_KEY(OS_TaskGetId), 1, 1);
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_RcvMsg), 2, -1);

    SBN_SendTask();
}
```

The issue is, now, the result of OS_TaskGetId() is an osal_id_t value that I need to compute to put into the SendTaskID field above. There is a helper function `UT_ObjIdCompose()` that could be used by unit tests but it is not currently exposed. For now, I've removed the `UT_SetDeferredRetcode(...TaskGetId)...)` call and instead I hand-copied the ID to write it `...SendTaskID = 1073807361` (the value returned by `ObjIdCompose()`) which is clearly not sustainable.

**Expected behavior**
Expose the ObjIdCompose() function from the OSAL stubs so that unit test code can generate matching ID's.

**Reporter Info**
Christopher.D.Knight@nasa.gov",unit-test,https://github.com/nasa/osal/issues/597
Integration Candidate: 2020-09-09,"**Describe the contribution**
Fix #589 
Fix #593 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/139/checks

**Expected behavior changes**
PR #595 - Move this existing function into the public API, as it is performs more verification than the `OS_ConvertToArrayIndex`
function.

PR #594 - The C library type is signed, and this makes the result check work as intended.

**System(s) tested on**
Ubuntu - CI

**Additional context**
https://github.com/nasa/cFS/pull/139

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/osal/pull/596
"Fix #589, promote OS_ObjectIdToArrayIndex to public API","**Describe the contribution**

Move this existing function into the public API, as it is performs more verification than the `OS_ConvertToArrayIndex`
function.

Fixes #589 

**Testing performed**
Build and sanity test CFE
Run all tests

**Expected behavior changes**
None. 

**System(s) tested on**
Ubuntu 20.04

**Additional context**
 No change to function, just moved to public API.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/595
"Fix #593, change OCS_off_t to a signed type","**Describe the contribution**
The C library type is signed, and this makes the result check work as intended.

Fixes #593 

**Testing performed**
Run all unit tests.  
Note OCS_off_t is only used in coverage testing for OSAL.

**Expected behavior changes**
Fixes issue if caller uses correct type `off_t` to store result.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Issue was exposed by Travis CI failure in change suggested in PR #592, but really a separate issue.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/594
`OCS_off_t` should be a signed type,"**Describe the bug**
`OCS_off_t` is used for OSAL coverage testing to replace the C library `off_t` type as used in e.g. `lseek()`
This is being substituted with an unsigned type, but really should be a signed type.

**To Reproduce**
Suggested change in PR #592 exposes the mismatch:

https://github.com/klystron78/osal/blob/862f1322da247b1ae8a93a9e25e3f76bb5fa8d8e/src/os/portable/os-impl-posix-io.c#L106

Coverage test fails due to later comparison for (result < 0) which is impossible with unsigned type.

**System observed on:**
Ubuntu 20.04

**Additional context**
Using `long` instead fixes it.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/593
Vxworks7,"**Describe the contribution**
This is changes for vxworks7, built on top of a standalone branch to solve several Wconversion warnings when compiling for the platform.

**Testing performed**
I built it and ran my environment with CF 3.0 on a PPC 5020 with vxWorks 7.

**Expected behavior changes**

None, but this branch suggests some small API typing changes.
**System(s) tested on**
PowerPC 5020 (dual-core 64-bit powerpc)
vxWorks 7

**Additional context**
There were some issues building base stuff with conversion and cast-align issues with the vxworks7 64-bit powerpc toolchain.

**Contributor Info - All information REQUIRED for consideration of pull request**
Steven Seeger, GSFC-582. Embedded Flight Systems, Inc.
",duplicate,https://github.com/nasa/osal/pull/592
TTF (test teardown failure) not reported in individual or full test summary,"**Is your feature request related to a problem? Please describe.**
TTF only indicated during the test run, not included in the individual or full summary.

**Describe the solution you'd like**
Include TTF in summaries

**Describe alternatives you've considered**
FAIL/TSF/TTF are all failures...

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, good first issue, unit-test",https://github.com/nasa/osal/issues/591
Integration Candidate: 2020-09-02,"**Describe the contribution**
Fix #555 
Fix #537 
Fix #581 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/136/checks

**Expected behavior changes**
PR #568 - Introduces a new `typedef, osal_id_t`, in `common_types.h`, which should be used to represent an OSAL ID. All API structures/functions are updated to use this typedef in place of the uint32 type wherever it actually refers to an OSAL ID.

PR #579 - Fail tests on startup or tear down failures. These are failures, just a different severity (likely mean the test didn't work as expected and needs to be fixed).

PR #583  - Max timer create test was using `OS_MAX_TIMERS` (the limit for adding timers to a time base), but creating timers is limited by `OS_MAX_TIMEBASES` since the create adds a new time base.

HOTFIX 20200902 - Fix documentation warnings in OSAL.

HOTFIX 20200902 - Hide the call graph on utility functions.

**System(s) tested on**
Ubuntu - CI

**Additional context**
https://github.com/nasa/cFS/pull/136

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
Joseph Hickey, Vantage Systems, Inc.

",,https://github.com/nasa/osal/pull/590
Promote the internal `OS_ObjectIdToArrayIndex` function to the public API,"**Is your feature request related to a problem? Please describe.**
Currently OSAL only provides a public API for `OS_ConvertToArrayIndex` which operates indiscriminately on any object type.  For instance, if passed a task ID, it returns a value in the range of `[0..OS_MAX_TASKS)` and if passed a queue ID it will return a value in the range of `[0..OS_MAX_QUEUES)` and so forth.

But code using this function is using it to index an array of a specific object type (e.g. tasks).  So this creates an opportunity for error if passed the wrong object ID - the caller may get a successful conversion but still get an index that is beyond the range of their local table.

**Describe the solution you'd like**
The `OS_ObjectIdToArrayIndex` function is better because it first enforces that the passed-in ID actually refers to the intended object type.  The public API is actually just a wrapper around this that _defeats_ the type check.  For some reason this got relegated to an internal API.

**Describe alternatives you've considered**
Keep as is, accept risk of getting an index outside the expected range if IDs get mixed.

**Additional context**
As the function already exists it should be just a matter of putting its prototype into the public API, and providing a UT stub for it (easy).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, public-api",https://github.com/nasa/osal/issues/589
Add tracking for order of stub calls during a unit test,"**Is your feature request related to a problem? Please describe.**
It can sometimes be important to know that calls in a function are done in a proper order; i.e. ability to verify that a message is timestamped before it is sent.

**Describe the solution you'd like**
An addition that allows a stub to report that it was called to a central location and this information accessible to a unit test for verification.  Add this to the default stub implementation, but have it be available to stubs that do not use the default.

**Describe alternatives you've considered**
Write local hooks for all stubs used in unit testing that use a local version of this concept.

**Additional context**
Example of situation that requires this:
```    
CFE_SB_TimeStampMsg((CFE_SB_Msg_t*) &XX_AppData.hk);   
CFE_SB_SendMsg((CFE_SB_Msg_t*) &XX_AppData.hk);
```

**Requester Info**
Alan Gibson NASA GSFC/587
","enhancement, wontfix, unit-test",https://github.com/nasa/osal/issues/588
"Apply #585 to Bootes, Set Revision to 99 for development build","**Describe the contribution**
Fix #584 for Bootes

**Testing performed**
Built and ran locally based on bundle tag for bootes-rc1
Built in CI, See https://travis-ci.com/github/astrogeco/cFS/builds/189834136

**Expected behavior changes**
Revision version number now reports `99` during development versions. ES Housekeeping data reports `5.0.99` in the version string.

**System(s) tested on**
Built and ran on Docker container. 

**Additional context**
Approved for main branch in <https://github.com/nasa/osal/pull/585>
Also see nasa/cfe#830

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA-GSFC",backport,https://github.com/nasa/osal/pull/587
"Add functional test for ""one-shot"" timer","**Is your feature request related to a problem? Please describe.**
Spawned from the conversation on #514.  API documentation specifies behavior that isn't covered by the current functional tests (one-shot).

**Describe the solution you'd like**
Add a one-shot timer test

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","bug, unit-test",https://github.com/nasa/osal/issues/586
"Fix #584, Set Revision to 99 for development builds","**Describe the contribution**
Fix #584

**Testing performed**


**Expected behavior changes**
Revision version number now reports `99` during development versions. ES Housekeeping data reports `6.7.99` in the version string.

**System(s) tested on**
Built and ran on Docker container. 

**Additional context**
Also see nasa/cfe#830

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA-GSFC",cFS-Bootes,https://github.com/nasa/osal/pull/585
"ES Reports version 5.0.0 in HK telemetry, when built off a development branch","**Describe the bug**
Misidentifies version

**To Reproduce**
Look at version in ES housekeeping packet.

**Expected behavior**
System should report a consistent version number at startup, from noops, and in tlm.  Could go back to the old way where development versions all report a revision of 99.

**Code snips**
https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/src/es/cfe_es_task.c#L333-L340

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle.

**Additional context**
Got out of sync with new versioning scheme

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/584
"Fix #581, Use OS_MAX_TIMEBASES for max timer create unit test","**Describe the contribution**
Fix #581 - Max timer create test was using OS_MAX_TIMERS (the limit for adding timers to a time base), but creating timers is limited by OS_MAX_TIMEBASES since the create adds a new time base.

**Testing performed**
Build and ran osal_timers_UT, passed without TSF

**Expected behavior changes**
All unit tests now pass

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main + this commit

**Additional context**
TSF failures started getting reported as test failures as part of #579.  This PR should be merged with (or before) #579 or unit tests will fail.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","unit-test, CCB:FastTrack, dependency",https://github.com/nasa/osal/pull/583
Integration Candidate: 2020-08-26,"**Describe the contribution**
Fix #561 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/134/checks

**Expected behavior changes**
PR #562 - In the next major OSAL release, this code will be no longer supported at all. It should be removed early in the cycle
to avoid needing to maintain this compatibility code. This code was already conditional on the `OSAL_OMIT_DEPRECATED` flag and as such the CCB has already tested/verified running the code in this configuration as part of CI scripts.  After this change, the build should be equivalent to the result of building with `OMIT_DEPRECATED=true`.

**System(s) tested on**
Ubuntu - CI

**Additional context**
https://github.com/nasa/cFS/pull/134

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/osal/pull/582
osal_timer_UT test setup failure,"**Is your feature request related to a problem? Please describe.**
```
[BEGIN] 01 OS_TimerCreate
[ PASS] 01.001 ut_ostimer_timerio_test.c:255 - #1 Null-pointer-arg
[ PASS] 01.002 ut_ostimer_timerio_test.c:264 - #2 Name-too-long
[ PASS] 01.003 ut_ostimer_timerio_test.c:277 - #3 Name equal to OS_MAX_API_NAME characters test
[ PASS] 01.004 ut_ostimer_timerio_test.c:288 - #4 Name-taken
[  TSF] 01.005 ut_ostimer_timerio_test.c:310 - #4 No-free-IDs - Timer-created failed
[ PASS] 01.006 ut_ostimer_timerio_test.c:330 - #6 Invalid-arg
[ INFO] 01.007 ut_ostimer_timerio_test.c:337 - #7 Timer-unavailable
[ PASS] 01.008 ut_ostimer_timerio_test.c:348 - #8 Nominal
[  END] 01 OS_TimerCreate       TOTAL::8     PASS::6     FAIL::0      MIR::0      TSF::1      N/A::0
```

**Describe the solution you'd like**
Fix failure, related to #579 

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/osal/issues/581
Possible OSAL bug in OS_FileSysAddFixedMap not allowing FS_BASED mapping on VxWorks ,"**Describe the bug**
Unable to add a arbitrary filesystem path mappings with OS_FileSysAddFixedMap

**To Reproduce**
Call OS_FileSysAddFixedMap w/ parameters &fsid,""/"", ""/"", and it'll fail

**Expected behavior**
Entry added to OS_filesys_table

**Code snips**
 It looks like the error code from line 516 is propagated improperly to line 530 instead of just being used to set flags on 524, causing the finalization step to fail. 
https://github.com/nasa/osal/blob/9c74b1b5207b0eb40662731eb205dba3014de5ed/src/os/shared/src/osapi-filesys.c#L511-L530

**System observed on:**
 - SP0-s
 - OS: VxWorks 6.9
 - CFE 6.7.0+dev292, OSAL 5.0.0+dev247, PSP 1.4.0+dev76 (w/ additions for SP0-s)

**Additional context**
Attempting to add a mapping to / for netbooting off of FTP on SP0-s PSP. Mapping /cf/ to /cf/ used to work earlier this year. In addition, OS_FileSys_FindVirtMountPoint appears to fail to map to ""/"" if it's in the table (although I suppose it's not desirable to map / in production anyway, since it'd override all other mappings). 

**Reporter Info**
John N Pham, Northrop Grumman","bug, vxworks",https://github.com/nasa/osal/issues/580
ut_assert header files not included in 'make osalguide',"**Describe the bug**
When building the osal guide with 'make osalguide' the ut_assert header files are not included

**To Reproduce**
Steps to reproduce the behavior:
1. make osalguide
2. browse guide, no ut_assert files present

**Expected behavior**
ut_assert files included in osal guide

**Code snips**
https://github.com/nasa/cFE/blob/06c08268f2d7a7fe72aceec8c33201ce6ccba2f4/cmake/mission_build.cmake#L204-L208

**System observed on:**
RHEL 7.6

**Additional context**
Adding:
```    ""${osal_MISSION_DIR}/ut_assert/inc/*.h"" ```
after osconfig-example in the  above code includes ut_assert headers in the guide.

**Reporter Info**
Alan Gibson NASA GSFC/587
",docs,https://github.com/nasa/osal/issues/1129
"Fix #537, Fail tests on startup and tear down failures","**Describe the contribution**
Fix #537 - fail tests on startup or tear down failures... these are failures, just a different severity (likely mean the test didn't work as expected and needs to be fixed)

**Testing performed**
Built tests with a known startup failure, test failed as expected

**Expected behavior changes**
Now will fail on startup/tear down failures

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main (+ cfe/osal main) + this change

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/579
[MOVED] Document nested usage of UT_ADD_TEST and clarify nomenclature for individual versus groups of tests,"## Describe the problem

The `UT_ADD_TEST` call has some limitations as addressed in nasa/cFE#840.  Some solutions are discussed in that PR. 

## Proposed Solutions
 
1. Have `UT_ADD_TEST` handle ""nested"" unit tests, OR
2. Develop a nomenclature for unit test functions that explicitly indicates whether there are nested unit tests and then rename unit tests accordingly, OR
3. Document the anti-pattern, OR
4. Split up all unit tests to ensure only one test per function and make this a design pattern.



## Additional Context

_Originally posted by @skliper in https://github.com/nasa/cFE/pull/840#issuecomment-680193849_

>Related to nasa/osal#577.  Individual tests are added w/ the UT_ADD_TEST call.  Some tests are grouped at a lower level (Test_MSG_CCSDSExt is a group of tests), and those functions are called directly.  Same pattern is used in `sb`:
>
>https://github.com/nasa/cFE/blob/a148b97511de3f45f6677c1a3a0b17197f867e28/fsw/cfe-core/unit-test/sb_UT.c#L134-L135

","bug, invalid, unit-test",https://github.com/nasa/osal/issues/578
Adding unit tests from with a unit test not a supported pattern,"**Describe the bug**
Possibly related to #554 (reverted to v5.1.0-rc1 and they ran).  Adding tests after starting to run tests (adding a test within a test) is not a supported pattern, and they won't actually get run (they do get added to the front of the individual list, but the merged test list doesn't not handle them).

**To Reproduce**
Add a unit test from within a unit test, build/execute and the added unit test will not execute.

**Expected behavior**
Didn't know NOT to do this... just don't do it.

**Resolution**
Just don't do it.
Document limitations and proper usage.

**Code snips**
uttest.c - see the adding and merging

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions checked latest integration candidate and v5.1.0-rc1, problem does not exist in v5.1.0-rc1

**Additional context**
#554 

**Reporter Info**
Jacob Hageman - NASA/GSFC","bug, docs",https://github.com/nasa/osal/issues/577
Integration Candidate: 2020-08-19,"**Describe the contribution**
fix #565 
fix #564 
fix #557 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/130/checks

**Expected behavior changes**
PR #558 - Removes internal functions that are no longer used or defined but whose prototypes and stubs were still present in `OS_ObjectIdMap`

PR #567 - Removes repetitive clearing of the global ID and unlocking global table and replaces these with common implementation in the idmap source file. This moves deleting tables to be similar to creating tables and provides
a common location for additional table-deletion-related logic.

PR #566 - Propagates return code from `OS_TaskRegister_Impl()`. If this routine fails then return the error to the caller, which also prevents the task from starting.

**System(s) tested on**
Ubuntu - CI

**Additional context**
https://github.com/nasa/cFS/pull/130 

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/576
UtAssert_Message doxygen comments should include params,"**Describe the bug**
There are no param items listed in the UtAssert_Message method in utassert.h

**To Reproduce**
N/A

**Expected behavior**
Add param descriptions.

**Code snips**
https://github.com/nasa/osal/blob/ff5b38db00c9ff1882fdf5cd5f757a6b96829598/ut_assert/inc/utassert.h#L267-L276

**System observed on:**
RHEL 7.6

**Additional context**
N/A

**Reporter Info**
Alan Gibson NASA GSFC/587
","docs, unit-test",https://github.com/nasa/osal/issues/574
"OS_fsBlocksFree returns a 32-bit value, but OS_statvfs_t.blocks_free is 64 bit ","OS_fsBlocksFree returns a 32-bit value, but OS_statvfs_t.blocks_free is 64 bit.",bug,https://github.com/nasa/osal/issues/573
"FIleSize in os_fstat_t is uint32, should be 64bit friendly","FileSize in os_fstat_t is uint32, but should be off_t like in POSIX. On 64-bit systems. it's a 64-bit value and this causes conversion issues.",enhancement,https://github.com/nasa/osal/issues/572
time and timeouts have no consistent type in OSAL,"In OSAL, time and timeouts are represented typically by both int32 or uint32. This convention is used in many places. It might make sense to have a consistent type for time. Perhaps even absolute and relative time. There are Wconversion issues with uses of these types.",enhancement,https://github.com/nasa/osal/issues/571
OS_statvfs_t types do not match corresponding POSIX types,"When building for 64-bit, Wconversion shows issues with OS_statvfs_t's types. They don't match the types in struct statvfs on POSIX systems. It may be worth a discussion to change these types of just handle the conversions in the specific implementation.",enhancement,https://github.com/nasa/osal/issues/570
sysconf can return -1 on error,"in posix/src/os-impl-tasks.c sysconf() is used. Its storage is into a type size_t, but sysconf() can return -1. We should change the storage to ssize_t to accommodate this, or we should check for -1 and then store a non-negative value to POSIX_GlobalVars.PageSize. sysconf() shouldn't return -1 when passed _SC_PAGESIZE, so this may be low priority.",bug,https://github.com/nasa/osal/issues/569
"Fix #555, provide typedef for OSAL ID","**Describe the contribution**
Introduces a new typedef, `osal_id_t`, in `common_types.h`, which should be used to represent an OSAL ID.  All API structures/functions are updated to use this typedef in place of the `uint32` type wherever it actually refers to an OSAL ID.

Adds inline functions for basic equality/validity check, and conversion back to bare integer for logging purposes.

Fixes #555 

**Testing performed**
Build and run all unit tests
Execute and sanity test CFE.

**Expected behavior changes**
Should be none.  As the `osal_id_t` typedef is a `uint32`, this is just an alias for the same thing.

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11.3

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/568
"Fix #564, consolidate delete finalization code","**Describe the contribution**

Remove repetitive clearing of the global ID and unlocking global table and replace with common implementation in the
idmap source file.  In addition to removing repeated logic, this makes deletion more like an inverse of creation, and provides
a common/single point where additional deletion-related logic can be added.

Fixes #564 

**Testing performed**
Build and sanity test CFE
Confirm all unit tests

**Expected behavior changes**
No impact to external API or behavior.  Internal code consolidation only.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
See also #540 and #532 

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/567
"Fix #565, propagate return code from OS_TaskRegister_Impl()","**Describe the contribution**
If this routine fails then return the error to the caller, which will also prevent the task from starting.

Fixes #565 

**Testing performed**
Build and sanity check CFE
Build and run all unit tests incl. coverage.

**Expected behavior changes**
No impact to behavior, as no known way to force this error, but will correctly propagate an error if one were to occur.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/566
OS_TaskPrepare should propagate return code.,"**Describe the bug**
In the internal `OS_TaskPrepare()` routine, it calls a low-level implementation routine but does not propagate the return code.

**To Reproduce**
More theoretical than real.  In POSIX this depends on the underlying `pthread_setspecific()` routine returning an error, of which the only documented error (at least per POSIX) is `ENOMEM`.  However that doesn't mean that there couldn't be other implementation-specific errors on other systems.

**Expected behavior**
If the `OS_TaskRegister_Impl()` fails, this result should be propagated up the stack and prevent the task from starting.

**Code snips**
See here:
https://github.com/nasa/osal/blob/8cfd6fe71a5506be8e463f26d92441785fd3e242/src/os/shared/src/osapi-task.c#L117-L125

**System observed on:**

**Additional context**
If this fails then it means dependent routines like `OS_TaskGetId()` will also be broken, so it really should block startup of the task and return the error to the caller.  Catching this type of error early, when possible, is usually better than getting an obfuscated error later.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/565
"Consolidate cleanup code into a separate ""FinalizeDelete"" routine","**Is your feature request related to a problem? Please describe.**
All OSAL objects share a basically common pattern for finalization after creation and deletion.  For creation the finalization was consolidated into a `OS_ObjectIdFinalizeNew` routine, but the deletion finalization is basically repeated as it only involved clearing a single global.

**Describe the solution you'd like**
Even though deletion is currently trivial, it is beneficial to consolidate this code as it could become less trivial, as in issue #540 

**Additional context**
This was split from #540

This is a necessary prerequisite in order to implement any sort of common/generic handling without repeating the code everywhere.  It also makes deletion more of a mirror-image of creation, which is really the way it should be.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/564
Integration Candidate: 2020-08-12,"**Describe the contribution**
fix #373 
fix #378 
fix #550 
fix #379 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/127/checks

**Expected behavior changes**
PR #549 - Adds OSAL network APIs missing functional tests as well as tests for OS_TimedRead and OS_TimedWrite 

PR #554 - Allows separate, dynamic registration of test setup and teardown routines which are executed before and after the normal test routine, which can create and delete any global/common test prerequisites.

PR #489 - Adds FileSysAddFixedMap missing functional API test

**System(s) tested on**
Ubuntu - CI

**Additional context**
Part of nasa/cFS#127

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Yasir Khan, Emergent Space Technologies, Inc
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/563
"Fix #561, remove all deprecated code","**Describe the contribution**
In the next major OSAL release, this code will be no longer supported at all.  It should be removed early in the cycle
to avoid needing to maintain this compatibility code.

Fixes #561 

**Testing performed**
Build on native, RTEMS, and VxWorks and Confirm no issues/errors.  
Run all unit tests.
Sanity check CFE core.

**Expected behavior changes**
All old compatibility code is removed.  

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11.3 

**Additional context**
This code was already conditional on the `OSAL_OMIT_DEPRECATED` flag and as such the CCB has already tested/verified running the code in this configuration as part of CI scripts.

After this change, the build should be equivalent to the result of building with `OMIT_DEPRECATED=true`.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CCB:Splinter",https://github.com/nasa/osal/pull/562
Remove OSAL deprecated code for next release,"**Is your feature request related to a problem? Please describe.**
Now that the ""5.1.x"" release branch has been created, the next release should remove all code/functions that are currently marked as deprecated.

**Describe the solution you'd like**
Removal of all code currently contained within an `OMIT_DEPRECATED` conditional compile switch.

**Additional context**
The removal only applies to ""main"" branch - not the 5.1.x release branch, where it will continue to exist for that release series.  This assumes the next release (main) will become version 6.0.

There are other changes currently in development which do break some deprecated items - hence why I'd like to remove this sooner rather than later, as it saves the work of updating/fixing this old code if the intent is to remove it anyway.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/561
Stub for CFE_SB_Msg_t should not get return value from passed in message pointer,"**Describe the bug**
A stub should not have it's return value based upon a passed in value; a stub's return value should be able to be set directly from the unit test. 

**To Reproduce**
Steps to reproduce the behavior:
Write a unit test and attempt to set the return value of CFE_SB_GetMsgId with a null ptr as the passed in value.

**Expected behavior**
The value returned from CFE_SB_GetMsgId should be the one that it is set to, not derived from a passed in message.

**Code snips**
If applicable, add references to the software.

**System observed on:**
RHEL 7.6

**Additional context**
The current design is more in lines with a ""mocked"" method, which can provide output based upon input; a stub should not have this much deterministic behavior (this is more in line with a ut hook).  I do think it is a good thing to have a mocked version of this function, but it should not be the default stub.  When unit testing it is doubtful there is an actual message available and a unit test will have to build a dummy with the message ID installed within it.  This adds many steps to what would be a much easier job with just being able to set the return value.

**Reporter Info**
Alan Gibson NASA GSFC/587
",invalid,https://github.com/nasa/osal/issues/560
UT_SetForceFail is a misnomer,"**Describe the bug**
UT_SetForceFail assumes that the value given, that is being set as return value, is a fail condition.  There may be sometimes that a function returns more than 1 value that is not considered a fail.

**To Reproduce**
Use in a unit test where there is a stubbed function with more than 1 ""successful"" return value.

**Expected behavior**
Change to something like UT_SetForcedReturnValue to make it more generic.  

**Code snips**
N/A

**System observed on:**
RHEL 7.6

**Additional context**
Not a required or debilitating situation, but a name change may be make the function's effects more clear.

**Reporter Info**
Alan Gibson NASA-GSFC/587
","bug, unit-test",https://github.com/nasa/osal/issues/559
"Fix #557, remove OS_ObjectIdMap/Unmap prototype and stub","**Describe the contribution**
These internal functions were no longer used or defined but the prototype and stub were still present.  This removes them.

Fixes #557 

**Testing performed**
Compile and run unit tests.

**Expected behavior changes**
None - unused/stale code cleanup.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/558
Cleanup - remove OS_ObjectIdMap/Unmap internal prototypes,"**Is your feature request related to a problem? Please describe.**
The functionality provided by OS_ObjectIdMap and OS_ObjectIdUnmap has been replaced by other functions and these are neither used nor defined in the current OSAL, but they are still declared/prototyped in `os-shared-impl.h`

**Describe the solution you'd like**
Remove unused/leftover prototypes

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/557
Deprecate OS_open and OS_creat,"**Is your feature request related to a problem? Please describe.**
For historical/backward compatibility reasons, the API of these two functions doesn't follow the typical flow.  Rather than providing a `uint32` ID output buffer as the first argument with a separate int32 return code, they return the OSAL ID cast as an `int32` on success.  For these functions, the caller is expected to check if the result is negative, and if so, consider it an error code.  Whereas if it is non-negative, the caller is expected to cast it back to a `uint32` type and interpret it as an OSAL ID.

**Describe the solution you'd like**
These should be like all other OSAL APIs and pass back the ID separately from the return/error status.

**Describe alternatives you've considered**
Leave as is.  But these two functions present a challenge when making a distinct type for OSAL IDs .

**Additional context**
In the current implementation,. these are just compatibility wrappers anyway.  They both call `OS_OpenCreate()` internally, which provides both open (existing file) and creat (new file) based on the flags it was passed.  The `OS_OpenCreate` function _does_ follow the correct pattern so one option would be to just expose this to the public API.

The other option is to create a new version of OS_open and OS_creat which follow the correct pattern.  But in order to provide a transition they would have to use different names.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, deprecate",https://github.com/nasa/osal/issues/556
"OSAL should provide a typedef for ""ID"" values","**Is your feature request related to a problem? Please describe.**
The OSAL API uses `uint32` type to identify objects/resources in an abstract way.

**Describe the solution you'd like**
There should be a typedef for this.  For instance:

    typedef uint32 OS_id_t;

This typedef can then be used in all APIs rather than using `uint32` directly.

**Describe alternatives you've considered**
Keep using `uint32`.

**Additional context**
Providing a typedef is generally accepted as good practice in terms of future proofing the code.  This wouldn't change anything immediately, as the type will remain `uint32` as it currently is.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/555
"Fix #550, add function groups to ut assert","**Describe the contribution**

Clean up and Refactor the internal list storage structures to support having multiple list heads/groups.  Define a separate list/group for setup, normal test, and teardown.

The existing UtTest_Add() routine maps to the normal test group. Added a UtTest_AddSetup() and UtTest_AddTeardown() routine that maps to the setup and teardown group, respectively.

The existing UtTest_Run() routine then merges the groups and executes the full suite of tests.

This allows separate, dynamic registration of test setup and teardown routines which are executed before and after the normal test routine, which can create and delete any global/common test prerequisites.

Fixes #550 

**Testing performed**
Build and run all unit tests
Update a unit test to additionally register separate setup and teardown functions and confirm that these are always run first and last, respectively.

**Expected behavior changes**
Test programs may now register global setup and teardown routines.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/554
Lengthen allowable unit test names,"**Describe the bug**
Not sure if it is a bug, but why is the TestName length based upon OS_MAX_API_NAME*2 in utglobal.h?


**To Reproduce**
Steps to reproduce the behavior:
1. Write a unit test with a name longer than OS_MAX_API_NAME*2
2. Run tests and see that the test name is truncated

**Expected behavior**
Provide enough space for long (descriptive) test names.

**Code snips**
https://github.com/nasa/osal/blob/8cfd6fe71a5506be8e463f26d92441785fd3e242/ut_assert/src/utglobal.h#L53
   
    char    TestName[OS_MAX_API_NAME*2];

**System observed on:**
 - PC 
 - RHEl 7.6
- current 'master' branch

**Additional context**
This is only an issue because I use long descriptive test names.

**Reporter Info**
Alan Gibson
GSFC, Code 587
","enhancement, question, unit-test",https://github.com/nasa/osal/issues/553
Use a changelog to keep track of changes instead of having them in the Readme ,"**Is your feature request related to a problem? Please describe.**
The version history in the Readme file clutters useful information

**Describe the solution you'd like**
Move the ""version history"" from `Readme.md` to `CHANGELOG.md` and start following this spec: https://keepachangelog.com/en/1.0.0/

**Describe alternatives you've considered**
Move changelog section in the readme to a section at the very bottom of the file

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
","docs, draco-rc4",https://github.com/nasa/osal/issues/552
Doxygen warning:  file argument matching multiple files,"**Describe the bug**
Doxygen produces multiple ambiguous file warnings when building the documentation using `make doc` at the bundle level. For example:

```
/cfs/cFS/osal/src/os/posix/inc/os-impl-binsem.h:22: warning: the name `os-impl-binsem.h' supplied as the second argument in the \file statement matches the following input files:
   /cfs/cFS/osal/src/os/posix/inc/os-impl-binsem.h
   /cfs/cFS/osal/src/os/rtems/inc/os-impl-binsem.h
   /cfs/cFS/osal/src/os/vxworks/inc/os-impl-binsem.h
Please use a more specific name by including a (larger) part of the path!
```

See more warnings in this log
[warnings.log](https://github.com/nasa/osal/files/4976617/warnings.log)

**To Reproduce**
Checkout cFS bundle with submodules. 

Copy the `sample_defs` from cFE into the cfs root directory as well as the Makefile then

```
make prep
make doc
```

examine `cFS/build/doc/warnings.log`


**Expected behavior**
No warnings about multiple files

**Code snips**

This code 

```c
/**
 * \file     os-impl-binsem.h
 * \ingroup  rtems
 * \author   joseph.p.hickey@nasa.gov
 *
 */
```
can be replaced with
```c
/*!
 * \file     rtems/inc/os-impl-binsem.h
 * \ingroup  rtems
 * \author   joseph.p.hickey@nasa.gov
 *
 */
```

**System observed on:**
Ubuntu running on Docker 

**Additional context**
None

**Reporter Info**
Gerardo E. Cruz-Ortiz
","duplicate, docs",https://github.com/nasa/osal/issues/551
Add UtTest_Teardown() to ut_assert,"**Is your feature request related to a problem? Please describe.**
I would like to have a ""Teardown"" that runs at the end of the unit tests test-runner file.  Much like the UtTest_Setup runs at the start.

**Describe the solution you'd like**
Add a UtTest_Teardown() that is called after all the tests have run.

**Describe alternatives you've considered**
Not having it, which is the current state.

**Additional context**
This is a common feature with most unit test frameworks.

**Requester Info**
Alan Gibson
NASA Goddard Code 587
","enhancement, unit-test",https://github.com/nasa/osal/issues/550
"fix #373, Add OSAL network APIs missing functional tests and fix #378 OS_TimedRead and OS_TimedWrite missing functional tests","fix #373, Add OSAL network APIs missing functional tests
fix #378, OS_TimedRead and OS_TimedWrite missing functional tests

**Describe the contribution**
Added OSAL network  and OS_TimedRead and OS_TimedWrite missing functional tests.

**Testing performed**
Steps taken to test the contribution:
Standard build and ran unit tests.

**System(s) tested on**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Contributor Info** 
Yasir Majeed Khan
NASA GSFC/Emergent Space",CCB:Approved,https://github.com/nasa/osal/pull/549
fix #547 - ut_assert doc updates,"**Describe the contribution**
Fixes #547 

Fixes a typo in ut_assert README and clarifies stub documentation.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",CCB:FastTrack,https://github.com/nasa/osal/pull/548
"ut_assert - typo in readme, some clarifications of stub functions","**Describe the bug**
There's a typo in the ut_assert readme, plus some of the stub function comments are not very clear and could use a bit of cleanup.

**Reporter Info**
Christopher.D.Knight@nasa.gov","docs, unit-test",https://github.com/nasa/osal/issues/547
would like a single function to reset all stubs,"In writing unit tests, I would find it useful to be able to reset the stub configurations per each test, and while there is a way to reset individual stubs, there is not a global reset capability in the ut_assert framework.

The UT_ResetState() resets one stub, and makes reference to UT_Init(), but the UT_Init() function is not exposed publicly.

https://github.com/nasa/osal/blob/80fdd67a6c28a962164697ece12570142331ea44/ut_assert/inc/utstubs.h#L118",duplicate,https://github.com/nasa/osal/issues/546
Documentation Updates,"**Describe the bug**
1. In osapi-os-net.h, OS_SocketAccept lists addr as an [in] parameter where as it is an [out] parameter.  This is where a new connection's incoming address is stored as an output to the function call and is not an input to the function.
(File location: osal/src/os/inc/osapi-os-net.h)

2. In osapi-os-core.h, OS_TaskCreate notates  the input parameter ""stack_size"" as ""stack_size: the size of the stack, or 0 to use a default stack size"".   A 0 input here is not valid and should be appointed an appropriate stack size.  
(File location: osal/src/os/inc/osapi-os-core.h)

3. In osapi-os-filesys.h, OS_TimedRead/OS_TimedWrite.  While the documentation is clear that these functions are used primarily with sockets, it is unclear how a socket may be used as an input parameter.  The first input parameter ""filedes"" is notated as ""The handle ID to operate on"" but I think it would be prudent to add an additional comment to explain that this is also the socket ID.  Perhaps these two functions should also be defined with the rest of the network functions in (osal/src/os/inc/osapi-os-net.h) instead of with functions used for file operations (osal/src/os/inc/osapi-os-filesys.h) for further specified use and clarity.  It was not easily clear on how to send messages back and forth between a STREAM connection, as it is with DATAGRAM connections.
(File location: osal/src/os/inc/osapi-os-filesys.h)

**System observed on:**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Yasir Majeed Khan
NASA GSFC/Emergent Space
",docs,https://github.com/nasa/osal/issues/545
DATAGRAM Network Function OS_SocketSendTo Segfault,"**Describe the bug**
OS_SocketSendTo() Segfaults when passed in NULL for Remote Address (last parameter) and all the other parameters are valid.


**System observed on:**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Reporter Info**
Y. M. K.
Emergent ",bug,https://github.com/nasa/osal/issues/544
Add OS_GetModuleIdByName() to return ID of a module given the name,"**Is your feature request related to a problem? Please describe.**
If ES loads a module (such as a library that an app uses), but an app wishes to unload that module, that app has no way to find the ID to send to the Unload function.

**Describe the solution you'd like**
Add an OS_GetModuleIdByName() function that returns (via an out param) the ID of the module given its name.

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, good first issue",https://github.com/nasa/osal/issues/543
"Fix #540, add event callback framework","**Describe the contribution**
Adds an event callback mechanism to certain state changes in OSAL.  This allows the CFE PSP to be notified at these points, and therefore it can add platform-specific functionality.  This can, for instance, set the task name as requested in #532 or set the processor affinity in a multi-core setup (TBD).

Fixes #540 

**Testing performed**
Create an event handler in the pc-linux CFE PSP and register it, and print out each event received.  Confirm events are generated as expected, and that it didn't break the FSW in any way.

Note - Not completely tested yet -- this is mainly a proof of concept and pushed for design review at this time.

**Expected behavior changes**
Adds ability to implement custom platform-specific functionality for defined events.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Previous discussion in #532.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",cFS-Caelum,https://github.com/nasa/osal/pull/541
OSAL event callback framework for platform-specific handling,"**Is your feature request related to a problem? Please describe.**
Many platforms support extra non-standardized features, but OSAL cannot make use of these.  This includes items such as setting the processor affinity in a multi-processor system, or propagating the user-friendly task name at the OS level, as was suggested in #532. 

**Describe the solution you'd like**
An event callback framework could help solve this problem, allowing those platform-specific features to be invoked from the PSP/BSP layer while keeping OSAL itself standards-compliant.

**Describe alternatives you've considered**
Use `#ifdef` conditional compiles for platform-specific features (ugly and not as maintainable).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/540
"Fix #538, correct loop variable for coverage install","**Describe the contribution**
Install use the loop variable (TGT) not TGTNAME for DESTINATION.

Fixes #538 

**Testing performed**
Build with ENABLE_UNIT_TESTS=TRUE and a configuration with multiple CPUs sharing a single arch+platform config.

**Expected behavior changes**
Without this fix, the coverage binaries are installed twice to CPU2 but not at all for CPU1.
With this fix, they are correctly installed for CPU1 and CPU2.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
No change to behavior at all - just an install path fix.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/539
Incorrect install/staging location for coverage test binaries,"**Describe the bug**
Typo in cmake file - the loop variable when installing coverage binaries is `TGT` but the DESTINATION refers to `TGTNAME`.

**To Reproduce**
Build with multiple CPUs sharing the same target+platform config.

**Expected behavior**
Binaries should be installed for everything in INSTALL_TARGET_LIST.

**Code snips**
https://github.com/nasa/osal/blob/80fdd67a6c28a962164697ece12570142331ea44/src/unit-test-coverage/CMakeLists.txt#L86-L89

**System observed on:**
Ubuntu 20.04

**Additional context**
The CFE scripts also do set `TGTNAME` in other places so it by chance had a leftover value that happened to be the same thing, and therefore this wouldn't be noticed when building for a single target (the default case).

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, build-system",https://github.com/nasa/osal/issues/538
Overall Tests Pass Even With a TSF,"**Describe the bug**
The software is set up such that overall tests pass even if there is a test case that TSF.  I have had individual TSFs, and yet the overall tests showed everything passed.  

See code here: https://github.com/nasa/osal/blob/80fdd67a6c28a962164697ece12570142331ea44/ut_assert/src/utbsp.c#L213

**System observed on:**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Reporter Info**
Y. M. K.
Emergent ",bug,https://github.com/nasa/osal/issues/537
"Resolve #531, Add baseline and build number","**Describe the contribution**
Resolve #531 

**Testing performed**
Bundle CI
Docker-based testing using gcc image

**Expected behavior changes**
New macros defined. No changes on it's own. When combined with nasa/cfe#771 and nasa/psp#178 then startup reporting looks like 
<img width=""331"" alt=""Screen Shot 2020-07-15 at 8 56 43 AM"" src=""https://user-images.githubusercontent.com/59618057/87557256-ab977000-c685-11ea-893c-a27e54441639.png"">
<img width=""340"" alt=""Screen Shot 2020-07-15 at 8 56 52 AM"" src=""https://user-images.githubusercontent.com/59618057/87557332-c5d14e00-c685-11ea-8fd7-4ad987984e72.png"">
<img width=""208"" alt=""Screen Shot 2020-07-15 at 8 56 35 AM"" src=""https://user-images.githubusercontent.com/59618057/87557452-ebf6ee00-c685-11ea-8914-c4ea6844fde4.png"">



**System(s) tested on**
Ubuntu 

**Additional context**
Left in a commented-out section for replacing the version string for official releases. 

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",CCB:FastTrack,https://github.com/nasa/osal/pull/536
"Fix #534, adjust UT assert buffer sizes","**Describe the contribution**

Avoids a possible truncation in snprintf call.
Fixes #534 

**Testing performed**
Build and run unit tests.

**Expected behavior changes**
No buffer size/truncation warning when building with optimization enabled.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/535
New buffer size warning in UT assert,"**Describe the bug**
After moving the UtAssert_DoTestSegmentReport() function, it has triggered a new warning when building with optimization enabled (BUILDTYPE=release).

```
/home/joe/code/cfecfs/github-cfs-bundle/osal/ut_assert/src/utassert.c:82:20: error: ‘%-20s’ directive output may be truncated writing between 20 and 127 bytes into a region of size between 117 and 125 [-Werror=format-truncation=]
   82 |              ""%02u %-20s TOTAL::%-4u  PASS::%-4u  FAIL::%-4u   MIR::%-4u   TSF::%-4u   N/A::%-4u\n"",
```

**To Reproduce**
Build with GCC9+ and `BUILDTYPE=release` flag.

**Expected behavior**
Should build cleanly.

**System observed on:**
Ubuntu 20.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, unit-test",https://github.com/nasa/osal/issues/534
"Fix #532, Set pthread names to match CFE tasks names","**Describe the contribution**
This change allows underlying OS tools to view thread names for platforms that support the pthread_setname_np function.

**Testing performed**
Steps taken to test the contribution:
1. Set #define OS_HAVE_PTHREAD_SETNAME_NP in osconfig for target
2. Run CFE environment
3. Run htop under Linux and verify thread names appear

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: Adds a task_name parameter to the OS_Posix_InternalTaskCreate_Impl function
 - Behavior Change: None

**System(s) tested on**
 - Hardware: PC
 - OS: Ubuntu 18.04
 - Versions: cFE 6.7.0, OSAL 5.0.0

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Daniel Burns
GSFC - Code 596.0
daniel.s.burns@nasa.gov
",duplicate,https://github.com/nasa/osal/pull/533
Set posix thread names using task name when creating CFE tasks,"**Is your feature request related to a problem? Please describe.**
It would be helpful for the pthread name to match the CFE task name in the underlying OS on POSIX platforms.  This would allow for a better user experience when debugging CFE applications using Linux based utilities i.e. strace, htop, etc.

**Describe the solution you'd like**
This can be accomplished by using the _pthread_setname_np_ function in the _OS_Posix_InternalTaskCreate_Impl_ function.  Since this is a non-posix function, each BSP can specify the availability of this function through a #define in osconfig.h

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Dan Burns (GSFC - 596.0)
daniel.s.burns@nasa.gov
",duplicate,https://github.com/nasa/osal/issues/532
Add build number and codename to version.h,"**Is your feature request related to a problem? Please describe.**
Need a better way to describe versions during development

**Describe the solution you'd like**
As discussed, we will add a a build name string and a continuously incrementing build number to `version.h`

**Additional context**
See notes from CCB: <https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-July-01-2020>

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",,https://github.com/nasa/osal/issues/531
OS_FPUExcSetMask and OS_FPUExcGetMask VxWorks OSAL unit tests fail,"**Describe the bug**
The VxWorks OSAL unit tests for OS_FPUExcSetMask and OS_FPUExcGetMask are CPU specific, not just OS specific.  These functions have conditionally compiled code that is conditional on whether or not the platform is the PPC440, but the unit test code does not.

**Expected behavior**
The unit test should pass, though I'm unsure whether the break is in the OSAL or the unit test code.

**System observed on:**
 - AiTech SP0-S
 - OS: VxWorks 6.9
 - OSAL 5.0.3-bv

**Reporter Info**
Mathew Benson
Windhover Labs
",duplicate,https://github.com/nasa/osal/issues/530
VxWorks OS_CountSemCreate unit test fails,"**Describe the bug**
The OS_CountSemCreate unit test, ""#4 Initial-count-too-high"", fails.  This is because the vxworks OSAL, as written, does not check the initial count.  Rather, it passes it directly to the OS call.

**Expected behavior**
It should pass.

**System observed on:**
 - AiTech SP0-S 
 - OS: VxWorks 6.9
 - OSAL 5.0.3-bv

**Reporter Info**
Mathew Benson
Windhover Labs
","bug, unit-test",https://github.com/nasa/osal/issues/542
Integration Candidate: 2020-06-24,"**Describe the contribution**
Fix #196
Fix #522
Fix #525
Fix #526
Fix #534 
Fix #538  
Fix #547
Resolve #531 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/108/checks

**Expected behavior changes**

PR #490 - Changed timer-test to be able to use OS_MAX_TIMERS value on top of the hard-coded NUMBER_OF_TIMERS value. This will allow the test to be functional even if the OS_MAX_TIMERS value is reconfigured.

PR #523 -  `OS_SocketOpen()` sets `sock_id` and returns a status when successful.

PR #527 - Ensures that
  - All stub routines register their arguments in the context, so that the values will be available to hook functions.
  - The argument names used in stubs match the name in the prototype/documentation so the value can be retrieved by name.

PR #528 - Adds back rounding up to PTHREAD_STACK_MIN and also adds rounding up to a system page size. Keeps check for zero stack at the shared level; attempts to create a task with zero stack will fail. Allows internal helper threads to be created with a default minimum stack size.

PR #535 - Avoids a possible truncation in snprintf call. No buffer size/truncation warning when building with optimization enabled.

PR #536 - Added new macros to `osapi-version` to report baseline and build number 

PR #539 - The coverage binaries are now correctly installed for CPU1 and CPU2 as opposed to installed twice to CPU2 but not at all for CPU1.

PR #548 - Fixes a typo in ut_assert README and clarifies stub documentation.

**System(s) tested on**
Ubuntu - CI

**Additional context**
Part of https://github.com/nasa/cFS/pull/108

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher D. Knight, NASA-ARC
Yasir Khan, Emergent Space Technologies, Inc
Joseph Hickey, Vantage Systems, Inc.
Gerardo E. Cruz-Ortiz, NASA-GSFC
",,https://github.com/nasa/osal/pull/529
"Fix #525, ensure POSIX stack size meets requirements","**Describe the contribution**
The `pthread_attr_setstacksize()` function stipulates that it may fail if the user-supplied stack size is not at least
`PTHREAD_STACK_MIN` and also possibly a multiple of page size.

This partially reverts previous PR #508 and adds back rounding up to `PTHREAD_STACK_MIN` and also adds rounding up to a system page size.  However the check for zero stack still remains at the shared level so attempts to create a task with zero
stack will still fail.  This allows internal helper threads to be created with a default minimum stack size, however.

Fixes #525 

**Testing performed**
Build and sanity check CFE executing as both normal user and root user.
Execute all unit tests as both normal user and root user.

**Expected behavior changes**
No failure due to stack size not meeting system requirements.

**System(s) tested on**
Ubuntu 20.04, running as normal user.
CentOS 8.1 in VM running as root user.

**Additional context**
This also moves the `pthread_attr_setstacksize()` call such that it is configured regardless of whether task priorities are enabled nor not (i.e. non root user).  The normal user should still be able to configure the stack size even if they lack permission to set scheduling priority.

Also confirmed that by moving the call to `pthread_attr_setstacksize()` that the original bug report is reproducible in a non-root environment - which is also fixed by this change.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/528
"Fix #526, scrub OSAL stubs","**Describe the contribution**
Ensure that:

1. All stub routines register their arguments in the context, so that the values will be available to hook functions.
2. The argument names used in stubs match the name in the prototype/documentation so the value can be retrieved by name.

Fixes #526 

**Testing performed**
Build and execute all unit tests
Sanity check CFE

**Expected behavior changes**
No impact to behavior.  This just makes it so hook functions can access the full set of parameters for all stub APIs.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/osal/pull/527
Scrub all OSAL UT stub functions,"**Is your feature request related to a problem? Please describe.**
Need to scrub all OSAL unit test stub routines, similar to nasa/cfe#762 but for OSAL.

**Describe the solution you'd like**
- All functions prototyped in the OSAL public API headers (the `src/os/inc` dir) should also have a stub defined.
- All arguments should be registered in the context so the complete context is available within UT hook functions. 
- The argument names should always match the prototype.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/526
OS_API_Init() failure due to 0 stack size,"**Describe the bug**
OS_API_Init() fails on generic-linux due to a stack size of 0 being used for the console task.

**To Reproduce**
1. Build the provided example using the 'generic-linux' BSP.
2. Execute the provided example.

**Expected behavior**
The three test tasks should execute.

**Actual behavior**
OS_API_Init() fails with the following error message (debug messages enabled):

`OS_Posix_InternalTaskCreate_Impl():473:pthread_attr_setstacksize error in OS_TaskCreate: Invalid argument
`

**Code snips**
The error occurs on the following call to pthread stack size in OS_Posix_InternalTaskCreate_Impl():

`return_code = pthread_attr_setstacksize(&custom_attr, stacksz);
`

The reason it fails is because the stacksz is set to zero in OS_ConsoleCreate_Impl():

`return_code = OS_Posix_InternalTaskCreate_Impl(&consoletask, OS_CONSOLE_TASK_PRIORITY, 0,
                    OS_ConsoleTask_Entry, local_arg.opaque_arg);
`

**System observed on:**
 - Hardware: Dell Precision 7540 Laptop
 - OS: WSL2 Ubuntu 18.04.4 LTS
 - Versions: OSAL master 

**Additional context**
This issue is resolved by using a stack size of PTHREAD_STACK_MIN instead of 0:

`return_code = OS_Posix_InternalTaskCreate_Impl(&consoletask, OS_CONSOLE_TASK_PRIORITY, PTHREAD_STACK_MIN,
                    OS_ConsoleTask_Entry, local_arg.opaque_arg);
`

**Reporter Info**
Adam St. Amand
",bug,https://github.com/nasa/osal/issues/525
"Fix #520, Update license and README for Apache 2.0, also updated quickstart","**Describe the contribution**
Update license and README for Apache 2.0 approval
Fix #520 
Fix #351 

**Testing performed**
CI (comment/document changes only)

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/osal/pull/524
Fix #522 - SocketOpen stub should set sock_id,"**Describe the contribution**
Fix #522 - OS_SocketOpen() should, on ""success"", set sock_id and return a status.

**Additional context**
See OS_SocketOpen() definition in https://github.com/nasa/osal/blob/bc73437ea95af54078ba40ce4001a567b1bbc393/src/os/inc/osapi-os-net.h#L232

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov","CCB:Approved, unit-test",https://github.com/nasa/osal/pull/523
"OS_SocketOpen UT stub returns ""socket ID"" not status","Per the OS_SocketOpen() definition, on successful socket creation, it should set the sock_id out parameter and return status. Instead the stub does not set the sock_id but returns the ID.

https://github.com/nasa/osal/blob/bc73437ea95af54078ba40ce4001a567b1bbc393/src/ut-stubs/osapi-utstub-sockets.c#L40",unit-test,https://github.com/nasa/osal/issues/522
Integration candidate: 2020-06-17,"**Describe the contribution**
Fix #499
Fix #501
Fix #505 
Fix #506
Fix #520
Fix #351


**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/106/checks

**Expected behavior changes**
PR #500 - Command line options in Linux are recognized, no longer ignored/dropped.

PR #504 - No impact to current unit testing which runs UT assert as a standalone app. Add a position independent code (PIC) variant of the ut_assert library, which can be dynamically loaded into other applications rather than running as a standalone OSAL application. This enables loading 
UT assert as a CFE library.

PR #507 - Unit tests pass on RTEMS. 

PR #508 - Resolve inconsistency in how the stack size is treated across different OS implemntations. With this change the user-requested size is passed through to the underlying OS without an enforced minimum. An additional sanity check is added at the shared layer to ensure that the stack size is never passed as 0.

PR #524 - Update Licenses for Apache 2.0

**System(s) tested on**
Ubuntu:Bionic

**Additional context**
Part of https://github.com/nasa/cFS/pull/106

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
 Joseph Hickey, Vantage Systems, Inc.
Jacob Hageman, NASA-GSFC",,https://github.com/nasa/osal/pull/521
Copyright/License update for current master,"**Is your feature request related to a problem? Please describe.**
Copyright/license update for current master, relative to Apache 2.0 approval

**Describe the solution you'd like**
Update.

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",docs,https://github.com/nasa/osal/issues/520
Copyright/License and README update for 5.0 release,"**Is your feature request related to a problem? Please describe.**
Old markings and documents need to be updated for release

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/519
"Fix #516, Use absolute timeout for timedlock calls","**Describe the contribution**
The pthread API defines the timeout parameter for the pthread_mutex_timedlock call as an absolute value based on CLOCK_REALTIME.

This introduces a wrapper function to calculate the absolute timeout for this.

Fixes #516 

**Testing performed**
Build and execute CFE, sanity check CFE operation, and run all unit tests.
Coverage is not affected because there is no coverage test for POSIX.

**Expected behavior changes**
The timed lock in binary semaphores should now correctly wait for up to 2 seconds for the lock to become available before failing.  The net effect of passing a relative timeout in place of an absolute one meant that the code would not wait, basically turning into a ""trylock"" instead.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Unfortunately this wasn't previously noticed during testing because it requires getting two tasks to operate on the same binary sem at exactly the same time, which is difficult to replicate.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:FastTrack,https://github.com/nasa/osal/pull/518
Release processing 5.0.0,"**Describe the contribution**
License and readme updates to version 5.0.0

Fix #519

**Testing performed**
Nominal unit test and build from bundle.  See VDD in cFS for full test description of release.

**Expected behavior changes**
No impact, header and document updates

**System(s) tested on**
 - Hardware: cFS Dev server
 - OS: Ubuntu 18.04
 - Versions: 6.7 bundle

**Additional context**
Switched to Apache 2.0 license

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:FastTrack",https://github.com/nasa/osal/pull/517
Second parameter of pthread_mutex_timedlock should be absolute time not timeout,"In src/os/posix/src/os-impl-binsem.c, there are three calls to pthread_mutex_timedlock, each time with &OS_POSIX_BINSEM_MAX_WAIT as the second parameter where OS_POSIX_BINSEM_MAX_WAIT has a value of 2 seconds. because the second parameter of pthread_mutex_timedlock should be an absolute time and is not a timeout, if the mutex is not immediately available, pthread_mutex_timedlock will return with ETIMEDOUT resulting in the OS_BinSemFlush_Impl, OS_GenericBinSemTake_Impl, or OS_BinSemGive_Impl call returning OS_SEM_FAILURE.

Here's a code snippet of the ""as is"":
    if ( pthread_mutex_timedlock(&sem->id, &OS_POSIX_BINSEM_MAX_WAIT) != 0 )
    {
       return(OS_SEM_FAILURE);
    }

It should look something like:

   struct timespec timeoutTime;
   clock_gettime(CLOCK_REALTIME, &timeoutTime);
   timeoutTime.tv_sec += OS_POSIX_BINSEM_MAX_WAIT.tv_sec;
   timeoutTime.tv_nsec += OS_POSIX_BINSEM_MAX_WAIT.tv_nsec;
   if ( pthread_mutex_timedlock(&sem->id, &timeoutTime) != 0 )
   {
      return(OS_SEM_FAILURE);
   }

Reproducing this issue is tricky as the cFS application has to run long enough to have a mutex not immediately available for the lock. The behavior I'm seeing in my installation is the background task terminates and Ctrl-C can no longer be used to terminate the application. I'm running in a Centos 7 Virtual Box machine.

Jonathan C. Brandenburg
METECS
jonathan.c.brandenburg@nasa.gov
",bug,https://github.com/nasa/osal/issues/516
Use of hardcoded numbers for bad IDs in OSAL unit tests,"**Is your feature request related to a problem? Please describe.**
Some unit tests pass a hardcoded magic number i.e. 99999 to OSAL functions to evoke a bad ID error, such as the case here:

https://github.com/nasa/osal/blob/bc73437ea95af54078ba40ce4001a567b1bbc393/src/unit-tests/ostimer-test/ut_ostimer_timerio_test.c#L515-L519

As the API doesn't specifically dictate what constitutes a good ID vs. a bad ID, there is a possibility that in some OSAL implementation this value `99999` might actually be a valid ID.  

This is a concern for black box tests which are supposed to be implementation-agnostic, but need to validate that the correct error is returned when called with a bad ID.

**Describe the solution you'd like**
The OSAL API should define macro to provide a value which is guaranteed to always be a valid ID.  Unit tests can use this symbol instead of the magic number.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test",https://github.com/nasa/osal/issues/515
osal_timer_UT has an incorrect failure,"**Describe the bug**
The UT_os_timerset_test() in the osal_timer_UT  calls ""OS_TimerSet(99999, startTime, intervalTime)"", with both startTime and intervalTime set to 0, expecting that it will fail the ID check before it will fail the start and interval time checks.  

**To Reproduce**
Steps to reproduce the behavior:
1. Build and run osal_timer_UT on the sample build from the getting started instructions in the cFS repository.

**Expected behavior**
The unit test is written expecting that the ID validity check will fail before the start and interval time check fails.  Its expecting it will return OS_ERR_INVALID_ID, but when when you run this on using the POSIX OSAL from 5.0.3-bv version, it will actually return OS_ERROR because the start and interval times are invalid.  

**Code snips**
A quick fix is to initialize startTime and intervalTime to 1, which will cause the OS_TimerSet() function to pass the start and interval time checks, and fail on the ID check as expected.

**System observed on:**
 - VirtualBox
 - Ubuntu 16.04
 - OSAL 5.0.3-bv

**Additional context**
While changing the start and interval times to 1 will fix this problem in this specific case, the test is actually specific to the OSAL (posix, vxworks, rtems, etc...) under test.  I would argue that a better design would be to have 1 common OSAL unit test to verify functionality, i.e. that tasks function as tasks, and mutexes function as mutexes, but that each OSAL might have their own individual set of unit tests that are specific to that OSAL.  You can think of the common set as black box tests, that are verifying the OSAL meets functional requirements, and white box tests for coverage.  White box testing, by their nature, are specific to the source code under test.  Therefore, each OSAL might have its own set of white box testing to ensure coverage for that particular OSAL.  

Those unit tests normally exercise all the function parameters, to get coverage.  That particular unit test does not exercise the start or interval time arguments, because the original OSAL they were written to does not have a validity check for the start or interval time arguments.  This is an example of a unit test suite that was written for a specific OSAL. 

We follow this concept in our CFS fork.  The unit tests originally created by GSFC work well as black box tests.  They have little to know platform or configuration dependency.  We run the same unit tests on all the NASA provided OSALs, as well as all the OSALs we have written.  The unit tests originally created by JSC work well as white box tests, as this bug report indicates.  Those unit tests usually fail when we try running them on other OSALs, because of issues similar to what this issue is referring to.

**Reporter Info**
Mathew Benson
Owner
Windhover Labs, LLC
",invalid,https://github.com/nasa/osal/issues/514
Fast Track for Integration Candidate 2020-06-10,"**Describe the contribution**
Fast Tracked Changes to Integration Candidate 2020-06-10

Fix #509 
Fix #502 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/102/checks

**Expected behavior changes**

PR #503 - Added the following wrappers macros around `UtAssert_True` for commonly-used asserts:
- `UtAssert_INT32_EQ` - check equality as 32 bit signed int
- `UtAssert_UINT32_EQ` - check equality as 32 bit unsigned int
- `UtAssert_NOT_NULL` - check pointer not null
- `UtAssert_NULL` - check pointer is null
- `UtAssert_NONZERO` - check integer is nonzero
- `UtAssert_ZERO` - check integer is zero
- `UtAssert_STUB_COUNT` - check stub count

PR #510 -  Using `unsigned long` instead of `uintmax_t` to fix support for VxWorks

**System(s) tested on**
Ubuntu:Bionic

**Additional context**
Part of nasa/cfs#102

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc. ",,https://github.com/nasa/osal/pull/513
OSAL unit tests terminate before the console thread prints the results,"**Describe the bug**
Most of the OSAL unit tests terminate before the console thread is allowed to execute and write the results to the console.

**To Reproduce**
Steps to reproduce the behavior:
1. Build with unit tests, i.e. the initial build created using the instructions in the cFS repository.
2. Run the unit tests manually, not with ctest.  ctest hides the console output anyway.

**Expected behavior**
Running osal_core_UT should look like:
```
[BEGIN] PC-LINUX UNIT TEST
OS_printf() - #1 Nominal [ This is the expected stdout output after API call]
OS_printf_enable() - #1 Nominal [This is the expected stdout output after API call]
OS_printf_disable() - #1 Nominal [This is the expected stdout output before API call]
OS_printf_disable() - #1 Nominal [This is the expected stdout output after test reset]


ut_oscore HAS 167 tests total.
ut_oscore PASSED 135 tests.
ut_oscore FAILED 0 tests.
ut_oscore HAS 5 tests requiring manual inspection.
ut_oscore SKIPPED 26 tests relating to OS-call-failure.
ut_oscore SKIPPED 1 tests not applicable to the platform.
```
Instead, depending on the timing of the target under test, you might see:
```
[BEGIN] PC-LINUX UNIT TEST
OS_printf() - #1 Nominal [ This is the expected stdout output after API call]
OS_printf_enable() - #1 Nominal [This is the expected stdout output after API call]
OS_printf_disable() - #1 Nominal [This is the expected stdout output before API call]
OS_printf_disable() - #1 Nominal [This is the expected stdout output after test reset]
```

**Code snips**
The easiest fix is to add:
```
    /* Yield to allow the console thread to complete writing to the console. */
    OS_TaskDelay(2000);
```

to the end of the function ""void UT_os_teardown(const char* testSuiteName)"" in file ""ut_os_stubs.c"".  This will ensure the caller thread pends for long enough time (hopefully) for the console thread to release and complete printing to the console.  However, this is not 100% bullet proof since it still relies on the console thread starting and completing the print in the time provided to the OS_TaskDelay() function.  For example, if you are stepping through code with your debugger inside the OS_ConsoleOutput_Impl() function on the last call in the unit test, you have 2 seconds to get whatever information you need to get before the process is terminated.

**System observed on:**
 - VirtualBox virtual machine
 - Ubuntu 16.04
 - OSAL 5.0.3-bv

**Additional context**
Most platforms (all platforms I know of) use a separate, kernel created thread, to print to the console already.  The OSAL provided console thread just adds a third thread to 2 already existing threads.  I'm not sure why the additional thread needed to be added.  But if it wasn't there, this problem is resolved by calling fflush, which pends until the output has successfully been sent out.  Aside from making the OSAL more complicated, I'm not sure what problem the new console thread is solving.

**Reporter Info**
Mathew Benson
Owner
Windhover Labs, LLC

","bug, duplicate, unit-test",https://github.com/nasa/osal/issues/512
Integration Candidate 2020-06-10,"**Describe the contribution**
Fix #485 - add text to make clear that IDs are non-zero
Fix #494, add missing stub functions for OSAL API
Fix #491, increase UT assert buffer sizes

**Testing performed**
Bundle CI: https://github.com/nasa/cFS/pull/102/checks

**Expected behavior changes**

PR #486 -  adds ""non-zero"" to the out variable description for OS_Create (and related) API's.

PR #492 - The buffer for context info increases from 128 to 256 bytes and the total report buffer to 320 bytes.

PR #497 - Added stub functions for `OS_TaskFindIdBySystemData()`, `OS_FileSysAddFixedMap()`,
`OS_TimedRead()`,
`OS_TimedWrite()`, and
`OS_FileSysAddFixedMap()`



**System(s) tested on**
Ubuntu:Bionic

**Additional context**
Part of nasa/cfs#102

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
 Christopher D. Knight, NASA-ARC",,https://github.com/nasa/osal/pull/511
"Fix #509, Remove uintmax_t usage","**Describe the contribution**
Some systems may not provide this type.  Using `unsigned long` instead should be sufficient.

Fixes #509

**Testing performed**
Build on vxworks
Run all unit tests on native system and on RTEMS.

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04
GSFC VxWorks lab build machine (gs582w-cfelnx)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/510
VxWorks 6.9 does not provide `uintmax_t` type,"**Describe the bug**
A new compiler error has appeared on the vxworks-6.9 build:
```
/home/jphickey/cfecfs/github/osal/ut_assert/src/utstubs.c: In function 'UT_Hook_GetArgPtr':
/home/jphickey/cfecfs/github/osal/ut_assert/src/utstubs.c:602: error: expected specifier-qualifier-list before 'uintmax_t'
```

**To Reproduce**
Build using the VxWorks 6.9 toolchain

**Expected behavior**
Should build successfully

**System observed on:**
VxWorks 6.9, gcc 4.3.3 on gs582w-cfelnx lab machine.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/509
"Fix #506, enforce nonzero stack size","**Describe the contribution**
Resolve inconsistency in how the stack size is treated across different OS implemntations.  POSIX would enforce a minimum, where RTEMS would not.

With this change the user requested size is passed through to the underlying OS exactly as is, no enforced minimum.

An additional sanity check is added at the shared layer to ensure that the stack size is never passed as 0.

Fixes #506 

**Testing performed**
Build and execute CFE and sanity test
Build and execute all unit tests.
Also tested creating a task with zero stack size and confirm error is generated on Linux.

**Expected behavior changes**
The `idmap-api-test` passes on RTEMS.
Attempting to create a task with zero stack now will result in error.

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11.3 via QEMU/pc686

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/508
"Fix #505, warnings in time base API test","**Describe the contribution**
Add requisite cast to printf.  Also use `sizeof()` rather than hardcoded size of 12.

Fix #505 

**Testing performed**
Build and execute all unit tests

**Expected behavior changes**
Unit tests pass on RTEMS.

**System(s) tested on**
Ubuntu 20.04 
RTEMS 4.11.3 via QEMU/pc686

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/507
Idmap API test needs to use real task stack size and priority,"**Describe the bug**
Although Linux allows the stack size to be zero (it uses a nonzero default) other OS's do not have this fallback.  The `idmap-api-test` attempts to create a task with zero stack and this fails on RTEMS.

**To Reproduce**
Run 'idmap-api-test` on RTEMS.  `OS_TaskCreate()` fails (reports as TSF) but then other failures occur related to this.

**Expected behavior**
Should pass.

**System observed on:**
RTEMS 4.11.3 running in QEMU.

**Additional context**
Should consider forcibly making every OS fail (i.e. enforce in shared layer) if passed a zero stack.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/506
Time Base API test introduced new format warnings,"**Describe the bug**
New warnings noted when building for RTEMS:
```
/home/joe/code/cfecfs/github/osal/src/tests/time-base-api-test/time-base-api-test.c:110:5: error: format '%d' expects argument of type 'int', but argument 4 has type 'int32' [-Werror=format=]
     snprintf(overMaxTimeBase, 12, ""TimeBase%d"", TimeBaseNum);
     ^
```

**To Reproduce**
Build code using `i686-rtems4.11` toolchain.

**Expected behavior**
Should build cleanly.

**System observed on:**
Cross compile for `i686-rtems4.11` on Ubuntu 20.04 host.

**Additional context**
Needs cast whenever fixed-width types are used with printf.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/505
"Fix #501, add PIC library for ut assert","**Describe the contribution**
Add a position independent code (PIC) variant of the ut_assert library, which can be dynamically loaded into other applications rather than running as a standalone OSAL application.  This enables loading UT assert as a CFE library.

This required moving some symbols/functions around.  Mainly, the PIC library does _not_ contain the `utbsp.c` file which has the bindings to the OSAL BSP when running as a standalone app, but everything else should be the same.

Fixes #501 

**Testing performed**
Build and execute all unit tests.
Also test linking new PIC library into a CFE loadable app and running tests.

**Expected behavior changes**
No impact to current unit testing which runs UT assert as a standalone app.  

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Some functions were moved to support the alternative linking structure but no API/functionality changes.  The moved functions include the buffer length extension that were originally part of PR #492.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/504
"Fix #502, Add extra assert macros","**Describe the contribution**
Add the following macros for UT assert:

`UtAssert_INT32_EQ` - check equality as 32 bit signed int
`UtAssert_UINT32_EQ` - check equality as 32 bit unsigned int
`UtAssert_NOT_NULL` - check pointer not null
`UtAssert_NULL` - check pointer is null
`UtAssert_NONZERO` - check integer is nonzero
`UtAssert_ZERO` - check integer is zero
`UtAssert_STUB_COUNT` - check stub count

These are all just wrappers around `UtAssert_True` for commonly-used asserts.  The description message is auto generated so it is consistent.

Fixes #502 

**Testing performed**
Build and run all existing unit tests.
Also test with new PSP coverage tests that use the new macros and confirm they work as described.

**Expected behavior changes**
No impact to current behavior.  These are just new macros for new test case, to improve ease of use and consistency for future testing.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/503
Add int32 UT assert macro,"**Is your feature request related to a problem? Please describe.**
A very common use case in unit testing is to assert on an `int32` value, as this is a common return value type for error codes and status values.

UT Assert provides a generic `UtAssert_True()` macro which can certainly test for integer equality, but it is still very repetitive and test cases may not include all the relevant information.  For instance, the framework should encourage/require that the actual values are printed in addition to the pass/fail status, and the generic macro being totally free-form does not enforce this at all.

**Describe the solution you'd like**
Add a macro `UtAssert_INT32_EQ()` to check for equality of two values as `int32` types.

Other types could be added too, but `int32` is by far the most commonly needed as it is the return type of many API calls across OSAL and CFE.

**Describe alternatives you've considered**
Continue using the generic `UtAssert_True()` macro.

**Additional context**
Many test programs already use their own macros for testing return values.  They've already evolved to be similar but different (e.g. CFE SB has `ASSERT_EQ`, and OSAL coverage testing has `OSAPI_TEST_FUNCTION_RC()`).  

It would be worthwhile to put more of these in UT assert itself so these don't need to continue being duplicated.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test",https://github.com/nasa/osal/issues/502
Offer secondary target for UT assert library that can be dynamically loaded,"**Is your feature request related to a problem? Please describe.**
The current UT assert is designed to be statically linked as an OSAL application.

To support a CFE functional test environment that uses the same UT assert reporting methods, the library should offer a target that can be linked as loadable module.

**Describe the solution you'd like**
The differences are:

- Compile as position independent code (PIC) so it can be linked into a dynamic module.
- Separate out the OS_Application_Startup and OS_Application_Run - as this will be loaded into a larger app, not a standalone app, and these symbols are already defined.
- Consolidate global variables into a common structure and make early init/reset of these variables into a separate routine from OS_Application_Startup.

**Additional context**
This dynamically-loadable variant can be a separate target, so it shouldn't change anything about the existing apps/tests that link with the existing static ""ut_assert"" library.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test",https://github.com/nasa/osal/issues/501
"Fix #499, store all arguments in generic-linux BSP","**Describe the contribution**

Keep the entire argc/argv from the shell.  Do not prune the command name as getopt expects this to be there.

Fixes #499 

**Testing performed**
Execute unit tests, confirm all passing.
Execute new PSP tests, confirm command line options are being recognized.

**Expected behavior changes**
Command line options in Linux are recognized, no longer ignored/dropped.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/osal/pull/500
Linux BSP shouldn't trim first argument,"**Describe the bug**
As part of command line processing the logic for Linux BSP is to prune the first argument which is the command name, to be consistent with other (e.g. RTEMS) platforms that do not pass the command name to begin with.

However the CFE PSP passes the argument list to the C library `getopt_long()` and this expects the first argument to be the command name, so this breaks.

**To Reproduce**
Pass arguments (e.g. `-I' to set spacecraft ID value, etc) to start the CFE core on linux.  Observe that the default value is still used, argument isn't processed.

**Expected behavior**
Command line arguments should be processed and used.

Just store/pass the full set of arguments, no real need to abstract, as anything doing argument processing is almost certainly platform-specific (e.g. CFE PSP) so it will know what to expect here.

**System observed on:**
Ubuntu 20.04

**Additional context**
First bug found by newly-minted PSP functional test.  I attempted to use `-I` to force a test failure on the spacecraft ID value and it didn't work.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/499
file descriptor signed or unsigned?,"**Describe the bug**
OS_Open() returns an int32 file descriptor, OS_SocketAccept() takes a uint32 pointer for the file descriptor. They should be the same type. (The socket code should probably use/take int32.)

**Reporter Info**
Christopher.D.Knight@nasa.gov",enhancement,https://github.com/nasa/osal/issues/498
"Fix #494, add missing stub functions for OSAL API","**Describe the contribution**
Did a quick scrub for public OSAL APIs defined in `libosal.a` but not defined in stub library.

Added stub functions for:

```
OS_TaskFindIdBySystemData()
OS_FileSysAddFixedMap()
OS_TimedRead()
OS_TimedWrite()
OS_FileSysAddFixedMap()
```
Required for testing other modules that use these functions. Also correct a name mismatch issue in `OS_TaskGetInfo()`.

Fixes #494

**Testing performed**
Build and run all unit tests.

**Expected behavior changes**
No change to behavior or FSW.  Just adds stubs for future use.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
These were not actively used anywhere yet (otherwise would be a link failure) but likely to become an issue as PSP coverage tests are implemented.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/497
Add TestExit function to UT assert,"**Is your feature request related to a problem? Please describe.**
It would often be useful to exit a test function and resume at the next test function in a group of tests.

This is useful in two cases:
- When something goes wrong or it is determined that the test block is unnecessary, so it is pointless to continue running tests in the same block, but the next test case still should run (i.e. do not abort).  In some existing cases (e.g. OSAL unit-test) this type of situation was implemented using a `goto` statement to skip the rest of the test.
- Functions which contain infinite loops are not testable right now, because the test case will never exit.  This is often the case for ""run loops"" within tasks that don't have any exit condition.  This can be used from a hook function to exit the test.

**Describe the solution you'd like**
Add a `UtTestExit()` API call that would return control back to UT assert to resume with the next test case.  

**Describe alternatives you've considered**
Leave as-is. Any infinite loops would have to be rewritten with an exit condition in order to be tested.  Test writers continue to use `goto` to skip remainder of test, when desired.

**Additional context**
This would be useful but to actually implement it would require setjmp/longjmp to return back to UT assert control logic rather than the immediate caller.  Flight software isn't supposed to call this, as this is unit test framework, maybe its OK?

Without it, we may have to modify some PSP functions in order to do coverage test, which would violate another objective in that we should be able to test code without changing the code.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",unit-test,https://github.com/nasa/osal/issues/496
"Fix #493, race condition in idmap api test","**Describe the contribution**
Add a delay loop to ensure that the child task has executed before continuing with the rest of the test.

This also uses a separate ""setup"" function to create the resources for the test and adds asserts that the setup worked.

Fixes #493

**Testing performed**
Execute unit tests and confirm passing.

**Expected behavior changes**
No more race condition in idmap-api-test.

**System(s) tested on**
Ubuntu 20.04 (native)
Centos 6.9 VM (single core)

**Additional context**
May want to fast track as this causes occasional CI failures in current master branch.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, CCB:FastTrack",https://github.com/nasa/osal/pull/495
Missing stub function for OS_FileSysAddFixedMap,"**Is your feature request related to a problem? Please describe.**
Coverage Unit tests being added for the PSP will likely require a stub of this function.

**Describe the solution you'd like**
Provide the stub function as part of the OSAL stub library

**Describe alternatives you've considered**
N/A - all public API functions should have UT stubs.  This one was overlooked/missed.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test",https://github.com/nasa/osal/issues/494
Race condition in new idmap tests,"**Describe the bug**
The `idmap-api-test` routine occasionally fails, because it creates one of its semaphores in a sub task, but does not actually wait for that sub task to run.

**To Reproduce**
Run idmap test, in particular a single core machine seems to reproduce it more reliably.

**Expected behavior**
Need to add a wait loop of some type in main task to make sure child task has executed.

**Code snips**
Task started here:
https://github.com/nasa/osal/blob/360438765d7eb83a9e7e15571cda89786f0d8330/src/tests/idmap-api-test/idmap-api-test.c#L106

Might want to employ a loop similar to what is done here to make sure the child task has executed:
https://github.com/nasa/osal/blob/360438765d7eb83a9e7e15571cda89786f0d8330/src/tests/osal-core-test/osal-core-test.c#L154-L159


**System observed on:**
CentOS 6.9 VM (single core)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, unit-test",https://github.com/nasa/osal/issues/493
"Fix #491, increase UT assert buffer sizes","**Describe the contribution**
The buffer for context info increases from 128 to 256 bytes and the total report buffer to 320 bytes.

Fixes #491 

**Testing performed**
Build and Execute all unit tests.

**Expected behavior changes**
Confirmed that long report lines that had been truncated are no longer truncated.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/osal/pull/492
Allow longer messages in UT assert,"**Is your feature request related to a problem? Please describe.**
Currently the UT assert library truncates messages at 128 characters due to the buffer sizes used internally.  With macros using function names as well as more complete context info in tests, this is easy to hit.

**Describe the solution you'd like**
Increase message buffer size and maximum report line length.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",unit-test,https://github.com/nasa/osal/issues/491
"Fix #196, Fix timer-test to be able to use OS_MAX_TIMERS value","Fix #196, Fix timer-test to be able to use OS_MAX_TIMERS value

**Describe the contribution**
Changed timer-test to be able to use OS_MAX_TIMERS value on top of the hard-coded NUMBER_OF_TIMERS value.  This will allow the test to be functional even if the OS_MAX_TIMERS value is reconfigured.

**Testing performed**
Steps taken to test the contribution:
1. Standard build and ran unit tests.

**System(s) tested on**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Contributor Info - All information REQUIRED for consideration of pull request**
Yasir Majeed Khan
NASA GSFC/Emergent Space",CCB:Approved,https://github.com/nasa/osal/pull/490
"Fix #379, Add FileSysAddFixedMap functional API test","Fix #379, Add FileSysAddFixedMap functional API test.

**Describe the contribution**
Added FileSysAddFixedMap functional API test

**Testing performed**
Steps taken to test the contribution:
1. Standard build and ran unit tests.

**System(s) tested on**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Contributor Info - All information REQUIRED for consideration of pull request**
Yasir Majeed Khan
NASA GSFC/Emergent Space",CCB:Approved,https://github.com/nasa/osal/pull/489
documentation -- ObjectID architecture description,"**Is your feature request related to a problem? Please describe.**
Would be good to put some words/pictures into the Doxygen documentation (or .md?) describing the way object ID's are managed in OSAL.

**Requester Info**
Christopher.D.Knight@nasa.gov",docs,https://github.com/nasa/osal/issues/488
Integration Candidate: 2020-05-27,"**Describe the contribution**
Fix #380
Fix #381
Fix #449
Fix #479

**Testing performed**
https://github.com/nasa/cFS/pull/96/checks

**Expected behavior changes**

PR #467 - Rename BSPs that can be used on multiple platforms. 
`mcp750-vxworks` becomes `generic-vxworks`
`pc-linux` becomes `generic-linux`

PR #480 - New features only, does not change existing behavior.
UT Hook functions now have the capability to get argument values by name, which is more future proof than assuming a numeric index.

PR #452 - Add functional test for `OS_TimerAdd`
 
PR #481 - Added functional tests for `OS_TimeBase Api` on `OS_TimeBaseCreate`, `OS_TimeBaseSet`, `OS_TimeBaseDelete`, `OS_TimeBaseGetIdByName`, `OS_TimeBaseGetInfo`, `OS_TimeBaseGetFreeRun`

**System(s) tested on**
Ubuntu:Bionic

**Additional context**
Part of nasa/cFS#96

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
Yasir Khan, NASA-GSFC
",,https://github.com/nasa/osal/pull/487
Fix #485 - add text to make clear that IDs are non-zero,"**Describe the contribution**
Fix #485 - adds ""non-zero"" to the out variable description for OS_<obj>Create (and related) API's.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",CCB:Approved,https://github.com/nasa/osal/pull/486
Document that `OS_ObjCreate()` Id of new obj is > 0,"**Is your feature request related to a problem? Please describe.**
The OS_<obj>Create() functions always generate an ID as an ""out"" parameter and that ID is always > 0 when the creation succeeds. This is useful as users of these API's as they can assume 0 is not a valid ID (such as in arrays or variables that are not always referring to valid objects.)

**Describe the solution you'd like**
Should describe, in the comments for all OS_<obj>Create functions, that ID will always be > 0.

**Requester Info**
Christopher.D.Knight@nasa.gov",docs,https://github.com/nasa/osal/issues/485
Use UT_Assert Macros in tests/unit-test-coverage/unit-tests,"**Is your feature request related to a problem? Please describe.**
Upgrade tests in time-base-api-test.c to use new macros in 
https://github.com/nasa/osal/blob/master/src/unit-tests/inc/ut_os_support.h

Really in general could be used all over for consistency.

Note there's typos in the use of UTAssert_True, example:
https://github.com/nasa/osal/blob/706f0de6902eb442563b44ae58904100a0e72cd3/src/tests/file-sys-add-fixed-map-api-test/file-sys-add-fixed-map-api-test.c#L53-L55

**Additional context**
See #481 

**Requester Info**
Gerardo Cruz-Ortiz, NASA-GSFC
",unit-test,https://github.com/nasa/osal/issues/484
Hotfix for #374 object utilitys missing functional api tests,"Hotfix #374 object utilitys missing functional api tests

**Describe the contribution**
 Fixed  OS_ConvertToArrayIndex failing test. Added Copyright.

**Testing performed**
Steps taken to test the contribution:
1. Standard build and ran unit tests.

**Expected behavior changes**

**System(s) tested on**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Contributor Info - All information REQUIRED for consideration of pull request**
Yasir Khan
NASA-GSFC","CCB:Approved, CCB:FastTrack",https://github.com/nasa/osal/pull/483
Integration Candidate 2020-05-20,"**Describe the contribution**
Fix #293 
Fix #374 
Fix #447 
Fix #450 
Fix #454 
Fix #455 
Fix #457 
Fix #459 
Fix #470 
Fix #474 
Fix #476  

**Testing Performed**
Bundle CI - https://travis-ci.com/github/nasa/cFS/builds/168822512

**Expected behavior changes**

PR #439 - Add functional tests for `OS_IdentifyObject`, `OS_ConvertToArrayIndex` and `OS_ForEachObject` functions.

PR #451 - Fix doxygen warnings

PR #463 - Unit test cases which use `OS_statfs` and run on an `RTEMS IMFS` volume will be skipped and categorized as ""NA"" due to `OS_ERR_NOT_IMPLEMENTED` response, rather than a failure.

PR #464 - The device_name field was using the wrong length, it should be of `OS_FS_DEV_NAME_LEN` Also correct another length check on the local path name.

PR #465 - For RTEMS, will not shutdown the kernel if test abort occurs.

PR #466 -  Unit tests work on RTEMS without BSP preallocating ramdisks

PR #468 - If `OSAL_EXT_SOURCE_DIR` cache variable is set, this location will be checked first for a BSP/OS implementation layer.

PR #469 - Implement `OS_GetResourceName()` and `OS_ForEachObjectOfType()`, which are new functions that allow for additional query capabilities. No impact to current behavior as the FSW does not currently use any of these new APIs.

PR #472 - 
  - A functional test enhancement to `bin-sem-test` which replicates the specific conditions for the observed bug to occur. Deletes the task calling `OS_BinSemTake()` and then attempts to use the semaphore after this. 
  - Employ a `pthread` ""cleanup handler"" to handle the situation where a task is canceled during the `pthread_cond_wait()` call. This ensures that the `mutex` is unlocked as part of the cleanup, so other tasks may continue using the semaphore.    
  - Change all initial `mutex` locking to be a finite ""timed"" wait rather than an infinite wait. In all cases, the condition variable is only held for brief periods of time and should be readily available. If a task blocks for a long time, this considers the mutex ""broken"" and aborts, thereby avoiding deadlock. This is a ""contingency"" fix in that if an exception or signal or other unknown/unhandled async event occurs that leaves the mutex permanently locked.

PR #475  -  Adds the mutex to protect the timer callback `timecb` resource table.

**System(s) tested on**
See PRs

**Additional context**
Part of https://github.com/nasa/cFS/pull/91

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
 Joseph Hickey, Vantage Systems, Inc.
 Leor Bleier, NASA-GSFC 
Yasir Khan, NASA-GSFC",,https://github.com/nasa/osal/pull/482
"Fix #380, Add OS_TimeBase Api Functional Tests","Fix #380, Add OS_TimeBase Api Functional Tests

**Describe the contribution**
Added OS_TimeBase Api Functional Tests for OS_TimeBaseCreate, OS_TimeBaseSet, OS_TimeBaseDelete, OS_TimeBaseGetIdByName, OS_TimeBaseGetInfo, OS_TimeBaseGetFreeRun

**Testing performed**
Steps taken to test the contribution:
1. Standard build and ran unit tests.

**System(s) tested on**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Contributor Info - All information REQUIRED for consideration of pull request**
Yasir Khan
NASA GSFC",,https://github.com/nasa/osal/pull/481
"Fix #479, add name association to stub arguments","**Describe the contribution**
Add the capability to store parameter names in addition to pointers as part of the stub argument context data.

Macroize the UT_Stub_RegisterContext function utstubs.h to also pass the parameter name in addition to the pointer.

Add hook-side accessor functions/macros to make it easier and more reliable to get this information from the context data.

Also other minor items:
- Increase max ""fixed"" args from 4 to 8
- Add convenience macros for variable argument stubs

Fixes #479 

**Testing performed**
Build and execute unit tests, confirm all passing (baseline).
Update EVS stub and SAMPLE_APP test cases to use new functions and confirm operation.

**Expected behavior changes**
New features only, does not change existing behavior.
UT Hook functions now have the capability to get argument values by name, which is more future proof than assuming a numeric index.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/480
Ut Assert argument name association,"**Is your feature request related to a problem? Please describe.**
UT assert passes ""static"" function arguments to hook functions as an array of opaque pointers, based on the order of calls to the `UT_Stub_RegisterContext()` API inside the stub.  This is basically equivalent to argc/argv on a command line.

This requires test cases to ""know"" which position the argument they need to access is in, and basically hard-code that number.  This could become more problematic if hook functions are used more frequently.

**Describe the solution you'd like**
Offer a variant of `UT_Stub_RegisterContext()` that also stores the argument name, and offer a ""getter"" that a hook function can use in order to get by that name.

Registering and retrieving values by name will provide greater stability as the APIs and test cases evolve over time.

The downside is that its slower and uses more memory to look up based on name, but that doesn't matter much for UT.

**Describe alternatives you've considered**
Leave as is using number/sequence based args.  It works but concerned it's too easy to get out of sync.

**Additional context**
Could also use some macros to make both the register (stub-side) and get (hook-side) operations a little more user-friendly.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test",https://github.com/nasa/osal/issues/479
"Fix #476, add global lock/unlock wrapper","**Describe the contribution**
Add a wrapper at the shared layer to provide a common location to check the status of global lock/unlock ops.

All calls to OS_Lock_Global_Impl and OS_Unlock_Global_Impl from the shared modules are replaced with calls to this wrapper.

Notably - this detects and reports the problem described in #474, in case something similar happens in the future.  

Fixes #476

**Testing performed**
Build and execute all unit tests, and sanity check CFE operations.

**Expected behavior changes**
Now detects and reports errors in global mutex lock/unlock ops.

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 on pc686 via QEMU

**Additional context**
If this patch is applied in isolation without any other changes, one will see debug trace generated as it is detecting the problem previously reported in #474:

```
OS_Lock_Global():634:ERROR: unable to lock global 9, error=-1
OS_Unlock_Global():677:ERROR: global 9 released by task 0x10005 when owned by task 0x0
OS_Unlock_Global():693:ERROR: unable to lock global 9, error=-1
```

These errors go away as soon as the PR #475 is also applied

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/478
Integration Candidate 2020-05-13,"**Describe the contribution**
Fix #235

**Testing performed**
Bundle CI - https://travis-ci.com/github/nasa/cFS/builds/167639047

**Expected behavior changes**
PR #448 - `OS_QueueCreate()` will return an error code if the depth parameter is larger than the configured `OS_MAX_QUEUE_DEPTH`. 

**System(s) tested on**
Ubuntu:Bionic

**Additional context**
See PRs for detailed test and change information
Part of nasa/cfs#87


**Contributor Info - All information REQUIRED for consideration of pull request**
 Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/osal/pull/477
Add shared layer API for handling global mutex,"**Is your feature request related to a problem? Please describe.**
Currently the shared layer calls `OS_Lock_Global_Impl()` and `OS_Unlock_Global_Impl()` directly when locking/unlocking the internal tables within OSAL.  

This does not offer a place to:
- check return code of operation
- track ownership of resource in case of not being freed.

**Describe the solution you'd like**
Should implement `OS_Lock_Global()` and `OS_Unlock_Global()` wrappers at the shared API level, which can provide a common place to check status, handle failure, and track resource usage.

**Additional context**
In #474, the global table lock was correctly returning an error but nothing ever checked the return code.  Rather than adding a specific return code test everywhere this is used, simpler and better to add a wrapper.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/476
"Fix #474, Add timecb global mutex","**Describe the contribution**
Adds the mutex to protect the timer callback (timecb) resource table.

Fixes #474 

**Testing performed**
Build and confirm all unit tests pass, CFE runs normally.

**Expected behavior changes**
Timer callback (timcb) resource types are mutex protected.

**System(s) tested on**
Ubuntu 20.04 
RTEMS 4.11 on pc686 via QEMU

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/475
"Global lock for ""timecb"" objects missing","**Describe the bug**
The internal table mutex for the timer callback (timecb) object type is missing/not implemented.   This leave a potential race condition as timer callbacks are registered.

**To Reproduce**
Not observed in real execution at this time - but theoretically possible if two timers are registered by two tasks at the exact same time.

**Expected behavior**
Should be protected.

**System observed on:**
Ubuntu 20.04

**Additional context**
The global lock table is simply missing an entry for this object type.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/osal/issues/474
Scrub reference counting for possible task deletion issues,"**Is your feature request related to a problem? Please describe.**
The OSAL shared layer employs a reference counting scheme for long running/blocking operations, such as file read/write, and socket operations.  This reference count prevents deletion while these operations are still in progress.

However, the possibility exists that the task is deleted while this operation is occurring, which means the reference count may never get decremented.

**Describe the solution you'd like**
Whenever possible/relevant, the OSAL should ""wrap"" the long running operation in a cancellation cleanup handler as was done for binary sems in #470.  For POSIX, this may be needed for anything that invokes a cancellation point:
- read/write/open/close (files)
- send/recv/connect/accept (sockets)
- select
- mq_receive/mq_send (queues)

**Describe alternatives you've considered**
Leave as-is and accept a risk that there may be dangling references when tasks are deleted.

**Additional context**
There is no way for the OSAL to know about and handle inter-relationships between resources that the application may impose (i.e. using a mutex to control access to a shared memory or a reference count of its own) and therefore this cleanup/recovery can never be bulletproof.  

While OSAL could potentially do better at handling its own reference counts in the context of task deletion, there will still be other remaining risks of unreleased resources after tasks being deleted for things it cannot track.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/473
"Fix #470, Binary sem task delete issues","**Describe the contribution**
Corrects issue when a task waiting on a binary semaphore is deleted, it left the mutex in a locked state preventing other tasks from using the mutex.

This has 3 parts:
1. A functional test enhancement to bin-sem-test which replicates the specific conditions for the observed bug to occur.  It deletes the task calling `OS_BinSemTake()` and then attempts to use the semaphore after this.  (without the rest of this change, it fails).
2. Employ a pthread ""cleanup handler"" to handle the situation where a task is canceled during the `pthread_cond_wait()` call.  This ensures that the mutex is unlocked as part of the cleanup, so other tasks may continue using the semaphore.  This is the main fix as it directly addresses the root cause of the issue, which is that the mutex was left in a locked state.
3. Change all initial mutex locking to be a finite ""timed"" wait rather than an infinite wait.  In all cases, the condition variable is only held for brief periods of time and should be readily available; tasks should almost never block on this initial lock.  If a task blocks for a long time, this considers the mutex ""broken"" and aborts, thereby avoiding deadlock.  This is a ""contingency"" fix in that if an exception or signal or other unknown/unhandled async event occurs that leaves the mutex permanently locked, it at least does not deadlock the system and allows it to be restarted.

Fixes #470 
Fixes nasa/cfe#701

**Testing performed**
Build and run all unit tests.

Confirm that including only the unit test change (item 1 above) reliably reproduces the failure.  In this mode, bin-sem-test will get stuck when attempting to give the semaphore after task deletion.

Confirm that the bin sem changes (items 2 and 3 above) correct the issue.  Note each one taken individually will avoid deadlock in a different way.  Item 3 (timed mutex) alone will cause the subsequent calls to return `OS_SEM_FAILURE` rather than deadlock, so shutdown will continue and the test exits with a failed status rather than pending forever.

Sanity check CFE operation and CTRL+C handling - all works OK.

**Expected behavior changes**
Binary semaphores after task deletion continue to work as expected and are usable by other tasks.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/osal/pull/472
Order of operations on OS_DeleteAllObjects,"**Is your feature request related to a problem? Please describe.**
OS_DeleteAllObjects() is used when shutting down the system, such as after an exception, a commanded processor restart, or CTRL+C, etc.

This simply deletes resources based on their numeric `OS_OBJECT_TYPE` value, meaning tasks (1) are first, followed by queues, bin/count, semaphores, mutexes, etc. and eventually timers (9).

A recent issue described in nasa/cfe#701 observed a potential problem with this.  As the task and semaphore are deleted, a timer could still be running.  If that timer executes during shutdown, it may interrupt the deletion, and attempt to use semaphore objects.

Normally this shouldn't be an issue because OSAL will return an error and reject the call.  However due to an underlying issue in Binary Semaphores (#470) after task cancellation, this caused deadlock.

**Describe the solution you'd like**
It would be preferable to delete timers first, then tasks, then semaphores, files, and other resources.  This should be a safer ordering in general, as it will reduce the potential for resources to be used as they are being deleted.

**Describe alternatives you've considered**
Leave as-is.  

**Additional context**
The real fix for #470 prevents deadlock, this is just more future-proofing.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/471
Binary Semaphore locked after thread cancellation,"**Describe the bug**
On POSIX systems using the Binary Semaphore API, there is a risk that threads can become deadlocked after deleting a task that was executing an `OS_BinSemTake()` API call.

**To Reproduce**
- Create two tasks and one binary semaphore.
- Task A calls `OS_BinSemGive()` at some event/interval.
- Task B waits on the binary sem using `OS_BinSemTake()`

Then delete task B while it was pending in `OS_BinSemTake()`.

The semaphore resource is now inoperable, because the condition mutex was ""owned"" by task B at the time it was deleted, and is never released, thereby preventing any other task from using the mutex.

**Expected behavior**
The semaphore should continue to be usable by other tasks after deleting task B.

**System observed on:**
Ubuntu 20.04

**Additional context**
This was originally reported/observed in nasa/cfe#701, during shutdown where timers were used.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.  
(After diagnosis/investigation of issue reported by @excaliburtb in above ticket)
",bug,https://github.com/nasa/osal/issues/470
"Fix #293, Expand API for object queries","**Describe the contribution**

Implement `OS_GetResourceName()` and `OS_ForEachObjectOfType()`, which are new functions that allow for additional query capabilities.   `OS_ObjectIdToArrayIndex()` modified to accept `OS_OBJECT_TYPE_UNDEFINED` as the first parameter, to allow it to work with any object type, not just objects for which a specific type is expected/known.

Also adds unit test (functional + coverage)  for `OS_ForEachObjectByType` and `OS_GetResourceName`

Fixes #293

**Testing performed**
Run all unit tests, sanity check CFE and confirm normal operation

**Expected behavior changes**
No impact to _current_ behavior as the FSW does not currently use any of these new APIs.  Existing APIs are unchanged.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Querying objects by type is potentially needed for nasa/cfe#701 and nasa/fm#2

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/pull/469
"Fix #450, add external source directory for OS/BSP","**Describe the contribution**

If the ""OSAL_EXT_SOURCE_DIR"" cache variable is set, this location will be checked first for a BSP/OS implementation layer.  This can point to an out-of-tree implementation layer if necessary.

Fixes #450

**Testing performed**
Configure a test project to use a BSP provided in the external source dir, and confirm that it builds correctly and sanity check result (unit tests, CFE runs normally).

**Expected behavior changes**
No impact to behavior unless user requires a BSP/OS implementation which is not part of the included set.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
It is discouraged from actually doing this as there is no attempt at API stability at the low level implementation layer.

The actual location of the implementation layer being used is now also displayed during ""prep"" so that one can confirm its the correct/expected one.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/osal/pull/468
"Fix #449, Rename BSPs to be generic","**Describe the contribution**
Rename BSPs that can be used on multiple platforms.  
mcp750-vxworks becomes generic-vxworks
pc-linux becomes generic-linux

(pc-rtems stays the same for now)

**Testing performed**
Build for all supported operating systems (linux, vxworks, rtems) and confirm all unit tests pass and CFE runs normally.

**Expected behavior changes**
No impact to behavior, but build scripts in external entities need to change the name.

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 on pc686 / QEMU
VxWorks 6.9 on MCP750

**Additional context**
See related issue nasa/psp#162 and PR nasa/psp#164 which changes the refs to these.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/osal/pull/467
"Fix #459, dynamically create RAM disk devices on RTEMS","**Describe the contribution**
Rather than relying on the BSP to preallocate, the ram disk block devices can be created based on request.  This correlates with the way RAM disks are implemented on VxWorks and is
cleaner and more flexible by making it more independent of the BSP.

This allows all the unit tests to work on RTEMS without the needing the BSP to preallocate a ramdisk.

Fixes #459 

**Testing performed**
Build and run all unit tests, and sanity check CFE operation

**Expected behavior changes**
Unit tests work on RTEMS without BSP preallocating ramdisks

**System(s) tested on**
RTEMS 4.11 on pc686 via QEMU

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/466
"Fix #457, provide BSP shutdown handler","**Describe the contribution**
This provides a better method of handling test abort, in a BSP-specific manner.

Fixes #457

**Testing performed**
Build and execute unit tests on RTEMS platform, and run a test that has a problem causing an abort.  (e.g. `UtAssert_Abort`).
Confirm that in normal (non-batch) mode the system stays alive and allows use of the shell to check the system state.  When using batch mode the system still shuts down (as expected).

**Expected behavior changes**
No impact to behavior on Linux/VxWorks.
For RTEMS, will not shutdown the kernel if test abort occurs.

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 on pc686 via QEMU

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/465
"Fix #455, correct length of device_name in filesys","**Describe the contribution**
The `device_name` field was using the wrong length, it should be of `OS_FS_DEV_NAME_LEN`
Also correct another length check on the local path name.

Fix #455 

**Testing performed**
Build and execute unit tests, and sanity check CFE operation.

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 on pc686 via QEMU

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/464
"Fix #454, Better error translation on statvfs()","**Describe the contribution**
Map the ENOSYS errno to OS_ERR_NOT_IMPLEMENTED, which is more appropriate than OS_ERROR.

Fixes #454

**Testing performed**
Build and execute  unit tests on RTEMS 4.11.3

**Expected behavior changes**
Unit test cases which use OS_statfs and run on an RTEMS IMFS volume (default for the root file system) will be skipped and categorized as ""NA"" due to OS_ERR_NOT_IMPLEMENTED response, rather than a failure.

**System(s) tested on**
RTEMS 4.11 on pc686 via QEMU

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/463
"Fix #453, Select API and unit test updates","**Describe the contribution**
On some OS's  (notably RTEMS) one must only call select() socket file handles.  This is indicated in OSAL via the ""selectable"" flag on each file handle.  The select implementation needs to check this before invoking select().

Also update unit tests to match.

Fix #453

**Testing performed**
Confirm unit tests passing on relevant platforms

**Expected behavior changes**
Calls to select APIs on RTEMS where unsupported will return OS_ERR_OPERATION_NOT_SUPPORTED, rather than crashing.

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 on i686 via QEMU

**Additional context**
This also affects #377 in that it improves the test, but the functional test still could be better in that it currently only checks for file handles being set, not file handles being unset, after select.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",duplicate,https://github.com/nasa/osal/pull/462
"Fix #367, 453, 456, 460, Deprecate OS_VolumeTable and other fixes","**Describe the contribution**
Deprecate the OS_VolumeTable structure, which is no longer necessary with the current OSAL.

Remove the OS_VolumeTable definition from all BSPs, and provide a default (empty) one to support linking when OMIT_DEPRECATED is not set.

Note Due to unit test dependencies this PR also has to include fixes for other related issues.

Fix #367 
Fix #453 
Fix #456 
Fix #460

These are all in separate commits and they each build individually but there are some dependencies in making the unit tests work, so they were added to this PR.

**Testing performed**
Build with unit tests, confirm unit test execution and sanity check CFE on supported platforms

**Expected behavior changes**
OSAL no longer defines the types or symbols associated with OS_VolumeTable when OMIT_DEPRECATED is set.  Any external PSPs should replace their respective OS_VolumeTable with calls to the runtime registration API.

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 on i686 via QEMU
Vxworks 6.9 on MCP750

**Additional context**
nasa/psp#161 exists to remove these references from the CFE PSP

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/461
Update unit tests to provide consistent directory map,"**Is your feature request related to a problem? Please describe.**
The ""file-api-test"" and ""osal_loader_UT"" unit tests rely on a real FS_BASED directory map that is provided by the BSP.  This creates an undesired dependency on the BSP volume table in these test cases, in that they must provide a map for `/cf`.

**Describe the solution you'd like**
Test should be BSP-agnostic.   A map for the directory used by the test case can be provided locally as part of this test setup.  A relative system directory can be used (e.g. ""./test"") to make this platform-agnostic.

**Additional context**
This will allow to run unit tests without a BSP-provided volume table.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test",https://github.com/nasa/osal/issues/460
Update RTEMS implementation to dynamically create RAM disk block devices,"**Is your feature request related to a problem? Please describe.**
The current RTEMS BSP predefines the RAM disks by way of the `rtems_ramdisk_configuration` which is set at compile time.  However the OSAL model is to create these block devices at runtime based on memory segments that are allocated externally.

The workaround up to this point was to preallocate the ram disks, and then attempt to correlate the address in the OS_mkfs/initfs request to one of the preallocated blocks.  However this is not possible when the compile-time config and ramdisk allocation are done by separate libraries (BSP and CFE PSP, respectively).

**Describe the solution you'd like**
RTEMS can support dynamically-created RAM disks using `ramdisk_allocate()` which better aligns with the way things are supposed to work.

**Additional context**
This is necessary as part of decoupling the volume/filesystem table from the OSAL BSP.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/459
Integration Candidate COMBINED 2020-04-29 and 2020-05-06,"**Describe the contribution**

Fix #437, add new API for obtaining exception task ID
Fix #435, Changes for string ops warnings 

**Testing performed**
See PRs
Bundle CI - https://travis-ci.com/github/nasa/cFS/builds/165726730

**Expected behavior changes**
PR #441 - Resized buffers and added explicit termination to string copies. No warnings on GCC9 with strict settings and optimization enabled.

PR #446 - New API to reverse lookup an OS-provided thread/task identifier back to an OSAL ID.
Any use of existing OStask_id field within the task property structure is now deprecated.


**System(s) tested on**
See PRs

**Additional context**
Part of nasa/cfs#83

**Contributor Info - All information REQUIRED for consideration of pull request**
 Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/osal/pull/458
Improve ABORT handling in RTEMS unit test,"**Is your feature request related to a problem? Please describe.**
If an unit testing error occurs that causes the test to abort, the implementation just calls the system `abort()` function.  In RTEMS, this causes the entire system/kernel to shutdown.  This leaves no ability to use the shell to check the system state or diagnose what went wrong.

**Describe the solution you'd like**
Defer handling of the abort to the BSP.  In RTEMS, when the shell is available, this should just suspend the calling task to stop the tests, allowing the shell to continue being used.

**Additional context**
This used to be the case, but probably an artifact of merging the UT BSP with regular BSP that this got lost in translation, and it only shows up if an abort failure occurs.  Fairly trivial/easy to add it back in though.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test",https://github.com/nasa/osal/issues/457
Filesystem should differentiate between FS_BASED (known) and unknown filesystem types,"**Is your feature request related to a problem? Please describe.**
The existing `OS_FILESYS_TYPE_DEFAULT` type is used to cover basically any filesystem mapping that doesn't directly fall into the other categories (e.g. NORMAL_DISK, VOLATILE_DISK, etc).  This includes the traditional `FS_BASED` types, which just map to another existing place in the filesystem.

**Describe the solution you'd like**
The code should provide a unique value for `FS_BASED` maps, which is a valid mapping type, as opposed to not knowing what mapping is being used.

**Additional context**
Distinction between known FS types and unknown types is required for running without Volume Table in BSP.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/456
Filesystem using wrong length for device_name field,"**Is your feature request related to a problem? Please describe.**
The `device_name` field within the `OS_filesys_internal_record_t` is using a length of `OS_MAX_API_NAME`, which is not correct/ideal.

**Describe the solution you'd like**
The length should be `OS_FS_DEV_NAME_LEN`

**Additional context**
This is an existing symbol defined in the `osapi-os-filesys.h` public API header file.  Noted when working on BSP volume table removal.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/455
Improve error code on RTEMS OS_stat() implementation,"**Is your feature request related to a problem? Please describe.**
Depending on the filesystem in use, the RTEMS `statvfs()` call might not be implemented at the filesystem level.  In particular if it is called on the IMFS filesystem type, it returns an error and sets errno to `ENOSYS`.

OSAL translates any error here to `OS_ERROR`, which is what gets returned to the application.

Ultimately this causes the filesystem unit test to fail when this filesystem type is in use.

**Describe the solution you'd like**
Preferable to return `OS_ERR_NOT_IMPLEMENTED` in this case.  In particular, unit tests already check for this, and will skip the test cases for this API, avoiding failure.  This makes it a soft error.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/osal/issues/454
"Portable select() implementation needs to check filehandle ""selectable"" flag","**Describe the bug**
Not all file handles support the `select()` API -- in particular on RTEMS it only works on sockets.  The File implementation layer contains a boolean flag `selectable` for every file handle to indicate whether the file descriptor can be select'ed upon.

The implementation of this layer needs to confirm/check that the `selectable` flag is true before calling this API.

**To Reproduce**
Run the new `select()` API unit tests on an RTEMS platform, which call this API on regular files.  When it does so, this actually causes an exception and results in kernel panic/abort.    

**Expected behavior**
OSAL should return OS_ERR_NOT_IMPLEMENTED or otherwise avoid calling `select()` on filehandles which the kernel does not handle properly.

**System observed on:**
RTEMS 4.11.3 via QEMU/pc686 BSP.

**Additional context**
Kernel panic result here is rather extreme -- one would have expected that the select() call would simply return error and set an errno as usual.  This probably also signifies an underlying bug in RTEMS.


**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/453
"Fix #381, Add OS_TimerAdd functional test","Fix #381, Add OS_TimerAdd functional test

**Describe the contribution**
Added OS_TimerAdd functional test

**Testing performed**
Steps taken to test the contribution:
1. Standard build and ran unit tests.

**Expected behavior changes**

**System(s) tested on**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Additional context**
Yasir Khan
NASA GSFC
",CCB:Approved,https://github.com/nasa/osal/pull/452
"Fix #447, Resolve doxygen warnings","**Describe the contribution**
Fixes #447, additional doxygen warnings

**Testing performed**
Steps taken to test the contribution:
1. Corrected the issues referenced in the `warnings.log` file
2. Rebuilt the docs with `make doc`
3. Observed no recurrence of same warnings in `warnings.log`

**Expected behavior changes**
No doxygen warnings for the affected files

**Contributor Info - All information REQUIRED for consideration of pull request**
Leor Bleier, NASA GSFC\Code 582
",CCB:Approved,https://github.com/nasa/osal/pull/451
Add alternative source directory option for OSAL implementations,"**Is your feature request related to a problem? Please describe.**
The OSAL build script always looks for BSP implementations in:
    `${OSAL_SOURCE_DIR}/src/bsp/${OSAL_SYSTEM_BSPTYPE}`
Likewise it always looks for OS implementations in:
    `${OSAL_SOURCE_DIR}/src/os/${OSAL_SYSTEM_OSTYPE}`

This presents a challenge to for a user with a custom OS/BSP implementation not within the mainline OSAL source tree, but wishes to use the github repo directly.

**Describe the solution you'd like**
It should be possible to provide an external directory that the OSAL build can use.

**Describe alternatives you've considered**
Create an OSAL fork or ""git subtree"" to assemble a full CFE/CFS repo, which allows one to add custom packages or patches they need.

**Additional context**
The internal API between the BSP/OS implementation components is not stabilized like the public API is, and can change any time.  

If directly using a ""master"" branch from github in conjunction with a locally-controlled implementation module, users may experience frequent breakage, as the component interface can change any time rendering it incompatible with their local version.  

In contrast, although the fork/subtree approach does have a similar issue, it doesn't happen ""automatically"" - it requires a specific user action to pull and merge the new ""master"" so it creates a buffer that avoids unsolicited breakage.

This feature should come with a big disclaimer that says its for debug/development only, not to use it in production.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/450
Make BSPs more generic,"**Is your feature request related to a problem? Please describe.**
Users requiring custom PSP packages should not need to create both -- a CFE PSP and OSAL BSP.  The existing OSAL BSP should be used whenever possible.

The ""mcp750-vxworks"" BSP (at least) is not particularly hardware-specific and should be usable on any vxworks platform.  Likewise ""pc-linux"" should be usable on any generic linux platform.

The main purpose of the OSAL BSP is just to provide an entry point to get into the common/modular code.

**Describe the solution you'd like**
Rename these BSPs to be generic and allow use by many PSPs.

**Describe alternatives you've considered**
User needs to add a custom BSP for each board.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/449
"Fix #235, add check against OS_MAX_QUEUE_DEPTH","**Describe the contribution**
The `OS_QueueCreate()` function will now sanity check the depth parameter against the configured OS_MAX_QUEUE_DEPTH value.  If it is too large, an error will be returned.  This is a hard limit
and independent of the ""permissive"" mode.

The OS_MAX_QUEUE_DEPTH should be configured to the largest value that an application may reasonably request.

Fix #235 

**Testing performed**
Confirm CFE framework starts and operates normally (but see nasa/to_lab#36)
Confirm OSAL unit tests pass

**Expected behavior changes**
`OS_QueueCreate()` will return an error code if the depth parameter is larger than the configured `OS_MAX_QUEUE_DEPTH`.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","enhancement, CCB:Approved",https://github.com/nasa/osal/pull/448
More doxygen warnings,"**Describe the bug**
Further doxygen warnings should be resolved

**To Reproduce**
Steps to reproduce the behavior:
1. Build documentation using `make doc`
2. Observe warnings in `../cFS/build/doc/warnings.log`

**Expected behavior**
No warnings should occur

**Additional context**
The currently observed warnings are recurring. We should baseline best practices so that these don't continue to recur

**Reporter Info**
Leor Bleier, NASA GSFC\Code 582
","bug, docs",https://github.com/nasa/osal/issues/447
"Fix #437, Add new API for obtaining exception task ID","**Describe the contribution**
The OS_task_prop_t had contained an `OStask_id` field which was used for reverse-mapping the OSAL task ID during exception processing by CFE.  Unfortunately this was a uint32 and not compatible with any OS which used task identifiers that were not convertible to such a value (e.g. `pthread_t`, or 64-bit pointers, etc).

Deprecate the old field and replace with a new API that performs reverse lookup within OSAL using an abstract pointer and size, so its compatible with any OS task representation object.

Fix #437 

**Testing performed**
Tested as part of testing exceptions within the scope of PR's nasa/psp#159 and nasa/cfe#653.
Confirm that the newly-added APIs are performing as expected.

**Expected behavior changes**
New API to reverse lookup an OS-provided thread/task identifier back to an OSAL ID.
Any use of existing OStask_id field within the task property structure is now deprecated.

**System(s) tested on**
Ubuntu 20.04 LTS
VxWorks 6.9 on MCP750

**Additional context**
Prerequisite to the PSP/CFE PRs listed above.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/osal/pull/446
OS_ConvertToArrayIndex and OS_TimeBaseGetFreeRun SEGFAULT When Passed in a NULL Pointer ,"**Describe the bug**
OS_ConvertToArrayIndex  and OS_TimeBaseGetFreeRun SEGFAULT when passed in a NULL pointer as the second input instead of handling the NULL pointer and returning an error.

**To Reproduce**
Steps to reproduce the behavior:
1.  Checkout branch fix374-2-Object-Utilities-Missing-Tests in osal
2.  Go to path: cFS/osal/src/tests/idmap-api-test
3.  Build and run with the following in the main function:  
    OS_ConvertToArrayIndex(bin_sem_id, NULL);
4.  Checkout branch fix380-Add-TimeBase-Api-Functional-Tests
5.  Go to path: cFS/osal/src/tests/time-base-api-test
6.  Build and run with the following in the main function:  
    OS_TimeBaseGetFreeRun(time_base_id2, NULL);


**Expected behavior**
OS_ConvertToArrayIndex and OS_TimeBaseGetFreeRun SEGFAULT when passed in a NULL pointer, should handle the NULL pointer and return an associated error code. 

**Code snips**
(path: cFS/osal/src/tests/idmap-api-test)

    uint32 bin_sem_id;
    OS_BinSemCreate( &bin_sem_id, ""BinSem"", 1, 0);
   actual   = OS_ConvertToArrayIndex(bin_sem_id, NULL);
   expected = OS_ERR_INCORRECT_OBJ_TYPE;
   UtAssert_True(actual == expected , ""OS_ConvertToArrayIndex() (%ld) == %ld "", (long)actual, (long)expected );

Output: 
The following tests FAILED:
	 37 - idmap-api-test (SEGFAULT)

**System observed on:**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0


**Reporter Info**
Yasir Khan
NASA GSFC
",bug,https://github.com/nasa/osal/issues/445
Integration Candidate: Fast Track,"**Describe the contribution**
Fixes #285 

**Testing performed**
See https://github.com/nasa/osal/pull/443
Bundle CI - https://github.com/nasa/cFS/pull/78/checks?check_run_id=644721591

**Expected behavior changes**

Changes build system considerably:
- No more user-maintained osconfig.h file, this is now replaced by a cmake configuration file
- Breaks up low-level implementation into small, separate subsystem units, with a separate header file for each one.

**System(s) tested on**
See PR
Bundle CI - Ubuntu:Bionic

**Additional context**
Part of https://github.com/nasa/cFS/pull/78

**Contributor Info - All information REQUIRED for consideration of pull request**
 Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/osal/pull/444
"Fix #285, Refactor OSAL to avoid inclusion of C files","**Describe the contribution**
Use separate source files and CMake-based source selection
based on feature configuration, rather than using the C
preprocessor for including/excluding different OSAL function
groups.

Refactor all implementation units to provide a separate header
file for each functional group/subsystem.  Remove ""static""
declaration on internal helper functions so they can be invoked
from unit test.

Fixes #285 
Also Fix #214 and fix #195 (trivial fixes rolled in as part of refactoring)

**Testing performed**
Build and execute CFE for VxWorks, POSIX and RTEMS.  Sanity check of CFE functions.  Confirm all unit tests passing and coverage test of VxWorks is working.  Also confirm build with each inclusion/exclusion of each option (loader, network, shell) and with/without OMIT_DEPRECATED.

**Expected behavior changes**
No impact to runtime code. Changes build system considerably, however.
- No more user-maintained `osconfig.h` file - now replaced by a cmake configuration file
- Break up low level implementation into small, separate subsystem units, with a separate header file for each one.

**System(s) tested on**
Ubuntu 20.04 LTS 64 bit (build host, native test)
i686-rtems4.11 cross build using QEMU
ppc-vxworks6.9 cross build using MCP750

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","CCB:Approved, CCB:FastTrack",https://github.com/nasa/osal/pull/443
"Fix #437, deprecate OS task ID and add replacement API for PSP exceptions","**Describe the contribution**
The OS_task_prop_t had contained an `OStask_id` field which was used for reverse-mapping the OSAL task ID during exception processing by CFE.  Unfortunately this was a uint32 and not compatible with any OS which used task identifiers that were not convertible to such a value (e.g. `pthread_t`, or 64-bit pointers, etc).

Deprecate the old field and replace with a new API that performs reverse lookup within OSAL using an abstract pointer and size, so its compatible with any OS task representation object.

**Testing performed**
Tested as part of testing exceptions within the scope of PR's nasa/psp#159 and nasa/cfe#653.
Confirm that the newly-added APIs are performing as expected.

**Expected behavior changes**
New API to reverse lookup an OS-provided thread/task identifier back to an OSAL ID.
Any use of existing OStask_id field within the task property structure is now deprecated.

**System(s) tested on**
Ubuntu 20.04 LTS
VxWorks 6.9 on MCP750

**Additional context**
Prerequisite to the PSP/CFE PRs listed above.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",duplicate,https://github.com/nasa/osal/pull/442
"Fix #435, fix string manipulations to avoid warnings","**Describe the contribution**
Resize buffers and add explicit termination to string copies.
Avoids warnings on GCC9 with strict settings and optimization enabled.

Fixes #435

**Testing performed**
Build with default config and gcc 9.3.0 and confirm warnings are gone

**Expected behavior changes**
Warnings fixed.

**System(s) tested on**
Ubuntu 20.04 LTS

**Additional context**
Currently a draft because it uses PR #427 as a baseline.  Will mark as non-draft once prerequisite is merged.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/osal/pull/441
Integration Candidate: 2020-04-22,"**Describe the contribution**
Integration Candidate 2020-04-22

Fixes: #262, #344, #424, #346, #430, and #425 
 
**Testing performed**
CI - https://github.com/nasa/osal/pull/440/checks?check_run_id=633931133
Bundle CI- https://github.com/nasa/cFS/pull/74/checks?check_run_id=637311464
See PRs for other tests

**Expected behavior changes**

1. PR #403 - Adds library build, functional, and coverage test to CI
2. PR #421 - Deprecates `OS_FS_SUCCESS, OS_FS_ERROR , OS_FS_ERR_INVALID_POINTER, OS_FS_ERR_NO_FREE_FDS , OS_FS_ERR_INVALID_FD, and OS_FS_UNIMPLEMENTED` from from osapi-os-filesys.h
3. PR #423 -  Individual directory names now limited to `OS_MAX_FILE_NAME`
4. PR #428 - Fix tautology,  `local_idx1` is now compared with `local_idx2`
5. PR #431 - Module files are generated when the `osal_loader_UT` test is built and run
6. PR #426 - Consistent osal-core-test execution status

**System(s) tested on**
CI - Ubuntu:Bionic

**Additional context**
Part of https://github.com/nasa/cFS/pull/74

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
Dan Knutsen, NASA/Goddard
Yasir Khan, NASA-GSFC
Stanislav Pankevich, PTS GmbH",,https://github.com/nasa/osal/pull/440
"Fix #374, Add Object Utility API functional tests","Fix #374, Object Utility API's missing functional test

**Describe the contribution**
Created missing functional tests for the OS_IdentifyObject, OS_ConvertToArrayIndex and OS_ForEachObject functions.  

**Testing performed**
Steps taken to test the contribution:
1. Standard build and ran unit tests.

**Expected behavior changes**

**System(s) tested on**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Contributor Info **
Yasir Khan
NASA GSFC","CCB:Approved, unit-test",https://github.com/nasa/osal/pull/439
#include <sys/signal.h> from os-posix.h causes compiler warnings in Alpine Linux ,"**Describe the bug**
When trying to build the cFS bundle using Alpine Linux using the musl library we get a gcc error:
`#warning redirecting incorrect #include <sys/signal.h> to <signal.h>`

From my seaarches It seems that `sys/signal.h`  is an older implementation.

**To Reproduce**
Build and run the following Docker image
```
# Dockerfile to make cFS testing platform independent. Based on .travis.yml from cfs-Bundle repo
FROM alpine:3.11

RUN apk add \
  build-base \
  cmake \
  git

RUN echo -e ""http://dl-cdn.alpinelinux.org/alpine/edge/community\nhttp://dl-cdn.alpinelinux.org/alpine/edge/main"" >> /etc/apk/repositories
RUN apk add --no-cache -X http://dl-cdn.alpinelinux.org/alpine/edge/testing \
    perf

# Force image rebuild if bundle has changed since last build
ADD https://api.github.com/repos/nasa/cfs/git/refs/heads/master version.json

# Get current bundle
RUN git clone --recurse-submodules -j8 https://github.com/nasa/cFS.git

# Define cfs environment variables
ENV \
  BUILDTYPE=debug \
  CFS_ROOT=/cFS \
  ENABLE_UNIT_TESTS=true \
  OMIT_DEPRECATED=false \
  SIMULATION=native

# Set up for build
RUN cp $CFS_ROOT/cfe/cmake/Makefile.sample $CFS_ROOT/Makefile
RUN cp -r $CFS_ROOT/cfe/cmake/sample_defs $CFS_ROOT/sample_defs

# Run make at startup
ENTRYPOINT make -C $CFS_ROOT

```

Build and run the container:

Build: `docker build --tag cfs-bundle:alpine DOCKERFILE_DIRECTORY
Run: `docker run -it --rm cfs-bundle:alpine`




**Expected behavior**
cFS Build like with Travis CI and Ubuntu

**Code snips**
In `os-posix.h:40`: `#include <sys/signal.h>`

**System observed on:**
Docker Desktop 2.2.0.4 
OSX 10.14.6
",bug,https://github.com/nasa/osal/issues/438
Deprecate OStask_id field from OS_task_prop_t,"**Is your feature request related to a problem? Please describe.**
This field is not necessarily applicable to all OS types and it breaks the abstraction.  OSAL should not be reporting the raw/unabstracted values back to the application.

This field is fundamentally broken in any environment where the underlying OS task ID isn't convertible to a `uint32`.  This includes real systems, such as:

- Cygwin, where `pthread_t` is a compound data type, not an integer (POSIX specifically allows this)
- Systems where the task ID is actually pointer to the TCB (in which case it will be 64 bits on 64 bit systems)

Currently this field serves one purpose, which is to allow the CFE ES exception processing to find the OSAL task ID associated with the exception.   However, this design is being reworked in nasa/cfe#411 where more of the exception processing is done in the CFE PSP.  With this, there should be no need for applications to ever use the `OStask_id` member.

**Describe the solution you'd like**
The `OStask_id` member of `OS_task_prop_t` should be marked as deprecated.  As a replacement, an new API can be added which can be invoked by the PSP/BSP to aid in exception processing.  This new API should use an abstract pointer and size, not assume that the task identifier information fits within a 32-bit integer.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/437
"Fix #432, Infer OSAL_SYSTEM_OSTYPE from OSAL_SYSTEM_BSPTYPE","**Describe the contribution**

Simplify user configuration by inferring the `OSAL_SYSTEM_OSTYPE` from the `OSAL_SYSTEM_BSPTYPE` if the former is not set.  This means the user does not have to explicitly set both of these configuration options.

In the event they are _both_ explicitly set (as is done in the current configurations) but refer to an invalid/unexpected combination of OS+BSP, this adds a warning message to the CMake setup (make prep) stage, as this is likely a mis-configuration that deserves attention, but there could be valid reasons for doing this during development.

Fixes #432 

**Testing performed**
Build OSAL for various platform combos (native, x86-linux cross, i686-rtems4.11 cross).  Confirm successful build.  

**Expected behavior changes**
No FSW affected, only build script.  Also fully backward compatible with old configs.

- Builds successfully using the inferred OS when only OSAL_SYSTEM_BSPTYPE is set (not OSAL_SYSTEM_OSTYPE).  
- Generates a warning when OSAL_SYSTEM_BSPTYPE and OSAL_SYSTEM_OSTYPE are both set but are mismatched.  Confirmed this works by intentionally mismatching in a config.

**System(s) tested on**
 - Ubuntu 18.04 LTS 64 bit

**Additional context**
Prerequisite to PR nasa/cfe#634.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, CCB:FastTrack",https://github.com/nasa/osal/pull/436
Unhandled output truncation errors when building on CentOS 8.1,"**Describe the bug**
On CentOS 8.1, when cFS is being built with enabled unit tests, `make` returns the following unhandled output truncation errors (`-Werror=format-truncation=`) related to osal unit tests:

```
[cfs@localhost cFS]$ make
make --no-print-directory -C ""build"" mission-all
[100%] Built target elf2cfetbl
[100%] Built target mission-version
[100%] Built target mission-prebuild
[  1%] Built target osal_posix_impl
[  2%] Built target osal_pc-linux_impl
[  3%] Built target osal_bsp
[  9%] Built target osal

[. . . omitting lines . . .]

[ 65%] Building C object osal/unit-tests/osfile-test/CMakeFiles/osal_file_UT.dir/ut_osfile_dirio_test.c.o
In file included from /home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.h:14,
                 from /home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:11:
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c: In function ‘UT_os_makedir_test’:
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:157:31: error: ‘%s’ directive output may be truncated writing up to 73 bytes into a region of size 30 [-Werror=format-truncation=]
     UT_os_sprintf(g_fileName, ""%s/mkdir_File.txt"", g_dirName);
                               ^~~~~~~~~~~~~~~~~~~  ~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:30: note: in definition of macro ‘UT_os_sprintf’
     snprintf(buf,sizeof(buf),__VA_ARGS__)
                              ^~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:5: note: ‘snprintf’ output between 16 and 89 bytes into a destination of size 30
     snprintf(buf,sizeof(buf),__VA_ARGS__)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:157:5: note: in expansion of macro ‘UT_os_sprintf’
     UT_os_sprintf(g_fileName, ""%s/mkdir_File.txt"", g_dirName);
     ^~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c: In function ‘UT_os_readdir_test’:
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:465:37: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]
     UT_os_sprintf(g_subdirNames[0], ""%s/%s"", g_dirName, g_tgtSubdirs[0]);
                                     ^~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:30: note: in definition of macro ‘UT_os_sprintf’
     snprintf(buf,sizeof(buf),__VA_ARGS__)
                              ^~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:5: note: ‘snprintf’ output 2 or more bytes (assuming 75) into a destination of size 74
     snprintf(buf,sizeof(buf),__VA_ARGS__)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:465:5: note: in expansion of macro ‘UT_os_sprintf’
     UT_os_sprintf(g_subdirNames[0], ""%s/%s"", g_dirName, g_tgtSubdirs[0]);
     ^~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:475:37: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]
     UT_os_sprintf(g_subdirNames[1], ""%s/%s"", g_dirName, g_tgtSubdirs[1]);
                                     ^~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:30: note: in definition of macro ‘UT_os_sprintf’
     snprintf(buf,sizeof(buf),__VA_ARGS__)
                              ^~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:5: note: ‘snprintf’ output 2 or more bytes (assuming 75) into a destination of size 74
     snprintf(buf,sizeof(buf),__VA_ARGS__)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:475:5: note: in expansion of macro ‘UT_os_sprintf’
     UT_os_sprintf(g_subdirNames[1], ""%s/%s"", g_dirName, g_tgtSubdirs[1]);
     ^~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c: In function ‘UT_os_rewinddir_test’:
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:587:37: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]
     UT_os_sprintf(g_subdirNames[0], ""%s/%s"", g_dirName, g_tgtSubdirs[0]);
                                     ^~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:30: note: in definition of macro ‘UT_os_sprintf’
     snprintf(buf,sizeof(buf),__VA_ARGS__)
                              ^~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:5: note: ‘snprintf’ output 2 or more bytes (assuming 75) into a destination of size 74
     snprintf(buf,sizeof(buf),__VA_ARGS__)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:587:5: note: in expansion of macro ‘UT_os_sprintf’
     UT_os_sprintf(g_subdirNames[0], ""%s/%s"", g_dirName, g_tgtSubdirs[0]);
     ^~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:597:37: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]
     UT_os_sprintf(g_subdirNames[1], ""%s/%s"", g_dirName, g_tgtSubdirs[1]);
                                     ^~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:30: note: in definition of macro ‘UT_os_sprintf’
     snprintf(buf,sizeof(buf),__VA_ARGS__)
                              ^~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:5: note: ‘snprintf’ output 2 or more bytes (assuming 75) into a destination of size 74
     snprintf(buf,sizeof(buf),__VA_ARGS__)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:597:5: note: in expansion of macro ‘UT_os_sprintf’
     UT_os_sprintf(g_subdirNames[1], ""%s/%s"", g_dirName, g_tgtSubdirs[1]);
     ^~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c: In function ‘UT_os_removedir_test’:
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:755:31: error: ‘%s’ directive output may be truncated writing up to 73 bytes into a region of size 30 [-Werror=format-truncation=]
     UT_os_sprintf(g_fileName, ""%s/rmdir_File1.txt"", g_dirName);
                               ^~~~~~~~~~~~~~~~~~~~  ~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:30: note: in definition of macro ‘UT_os_sprintf’
     snprintf(buf,sizeof(buf),__VA_ARGS__)
                              ^~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:5: note: ‘snprintf’ output between 17 and 90 bytes into a destination of size 30
     snprintf(buf,sizeof(buf),__VA_ARGS__)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:755:5: note: in expansion of macro ‘UT_os_sprintf’
     UT_os_sprintf(g_fileName, ""%s/rmdir_File1.txt"", g_dirName);
     ^~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:774:31: error: ‘%s’ directive output may be truncated writing up to 73 bytes into a region of size 30 [-Werror=format-truncation=]
     UT_os_sprintf(g_fileName, ""%s/rmdir_File2.txt"", g_dirName);
                               ^~~~~~~~~~~~~~~~~~~~  ~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:30: note: in definition of macro ‘UT_os_sprintf’
     snprintf(buf,sizeof(buf),__VA_ARGS__)
                              ^~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/inc/ut_os_support.h:82:5: note: ‘snprintf’ output between 17 and 90 bytes into a destination of size 30
     snprintf(buf,sizeof(buf),__VA_ARGS__)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cfs/cFS/osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:774:5: note: in expansion of macro ‘UT_os_sprintf’
     UT_os_sprintf(g_fileName, ""%s/rmdir_File2.txt"", g_dirName);
     ^~~~~~~~~~~~~
cc1: all warnings being treated as errors
make[7]: *** [osal/unit-tests/osfile-test/CMakeFiles/osal_file_UT.dir/build.make:76: osal/unit-tests/osfile-test/CMakeFiles/osal_file_UT.dir/ut_osfile_dirio_test.c.o] Error 1
make[6]: *** [CMakeFiles/Makefile2:5132: osal/unit-tests/osfile-test/CMakeFiles/osal_file_UT.dir/all] Error 2
make[5]: *** [Makefile:141: all] Error 2
make[4]: *** [CMakeFiles/native-all.dir/build.make:57: CMakeFiles/native-all] Error 2
make[3]: *** [CMakeFiles/Makefile2:325: CMakeFiles/native-all.dir/all] Error 2
make[2]: *** [CMakeFiles/Makefile2:139: CMakeFiles/mission-all.dir/rule] Error 2
make[1]: *** [Makefile:201: mission-all] Error 2
make: *** [Makefile:120: all] Error 2
```

**To Reproduce**
Steps to reproduce the behavior:

On an up-to-date CentOS 8.1, follow the current cFS `README` while enabling unit tests (step 7):
1. `git clone https://github.com/nasa/cFS.git`
2. `cd cFS`
3. `git submodule init`
4. `git submodule update`
5. `cp cfe/cmake/Makefile.sample Makefile`
6. `cp -r cfe/cmake/sample_defs sample_defs`
7. `make SIMULATION=native ENABLE_UNIT_TESTS=true prep`
8. `make`

**Expected behavior**
`make` should not return any error.

**Code snips**
N/A

**System observed on:**
 - iMac (Retina 4K, 2019)
 - OS: CentOS 8.1 (`centos-release-8.1-1.1911.0.8.el8.x86_64`) (via VMware Fusion 11.5.3) / minimal installation / packages installed: git, make, cmake, gcc.
 - GCC: `8.3.1 20190507 (Red Hat 8.3.1-4)`
 - Versions: master bundle

**Additional context**
For convenience and mainly to investigate the possibility of performing automated end-to-end testing (for instance, to make a pseudo-GSW deterministically interact with the FSW and check the telemetry), I have taken the initiative to dockerize cFS. 

In this context, these errors occurred when creating a CentOS-based Docker image. Their occurrence was then confirmed using a CentOS virtual machine (the logs provided above come from the unit tests performed on the virtual machine).

No such errors occur on (a virtualized) Ubuntu 18.04. This behavior seems then specific to CentOS, or perhaps to a certain version of GCC.

(Because these errors are directly related to osal, I have decided to open this issue here instead of the cFS repository).

**Reporter Info**
Guillaume Lethuillier
Personal","unit-test, build-system",https://github.com/nasa/osal/issues/435
Add double-lock detection for OSAL mutexes as a debug option,"**Is your feature request related to a problem? Please describe.**
A recent issue in nasa/cfe#591 was due to an application double-locking the same mutex from the same task.  This wasn't detected during testing because POSIX allows this recursive locking.  However, other RTOS's do not allow it, nor is it intended behavior.

**Describe the solution you'd like**
OSAL should check/enforce that a single task ID only takes a mutex once, and must release it before locking again.  Violations of this pattern should be reported to the debug console, so they can be addressed by the developer.

As there is a small overhead cost to doing this, it can be selectively enabled as a debug feature, and remain off by default.

**Additional context**
See nasa/cfe#591

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/434
Integration Candidate: 2020-04-15,"**Describe the contribution**
Fixes #413, #88, #12, #390, #392, #407, #368, #366, #354, and #432

**Testing performed**
See PRs
Bundle CI - https://travis-ci.com/github/nasa/cFS/builds/162280689

**Expected behavior changes**

1. PR #398 - Coverage test added to OS_TimerCreate for OS_ERR_NAME_TOO_LONG.
Updated comments related to sizing includes null terminator for:
OS_MAX_API_NAME, OS_MAX_PATH_LEN, OS_BUFFER_SIZE
2. PR #406 - Updated comments in ostimer.c to reflect what the code is actually doing.
Added debug message if microsecs per sec value does not equal 1000000.
3. PR #409 - Externalizes enum for SelectSingle, ensures that pointers passed to SelectFd...() APIs are not null, ensures that pointer to SelectSingle is not null.
4. PR #411 - Removes a duplicate reference doxygen warned about
5. PR #414 - None
6. PR #415 - None
7. PR #418 - Command to run in shell and output to fill will fail with default (not implemented) setting. Open issue to resolve is nasa/cFE#484
8. PR #436 - No FSW affected, only build script. Also fully backward compatible with old configs. Builds successfully using the inferred OS when only `OSAL_SYSTEM_BSPTYPE` is set (not OSAL_SYSTEM_OSTYPE). Generates a warning when `OSAL_SYSTEM_BSPTYPE` and `OSAL_SYSTEM_OSTYPE` are both set but are mismatched. Confirmed this works by intentionally mismatching in a config.



**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Part of https://github.com/nasa/cFS/pull/70

**Contributor Info - All information REQUIRED for consideration of pull request**
Chris D. Knight, NASA-ARC
Leor Bleir, NASA-GSFC
Daniel Knutsen, NASA-GSFC
Jacob Hageman, NASA-GSFC
 Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/osal/pull/433
Simplify config by inferring OSAL_SYSTEM_OSTYPE from OSAL_SYSTEM_BSPTYPE,"**Is your feature request related to a problem? Please describe.**
Currently the build requires that the user specify both OSAL_SYSTEM_BSPTYPE and OSAL_SYSTEM_OSTYPE.  This is redundant because each BSP only works with a specific OS.  

**Describe the solution you'd like**
The user should be allowed to specify only OSAL_SYSTEM_BSPTYPE, and the correct OS layer can be inferred automatically.

**Describe alternatives you've considered**
Continue as is, which increases user config burden and risk of misconfiguration

**Additional context**
see also nasa/cfe#632

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, CCB:FastTrack",https://github.com/nasa/osal/issues/432
"Fix #430, unit-tests/osloader-test: make modules always be built for the test","**Describe the contribution**

Fixes #430.

**Testing performed**

Running `osal_loader_UT` on macOS as described in the linked issue.

**Expected behavior changes**

Without this patch, the MODULE* files are not generated in the build folder.

After this patch is applied, the module files are generated when the `osal_loader_UT` test is built and run:

```
$ find . | grep MODULE.*dy
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE31.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE5.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE28.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE7.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE3.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE6.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE30.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE29.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE4.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE0.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE2.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE23.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE21.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE8.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE25.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE27.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE20.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE22.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE26.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE24.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE9.dylib
```

**System(s) tested on**
 - Hardware: MacBook
 - OS: macOS Mojave 10.14.6 (18G1012)
 - Versions: OSAL as of a66eb2dc00136a77779414452835bb6364d5e1fb commit.

**Additional context**

None.

**Third party code**

None.

**Contributor Info - All information REQUIRED for consideration of pull request**

Stanislav Pankevich, PTS GmbH

The hand signed CLA has been sent before.
",CCB:Approved,https://github.com/nasa/osal/pull/431
"When running standalone, osal_loader_UT test binary file is missing test module files","**Is your feature request related to a problem? Please describe.**

This is another piece of the work on macOS support in #352 .

When I run the `osal_loader_UT` from IDE (CLion), some of the tests are failing because the module files they exercise are not there.

Example:

```
[BEGIN] 01 OS_ModuleLoad
[ PASS] 01.001 ut_osloader_module_test.c:74 - #1 Null-pointer-arg-1
[ PASS] 01.002 ut_osloader_module_test.c:83 - #2 Null-pointer-arg-2
[ PASS] 01.003 ut_osloader_module_test.c:92 - #3 Null-pointer-arg-3
[  TSF](B 01.004 ut_osloader_module_test.c:110 - #4 No-free-IDs - Module Load failed
[  TSF](B 01.005 ut_osloader_module_test.c:136 - #5 Duplicate-name - Module Load failed
[ INFO] 01.006 ut_osloader_module_test.c:153 - #6 OS-call-failure
[ FAIL](B 01.007 ut_osloader_module_test.c:162 - #7 Nominal
[  END] 01 OS_ModuleLoad        TOTAL::7     PASS::3     FAIL::1      MIR::0      TSF::2      N/A::0   
```

The test expects the `MODULE*.so/dylib` files to be there in the build directory and they are not found:

```bash
$ find . | grep MODULE1.*dy
```

The underlying problem is that the modules are not built automatically when the `osal_loader_UT` target is built:

```cmake
set(MOD 32)
while(MOD GREATER 0)
  math(EXPR MOD ""${MOD} - 1"")
  add_library(MODULE${MOD} SHARED ut_module.c)
  set_target_properties(MODULE${MOD} PROPERTIES 
    COMPILE_DEFINITIONS ""MODULE_NAME=module${MOD}"" 
    PREFIX """"
    LIBRARY_OUTPUT_DIRECTORY eeprom1)
endwhile(MOD GREATER 0)
```

**Describe the solution you'd like**

I will open a PR where adding the following fixes the problem:

```
add_dependencies(osal_loader_UT MODULE${MOD})
```

Adding explicit build dependency makes sure that the module files are built.

Having this added I see this:

```bash
$ find . | grep MODULE1.*dy
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE15.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE17.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE13.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE1.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE11.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE16.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE14.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE10.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE12.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE18.dylib
./cmake-build-debug/unit-tests/osloader-test/eeprom1/MODULE19.dylib
```
**Describe alternatives you've considered**

I see no alternatives given the current design of the test and its build rules.

**Additional context**

I am using the POSIX port on macOS with my addtions from #352 configured as follows:

```
-DENABLE_UNIT_TESTS=1 -DOSAL_SYSTEM_OSTYPE=posix -DOSAL_SYSTEM_BSPTYPE=pc-linux -DOSAL_INCLUDEDIR=src/bsp/pc-linux/config
```

**Requester Info**

Stanislav Pankevich, PTS GmbH

",,https://github.com/nasa/osal/issues/430
Use a better time representation in OS_stat call,"**Is your feature request related to a problem? Please describe.**
The `OS_stat` call currently returns the file time as an `int32` member within the `os_fstat_t` structure, as defined here:

https://github.com/nasa/osal/blob/a66eb2dc00136a77779414452835bb6364d5e1fb/src/os/inc/osapi-os-filesys.h#L154

This isn't really documented in the API but the field is a traditional UNIX-style timestamp, which is seconds elapsed since Jan 1 1970 UTC.

This type of timestamp suffers from the ""year 2038"" bug, where the int32 value rolls over and becomes negative.  Although this is 18 years from now, at the timescales of space software development cycles, it is entirely possible that coding being developed now will still be in service at the time this happens, so it should be fixed sooner rather than later.

**Describe the solution you'd like**
There are two fixes needed:

1. use the `OS_time_t` representation as used in `OS_GetLocalTime` and `OS_SetLocalTime`.  This is just for consistency - shouldn't use a different representation of time as the other API calls do.
2. Fix the `OS_time_t` to accommodate larger timestamp values and/or use a different epoch (latter would be risk but keep the structure the same size).

**Additional context**
Discussion regarding use of this field in nasa/cfe#519

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, enhancement",https://github.com/nasa/osal/issues/429
"Fix #425, Correct Test_OS_ConvertToArrayIndex assertion typo","Fix #425 Test_OS_ConvertToArrayIndex: tautological assertion

**Describe the contribution**
Unit test Test_OS_ConvertToArrayIndex implements the following assertion:
osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c

Lines 610 to 611 in 7d9c4c8

 UtAssert_True(local_idx1 == local_idx1, ""local_idx1 (%lu) == local_idx2 (%lu)"", 
         (unsigned long)local_idx1, (unsigned long)local_idx2); 

This is a tautological assertion as it compares local_idx1 with itself.  

Update:
local_idx1 is now compared with local_idx2:

UtAssert_True(local_idx1 == local_idx2, ""local_idx1 (%lu) == local_idx2 (%lu)"",
            (unsigned long)local_idx1, (unsigned long)local_idx2);

**Testing performed**
Steps taken to test the contribution:
1. Standard build and ran unit tests.

**Expected behavior changes**

**System(s) tested on**
cFS Dev Server
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0


**Contributor Info - All information REQUIRED for consideration of pull request**
Yasir Khan
NASA-GSFC","CCB:Approved, unit-test",https://github.com/nasa/osal/pull/428
"Fix #285, Refactor OSAL code selection","**Describe the contribution**
Use separate source files and CMake-based source selection based on feature configuration, rather than using the C preprocessor for including/excluding different OSAL function groups.

Refactor all implementation units to provide a separate header file for each functional group/subsystem.  Remove ""static"" declaration on internal helper functions so they can be invoked from unit test.

Fix #285 (primary)
Also Fix #214 and fix #195 (trivial fixes rolled in as part of refactoring) and fix #432 (separate commit)

**Testing performed**
Build and execute CFE for VxWorks, POSIX and RTEMS.  Sanity check of CFE functions.  Confirm all unit tests passing and coverage test of VxWorks is working (lcov shows 100% for covered modules).


**Expected behavior changes**
No impact to runtime code. Changes build system considerably, however.
- No more user-maintained `osconfig.h` file - now replaced by a cmake configuration file
- Break up low level implementation into small, separate subsystem units, with a separate header file for each one.

**System(s) tested on**
Ubuntu 18.04 LTS 64 bit (build host, native test)
i686-rtems4.11 cross build using QEMU
ppc-vxworks6.9 cross build using MCP750

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/427
"Fix #424, Add looping wait for self exiting task","**Describe the contribution**
Loops the parent OS_TaskDelay until child task exits before testing OS_TaskDelete.  Avoids the test depending on system loading/performance with single delay approach.
Fix #424 

**Testing performed**
Steps taken to test the contribution:
1. Standard build, ran `osal-core-test -d` and observed Loop count of 1 (I've never experienced the failure, which if avoided would have a loop count > 1)

**Expected behavior changes**
Consistent osal-core-test execution status

**System(s) tested on**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions: Bundle + this commit

**Additional context**
Issue seen on dev server 4 and Mac OS

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/426
Test_OS_ConvertToArrayIndex: tautological assertion,"**Describe the bug**
Unit test ` Test_OS_ConvertToArrayIndex` implements the following assertion: 
https://github.com/nasa/osal/blob/7d9c4c8a470d3906050c5cf93203c4a9a9c09089/src/unit-test-coverage/shared/src/coveragetest-idmap.c#L610-L611

This is a tautological assertion as it compares `local_idx1` with itself.

**To Reproduce**
N/A (code analysis)

**Expected behavior**
`local_idx1` should be compared with `local_idx2`:
```
UtAssert_True(local_idx1 == local_idx2, ""local_idx1 (%lu) == local_idx2 (%lu)"",
            (unsigned long)local_idx1, (unsigned long)local_idx2);
```

**Code snips**
See above.

**System observed on:**
N/A (code analysis)

**Additional context**
N/A

**Reporter Info**
Guillaume Lethuillier - Personal
","bug, unit-test",https://github.com/nasa/osal/issues/425
Test  #7: osal-core-test Failure,"**Describe the bug**
Test  #7: osal-core-test fails.  

**To Reproduce**
Steps to reproduce the behavior:
Note: this test was not readily repeatable, but it failed 2/10 times on this branch: 
fix413-Add-Reference-To-Osal-Users-Guide-From-ReadMe
1. Go to branch stated above
2. Run build/exe/cpu1/osal-core-test

**Expected behavior**
The test failed 2/10 times.  Specifically, failure is due to the code snippet noted below in  osal-core-test.c, line 138 where a small time delay is supposed to occur and the child task is perhaps not exiting before the OS_TaskDelete call happens, so it's returning success. 

**Code snips**
[ FAIL] 01.261 osal-core-test.c:138 - OS_TaskDelete, self exiting task

**System observed on:**
GNOME VM
OS: Ubuntu 18.04
Versions: OSAL 5.0.11.0

**Additional context**
This may be due to the VM delay.  

**Reporter Info**
Yasir Khan
NASA GSFC","bug, unit-test",https://github.com/nasa/osal/issues/424
"Fix #344, Consistent directory entry size limit","**Describe the contribution**
Changes FileName in os_dirent_t from OS_MAX_PATH_LEN to OS_MAX_FILE_NAME,
and moves OS_check_name_length into OS_TranslatePath so it is
consistantly applied everywhere. Also fixes the length checks in
OS_check_name_length to account for terminating null.

Unit tests updated to match new directory name limit.
Fix #344

Note - since this was merged with the #262 fix, this will also resolve that issue.

**Testing performed**
Steps taken to test the contribution:
1. CI - https://travis-ci.com/github/skliper/cFS/builds/160789041

**Expected behavior changes**
Individual directory names now limited to OS_MAX_FILE_NAME

**System(s) tested on**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions: bundle + this branch

**Additional context**
Note it's based on #421 to avoid conflicts and help with IC merge.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/423
"Fix #413, Add reference to osal user's guide from ReadMe","Fix413: Added reference to osal user's guide from ReadMe

**Testing performed**
Steps taken to test the contribution:
1. Went to GitHub to verify that that link added worked properly

**Expected Behavior Changes**
None

**System(s) tested on**
 - GNOME VM
 - OS: Ubuntu 18.04
 - Versions: OSAL 5.0.11.0

**Contributor **
Yasir Khan
NASA GSFC","CCB:Approved, docs, CCB:FastTrack",https://github.com/nasa/osal/pull/422
"Fix #262,  Deprecates OS_FS_* defines that aren't unique to FS","**Describe the contribution**
Fix #262 
 Deprecates the following OS_FS* defines from osapi-os-filesys.h:
OS_FS_SUCCESS, OS_FS_ERROR , OS_FS_ERR_INVALID_POINTER, OS_FS_ERR_NO_FREE_FDS , OS_FS_ERR_INVALID_FD, and OS_FS_UNIMPLEMENTED 

Used sed to perform a bulk find/replace on each one to swap with common definitions.

**Testing performed**
Steps taken to test the contribution:
1. Ran unit tests.

**Expected behavior changes**
None

**System(s) tested on**
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.12.0, OSAL 5.0.11.0, PSP 1.4.7.0

**Contributor Info **
Dan Knutsen
NASA/Goddard","duplicate, CCB:Approved",https://github.com/nasa/osal/pull/421
Separate cmake coverage logic and resolve clang support issue,"**Is your feature request related to a problem? Please describe.**
-pg option is not supported by clang in OS X 10.9 and later

**Describe the solution you'd like**
Consider a coverage.cmake implementation similar to the example: https://github.com/StableCoder/cmake-scripts.

See comments on #403... (really relating to #404).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/420
CI improvements - better support of local and cross-platform testing,"**Is your feature request related to a problem? Please describe.**
Command implemented in .travis.yml doesn't support local or cross-platform testing

**Describe the solution you'd like**
Implement as Makefile, Ansible playbooks, or Invoke in a way that supports future build verification plan (cross-platform/docker/QEMU based).

See https://github.com/nasa/osal/pull/403#issuecomment-614587376

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, continuous-integration",https://github.com/nasa/osal/issues/419
"Fix #354, Shell related API separated for optional implementation","**Describe the contribution**
Adds a portable OS_ShellOutputToFile_Impl no-shell implementation following the no-network model
Splits posix/rtems/vxworks OS_ShellOutputToFile_Impl into a separate osshell.c (was in osfileapi.c)
Defaults to use the not implemented version (to match certification target)
Added unit test wrapper
Fix #354

**Testing performed**
Steps taken to test the contribution:
1. Built for posix with and with not implemented version
2. CI test with not implemented - https://travis-ci.com/github/skliper/cFS/builds/160380448

NOTE - build for vxworks attempted, but ran into other issues introduced since last check on that system (elf2cfetbl casts missing to match format)

**Expected behavior changes**
Command to run in shell and output to fill will fail with default (not implemented) setting.  Open issue to resolve is nasa/cfe#484

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Master bundle w/ this commit on top of nasa/cFE#585, nasa/PSP#149, nasa/osal#404

- [ ] Recommend build/test on RTEMS
- [ ] Resolve unrelated issue for VxWorks and complete test

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/418
Integration Candidate: 2020-04-15,"**Describe the contribution**
Fixes #232, #397, #312, #261, #362, and #363

See Bundle IC at https://github.com/nasa/cFS/pull/66

**Testing performed**
See PRs
Bundle CI - https://travis-ci.com/github/nasa/cFS/builds/160607248

**Expected behavior changes**
- PR #402 - Fixed typo, no behavior changes
- PR #405 - Code cleanup, no behavior changes
- PR #404: 
  - Use the target_include_directories and target_compile_definitions functions from CMake to manage the build flags per target. 
  - Build implementation components using a separate CMakeLists.txt file rather than aux_source_directory. 
  - Provide sufficient framework for combining the OSAL BSP, UT BSP, and the CFE PSP and eliminating the duplication/overlap between these items.
  - Change the OSAL Coverage Test to be built with the standard build whenever ENABLE_UNIT_TESTS is set.

**System(s) tested on**
See PRs
Bundle CI - Ubuntu:Bionic

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher D. Knight, NASA-ARC
 Joseph Hickey, Vantage Systems, Inc.
David Archuleta Jr., Self
Gerardo E. Cruz-Ortiz - NASA-GSFC",,https://github.com/nasa/osal/pull/417
OS_ShellOutputToFile missing functional test,"**Is your feature request related to a problem? Please describe.**
No functional test for OS_ShellOutputToFile

**Describe the solution you'd like**
Add functional test.  Needed for build verification for any system that includes this capability.

**Describe alternatives you've considered**
At one point discussed removing this API, but CCB decided to make it optionally included

**Additional context**
#354

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/osal/issues/416
"Fix #366, Deprecated exception handling APIs","**Describe the contribution**
Deprecates the FPU exception and exception handling APIs

Never fully implemented and more appropriate in PSP layer due to platform dependencies
Note - also removes old interrupt unit test header (missed in interrupt deprecation)
Fixes #366 

**Testing performed**
CI - https://travis-ci.com/github/skliper/cFS/builds/159870030

**Expected behavior changes**
None

**System(s) tested on**
CI - with master bundle

**Additional context**
May need slight mods relative to cmake related to listing c files vs aux

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/415
"Fix #368, Deprecate os_fs_err_name_t","**Describe the contribution**
Fix #368
Deprecates the define and updates the reference in unit test

**Testing performed**
CI - https://travis-ci.com/github/skliper/cFS/builds/159834459

**Expected behavior changes**
None

**System(s) tested on**
 - CI, master bundle w/ this branch

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/414
Add reference to OSAL user's guide from README.md,"**Is your feature request related to a problem? Please describe.**
User's guide is built and not included in repo

**Describe the solution you'd like**
Reference https://github.com/nasa/cFS/blob/gh-pages/OSAL_Users_Guide.pdf

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, good first issue, docs",https://github.com/nasa/osal/issues/413
Implement coverage tests for posix,"**Is your feature request related to a problem? Please describe.**
Coverage tests not implemented for posix

**Describe the solution you'd like**
Add coverage tests

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/412
"Fix #407, Resolve doxygen warnings for main doc","**Describe the contribution**
Fixes #407 by removing a duplicate reference the doxygen warned about

**Testing performed**
Steps taken to test the contribution:
1. Edited file in which error occurred
2. Rebuilt documentation using `make doc`
3. Observed no warning generated
4. Viewed relevant documentation page to verify correctness

**Contributor Info - All information REQUIRED for consideration of pull request**
Leor Bleier NASA-GSFC
","CCB:Approved, docs",https://github.com/nasa/osal/pull/411
Break up osapi-os-core.h into more focused includes,"**Is your feature request related to a problem? Please describe.**
Spawned from #404 discussion - osapi-os-core.h is a monolithic include covering a vast array of APIs, which makes changes harder conceptually separate and manage.

**Describe the solution you'd like**
Break up osapi-os-core.h - could use the deprecation process to avoid breakage where osapi-os-core.h just includes all the more focused headers.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/410
"Fix #390, #392, osal select API unit tests and fixes","**Describe the contribution**
fixes #390, fixes #392 -- adds unit tests for OSAL select API

Partially addresses #377, but full solution is a functional test that includes an operational scenario (actually select on a resource, confirm it pends until that resource is available).. bonus points if it illustrates the differences between OS's so it's clear from a user perspective what will work and what wont.

**Testing performed**
Built unit tests, tests passed.

**Expected behavior changes**
Externalizes enum for SelectSingle, ensures that pointers passed to SelectFd...() APIs are not null, ensures that pointer to SelectSingle is not null.

**System(s) tested on**
Debian 9

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov","CCB:Approved, unit-test",https://github.com/nasa/osal/pull/409
Integration Candidate  2020-04-01,"**Describe the contribution**
Integration Candidate
Fixes #259, #389, #347, and #18

**Testing performed**
See related PRs
Bundle CI - https://github.com/nasa/cFS/pull/64
Test Log: https://travis-ci.com/github/nasa/cFS/builds/159710339

**Expected behavior changes**
PR #387 - The more descriptive return value `OS_ERR_NAME_NOT_FOUND` (instead of `OS_FS_ERROR`) will now be returned from the following functions (): `OS_rmfs`, `OS_mount`, `OS_unmount`, `OS_FS_GetPhysDriveName`

PR #394 -  No more config warnings reported by Travis-CI

PR #388 -  The correct variable values will now be displayed when the test is executed.

PR #386 -  Wraps `OS_ShMem*` prototype and unit test wrapper additions in `OSAL_OMIT_DEPRECATED`.

**System(s) tested on**
See PRs
Bundle CI - Ubuntu:Bionic

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
Daniel Knutsen, NASA-GSFC
Gerardo E. Cruz-Ortiz, NASA-GSFC",,https://github.com/nasa/osal/pull/408
Fix doxygen warnings,"**Describe the bug**
Doxygen generates warnings when building the documentation

**To Reproduce**
Steps to reproduce the behavior:
1. Do a `make doc` in the `cFS` directory
2. Observe the warnings in `cFS/build/doc/warnings.log`

**Expected behavior**
No warnings should be generated.

**Reporter Info**
Leor Bleier GSFC\582
",docs,https://github.com/nasa/osal/issues/407
"Fix #12, Comment update to correct for microseconds not always rounding up + a…","Describe the contribution
Fixes #12 , Microsecond round up code doesn't round up.
Updated comments in ostimer.c to reflect what the code is actually doing.
Added debug message if microsecs per sec value does not equal 1000000.

Testing performed
Ran unit tests.

System(s) tested on
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.11.0, OSAL 5.0.9.0, PSP 1.4.7.0

Contributor Info
Dan Knutsen
NASA/Goddard",CCB:Approved,https://github.com/nasa/osal/pull/406
"Fix #397, Remove old unit test example, add README.md, further macro cleanup","**Describe the contribution**
Removes outdated unit test examples, adds macros for concise and clear unit tests, converted binsem unit tests to new macros.

Fix #397

**Testing performed**
Built unit tests and executed.

**Expected behavior changes**
Same behavior, concise code.

**System(s) tested on**
Debian 9.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",CCB:Approved,https://github.com/nasa/osal/pull/405
"Fix #261, #312, and #362, OSAL build cleanup (multiple issues)","**Describe the contribution**

General cleanup and rework of the OSAL build scripts.   Fixes several issues:

Fixes #312 
Fixes #261 
Fixes #362 
Fixes #363 

These are combined into a single pull request as they each depend on the previous fix - they cannot be easily isolated into separate pull requests.  However, each specific issue fix is still an individual commit for review.

Summary of changes:
- Do not clobber (or generally even rely upon) the `CMAKE_C_FLAGS` variable, instead use the preferred approach of using the `target_include_directories` and `target_compile_definitions` functions from CMake to manage the build flags per target.
- Build the implementation components using a separate CMakeLists.txt file per-directory rather than aux_source_directory.  This allow allow BSP-specifc or OS-specific compiler flags to be set, where required.
- Provide sufficient framework for combining the OSAL BSP, UT BSP, and the CFE PSP and eliminating the duplication/overlap between these items.
- Change the OSAL Coverage Test to be built with the standard build whenever ENABLE_UNIT_TESTS is set.


**Testing performed**
- Built CFE for all three supported platforms (native/x86-64 Linux, i686-rtems4.11, ppc-vxworks6.9) and confirm successful build.
- Confirm UT passing on RTEMS 4.11 and native/x86-64 Linux
- Sanity check on CFE (execute, send command) in RTEMS 4.11 and native/x86-64 Linux
- Confirm standalone OSAL builds (without CFE) on basic Posix/PC-Linux combo and passes unit tests.

**Expected behavior changes**
- OSAL coverage testing results shown in standard CFE test build (make test, etc).

**System(s) tested on**
- Ubuntu 18.04 LTS 64-bit (native)
- QEMU for testing RTEMS 4.11 builds

**Additional context**
VxWorks testing limited to building only at this point.  Runtime tests pending on MCP750 hardware availability.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/osal/pull/404
"Fix #346, Adds library build, functional, and coverage test to CI","**Describe the contribution**
Fix #346, Adds library build, functional, and coverage test to CI

**Testing performed**
Steps taken to test the contribution:
1. CI from fork - https://travis-ci.com/github/skliper/osal/builds/157641624

**Expected behavior changes**
Just adds tests to CI

**System(s) tested on**
 - Hardware: AMD
 - OS: Ubuntu 18.04
 - Versions: bundle + warning fix from previous pull request + this change

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/403
"Fix #232, pthread stack min typo","**Describe the contribution**
Fixes #232 PTHREAD_STACK_MIN typo. I could have changed the number to 8192 but I thought (8*1024) was more true to where the number comes from. Let me know if this is not inline with NASA code style preferences.

**Testing performed**
Steps taken to test the contribution:
1. Build steps: built with cmake:
`cmake -DOSAL_SYSTEM_OSTYPE=posix -DOSAL_SYSTEM_BSPTYPE=pc-linux -DENABLE_UNIT_TESTS=TRUE -DOSAL_INCLUDEDIR=/home/david/projects/config -DCFE_SYSTEM_PSPNAME=whyohwhy /home/david/projects/osal`
1. Ran all tests and unit tests.
Note that osloader module test nominal 7 failed (ut_osloader_module_test.c:242) but it failed no matter whether my changes were implemented or not. I assume it's a quirk of my system/environment.

**Expected behavior changes**
 - no impact to behavior

**System(s) tested on**
 - Hardware: ASUS ZenBook Laptop
 - OS: Debian GNU/Linux 10 VM on Hyper-V Manager
 - Versions: OSAL 5.0.9.0

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
David Archuleta Jr.
Personal",CCB:Approved,https://github.com/nasa/osal/pull/402
Integration Candidate 2020-03-25,"**Describe the contribution**
Fixes #349

**Testing performed**
PR #372 
[Bundle CI](https://travis-ci.com/github/nasa/cfs/builds/158274344)

**Expected behavior changes**
 OS_SocketAccept() should work to accept new incoming TCP connections.

**System(s) tested on**
Bundle CI - Ubuntu: Bionic

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher. D. Knight - NASA/ARC
Gerardo E. Cruz-Ortiz - NASA/GSFC",,https://github.com/nasa/osal/pull/401
Fix #397 - strawman for discussion,"**Describe the contribution**
Strawman for discussion at the CCB.

**Testing performed**
Builds/runs/passes.",duplicate,https://github.com/nasa/osal/pull/400
Error code documentation updates related to enforcement/test,"**Is your feature request related to a problem? Please describe.**
See #331 for related issue/discussion.
Lacking documented approach for return code checking across functional tests.

**Describe the solution you'd like**
1. Update the error code list in API documentation to state:
`The specific error code definitions may be extended or refined in future versions of the software.  Users should avoid unique error code handling except where required and documented explicitly in the API.  Typical implementations should just check for OS_SUCCESS or report the error.`
1. Typical return code documentation (for just execution status):
`\return Execution status. Success and error codes below are verified by test, but users should not assume the error code list is exhaustive. Precedence is not defined/enforced, calls with multiple errors may return any one of the related the error codes.`
1. Scrub API error code documentation with the concept functional tests will verify the error codes explicitly defined, should just be a general set (not implementation unique).

**Describe alternatives you've considered**
See discussion in #331 

**Additional context**
Coverage tests are expected to verify every implemented return code (white box).  Functional tests are API based.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, docs, CFS-38",https://github.com/nasa/osal/issues/399
"Fix #88, Add test for name too long and update comments ","Describe the contribution
Fixes #88, Add test for name too long and update comments.
Coverage test added to OS_TimerCreate for OS_ERR_NAME_TOO_LONG.
Updated comments related to sizing includes null terminator for:
OS_MAX_API_NAME, OS_MAX_PATH_LEN, OS_BUFFER_SIZE

Testing performed
Ran unit tests.

System(s) tested on
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.11.0, OSAL 5.0.9.0, PSP 1.4.7.0

Contributor Info
Dan Knutsen
NASA/Goddard
",CCB:Approved,https://github.com/nasa/osal/pull/398
simplify unit tests with utassert.h macros,"**Is your feature request related to a problem? Please describe.**
Currently a lot of OSAL unit test code is like the following (basically, run code, check the result, ""force"" an assert that it worked or didn't work):
```
    /*-----------------------------------------------------*/
    testDesc = ""#2 Name-too-long-arg"";

    res = OS_xxx(aVeryLoooooongName);
    if (res == OS_ERR_NAME_TOO_LONG)
        UT_OS_TEST_RESULT( testDesc, UTASSERT_CASETYPE_PASS);
    else
        UT_OS_TEST_RESULT( testDesc, UTASSERT_CASETYPE_FAILURE);
```

**Describe the solution you'd like**
Instead, this can be simplified to:
```
  UtAssert_True(OS_xxx(aVeryLoooooongName) == OS_ERR_NAME_TOO_LONG, ""#2 Name-too-long-arg"");
```

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, unit-test",https://github.com/nasa/osal/issues/397
"Fix #385, Deprecate interrupt related APIs","**Describe the contribution**
Removes coverage test code completely.  Marks OS_Int* API's as deprecated and implementations
removed if OSAL_OMIT_DEPRECATED defined
Fixes #385

Only changes under review for this request are 3618ae3, the rest of the commits were included to avoid merge conflicts (they were included in other pull requests for review)

**Testing performed**
Steps taken to test the contribution:
1. Remove calls from cfe/fsw/cfe-core/src/es/cfe_es_perf.c, note this change will break until the performance ticket is resolved (which removes the OS_Int calls) - https://github.com/nasa/cFE/issues/456
1. Built and ran test with and without OMIT_DEPRECATED defined.

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev 3 VM
 - OS: Ubuntu 18.04
 - Versions: bundle, these commits, and changes noted above

**Additional context**
Associated OS_Int tickets become wontfix - #376, #370, #71

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/396
adds unit tests for OS_Select... API,"**Describe the contribution**
Fix for ticket #377 which adds unit tests for OSAL select API's. This relies on, and has merges from, #390 and #393 .

**Testing performed**
make; cd cpu1/osal/unit-tests/oscore-test; ./osal-core-UT # all passes

**Expected behavior changes**
Adds unit tests for select.

**System(s) tested on**
Debian 9 VM

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",duplicate,https://github.com/nasa/osal/pull/395
"Fix #389, Resolve CI config warnings","**Describe the contribution**
Fix #389 
Resolve CI config warnings

**Testing performed**
1. CI (CI config change only)

**Expected behavior changes**
No more config warnings reported by Travis-CI

**System(s) tested on**
 - Hardware: CI
 - OS: Ubuntu 18.04
 - Versions: master w/ this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/394
"Fix #392, Make OS_STREAM_STATE available with APIs","…it's needed by OS_SelectSingle()

**Describe the contribution**
moves OS_STREAM_STATE defines to os/inc/osapi-os-core.h as they're needed by OS_SelectSingle()

**Testing performed**
Can build unit tests (being developed) for OS_SelectSingle()

Note that this is a prerequisite for #377 and is related to #391 all three should be pulled at the same time, or #392, #391 then #377  

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov","bug, CCB:Approved",https://github.com/nasa/osal/pull/393
"OS_SelectSingle(fd, &SelectFlags, timeout) users require OS_STREAM_STATE_READABLE/OS_STREAM_STATE_WRITABLE","**Describe the bug**
In order to use OS_SelectSingle() a user needs access to the #defines for OS_STREAM_STATE_READABLE and OS_STREAM_STATE_WRITABLE but they are contained in osal/src/os/shared/os-impl.h not in osal/src/os/inc/...

**To Reproduce**
Try to use the OS_SelectSingle API :)

**Expected behavior**
These #defines need to be moved to osal/src/os/inc

**Reporter Info**
Christopher.D.Knight@nasa.gov",bug,https://github.com/nasa/osal/issues/392
"Fix #390, OS_SelectFd... API's check that Set != NULL","**Describe the contribution**
fix to OS_SelectFdZero/Set/Add/Clear/IsSet to check that Set is not NULL

**Testing performed**
Will commit unit tests that check this as a separate pull request for #377 .

**Expected behavior changes**
API calls should return OS_POINTER_ERROR when Set is NULL. (IsSet returns ""false"".)

**System(s) tested on**
Haven't tested yet, #377 will test.

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",duplicate,https://github.com/nasa/osal/pull/391
OS_SelectFdZero/OS_SelectFdAdd/OS_SelectFdClear/OS_SelectFdIsSet does not ensure Set is != NULL,"**Describe the bug**
Users of these API's will cause a seg fault if they call these functions with a null pointer.

**To Reproduce**
Call OS_SelectFdZero(NULL), etc.

**Expected behavior**
These API's should return an error code when provided a NULL pointer.

**Code snips**
```
int32 OS_SelectFdZero(OS_FdSet *Set)
{  
   memset(Set,0,sizeof(OS_FdSet));
   return OS_SUCCESS;
} /* end OS_SelectFdZero */
```

**System observed on:**
Debian 9

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Christopher.D.Knight@nasa.gov",bug,https://github.com/nasa/osal/issues/390
Fix travis-CI config warnings,"**Is your feature request related to a problem? Please describe.**
Build config validation (from travis-CI) -
root: deprecated key sudo (The key `sudo` has no effect anymore.)
language: unexpected sequence, using the first value (c)
root: missing os, using the default linux

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/commit/6cf5a57f5995710345b2a5411d11af2b2d7f80ee

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, continuous-integration",https://github.com/nasa/osal/issues/389
"Fix #347, replaces task_1_work with correct variable names","Describe the contribution
Fixes #347, replace task_1_work with correct variable names

Testing performed
Ran unit tests

Expected behavior changes
The correct variable values will now be displayed when the test is executed.

System(s) tested on
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.10.0, OSAL 5.0.8.0, PSP 1.4.7.0,

Contributor Info
Dan Knutsen
NASA/Goddard
",CCB:Approved,https://github.com/nasa/osal/pull/388
"Fix #259, updated osapi-filesys.c + ut_osfilesys_diskio_tes.ct to use…","**Describe the contribution**
Fixes #259, Updatese osapi-filesys.c + ut_osfilesys_diskio_test.c to use desired return values.

**Testing performed**
1. Ran unit tests

**Expected behavior changes**
The more descriptive return value (OS_ERR_NAME_NOT_FOUND) will now be returned from the following functions (instead of OS_FS_ERROR):
OS_rmfs
OS_mount
OS_unmount
OS_FS_GetPhysDriveName


**System(s) tested on**
Oracle VM VirtualBox
OS: ubuntu-19.10
Versions: cFE 6.7.10.0, OSAL 5.0.8.0, PSP 1.4.7.0,

Contributor Info 
Dan Knutsen
NASA/Goddard
",CCB:Approved,https://github.com/nasa/osal/pull/387
"Fix #18, Deprecate shared memory APIs","**Describe the contribution**
This just wraps OS_ShMem* prototype and unit test wrapper additions in OSAL_OMIT_DEPRECATED.
Fixes #18

**Testing performed**
Steps taken to test the contribution:
1. Pushed bundle branch with this change to fork
1. Bundle CI passed: https://travis-ci.com/github/skliper/cFS/builds/155175840

**Expected behavior changes**
Only impact would be to an OSAL that implements these APIs and compiles with OSAL_OMIT_DEPRECATED defined.  None of the framework APIs do.  Path forward would be for that OSAL to own the prototype, or split into a separate library, or however else you want to handle it.

**System(s) tested on**
 - Hardware: CI
 - OS: Ubuntu 18.04
 - Versions: master bundle w/ this change

**Additional context**
Only https://github.com/nasa/osal/commit/aedd033298f03c226800b659dd416bab825a73f4 is relevant to this request, I can rebase once the other changes are merged.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/386
Deprecate OS_Int* related APIs,"**Is your feature request related to a problem? Please describe.**
Interrupt abstraction is platform/CPU dependent, and better suited to the PSP if needed as indicated by the partial implementation in OSAL, the related issues, and lack of functional tests at the OSAL level.

**Describe the solution you'd like**
Deprecate

**Describe alternatives you've considered**
None

**Additional context**
See #370, #376, #71

**Requester Info**
Jacob Hageman - NASA/GSFC",deprecate,https://github.com/nasa/osal/issues/385
"Update OSAL Configuration Guide, build instructions, directory references, etc","**Is your feature request related to a problem? Please describe.**
Build instructions in doc/OSAL-Configuration-Guide.doc and .pdf have instructions for classic build. Also the section on building the unit tests requires use of the classic build. 

**Describe the solution you'd like**
A new section needs to be written for building unit tests under cmake and the old classic build section needs to be removed (and refs to the classic build in the cmake section need to be stricken.)

Also note in 2.1.1, Setup the OSAL Source Distribution, that the OSAL source distribution directories are not aligned with our current directories. For example, osal/src/make and osal/src/inc no longer exists.

**Describe alternatives you've considered**
None

**Additional context**
Related to #339, #351, #194

**Requester Info**
Chris Knight - NASA/ARC",docs,https://github.com/nasa/osal/issues/384
use cmocka for stubs,"**Is your feature request related to a problem? Please describe.**
The cmocka (https://cmocka.org) framework provides much the same functionality as our unit test stub framework, and is Apache licensed. I suggest we replace our stub framework with cmocka (and contribute any required capabilities to the cmocka project if it doesn't currently cover all our needs.)

**Describe the solution you'd like**
Use cmocka.

**Describe alternatives you've considered**
I'm sure there are lots of other unit test frameworks. cmocka seems simple, capable, and easy to incorporate into cFS.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, unit-test",https://github.com/nasa/osal/issues/383
"gcc ""--wrap"" argument and stubs for OS-provided functions","**Is your feature request related to a problem? Please describe.**
I've been frustrated that we don't have unit tests for checking that OSAL properly handles error conditions when calling OS functions (like open, read, socket, accept, etc.) Apparently if we define --wrap=open, then all calls to open() will go to our open() function and the OS-provided open will be renamed as __wrap_open(). I suggest this be used to stub most/all OS calls and we can add unit tests for such things as running out of memory/storage/file descriptors and also support unit testing in sandboxed environments (don't know if Travis CI sandboxes) where such things as network calls are disabled.

**Describe the solution you'd like**
Stub functions for OS functions.

**Describe alternatives you've considered**
Been looking around for alternatives and haven't seen any.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",invalid,https://github.com/nasa/osal/issues/382
OS_TimerAdd missing functional test,"**Is your feature request related to a problem? Please describe.**
Functional test missing for OS_TimerAdd

**Describe the solution you'd like**
Add test

**Describe alternatives you've considered**
None

**Additional context**
Certification issue

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/osal/issues/381
TimeBase API missing functional tests,"**Is your feature request related to a problem? Please describe.**
OS_TimeBaseCreate, OS_TimeBaseSet, OS_TimeBaseDelete, OS_TimeBaseGetIdByName, OS_TimeBaseGetInfo, OS_TimeBaseGetFreeRun all missing functional tests

**Describe the solution you'd like**
Add tests

**Describe alternatives you've considered**
None

**Additional context**
Certification Issue

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/osal/issues/380
OS_FileSysAddFixedMap missing functional test,"**Is your feature request related to a problem? Please describe.**
Missing functional test for OS_FileSysAddFixedMap

**Describe the solution you'd like**
Add test

**Describe alternatives you've considered**
None

**Additional context**
Certification issue

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/osal/issues/379
OS_TimedRead and OS_TimedWrite missing functional tests,"**Is your feature request related to a problem? Please describe.**
OS_TimedRead and OS_TimedWrite missing functional tests

**Describe the solution you'd like**
Add tests

**Describe alternatives you've considered**
None.

**Additional context**
Certification issue

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/osal/issues/378
OSAL Select APIs missing functional test,"**Is your feature request related to a problem? Please describe.**
OS_SelectMultipe, OS_SelectSingle, OS_SelectFdZero, OS_SelectFdAdd, OS_SelectFdClear, OS_SelectFdIsSet all missing functional tests

**Describe the solution you'd like**
Add tests

**Describe alternatives you've considered**
None

**Additional context**
Certification issue.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, unit-test",https://github.com/nasa/osal/issues/377
OS_IntGetMask OS_IntSetMask missing functional tests,"**Is your feature request related to a problem? Please describe.**
Missing functional tests for OS_IntGetMask and OS_IntSetMask

**Describe the solution you'd like**
Add tests

**Describe alternatives you've considered**
None

**Additional context**
Certification issue

**Requester Info**
Jacob Hageman - NASA/GSFC",wontfix,https://github.com/nasa/osal/issues/376
Integration Candidate 2020-03-18,"**Describe the contribution**
Fix #10, #70, #116, #225, and #364

**Testing performed**
See PRs

**Expected behavior changes**
See related PR

**System(s) tested on**
Bundle CI Ubuntu:Bionic - see https://github.com/nasa/cFS/pull/58

**Additional context**
See PR #371 

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
Gerardo E. Cruz-Ortiz, NASA-GSFC",,https://github.com/nasa/osal/pull/375
Add Object Utility API functional tests,"**Is your feature request related to a problem? Please describe.**
OS_IdentifyObject, OS_ConvertToArrayIndex and OS_ForEachObject missing explicit functional tests

**Describe the solution you'd like**
Add tests

**Describe alternatives you've considered**
None.

**Additional context**
Certification violation

**Requester Info**
Jacob Hageman - NASA/GSFC
","enhancement, unit-test",https://github.com/nasa/osal/issues/374
OSAL network APIs missing functional tests,"**Is your feature request related to a problem? Please describe.**
Seems there's not really any unit tests for the OSAL networking code.

**Describe the solution you'd like**
Should have unit tests.

**Describe alternatives you've considered**
Not having unit tests?

**Additional context**
Note that to do unit testing, it's likely we'll need to stub out OS-provided API's (open, select, socket, bind, accept, close().) Do we have a standard framework for stubbing out OS-provided functions?

**Requester Info**
Christopher.D.Knight@nasa.gov","enhancement, unit-test",https://github.com/nasa/osal/issues/373
"Fix #349, OS_SocketAccept() fix","**Describe the contribution**
Fixes #349, note that this does *not* include unit tests. There don't seem to be any unit tests for the OSAL networking code. We should discuss at the CCB.

**Testing performed**
Tested with the TCP version of SBN, without the fix it fails on the Accept() call, with the fix, SBN nodes connect and traffic flows as expected.

**Expected behavior changes**
OS_SocketAccept() should work to accept new incoming TCP connections.

**System(s) tested on**
64-bit Debian 9 VM.

**Additional context**
Add any other context about the contribution here.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Christopher.D.Knight@nasa.gov",CCB:Approved,https://github.com/nasa/osal/pull/372
"Fix #364 and others, Scrub user's guide","**Describe the contribution**
Document/comment changes only
Fix #364 - see issue for detailed changes
Fix #70 - since old doc was removed, and autodoc is correct

Fix #10 - replicated changes to old document in API header comments in https://github.com/nasa/osal/pull/371/commits/1aa87debb9bcb9424d6bf9ae87ca48f1f0aee199
Fix #225 - documented callback restrictions https://github.com/nasa/osal/pull/371/commits/4b19a1a91440525a073a4e6dcc6697867b7f4112
Fix #116 - document OS dependent behavior on open files https://github.com/nasa/osal/pull/371/commits/8f0780e9d5aac6011bf60a2d4e9feb273f316d94

Partially addresses #255, #12, #18, #366

**Testing performed**
Steps taken to test the contribution:
1. Nominal build (native) and run, no issues
1. Make usersguide and confirmed no warnings in build/doc/warnings
1. cd build/doc/users_guide/latex
1. make
1. confirm completes and guide looks ok
1. Make osalguide and confirmed no warnings in build/doc/warnings
1. cd build/doc/osalguide/latex
1. make
1. confirm completes and guide looks ok

**Expected behavior changes**
No behavior change other than warnings resolved for doc build

**System(s) tested on**
 - Hardware: cFS Dev Server 3
 - OS: Ubuntu 18.04
 - Versions: Bundle w/ the commits below

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/371
OS_IntAck placeholder resolution,"**Is your feature request related to a problem? Please describe.**
""Placeholder"" isn't sufficient (prototype only).

**Describe the solution you'd like**
Either implement with a NOT_IMPLEMENTED error response or eliminate prototype (deprecate if it isn't appropriate).  If implemented, needs a mechanism to test (functional/coverage/unit).

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",duplicate,https://github.com/nasa/osal/issues/370
IC 20200304,"**Describe the contribution**
Integration Candidate 20200304

Fixes #357 

See PR #356 for details

**Testing performed**
CI, Ubuntu-Bionic

**Expected behavior changes**
None

**Additional context**
See PR #356 

**Contributor Info - All information REQUIRED for consideration of pull request**
Andrei-Costin Zisu - Planetary Transportation Systems GmbH (Berlin, Germany). 
Gerardo E. Cruz-Ortiz - NASA/GSFC
",,https://github.com/nasa/osal/pull/369
Remove os_fs_err_name_t,"**Is your feature request related to a problem? Please describe.**
Old compatibility typedef

**Describe the solution you'd like**
Deprecate for now, remove in major release.

**Describe alternatives you've considered**
None

**Additional context**
Do after #364 

**Requester Info**
Jacob Hageman - NASA/GSFC",deprecate,https://github.com/nasa/osal/issues/368
OSAL fs defines scrub - deprecate OS_VolumeTable and related symbols,"**Is your feature request related to a problem? Please describe.**
FS_BASED, RAM_DISK, EEPROM_DISK, ATA_DISK, NUM_TABLE_ENTRIES all missing OS_ prefix
OS_CHK_ONLY and OS_REPAIR defined, but the input to the expected API is a boolean (bool repair)

**Describe the solution you'd like**
Add prefix, remove unused defines

**Describe alternatives you've considered**
None

**Additional context**
Do after #364 

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/367
Remove FPU and exception handling APIs from OSAL,"**Is your feature request related to a problem? Please describe.**
Exception and FPU exception handling only partially implemented in OSAL

**Describe the solution you'd like**
Remove from OSAL, better suited to PSP if/when fully implemented.

**Describe alternatives you've considered**
None

**Additional context**
See also #18 to remove shared memory APIs

**Requester Info**
Jacob Hageman - NASA/GSFC",removed,https://github.com/nasa/osal/issues/366
Add UT Assert ability to set a buffer position,"**Is your feature request related to a problem? Please describe.**
UT assert has a feature to associate data buffers with stub routines to facilitate data passing between the stub and the test case.  For cases with ""random access"" requirements (e.g. ES CDS, mem pools, etc) cases there is a `UT_GetDataBuffer()` API which also gets the current position within the buffer (its tail), but there is no related API to actually set the position.

**Describe the solution you'd like**
Should add another stub API so that a stub routine can also directly set the tail position without needing to use `UT_Stub_CopyFromLocal` as a workaround.

**Describe alternatives you've considered**
Setting the position can be done by calling `UT_Stub_CopyFromLocal` or `UT_Stub_CopyToLocal` but this can can be ugly and convoluted in cases where the stub does not have actual data to copy.  Both of these copy data in addition to moving the tail position, so its less than ideal if the stub only needs to adjust the tail position and not copy data.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test",https://github.com/nasa/osal/issues/365
API doxygen scrub,"**Is your feature request related to a problem? Please describe.**
Doxygen documentation out of date

**Describe the solution you'd like**
Format/layout changes:
 - Table-fy return values (and eliminate some pdf build errors/warnings)
 - Make links from text where appropriate
 - Documented OSAL return codes
 - Add parameter direction where missing
 - Added explicit grouping where appropriate (and group references)
    - Group API's and reference from main page
 - Marked OS_TaskRegister as deprecated in documentation (no code change yet, that's #255)
 - Marked exception handling as deprecated in doc (code change is #366)
 - Marked shmem as deprecated in doc (code change is #18)
 - Added missing descriptions and parameter definitions
 - Added clock address rounding comments related to #12 (partial resolution)
 - Delete old OSAL API doc and pdf

Information changes:
 - Internal file descriptor not accessible (recommend against mixing direct calls with osal APIs)
 - Noted OS_TranslatePath is available to use with open directly by an app

**Describe alternatives you've considered**
None

**Additional context**
Related issues: #116, #70 , #10 
Partial: #255, #12 , #18, #366

**Requester Info**
Full name and company/organization if applicable
",docs,https://github.com/nasa/osal/issues/364
"""duplicate symbol '_main'"" on macOS when building tests","**Is your feature request related to a problem? Please describe.**

This is one of the issues addressed by #352. I am extracting it hereby to be considered separately from the rest of my work of macOS port.
 
I am getting linker errors on macOS because the test targets link in `libosal` library that has a `main()` function and they link `libut_bsp.a` which has a `main()` that launches tests. This causes a conflict with these test target' own main() function as follows:

```
duplicate symbol '_main' in:
    libosal.a(bsp_start.c.o)
    libut_bsp.a(bsp_ut.c.o)
```

**Describe the solution you'd like**

Usually the cases like this resolved by extracting the main function from one of the conflicting libraries. In this case it could make sense to extract the `main` function from `libosal` to a separate library such as `libosal-init` or `libosal-main` to avoid any conflicts with test targets. That separate library would then not be linked to the tests and the conflict would go away.

**Describe alternatives you've considered**

There seems to be no alternative to this behavior on macOS. You either have one `main()` function or there is a conflict.

**Additional context**

This is a more complete fragment of the output:

```
[9/17] Linking C executable timer-test
FAILED: timer-test
: && /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -D_XOPEN_SOURCE=600    -D_LINUX_OS_ -Wl,-search_paths_first -Wl,-headerpad_max_install_names -u _OS_VolumeTable -u _OS_Application_Startup tests/CMakeFiles/timer-test.dir/timer-test/timer-test.c.o  -o timer-test  libut_assert.a libosal.a libut_bsp.a -lpthread -ldl posix-mac-addons/src/mqueue/libmqueue.a posix-mac-addons/src/stubs/librt.a posix-mac-addons/src/pthread/libposix-mac-pthread.a posix-mac-addons/src/semaphore/libposix-mac-semaphore.a posix-mac-addons/src/stubs/libposix-mac-stubs.a posix-mac-addons/src/time/libposix-mac-time.a posix-mac-addons/src/timer/libposix-mac-timer.a && :
duplicate symbol '_main' in:
    libosal.a(bsp_start.c.o)
    libut_bsp.a(bsp_ut.c.o)
ld: 1 duplicate symbol for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
[10/17] Linking C executable bin-sem-test
FAILED: bin-sem-test
: && /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -D_XOPEN_SOURCE=600    -D_LINUX_OS_ -Wl,-search_paths_first -Wl,-headerpad_max_install_names -u _OS_VolumeTable -u _OS_Application_Startup tests/CMakeFiles/bin-sem-test.dir/bin-sem-test/bin-sem-test.c.o  -o bin-sem-test  libut_assert.a libosal.a libut_bsp.a -lpthread -ldl posix-mac-addons/src/mqueue/libmqueue.a posix-mac-addons/src/stubs/librt.a posix-mac-addons/src/pthread/libposix-mac-pthread.a posix-mac-addons/src/semaphore/libposix-mac-semaphore.a posix-mac-addons/src/stubs/libposix-mac-stubs.a posix-mac-addons/src/time/libposix-mac-time.a posix-mac-addons/src/timer/libposix-mac-timer.a && :
duplicate symbol '_main' in:
    libosal.a(bsp_start.c.o)
    libut_bsp.a(bsp_ut.c.o)
ld: 1 duplicate symbol for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
ninja: build stopped: subcommand failed.
```

**Requester Info**

Stanislav Pankevich
",bug,https://github.com/nasa/osal/issues/363
OSAL coverage test should be part of normal build,"**Is your feature request related to a problem? Please describe.**
Currently the `src/unit-test-coverage` directory is an entirely separate build which needs to be invoked separately by the user.

As per CFE request nasa/cfe#386 it is desired to integrate the OSAL coverage tests as part of the normal unit test builds, so these do not need to be built separately.

**Describe the solution you'd like**
The tentatively agreed-upon approach is to build _all_ coverage targets by default, and use the target BSP to run them.

**Additional context**
The side effect is that this may build coverage targets which are not relevant to the deployed platform (e.g. building and running a VxWorks coverage test for a platform that does not use VxWorks).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/osal/issues/362
IC - 20200226,"Describe the contribution
Fix #338  

Testing performed
Steps taken to test the contribution:

    Current CI passes
    Test 4 in Enhanced CI in https://github.com/nasa/cFS/pull/40

Expected behavior changes
#338 - Fixes memset bug in `src/os/posix/osapi.c `

System(s) tested on
    CI: Ubuntu 18.04

Additional context
N/A

Third party code
N/A

Contributor Info - All information REQUIRED for consideration of pull request
Gerardo E. Cruz-Ortiz - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/361
Fix #359: src/os/shared/osapi-module.c: handle return value of OS_ModuleLoad_Impl,"**Describe the contribution**

This changeset fixes #359.

**Testing performed**

The change is not detectable by the current test suite in the current master branch (as of 64ad0f551c01ab846bc79b23411e72cddf987dde) but I can confirm that building OSAL and running its tests on Ubuntu Linux and macOS works fine.

**Expected behavior changes**

This changeset only adds a handling of the `OS_ModuleLoad_Impl` function's return value. In all nominal cases there should be no changes in the existing behavior.

**System(s) tested on**
 - Hardware: Linux laptop, macOS laptop
 - OS: Ubuntu 19.04, macOS 10.14.6
 - Versions: OSAL as of 64ad0f551c01ab846bc79b23411e72cddf987dde

**Additional context**
None.

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**

Stanislav Pankevich, personal

The signed individual CLA has been sent today to the email specified in the CLA document.

",invalid,https://github.com/nasa/osal/pull/360
os/shared/osapi-module.c: the return value of the call to OS_ModuleLoad_Impl should be checked,"**Is your feature request related to a problem? Please describe.**

I have noticed this issue while working on making the OSAL's tests pass on macOS (see #352). I am reporting this issue separately from the rest of the changeset suggested there.

The issue is in the following fragment of code as found in the current master branch (as of https://github.com/nasa/osal/commit/64ad0f551c01ab846bc79b23411e72cddf987dde):

```
    if(return_code == OS_SUCCESS)
    {
        /*
         * Save all the data to our own internal module table, but
         * only if OS_MAX_MODULES is greater than 0
         */
#if (OS_MAX_MODULES > 0)
        memset(&OS_module_table[local_id], 0, sizeof(OS_module_internal_record_t));
        strncpy(OS_module_table[local_id].module_name, module_name, OS_MAX_API_NAME);
        strncpy(OS_module_table[local_id].file_name, filename, OS_MAX_PATH_LEN);
        record->name_entry = OS_module_table[local_id].module_name;

        /* Now call the OS-specific implementation.  This reads info from the module table. */
        return_code = OS_ModuleLoad_Impl(local_id, translated_path);
#endif

        /* Check result, finalize record, and unlock global table. */
        return_code = OS_ObjectIdFinalizeNew(return_code, record, module_id);
#endif
```

We can see that the return value of the `OS_ModuleLoad_Impl` is not tested for `!= OS_SUCCESS` so the execution can continue even if the call to this function returns an error.

This is a direct link to the line: https://github.com/nasa/osal/blob/64ad0f551c01ab846bc79b23411e72cddf987dde/src/os/shared/osapi-module.c#L244

**Describe the solution you'd like**

Most of the code in OSAL does check the return values: `if(return_code == OS_SUCCESS)` or `if(return_code != OS_SUCCESS)` so it makes sense to create such a check in this case too.

I am going to create a Pull Request that addresses this issue.

**Describe alternatives you've considered**

To the best of my knowledge,  a proper return value checking is the only way to get fast feedback from a call to the `OS_ModuleLoad_Impl` if something goes wrong.

**Additional context**

None.

**Requester Info**

Stanislav Pankevich, independent contribution.
",enhancement,https://github.com/nasa/osal/issues/359
Add OS_QueueGetName(),"**Is your feature request related to a problem? Please describe.**
cFE will have a function to get a pipe's name given its id, which will call down to OSAL to get the name from the queue. Currently this is accomplished with OS_QueueGetInfo() but that requires a pointer to a struct buffer.

**Describe the solution you'd like**
A convenience function should be added to retrieve a queue's name given its id without the need to pass in a struct buffer (instead passing in a string buffer.)

**Describe alternatives you've considered**
Could maintain the status quo, this is a convenience function.

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Christopher.D.Knight@nasa.gov",enhancement,https://github.com/nasa/osal/issues/358
OS_ModuleLoad_Impl function header does not match definition,"**Describe the bug**
When OS_INCLUDE_MODULE_LOADER is not defined, the function header does not
match the definition:

```
[ 98%] Building C object examples/rtems-cfs-hello-world/osal/CMakeFiles/osal.dir/src/os/rtems/osloader.obj
/home/andrei/Workspace/cFS/osal/src/os/rtems/osloader.c:320:7: error: conflicting types for 'OS_ModuleLoad_Impl'
 int32 OS_ModuleLoad_Impl ( uint32 module_id, char *translated_path )
       ^~~~~~~~~~~~~~~~~~
In file included from /home/andrei/Workspace/cFS/osal/src/os/rtems/os-rtems.h:39:0,
                 from /home/andrei/Workspace/on-board-software/vendor/cFS/osal/src/os/rtems/osloader.c:26:
/home/andrei/Workspace/cFS/osal/src/os/shared/os-impl.h:1230:7: note: previous declaration of 'OS_ModuleLoad_Impl' was here
 int32 OS_ModuleLoad_Impl ( uint32 module_id, const char *translated_path );
```

This issue was introduced in PR #21 .

**To Reproduce**
Build with `OS_INCLUDE_MODULE_LOADER` not defined.

**Expected behavior**
Build succeeds.",bug,https://github.com/nasa/osal/issues/357
Fix #357: Make parameter const,"**Describe the contribution**
When OS_INCLUDE_MODULE_LOADER is not defined, the function header does not
match the definition. This issue was introduced in PR #21 .

Longer term: is there a continuous integration strategy to avoid this sort of situation happening in the future? 

**Testing performed**
Build with module loader disabled with cFS master distribution.

**Expected behavior changes**
None

**System(s) tested on**
 - PC, Ubuntu 19.04

**Contributor Info**
Andrei-Costin Zisu of Planetary Transportation Systems GmbH (Berlin, Germany). Company-wide CLA is in the process of being signed and should be available soon.
","bug, CCB:Approved",https://github.com/nasa/osal/pull/356
Integration Candidate 20200121,"**Describe the contribution**
Fix #328, fix #329

**Testing performed**
Steps taken to test the contribution:
1. Current CI passes
1. Enhanced CI in #40 passes debug/with deprecated elements testing

**Expected behavior changes**
Resolved LGTM errors, no functional changes

**System(s) tested on**
 - CI: Ubuntu 18.04

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/355
Split shell code out to support optional inclusion,"**Is your feature request related to a problem? Please describe.**
Execute in shell functionality is undesirable for some security conscious applications.

**Describe the solution you'd like**
Allow for optional inclusion (like network option?), respond as not implemented when not included.

**Describe alternatives you've considered**
Discussed security at length, diverse use cases require flexibility for user to decide.

**Additional context**
POSIX issue found in LGTM

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/354
"Deprecate multiple ""success"" code options","**Is your feature request related to a problem? Please describe.**
API's with multiple ""success"" codes are frequently mishandled

**Describe the solution you'd like**
Single success response, unique information should be passed back in parameters

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC",invalid,https://github.com/nasa/osal/issues/353
WIP: os/posix: port of the posix implementation to macOS ,"**Describe the contribution**

This is an ongoing attempt to make the CFS / OSAL work on macOS. I am opening this is as a Work-in-Progress Pull Request because there are many things that have to be addressed.

Rough plan of the work (major points):

- Necessary ports:
  - [x] mqueue (based on memory-mapped files, portable but needs verification)
  - [x] pthread_setschedprio (portable)
  - [x] sem_*:
    - [x] The mac_sem_* implementation is based on pthread_mutex and pthread_cond (portable)
    - [x] The mac_sem2_* implementation is based on GCD semaphores (macOS specific)
  - [x] clock_nanosleep (portable but needs verification)
  - [x] timer_* (portable, but the implementation is rather limited and tailored to what CFS does)
- [x] All of the tests as found in the changeset's `Makefile` are passing. One could use this Makefile as a starting point for working with this changeset.
- [ ] nasa/osal should have a proper CI and test scripts that could be used for verifying this work. This is still open and it looks like a dependency for this macOS-related work: https://github.com/nasa/osal/pull/13. Until then, this PR uses a [custom test suite](https://github.com/nasa/osal/pull/352/files#diff-b67911656ef5d18c4ae36cb6741b7965R3).
- [x] [Fix #337, fix memory corruption produced by misplaced memset()](https://github.com/nasa/osal/pull/338) has to be merged.
- [ ] Decision has to be made if: 1) a separate folder for macos has to be created as a full copy of posix. Or 2) macOS support could be enabled with a number of `#ifdef`s. I would go with the approach 1 with a separate macos folder to maintain clear distinction between Linux and macOS given that macOS will most likely always be only a development/simulation target which means that the lack of the `rt` stuff on macOS is not a problem and its simulation is ok.
- [x] `main` of src/bsp/pc-linux/src/bsp_start.c [conflicts](https://github.com/nasa/osal/pull/352/files#diff-4d0a9e0072804cbff53510cdd1c0d7d0R59) with the `main` of the unit tests. Open and fixed here: [""duplicate symbol '_main'"" on macOS when building tests #363](https://github.com/nasa/osal/issues/363).
- [ ] This port only makes sense if the related [elf2cfetbl#34](https://github.com/nasa/elf2cfetbl/pull/34) is approved and incorporated. Otherwise it is not possible to run CFS and have correct `.tbl` files on macOS.
- [ ] Non-portable code coverage flag, opened here: https://github.com/nasa/osal/issues/420.

Some important comments:

- It is not the first time that I am trying to make something work on macOS so I had some code in my pockets already. I have collected the POSIX functions which were missing on macOS to a separate project: [posix-mac-addons](https://github.com/stanislaw/posix-mac-addons). For now, I am simply copying the `src` contents of that project to the root of the `osal` repository. Please see the comments on the implemented functions on that project's README page as well.

- I have built this branch from 2 different macOS machines and I can confirm that everything seems to work on my end: building them from a clean tree and running the tests. Both are Mojave though, so I cannot promise that everything will work on Catalina (many things are breaking for those who have upgraded so upgrading this changeset to Catalina could be a separate action).

- All of the tests as found in the changeset's `Makefile` are passing. One could use this Makefile as a starting point for working with this changeset.

- I was not sure whether I should have created the `posix-mac` port or simply hack on top of `posix`. I decided to go for latter because it is now easier to see on the diff what is different. However, if there is an interest in getting this merged, it is not clear to me what would be the right solution: keep `posix` with lots of ifs or create a dedicated `mac-posix` one.

- Both implementations of the semaphores are passing the tests. This changeset is using the one which is `mac_sem2_*` based on the GCD semaphores. The following important detail explains why the implementation is a bit more sophisticated. Without this detail some of the tests are crashing. I guess, this could be fixed by simply ensuring that the semaphores in the tests are used in a balanced way.

```
GCD semaphores crash with `BUG IN CLIENT OF LIBDISPATCH` when you destroy a
semaphore which is being waited on this is why in the `mac_sem2_*`
implementation there is a layer that tracks how many times a certain semaphore
was waited/posted to release the semaphore manually when it gets destroyed. This
behavior should be disabled in the future and was only needed to make one
important project's tests to pass without crashing.
https://github.com/stanislaw/posix-mac-addons/tree/a8c406c65cf82007ab1e7cc126cc3bf142facf0a#known-issue
```

**Testing performed**

The testing has been performed on macOS Mojave 10.14.6

**Expected behavior changes**


**System(s) tested on**
 - Hardware: MacBook Pro (Retina, 15', Mitte 2015)
 - OS: macOS Mojave 10.14.6
 - Versions: This branch only

**Additional context**

Everything is in the description.

**Third party code**

This is to be defined very soon. 2/3 of the code in `posix-mac-addons` is created because of my work on this port but I would really like to have `posix-mac-addons` available as a standalone repository that will have a MIT license. I would like to know your thoughts on if / how this third-party code could be integrated then. 

**Contributor Info - All information REQUIRED for consideration of pull request**

Stanislav Pankevich, personal

The signed individual CLA has been sent to the email specified in the CLA document.
","duplicate, enhancement",https://github.com/nasa/osal/pull/352
Build instructions in top level README are incorrect,"**Describe the bug**
Followed the build steps as in the README file but the build is not successfull. 

Error: 
`waheeed@ubuntu:~/Lifi/osal/build$ make
make -C tests 
make[1]: Entering directory '/home/waheeed/Lifi/osal/build/tests'
make -C bin-sem-flush-test 
make[2]: Entering directory '/home/waheeed/Lifi/osal/build/tests/bin-sem-flush-test'
gcc  -I/home/waheeed/Lifi/osal/src/inc -I/home/waheeed/Lifi/osal/src/os/inc -I/home/waheeed/Lifi/osal/src/tests/bin-sem-flush-test -I/home/waheeed/Lifi/osal/src/../ut_assert/inc -I../../inc   -D_EL -DENDIAN=_EL -DSOFTWARE_LITTLE_BIT_ORDER  -D__ix86__ -D_ix86_ -D_LINUX_OS_ -Dposix -DX86PC -DBUILD= -D_REENTRANT -D _EMBED_  -D_XOPEN_SOURCE=600   -Wall -pedantic -std=c99 -Wstrict-prototypes -O1 -DOS_DEBUG_LEVEL=3 -c -o osapi.o /home/waheeed/Lifi/osal/src/os/posix/osapi.c
In file included from /home/waheeed/Lifi/osal/src/os/posix/osapi.c:27:0:
/home/waheeed/Lifi/osal/src/os/posix/os-posix.h:42:10: fatal error: os-impl.h: No such file or directory
 #include ""os-impl.h""
          ^~~~~~~~~~~
compilation terminated.`


**To Reproduce**
Steps to reproduce the behavior:
1. Clone the latest build 5.3 (15-Jan-2020 )or the commit 781992ce2c0df067ebd84779615bf1ebf6ef7de5
2. Follow the build steps as mentioned in the README file
3. source setvars.sh
4. cd build
5. make config
6. make


**Expected behavior**
Successful build

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - Hardware: PC-linux 
 - OS: [Ubuntu 18.04]
 - Versions [OSAL_5.3]

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Waheed Ejaz
",docs,https://github.com/nasa/osal/issues/351
Integration Candidate 20200108,"**Describe the contribution**
Merge #325, #336
Fix #294, fix #335

**Testing performed**
1. Checked out IC bundle
1. Built and ran cFS unit tests and OSAL coverage (vxworks and shared)
   1. All passed
1. make osalguide to confirm it built
1. Ran core-cpu1 (cFS), no errors/warnings/failures observed

**Expected behavior changes**
OS timer test should now always pass

**System(s) tested on**
 - cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: IC branches

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/osal/pull/350
OS_SocketAccept fails,"**Describe the bug**
When using OS_SocketAccept on a stream (TCP) server socket, it fails because the accept code calls OS_ObjectIdGetById() passing a OS_LOCK_MODE_REFCOUNT, but then OS_SocketAccept sees the refcount > 0 and fails out.

**To Reproduce**
Create code (e.g. an app) that creates a TCP socket server and try using OS_SocketAccept() to receive the incoming connections.

**Expected behavior**
OS_SocketAccept should work as expected/documented.

**Code snips**
OS_SockAddr_t Addr;
int Socket = 0, ClientFd;
int32 Status = 0;

OS_SocketAddrInit(&Addr, OS_SocketDomain_INET);
OS_SocketAddrFromString(Addr, ""127.0.0.1"");
OS_SocketOpen(&Socket, OS_SocketDomain_INET, OS_SocketType_STREAM);
OS_SocketBind(Socket, &Addr);
Status = OS_SocketAccept(Socket, &ClientFd, &Addr, 0);

**System observed on:**
Debian 9 64-bit x86

**Additional context**
removing the check for refcount results in expected behavior, OS accept() call should be thread-safe so need not maintain lock through SocketAccept() function.

**Reporter Info**
Chris Knight, NASA Ames",bug,https://github.com/nasa/osal/issues/349
Reevaluate signal handling in POSIX,"**Is your feature request related to a problem? Please describe.**
There may be some inefficiencies / room for improvement in how POSIX is handling the signal masks, that should be evaluated and considered.

For the RT signals, these are masked all the time and timers use `sigwait()` to synchronously receive them.  However that potential to leave stray signals queued.  This has been worked around by ensuing that no signals are queued before setting up a timer, but there may be a more efficient way to accomplish this.

**Describe the solution you'd like**
Consider setting all the unused signals to ""IGNORE"" such that the kernel will not even deliver them to the process, rather than masking them at the process.

~Signal masks are also changed as part of the global lock/unlock procedure what may not be necessary.  This should be re-evaluated with the current OSAL design.  Historically this may have been necessary for async signals but the current OSAL now avoids async signals for all OSAL-created tasks.~ Already done in #673/#678

**Describe alternatives you've considered**
Leave as-is.

**Additional context**
See related issue #335 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/348
"Add OSAL library build, coverage test, and functional tests to CI","**Is your feature request related to a problem? Please describe.**
CI doesn't build or execute tests for OSAL

Related to conversation on https://github.com/nasa/osal/issues/23

**Describe the solution you'd like**
Ideally create a Makefile with a set of rules to cover building, running tests, and reporting coverage (pattern after bundle build) which allows for users to easily do the same thing
Once created, put into CI

**Additional Info**
Some of the actions are detailed in https://github.com/nasa/cFS/blob/dev-vdd/VDD.md

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, continuous-integration",https://github.com/nasa/osal/issues/346
"Fix #339, Remove classic build","**Describe the contribution**
Remove classic build

**Testing performed**
Steps taken to test the contribution:
1. make prep
2. make install
3. Verify build/run cfs

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
 - CFE 6.6, osal 5.0.3


**Contributor Info**
Anh Van, NASA Goddard
",CCB:Approved,https://github.com/nasa/osal/pull/345
os_dirent_t.FileName uses OS_MAX_PATH_LEN for array size,"typedef struct
{
   char FileName[OS_MAX_PATH_LEN];
} os_dirent_t;

It's probably the case that FileName should be of OS_MAX_FILE_NAME size instead.

The use case is to build a filename from a path and a filename from an os_dirent_t. This path, including the filename, would be OS_MAX_PATH_LEN.",enhancement,https://github.com/nasa/osal/issues/344
os-impl-bsd-sockets.c lgtm warning,"**Is your feature request related to a problem? Please describe.**
References https://github.com/nasa/osal/issues/328 and pull request https://github.com/nasa/osal/pull/330

os-impl-bsd-sockets.c

```
line 217, 568:
if (addrlen == 0 \|\| addrlen > OS_SOCKADDR_MAX_LEN)
--
  | Comparison is always false because addrlen <= 28.
```

**Describe the solution you'd like**
Use
CompileTimeAssert(sizeof(sockaddr_in) <= OS_SOCKADDR_MAX_LEN, AddrLenExceedSockaddrLen)  at the top of file or in header.

**Describe alternatives you've considered**
Leave it as it is. 

**Requester Info**
Anh Van, NASA Goddard
",invalid,https://github.com/nasa/osal/issues/343
Remove classic build artifacts,"**Is your feature request related to a problem? Please describe.**
Classic build no longer supported.

**Describe the solution you'd like**
Remove all associated artifacts: build directory, all *.mak directories, setvars.sh

**Describe alternatives you've considered**
None

**Additional context**
Makes #164 obsolete

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/339
"Fix #337, fix memory corruption produced by misplaced memset()","**Describe the contribution**

This PR fixes #337. The exact change has been recommended by @jphickey.

**Testing performed**

Currently, I cannot test this on Linux only on macOS. As reported in the issue, I confirm that that the issue gets fixed with this change applied. Also, the bug has been confirmed by @jphickey and the changeset is created from his recommendation.

**Expected behavior changes**

See related issue: #337.

**System(s) tested on**

    Running osal-core-test tests (BSEM tests)
    OS: macOS Mojave 10.14.6 (18G87)
    Versions: master branch as of 155e9ebcd6d1930890231a44237e6883d229d22c.

**Contributor Info - All information REQUIRED for consideration of pull request**

Stanislav Pankevich, personal

The signed individual CLA has been sent to the email specified in the CLA document.


",CCB:Approved,https://github.com/nasa/osal/pull/338
Possible bug in os/posix/osapi.c when running osal-core-test / BSEM tests.,"**Describe the bug**

I apologize in advance in case the issue I am reporting is caused by my misunderstanding of the OSAL POSIX code and the problem is rather somewhere on my end.

I am trying to port the POSIX OSAL code to macOS. It is a rather long adventure but it looks like there can be a happy end. By now I am going through all of the unit and integration tests in this repository in order to see which things have to be changed in order to run on macOS.

This issue I have first reported on StackOverflow because I thought the problem was on the macOS side: [Calling pthread_cond_destroy results in “Function not implemented” ENOSYS on macOS](https://stackoverflow.com/questions/59560940/calling-pthread-cond-destroy-results-in-function-not-implemented-enosys-on-mac).

```c
if (pthread_cond_destroy(&(sem->cv)) != 0) {
    printf(""pthread_cond_destroy %d %s\n"", errno, strerror(errno)); // my addition
    ...
}
```

results in `pthread_cond_destroy 78 Function not implemented` as I am running it on macOS.

Looking at the code further I have found that there might be a bug in the `OS_BinSemCreate_Impl` function along these lines:

```
        /*
         ** Initialize the condition variable
         */
        ret = pthread_cond_init(&(sem->cv), NULL);
        if (ret != 0)
        {
            OS_DEBUG(""Error: pthread_cond_init failed: %s\n"",strerror(ret));
            return_code = OS_SEM_FAILURE;
            break;
        }

        cond_created = 1;

        /*
         ** fill out the proper OSAL table fields
         */

        memset(sem, 0, sizeof (*sem));
        sem->current_value = initial_value;

        return_code = OS_SUCCESS;
```

I would like to highlight that the `memset(sem, 0, sizeof (*sem));` happens AFTER the `ret = pthread_cond_init(&(sem->cv), NULL);` line which means that `memset` corrupts the work that is done by `pthread_cond_init`. 

If I put the `memset` string BEFORE the `pthread_cond_init` line, the `BSEM` test passes.

**To Reproduce**

I am reproducing this on a private fork of `nasa/osal` and it is a very hacky branch to make it work on macOS. At the moment I can only suggest to do a mental reasoning about the critical lines: `memset...` and `pthread_cond_init...` lines as I described above.

**Expected behavior**

This is how the test log looks like with my change above and this is what I expect to always happen:

```
/Users/stanislaw/workspace/code/cfs-osal-posix-mac/cmake-build-debug/tests/osal-core-test

[BEGIN] PC-LINUX UNIT TEST

[BEGIN] 01 BSEM
[ PASS] 01.001 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.002 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.003 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.004 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.005 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.006 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.007 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.008 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.009 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.010 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.011 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.012 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.013 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.014 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.015 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.016 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.017 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.018 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.019 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.020 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.021 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.022 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.023 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.024 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.025 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.026 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.027 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.028 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.029 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.030 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.031 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.032 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.033 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.034 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.035 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.036 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.037 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.038 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.039 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.040 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.041 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.042 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.043 osal-core-test.c:334 - OS_BinSemCreate, recreate 0
[ PASS] 01.044 osal-core-test.c:338 - OS_BinSemCreate, dupe name 0
[ PASS] 01.045 osal-core-test.c:342 - OS_BinSemCreate, recreate 2
[ PASS] 01.046 osal-core-test.c:346 - OS_BinSemCreate, recreate 3
[ PASS] 01.047 osal-core-test.c:353 - OS_BinSemGetIdByName, Bin 0
[ PASS] 01.048 osal-core-test.c:357 - OS_BinSemGetIdByName, Bin 1
[ PASS] 01.049 osal-core-test.c:361 - OS_BinSemGetIdByName, Bin 2
[ PASS] 01.050 osal-core-test.c:365 - OS_BinSemGetIdByName, Bin 3
[ PASS] 01.051 osal-core-test.c:371 - OS_BinSemDelete, Old ID
[ PASS] 01.052 osal-core-test.c:375 - OS_BinSemDelete, Bin 0
[ PASS] 01.053 osal-core-test.c:380 - OS_BinSemDelete, Bin 1
[ PASS] 01.054 osal-core-test.c:383 - OS_BinSemDelete, Bin 2
[ PASS] 01.055 osal-core-test.c:386 - OS_BinSemDelete, Bin 3
[  END] 01 BSEM                 TOTAL::55    PASS::55    FAIL::0      MIR::0      TSF::0      N/A::0   

COMPLETE: 1 tests Segment(s) executed


Process finished with exit code 0
```

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - MacBook Pro (13-inch, 2017, Four Thunderbolt 3 Ports)
 - OS: macOS Mojave 10.14.6 (18G87)
 - Versions OSAL repository build from this commit:

```
commit 155e9ebcd6d1930890231a44237e6883d229d22c
Author: Jake Hageman <jacob.hageman@nasa.gov>
Date:   Sat Nov 30 13:47:11 2019 -0500

    Update version and README
```


**Additional context**

This is how the issue manifests itself (I am only running the related tests).

```
/Users/stanislaw/workspace/code/cfs-osal-posix-mac/cmake-build-debug/tests/osal-core-test

[BEGIN] PC-LINUX UNIT TEST

[BEGIN] 01 BSEM
[ PASS] 01.001 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.002 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.003 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.004 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.005 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.006 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.007 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.008 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.009 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.010 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.011 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.012 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.013 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.014 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.015 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.016 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.017 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.018 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.019 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.020 osal-core-test.c:312 - OS_BinSemCreate, nominal
[ PASS] 01.021 osal-core-test.c:312 - OS_BinSemCreate, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.022 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.023 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.024 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.025 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.026 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.027 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.028 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.029 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.030 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.031 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.032 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.033 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.034 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.035 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.036 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.037 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.038 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.039 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.040 osal-core-test.c:323 - OS_BinSemDelete, nominal
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.041 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ PASS] 01.042 osal-core-test.c:323 - OS_BinSemDelete, nominal
[ FAIL] 01.043 osal-core-test.c:334 - OS_BinSemCreate, recreate 0
[ PASS] 01.044 osal-core-test.c:338 - OS_BinSemCreate, dupe name 0
[ FAIL] 01.045 osal-core-test.c:342 - OS_BinSemCreate, recreate 2
[ FAIL] 01.046 osal-core-test.c:346 - OS_BinSemCreate, recreate 3
[ PASS] 01.047 osal-core-test.c:353 - OS_BinSemGetIdByName, Bin 0
[ FAIL] 01.048 osal-core-test.c:357 - OS_BinSemGetIdByName, Bin 1
[ PASS] 01.049 osal-core-test.c:361 - OS_BinSemGetIdByName, Bin 2
[ PASS] 01.050 osal-core-test.c:365 - OS_BinSemGetIdByName, Bin 3
pthread_cond_destroy 78 Function not implemented
[ PASS] 01.051 osal-core-test.c:371 - OS_BinSemDelete, Old ID
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.052 osal-core-test.c:375 - OS_BinSemDelete, Bin 0
pthread_cond_destroy 78 Function not implemented
[ PASS] 01.053 osal-core-test.c:380 - OS_BinSemDelete, Bin 1
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.054 osal-core-test.c:383 - OS_BinSemDelete, Bin 2
pthread_cond_destroy 78 Function not implemented
[ FAIL] 01.055 osal-core-test.c:386 - OS_BinSemDelete, Bin 3
[  END] 01 BSEM                 TOTAL::55    PASS::28    FAIL::27     MIR::0      TSF::0      N/A::0   

COMPLETE: 1 tests Segment(s) executed


Process finished with exit code 2
```

This is the original StackOverflow report:

```
I am trying to make some Linux-based code run on macOS. It is the POSIX OSAL layer for NASA Core Flight System as found here: https://github.com/nasa/osal.

I am observing that the code uses POSIX conditions and in particular, there is a call like the following:

    if (pthread_cond_destroy(&(sem->cv)) != 0) {
        printf(""pthread_cond_destroy %d %s\n"", errno, strerror(errno)); // my addition
        ...
    }

On macOS, the tests related to this code provided in the OSAL repository always fail because the call to `pthread_cond_destroy` always results in:

    pthread_cond_destroy 78 Function not implemented

I have found an example in the Apple documentation which shows an example of [Using Conditions](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW4) (Threading Programming Guide / Synchronization / Using Conditions) and in that example there is no call to `pthread_cond_destroy` but I cannot make any conclusions on whether that call should be there or not because the example is simplified.

This is how the header looks like on my machine:

    __API_AVAILABLE(macos(10.4), ios(2.0))
    int pthread_cond_destroy(pthread_cond_t *);


I am wondering if `pthread_cond_*` functionality is simply missing on macOS and I have to implement a replacement for it or there is some way to make it work.

EDIT: The minimal example is working fine for me. The problem should be somewhere around the problematic code. What I still don't understand is why I am getting ENOSYS/78 error code, for one thing it is not mentioned on the man page [man/3/pthread_cond_destroy](https://linux.die.net/man/3/pthread_cond_destroy): 

    #include <iostream>
    #include <pthread.h>

    int main() {
      pthread_cond_t condition;
      pthread_cond_init(&condition, NULL);
      int result = pthread_cond_destroy(&condition);
      assert(result == 0);
      assert(errno == 0);
      std::cout << ""Hello, World!"" << std::endl;
      return 0;
    }
```

**Reporter Info**
Stanislav Pankevich
",bug,https://github.com/nasa/osal/issues/337
Clear pending signal when configuring timer,"**Describe the contribution**

Fix #335 

On POSIX, call sigtimedwait() on the selected RT signal as part of the set up for the timebase.  This ensures that if the signal is already pending, it will be cleared.

This also simplifies the timer callback routine in the UT code, cleaning up some unnecessary extra logic.

**Testing performed**
Build with ENABLE_UNIT_TESTS=TRUE and execute `osal_timer_UT` in a repeated loop.

Prior to this fix, it would typically fail after about 10-20 iterations, sometimes fewer.
After this fix, it does not fail (100+ iterations, no failures).

Confirmed normal operation of CFE core (no change).

**Expected behavior changes**
Fixes occasional failures in the nominal timer test.
No change to FSW code

**System(s) tested on:**
Ubuntu 18.04 LTS, 64 Bit

**Additional context**
Tracked down the root cause of the occasional timer failures to the timer test that preceded it.  The previous test involved a short interval (5us).  Depending on the timing of the preceding delete call, the timer signal might fire again before the timer is fully un-configured (i.e. during the delete process).  

In this case, the system will be left with the signal still pending (blocked) but with no task running to accept/clear it.

This is OK until the next timer is configured, and the same signal will be selected (the first RT signal).  In this case, because the signal was already pending from the previous config, it results in an extra ""spurious"" initial callback at the start.  This in turn was interfering with the difference calculations in the timer UT.

It is unlikely that this issue would be seen in FSW code, as it depends on deleting and recreating timers and FSW generally does not do this (i.e. it sets up timers once).

The main part of the fix is to call `sigtimedwait()` with a zero timeout to ensure that the signal is not pending.

Additionally, there is some cleanup in the UT callback code, which fixes two other possibilities.  These were not occurring, but potentially could.
- The interval computation could be incorrect if the time elapsed was greater than 1 second.
- Always set the currTime/endTime in case there is a lag time in stopping the timer.  But only set ""g_status"" once.
- Remove unneeded/invalid ""OS_TimerSet"" call.


**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/osal/pull/336
osal_timer_UT periodic failure,"**Describe the bug**
osal_timer_UT periodically reports a failure on linux for the nominal OS_TimerSet case

**To Reproduce**
1. Build and run
```
make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
make
make install
build/exe/cpu1/osal_timer_UT
```

**Expected behavior**
Should pass

**Code snips**
See ut_ostimer_test.c for UT_os_timercallback (the timer callback function)
See ut_ostimer_timerio_test.c line 654 for the failure location

**System observed on:**
 - cFS Dev 2 Server
 - OS: Ubuntu 18.04
 - Versions: happened to be running the ic-20191230 branches, but not unique (historical issue)

**Additional context**
Added after the tolerance check in the callback function:
```
printf(""\ndeltaTime = %d\n"", deltaTime);
printf(""g_toleranceVal = %d\n"", g_toleranceVal);
printf(""currIntervalTime = %d\n"", currIntervalTime);
printf(""prevIntervalTime = %d\n"", prevIntervalTime);
printf(""endTime = %d sec, %d msec\n"", endTime.seconds, endTime.microsecs);
printf(""currTime = %d sec, %d msec\n"", currTime.seconds, currTime.microsecs);
```
failure result was seen due to unexpected first interval of 1056, where interval was set to 500000:
```
deltaTime = 0
g_toleranceVal = 25000
currIntervalTime = 0
prevIntervalTime = 0
endTime = 1577812468 sec, 179711 msec
currTime = 1577812468 sec, 179711 msec

deltaTime = 1056
g_toleranceVal = 25000
currIntervalTime = 1056
prevIntervalTime = 0
endTime = 1577812468 sec, 180767 msec
currTime = 1577812468 sec, 179711 msec

deltaTime = 498945
g_toleranceVal = 25000
currIntervalTime = 500001
prevIntervalTime = 1056
endTime = 1577812468 sec, 680768 msec
currTime = 1577812468 sec, 180767 msec

deltaTime = 12
g_toleranceVal = 25000
currIntervalTime = 499989
prevIntervalTime = 500001
endTime = 1577812469 sec, 180757 msec
currTime = 1577812468 sec, 680768 msec
```
**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/osal/issues/335
Integration Candidate 20191230,"**Describe the contribution**
1st merge: Fix #295, Fix #298, Fix #305, Fix #307, Fix #308,
Fix #313, Fix #314, Fix #316, Fix #321, Fix #323

2nd merge: Fix #297 

**Testing performed**
1. Checked out all IC 20191230 branches
1. Built and ran cFS unit tests and OSAL coverage (vxworks and shared)
   1. All passed (although osal_timer_UT occasionally still fails due to a test issue)
1. Make cmdUtils where cFS-GroundSystem expects it
   1. cd tools/cFS-GroundSystem/Subsystems/cmdUtil
   1. make
1. Started Ground system
   1. python3 GroundSystem.py
1. Enabled commands to 127.0.0.1
1. Confirmed telemetry packets received
1. Sent ES and TIME noop commands, confirmed noop message from cFS on Port 1
1. Sent ES power on reset and observed cFS exit

**Expected behavior changes**
See related pull requests

**System(s) tested on**
 - cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: ic-20191230 branches

**Additional context**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/334
bin-sem-flush-test reporting work incorrectly,"**Describe the bug**
There is an issue in bin-sem-flush-test.c.  Within the BinSemFlushCheck function - lines 229, 230, 242, and 243 contain the wrong variable name (task_1_work as opposed to task_2_work & task_3_work).  

**To Reproduce**
Run Test.

**Expected behavior**
Expect ""Task 2/3 work = %u"" to correspond with task_2/3_work variables.

**Code snips**
void BinSemFlushCheck(void)
{
    int32 status;

    /* At first, No task should have done any work yet (all blocked) */
    UtAssert_True(task_1_work == 0, ""Task 1 work = %u"",(unsigned int)task_1_work);
    UtAssert_True(task_2_work == 0, ""Task 2 work = %u"",(unsigned int)task_1_work);
    UtAssert_True(task_3_work == 0, ""Task 3 work = %u"",(unsigned int)task_1_work);

    status = OS_BinSemFlush(bin_sem_id);
    UtAssert_True(status == OS_SUCCESS, ""BinSem1 flush Rc=%d"", (int)status);

    /* After more delay the work done should be nonzero on all tasks */
    /* NOTE - There is a slight race condition here as the task could be blocked
     * by something else other than the bin sem.
     */
    OS_TaskDelay(4000);

    UtAssert_True(task_1_work != 0, ""Task 1 work = %u"",(unsigned int)task_1_work);
    UtAssert_True(task_2_work != 0, ""Task 2 work = %u"",(unsigned int)task_1_work);
    UtAssert_True(task_3_work != 0, ""Task 3 work = %u"",(unsigned int)task_1_work);

    UtAssert_True(task_1_failures == 0, ""Task 1 failures = %u"",(unsigned int)task_1_failures);
    UtAssert_True(task_2_failures == 0, ""Task 2 failures = %u"",(unsigned int)task_2_failures);
    UtAssert_True(task_3_failures == 0, ""Task 3 failures = %u"",(unsigned int)task_3_failures);

}

**System observed on:**
NA

**Additional context**
NA

**Reporter Info**
Dan Knutsen
NASA Goddard Space Flight Center
",enhancement,https://github.com/nasa/osal/issues/347
"lgtm issues for os-impl-posix-files.c, osapi-filesys.c","**Is your feature request related to a problem? Please describe.**
os-impl-posix-files.c

```
line 240:

if ( chmod(local_path, st.st_mode) < 0 )
--
  | The filename being operated upon was previously checked, but the underlying file may have been changed since then.
```


osapi-filesys.c

```
line 330:
OS_FileSysStopVolume_Impl(local_id);
--
  | This expression has no effect (because OS_FileSysStopVolume_Impl has no external side effects).
```

**Requester Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/osal/issues/333
"Fix #329, resolve osfileapi.c lgtm issue","**Describe the contribution**
Fixes #329
Resolve osfileapi.c lgtm issue. 

**Testing performed**
Steps taken to test the contribution:
1. Build dummy repository against lgtm 
2. Verify it fixes. 

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
- execl() will only execute for /bin/sh. 

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
- CFE 6.6


**Contributor Info**
Anh Van, NASA Goddard

",wontfix,https://github.com/nasa/osal/pull/332
Assert return codes specified in API in functional tests,"I noticed that osal-core-test.c only tests if the function returns OS_SUCCESS or does NOT return OS_SUCCESS.  It does not actually test that the return code is correct.  For example, the test to ensure that the OSAL does not create a queue with a name that already exists does not actually test for OS_ERR_NAME_TAKEN.  It merely passes if the return is not OS_SUCCESS.  A quick spot check indicates this design pattern is systemic.

These unit tests were used to certify (per NPR7150A) the ARINC 653 version of CFS.  This requires requirements have tracing back to tests.  Testing the actual expected return code is a better pattern, but is required if there is an actual requirement defining the return codes.
","enhancement, unit-test, community",https://github.com/nasa/osal/issues/331
"fix #328, lgtm warning","**Describe the contribution**
fix lgtm warning. 

**Testing performed**
Steps taken to test the contribution:
1. Build against dummy repo using lgtm.
2. Verify warning is fixed
3. Cppcheck.
4. Verify no warning 
5. Build 
6. Verify still build.

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
-  CFE 6.6

**Contributor Info**
Anh Van, NASA Goddard.
",CCB:Approved,https://github.com/nasa/osal/pull/330
lgtm warning - misc. ,"**Describe the bug**
reference issues #320 

posix/osfileapi.c

```
line 186:
execl(shell, ""sh"", ""-c"", Cmd, NULL); /* does not return if successful */
--
  | The value of this argument may come from call to getenv and is being passed to execl
```


**Reporter Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/osal/issues/329
osal lgtm warning ,"**Describe the bug**
Reference issue #320.

os-impl-bsd-sockets.c

```
line 217, 568:
if (addrlen == 0 \|\| addrlen > OS_SOCKADDR_MAX_LEN)
--
  | Comparison is always false because addrlen <= 28.

line 574:
Accessor->sockaddr.sa_family = sa_family;
--
  | The variable sa_family may not be initialized here.
```

shared/osapi-idmap.c
```

line 529:
return_code = OS_ObjectIdMap(idtype, idvalue, &obj->active_id);
--
  | The variable obj may not be initialized here.

line: 545
*array_index = local_id;
--
  | The variable local_id may not be initialized here.

line 549:
*record = obj;
--
  | The variable obj may not be initialized here.
```

shared/osapi-sockets.c

```
return_code = OS_SocketAccept_Impl(local_id, conn_id, Addr, timeout);
--
  | The variable conn_id may not be initialized here.
```

shared/osapi-time.c

```
line 466:
OS_ObjectIdRefcountDecr(timebase);
--
  | The variable timebase may not be initialized here.
```

os-posix.h

```
This header file should contain a header guard to prevent multiple inclusion.
```

**Reporter Info**
Anh Van, NASA Goddard. 
",enhancement,https://github.com/nasa/osal/issues/328
Recommended lgtm osal issues,"**Is your feature request related to a problem? Please describe.**
Recommended osal issues:

osapi-os-core.h
```
line 50:
/* #define for enabling floating point operations on a task*/
--
  | This comment appears to contain commented-out code
```

osapi-module.c
```
line 319:
/* module_prop->creator = record->creator; */
--
  | This comment appears to contain commented-out code


```

shared/os-impl.h
```
typedef enum
--
367 | {
  | In an enumerator list, the = construct should not be used to explicitly initialize members other than the first, unless all items are explicitly initialized.
368 | OS_FILE_FLAG_NONE,
369 | OS_FILE_FLAG_CREATE = 0x01,
```


posix/osnetwork.c
```
/*
--
25 | * FIXME: this belongs in the osconfig.h file, really.
26 | */
  | FIXME comment: this belongs in the osconfig.h file, really.
27 | #define OS_NETWORK_SUPPORTS_IPV6
```

shared/osapi-select.c
```
/*
--
85 | * FIXME:
86 | * This does not currently increment any refcounts.
87 | * That means a file/socket can be closed while actively inside a
88 | * OS_SelectMultiple() call in another thread.
89 | */
  | FIXME comment
```
**Requester Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/osal/issues/327
"fix #320, fix lgtm osal issue","**Describe the contribution**
Resolve lgtm issue

**Testing performed**
Steps taken to test the contribution:
1. Build dummy repository against lgtm 

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
-  CFE 6.6

**Contributor Info**
Anh Van, NASA Goddard",duplicate,https://github.com/nasa/osal/pull/326
Use alternate setup function for Tests,"**Describe the contribution**

Fix #294

Implements a more layered architecture for test code. Rather than having each test provide `OS_Application_Startup()` directly, now the UT assert library provides `OS_Application_Startup()` in common code.

The actual test setup is now done by a function called UtTest_Setup().

This also introduces a new function `OS_Application_Run()` to implement the test routine.  This replaces the existing `UtTest_Run()` function.  

Note - by using a more generic name the `OS_Application_Run()` routine can apply to both normal applications and test applications.  This is a prerequisite to a future removal of the separate UT BSP.

This allows for better layering where UT-Assert provides the notion of an ""OSAL application"".  This is a step toward simplifying the BSP architecture, eventually combining the normal application
and unit test BSP code into a single BSP.

**Testing performed**
Build with default config and ENABLE_UNIT_TESTS=TRUE for all three supported platforms (pc-linux, pc-rtems, and mcp750-vxworks).  

Confirm normal operation of CFE core (no change) and all unit tests run normally.

**Expected behavior changes**
No changes to behavior.

**System(s) tested on:**
- Ubuntu 18.04 LTS 64-bit (via SIMULATION=native)

**Additional context**
Needs to be merged in coordination with issue in nasa/cfe#435

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/osal/pull/325
Avoid infinite sem-speed-test,"**Describe the contribution**

Fix #323

1. Add a hard limit to the execution (work) counter for the sem-speed-test worker threads.  With this they will self-exit eventually even if the root task never gets CPU time to stop them.

2. Set the priority of the worker tasks to be logically lower, so it is less likely to preempt the main task.

Note that the logical priority is inverted from the numeric value.

**Testing performed**
Execute unit tests on RTEMS and native (posix/x86-64) and confirm successful operation of the sem-speed-test on both platforms.

Example output from running in RTEMS:

```
[BEGIN] 01 SemSpeedTest
[ PASS] 01.001 sem-speed-test.c:163 - Sem 1 create Id=196609 Rc=0
[ PASS] 01.002 sem-speed-test.c:165 - Sem 2 create Id=196610 Rc=0
[ PASS] 01.003 sem-speed-test.c:171 - Task 1 create Id=65537 Rc=0
[ PASS] 01.004 sem-speed-test.c:174 - Task 2 create Id=65538 Rc=0
Starting task 1
Starting task 2
[ PASS] 01.005 sem-speed-test.c:198 - Task 1 delete Rc=0
[ PASS] 01.006 sem-speed-test.c:201 - Task 2 delete Rc=0
[ PASS] 01.007 sem-speed-test.c:204 - Sem 1 delete Rc=0
[ PASS] 01.008 sem-speed-test.c:206 - Sem 2 delete Rc=0
[ PASS] 01.009 sem-speed-test.c:210 - Task 1 work counter = 983799
[ PASS] 01.010 sem-speed-test.c:211 - Task 2 work counter = 983798
[  END] 01 SemSpeedTest         TOTAL::10    PASS::10    FAIL::0      MIR::0      TSF::0      N/A::0   
```

**Expected behavior changes**
The test completes normally and does not run infinitely.

**System(s) tested on:**
Ubuntu 18.04 LTS 64-bit (native, build host)
RTEMS 4.11 on i686 (QEMU)

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/osal/pull/324
sem-speed-test can run infinitely on some platforms,"**Describe the bug**
In the sem-speed-test, the main thread stops the test by doing a task delay and then deleting the worker tasks. 

When running on a hard real time kernel and a single processor system, if the worker threads are a higher priority than the main thread, then the main thread never gets CPU time to stop the test and it just runs infinitely.

**To Reproduce**
Run the test on a single-processor system such as VxWorks or RTEMS where the originating (shell) task is a (logically) lower priority than 50, which is the priority given to the worker tasks it creates.  The test will never exit because the root task never gets CPU time again to cancel the worker tasks.

**Expected behavior**
The test should never run infinitely, regardless of (mis-)configuration.

**System observed on:**
RTEMS 4.11 on i686 (QEMU)

**Additional context**
The worker tasks should employ some type of hard limit so they do not run infinitely even if the priority is higher than the root task.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/323
Update OS_VxWorks_SigWait test case,"**Describe the contribution**

Fix #321

This is related to the change for #271, where the return value of this function depends on the configured timer interval.  The coverage test case for this was not updated in the original change.

**Testing performed**
Build and execute OSAL coverage tests

**Expected behavior changes**
Test case now passes, as:
```
[BEGIN] 03 OS_VxWorks_SigWait
[ PASS] 03.001 coveragetest-ostimer.c:166 - Osapi_Internal_CallSigWaitFunc(0) (1111111) == 1111111 (1111111)
[ PASS] 03.002 coveragetest-ostimer.c:168 - Osapi_Internal_CallSigWaitFunc(0) (2222222) == 2222222 (2222222)
[ PASS] 03.003 coveragetest-ostimer.c:170 - Osapi_Internal_CallSigWaitFunc(0) (2222222) == 2222222 (2222222)
[  END] 03 OS_VxWorks_SigWait   TOTAL::3     PASS::3     FAIL::0      MIR::0      TSF::0      N/A::0   
```

FSW code is not changed.

**System(s) tested on:**
Ubuntu 18.04 LTS, 64 bit

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/osal/pull/322
Coverage test failure in VxWorks,"**Describe the bug**
The coverage test cases for `OS_VxWorks_Sigwait` are failing:
```
[BEGIN] 03 OS_VxWorks_SigWait
[ FAIL] 03.001 coveragetest-ostimer.c:160 - Osapi_Internal_CallSigWaitFunc(0) (0) == 8888 (8888)
[ FAIL] 03.002 coveragetest-ostimer.c:162 - Osapi_Internal_CallSigWaitFunc(0) (0) == 5555 (5555)
[ FAIL] 03.003 coveragetest-ostimer.c:164 - Osapi_Internal_CallSigWaitFunc(0) (0) == 5555 (5555)
[  END] 03 OS_VxWorks_SigWait   TOTAL::3     PASS::0     FAIL::3      MIR::0      TSF::0      N/A::0   
```

**To Reproduce**
Build OSAL coverage tests and execute

**Expected behavior**
All tests should pass

**System observed on:**
Ubuntu 18.04 LTS 64-bit

**Additional context**
This was probably some fallout related to the VxWorks timer fixups that were done recently (#271, #274) but never noticed because the OSAL coverage test is still separate (that aspect is also being addressed).

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.",enhancement,https://github.com/nasa/osal/issues/321
lgtm issue,"**Describe the bug**

os-impl-bsd-sockets.c
```
line 217, 568:
if (addrlen == 0 \|\| addrlen > OS_SOCKADDR_MAX_LEN)
--
  | Comparison is always false because addrlen <= 28.

line 574:
Accessor->sockaddr.sa_family = sa_family;
--
  | The variable sa_family may not be initialized here.
```

os-impl-posix-files.c
```
line 240:

if ( chmod(local_path, st.st_mode) < 0 )
--
  | The filename being operated upon was previously checked, but the underlying file may have been changed since then.

```

posix/osfileapi.c
```
line 186:
execl(shell, ""sh"", ""-c"", Cmd, NULL); /* does not return if successful */
--
  | The value of this argument may come from call to getenv and is being passed to execl

```

shared/osapi-idmap.c
```
line 529:
return_code = OS_ObjectIdMap(idtype, idvalue, &obj->active_id);
--
  | The variable obj may not be initialized here.

line: 545
*array_index = local_id;
--
  | The variable local_id may not be initialized here.

line 549:
*record = obj;
--
  | The variable obj may not be initialized here.

```

shared/osapi-sockets.c
```
return_code = OS_SocketAccept_Impl(local_id, conn_id, Addr, timeout);
--
  | The variable conn_id may not be initialized here.
```

shared/osapi-time.c
```
line 466:
OS_ObjectIdRefcountDecr(timebase);
--
  | The variable timebase may not be initialized here.
```

os-posix.h
```
This header file should contain a header guard to prevent multiple inclusion.
```

osapi-filesys.c
```
line 330:
OS_FileSysStopVolume_Impl(local_id);
--
  | This expression has no effect (because OS_FileSysStopVolume_Impl has no external side effects).

```



**To Reproduce**
Steps to reproduce the behavior:
1. Run against lgtm

**Reporter Info**
Anh Van, NASA Goddard
",duplicate,https://github.com/nasa/osal/issues/320
Refactor OSAL C library stubs,"**Describe the contribution**

Fix #297

Rather than utilizing a separate ""stub-map-to-real.h"" file that would need to be injected into the build of the unit under test, this builds the mappings into the mapping into the override files themselves.

The stub functions are then moved into a separate header under a unique name with an OCS_ prefix.

This introduces a number of new files, as what previously required a single header now requires two, but it it eliminates the separate map file.

**Testing performed**
Build coverage test before and after change, confirm no changes to test operation or result.

**Expected behavior changes**
None, just a structural change to the source file layout/patterns

**System(s) tested on:**
- Ubuntu 18.04 LTS, 64 bit

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/osal/pull/319
Use UT assert for OSAL unit tests,"**Describe the contribution**

Fix #313

Refactor the ""unit-tests"" (extended/functional tests) for OSAL to use the UT assert library for test case reporting and platform support.

Reduce or eliminate the use of macros for platform abstraction wherever possible.  This removes most platform-specific logic from the test cases, leaving that to the OSAL/BSP abstraction.

**Testing performed**
Build unit tests for all three supported test platforms and confirm operation (POSIX, VxWorks, RTEMS).

**Expected behavior changes**
Tests were previously only being built/executed on POSIX.  Now the tests are built on all OSAL platforms, using the UT assert library.

Output logfiles are in provided by UT assert and are therefore now in the same UT assert style.  This test set no longer has a different set of output files.


**System(s) tested on:**
 - Ubuntu 18.04 LTS 64-bit (native/posix)
 - RTEMS 4.11 on i686 (using QEMU target)
 - VxWorks 6.9 on PPC/MCP750 

**Additional context**
This should be pulled in parallel with #317 to ensure that the POSIX platform continues to  pass all tests.  Note that the relevant tests (FPU, interrupt) were being skipped on POSIX., but with this change all tests are executed on all platforms.

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/osal/pull/318
Exception/Interrupt API updates,"**Describe the contribution**
Fix #316

- Ensure the FPU functions that are actually not implemented in RTEMS/POSIX all return OS_ERR_NOT_IMPLEMENTED, not OS_SUCCESS.
- The RTEMS IntEnable/Disable API should not be a duplicate of the IntLock/Unlock API, as the semantics are slightly different.
  The Enable/Disable API should return OS_ERR_NOT_IMPLEMENTED.
- The OS_FPUExcGetMask API should confirm that the output buffer is not NULL.

**Testing performed**
Sanity check on basic CFE operation on native/simulation build - no changes to FSW behavior.

Modified APIs are exercised in the OSAL unit tests.  Unit tests executed on RTEMS, POSIX (native), and VxWorks in conjunction with changeset for #313.

**Expected behavior changes**
No change to FSW.
Unit tests related to these particular API calls now all PASS or are skipped appropriately for the ones that are actually not implemented.

**System(s) tested on:**
- Ubuntu 18.04 LTS 64-bit (native/posix)
- RTEMS 4.11 on i686/pc (QEMU-emulated target)
- VxWorks 6.9 on PPC/MCP750

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/osal/pull/317
Exception/Interrupt API issues in OSAL,"**Describe the bug**
When running unit tests on the OSAL for the VxWorks, POSIX, and RTEMS environments, it revealed a few minor issues on the implementation side that should be addressed.  These are all in the interrupt/fpu/exception API areas for which the CFE FSW does not really rely upon.

1. For POSIX and RTEMS, the FPU exception APIs should all return `OS_ERR_NOT_IMPLEMENTED`, because these are in fact not implemented.  Returning `OS_SUCCESS`, as some did, implies that the behavior took effect when it did not (this matters to UT).  These are:
-  `OS_FPUExcSetMask_Impl()`
- `OS_FPUExcGetMask_Impl()` 
- `OS_FPUExcEnable_Impl()`
- `OS_FPUExcDisable_Impl()`

2. RTEMS does not provide a direct equivalent for the OS_IntEnable/OS_IntDisable API like VxWorks has.  The implementation had been using rtems_intterupt_enable/disable for this, but the semantics of those calls are different (they are more appropriate for OS_IntLock/OS_IntUnlock).  The Enable/Disable implementation should just return `OS_ERR_NOT_IMPLEMENTED`.

3. The RTEMS `OS_IntLock_Impl`/`OS_IntUnlock_Impl` implementation should use the ""local"" variant of the RTEMS interrupt enable/disable function.  This is documented as being identical on single-processor machines but only the local variant is applicable to multi-processor machines.

4. The `OS_FPUExcGetMask()` API accepts a pointer as an output buffer, so to be consistent with all other API calls that accept a pointer, it should check for NULL and return `OS_INVALID_POINTER` in that case.

**To Reproduce**
Execute the OSAL unit tests (including changeset for #313 to enable full testing) and some failures are reported due tot his.

**Expected behavior**
All unit tests should pass.

**System observed on:**
- Ubuntu 18.04 LTS 64-bit (native/posix)
- RTEMS 4.11 on i686/pc (QEMU-emulated target)
- VxWorks 6.9 on PPC/MCP750

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/316
"issue #314, adding cppcheck to bsp and os","**Describe the contribution**
Adding travis.yml file for cppcheck on flight code. src/bsp and src/os

**Contributor Info**
Anh Van, NASA Goddard

",CCB:Approved,https://github.com/nasa/osal/pull/315
Add cppcheck to bsp and os,"**Is your feature request related to a problem? Please describe.**
Add cppcheck to osal/src/bsp and osal/src/os

**Requester Info**
Anh Van, NASA Goddard
","enhancement, build-system",https://github.com/nasa/osal/issues/314
"Code in ""unit-test"" should use UT Assert","**Describe the bug**
The tests in the ""unit test"" directory use an entirely different result reporting mechanism.  Although they do currently link with UT assert, they keep a local record of test cases and do not use any of the UT assert functions.

This is a maintenance issue.  The code makes extensive use of macros which makes it difficult to understand and also duplicates much of the logic that UT assert already has.  Furthermore, the tests do not run on all OSAL platforms (e.g. RTEMS) because the macros are incomplete, even though UT assert does support this platform.

**To Reproduce**
Build with ENABLE_UNIT_TESTS=TRUE and run all tests.  The osal ""unit-tests"" produce entirely different log files than the rest of the tests.

**Expected behavior**
The osal ""unit-tests"" should be more consistent in behavior and log file format with all the other tests.

**System observed on:**
 - Ubuntu 18.04 LTS 64-bit

**Additional context**
This is becoming more of an issue due to a parallel effort to avoid clobbering `CMAKE_C_FLAGS` (#312).  But this unit test build currently relies on `CMAKE_C_FLAGS` and OS-specific definitions (e.g. `_LINUX_OS_`, `_VXWORKS_OS_`, etc) to pick the right macros to use.  So this breaks the unit test if not setting `CMAKE_C_FLAGS` anymore.

Although it could probably be patched up again with some more hacks, it is probably worth some extra effort to just clean this up properly so it stops being a perpetual issue.

Since most things are macro based already, it is likely that simply changing the macro definitions to direct the output to UT assert instead of the local structure is probably sufficient.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/313
OSAL CMake script should not force/overwrite CMAKE_C_FLAGS,"**Describe the bug**
The OSAL build script currently configures several compiler flags by directly setting the `CMAKE_C_FLAGS` variable, and also setting it differently for unit test vs. FSW code.

This was originally done for compatibility with very old CMake versions but this is no longer necessary, as any reasonable CMake version (including v2.8.12 distributed in RHEL/Centos6+) have better commands to deal with target-specific flags (e.g. target_compile_definitions, etc).

Overriding this variable is not ideal as it is expected to retain its value from the parent.

**To Reproduce**
Build OSAL using the current script and ENABLE_UNIT_TESTS=TRUE.  CMAKE_C_FLAGS is forcibly reset twice during the CMakeLists.txt evaluation.

**Expected behavior**
`CMAKE_C_FLAGS` should not be modified by the OSAL build script.  It should preserve whatever value the parent had set (if any) and use the preferred commands (e.g. target_compile_options, etc) to manage the different flags required for UT and normal FSW code.

**System observed on:**
Ubuntu 18.04 LTS, 64 bit

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","bug, build-system",https://github.com/nasa/osal/issues/312
"issue #307, Remove unsupported BSPs","**Describe the contribution**
Remove unsupported BSP and change genppc-vxworks6.4→ mcp750-vxworks 

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04

**Contributor Info**
Anh Van, NASA Goddard

",CCB:Approved,https://github.com/nasa/osal/pull/311
"issue #308, Resolve cpp warning in os dir.","**Describe the contribution**
Resolve cppcheck for os dir.  Possible cppcheck bug for structure member - suppress. 

**Testing performed**
Steps taken to test the contribution:
1. make prep, make, make install
2. run 

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
-  CFE 6.6

**Contributor Info**
Anh Van, NASA Goddard

",CCB:Approved,https://github.com/nasa/osal/pull/310
cppcheck test dir. ,"**Is your feature request related to a problem? Please describe.**
From issue #303 


```
[osal/src/tests/mutex-test/mutex-test.c:46] -> [osal/src/tests/mutex-test/mutex-test.c:47]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/tests/mutex-test/mutex-test.c:98] -> [osal/src/tests/mutex-test/mutex-test.c:100]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/tests/mutex-test/mutex-test.c:153] -> [osal/src/tests/mutex-test/mutex-test.c:154]: (style) Variable 'status' is reassigned a value before the old one has been used.
```


**Requester Info**
Anh Van, NASA Goddard
",wontfix,https://github.com/nasa/osal/issues/309
Cppcheck for os dir. ,"**Is your feature request related to a problem? Please describe.**
From issue #303 

```
[osal/src/os/portable/os-impl-posix-dl.c:54]: (style) struct member 'OS_impl_module_internal_record_t::dl_handle' is never used.
[osal/src/os/posix/os-posix.h:110] -> [osal/src/os/posix/osapi.c:737]: (style, inconclusive) Function 'OS_Posix_InternalTaskCreate_Impl' argument 1 names different: declaration 'thr' definition 'pthr'.
[osal/src/os/posix/os-posix.h:110] -> [osal/src/os/posix/osapi.c:737]: (style, inconclusive) Function 'OS_Posix_InternalTaskCreate_Impl' argument 4 names different: declaration 'Entry' definition 'entry'.
[osal/src/os/posix/osapi.c:163] -> [osal/src/os/posix/osapi.c:2264]: (style, inconclusive) Function 'OS_CompAbsDelayTime' argument 1 names different: declaration 'milli_second' definition 'msecs'.
[osal/src/os/rtems/osloader.c:43]: (style) struct member 'OS_impl_module_internal_record_t::dl_handle' is never used.
```

**Requester Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/osal/issues/308
Remove unsupported/untested BSPs,"**Is your feature request related to a problem? Please describe.**
Old BSPs are not within scope of the cFS framework and not tested

**Describe the solution you'd like**
Remove sis-rtems, mcf5235-rtems, and sparc-vxworks6.7

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, good first issue",https://github.com/nasa/osal/issues/307
"issue #305, Resolve cppcheck warning ut_stubs","**Describe the contribution**
resolve cppcheck warning. 

**Testing performed**
Steps taken to test the contribution:
1. make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
2. make
3. make install
4. make test
5. Verify passing unit-test
6. cppcheck --force --inline-suppr --std=c99 --language=c --error-exitcode=1 enable=warning,performance,portability,style --suppress=variableScope --inconclusive osal/src 2>osal.txt

**System(s) tested on:**
 - Hardware
 - OS: Ubuntu 18.04
 - osal 5.03

**Contributor Info**
Anh Van, NASA Goddard
",CCB:Approved,https://github.com/nasa/osal/pull/306
cppcheck warning ut-stubs,"**Is your feature request related to a problem? Please describe.**
cppcheck warning from #301 

```
[osal/src/ut-stubs/osapi-utstub-file.c:108] -> [osal/src/ut-stubs/osapi-utstub-file.c:110]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-file.c:147] -> [osal/src/ut-stubs/osapi-utstub-file.c:149]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-mutex.c:127] -> [osal/src/ut-stubs/osapi-utstub-mutex.c:129]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-mutex.c:156] -> [osal/src/ut-stubs/osapi-utstub-mutex.c:158]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-queue.c:102] -> [osal/src/ut-stubs/osapi-utstub-queue.c:104]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-queue.c:145] -> [osal/src/ut-stubs/osapi-utstub-queue.c:147]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-queue.c:186] -> [osal/src/ut-stubs/osapi-utstub-queue.c:188]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-task.c:157] -> [osal/src/ut-stubs/osapi-utstub-task.c:159]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-task.c:182] -> [osal/src/ut-stubs/osapi-utstub-task.c:184]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/utstub-helpers.c:194]: (style) Variable 'InUse' is modified but its new value is never used.
```

**Describe the solution you'd like**
resolve cppcheck warning 

**Requester Info**
Anh Van, NASA Goddard",unit-test,https://github.com/nasa/osal/issues/305
cppcheck warning unit-test,"**Is your feature request related to a problem? Please describe.**
cppcheck warning from #301 

```
[osal/src/unit-tests/osfile-test/ut_osfile_test.c:62] -> [osal/src/unit-tests/osfile-test/ut_osfile_test.c:64]: (style) Variable 'res' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osfile-test/ut_osfile_test_arinc653.c:70] -> [osal/src/unit-tests/osfile-test/ut_osfile_test_arinc653.c:73]: (style) Variable 'res' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osloader-test/ut_module.c:5]: (style) Variable 'i' is assigned a value that is never used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:92]: (warning) %d in format string (no. 4) requires 'int' but the argument type is 'signed long'.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:92]: (warning) %d in format string (no. 6) requires 'int' but the argument type is 'unsigned int'.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:92]: (warning) %d in format string (no. 8) requires 'int' but the argument type is 'unsigned int'.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:105]: (warning) %d in format string (no. 4) requires 'int' but the argument type is 'signed long'.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:105]: (warning) %d in format string (no. 6) requires 'int' but the argument type is 'unsigned int'.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:105]: (warning) %d in format string (no. 8) requires 'int' but the argument type is 'unsigned int'.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:153] -> [osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:170]: (style) Variable 'test_int' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:154] -> [osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:171]: (style) Variable 'test_long' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:155] -> [osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:172]: (style) Variable 'test_unsigned' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:156] -> [osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:173]: (style) Variable 'test_hex' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:159] -> [osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:176]: (style) Variable 'test_char' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:170]: (style) Variable 'test_int' is assigned a value that is never used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:171]: (style) Variable 'test_long' is assigned a value that is never used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:172]: (style) Variable 'test_unsigned' is assigned a value that is never used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:173]: (style) Variable 'test_hex' is assigned a value that is never used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:176]: (style) Variable 'test_char' is assigned a value that is never used.
[osal/src/unit-tests/shared/ut_os_stubs.c:116] -> [osal/src/unit-tests/shared/ut_os_stubs.c:120]: (style) Variable 'apiInfo' is reassigned a value before the old one has been used.
[osal/src/unit-tests/shared/ut_os_stubs.h:171] -> [osal/src/unit-tests/shared/ut_os_stubs.c:159]: (style, inconclusive) Function 'UT_os_set_log_verbose' argument 1 names different: declaration 'verboseLevel' definition 'vLevel'.
```

**Describe the solution you'd like**
resolve cppcheck warning

**Requester Info**
Anh Van, NASA Goddard
",wontfix,https://github.com/nasa/osal/issues/304
cppcheck warning misc. dir.,"**Is your feature request related to a problem? Please describe.**
cppcheck warning from #301 

```
[osal/src/bsp/mcf5235-rtems/src/bsp_start.c:136] -> [osal/src/bsp/mcf5235-rtems/src/bsp_start.c:143]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/bsp/mcf5235-rtems/src/bsp_start.c:143] -> [osal/src/bsp/mcf5235-rtems/src/bsp_start.c:144]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/bsp/mcf5235-rtems/src/bsp_start.c:144] -> [osal/src/bsp/mcf5235-rtems/src/bsp_start.c:145]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/bsp/mcf5235-rtems/src/bsp_start.c:145]: (style) Variable 'status' is assigned a value that is never used.
[osal/src/bsp/sis-rtems/src/bsp_start.c:135] -> [osal/src/bsp/sis-rtems/src/bsp_start.c:142]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/bsp/sis-rtems/src/bsp_start.c:142] -> [osal/src/bsp/sis-rtems/src/bsp_start.c:143]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/bsp/sis-rtems/src/bsp_start.c:143] -> [osal/src/bsp/sis-rtems/src/bsp_start.c:144]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/bsp/sis-rtems/src/bsp_start.c:144]: (style) Variable 'status' is assigned a value that is never used.
[osal/src/bsp/sparc-vxworks6.7/ut-src/bsp_ut.c:50]: (style) Unused variable: mode
[osal/src/bsp/sparc-vxworks6.7/ut-src/bsp_ut.c:216]: (style) Variable 'status' is assigned a value that is never used.
[osal/src/os/portable/os-impl-posix-dl.c:54]: (style) struct member 'OS_impl_module_internal_record_t::dl_handle' is never used.
[osal/src/os/posix/os-posix.h:110] -> [osal/src/os/posix/osapi.c:737]: (style, inconclusive) Function 'OS_Posix_InternalTaskCreate_Impl' argument 1 names different: declaration 'thr' definition 'pthr'.
[osal/src/os/posix/os-posix.h:110] -> [osal/src/os/posix/osapi.c:737]: (style, inconclusive) Function 'OS_Posix_InternalTaskCreate_Impl' argument 4 names different: declaration 'Entry' definition 'entry'.
[osal/src/os/posix/osapi.c:163] -> [osal/src/os/posix/osapi.c:2264]: (style, inconclusive) Function 'OS_CompAbsDelayTime' argument 1 names different: declaration 'milli_second' definition 'msecs'.
[osal/src/os/rtems/osloader.c:43]: (style) struct member 'OS_impl_module_internal_record_t::dl_handle' is never used.
[osal/src/tests/mutex-test/mutex-test.c:46] -> [osal/src/tests/mutex-test/mutex-test.c:47]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/tests/mutex-test/mutex-test.c:98] -> [osal/src/tests/mutex-test/mutex-test.c:100]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/tests/mutex-test/mutex-test.c:153] -> [osal/src/tests/mutex-test/mutex-test.c:154]: (style) Variable 'status' is reassigned a value before the old one has been used.
```

**Describe the solution you'd like**
resolve cppcheck warning.

**Requester Info**
Anh Van, NASA Goddard
",duplicate,https://github.com/nasa/osal/issues/303
cppcheck warning coverage test,"**Is your feature request related to a problem? Please describe.**
Cppcheck warning from issue #301 for coverage-test. 

```
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:65] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:67]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:79] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:81]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:94] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:96]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:108] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:110]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:122] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:124]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:137] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:141]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:161] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:172]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:65] -> [osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:67]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:79] -> [osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:81]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:94] -> [osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:96]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:108] -> [osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:110]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:123] -> [osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:127]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:149] -> [osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:160]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-file.c:253] -> [osal/src/unit-test-coverage/shared/src/coveragetest-file.c:258]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-file.c:336] -> [osal/src/unit-test-coverage/shared/src/coveragetest-file.c:347]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:71] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:73]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:118] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:120]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:149] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:151]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:268] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:277]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:306] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:316]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:414] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:417]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:451] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:458]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:274] -> [osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:278]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:347] -> [osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:355]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:348] -> [osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:356]: (style) Variable 'expected' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:551] -> [osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:555]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:591] -> [osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:598]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-module.c:167]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.
[osal/src/unit-test-coverage/shared/src/coveragetest-module.c:102] -> [osal/src/unit-test-coverage/shared/src/coveragetest-module.c:104]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-module.c:116] -> [osal/src/unit-test-coverage/shared/src/coveragetest-module.c:120]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-module.c:160] -> [osal/src/unit-test-coverage/shared/src/coveragetest-module.c:164]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-module.c:189] -> [osal/src/unit-test-coverage/shared/src/coveragetest-module.c:191]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-module.c:219] -> [osal/src/unit-test-coverage/shared/src/coveragetest-module.c:231]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:64] -> [osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:66]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:78] -> [osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:80]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:93] -> [osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:95]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:107] -> [osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:111]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:132] -> [osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:143]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-network.c:39] -> [osal/src/unit-test-coverage/shared/src/coveragetest-network.c:41]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:70] -> [osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:72]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:84] -> [osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:88]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:111] -> [osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:114]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:133] -> [osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:137]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:160] -> [osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:171]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-select.c:69] -> [osal/src/unit-test-coverage/shared/src/coveragetest-select.c:73]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:98] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:103]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:141] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:152]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:199] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:210]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:252] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:261]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:300] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:309]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:339] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:343]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:371] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:382]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:409] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:412]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-task.c:122] -> [osal/src/unit-test-coverage/shared/src/coveragetest-task.c:126]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-task.c:216] -> [osal/src/unit-test-coverage/shared/src/coveragetest-task.c:220]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-task.c:240] -> [osal/src/unit-test-coverage/shared/src/coveragetest-task.c:253]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-task.c:278] -> [osal/src/unit-test-coverage/shared/src/coveragetest-task.c:281]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-time.c:237] -> [osal/src/unit-test-coverage/shared/src/coveragetest-time.c:241]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-time.c:273] -> [osal/src/unit-test-coverage/shared/src/coveragetest-time.c:287]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:147] -> [osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:151]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:180] -> [osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:194]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:248] -> [osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:267]: (style) Variable 'fake_record.active_id' is reassigned a value before the old one has been used.
```
**Describe the solution you'd like**
resolve cpp warning

**Requester Info**
Anh Van, NASA Goddard
",wontfix,https://github.com/nasa/osal/issues/302
stricter cppcheck ,"**Is your feature request related to a problem? Please describe.**
Resolve the follow cppcheck. 

```
[osal/src/bsp/mcf5235-rtems/src/bsp_start.c:136] -> [osal/src/bsp/mcf5235-rtems/src/bsp_start.c:143]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/bsp/mcf5235-rtems/src/bsp_start.c:143] -> [osal/src/bsp/mcf5235-rtems/src/bsp_start.c:144]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/bsp/mcf5235-rtems/src/bsp_start.c:144] -> [osal/src/bsp/mcf5235-rtems/src/bsp_start.c:145]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/bsp/mcf5235-rtems/src/bsp_start.c:145]: (style) Variable 'status' is assigned a value that is never used.
[osal/src/bsp/sis-rtems/src/bsp_start.c:135] -> [osal/src/bsp/sis-rtems/src/bsp_start.c:142]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/bsp/sis-rtems/src/bsp_start.c:142] -> [osal/src/bsp/sis-rtems/src/bsp_start.c:143]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/bsp/sis-rtems/src/bsp_start.c:143] -> [osal/src/bsp/sis-rtems/src/bsp_start.c:144]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/bsp/sis-rtems/src/bsp_start.c:144]: (style) Variable 'status' is assigned a value that is never used.
[osal/src/bsp/sparc-vxworks6.7/ut-src/bsp_ut.c:50]: (style) Unused variable: mode
[osal/src/bsp/sparc-vxworks6.7/ut-src/bsp_ut.c:216]: (style) Variable 'status' is assigned a value that is never used.
[osal/src/os/portable/os-impl-posix-dl.c:54]: (style) struct member 'OS_impl_module_internal_record_t::dl_handle' is never used.
[osal/src/os/posix/os-posix.h:110] -> [osal/src/os/posix/osapi.c:737]: (style, inconclusive) Function 'OS_Posix_InternalTaskCreate_Impl' argument 1 names different: declaration 'thr' definition 'pthr'.
[osal/src/os/posix/os-posix.h:110] -> [osal/src/os/posix/osapi.c:737]: (style, inconclusive) Function 'OS_Posix_InternalTaskCreate_Impl' argument 4 names different: declaration 'Entry' definition 'entry'.
[osal/src/os/posix/osapi.c:163] -> [osal/src/os/posix/osapi.c:2264]: (style, inconclusive) Function 'OS_CompAbsDelayTime' argument 1 names different: declaration 'milli_second' definition 'msecs'.
[osal/src/os/rtems/osloader.c:43]: (style) struct member 'OS_impl_module_internal_record_t::dl_handle' is never used.
[osal/src/tests/mutex-test/mutex-test.c:46] -> [osal/src/tests/mutex-test/mutex-test.c:47]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/tests/mutex-test/mutex-test.c:98] -> [osal/src/tests/mutex-test/mutex-test.c:100]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/tests/mutex-test/mutex-test.c:153] -> [osal/src/tests/mutex-test/mutex-test.c:154]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:65] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:67]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:79] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:81]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:94] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:96]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:108] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:110]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:122] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:124]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:137] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:141]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:161] -> [osal/src/unit-test-coverage/shared/src/coveragetest-binsem.c:172]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:65] -> [osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:67]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:79] -> [osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:81]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:94] -> [osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:96]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:108] -> [osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:110]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:123] -> [osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:127]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:149] -> [osal/src/unit-test-coverage/shared/src/coveragetest-countsem.c:160]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-file.c:253] -> [osal/src/unit-test-coverage/shared/src/coveragetest-file.c:258]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-file.c:336] -> [osal/src/unit-test-coverage/shared/src/coveragetest-file.c:347]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:71] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:73]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:118] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:120]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:149] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:151]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:268] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:277]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:306] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:316]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:414] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:417]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:451] -> [osal/src/unit-test-coverage/shared/src/coveragetest-filesys.c:458]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:274] -> [osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:278]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:347] -> [osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:355]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:348] -> [osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:356]: (style) Variable 'expected' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:551] -> [osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:555]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:591] -> [osal/src/unit-test-coverage/shared/src/coveragetest-idmap.c:598]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-module.c:167]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.
[osal/src/unit-test-coverage/shared/src/coveragetest-module.c:102] -> [osal/src/unit-test-coverage/shared/src/coveragetest-module.c:104]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-module.c:116] -> [osal/src/unit-test-coverage/shared/src/coveragetest-module.c:120]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-module.c:160] -> [osal/src/unit-test-coverage/shared/src/coveragetest-module.c:164]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-module.c:189] -> [osal/src/unit-test-coverage/shared/src/coveragetest-module.c:191]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-module.c:219] -> [osal/src/unit-test-coverage/shared/src/coveragetest-module.c:231]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:64] -> [osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:66]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:78] -> [osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:80]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:93] -> [osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:95]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:107] -> [osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:111]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:132] -> [osal/src/unit-test-coverage/shared/src/coveragetest-mutex.c:143]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-network.c:39] -> [osal/src/unit-test-coverage/shared/src/coveragetest-network.c:41]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:70] -> [osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:72]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:84] -> [osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:88]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:111] -> [osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:114]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:133] -> [osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:137]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:160] -> [osal/src/unit-test-coverage/shared/src/coveragetest-queue.c:171]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-select.c:69] -> [osal/src/unit-test-coverage/shared/src/coveragetest-select.c:73]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:98] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:103]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:141] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:152]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:199] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:210]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:252] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:261]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:300] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:309]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:339] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:343]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:371] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:382]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:409] -> [osal/src/unit-test-coverage/shared/src/coveragetest-sockets.c:412]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-task.c:122] -> [osal/src/unit-test-coverage/shared/src/coveragetest-task.c:126]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-task.c:216] -> [osal/src/unit-test-coverage/shared/src/coveragetest-task.c:220]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-task.c:240] -> [osal/src/unit-test-coverage/shared/src/coveragetest-task.c:253]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-task.c:278] -> [osal/src/unit-test-coverage/shared/src/coveragetest-task.c:281]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-time.c:237] -> [osal/src/unit-test-coverage/shared/src/coveragetest-time.c:241]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-time.c:273] -> [osal/src/unit-test-coverage/shared/src/coveragetest-time.c:287]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:147] -> [osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:151]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:180] -> [osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:194]: (style) Variable 'actual' is reassigned a value before the old one has been used.
[osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:248] -> [osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:267]: (style) Variable 'fake_record.active_id' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osfile-test/ut_osfile_test.c:62] -> [osal/src/unit-tests/osfile-test/ut_osfile_test.c:64]: (style) Variable 'res' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osfile-test/ut_osfile_test_arinc653.c:70] -> [osal/src/unit-tests/osfile-test/ut_osfile_test_arinc653.c:73]: (style) Variable 'res' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osloader-test/ut_module.c:5]: (style) Variable 'i' is assigned a value that is never used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:92]: (warning) %d in format string (no. 4) requires 'int' but the argument type is 'signed long'.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:92]: (warning) %d in format string (no. 6) requires 'int' but the argument type is 'unsigned int'.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:92]: (warning) %d in format string (no. 8) requires 'int' but the argument type is 'unsigned int'.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:105]: (warning) %d in format string (no. 4) requires 'int' but the argument type is 'signed long'.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:105]: (warning) %d in format string (no. 6) requires 'int' but the argument type is 'unsigned int'.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:105]: (warning) %d in format string (no. 8) requires 'int' but the argument type is 'unsigned int'.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:153] -> [osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:170]: (style) Variable 'test_int' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:154] -> [osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:171]: (style) Variable 'test_long' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:155] -> [osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:172]: (style) Variable 'test_unsigned' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:156] -> [osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:173]: (style) Variable 'test_hex' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:159] -> [osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:176]: (style) Variable 'test_char' is reassigned a value before the old one has been used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:170]: (style) Variable 'test_int' is assigned a value that is never used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:171]: (style) Variable 'test_long' is assigned a value that is never used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:172]: (style) Variable 'test_unsigned' is assigned a value that is never used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:173]: (style) Variable 'test_hex' is assigned a value that is never used.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:176]: (style) Variable 'test_char' is assigned a value that is never used.
[osal/src/unit-tests/shared/ut_os_stubs.c:116] -> [osal/src/unit-tests/shared/ut_os_stubs.c:120]: (style) Variable 'apiInfo' is reassigned a value before the old one has been used.
[osal/src/unit-tests/shared/ut_os_stubs.h:171] -> [osal/src/unit-tests/shared/ut_os_stubs.c:159]: (style, inconclusive) Function 'UT_os_set_log_verbose' argument 1 names different: declaration 'verboseLevel' definition 'vLevel'.
[osal/src/ut-stubs/osapi-utstub-file.c:108] -> [osal/src/ut-stubs/osapi-utstub-file.c:110]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-file.c:147] -> [osal/src/ut-stubs/osapi-utstub-file.c:149]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-mutex.c:127] -> [osal/src/ut-stubs/osapi-utstub-mutex.c:129]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-mutex.c:156] -> [osal/src/ut-stubs/osapi-utstub-mutex.c:158]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-queue.c:102] -> [osal/src/ut-stubs/osapi-utstub-queue.c:104]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-queue.c:145] -> [osal/src/ut-stubs/osapi-utstub-queue.c:147]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-queue.c:186] -> [osal/src/ut-stubs/osapi-utstub-queue.c:188]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-task.c:157] -> [osal/src/ut-stubs/osapi-utstub-task.c:159]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/osapi-utstub-task.c:182] -> [osal/src/ut-stubs/osapi-utstub-task.c:184]: (style) Variable 'status' is reassigned a value before the old one has been used.
[osal/src/ut-stubs/utstub-helpers.c:194]: (style) Variable 'InUse' is modified but its new value is never used.

```

**Describe the solution you'd like**
Resolve cppcheck warning

**Requester Info**
Anh Van, NASA Goddard
",duplicate,https://github.com/nasa/osal/issues/301
Cryptic failure when running CFS as non-root,"When running the CFS without elevated privileges, the output that indicates an os failure doesn't express errors with scheduler policy. The current output under these conditions is:
```
CFE_PSP: Default Reset Type = PO
CFE_PSP: Default Reset SubType = 1
CFE_PSP: Default CPU ID = 1
CFE_PSP: Default Spacecraft ID = 42
CFE_PSP: Default CPU Name: cpu1
CFE_PSP: Starting the cFE with a POWER ON reset.
CFE_PSP: OS_API_Init() failure
```
The origin of this issue comes from https://github.com/nasa/osal/blob/155e9ebcd6d1930890231a44237e6883d229d22c/src/os/posix/osapi.c#L692

A failure to set the schedule policy should probably have a special error message indicating both why it failed and the recommended course of action.",enhancement,https://github.com/nasa/osal/issues/300
Fix minor warnings in OSAL code,"**Describe the contribution**

Fix #298

Fix warnings that are triggered by compiling the OSAL coverage unit test with strict settings.

- The `OS_FPUExcAttachHandler()` function needs to be prototyped as accepting a function pointer (not `void*`)
- Const-Correctness on `OS_ModuleLoad_Impl()`
- Use `void*` instead of `char*` for buffer pointer as the specific type is not known
- Cast the function passed into `taskSpawn()` on VxWorks

**Testing performed**
Build code on all three supported OS's (POSIX, RTEMS, VxWorks) with full warnings and ENABLE_UNIT_TESTS=TRUE
Execute all unit tests and confirm passage
Execute cFE and confirm normal operation

**Expected behavior changes**
None.

**System(s) tested on:**
 - Ubuntu 18.04 LTS, 64-bit (native)
 - VxWorks 6.9 / MCP750 (GSFC build machine)
 - RTEMS 4.11 / i686 (running within QEMU)

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/osal/pull/299
Compiler warnings in OSAL,"**Describe the bug**
Some warnings still get triggered when building the coverage tests with high strictness flags, as they exercise some API calls that are not even used by the FSW code.  So even though the FSW itself builds clean, when the coverage test is added it is no longer clean due to these issues.

**To Reproduce**
Build OSAL coverage tests with warnings/strictness flags, at least:
   `-Wall -Werror -std=c99 -pedantic -Wstrict-prototypes -Wcast-align -Wwrite-strings`

**Expected behavior**
Should build warning free.

**System observed on:**
Ubuntu 18.04 LTS, 64 bit.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/298
Alternative approach to compile-time function substitutions for UT,"**Is your feature request related to a problem? Please describe.**
Currently, the OSAL coverage test overrides C library calls using a combination of a single ""override"" header file that correlates with the C library header file of the same name.  This file declares stub versions of the same functions but with an `OCS_` prefix.  

This is combined with a ""stub-map-to-real.h"" header that uses `#define` statements to divert the original calls to the substitute (OCS) version at compile time.

The C library calls need to be stubbed out in this manner, because they cannot be done at link time (as the UT still needs to link with the real C library, unlike higher-level libraries).

**Describe the solution you'd like**
Put the `#define` statements in the substitute header itself, rather than in a local map file, and move the `OCS_` prototypes and declarations to a new, separate header file.  

**Describe alternatives you've considered**
The existing method of using a separate map file to provide the substitutions, but this complicates the build of the source units under test as this file must be explicitly included somehow.

**Additional context**
The change alleviates the need to inject the `stup-map-to-real.h` file as part of the  compilation of the source unit under test, as it gets the overrides implicitly though the include path instead, so it simplifies the build for UT that needs this feature.

The trade-off is that it requires a _pair_ of override headers for each real header being overridden, i.e. one for the `OCS_` replacements and one for the actual `#define` statements to do the mapping.  So for the OSAL coverage test, which override headers for about 80 different system headers, this adds quite a few files.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/297
Add alignment wrapper to OS_SockAddr_t,"**Describe the contribution**

Fix #295 

Add a union wrapper for the abstract data field such that it will be aligned for 32 bit integer values and/or pointers, whichever is greater.

This removes cast alignment warnings in this code with compiling on CPU architectures with strict alignment requirements.


**Testing performed**
Build code with full warnings (including -Wcast-align) on both native (x86-64) and MIPS32

Execute CFE on native (x86-64) (with CI_LAB/TO_LAB that use OSAL-provided socket abstraction), confirm no changes in behavior.

**Expected behavior changes**
No compiler warning.  No changes to runtime behavior.

**System(s) tested on:**
Linux MIPS 32 bit (build)
Ubuntu 18.04 LTS, 64 bit (build + run)

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/osal/pull/296
OS_SockAddr_t alignment issue on some architectures,"**Describe the bug**
On some CPU architectures that have strict alignment requirements, the OS socket address storage buffer triggers a warning/error about casts that increase alignment.  For example:

```
os-impl-bsd-sockets.c:200:9: error: cast increases required alignment of target type [-Werror=cast-align]
    sa = (const struct sockaddr *)Addr->AddrData;
```

**To Reproduce**
Build on an architecture that has strict alignment requirements (e.g. SPARC, MIPS, etc)

**Expected behavior**
Should build cleanly, no warnings.

**System observed on:**
 - MIPS Linux (QEMU)

**Additional context**
Not likely to be a ""real"" alignment issue as this specific instance follows a uint32 value, so it will already have 32 bit alignment already.  Adding a union wrapper will squelch the warning though.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/295
Alternative entry point for UT-Assert based test applications,"**Describe the bug**
Applications which utilize the UT Assert library to do testing (either functional or coverage) share the same entry point with ""normal"" OSAL applications, specifically the  `OS_Application_Startup` function.

For testing, this is not ideal as there is some extra setup/teardown when using UT Assert.  This prevents using the OSAL-provided BSP directly and necessitates an alternative BSP that includes the extra setup/teardown.

If the UT Assert based applications used a differently-named entry point, this could be properly layered and some duplicate logic in the OSAL BSPs can then be removed.

**To Reproduce**
Build with ENABLE_UNIT_TESTS=TRUE, and observe that the system builds a ut-bsp in addition to the normal OSAL BSP.  On pc-linux for instance, both of this libraries include a `main()` function.  The difference is that the ut-bsp includes extra UT Assert setup/teardown logic before and after the call to OS_Application_Startup().  It also duplicates the `OS_VolumeTable` object.

**Expected behavior**
The `main()` routine and `OS_VolumeTable` should _not_ be duplicated.  Rather, the UT Assert setup/teardown should be an extension layer to the normal BSP.

**System observed on:**
Ubuntu 18.04 LTS, 64 Bit

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/osal/issues/294
Expand resource object query options  ,"While integrating File Manager app 2.5.2 with cFE 6.7.1 (OSAL 5.0.1) I ran into an issue. FM has a
command that allows users to receive a telemetry packt listing all of the open files. In order to do this FM needs to be able to query OSAL's file stream resource objects. The current implementation only allows a creator to query all of the resources objects by using OS_ForEachObject(). I think having a more general query feature would be helpful. I added a new function OS_QueryObjectType() that allows anyone (not restricted to the creator) to query a resource type. The specific OSAL changes are below followed by the FM code that uses the function. These changes were made for OpenStaKit 2.1 that can be found at https://github.com/OpenSatKit/OpenSatKit.


## osapi-os-core.h:

/* 
** Typedef for object query OSAL callback functions. A query does not
** have to be performed by  the object creator. All fields of the 
** query_record are completed.
**
** This may be used by multiple APIs
*/

typedef struct
{
   const char *name_entry;
   uint32     creator;
   uint16     refcount;
} OS_query_record_t;

typedef void (*OS_ObjQueryCallback_t)(OS_query_record_t *query_rec, void *callback_arg); //dcm - Added for OSK

/*-------------------------------------------------------------------------------------*/
/**
 * @brief Query an object resource type maintained by the OSAL  
 *
 * User supplied callback is called for all active resources of a particular type
 * regardless of whether the caller created the object.
 *
 */
uint32 OS_QueryObjectType (uint32 obj_type, OS_ObjQueryCallback_t callback_ptr, OS_query_record_t *query_rec, void *callback_arg);  // dcm - Added for OSK


## osapi-idmap.c:

/*----------------------------------------------------------------
 *
 * Function: OS_QueryObjectType
 *
 * Purpose: Implemented per public OSAL API
 *          See description in API and header file for detail
 *
 *-----------------------------------------------------------------*/
uint32 OS_QueryObjectType (uint32 obj_type, OS_ObjQueryCallback_t callback_ptr, OS_query_record_t *query_rec, void *callback_arg)
{

    uint32 obj_index;
    uint32 obj_max;
    uint32 obj_id;
    uint32 active_obj_cnt = 0;
    OS_common_record_t  *obj_rec;
    
    obj_max = OS_GetMaxForObjectType(obj_type);
    if (obj_max > 0)
    {
        OS_Lock_Global_Impl(obj_type);
        obj_index = OS_GetBaseForObjectType(obj_type);
        while (obj_max > 0)
        {
            obj_rec = &OS_common_table[obj_index];
            obj_id = obj_rec->active_id;
            if (obj_id != 0) 
            {

                query_rec->name_entry = obj_rec->name_entry;
                query_rec->creator    = obj_rec->creator;
                query_rec->refcount   = obj_rec->refcount;
                
                /*
                 * Handle the object - Note that we must UN-lock before callback.
                 * The callback function might lock again in a different manner.
                 */
                 OS_Unlock_Global_Impl(obj_type);
                 (*callback_ptr)(query_rec, callback_arg);
                 OS_Lock_Global_Impl(obj_type);
                 
                 ++active_obj_cnt;

            }
            ++obj_index;
            --obj_max;
        }
        OS_Unlock_Global_Impl(obj_type);
    }

   return active_obj_cnt;

} /* End OS_QueryObjectType() */



## fm_cmd_utils.c:

static uint32 open_file_cnt = 0;
static void LoadOpenFileData(OS_query_record_t *query_rec, void *callback_arg)
{

    FM_OpenFilesEntry_t *OpenFilesData = (FM_OpenFilesEntry_t *)callback_arg;
    CFE_ES_TaskInfo_t   TaskInfo;
 
    if (OpenFilesData != (FM_OpenFilesEntry_t *) NULL)
    {
        /* FDTableEntry.Path has logical filename saved when file was opened */
        strcpy(OpenFilesData[open_file_cnt].LogicalName, query_rec->name_entry);

        /* Get the name of the application that opened the file */
        CFE_PSP_MemSet(&TaskInfo, 0, sizeof(CFE_ES_TaskInfo_t));
        if (CFE_ES_GetTaskInfo(&TaskInfo, query_rec->creator) == CFE_SUCCESS)
        {
            strcpy(OpenFilesData[open_file_cnt].AppName, (char *) TaskInfo.AppName);
        } 
    }
    ++open_file_cnt;
       
} /* End LoadOpenFileData() */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* FM utility function -- get open files data                      */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

uint32 FM_GetOpenFilesData(FM_OpenFilesEntry_t *OpenFilesData)
{

    OS_query_record_t query_rec;
   
    open_file_cnt = 0;
    OS_QueryObjectType (OS_OBJECT_TYPE_OS_STREAM, LoadOpenFileData, &query_rec, (void *)OpenFilesData);
       
    return open_file_cnt;
    
} /* End FM_GetOpenFilesData */

",enhancement,https://github.com/nasa/osal/issues/293
Integration Candidate 20191115,"**Describe the contribution**
Fixes #280, fixes #286, fixes #287

**Testing performed**
Steps taken to test the contribution:
1. Checked out bundle with ic-20191115 branches 
1. make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
1. make
1. make install
1. make test
Built without warnings, all tests passed except osal_timer_UT (nominal result on linux)
executed cfe, successful startup with no warnings

Confirmed passed CI (with cppcheck enforced!)

**Expected behavior changes**
No functional changes, all doxygen/cppcheck warning/error cleanup

**System(s) tested on:**
 - cFS dev server
 - OS: Ubuntu 16.04
 - Versions: bundle ic-20191115 branch

**Additional context**
None

**Contributor Info**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/292
Fix #287: cppcheck warnings,"**Describe the contribution**
Replace use of `1<<31` and `INT_MAX` with `UINT32_MAX/2` which should
squelch the cppcheck warnings about the left shift as well as being
more correct (the values in question are uint32's, not int's).

Also address two false positives about a return value being unassigned,
by simply initializing the value to be 0.

Fixes issue #287

**Testing performed**
Build coverage test and ensure all tests passing and line coverage is unaffected
Build and run CFE and confirm no effect.

Ran cppcheck and confirmed that warnings are gone.

**Expected behavior changes**
No impact to behavior.

**System(s) tested on:**
Ubuntu 18.04 LTS, 64 bit.

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",,https://github.com/nasa/osal/pull/291
Error compiling unit test: osprintf-test,"**Describe the bug**
Error compiling osprintf-test

**To Reproduce**
Steps to reproduce the behavior:
1. add osprintf-test in cfs/osal/src/unit-tests to cmakelists. Example: add_subdirectory(osprintf-test)
2. In cfs directory:
3.make distclean
4.make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
5. make
6. See error

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - cfs 6.6

**Reporter Info**
Anh Van, NASA Goddard
","bug, unit-test",https://github.com/nasa/osal/issues/290
doxygen illegeal command,"**Describe the bug**
cfecmdmnems:6: warning: Illegal command \dd as the argument of a \dd command ....
....
cfetlmmnems:211: warning: Illegal command \SB_PIPEOPTSEC as the argument of a \c command

**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13

**Reporter Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/osal/issues/289
"Fix #286, fix cppcheck warning for unit-test","**Describe the contribution**
Resolve cppcheck warning for unit-tests.
Did not compiled unit test. 

**Testing performed**
Steps taken to test the contribution:
1. cppcheck -force --inline-suppr . 2>cppwarning
2. Verify warning is gone. 

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
 - OSAL 1.4.2a, cppcheck 1.82

**Contributor Info**
Anh Van, NASA Goddard

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/osal/pull/288
cppcheck coverage check warning,"**Describe the bug**
reference issue #283 

[osal/src/os/posix/osapi.c:1832]: (error) Shifting signed 32-bit value by 31 bits is undefined behaviour
[osal/src/unit-test-coverage/shared/src/coveragetest-time.c:175]: (error) Shifting signed 32-bit value by 31 bits is undefined behaviour
[osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:111]: (error) Shifting signed 32-bit value by 31 bits is undefined behaviour
[osal/src/unit-test-coverage/ut-stubs/src/libc-stdio-stubs.c:145]: (error) Uninitialized variable: actual
[osal/src/unit-test-coverage/ut-stubs/src/libc-stdio-stubs.c:167]: (error) Uninitialized variable: actual

**Reporter Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/osal/issues/287
cppcheck unit test warning,"**Describe the bug**
references issue #283 

[osal/src/unit-tests/oscore-test/ut_oscore_binsem_test.c:165]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_countsem_test.c:166]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_exception_test.c:173]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_interrupt_test.c:193]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_misc_test.c:173]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_mutex_test.c:166]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_queue_test.c:169]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_task_test.c:208]: (error) syntax error
[osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:208]: (error) syntax error
[osal/src/unit-tests/osfile-test/ut_osfile_fileio_test.c:304]: (error) syntax error
[osal/src/unit-tests/osfilesys-test/ut_osfilesys_diskio_test.c:220]: (error) syntax error
[osal/src/unit-tests/osloader-test/ut_osloader_module_test.c:167]: (error) syntax error
[osal/src/unit-tests/osloader-test/ut_osloader_symtable_test.c:158]: (error) syntax error
[osal/src/unit-tests/osnetwork-test/ut_osnetwork_misc_test.c:181]: (error) syntax error
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:74]: (error) sprintf format string requires 1 parameter but only 0 are given.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:81]: (error) snprintf format string requires 1 parameter but only 0 are given.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:394]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:417]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:443]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:469]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:494]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:508]: (error) va_list 'varg' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:522]: (error) va_list 'varg' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:537]: (error) va_list 'varg' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:552]: (error) va_list 'ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:565]: (error) va_list 'ap' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:584]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:607]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/ostimer-test/ut_ostimer_timerio_test.c:206]: (error) syntax error

**Reporter Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/osal/issues/286
Replace #include of c files with build system source selection,"**Is your feature request related to a problem? Please describe.**
#include of a c file is not acceptable flight coding style for some organizations and complicates formal verification processes

**Describe the solution you'd like**
Source selection should be done via build system

**Describe alternatives you've considered**
None.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/osal/issues/285
Remove explicit disable priorities flag or warn if disabled,"**Is your feature request related to a problem? Please describe.**
User unknowningly was disabling priorities, causing issues

**Describe the solution you'd like**
Remove the explicit disabling of priorities.  PERMISSIVE mode should try to set requested priorities, and if it fails then go to default vs having a separate flag.

**Describe alternatives you've considered**
Warn user when using default priorities

**Additional context**
Note may have already been solved, but getting ticket in to confirm.

**Requester Info**
Jacob Hageman - NASA/GSFC (from Thad)",invalid,https://github.com/nasa/osal/issues/284
cpp check error,"**Describe the bug**
Cppcheck returns warning:


[osal/src/os/posix/osapi.c:1832]: (error) Shifting signed 32-bit value by 31 bits is undefined behaviour
[osal/src/unit-test-coverage/shared/src/coveragetest-time.c:175]: (error) Shifting signed 32-bit value by 31 bits is undefined behaviour
[osal/src/unit-test-coverage/shared/src/coveragetest-timebase.c:111]: (error) Shifting signed 32-bit value by 31 bits is undefined behaviour
[osal/src/unit-test-coverage/ut-stubs/src/libc-stdio-stubs.c:145]: (error) Uninitialized variable: actual
[osal/src/unit-test-coverage/ut-stubs/src/libc-stdio-stubs.c:167]: (error) Uninitialized variable: actual
[osal/src/unit-tests/oscore-test/ut_oscore_binsem_test.c:165]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_countsem_test.c:166]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_exception_test.c:173]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_interrupt_test.c:193]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_misc_test.c:173]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_mutex_test.c:166]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_queue_test.c:169]: (error) syntax error
[osal/src/unit-tests/oscore-test/ut_oscore_task_test.c:208]: (error) syntax error
[osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c:208]: (error) syntax error
[osal/src/unit-tests/osfile-test/ut_osfile_fileio_test.c:304]: (error) syntax error
[osal/src/unit-tests/osfilesys-test/ut_osfilesys_diskio_test.c:220]: (error) syntax error
[osal/src/unit-tests/osloader-test/ut_osloader_module_test.c:167]: (error) syntax error
[osal/src/unit-tests/osloader-test/ut_osloader_symtable_test.c:158]: (error) syntax error
[osal/src/unit-tests/osnetwork-test/ut_osnetwork_misc_test.c:181]: (error) syntax error
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:74]: (error) sprintf format string requires 1 parameter but only 0 are given.
[osal/src/unit-tests/osprintf-test/ut_osprintf_misc.c:81]: (error) snprintf format string requires 1 parameter but only 0 are given.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:394]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:417]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:443]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:469]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:494]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:508]: (error) va_list 'varg' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:522]: (error) va_list 'varg' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:537]: (error) va_list 'varg' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:552]: (error) va_list 'ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:565]: (error) va_list 'ap' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:584]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/osprintf-test/ut_osprintf_offset.c:607]: (error) va_list 'Ptr' used before va_start() was called.
[osal/src/unit-tests/ostimer-test/ut_ostimer_timerio_test.c:206]: (error) syntax error

**To Reproduce**
1. cppcheck --force .
2. See warning

**System observed on:**
Hardware
1. 18.04
2. Cppcheck 1.82, cFE 6.7.1, osal 5.0.1

**Reporter Info**
Anh Van, NASA Goddard
",duplicate,https://github.com/nasa/osal/issues/283
"Fix #280, fix misc. doxygen warning","**Describe the contribution**
Fix #280, fix misc. doxygen warning

**Testing performed**
Steps taken to test the contribution:
1. make users guide
2. verify warning is gone

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc-6.7.0


**Contributor Info**
Anh Van, NASA Goddard


",CCB:Approved,https://github.com/nasa/osal/pull/282
Integration Candidate 20191030,"**Describe the contribution**
Fixes #230, fixes #266, fixes #269
Fixes #271, fixes #272, fixes #273, fixes #274

**Testing performed**
Steps taken to test the contribution:
1. Checked out bundle with OSAL and cFE ic-20191030 branches 
1. make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
1. make
1. make install
1. make test
Built without warnings, all tests passed except osal_timer_UT (nominal result on linux)
executed cfe, successful startup with no warnings

**Expected behavior changes**
Coverage test updates (more coverage and works for vxworks)
Timer bug fixes
sem-speed-test functional test fix for vxworks

**System(s) tested on:**
 - cFS dev server
 - OS: Ubuntu 16.04
 - Versions: bundle with OSAL and cFE ic-20191030 branches

**Additional context**
None

**Contributor Info**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/osal/pull/281
doxygen misc. warning,"**Describe the bug**
osal/src/os/inc/osapi-os-core.h:233: warning: The following parameters of OS_ConvertToArrayIndex(uint32 object_id, uint32 *ArrayIndex) are not documented:
  parameter 'ArrayIndex'

osal/src/os/inc/osapi-os-core.h:311: warning: argument 'milliseconds' of command @param is not found in the argument list of OS_TaskDelay(uint32 millisecond)

osal/src/os/inc/osapi-os-core.h:319: warning: The following parameters of OS_TaskDelay(uint32 millisecond) are not documented:
  parameter 'millisecond'

osal/src/os/inc/osapi-os-core.h:332: warning: The following parameters of OS_TaskSetPriority(uint32 task_id, uint32 new_priority) are not documented:
  parameter 'new_priority'

osal/src/os/inc/osapi-os-filesys.h:247: warning: The following parameters of OS_open(const char *path, int32 access, uint32 mode) are not documented:
  parameter 'mode'


**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide
2. See error

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc-6.7.0

**Reporter Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/osal/issues/280
doxygen warning: expected <tr>,"**Describe the bug**
doxygen is giving warning: expected <tr> tag but found TK_LNKWORD token instead!

[userguide_osal_expected_tr_warning.txt](https://github.com/nasa/osal/files/3789109/userguide_osal_expected_tr_warning.txt)


**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide
2. see warning in build/doc

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - r.c-6.7.0

**Reporter Info**
Anh Van, NASA Goddard


","bug, docs",https://github.com/nasa/osal/issues/279
Fix #274: Avoid possible deadlock of timer callback,"**Describe the contribution**
Fix issue #274, avoids timer callback deadlock if actual tick_time is consistently bigger than the configured iinterval_time.

**Testing performed**
Modify `timer-test` to choose an interval that is not a multiple of the system clock tick, such that it will be rounded up to the next tick by the implementation.

Verify that evenually, two callbacks are generated in a single time tick, such that the long-term average of callbacks over time is consistent with the configured interval_time.

Confirm that callbacks continue normally until the application is stopped, as expected.

**Expected behavior changes**
Callbacks no longer cease once the ""overrun"" condition occurs (callbacks behind by >=1 full interval time)

Confirm consistent behavior on POSIX, RTEMS, and VxWorks

**System(s) tested on:**
Ubuntu 18.04.2 LTS 64-bit (POSIX/simulation)
RTEMS 4.11 pc686 BSP running in QEMU
MPC750 VxWorks 6.9

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/osal/pull/278
Fix #271: Correct interval time computations,"**Describe the contribution**
Fixes issue #271, corrects the time intervals returned by the sigwait() routines for all three operating systems (POSIX, RTEMS, VxWorks).

**Testing performed**
Testing is focused on the operation of the `timer-test` example program and variations thereof.
Verified that all callbacks from all timers correlate with the configured ""start_time"" and ""interval_time"" parameters passed to the OS_TimerSet() configuration.

Verified CFE still boots and runs OK. (stops FLYWHEEL as normal based on 1Hz tick)

**Expected behavior changes**
No changes to applications/CFE.

The `timer-test` example program now runs and passes consistently on all platforms.

**System(s) tested on:**
Ubuntu 18.04.2 LTS 64 bit (simulation)
RTEMS 4.11 pc686 BSP running in QEMU
MPC750 VxWorks 6.9

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/osal/pull/277
Fix #273: Correct format code in debug message,"**Describe the contribution**
Fixes issue #273
Just adds a typecast to avoid the warning

**Testing performed**
Build code on i686-rtems4.11 platform, with -Wall -Werror and OS_DEBUG_PRINTF option enabled.

**Expected behavior changes**
Observe no more warning about the format mismatch.

**System(s) tested on:**
Ubuntu 18.04.2 LTS 64 bit (build host) using i686-rtems4.11 cross toolchain

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/osal/pull/276
Fix #272: use 4K stack for sem-speed-test tasks,"**Describe the contribution**
Fix issue #272
Use a nonzero stack size for this test.

**Testing performed**
Build and execute ""sem-speed-test"" on the MPC750 VxWorks platform.

**Expected behavior changes**
Test now runs and passes reliably with no odd/inconsistent behaviors

**System(s) tested on:**
MPC750 VxWorks 6.9

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/osal/pull/275
Possible deadlock of timer callbacks,"**Describe the bug**
If the actual timer interval is larger than the requested timer interval, due to the system tick timer resolution, then it is possible for timers to become deadlocked.

**To Reproduce**
Configure a timer with `OS_TimerCreate()` and `OS_TimerSet()`.  Configure the interval such that it must be rounded up to a whole number of system ticks.

The timer works fine for a while, but then callbacks will cease once the first overrun occurs.

**Expected behavior**
Callbacks should continue until canceled by the application.

**System observed on:**
RTEMS 4.11 (pc686) running in QEMU
MPC750 VxWorks 6.9

**Additional context**
Discovered as part of the fix for #271, submitted as a separate bug for review as it affects the shared/common layer.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/274
Incorrect printf format code in RTEMS debug message,"**Describe the bug**
Incorrect printf format code in RTEMS debug message

**To Reproduce**
Build on RTEMS with debugging messages enabled and full warnings enabled (-Wall, -Werror)
Compiler generates an error about an incorrect format:
```
osal/src/os/rtems/osfilesys.c:176:9: error: format '%lX' expects argument of type 'long unsigned int', but argument 4 has type 'char *'
```

**Expected behavior**
Code should build warning-free

**System observed on:**
Ubuntu 18.04.2 LTS (build host for i686-rtems4.11)

**Reporter Info**
Joseph Hickey, Vantage Systems Inc.
",bug,https://github.com/nasa/osal/issues/273
sem-speed-test program creates tasks with zero stack size,"**Describe the bug**
For RTEMS and POSIX this is not an issue because these implementations will just use a minimum stack size, but VxWorks actually creates the task with a very small stack.  The worker tasks are then likely to overrun the stack, causing undefined behavior.

**To Reproduce**
Execute sem-speed-test on the MPC750 test platform
Observe inconsistent behavior during/after test (sometimes it completes OK, sometimes errors, occasionally even a reboot).

**Expected behavior**
The test should complete successfully.

**System observed on:**
MCP750, VxWorks 6.9

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/272
Incorrect time to first callback when using OS_TimerCreate API,"**Describe the bug**
There discrepancies between the expected first callback and the time the first callback actually occurs, for timers created via `OS_TimerCreate()`.  This is with regards to the ""start_time"" parameter.

**To Reproduce**
The `timer-test` example program exposes this bug.  It was never seen because on POSIX the difference is not substantial enough to cause failure, but on VxWorks it does fail.

General sequence is:
Create a timer via `OS_TimerCreate()`
Set the timer using `OS_TimerSet()` with start_time=2000000 (2 sec) and interval_time=400000 (400ms).

The time between the OS_TimerSet call and the first timer callback should be 2 seconds (within system timer tick tolerances) but it is approximately 2.4 seconds on POSIX.  On VxWorks the difference is even more substantial, causing failure of the timer-test example program.

**Expected behavior**
The time between the OS_TimerSet call and the first timer callback should be equivalent to the `start_time` parameter from the OS_TimerSet call.

**System observed on:**
Ubuntu 18.04.2 LTS, 64 bit, using `posix` OSAL build
VxWorks 6.9 on MCP750, using `vxworks` OSAL build
Both running the ""timer-test"" example program.

**Additional context**
This appears to be limited to cases where the backward-compatible OS_TimerCreate API is used.  In this case an implicit timebase object is created just to service the single timer.  In this mode, there is an initial condition issue in the wait routine, and the first interval therefore is not correct. 

If the timer callback is registered via `OS_TimeBaseCreate()` followed by `OS_TimerAdd()`, then it is OK.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/271
Correct error checking for taskSpawn,"**Describe the contribution**
Fixes #269, Corrects the error check after taskSpawn in the vxworks implementation.

The test for failure of taskSpawn should be for the value of
ERROR, not 0, per the VxWorks API documentation.

Found when implementing the unit test improvements in #230.

This issue is generally only reproducible in UT where taskSpawn
can be made to fail.  In normal FSW/runtime use, the taskSpawn
call is not likely to fail, and this issue cannot be seen.

**Testing performed**
Build OSAL coverage tests (see #268) and confirm passage of all tests.

**Expected behavior changes**
All unit tests pass, fixes a failure in one test due to this incorrect error test.

**System(s) tested on:**
Ubuntu 18.04.2 LTS 64-bit

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/270
Incorrect test of taskSpawn result in VxWorks implementation,"**Describe the bug**
The VxWorks implementation is testing for an error result from the `taskSpawn` API call by comparing with `(TASK_ID)0`.  This is incorrect, the VxWorks API documentation says that when taskSpawn fails, it returns the value `ERROR`, not 0.

**To Reproduce**
This can only be reproduced in unit test.

**Expected behavior**
The error handing path should be taken when `taskSpawn` returns `ERROR`.

**System observed on:**
Ubuntu 18.04.2 LTS 64 bit (running OSAL coverage unit tests)

**Additional context**
Discovered when implementing the coverage error path unit tests in #230 

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/269
Improve coverage on OSAL unit tests,"**Describe the contribution**
Fixes issue #230, improving coverage of shared and vxworks modules in the OSAL coverage tests.

**Testing performed**
1. Build coverage using:
```sh
cmake -DCMAKE_BUILD_TYPE=debug -DOSALCOVERAGE_TARGET_OSTYPE='shared;vxworks' -DOSAL_INCLUDEDIR=$CONFIG_DIR $OSAL_DIR/src/unit-test-coverage
```

2. Make and execute all unit tests for shared and vxworks implementations.
3. Run ""lcov"" to collect results:

```sh
lcov --capture -d $BUILDDIR/shared -d $BUILDDIR/vxworks --output-file $BUILDDIR/coverage.info
```

4. Examine coverage results (use genhtml to convert to html format):

```sh
genhtml $BUILDDIR/coverage.info --output-directory $BUILDDIR/out
```

**Expected behavior changes**
Code coverage is substantially improved.  All non-deprecated lines are visited.

Before change:
```
  lines......: 90.4% (2549 of 2820 lines)
  functions..: 95.9% (306 of 319 functions)
```

After change:
```
  lines......: 99.9% (2846 of 2849 lines)
  functions..: 100.0% (330 of 330 functions)
```


**System(s) tested on:**
Ubuntu 18.04.2 LTS, 64 bit

**Additional context**
This fixes one very minor FSW code issue found while running UT.  The return value of the vxWorks ""taskSpawn"" is documented to be `ERROR`, not zero, in the event of failure.  The FSW was testing the wrong value here in one instance.

The only non-covered lines of FSW code are in 2 deprecated directory functions.

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/osal/pull/268
"Fix #266: Rename ""vxworks-ng"" and ""posix-ng"" coverage tests","Rename to ""vxworks"" and ""posix"", respectively, to match the
actual implementation names.  The build scripts rely on
the name being the same and will fail if different.

Fixes issue #266

**Testing performed**
Build coverage test for vxworks using cmake command:

`cmake -DOSALCOVERAGE_TARGET_OSTYPE='shared;vxworks' -DOSAL_INCLUDEDIR=$CONFIG_DIR $OSAL_DIR/src/unit-test-coverage`

Followed by ""make"" as usual.

**Expected behavior changes**
The build completes successfully.

**System(s) tested on:**
Ubuntu 18.04.2 64-bit

**Additional context**
This only fixes the specific issue of the name mismatches and subsequent build failure.  There are a couple other issue tickets about coverage testing which this does not address.  These will be addressed in other commits/pull requests.

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/osal/pull/267
"Remove vxworks6 coverage code, rename vxworks-ng to vxworks","**Describe the bug**
For the `unit-test-coverage` code, the directory names must match those of the actual implementation they are testing.  The build scripts assume/require this name relationship.

Recently, the classic OSAL implementations were dropped and the ""-ng"" implementations replaced them in the main code tree, but the unit-test-coverage still has the old vxworks6 and new vxworks-ng directories.

The old `vxworks6` should be removed and the `vxworks-ng` needs to be renamed to be `vxworks`.

**To Reproduce**
Build coverage code using e.g.:
`cmake -DOSALCOVERAGE_TARGET_OSTYPE='shared;vxworks-ng' -DOSAL_INCLUDEDIR=$CONFIG_DIR $OSAL_DIR/src/unit-test-coverage`

The subsequent `make` will fail because there is no longer an OSAL implementation named `vxworks-ng`, it is named `vxworks` now.

**Expected behavior**
The build should complete successfully

**System observed on:**
Ubuntu 18.04.2 64-bit

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/osal/issues/266
Remove references to OSAL_OPAQUE_OBJECT_IDS and OSAL_ABSTRACT_FILESYS_TYPES,"**Is your feature request related to a problem? Please describe.**
References to removed #defines remain in the unit test code.

https://github.com/nasa/osal/blob/ad88aa16625d998efd7473fea6e347ccfe097e19/src/unit-test-coverage/vxworks-ng/CMakeLists.txt#L5-L6

**Describe the solution you'd like**
Remove references

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/osal/issues/265
Integration Candidate 20191001,"**Describe the contribution**
Covers the following pull requests:
- #16 - Unit test warnings (merged to RC branch)
- #19 - OS_TimerSet return OS_ERROR on 0,0
- #20 - OS_TimerSet API update
- #21 - Function description block updates (merged to RC branch)

**Testing performed**
Steps taken to test the contribution:
1. Followed standard build/run steps with permissive mode on cFS development server

**Expected behavior changes**
Only functional change is OS_TimerSet returns OS_ERROR on 0,0, see pull requests for full details

**System(s) tested on:**
 - cFS development server 
 - Ubuntu 16.04.6 LTS, 4.4.0-164-generic
 - Versions: ic-20191001 bundle (all ic-20191001 branches)

**Additional context**
NA

**Contributor Info**
Jacob Hageman - NASA/GSFC

**Community contributors**
CLA on file",CCB:Approved,https://github.com/nasa/osal/pull/264
"Update function header comments on ""ng"" implementation functions","Action item from vxworks-ng review held on 2019-08-27:

Across posix-ng, rtems-ng, and vxworks-ng, the implementation functions have header comments that were cut and paste from the original implementation and may not reflect the actual code anymore.

This should be scrubbed prior to the OSAL release.","bug, duplicate",https://github.com/nasa/osal/issues/263
Move OS_FS_ERR_* defines to common os error definitions,"OS_DirectoryOpen returns OS_INVALID_POINTER if dir_id or path pointers are NULL.

OS_DirectoryRead returns OS_FS_ERR_INVALID_POINTER if dirent pointer is NULL.

Likely other cases of mixed use.  Suggest deprecation of the OS_FS_ERR_* defines and switch to common definitions.",enhancement,https://github.com/nasa/osal/issues/262
Improve consistency and reduce duplication in various BSP/PSP implementations,"Currently in the CFE/OSAL world we have at least four different platform-specific abstraction methods, all of which basically do the same thing of getting common code to run on a different platforms.  All of these provide three very basic bits of functionality, in different flavors:

- provide a well-known entry point symbol for the platform (main, Init, etc)
- get the system into a proper state for running the app
- Invoke `OS_Application_Startup()` -- or whatever the real app entry point is
- Do something for idle time while the app runs (a shell, or just an idle loop).
- Shut it down when complete 

**Provider 1**:

On the OSAL side this is provided by the ""BSP"".  It has genppc-vxworks6.4, pc-linux, pc-rtems, sparc-vxworks6.7, sis-rtems, and mcf5235-rtems (the latter 3 are somewhat unmaintained/untested). 

**Provider 2**:

When running Unit tests, an alternative OSAL BSP is used which has extra functionality for running the tests.  The idea is that any platform capable of running applications should also be capable of running Unit tests.

Unfortunately, to avoid changing existing BSP functions, this was ""cloned"" and therefore this has basically morphed into a second duplicate provider of the entry point/startup/shutdown logic, because UT needs a slightly different setup from a regular app.  There still is, however, a considerable amount of overlap between the ""UT"" BSP and the regular application BSP.

//Proposal//: These should be made into an extension of the basic OSAL BSP.

**Provider 3**:

The CFE PSP also provides many of the same services.  On the CFE PSP repo, there are ""pc-linux"", ""pc-rtems"", and ""mcp750-vxworks6.4"".

These are basically extended versions of the OSAL BSP, and also provide entry point/shutdown logic, but they also do ADDITIONAL configuration that is specific to CFE before calling the CFE entry point.

//Proposal//: like the unit tests, the CFE PSP should be an extension of the OSAL BSP, not a replacement for it.  The PSP already defines a `CFE_PSP_Main()` entry point for itself, and this can be invoked as a second-stage after OS_Application_Startup to do the additional startup tasks required for CFE.

**Provider 4**:

The JSC-provided unit tests residing in the `osal/src/unit-tests` directory contain their own platform abstractions by way of preprocessor macros and alternate header/source files.  The source/header file choice is based off the `_LINUX_OS_`, `_VXWORKS_OS_`, and `OSP_ARINC653` compile-time macros.  In turn, this defines additional macros for platform-specific routines like sleep / logging / taskDelay, etc.

These tests are already using an entry point provided by the UT-BSP described in (2) above, the macros supplement this.  The problem is that not all platforms are provided.  Most notably, there is no implementation for _RTEMS_OS_, so these tests are currently unbuildable on PC-RTEMS.

//Proposal//: Functions like sleep/delay and other platform-specific bits should be changed from a macro to an API call provided by the UT-BSP.  Logging functions are already provided by the UT-BSP.  Furthermore, all the test cases should use UtAssert calls to make the output consistent with everything else.


",enhancement,https://github.com/nasa/osal/issues/261
Fix unused variables in RTEMS,Compiling with `-Wall -Werror` noted two unused variables in OSAL for rtems-ng.  These are simple fixes to clean up.,bug,https://github.com/nasa/osal/issues/260
Remove unit test backwards compatibility in osapi-filesys functions,"Flight code should have the right implementation, and unit test code should be fixed to match.  Current comments indicate the flight code is less than optimal to match unit test code.

Specifically: OS_FS_ERROR vs OS_ERR_NAME_NOT_FOUND returns.","enhancement, unit-test",https://github.com/nasa/osal/issues/259
Remove OSAL dependencies on deprecated OSAL elements,"Building with OSAL_OMIT_DEPRECATED fails.

First error:

/home/jhageman/cFS/cFS-dev/osal/src/unit-tests/shared/ut_os_stub_platforms.h:83:8: error: unknown type name ‘OS_FDTableEntry’
 extern OS_FDTableEntry OS_FDTable[OS_MAX_NUM_OPEN_FILES];",bug,https://github.com/nasa/osal/issues/258
Update backwards compatibility comments in the osapi-filesys functions,"Really not backwards compatibility, but in support of abstraction and in the spirit of portability operations attempted on a FS_BASED file system that arn't actually allowed should no-op and return success.",bug,https://github.com/nasa/osal/issues/257
Deprecate endian temporary compatibility macors,The BIT_ORDER defines in src/os/inc/common_types.h are marked as temporary and should be easily removed to check compatibility.  Check for use in cFS framework.,enhancement,https://github.com/nasa/osal/issues/256
Wrap OS_TaskRegister in OMIT_DEPRECATED define,"Comments suggest this function is obsolete, wrap in #ifdef so code can easily be checked for dependence.",invalid,https://github.com/nasa/osal/issues/255
Add bsp_ut functionality for genppc vxworks to be able to run unit tests,Need to be able to run unit tests on vxworks-ng for end-of-summer release.,bug,https://github.com/nasa/osal/issues/254
Remove old MKS flags in comments,"$Id, $Date, $Revision, $Log, etc all no longer useful and slightly misleading since they don't get updated.",bug,https://github.com/nasa/osal/issues/253
"Remove DEPRECATED define in ut_assert, UtMemSet","Has been marked DEPRECATED for 4 years, since [changeset:10b7816] as part of ticket #40.",bug,https://github.com/nasa/osal/issues/252
Deprecate osalbool and boolean in favor of C99 bool,Eliminates unnecessary redefines.,bug,https://github.com/nasa/osal/issues/251
Scrub and remove depreciated elements,"common_types.h
 - boolean typedef
 - SOFTWARE_BIG_BIT_ORDER define
 - SOFTWARE_LITTLE_BIT_ORDER define

and likely others.",duplicate,https://github.com/nasa/osal/issues/250
Remove custom fixed size types option,"Custom fixed size types in common_types.h requires assumptions outside required standards.  Remove this code in favor of stdint.h.  For any platform without stdint.h the resolution is platform dependent and outside the scope of the cFS framework.

Remove _HAVE_STDINT_ logic from cmake recipe, and custom defines in common_types.h.

See also [cfs_cfe:306] in cfs_cfe.",bug,https://github.com/nasa/osal/issues/249
Use C11's _Static_assert for CompileTimeAssert when available,"It is straightforward to test the C version and define `CompileTimeAssert` using C11's  [https://en.cppreference.com/w/c/language/_Static_assert _Static_assert keyword]

This can be done e.g. 
{{{#!c
#if __STDC_VERSION__ >= 201112L
#define CompileTimeAssert(Condition, Message) _Static_assert(Condition, #Message)
#else
#define CompileTimeAssert(Condition, Message) typedef char Message[(Condition) ? 1 : -1]
#endif
}}}

This avoids polluting the type namespace with the magic typedefs used in the older implementation, and also produces better error messages if the assertion fails.

It would also be possible to use C++11's [https://en.cppreference.com/w/cpp/language/static_assert static_assert keyword] in a similar manner, but I am not sure if this is desirable; this depends whether we want to officially support using this header in C++ code.

I will create a branch containing the attached patch and update this ticket.",enhancement,https://github.com/nasa/osal/issues/248
"""host_module_id"" in OS_module_prop_t might be too small on 64-bit machines","The `OS_module_prop_t` structure (output by `OS_ModuleInfo`) contains a field ""host_module_id"" which is a `uint32` type.  This is possibly too small for some machines and can cause a warning, notably on 64-bit builds where the host module is tracked natively as a `void*`.

Suggest to either use a `cpuaddr` type instead, or to remove this field altogether as it is really a crutch that shouldn't be needed (a good abstraction means that the app shouldn't ever need to know this, and if the app actually does use it, then the app isn't portable).
",bug,https://github.com/nasa/osal/issues/247
Avoid continuous looping in the time base callback thread,"As part of the ""timebase"" implementation, a high priority helper thread is used as the context for timer callbacks.  This is supposed to block on a `sigwait()` or some other custom PSP-supplied function until a tick arrives.

However, if something goes wrong with the wait routine and it does NOT actually block for whatever reason, then a continuous loop is possible.  Because it is running as a high priority realtime thread, on a single core system this has the effect of locking up the CPU.

In the case that the blocking function fails to block, this needs a failsafe to prevent hogging the CPU.",bug,https://github.com/nasa/osal/issues/246
Add support for asynchronous console output in shared layer (NG),"On some target boards, the console output from `OS_printf` needs to be buffered and sent to a separate task for output.  This was enabled on several VxWorks targets through the `UTILITY_TASK` directive, but generally was not implemented on POSIX or RTEMS targets, where OS_printf was a simple wrapper around printf.

This console output buffer will become necessary in order to support this paradigm for a VxWorks-NG implementation.

The basic framework for doing this is fairly simple, and may provide immediate benefit for any RTEMS or POSIX boards that might want to enable it, too.",enhancement,https://github.com/nasa/osal/issues/245
Fix nonexistent symbol lookup in RTEMS,"In the event of a lookup on a nonexistent symbol, The RTEMS `dlError` implementation does not return NULL like the POSIX implementation does.  This is intended to differentiate between a nonexistent symbol and a symbol that exists but actually has an address of NULL.

Unfortunately, this makes the OSAL symbol lookup API return ""success"" and a NULL address, which can cause the implementation to jump to NULL if e.g. a bad entry point name was supplied.",bug,https://github.com/nasa/osal/issues/244
"Clean up the ""OS_ShellOutputToFile"" implementation","The implementation of this function is something of a kludge, generating a shell command string using redirection characters (>) to redirect the output to a file and then calling `system()` using this string.

As the intended output file is in fact already ""open"" by the local process, it is far cleaner and less error prone to invoke `fork()` directly, and simply `dup` the filehandles to be STDOUT_FILENO and STDERR_FILENO, then exec the shell process.

This avoids a bunch of issues related to the system() call.",enhancement,https://github.com/nasa/osal/issues/243
Improve shared layer to support lookups by keys other than ID,"The shared layer currently only supports object/resource lookups by ID.  The code locks the table, does a direct calculation of the table index using the ID, and confirms that the ID is correct.

This supports the vast majority of OSAL calls where the subject resource is passed in using a 32-bit resource identifier.

However, there are other API calls which require lookup by name rather than ID.  Some of these must continue to exist for backward compatibility, but still should use as much of the same infrastructure as possible.",enhancement,https://github.com/nasa/osal/issues/242
Resolve Klocwork issues found in 4.2.1a,See attachment,invalid,https://github.com/nasa/osal/issues/241
Add semaphore speed test,"During discussions of the NG architecture, a recurring concern was regarding the additional function calls and possible increase in overhead related to this.

Rather than act on assumptions, it is better to actually benchmark the code in question to determine if optimizations are necessary, and if so, where those optimizations should be done.",enhancement,https://github.com/nasa/osal/issues/240
Fix unit test coverage build,"During some recent unit testing, it was observed that the coverage flags (-pg, --coverage) were not being correctly applied to code under test, and therefore the coverage report could not be generated.

I tracked this down to a previous build change that reset all C flags to allow the unit testing to be performed with a different BSP than the main test.  Unfortunately as a side effect the UT coverage flags were also lost.",bug,https://github.com/nasa/osal/issues/239
OS_cp cleanup,"Looking at OS_cp, which does a system call to the ""cp"" command, this is really ugly, not realtime-friendly, and probably a security risk (if you could somehow inject a ';' into the system call, which shouldn't be difficult...Doesn't look like OS_TranslatePath catches this.)
I suggest re-writing OS_cp to do an open, a loop of read/write, and close (with the appropriate checks to ensure errors are handled.)
Also looks like OS_TranslatePath does the check for NULL and length, so the OS_{cp|mv|remove|...} should not do the same.","bug, wontfix",https://github.com/nasa/osal/issues/238
OS_API_Init in the BSP,"From #168 comments: CCB had quite a lot of discussion around this, and I think the concensus was that in the long term, the responsibility for initializing OSAL moves into BSPs, and we allow all OSAL entry points to assume that OS_API_Init has been called, rather than having it be a runtime check.

Should also update the related unit tests.","good first issue, unit-test",https://github.com/nasa/osal/issues/237
Remove last-gen OSALs and replace with next gen,Removing last-gen with OSAL 5.0.0,bug,https://github.com/nasa/osal/issues/236
osconfig.h OS_QUEUE_MAX_DEPTH unused,"OS_QUEUE_MAX_DEPTH is defined as 50 in osconfig.h for both pc-rtems and pc-linux, but the limit isn't applied/checked/or even used within OSAL.

Queue depth is accepted as input by OS_QueueCreate with no limiting within OSAL.  Note cFE also has a max pipe depth (CFE_PLATFORM_SB_MAX_PIPE_DEPTH) that is applied by the cFE prior to calling OS_QueueCreate, but it's set to 256.  This limit seems arbitrary at the cFE level.

Linux depth limit by default is 10 on at least CentOS, would be nice if it worked out of the box.
",enhancement,https://github.com/nasa/osal/issues/235
Correct Build errors in UT Assert bamboo build,"For legacy configurations where the old type mapping is used in `common_types.h`, the UT assert library fails to build with the following errors.  This is from the bamboo logs when building in the classic mode.

/home/bamboo-remote-agent/bamboo-agent-home/xml-data/build-dir/CFS-CFSCFE-JA/osal/ut_assert/src/utassert.c:154:5: error: unknown type name 'uint32_t'
/home/bamboo-remote-agent/bamboo-agent-home/xml-data/build-dir/CFS-CFSCFE-JA/osal/ut_assert/src/utstubs.c:78:5: error: unknown type name 'bool'

This issue is causing bamboo to fail on the ""Job A"" of both CFE and OSAL.  Other jobs that use the stdint.h based mapping are OK.",bug,https://github.com/nasa/osal/issues/234
Requirement option to exit/abort on app load failure,"CCB 4/3/19 discussion relative to #263 touched on a possible debug option to shut down/exit/abort on app load failure.

In the context that there are some debugging hooks already, could add this as an extreme reaction (avoids time spent searching for why the system isn't working as expected).

Kicked up to the steering committee/requirements discussion to resolve if this is required optional behavior.",enhancement,https://github.com/nasa/osal/issues/233
PTHREAD_STACK_MIN typo in POSIX/POSIX-NG OSAL,"Both the POSIX and POSIX-NG OSALs contain the following in `osapi.c`:
{{{#!c
#ifndef PTHREAD_STACK_MIN
   #define PTHREAD_STACK_MIN 8092
#endif
}}}

I believe this is supposed to be 8192 or 8*1024.","bug, good first issue",https://github.com/nasa/osal/issues/232
Port VxWorks OSAL to shared/ng OSAL architecture,"This is a follow-on to #28.

The original change set was merged to development branch as of the 2018-10-09 CCB, without yet having an implementation for VxWorks that uses the refactored architecture.

Before the next OSAL release, there should be an implementation for VxWorks using the shared layer, to go with posix-ng and rtems-ng.

",enhancement,https://github.com/nasa/osal/issues/231
"Improve coverage test for ""shared"" layer","This is a follow-on to original ticket #28

As part of the original change sets, a basic coverage test was added for the shared layer.  It calls most functions in a nominal case, but does not yet cover a sufficient number of the error cases.  For instance the module loader only has 72% of line coverage.  Others are between 80-90% but could still be improved (files, queues, timers).

It has been discussed in CCB meetings during the review for #28 that we should make another pass through the coverage test logs to improve the error case coverage prior to releasing the next OSAL.
",enhancement,https://github.com/nasa/osal/issues/230
mqueue test program,OSAL should include a simple mqueue test program to validate that the user has the correct settings and permissions to create/open/close/delete mqueues. Often users stumble on mqueue configuration and it is more difficult to diagnose when it's wrapped in the entirety of OSAL/cFS.,"enhancement, unit-test",https://github.com/nasa/osal/issues/229
Consider moving cpu usage code to OSAL,"Currently, code to request cpu usage is included in the HS application.  However, this requires HS to be modified to run on different operating systems.  Because the code to request cpu usage is OS-specific, consider moving this functionality out of HS to the OSAL. ",enhancement,https://github.com/nasa/osal/issues/228
Scrub cppcheck warnings in OSAL dev branch,"The bamboo continuous integration server runs cppcheck static analysis on every build.  This ticket is for tracking any small/minor fixes to address concerns brought up by this tool.

Nothing here should change any functionality.  (Anything bigger than a simple one or two-liner should probably have its own ticket for tracking).",bug,https://github.com/nasa/osal/issues/227
Clean up unneeded UT assert compatibility logic,"The OSAL UT assert framework has a number of functions to act as a bridge or compatibility layer for historical CFE unit test cases.

With the current CFE these test cases should be fixed and therefore this compatibility code is no longer necessary.

This should be cleaned up as part of the next OSAL/CFE release set.",enhancement,https://github.com/nasa/osal/issues/226
OS_TimerCreate() callback functions & event messages,"Event messages in callback functions seem to associate the event app ID with timer ID. The first timer created gets a timer ID of zero and events in the callback are get associated with CFE_EVS (APP_ID=0). The second timer gets a TID of 1 so events are associated with CFE_SB (APP_ID=1).

I did not dig through all of the code to prove this and I observed this behavior on a Linux deployment.

",bug,https://github.com/nasa/osal/issues/225
bsp_ut updates to work with cfe 6.6,"The associated changeset specifically addresses control code use, conditionally dependent on OS.",bug,https://github.com/nasa/osal/issues/224
Remove conditionally compiled code prior to next OSAL release,"As part of OSAL development several macros are utilized to allow the code to be merged in pieces without breaking existing code.

Before the next OSAL release is finalized, these conditional-compile macros should be removed and only the active branch should remain.

At least these two macros should always be considered ""enabled"" in future versions:
`OSAL_OPAQUE_OBJECT_IDS`
`OSAL_ABSTRACT_FILESYS_TYPES`


",enhancement,https://github.com/nasa/osal/issues/223
way to get raw OS task priority/OSAL has too many priorities,"OSAL attempts to provide a uniform set of task priority by translating the given priority to a native OS priority. This is often done by assigning bins that certain priorities can fall into. Typically, applications can set their priorities far enough apart that this is not a problem. However, sometimes tighter control would be nice especially in systems where the number of available priorities is fewer than OSAL. (For example, OSAL provides 255 priorities but POSIX only 100.)

POSIX, for example, can see priorities squashed where tasks become round-robin instead of higher priority than one another. Having to pick OSAL priorities when writing apps with many child threads based on what you know the characteristics of the underlying OS to be defeats the purpose of OSAL.

One way to fix this is to create a macro os_raw_prio(X) where the most significant bit of a priority is set, which has meaning to OSAL's thread creation mechanism. This would tell it to use the raw value instead of translating.

Another approach would be to lower the number of maximum OSAL priorities to a number lower than most RTOSs (like 50 or so) so that there can always be unique priorities in any underlying OS. Or, this could be made configurable when building the system.",enhancement,https://github.com/nasa/osal/issues/222
OSAL needs a concept of event,"One useful primitive missing from OSAL is an event concept. In POSIX, this could be implemented via pipe() where an event is signaled by writing to the write pipe, and cleared by reading from the read pipe. This is useful because multiple events can be blocked upon using select(). (OSAL supports select(), so this makes sense.)",enhancement,https://github.com/nasa/osal/issues/221
osal needs blocking timer API,"The current OSAL timer API calls callbacks in an unknown context to the user when the timer event fires. This removes flexibility from the user to manage their own threads. A new API (or addition to existing one) should be created where the user can read from the timer, which will block until the event fires. As this would be a periodic timer, the user should also be able to be informed of overruns that occurred.

This functionality mirrors POSIX timerfd/read().",enhancement,https://github.com/nasa/osal/issues/220
semaphore APIs do not allow for desired signals to be handled,"From the original reporter:
""The call to OS_InterruptSafeLock() blocks all signals in order to force
mutual exclusion with signal handlers. However, it is often the case that
the semaphore we are waiting on is given inside a signal handler, which
now is never executed because the signals are blocked. This results in
deadlock.""",invalid,https://github.com/nasa/osal/issues/219
OS_QueueDelete() has too small of a char name buffer,"Looks like a copy/paste error but the ""name"" variable used to figure out a unique name for mq_open() & mq_unlink() calls is of different sizes between OS_QueueCreate() and OS_QueueDelete(). 

In OS_QueueDelete(), change:
char name[OS_MAX_API_NAME+1];
to:
char name[OS_MAX_API_NAME*2];

The result is memory clobbering when deleting a queue of a longer name.","bug, invalid",https://github.com/nasa/osal/issues/218
posix-ng / posix OS_ModuleLoad flag inconsistency,"In the POSIX OSAL, modules are loaded by `dlopen` with a flags value of 
`RTLD_LAZY | RTLD_GLOBAL` whereas in posix-ng the flags value is `RTLD_NOW | RTLD_GLOBAL`. Changing from `RTLD_LAZY` to `RTLD_NOW` alters the behavior of `dlopen`. It may be desirable to make that change, but it should be consistent between the POSIX OSAL implementations.","bug, invalid",https://github.com/nasa/osal/issues/217
Please provide va_list variants of variadic functions,"Variadic functions in C can't easily be wrapped in another variadic function. To resolve this issue, the C standard library provides variants of its variadic functions that take a {{{va_list}}}. For example, {{{printf}}} has the {{{vprintf}}} variant.

Please provide similar variants for the OSAL's variadic functions. The implementation would be simple: the majority of the function's logic can reside in the {{{va_list}}} version, and the variadic function can become thin a wrapper around the {{{va_list}}} version.

At the time of submitting this issue, the only variadic function in OSAL is `OS_printf`.

See also [cfs_cfe:218 cFE issue 218].",enhancement,https://github.com/nasa/osal/issues/216
OSAL boolean should use actual C99 bool type,"On C99+ platforms that have the builtin `_Bool` type, this should be used for the OSAL boolean typedef rather than `unsigned char`.

Two major benefits:
1. Smarter implicit conversion semantics.  During CFE 6.6 testing there was one case discovered where an (nonzero) `int` was directly passed to a function taking `osalbool`, which was implicitly truncated to 8 bits and became zero (false) because the LSB was zero.  When using the actual builtin boolean type, this remains true.
2. Better warnings.  In newer version of GCC it will flag warnings on suspicious expressions used as truth values (such as an assignment).
",enhancement,https://github.com/nasa/osal/issues/215
posix: Use RTLD_DEFAULT instead of NULL in dlsym,"In {{{OS_SymbolLookup}}} defined in {{{osloader.c}}} in the POSIX OSAL, [http://pubs.opengroup.org/onlinepubs/9699919799/functions/dlsym.html dlsym] is used to obtain the address of the specified symbol:
{{{
   Function = dlsym((void *)0, SymbolName);
}}}

The behavior of {{{dlsym}}} when called with a null pointer for the first argument is not defined by POSIX. On GNU/Linux, this value corresponds to {{{RTLD_DEFAULT}}}, as found in {{{/usr/include/dlfcn.h}}}.
{{{
# define RTLD_DEFAULT	((void *) 0)
}}}

When called with {{{RTLD_DEFAULT}}} as a first argument, ""The identifier lookup happens in the normal global scope; that is, a search for an identifier using handle would find the same definition as a direct use of this identifier in the program code."" This appears to be the intended behavior in the OSAL.

However, the value of {{{RTLD_DEFAULT}}} is implementation-defined according to POSIX. The macro, rather than the value it happens to have on GNU/Linux, should be used.

This would address part of #203.",enhancement,https://github.com/nasa/osal/issues/214
OS_ModuleLoad should copy the module before loading.,"Many OS's will allow you to modify/overwrite a shared library and any running executables that have loaded that library will be immediately affected (likely causing a crash.) Clearly missions will want to upload updates to modules and not have them affect the running cFE.

A simple solution is to copy the module library file to a temporary file. Yes this will increase the storage space required, so a #define switch to enable this behavior should be used to ensure folks know this is going to happen (or they risk crashing the cFE if they upload a module file directly over the existing module file.)

(Note that file locking mechanisms are unreliable in many OS's.)",wontfix,https://github.com/nasa/osal/issues/213
Clean up OSAPI prototypes,"There are still several functions, mainly in the filesystem area, where input string parameters are missing the `const` qualifier.

These prototypes should be fixed.  Note that adding `const` typically will not affect user code, as it is OK to pass non-const into const, just not the other way.

This will fix warnings on the CFE side.
",bug,https://github.com/nasa/osal/issues/212
Enhancements to UT assert testing framework,"The UT assert framework stub API supported only ""consumable"" data buffers, which works well for calls such as read/write, where the buffer is filled with each call.

It does not work as well for such things as the critical data store (CDS) in CFE_ES, which require a stub to mimic ""random access"" behavior.  For this, the stub would have to retain the buffer between calls.

This ticket is to add all the necessary enhancements to allow full testing of CFE/CFS.",enhancement,https://github.com/nasa/osal/issues/211
Add Symmetric multiprocessing (SMP) support,"Flight and ground computing platforms contain multiple processing cores. Symmetric multiprocessing (SMP) support must be added to the OSAL to fully utilize these platforms.
",enhancement,https://github.com/nasa/osal/issues/210
pointer handed to pthread_setspecific is not a pointer,"The pthreads ""setspecific"" and ""getspecific"" APIs are used to associate a pointer value, specific to the current thread, with a key value indicating what it represents.

The POSIX implementation of OSAL uses this facility to store the thread-specific index of the thread's task in the task table, and it does so by casting the small integer value to have a pointer type.

It would be safer, instead, to store a pointer to the actual row of the task table as the thread-specific data; this would not violate the expectation that a pointer is either NULL or represents the address of valid data.

Extraction of the table index then becomes a range check followed by a pointer subtraction, rather than a combination of memory copies and masks that make unportable assumptions about sizes and endianness.

Marked as ""minor"" priority as existing code accidentally works on 32-bit systems and little-endian 64-bit systems where sizeof(int)==4, which accidentally covers current use cases.
","bug, invalid",https://github.com/nasa/osal/issues/209
Document method on Linux to modify user priority limits,"The posix osal can set priorities in Linux. Out of the box, this only works if you run CFS as root. In a lab environment, with many developers using shared lab workstations, root access for everyone is not an option. This method allows CFS apps, running as standard privileged users, to use the priority settings in the startup script(.scr file).

1) As root, set the following config: Update ""rtprio"" in /etc/security/limits.conf for a user or group.

```
#<domain>      <type>  <item>         <value>
#

# for specific users
@tngo            -      rtprio          100
# for specific groups
@aa2            -       rtprio          100
@gfe            -       rtprio          100

#*               soft    core            0
#*               hard    rss             10000
#@student        hard    nproc           20
#@faculty        soft    nproc           20
#@faculty        hard    nproc           50
#ftp             hard    nproc           0
#@student        -       maxlogins       4
```

2) The following changes to the currently released OSAL 4.2.1a will need to be applied to 
osal/src/os/posix/osapi.c.  
Add this include to osal/src/os/posix/osapi.c.

#include <sys/resource.h>   /* Danny Strauss/AA2 - for getrlimit() */

In osal/src/os/posix/osapi.c::OS_TaskCreate(), replace the following code:

    /*
    ** Test to see if the user is running as root.
    ** root is required to set the scheduling policy, stack, and priority
    */
    if (geteuid() == 0 )


with this code:

    /* Danny Strauss/AA2: remove geteuid check to allow all users to set task
     * attributes (priority, etc.) and replace it with a check of user's 
     * allowed system rt priority limit */

    struct rlimit rl;
    getrlimit(RLIMIT_RTPRIO, &rl);
    printf(""OS_TaskCreate: Setting %s priority %d. "", task_name, os_priority);
    if (os_priority > (int)rl.rlim_cur)
    {
        printf(""OS_TaskCreate: WARNING priority not set because you are limited to priority %d\n"", (int)rl.rlim_cur);
    } 
    else
    {
       printf(""\n"");

",docs,https://github.com/nasa/osal/issues/208
pthread_cond_wait() spurious wakeup in OS_BinSemTake,"In OS_BinSemTake() in the posix osal, a call to pthread_cond_wait() is used for signaling from the task giving the semaphore.  However, it is possible for pthread_cond_wait() to return in the event of a spurious wakeup, without the condition it was actually waiting on becoming true.

To fix this, the call to pthread_cond_wait() should be wrapped in a while loop that checks the condition after the calling task is woken up. e.g.


{{{
       while ( OS_bin_sem_table[sem_id].current_value < 
               OS_bin_sem_table[sem_id].max_value )
       {
          ret = pthread_cond_wait(&(OS_bin_sem_table[sem_id].cv),&(OS_bin_sem_table[sem_id].id));
       }
}}}
","bug, wontfix",https://github.com/nasa/osal/issues/207
mq_open has invalid data in struct mq_attr,"OS_QueueCreate uses mq_open, and it passes a partially-initialized struct mq_attr as the last parameter. This structure should be initialized to 0 as two fields in it contain junk. ",bug,https://github.com/nasa/osal/issues/205
OS_TranslatePath() does not handle mountpoint equal to virtualpath,"Discovered while using cfs_fm app, if one were to get a directory listing for ""/cf"", then OSAL will report this doesn't exist because of a bug in OS_TranslatePath().

You are required to ask for ""/cf/""  because the code is looking for a required trailing slash.   This seems to be true of all volumes listed in one's volume table (cfe_psp_voltab.c).

This trailing slash should not be required.

Two diff outputs with fixes are enclosed..  one for vxworks6 and one for posix.

{{{
diff --git a/cfs_osal/src/os/vxworks6/osfilesys.c b/cfs_osal/src/os/vxworks6/osfilesys.c
index 02e0a3c..48636d3 100644
--- a/cfs_osal/src/os/vxworks6/osfilesys.c
+++ b/cfs_osal/src/os/vxworks6/osfilesys.c
@@ -1099,7 +1099,7 @@ int32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)
         if (OS_VolumeTable[i].FreeFlag == FALSE)
         {
             path_on_device = skip_prefix(VirtualPath, OS_VolumeTable[i].MountPoint);
-            if (path_on_device && ('/' == *path_on_device))
+            if (path_on_device && (  ('/' == *path_on_device)  ||  ('\0' == *path_on_device) ) )
             {
 #ifdef OS_DEBUG_PRINTF
                 printf(""NumChars: %d\n"", path_on_device + 1 - VirtualPath);
}}}

{{{
diff --git a/cfs_osal/src/os/posix/osfilesys.c b/cfs_osal/src/os/posix/osfilesys.c
index ef92ce9..a6f9a15 100644
--- a/cfs_osal/src/os/posix/osfilesys.c
+++ b/cfs_osal/src/os/posix/osfilesys.c
@@ -643,7 +643,7 @@ int32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)
         if (OS_VolumeTable[i].FreeFlag == FALSE)
         {
             path_on_device = skip_prefix(VirtualPath, OS_VolumeTable[i].MountPoint);
-            if (path_on_device && ('/' == *path_on_device))
+            if (path_on_device && (  ('/' == *path_on_device)  ||  ('\0' == *path_on_device) ) )
             {
 #ifdef OS_DEBUG_PRINTF
                 OS_printf(""NumChars: %d\n"", path_on_device + 1 - VirtualPath);
}}}
",bug,https://github.com/nasa/osal/issues/204
(re)create OSAL for OSX,"I use OSX as a development environment and, while I can easily use a VM of Linux, it would be nice to be able to compile/run cFS in OSX natively.

There are a couple issues with using the posix OSAL on OSX:

* There is no timer interface.
* pthreads does not include the priority control API's
* There are no ""_init"" or ""_fini"" externs for stack introspection.
* No vfs.h
* dlsym takes special RTLD_* handles to define its namespace search behavior (NULL does not work.)
","enhancement, wontfix",https://github.com/nasa/osal/issues/203
Readme and makefile updates for OSAL 4.2.1,"The various readme's skipped steps and were confusing when trying to stand up and run a clean set of tests on 64-bit pc-linux.  (If it bit some experienced folks multiple times then others will be bit as well.)

Included a quick unintrusive fix for #200 in tended for pc-linux builds.",bug,https://github.com/nasa/osal/issues/202
pc-linux test results for OSAL 4.2.1,"(In response to cFS CCB AI 117).

This ticket holds the test results for OSAL 4.2.1 (4.2.0 with #189 changes applied).

Results of interest:
* Ran the functional tests and unit tests twice, once for the default mqueue implementation, and once for the socket implementation.
* The only difference between them was the expected queue depth semantics problem with sockets, resulting in one expected unit test failure (see #191 discussion).

Execution notes of interest:
* Executed on x86_64 machine, -m32 edit in osal-config.mak required.
* Encountered #150, and required a manual edit before testing.
* There was a minor build problem with the osloader unit test (x86_64 test files were built, instead of the requested 32-bit item under test).  A re-build using a makefile in the osloader-test was required.  (#200)  Without this the osloader unit tests failed on this x86_64 platform.

There were differences (improvements) in these unit test results compared to the OSAL 4.2.0 unit test results in the tarball.  The released results had more failures, whereas these current tests had none.  Could be a packaging problem?  Details:
* ut_oscore: all tests now passing (was 3 failures), only one is now not-applicable (was 7), overall several formerly-failing and N/A tests were not executed (quick look: not found in unit test source code either, so looks intentional?).
* ut_osfile: all tests now pass (was 1 test setup failure)
* ut_osfilesys: all tests pass
* ut_osloader & ut_osnetwork: all tests pass, identical results as 4.2.0 files
* ut_ostimer: all tests now pass (was 1 failure)

Attached Files:
* delivered OSAL 4.2.0 test results from the tarball (for comparison)
* mqueue test results for this version
* socket test results for this version
* test notes
* Script used to execute the tests filed under #194.",,https://github.com/nasa/osal/issues/201
pc-linux osloader unit test builds wrong test files (x86_64),"On x86_64 Linux platforms, the pc-linux osloader unit test builds the eeprom1 module test files for the x86_64 platform - even when you are building with the -m32 flag in the osal-config.mak file.  

All other tests and binaries are properly built as 32-bit with that osal-config.mak change so the osloader unit tests fail to load 64-bit modules.

The current workaround is to:
{{{
cd osal/build/unit-tests/osloader-test
make -f Modules.mak clean
make -f Modules.mak
# and continue testing
./osloader-test.bin
}}}

","bug, wontfix",https://github.com/nasa/osal/issues/200
Update Version Number for OSAL 4.2.1 Release,"The version number information in the osapi-version.h file needs to be updated to reflect the 4.2 release as follows:

#define OS_MAJOR_VERSION (4)
#define OS_MINOR_VERSION (2)
#define OS_REVISION (1)
#define OS_MISSION_REV (0) ",enhancement,https://github.com/nasa/osal/issues/199
OSAL 4.2.1 Version Description Document Review Cycle,Please see the attached OSAL 4.2.1 VDD open for CCB review (OSAL 4.2.1.0 Version Description Document-Initial.docx) and provide review comments/approval.,bug,https://github.com/nasa/osal/issues/198
Black Box Unit Tests Do Not Ensure Resources Are Cleaned Up Between Tests,"Unit tests should utilize a SetUp and TearDown approach to ensure each test runs in an expected and known configuration.

The TearDown function needs to ensure that all test objects and resources have been deallocated and cleanup.","enhancement, unit-test",https://github.com/nasa/osal/issues/197
Functional Timer Test Hard Codes Configuration Value,"The functional timer test (/src/tests/timer-test/timer-test.c) hard codes the number of timers to 4, which may be higher than the OS_MAX_TIMERS configuration set in osconfig.h.

It is recommended to update the test to use the OS_MAX_TIMERS configuration macro or add protection with an #if guard.","enhancement, unit-test",https://github.com/nasa/osal/issues/196
"VxWorks OSAL uses potentially unsafe ""strcpy"" operations","In at several locations the VxWorks OSAL is using `strcat()` and `strcpy()` functions to copy strings between string buffers that are sized using different macros.

At least one of the sizes in play, the `OS_MAX_PATH_LEN` comes from the user-configurable ""osconfig.h"" file.  Other sizes, such as `OS_FS_PHYS_NAME_LEN` are specified in the local headers and are **not** user-configurable.

In some functions, such as `OS_mkfs` (but not limited to this), a local buffer of size `OS_MAX_PATH_LEN` is copied into a global buffer of size `OS_FS_PHYS_NAME_LEN`.  

However, because the `OS_MAX_PATH_LEN` is configurable via the osconfig.h file, it is not guaranteed that `OS_MAX_PATH_LEN` is less than or equal to `OS_FS_PHYS_NAME_LEN`.



",bug,https://github.com/nasa/osal/issues/195
Missing Documentation on HowTo Build/Run Unit and Functional Tests,"At a minimum a simple readme file should be included under the functional, black box, and white box unit test directories to provide users with some guidance on how to build and run each set of tests.","duplicate, docs",https://github.com/nasa/osal/issues/194
Posix Does Not Alert Users of Undefined Symbol During Load,"The posix OSAL implementation of the OS_ModuleLoad API simply returns OS_ERROR when a bundle fails to load.  This return error code provides no information for users to troubleshoot the cause of the load failure.  In many cases the load error is due to an undefined symbol in the load bundle.  The undefined symbol name may be captured in the string returned by the dl_error() function.  The information captured in the call to dl_error() should be printed via the OS_printf function and/or easily made accessible to users for troubleshooting.    

Note: The VxWorks OSAL implementation of the OS_ModuleLoad API (when OS_DEBUG_PRINTF is defined) will print information to the console when a module cannot be loaded.  Specifically the following OS_printf statement is used:

OS_printf(""OSAL: Error, cannot open application file: %s\n"",translated_path);

  ","duplicate, enhancement",https://github.com/nasa/osal/issues/193
Provide useful output upon posix osloader failure,"The posix osloader.c's OS_ModuleLoad() fails '''very''' tersely providing absolutely no help in figuring out _why_ a module failed to load.

{{{
277	   /*
278	   ** Open the loadble bundle .. just opening it loads it into the system.
279	   */
280	   function_lib = dlopen(translated_path, RTLD_LAZY | RTLD_GLOBAL);
281	   dl_error = dlerror();
282	   if( dl_error )  <=== ""oh so many reasons why""
283	   {
284	      OS_module_table[possible_moduleid].free = TRUE;
285	      return(OS_ERROR);
286	   }
}}}

Various reasons include (but aren't limited to): missing file, bad filename, bad path, bad path mapping, missing symbol, bad/typo entry point in the startup script, etc.  This wastes developer time and frequently forces you into a debugger.

A fix like this helps immensely:
{{{
+++ b/osal/src/os/posix/osloader.c
@@ -282,6 +282,9 @@ int32 OS_ModuleLoad ( uint32 *module_id, const char *module_name, const char *fi
    if( dl_error )
    {
       OS_module_table[possible_moduleid].free = TRUE;
+      /* FIXME - debugging */
+      OS_printf(""OS_ModuleLoad()'s dlopen failed for translated path: %s\n"",(char *)translated_path);
+      OS_printf(""OS_ModuleLoad()'s dlopen error: %s\n"",dl_error);
       return(OS_ERROR);
    }
}}}
","enhancement, invalid",https://github.com/nasa/osal/issues/192
Posix queue depth differs: mqueues vs sockets,"Running the OSAL oscore-test unit test with mqueue vs. sockets (appropriate #define changed in osconfig.h) shows a difference with sockets that wasn't there with mqueues.

{{{
Test #27 Queue-full [FAILED]
FAILED [ ] OS_QueuePut - #27 Queue-full 
}}}

Apparently the socket implementation doesn't implement queue depth checks with the same semantics.  The socket OS_QueueCreate() queue_depth arg is ignored:
{{{
int32 OS_QueueCreate (uint32 *queue_id, const char *queue_name, 
                       uint32 queue_depth,
                       uint32 data_size, uint32 flags)
}}}
The socket OS_QueuePut() looks at the bytes sent, returned from sendto(), and compares them to the message data size, but this results different ""depth"" semantics based on the socket behavior.

The unit test fails because it is expecting the API to honor the queue depth limit and error out on OS_QueuePut(), but it doesn't.","bug, invalid",https://github.com/nasa/osal/issues/191
version_info.cmake looks for wrong tags,"In the current repo we are tagging OSAL releases in the form ""osal-rel-XX"".

However, the version_info.cmake file, which instructs the cmake build system how to filter tags when building the version strings, is looking for ""OSAL-XX"" (caps).

Minor fix.
",bug,https://github.com/nasa/osal/issues/190
Posix socket OS_QueueGet() timeout fails,"We have Linux platforms where the Linux mqueue is not available and we have to use sockets.  However, we're seeing a problem when using sockets vs. mqueues.  When OS_QueueGet() is called with an actual timeout value (msec) the socket implementation appears to always return without properly reporting a message is present.  SB messages pile up.

The outreach drone is one such platform and we see this in our CentOS Linux VM simulation platform (OSAL configured the same for consistency).  (I have a unofficial report from another developer who encountered this as well.)  I think I've seen this on is with the open-source release OSAL as well as the current development branch.

(Likely the default event filters prevented folks from seeing this if they weren't looking at the SB telemetry directly.)

-------
Steps to reproduce:
1) create a clean/pristine cFS build.  (I used a bootstrap script: https://babelfish.arc.nasa.gov/trac/cfs_tools/ticket/35, but it shouldn't matter.)  (I used all the development branches as of 4/26/2016 11:37 Central time.)
2) source setvars.sh
3) cd build/cpu1
4) make config
5) Remove all SB event filters (to see on command line), as in:
{{{
@@ -287,17 +287,17 @@
 **       This filtering applies only to SB events.
 **       These parameters have a lower limit of 0 and an upper limit of 65535.
 */
-#define CFE_SB_FILTERED_EVENT1    CFE_SB_SEND_NO_SUBS_EID
-#define CFE_SB_FILTER_MASK1       CFE_EVS_FIRST_4_STOP
+#define CFE_SB_FILTERED_EVENT1    0
+#define CFE_SB_FILTER_MASK1       CFE_EVS_NO_FILTER
 
-#define CFE_SB_FILTERED_EVENT2    CFE_SB_DUP_SUBSCRIP_EID
-#define CFE_SB_FILTER_MASK2       CFE_EVS_FIRST_4_STOP
+#define CFE_SB_FILTERED_EVENT2    0
+#define CFE_SB_FILTER_MASK2       CFE_EVS_NO_FILTER
 
-#define CFE_SB_FILTERED_EVENT3    CFE_SB_MSGID_LIM_ERR_EID
-#define CFE_SB_FILTER_MASK3       CFE_EVS_FIRST_16_STOP
+#define CFE_SB_FILTERED_EVENT3    0
+#define CFE_SB_FILTER_MASK3       CFE_EVS_NO_FILTER
 
-#define CFE_SB_FILTERED_EVENT4    CFE_SB_Q_FULL_ERR_EID
-#define CFE_SB_FILTER_MASK4       CFE_EVS_FIRST_16_STOP
+#define CFE_SB_FILTERED_EVENT4    0
+#define CFE_SB_FILTER_MASK4       CFE_EVS_NO_FILTER
 
 #define CFE_SB_FILTERED_EVENT5    0
 #define CFE_SB_FILTER_MASK5       CFE_EVS_NO_FILTER
}}}

6) cd exe and run core-linux.bin & wait for 30-60 seconds
As expected, running with mqueues by default, there will be no significant event messages after:
{{{
ES Startup: CFE_ES_Main entering OPERATIONAL state
}}}

Now, to switch to sockets and show the problem:
7) Edit build/cpu1/inc/osconfig.h as:
{{{
@@ -132,7 +132,7 @@
 ** This define sets the queue implentation of the Linux port to use sockets 
 ** commenting this out makes the Linux port use the POSIX message queues.
 */
-/* #define OSAL_SOCKET_QUEUE */
+#define OSAL_SOCKET_QUEUE
 
 /*
 ** Module loader/symbol table is optional
}}}
8) make clean;make
9) cd exe and run core-linux.bin & wait for 30-60 seconds, you'll see:
{{{
1980-012-14:03:20.26138 ES Startup: CFE_ES_Main entering OPERATIONAL state
Warning: System Log full, log entry discarded.
EVS Port1 66/1/CFE_TIME 21: Stop FLYWHEEL
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1808,pipe ES_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1808,pipe ES_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1808,pipe ES_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1885,pipe CI_LAB_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1883,pipe SAMPLE_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1808,pipe ES_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1885,pipe CI_LAB_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1883,pipe SAMPLE_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1808,pipe ES_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1885,pipe CI_LAB_CMD_PIPE,sender SCH_LAB_APP
EVS Port1 66/1/CFE_SB 17: Msg Limit Err,MsgId 0x1883,pipe SAMPLE_CMD_PIPE,sender SCH_LAB_APP
}}}

Each of these apps/services invokes CFE_SB_RcvMsg() with a timeout value:
* cFE ES: 1000ms
* CI_LAB & SAMPLE_APP: 500ms
 
They delegate to CFE_SB_ReadQueue() and to OS_QueueGet() with a timeout value.
","bug, wontfix",https://github.com/nasa/osal/issues/189
"OS_TranslatePath using ""%*s"" where ""%.*s"" is correct","While resolving cppcheck messages, a `strncpy()` inside `OS_TranslatePath()`
was replaced by an `snprintf()` call.

Unfortunately, the intended `""%.*s""` format string was typo-decayed
into a `""%*s""` resulting in the value of `devname` including more
of the virtual path than intended.

Fortunately, the use of `strncmp()` later prevents this from actually
generating incorrect results.

To prevent anyone from picking up this `snprintf()` call and using it
as a model for other `strncpy()` replacement code, I would like to
fix the format string ...

For the record, the original code was:

{{{
strncpy(devname, VirtualPath, NumChars);
devname[NumChars] = '\0'; /* Truncate it with a NULL. */
}}}

The modified code was supposed to be:

{{{
snprintf(devname, OS_MAX_PATH_LEN, ""%.*s"", NumChars, VirtualPath);
}}}

The code as actually committed was:

{{{
snprintf(devname, OS_MAX_PATH_LEN, ""%*s"", NumChars, VirtualPath); 
}}}

NOTE: OS_TranslatePath could also be refactored to eliminate
the need for internal buffers to hold copies of the input,
but that is a larger and longer task (prototype working but
needs testing and more testing).
","bug, wontfix",https://github.com/nasa/osal/issues/188
create a configuration file loader API,OSAL should provide an API for loading text configuration files (akin to tables).,"enhancement, wontfix",https://github.com/nasa/osal/issues/187
CMake separate flags for C++ builds,"When building OSAL applications that use C++, it is required to use a separate variable for the compiler flags, because sometimes these are incompatible with C compiler flags.

CMake has a separate ""CMAKE_CXX_FLAGS"" variable for C++ compiler commands.

Most importantly this issue becomes apparent if you use `-std=c99`.  g++ rejects this option and it needs to be `-std=c++98` (or whatever) instead.


",bug,https://github.com/nasa/osal/issues/186
OS_SymbolLookup Function Prototype Variable Names Do Not Match Implementation,"The OS_SymbolLookup function prototype (in osapi-os-loader.h) defines the prototype to be:

int32 OS_SymbolLookup (cpuaddr *symbol_address, const char *symbol_name );

While the implementations of this function declares the function with variable names that do not match the prototype:

int32 OS_SymbolLookup( cpuaddr *SymbolAddress, const char *SymbolName )

This could result in compiler errors/warnings on certain platforms.  It is recommended to update the prototype variable names to match the implementations.","bug, wontfix",https://github.com/nasa/osal/issues/185
implement osapi-os-net.h,"SBN, and other applications, would benefit from an OSAL layer over network interfaces.

Per the CCB action item 29, ""Update SBN to use the new OSAL network/socket APIs"". But there is no implementation of the osapi-os-net.h interfaces.","enhancement, wontfix",https://github.com/nasa/osal/issues/184
Trick OSAL,There is growing interest in being able to use the Trick OSAL/PSP so that a CFS build can be executed within a Trick simulation - basically allowing developers to fly unmodified FSW within an all SW simulation environment on their desktop.  The approach was used extensively and successfully on the Morpheus project.  The Trick OSAL/PSP were developed a few years ago.  Some work will be necessary to get them up and running again with the latest CFS.,"enhancement, wontfix",https://github.com/nasa/osal/issues/183
Add API to read tick counter from TimeBase object,"The ""TimeBase"" OSAL API (already merged) should include the ability to read the internal counter value.

This can cover the same use-cases that the old trac #32 was targeting, without the pitfalls that were brought up with that solution.",duplicate,https://github.com/nasa/osal/issues/182
OSAL 4.2 Version Description Document Review Cycle,"Attached OSAL 4.2 VDD is open for CCB review.  Please attached any tracked changes/comments with initials included in document filename i.e. ""OSAL 4.2.0.0 Version Description Document-sls.docx"".  Following the CCB review cycle, when all changes have been reviewed/accepted or rejected, the document will be open for signature and release.",enhancement,https://github.com/nasa/osal/issues/181
Allow C99 code in OSAL.,"Update compiler flags to allow C99 code to be used
everywhere in OSAL.
",bug,https://github.com/nasa/osal/issues/179
Update Version Number for OSAL 4.2 Release,"The version number information in the osapi-version.h file needs to be updated to reflect the 4.2 release as follows:

#define OS_MAJOR_VERSION (4)
#define OS_MINOR_VERSION (2)
#define OS_REVISION      (0)
#define OS_MISSION_REV   (0)  ",enhancement,https://github.com/nasa/osal/issues/178
OS_readdir cannot be called with a closed handle,"ut_osfile_dirio_test.c closes a directory handle with OS_closedir but then uses it again with OS_readdir to perform a test. This causes a memory issue on vxWorks. (Either the osal should return some id from a table that guards against this, and that id should never be used again to prevent double-free, or the test is invalid.)","bug, duplicate",https://github.com/nasa/osal/issues/177
utlist can use malloc(0) and memcpy of 0 size data,"It's ok for memcpy to use 0 byte data, but the behavior of malloc with 0-byte data is inconsistent across platforms. This is not a required fix, however some static code analyzers might complain. 

(The size of the malloc is dependent on data passed into it.)

[changeset:93b15ea] ready for CCB review",duplicate,https://github.com/nasa/osal/issues/176
ostimer unit test uses OS_IdleLoop but not OS_Application_Shutdown,"This prevents the unit test from successfully returning.

[changeset:ea1fcdd] ready for CCB review",bug,https://github.com/nasa/osal/issues/175
vxWorks OSAL implementation needs OS_IdleLoop and OS_Application_Shutdown,"[changeset:facd2b3] ready for CCB review
",bug,https://github.com/nasa/osal/issues/174
timer-test.c has a difficult time obtaining a count for timer4 due to the start delay.,"I increased the loop count of the OS_TaskDelays, which can be interrupted by signals. On vxWorks this allows the test to pass.

[changeset:b8e8bb] ready for CCB review",bug,https://github.com/nasa/osal/issues/173
vxWorks OSAL implementation should use static initialization where possible,"OSAL has a concept of tables of resources, where the user can configure some maximum amount of those resources. 

For example, the binary semaphore table could contain the static bytes of memory for the semaphore itself (using VX_BINARY_SEMAPHORE or an array of size VX_SEMAPHORE_SIZE taking care to maintain proper alignment) and then use semBInitialize on that memory when the OSAL wants to create a binary semaphore instead of allocating one from the resource pool. The user configures the maximum number of resources of each type, so it's ok to use the memory.

This enhancement would increase determinism in the system while maintaining the current API.","enhancement, invalid",https://github.com/nasa/osal/issues/172
OS_API_Init() does not correct cleanup resources on error,"OS_API_Init initializes several OS primitives but is made with a pattern of exiting as soon as any initialization fails without cleaning up previous successful initializations. For example:

OS_task_table_sem = semMCreate(SEM_Q_PRIORITY | SEM_INVERSION_SAFE );
if ( OS_task_table_sem == NULL )
{
    return(OS_ERROR);
}

OS_queue_table_sem = semMCreate(SEM_Q_PRIORITY | SEM_INVERSION_SAFE );
if ( OS_queue_table_sem == NULL )
{
    return(OS_ERROR);
}

If OS_task_table_sem successfully initializes, but OS_queue_table_sem does not, then OS_task_table_sem will become a leaked resource.","bug, invalid",https://github.com/nasa/osal/issues/171
posix impl should use timer_t instead of uint32 for host_timerid,"The POSIX implementation of OSAL uses timer_create in ostimer.c but stores the timerid in a uint32 instead of a timer_t as per the posix specification. This would also deal with any size issues (32-bit vs 64-bit) that may occur when building.

I've checked in a fix [changeset:5773e4faf0]",bug,https://github.com/nasa/osal/issues/170
Add Unit Test Baseline Results and Log Files,"The unit test baseline (specifically for the posix and VxWorks implementations that have undergone unit testing for the 4.2.0 release) needs to be included and delivered with the release.  

It is recommended to create a ""Results"" directory under /src/unit-test-coverage/os for each os implementation that has been unit tested for this release.  ",bug,https://github.com/nasa/osal/issues/169
OS_API_Init() should be called before any OSAL calls are used in the unit tests,The unit tests vary in how (or if) they call OS_API_Init() before any OSAL calls are used.,bug,https://github.com/nasa/osal/issues/168
ostimer unit test needs non-zero stack size parameter passed to OS_TaskCreate,The call to OS_TaskCreate in ostimer-test.c needs a non-zero stack-size.,bug,https://github.com/nasa/osal/issues/167
stack_size parameter should be checked for reasonable value in OS_TaskCreate vxWorks implementation,OS_TaskCreate calls vxWorks's taskSpawn() and passes the passed stack_size parameter to it. vxWorks does not appear to check this for a reasonable value. The OSAL should do that and then reject an unreasonable value (<4k or something) with an error code.,wontfix,https://github.com/nasa/osal/issues/166
"UT assert library has uninitialized ""UtTestDataBase"" global variable","The ""UtTestDataBase"" global, which is used as the primary node to the list of tests to run, is not initialized to a known state. 

This mostly works anyway due to the fact that most systems will zero out their BSS segment automatically while loading an exe, however some systems do not do this.

We should have an ""init"" function for UT assert that can be called during test setup, that can ensure that all globals are put to a known state.",duplicate,https://github.com/nasa/osal/issues/165
Cleanup Relative Paths Used in Makefiles,Several of the OSAL makefiles use relative paths i.e. include ../../osal-config.mak.  Use of relative paths is prone to error and requires users to maintain a pre-defined directory structure that is hidden and not clearly documented.  Relative paths should be replaced with environment variables to allow flexibility in mission/project directory trees.,wontfix,https://github.com/nasa/osal/issues/164
OSAL 4.2 Configuration Guide Updates,"OSAL 4.2 will be delivered with cmake and UT Assert library stubs and hook functions.  The OSAL configuration guide should be updated to provide instruction for using cmake.  The UT Assert library and coverage tests should be mentioned in the ""OSAL source distribution directories"" table under section 2.1.1.",enhancement,https://github.com/nasa/osal/issues/163
ostimer OS_TimerSet may fail when testing on a VM,"From time to time, I observe the OS_TimerSet test in ostimer
failing when being tested in the virtual machine environment
used for bamboo testing for the simple reason that the VM
itself is not actually a ""real time"" process.

It might be useful to work out a way to perform this test that
allows for the ""squishiness"" of the VM envinroment, without
giving up the tightness of the test for real targets.

",duplicate,https://github.com/nasa/osal/issues/162
function declaration is not a prototype,"
cppcheck messages:
{{{
src/ostimer.c:17: warning: function declaration isn't a prototype
}}}

Note that this is the `src/ostimer.c` in the unit-test-coverage tree.
","bug, wontfix",https://github.com/nasa/osal/issues/161
uninitialized variables (initial cppcheck detection),"NOTE: as cppcheck gets more interesting stuff in cppcheck.cfg we may uncover more independent instances of uninitialized variables. TBD whether they lump in with this ticket or get a new one. Probably a new one if we close these promptly, which we should ...

cppcheck messages:
{{{
src/unit-tests/oscore-test/ut_oscore_queue_test.c:552: error: Uninitialized variable: queue_data_out
src/unit-tests/oscore-test/ut_oscore_queue_test.c:562: error: Uninitialized variable: queue_data_out
}}}

",bug,https://github.com/nasa/osal/issues/160
Same expression on both sides of a binary operator,"cppcheck message:
{{{
src/unit-tests/osfile-test/ut_osfile_fileio_test.c:2537: style: Same expression on both sides of '||'.
}}}

This can helpfully point out copy-paste-edit errors where an expression
was copied and pasted but not actually edited.
",bug,https://github.com/nasa/osal/issues/159
repeated assignments without using the value (real code edition),"cppcheck messages:
{{{
src/os/vxworks6/osnetwork.c:73: performance: Variable 'retval' is reassigned a value before the old one has been used.
src/os/vxworks6/ostimer.c:331: style: Variable 'status' is assigned a value that is never used.
}}}

Recommended fix methods, PICK ONE:
1. Actually check the status variables to see if an error was returned
2. put a `(void)` cast on the function call instead of storing the data that is not actually ever going to be looked at. This advertises to maintainers and to the compiler and to static analysis that we are purposefully ignoring the return value of the function.

It would be a good idea to check the posix and rtems implementations to see if they have the same construct in this place.

See ticket #157 for the same problem occurring very frequently in unit test code.
",bug,https://github.com/nasa/osal/issues/158
repeated assignments without using the value (unit test edition),"cppcheck messages:
{{{
src/tests/mutex-test/mutex-test.c:47: performance: Variable 'status' is reassigned a value before the old one has been used.
src/tests/mutex-test/mutex-test.c:100: performance: Variable 'status' is reassigned a value before the old one has been used.
src/tests/mutex-test/mutex-test.c:154: performance: Variable 'status' is reassigned a value before the old one has been used.
src/unit-tests/oscore-test/ut_oscore_task_test.c:205: performance: Variable 'res' is reassigned a value before the old one has been used.
src/unit-tests/oscore-test/ut_oscore_task_test.c:508: performance: Variable 'res' is reassigned a value before the old one has been used.
src/unit-tests/oscore-test/ut_oscore_task_test.c:522: performance: Variable 'res' is reassigned a value before the old one has been used.
src/unit-tests/oscore-test/ut_oscore_task_test.c:594: performance: Variable 'res' is reassigned a value before the old one has been used.
(484 more lines...) 
}}}

There are two lines indicating sources outside testing, a separate bug
has been filed as we may put more priority on fixing those lines than
on globally smashing this bug in the test code.

Recommended fix methods, PICK ONE:
1. Actually check the status variables to see if an error was returned
2. put a `(void)` cast on the function call instead of storing the data that is not actually ever going to be looked at. This advertises to maintainers and to the compiler and to static analysis that we are purposefully ignoring the return value of the function.


",wontfix,https://github.com/nasa/osal/issues/157
readdir is not reentrant,"cppcheck messages:
{{{
src/os/posix/osfileapi.c:1143: portability: Non reentrant function 'readdir' called. For threadsafe applications it is recommended to use the reentrant replacement function 'readdir_r'.
}}}

Be sure to check vxworks and rtems implementations, they may also need fixing.
","bug, wontfix",https://github.com/nasa/osal/issues/156
test for unsigned variable less than zero,"cppcheck messages:
{{{
src/os/posix/osapi.c:2273: style: Checking if unsigned variable 'sem_initial_value' is less than zero.
src/os/posix/osapi.c:2794: style: Checking if unsigned variable 'sem_initial_value' is less than zero.
}}}

NOTE: be sure to check the vxworks and rtems versions, they may also need fixing.
",bug,https://github.com/nasa/osal/issues/155
unreachable flow control,"cppcheck messages:
{{{
src/tests/osal-core-test/osal-core-test.h:347: style: Consecutive return, break, continue, goto or throw statements are unnecessary.
}}}

Yes, the code does have two return statements in a row (this is not the
case where cppcheck was getting hideously confused in a header).
",bug,https://github.com/nasa/osal/issues/154
strncpy may not '\0'-terminate,"cppcheck messages:
{{{
src/os/posix/osfileapi.c:1316: warning: The buffer 'LocalCmd' may not be null-terminated after the call to strncpy().
src/os/posix/osfilesys.c:648: warning: The buffer 'filename' may not be null-terminated after the call to strncpy().
}}}

Joe looked at this during the 2015-12-08 CCB meeting and indicated
that the code involved needs fixing. Joe, I'm sending this to you
in case you want to punch it out; otherwise, just toss it back and
we can queue up the issue normally.

",bug,https://github.com/nasa/osal/issues/153
osloader_testcase code cleanup and resolution of cppcheck results,"cppcheck messages:
{{{
osloader_testcase.c:56: style: struct or union member 'TESTCOPYSymbolRecord_t::SymbolName' is never used.
osloader_testcase.c:57: style: struct or union member 'TESTCOPYSymbolRecord_t::SymbolAddress' is never used.
}}}

This structure exists in order to take the size of the structure
containing these fields, so our code will be retaining the fields
and will not be referring to them.

We need to tell cppcheck that, in these two specific cases,
it is perfectly OK for these members to be unused.

EDIT - ticket diverged to also clean up function pointers, memsets, test logic suggestions, etc
","enhancement, invalid",https://github.com/nasa/osal/issues/152
usleep is obsolete,"
The exact cppcheck message, apparing for these lines
{{{
src/unit-tests/oscore-test/ut_oscore_misc_test.c:507
src/unit-tests/oscore-test/ut_oscore_misc_test.c:601
src/unit-tests/oscore-test/ut_oscore_misc_test.c:626
}}}
in the current development tree, is
{{{
Obsolete function 'usleep' called. It is recommended to use the 'nanosleep' or 'setitimer' function instead.
}}}
",bug,https://github.com/nasa/osal/issues/151
May need -rdynamic,"The SymbolApiTest reports that, if we do not use -rdynamic when linking, modules may not include all of the symbols that they expect to export.

Ticket #147 reduces the invasive patching of the build rules being done by the Bamboo support scripts; that patching was forcing -rdynamic into one of the headers. With that invasive patching gone, SymbolApiTest now fails.

Alternatives to pick from:
1. Always use -rdynamic (for the platform where it is meaningful)
2. Change SymbolApiTest to not need it to be specified
3. Reinstantiate Bamboo code that forces the flag to be used.

Need to look at the exact effects of -rdynamic and decide when
these are needed versus when they are undesirable.
","bug, invalid",https://github.com/nasa/osal/issues/150
Reconcile diffs between unit test makefiles and JSC UT makefiles,"Here is a summary(from Joe Hickey) of what I see as differences between the JSC oscore-test
Linux makefile (attached above) and what we currently have in the ""build""
subdirectory in OSAL (this changeset).  This is what would have to be
reconciled before the JSC makefile and the OSAL makefile could be called
""compatible"" again:

Variable/macro value settings:

 * `APPTARGET`: JSC uses `UT_oscore` vs. `oscore-test` in OSAL
 * `LOCAL_COPTS`: JSC uses externally defined $(OSAL_UT_FLGS) and $(UT_COV_FLGS)    make variables, the OSAL makefile actually sets this blank
 * `OSAL_OBJS`: JSC makefile only specifies the one object specifically under test, OSAL makefiles specify all OSAL objects here.
 * `INCLUDE_PATH` and `VPATH`: JSC references externally-defined $(MISSION_HOME), $(CFS_MISSION_INC), $(OSAL_TST_SRC) variables.  OSAL makefiles are all based on $(OSAL_SRC)

Included sub-makefile component pathname differences:

 * '''osal-config.mak''': JSC has `include ../osal-config.mak` and OSAL makefiles have `include ../../osal-config.mak`
 * '''debug-opts.mak''': JSC has `include ../osal-debug-opts.mak` and OSAL has `include ../../debug-opts.mak` (note the lack of ""osal-"" prefix in addition to the relative path difference)
 * '''compiler-opts.mak''': JSC has relative path `include ../osal- compiler-opts.mak` and OSAL has an absolute path `$(OSAL_SRC)/bsp/$(BSP)/make/compiler-opts.mak`
 * '''app-rules.mak''': JSC has relative path `include ../osal-app- rules.mak` and OSAL has absolute path `$(OSAL_SRC)/make/app-rules.mak`

Target differences:

 * JSC overrides the default rule for `$(APPTARGET)`
 * JSC defines a `run` target that actually executes the test - OSAL makefile does not define this
 * JSC defines a `coverage` target that calls `$(UT_COV_TOOL)` and scrubs the output.  OSAL makefile does not define this.",enhancement,https://github.com/nasa/osal/issues/149
Add SPARC-VxWorks6.7 BSP,Need to add a SPARC VxWorks 6.7 OSAL BSP so that the OSAL unit tests for VxWorks can build and run right from the OSAL directory out of the box (assuming that you have an installation of the SPARC BSP and VxWorks 6.7 tool chain),enhancement,https://github.com/nasa/osal/issues/148
"resolve ""-m32"" OSAL classic build issues","The classic OSAL build historically built for 32-bit x86 linux,
on 32-bit x86 linux build machines.

Building on a 64-bit x86 Linux server requires the use of the ""-m32""
flag, but ONLY when the target is the classic 32-bit x86 linux. This
also requires that the server has 32-bit goodies, often ""multilib"" is
the thing you need to google if this is busted.

Currently, inserting this flag where it is missing or removing it where
it is present requires editing files, which is a speedbump for developers
and a blocker for automatic systems when building both 32-bit x86 and
any other target.

Need to set up the classic makefiles so that we default to -m32 not being
present, and allow it to be inserted on demand from the command line or
via an environment variable (at the developer's option, both need support).

",bug,https://github.com/nasa/osal/issues/147
cppcheck a vxworks build,"I need to go through the somewhat manual (for now) process
of grinding out some cppcheck results for ""development"" osal
on our lab machine that has VxWorks capability.

",duplicate,https://github.com/nasa/osal/issues/146
Expand cppcheck application,"The initial ""cppcheck"" configuration has been running for a while and looks both useful and stable, but is not using the full power of cppcheck.

I need to research the more advanced features of CPPCHECK and
how to make them useful in our environment.

This is likely to require someone (probably me) to evaluate each function exposed in each API for the documented intent of the function with respect to these features, and encode them in the `cppcheck.cfg` file.

This task may take a significant amount of time. In the interest of getting utility out of the effort quickly, I will break it up into smaller chunks that can be managed independently -- and once the ball gets rolling, with luck, allow more than one person to generate configuration file data.

My plan is to identify one CPPCHECK feature at a time, write a comment on this ticket about the feature, then open a separate ticket to track setting up that feature.
",enhancement,https://github.com/nasa/osal/issues/145
OSAL API Documentation Should Be Doxygen Based,"The OSAL API documents are currently available as separate word and .pdf documents.  The API's are defined and maintained in the source code.  Any changes or new findings to the API's can easily get left undocumented, creating a disconnect between the source code and what is stated in the OSAL API word and .pdf documents.  It is highly recommended to couple the documentation with the source code via doxygen. ",enhancement,https://github.com/nasa/osal/issues/144
Support Insertion/Integration of Third Party/Bridge Libraries,"Missions/Projects may have the need/requirement to use specific implementations of functions provided by third party libraries i.e. ARINC 653 does not include a printf function.  

Third party libraries cannot legally be included within an official release of the OSAL.  The OSAL currently does not provide a generic means of integrating third party libraries into the OSAL.

See ticket #57 for more details ","enhancement, wontfix",https://github.com/nasa/osal/issues/143
Fix up pointer subtraction (do not cast to integers),"Pointer subtraction works. Code that casts the pointers
into integer types differs from the correct code only in
its obfuscation.

Additionally, where pointer subtraction is used to determine
the length of a string, the entire sequence should be replaced
by a call to strlen().

On a side note, dividing by ""sizeof(char)"" is also mere obfuscation
as the standard defines that sizeof returns the size in (char) units.

Note that when attempting to compile for 64-bit targets, these will usually be flagged as ""casting pointer to wrong sized integer"" -- this may help to find problematic code.

Start with OS_check_name_length().
",bug,https://github.com/nasa/osal/issues/142
JSC: general code cleanup,"Originally implemented as part of trac #45 and isolated for CCB review purposes.

General code clean up modifications:
* Make all if/then/else as compound statements
* add ""void"" to functions that do not take parameters
* add final ""else"" to all ""else if"" constructs
* make sure all cases in switch stametents have break
* add explicit casting where the compiler may emit warnings
* Add ""static"" and ""extern"" keywords where needed
",bug,https://github.com/nasa/osal/issues/141
JSC: change fpu get/set mask function return code,"Originally done as part of trac #45 and isolated for CCB review purposes.

Changes the return code of the `OS_FPUExcSetMask()` and `OS_FPUExcGetMask()` functions to return `OS_ERR_NOT_IMPLEMENTED` for builds that do not have such a mask register.",bug,https://github.com/nasa/osal/issues/140
JSC: use fixed width types,"Originally part of trac #45 and isolated for CCB review purposes.

Replace use of native `int` with fixed-width `int32` typedef.",bug,https://github.com/nasa/osal/issues/139
JSC: Audit vxworks6 global table protections,"Originally part of trac #45, isolated for CCB review purposes.

Audit the usage of `semTake()` / `semGive()` calls surrounding global table accesses and adjust where needed.



",bug,https://github.com/nasa/osal/issues/138
JSC: add static initializers to all local variables,Originally done as part of trac #45 and split off for CCB review purposes.  Only affects vxworks6 OSAL.,"bug, duplicate",https://github.com/nasa/osal/issues/137
"JSC: Replace ""UNINITIALIZED"" macro with ""OS_UNINITIALIZED""","Originally part of trac #45 and split off for review purposes.  Only affects vxworks6.



",bug,https://github.com/nasa/osal/issues/136
Integrate JSC audit of parameter and return code checking,"Originally part of trac #45 and split off for CCB review purposes.

JSC has done an audit of input parameter checking and intermediate return code checking and added multiple checks/returns.

Primarily affects vxworks6 but some posix code was touched as well.",bug,https://github.com/nasa/osal/issues/135
JSC updated API tests,"Integrate JSC updates to API (black-box) tests.  Originally implemented as part of trac #45, split off for CCB review purposes",enhancement,https://github.com/nasa/osal/issues/134
Add JSC coverage tests (originally #22),"Separated from original trac #45 - Add ""white box"" coverage tests for vxworks6 OSAL.

",enhancement,https://github.com/nasa/osal/issues/133
Improve cppcheck configuration for OSAL,"The initial level of support for ""cppcheck"" within the OSAL build plan is a simple implementation using default checking, widened to maximize coverage but not otherwise tuned.

While any individual mission or project using OSAL may decide to do this work, this is only mildly in their direct interest, but it is very much in the interest of the CFS Community as a whole that it gets done.

We can make cppcheck more useful, both for checking the OSAL itself and for checking code that uses it, by setting up a configuration file that tells cppcheck as many details as possible about the intended interfaces. For example:

- indicating functions that acquire and release resources so that cppcheck can attempt to report failures to release a resource; this is not just memory allocation but includes lock aquisition and anything else managed using one function to acquire (or open or connect ...) and another to release (or close or disconnect).

- indicating where a function requires that a pointer, passed as a function parameter, must point to initialized memory, so that cppcheck can report things like ""trying to strcopy where the source array has not been initialized.""

There are other details we can also express in the cppcheck library configuration file, generally of flavor similar to the above.
","duplicate, enhancement",https://github.com/nasa/osal/issues/132
cppcheck warns us that strncpy behavior is obscure.,"As reported by cppcheck warning:

If the source string's size fits or exceeds the given size, strncpy() does not add a zero at the end of the buffer. This causes bugs later in the code if the code assumes buffer is null-terminated.

This message is present in 4 files:

{{{
osal/src/os/posix/osfileapi.c
osal/src/os/posix/osfilesys.c
osal/src/os/vxworks6/osfileapi.c
osal/src/os/vxworks6/osfilesys.c
}}}

Need to examine the fingered bits of code, see if any
of them need fixing, and figure out how to get cppcheck
to be happy.

When checking this, our official stand on telemetry records
is that arrays in telemetry records containing text have
fixed size and that consumers of the data must not assume
that they contain a terminating `\0` character.

This is the classical case where this strncpy behavior on
data overflow is desired as defined.
","bug, duplicate",https://github.com/nasa/osal/issues/131
Value stored is never used,"As reported by cppcheck style:

Variable % is assigned a value that is never used.

This message is present in 3 files:

{{{
osal/src/os/vxworks6/ostimer.c
osal/src/unit-tests/oscore-test/ut_oscore_task_test.c
osal/src/unit-tests/osloader-test/ut_module.c
}}}

Need to examine the fingered bits of code, see if any
of them need fixing, and figure out how to get cppcheck
to be happy.
","bug, duplicate",https://github.com/nasa/osal/issues/130
Unreachable flow control statements,"As reported by cppcheck style:

Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.

This message is present in 2 files:

{{{
osal/src/os/vxworks6/osapi.c
osal/src/tests/osal-core-test/osal-core-test.h
}}}



Need to examine the fingered bits of code, see if any
of them need fixing, and figure out how to get cppcheck
to be happy.

","bug, duplicate",https://github.com/nasa/osal/issues/129
Overwriting unused values in variables,"
As reported by cppcheck performance
applied to the ""ic-gll-jsc-merge"" branch:

Variable % is reassigned a value before the old one has been used.

This message is present in 17 files:

{{{
osal/src/os/vxworks6/osapi.c
osal/src/os/vxworks6/osnetwork.c
osal/src/tests/mutex-test/mutex-test.c
osal/src/unit-tests-coverage/osapi-test/osapi_testcase_binsem.c
osal/src/unit-tests-coverage/osapi-test/osapi_testcase_queues.c
osal/src/unit-tests-coverage/osapi-test/osapi_testcase_tasks.c
osal/src/unit-tests-coverage/osapi-test/osapi_testcase_time_int.c
osal/src/unit-tests-coverage/osfileapi-test/osfileapi_testcase.c
osal/src/unit-tests-coverage/osfilesys-test/osfilesys_testcase.c
osal/src/unit-tests-coverage/osloader-test/osloader_testcase.c
osal/src/unit-tests-coverage/ostimer-test/ostimer_testcase.c
osal/src/unit-tests/oscore-test/ut_oscore_binsem_test.c
osal/src/unit-tests/oscore-test/ut_oscore_countsem_test.c
osal/src/unit-tests/oscore-test/ut_oscore_mutex_test.c
osal/src/unit-tests/oscore-test/ut_oscore_queue_test.c
osal/src/unit-tests/oscore-test/ut_oscore_task_test.c
osal/src/unit-tests/osfile-test/ut_osfile_dirio_test.c
}}}

Need to examine the fingered bits of code, see if any
of them need fixing, and figure out how to get cppcheck
to be happy.
",duplicate,https://github.com/nasa/osal/issues/128
Overwriting unused buffer content,"As reported by cppcheck performance:

Buffer % is being written before its old content has been used.

Reported against:
{{{
src/unit-tests/osfile-test/ut_osfile_fileio_test.c:910
src/unit-tests/osfile-test/ut_osfile_fileio_test.c:1089
src/unit-tests/ostimer-test/ut_ostimer_test.c:100
}}}
... and a bunch of places in ut_os_stubs.c

Need to examine the fingered bits of code, see if any
of them need fixing, and figure out how to get cppcheck
to be happy.","bug, duplicate",https://github.com/nasa/osal/issues/127
readdir is not reentrant,"As reported by cppcheck portability:

Non reentrant function 'readdir' called. For threadsafe applications it is recommended to use the reentrant replacement function 'readdir_r'.

Reported against:

osal/src/os/posix/osfileapi.c
","bug, duplicate",https://github.com/nasa/osal/issues/126
"GCOV results for ""osapi"" obscured.","The ""make gcov"" target for the ""osapi"" coverage test
feeds the output of GCOV through some SED scripting
that was originally constructed to handle GCOV output
for a single source file.

For the OSAPI case, however, GCOV is being handed data
that covers both the adapter source file and the original
source file.

The sequence of line joins and line edits provided does
not produce correct output for this case: it does manage
to generate the coverage line for the adapter source, but
the heuristic deals badly with the remainder of the file.
It would have worked if the second ""File"" line happened
to fall on an odd line number.
",bug,https://github.com/nasa/osal/issues/125
Add GCOV summary report,"We are running GCOV on the OSAL /unit-tests-summary/ programs
and preserving the details, but there is no coverage summary
available from a central location.
","bug, duplicate",https://github.com/nasa/osal/issues/124
Standardize Version Numbering (in OSAL),"Bring version number management within OSAL into line
with the cFS standards documented at

https://babelfish.arc.nasa.gov/trac/cfs_test/wiki/ReferenceVersion

","enhancement, invalid",https://github.com/nasa/osal/issues/123
Posix message queues leak.,"During testing, I notice that I sometimes get MSGQ test failures
despite having the ""queues per process"" configuration set to
a high enough value, and rebooting fixes the issue.

After one spate of reboots, I went and did some digging, and we
do seem to be actively leaking Posix Message Queues, at least
during testing: posix message queues have identities, and can
stick around when nobody has them open, and of course there is
a finite limit to them in the system.

Fortunately, /dev/mqueue shows us all of the queues that exist
in the system, and if you remove the entry in /dev/mqueue, the
message queue itself is removed.

I have implemented code in my testing scripts that aggressively
watches for message queue leaks during testing.

What I am seeing so far:

 - The CFE ""Run the Core until the deadman timer trips"" test
   can leave behind many queues.

 - The OSAL ""queue timeout test"" can leave behind a queue. 

It would be worthwhile to assure that only operations unique
to unit testing (such as ""kill -9 $CFECORE"" ...) leak these.
","bug, invalid",https://github.com/nasa/osal/issues/122
Simplify Function Pointer Manipulations,"There are a number of places within the CFS Projects where the usage of Function Pointers is somewhat obfuscated by the inclusion of redundant operators. Removing those operators can improve the clarity of the code.

The redundancies are based on code that, when written, did not properly base itself on the following aspects of Function Pointers in the C programming language.

1. Function names decay into Function Pointers in the same way
   that Array names decay into pointers to their first elements,
   which means that an `&` operator is redundant when setting a
   pointer to point at a function. For the classical example of
   this, see most `qsort` examples, where no `&` is applied to
   the comparison function when passing it as the last argument,
   which has type ''pointer to function...''

2. The function call operator `(`''args''`)` operates on a
   function pointer -- so every function call you see actually
   is invoking the above decay semantics. This means that
   the `*` operator is ''not'' needed when calling a function
   via a function pointer. Happily, this also often means that
   you also do not need an extra level (or two?!) of parentheses
   to asure that the `*` is applied to the function pointer and
   not to the return value.

3. Calling a function pointed to by a structure member is a
   very common operation, and with the above in mind, note that
   there is no parsing or evaluation order ambiguity; no extra
   parentheses are required to assure that `.` and `->` and the
   function call operator are evaluated in the proper order.

My task -- embodied in this ticket -- is to seek out cases in
the OSAL source code where redundant operations are applied
to function pointers (at assignment sites ''and'' at call sites),
and provide recommended changes to improve clarity.

Specific examples will accumulate in the Comments below.

Ticket to be closed when my scan of the project is complete,
and all call sites have been resolved (whether the resolution
is to improve them now, file a ticket for later improvement,
or where we will be leaving the code unchanged).

''(This also makes the code robust against the rare but troublesome
case where an external function changed from a function to
a function pointer ... we may never do this, but it is always
good to foster good code hygene.)''",enhancement,https://github.com/nasa/osal/issues/121
vxworks osapi.c utility task doesn't exit,"The vxworks osapi.c has an optional task that is started in OS_API_Init():
```
/*---------------------------------------------------------------------------
 * Name:    UtilityTask
 * Purpose: If turned on, this task will print out the messages from
 *          the OS_printf buffer at a low priority. This will mean
 *          that the functions calling OS_printf will not block due to
 *          writing data to the UART
----------------------------------------------------------------------------*/
#ifdef OS_UTILITY_TASK_ON
void UtilityTask()
...
```

However, this utility task implementation has a while(TRUE) loop with no exit logic.  For a ""load and forever run it"" scenario this may work, but for any other scenario where an orderly shutdown is desired by the user this means the task is never killed.  One can get kernel crashes if the vxworks module is unloaded while that thread is still writing to output.  The forever loop thread also makes line coverage difficult.

We need a robust method to always end this thread and to ensure the parent thread doesn't return to OS control while this thread is still hanging out there.",bug,https://github.com/nasa/osal/issues/120
OS_TranslatePath() has unused variables,DeviceLen and FilenameLen of OS_TranslatePath() are function-local variables that are written to but never used.,"bug, duplicate",https://github.com/nasa/osal/issues/119
osfilesys.c mixed return types,"In osfilesys.c, some functions return OS_SUCCESS (from osapi.h) and some functions return OS_FS_SUCCESS (from osapi-os-filesys.h).",enhancement,https://github.com/nasa/osal/issues/118
OS_unmount() & OS_chkfs() don't catch OS_TranslatePath() failures,"in osfilesys.c OS_unmount(), the return value from OS_TranslatePath isn't checked.","bug, duplicate",https://github.com/nasa/osal/issues/117
OS_rename() doesn't first check if a file is in use,"The osfileapi.c **OS_rename()** doesn't check if a file is in use or not (in an entry in the global OS_FDTable) before it makes the system call to rename the file.

However, this is in contrast to **OS_cp(), OS_mv(), or OS_remove()** - which do check if the file is open (according to the OS_FDTable entry).  If those functions see that the file is open then they return and don't alter the filesystem.  So this behavior seems quite different for functions at affect a file.

The documentation of the OSAL API doesn't explicitly mention any behavior tied to a file that is in use by the OSAL for any of these functions (although the implementation is very clear for those other three functions.)

Discovered in #106, as part of #45 unit testing.",docs,https://github.com/nasa/osal/issues/116
vxworks OS_GetPhysDeviceName()  problem with max volume name length,"The vxworks OS_GetPhysDeviceName() in osfilesys.c may have a problem when the volume name length is at its maximum length.

See Test_OS_GetPhysDeviceName_MaxVolName() in osfilesys_testcase.c, part of testing form trac-22 branch, [changeset:0f36fb6].","bug, duplicate",https://github.com/nasa/osal/issues/115
vxworks OS_GetPhysDeviceName() doesn't handle null pointer,"The vxworks OS_GetPhysDeviceName() in osfilesys.c doesn't check for a null pointer in its arguments.

Discovered with testing form trac-22 branch, [changeset:0f36fb6].","bug, duplicate",https://github.com/nasa/osal/issues/114
vxworks OS_FS_GetErrorName() errors,"The vxworks OS_FS_GetErrorName() in osfilesys.c doesn't check for a null pointer argument.

Discovered with testing form trac-22 branch, [changeset:0f36fb6].
",bug,https://github.com/nasa/osal/issues/113
vxworks OS_TranslatePath() doesn't handle truncated path properly,"The vxworks OS_TranslatePath() in osfilesys.c doesn't detect and properly handle when the mount point and given VirtualPath arg are too long.

Discovered with testing form trac-22 branch, [changeset:0f36fb6].","bug, invalid",https://github.com/nasa/osal/issues/112
vxworks OS_fsBlocksFree() misreports,"The vxworks OS_fsBlocksFree() can mis-report the free blocks value.

Discovered with testing form trac-22 branch, [changeset:0f36fb6].",bug,https://github.com/nasa/osal/issues/111
vxworks OS_initfs() logic errors,"Testing form trac-22 branch, [changeset:0f36fb6] revealed logic errors in the OS_initfs() of osfilesys.c. when running down off-nominal paths and handling the OS_VolumeTable[idx].FreeFlag.  

This ticket is to fix those errors.","bug, duplicate",https://github.com/nasa/osal/issues/110
vxworks OS_mkfs() logic errors,"The vxworks osfilesys.c OS_mkfs() has a number of logic errors uncovered by trac-22 branch, [changeset:0f36fb6] involving error paths and handling the OS_VolumeTable[idx].FreeFlag.

This ticket is to fix those errors.","bug, duplicate",https://github.com/nasa/osal/issues/109
vxworks osfilesys.c functions not thread-safe,"During Trac #45 unit testing it was found that many functions in the vxworks osfilesys.c are not using the semaphore to access the shared table.  

Demonstrated on the trac-22 branch, [changeset:0f36fb6]
",bug,https://github.com/nasa/osal/issues/108
Some vxworks osfileapi.c functions not handling string length correctly,"There were multiple problems identified in the osfileapi.c's string handling.  This issue wraps them all up together for convenience.

Problem 1:  strlen check (>=) is different than OS_check_name_length strlen check (>) for the same variable.  The check in OS_check_name_length should be (>=).

Affects: (function, rough line number)
* OS_creat	196
* OS_open	311
* OS_stat	560
* OS_remove	666
* OS_rename	738
* OS_rename	741
* OS_cp	820
* OS_cp	825
* OS_mv	922
* OS_mv	927
* OS_rmdir	1166

Problem 2:
strlen check (>) should check for (>=), assuming OS_MAX_PATH_LEN includes the terminating null character.

Affects: (function, rough line number)
* OS_opendir	1044
* OS_check_name_length	1211

Identified with #45 white-box coverage testing.","bug, duplicate",https://github.com/nasa/osal/issues/107
vxworks osfileapi.c functions not using semaphore,"Multiple functions in the VxWorks osfileapi.c are not taking the semaphore when accessing the shared table.

OS_close, OS_read, OS_write, OS_lseek, OS_remove, OS_rename, OS_cp, OS_mv, OS_ShellOutputToFile, OS_FDGetInfo.

Identified with #45 white-box coverage testing.","bug, duplicate",https://github.com/nasa/osal/issues/106
vxworks osapi.c OS_GetErrorName() missing codes,"OS_GetErrorName() is missing a few codes...

Error code not returned for OS_ERROR_ADDRESS_MISALIGNED
Error code not returned for OS_INVALID_SEM_VALUE
Error code not returned for OS_ERR_FILE
Error code not returned for OS_ERR_NOT_IMPLEMENTED
Error code not returned for OS_TIMER_ERR_INVALID_ARGS
Error code not returned for OS_TIMER_ERR_TIMER_ID
Error code not returned for OS_TIMER_ERR_UNAVAILABLE
Error code not returned for OS_TIMER_ERR_INTERNAL

Identified with #45 white-box coverage testing.",bug,https://github.com/nasa/osal/issues/105
vxworks osapi.c OS_Milli2Ticks() problems,"Two problems found:
1) OS_Milli2Ticks() returns type 'int32' from variable declared as 'uint32'.
2) There are no limit checks on input value.  The calculation may generate overflow on the resulting output type.

Identified with #45 white-box coverage testing.",bug,https://github.com/nasa/osal/issues/104
vxworks osapi.c functions not using semaphore,"Multiple functions in the VxWorks osapi.c are not taking the semaphore when accessing the shared table.

Identified with #45 white-box coverage testing.
","bug, duplicate",https://github.com/nasa/osal/issues/103
Make compiles with --std=c99 work,"OSAL has historically attempted to be strict ANSI C90, with
obvious exceptions for cases where the code needed to use a
facility that did not yet exist.

Compile with --std=c90 if you want to see these.

The default compilation we do now does not specify that the
code should be strictly conformant to any standard, so what
we get in practice is GCC's C90 with extensions.

Turning up all the warnings using
{{{
gcc -W -Wall -Wextra -pedantic
}}}
will include a large number of very useful static code
analysis checks, but will warn about the use of C99
facilities that we want to use.

What I propose to do is to run a set of trial builds
where the build script adjusts the compiler flags,
on the fly (no commits), to be:
{{{
gcc --std=c99 -O3 -g -W -Wall -Wextra -pedantic
}}}

This asks GCC to do as thorough a job as it can do to report
any of our code that deviates from `INCITS ISO/IEC 9899:1999`.

Our code does require use of facilities not specified in C99,
and these facilities should be enabled, where necessary, by
the use of the appropriate Option Feature Macros. I anticipate that
this will only require certain specific source files to have
an annotation (before the `#include` lines) that they are to
be considered to contain `XOPEN` or `POSIX` standard sources
at a specific level of those standards.

See also CFE ticket [cfs_cfe:82]


",duplicate,https://github.com/nasa/osal/issues/102
vxworks OS_SymTableIterator() unchecked write(),"In OS_SymTableIterator() write() is used.  It returns the # of bytes actually written. However, the # of bytes isn't actually checked by this code.  Only if a -1 was returned. An assumption is made that the entire set of sizeof(SymbolRecord_t) is copied.

From the VxWorks Kernel Programmer's Guide, 6.7 .pdf:
''""The write( ) routine ensures that all specified data is at least queued for output before returning to the caller, though the data may not yet have been written to the device (this is driver dependent). The write( ) routine returns the number of bytes written; if the number returned is not equal to the number requested, an error has occurred.""''

From the VxWorks 6.7 write() man page:
{{{
RETURNS
     The number of bytes written (if not equal to nbytes, an error has
     occurred), or ERROR if the file descriptor does not exist, the driver does
     not have a write routine, or the driver returns ERROR. If the driver does
     not have a write routine, errno is set to ENOTSUP.
}}}

BTW, that's two error return codes, not just a -1.

Recommend: checking the return val vs. desired # of bytes, then erroring out the same path.","bug, duplicate",https://github.com/nasa/osal/issues/101
vxworks OS_SymTableIterator() name arg too long,"The OS_SymTableIterator() name arg could be too long and could be strncpy/copied without a terminating null into SymbolRecord_t's char SymbolName[OS_MAX_SYM_LEN];.  This unterminated null would then be written into the OS_sym_table_file_fd.

See osloader.c, ln 189.

Recommend: an explicit name length check: 
{{{
if (strlen >= OS_MAX_SYM_LEN) { 
return(FALSE);
} 
}}}
before strncpy.

(Discovered as part of #45 coverage testing.)","bug, duplicate",https://github.com/nasa/osal/issues/100
vxworks osloader.c functions not using mutex,"The osloader.c functions do not properly protect the OS_module_table,  OS_sym_table_file_id, and OS_symbol_table_size with the OS_module_table_mut.  

These items are being read from and changed outside of the mutex.

(Discovered as part of #45 coverage testing.)","bug, duplicate",https://github.com/nasa/osal/issues/99
vxworks OS_ModuleLoad() module_name arg too long,"If the module_name argument for osloader.c's OS_ModuleLoad() is too long (compared to OS_MAX_API_NAME) then an unterminated string can be copied into the OS_module_table[i].name field.

The OSAL API doc & source comments specify the following return values:
* OS_ERROR if the module cannot be loaded
* OS_INVALID_POINTER if one of the parameters is NULL
* OS_ERR_NO_FREE_IDS if the module table is full
* OS_ERR_NAME_TAKEN if the name is in use
* OS_SUCCESS if the module is loaded successfuly

The osapi.h OS_ERR_NAME_TOO_LONG would be a more descriptive return code... but if we don't want an API change then the best thing to do would be to check the argument length (with terminating null) and return OS_ERROR.

(Discovered as part of #45 coverage testing.)","bug, duplicate",https://github.com/nasa/osal/issues/98
classic build broken,"Mike Scott (ASO project at Ames) reports that with the most
recent update to development, his build process that uses
the classic build of OSAL is no longer working. The initial
failure is being unable to find osconfig.h

I started looking into this, and there are further issues that
prevent the classic OSAL build instructions from working now,
and will document each issue (and its repair) here.
",bug,https://github.com/nasa/osal/issues/97
"Fix ""utbsp.h"" not found failure when building on some platforms","Testing on other platforms revealed an issue regarding the include path for the utassert header files.

In particular, the latest Ubuntu (15.04) failed to build due to ""utbsp.h"" not being found.  (This may be related to the more recent CMake v3.0.2)
",bug,https://github.com/nasa/osal/issues/96
rtems ostimer.c functions not using semaphore,"In the RTEMS version of ostimer.c, some functions are not using the semaphore with accessing the OS_timer_table.  See #92, and #94 for similar issue in other OSALs.

'''OS_TimerSignalHandler(), OS_TimerSet(), OS_TimerGetIdByName()''' don't touch the semaphore but do access or modify the table.  '''OS_TimerCreate()''' obtains & releases the semaphore, but is modifying the table after releasing the semaphore.

","bug, wontfix",https://github.com/nasa/osal/issues/95
posix ostimer.c functions not using semaphore,"Similar to Trac #92, the posix version of ostimer.c is not properly protecting its OS_timer_table via a mutex.

{{{
pthread_mutex_t    OS_timer_table_mut;
}}}

Many of the issues seen in Trac #92 are in the posix version as well.
Full branch coverage unit tests, in Trac #45, were used to fix Trac #92 (VxWorks).  The posix ostimer.c will likely need similar coverage tests to ensure this is fixed properly.","bug, wontfix",https://github.com/nasa/osal/issues/94
Enhancements to OSAL UT stub code in osapi_stubs,"This ticket reflects further testing with CFE unit tests.  Previous ticket #40 is now integrated with CFE unit tests but some additional bits are needed to make everything right.  Since #40 was approved at the last CCB, it is not going to be amended anymore, so this is a follow-on update.

* Hooks were not completely implemented - CFE needs this to make the latest version fully testable.
* Provide stubs for missing functions: {{{OS_TimerCreate}}}, {{{OS_TimerAdd}}}, {{{OS_TimerSet}}}, {{{OS_CountSemCreate}}}.



",enhancement,https://github.com/nasa/osal/issues/93
ostimer.c functions not using semaphore,"The VxWorks ostimer.c has a static table and a semaphore to protect it, as in:
{{{
static OS_timer_record_t OS_timer_table[OS_MAX_TIMERS];
static uint32            os_clock_accuracy;

/*
** The Semaphore for protecting the above table
*/
static SEM_ID OS_timer_table_sem;
}}}

Unfortunately, only OS_TimerCreate(), and OS_TimerGetInfo() use that semaphore.  

'''OS_TimerCreate(), OS_TimerSet(), OS_TimerDelete() do not''' and they '''modify''' the table.  '''OS_TimerGetIdByName()''' and the internal '''OS_TimerSignalHandler()''' also access (read) the table without using the semaphore.

The OS_TimerAPIInit() creates the semaphore, the time conversion functions don't access the table.

Recommend fixing all the functions that access or modify the table to acquire the semaphore after passing input argument checks.","bug, duplicate",https://github.com/nasa/osal/issues/92
OS_open and file-api-test in conflict,"The test for OS_open includes a clause that explicitly
attempts to open, using OS_READ_WRITE, a file that
has never existed -- and expects an error. That is, the
test presumes that OS_open does not by default create
files that do not exist.

The implementation, on the other hand, includes O_CREAT
except when opening read-only.

The test needs to use OS_READ_ONLY mode, if we want it
to pass with the current implementation.
",bug,https://github.com/nasa/osal/issues/91
OS_open: 644 is not 0644,"The 3rd parameter to OS_open is the set of permission
bits to be applied if a file is created. The typical
value of these is `0644` which is an OCTAL constant
representing read-write for owner, read-only for group
and read-only for everyone else.

In several places in the `file-api-test` the value `644`
without the leading zero -- thus decimal 644 -- is passed,
which would create a file using mode `01204` octal, which
is write-only to owner, no access to group and read-only
access to everyone else. Oh, and the sticky bit set.

In most cases, these erroneous 644 values are not used, but
it was used in one case. On the theory that bad code should
be repaired, I propose fixing all of them when fixing the
erroneous test.
",bug,https://github.com/nasa/osal/issues/90
"OS_TimerCreate() ""Unfreed"" Table Entries after failure","In ostimer.c, OS_TimerCreate(), ln 318, if the timer_connect() fails, the code attempts to delete the timer created by timer_create, but there is still an ""unfreed"" timer entry in the OS_timer_table.  This is a potential resource leak that would exhaust the timer table.

{{{
...picking up at ostimer.c, OS_TimerCreate(), line 306...
   status = timer_create(CLOCK_REALTIME, NULL, (timer_t *)&(OS_timer_table[possible_tid].host_timerid));
   if (status < 0) 
   {
      /* Commentary: here this table entry is properly freed up. */
      OS_timer_table[possible_tid].free = TRUE;
      return ( OS_TIMER_ERR_UNAVAILABLE);
   }

   status = timer_connect((timer_t)(OS_timer_table[possible_tid].host_timerid), OS_TimerSignalHandler, possible_tid );
   if (status < 0 )
   {
      status = timer_delete((timer_t)(OS_timer_table[possible_tid].host_timerid));
      /* Commentary: no cleanup here before the return! */
      return(OS_TIMER_ERR_UNAVAILABLE);
   }  
}}}

Also noted: the timer_delete status is unused, and may not matter at this point.","bug, duplicate",https://github.com/nasa/osal/issues/89
OS_TimerCreate() Unterminated String,"ostimer.c maintains a static OS_timer_table, and a char name[OS_MAX_API_NAME] is an element of each table entry.

In OS_TimerCreate(), ln 298, '''the code could leave an unterminated string in OS_timer_table[i].name'''.  And it appears as though all the other code is assuming it IS a properly-terminated string.  Line 243 tests:
{{{
if (strlen(timer_name) > OS_MAX_API_NAME)
...return error value
}}}
and later
{{{
strncpy(OS_timer_table[possible_tid].name, timer_name, OS_MAX_API_NAME);
}}}
copies the string with OS_MAX_API_NAME length.

But if the timer_name argument is sized exactly OS_MAX_API_NAME+1 (including the terminating null) then it'll be copied over so that there is no terminating null in the table entry name.

To fix:
* The strlen if-test should account for the \0 in its length check
{{{
if (strlen(timer_name) > OS_MAX_API_NAME-1)
}}}
* The documentation for this function should note the actual arg length limit with the null 
* (nice to have) It isn't actually documented in osconfig.h whether the terminating string nulls are counted as part of the OS_MAX_* name and path limits.  But it certainly does appear that the intent is that strings are properly terminated in the VxWorks OSAL.  (Written clairty on that convention would have helped some.)",enhancement,https://github.com/nasa/osal/issues/88
divide osconfig.h three ways,"The current osconfig.h (present in BSP trees and, as a
bonus, in the build/inc directory) contains configuration
items that are OSAL generic, plus configuration items that
are BSP specified, and probably items that are OS specified.

The content of this file needs to be divided.

Items that are generic OSAL configurations need to be in a
header file located centrally.

Items that are specified by the OS should be kept in a header
file within the appropriate `/os/` tree; probably a good idea
to have this file included by the generic configuration file,
to provide ""sane defaults"" in the central file (where there can
be sane ""most OS"" values), then have the OS-specific file
override those as appropriate.

Ditto for the BSP.
",enhancement,https://github.com/nasa/osal/issues/87
Add timebase API calls to existing OSALs for API compatibility,"To allow backward/forward compatibility once PSPs begin using the OSAL Timebase API added in #38, the existing OSALs (posix/rtems/vxworks6) need to have some implementation of these functions or else the link will fail.

This just adds an implementation that returns {{{OS_ERR_NOT_IMPLEMENTED}}} for all these calls for the 3 existing OSAL libraries, which allows the PSP or other application code to determine at runtime if the functionality is available or not.



",bug,https://github.com/nasa/osal/issues/86
Incorrect Logic in OS_TimespecToUsec,"In the VxWorks and Posix implementation of '''OS_TimespecToUsec()''', the algorithm logic is using the value of the '''output''' (usec) by mistake.  (This first if-test is the same if-test used by the opposite function, OS_UsecToTimespec() just above.  I assume its a copy-paste error).

{{{
 **  Function:  OS_TimespecToUsec
 **
 **  Purpose:  Convert a POSIX timespec structure to microseconds
 **
 */
void OS_TimespecToUsec(struct timespec time_spec, uint32 *usecs)
{
   if ( (*usecs) < 1000000 )
   {
      *usecs = time_spec.tv_nsec / 1000;
   }
   else
   {
}}}
",bug,https://github.com/nasa/osal/issues/85
osnetwork.c API discrepancies,"The VxWorks osnetwork.c code differs from the OSAL Library API documentation under some conditions.  Even more interesting, the posix and rtems OSAL implementations behave differently from the VxWorks as well.

In osal/src/os/vxworks6/osnetwork.c, the documentation and code for

{{{
int32 OS_NetworkGetID (void) 
}}}
don't match when there is no network (e.g. OS_INCLUDE_NETWORK is undefined in osconfig.h).

The c source file function comments are:
{{{
  Returns: OS_ERROR if the  host id could not be found
    a 32 bit host id if success
}}}
The OSAL Library API.pdf has:
{{{
Returns:
OS_ERROR if the operating system calls fail
OS_SUCCESS if success  
}}}
''(That OS_SUCCESS looks like a copyNpaste error, all implementations return the host id for successful behavior.)''

But the VxWorks code returns a (valid) host id of zero, instead of OS_ERROR (a -1) or OS_ERR_NOT_IMPLEMENTED (osapi.h).

When looking at the osal/src/os/rtems/osnetwork.c, I see that it returns OS_ERR_NOT_IMPLEMENTED when the OS_INCLUDE_NETWORK is undefined in osconfig.h.  That return value isn't documented in the OSAL Library API.pdf or in any code comments.  The posix osnetwork.c pays no attention to OS_INCLUDE_NETWORK and always makes the OS-layer network calls (unlike the rtems and vxworks osal's).

Other API surprises: 
{{{
int32 OS_NetworkGetHostName (char *host_name, uint32 name_len)
}}}
can return OS_INVALID_POINTER with a NULL pointer arg.  Good implementation, but needs documentation.

Note: I didn't find a tie-breaker in the osapi-os-net.h because that common header had no comments.  Also, I was unable to find documentation (pdf or code comments) on the meaning of these osapi.h return codes.

'''Initial Recommendations for this ticket:'''
* All OSAL (osnetwork.c) implementations for OS_NetworkGetID() and OS_NetworkGetHostName() should return OS_ERR_NOT_IMPLEMENTED when the OS_INCLUDE_NETWORK is undefined and not even attempt to make OS calls.
* The OSAL Library API.pdf function documentation should be updated to cover all possible return values.
* The separate osnetwork.c documentation should be removed in favor of a common function description in the osapi-os-net.h, which all OSAL implementations use.  Its too easy to focus in on one .c source and not realize there is an API discrepancy.
* Document (in the osapi.h and in the OSAL Library API.pdf) the meanings of these common OSAL return codes.",bug,https://github.com/nasa/osal/issues/84
OSAL timer tests may crash on 32-bit Linux,"I have seen changes between test runs of the same branch
where sometimes the timer related test programs run OK
and other times when they die with a SIGSEGV.

Test results need to be robust and repeatable. I suspect
that these tests are sensitive to some condition that is
not being adequately controlled on the test targets.

I am making the initial assumption that this is going to
require an update to the test scripts for OSAL, but debugging
is going to require some tinkering inside OSAL to extract
what is going on.

So this bug is being filed in both OSAL and TEST.

",bug,https://github.com/nasa/osal/issues/83
Failure to test should be FAIL,"The bamboo test plan does not currently complain if it is
unable to stage and run unit tests on a target, for the
simple reason that our test list is currently entirely
driven by parsing results returned by the target.

If the target VM is offline (as it was last weekend),
there are no indications that the test programs did not
run, and the presence of a few test results (the ones from
static analysis) keeps Bamboo happy.

The plan itself, or its top level scripts (same thing), needs
to keep track of the list of test programs, and generate
test failure reports for any such program for which it
does not obtain results.
",bug,https://github.com/nasa/osal/issues/82
"Combine ""pc-linux"" and ""pc-linux-ut"" OSAL BSPs","There is a separate BSP called {{{pc-linux-ut}}} that is used for unit testing.  This differs slightly from the normal {{{pc-linux}}} BSP:

* It does not block signals
* It does not have an idle wait at the end of {{{main()}}}

Having a different BSP violates the ""fly what you test, test what you fly"" philosophy.

The unit tests driven by timers do not work with signals blocked, because these rely on signals working during {{{OS_Application_Startup()}}} in order to function.  This is probably the reason for the alternate BSP.

However, these tests can and should be fixed to operate using the normal BSP with signals blocked, as this will be more representative of what happens in a normal system.  To fix these tests just requires creating a child thread to handle the test logic and allowing {{{OS_Application_Startup}}} to complete normally.





",bug,https://github.com/nasa/osal/issues/81
Import UT-Assert basics into OSAL,"Portions of UT-Assert will be very useful for
unit testing within OSAL, and should be imported
from the official release into the OSAL tree.
",enhancement,https://github.com/nasa/osal/issues/80
OS_TaskDelete fails if the task (pthread) has already terminated on its own,"I am creating tasks with functions that execute for a period of time, then return (terminate) on their own. OS_TaskDelete tries to call pthread_cancel on the thread id, which fails.

This results in the task table entry remaining and I am unable to re-use that task name.",bug,https://github.com/nasa/osal/issues/79
OS_TaskDelay has wrong nanosleep values,"in src/os/posix/osapi.c, lines 845-846, OS_TaskDelay should use:

    waittime.tv_sec  = ms / 1000000;
    waittime.tv_nsec = (ms % 1000000) * 1000000;

not

    waittime.tv_sec  = ms / 1000;
    waittime.tv_nsec = (ms % 1000) * 1000000;
","bug, duplicate",https://github.com/nasa/osal/issues/78
OS_QueueCreate failures,"The OS_QueueCreate test (in test_msgq) is failing on specific
versions of specific branches where it previously passed.

I observed that after a string of GREEN builds, the nightly
builds were in RED status, with this test being the trigger
for the failure, but only on one of the two test targets.

Rebooting the test target involved cleared the failure. This
is not an acceptable long term solution; testing should not
induce resource leaks.

This was observed on the 64-bit X86 Linux test target, but I
suspect it will be common to all targets sharing that OSAL
Message Queue implementation.

",bug,https://github.com/nasa/osal/issues/77
OS_check_name_length portability,"The OS_check_name_length function triggers warnings when
it casts pointers to integers. It then triggers refactoring
when an engineer notices that it is calcualting the length
of a string by casting pointers to int, subtracting, and
dividing by sizeof(char).
","bug, invalid",https://github.com/nasa/osal/issues/76
Fix warnings in vxworks support code,"Take a few minutes to resolve the remaining compiler warnings
generated when building for PowerPC VxWorks targets.

Three edits in /os/ and one in /bsp/, all specific to
the VxWorks cross-compilation.
",bug,https://github.com/nasa/osal/issues/75
Fix simulataneous use of OSAL BSP + CFE PSP compiler flags,"When building OSAL as a component of CFE, the compiler flags for both the CFE PSP and the OSAL BSP are used.

With the current BSP/PSP, the effect here is that ""-D_LINUX_OS_"" is included twice.

This does not currently cause a problem, but it is incorrect, and it could cause a problem for future configuration where things may conflict.

This only affects the cmake build.",bug,https://github.com/nasa/osal/issues/74
Add user-space message queue library to the OSAL (GSFC DCR 22160),"The GSFC ATLAS project developed an alternate queue library to use with POSIX to overcome a performance limitation with the Linux Posix message queues.

Incorporate this enhancement (or similar enhancement) into the OSAL for POSIX, RTEMS, and VxWorks.",enhancement,https://github.com/nasa/osal/issues/73
Add VxWorks RTP/Memory Protected Port (GSFC DCR 18626),"This VxWorks 6.x port is available from a 2011 IRAD effort.  It will support running code in a memory protected process under VxWorks.

This port will not affect other OSAL ports.",enhancement,https://github.com/nasa/osal/issues/72
Update RTEMS OS_IntAttachHandler for the PPC (GSFC #22161),"ATLAS uses the OSAL with RTEMS on the RAD750, and had to use a different RTEMS API to attach interrupts.
 
Need to research this and either:
A: Incorporate the ATLAS code as-is, or
B: try to update the function to use the new code for all architectures
 
The ATLAS code:
```
rtems_status_code ret_status = ~RTEMS_SUCCESSFUL;    
uint32 status = OS_ERROR;  

#if defined (__PPC__)    
 /*     
 * PowerPC uses new-exception which is an extension of clasic irq api     */ 

#include &lt;rtems/irq-extension.h&gt;    
  const char *info = NULL;    
  ret_status = rtems_interrupt_handler_install(                                                               
               (rtems_vector_number)InterruptNumber,                  
                info,                    
                RTEMS_INTERRUPT_SHARED,                      
               (rtems_interrupt_handler)InterruptHandler,                               (void*)parameter );     
#else    
  rtems_isr_entry old_handler;     

  ret_status = rtems_interrupt_catch(                    
               (rtems_isr_entry)InterruptHandler,                     
               (rtems_vector_number)InterruptNumber,                    
                &old_handler); 
#endif 
```",wontfix,https://github.com/nasa/osal/issues/71
OSAL Library API Document Cut and Paste Errors,"In the ""OSAL Library API"" document:
 
1. The description of the OS_write function is a cut and paste of the OS_read function.
 
2. In the description of the OS_BinSemTimedWait"" function, the syntax section states ""OS_BinSemTimeWait"" (without the 'd').",docs,https://github.com/nasa/osal/issues/70
Consider Adding a Timed Wait Function to the Mutex API (GSFC 22628),"The OSAL does not include a mutex wait with a timeout.  This was originally requested by APL.  

See also Trac Ticket #28

",enhancement,https://github.com/nasa/osal/issues/69
"POSIX - Consider using ""SCHED_RR"" instead of ""SCHED_FIFO"" for realtime threads","Although OSAL defines 256 priority levels (0-255), most typical POSIX systems will have considerably fewer than 256 priority levels for task scheduling.  A typical Linux system offers priority levels ranging from 1 to 99.

To handle this, the POSIX layer combines multiple OSAL priorities into a single POSIX priority bucket, evenly spreading the OSAL range into the available POSIX priority range.

When combined with the SCHED_FIFO policy, this may have unintended consequences in the case that two OSAL tasks are created with priority values that cause them to be mapped into the same POSIX bucket.

To illustrate: consider two OSAL tasks, created with priority levels ""1"" and ""2"".  If both get mapped into the same bucket (likely) then the OS will treat them as equal for scheduling purposes.

Assuming the task at priority ""2"" becomes ready-to-run first, it can use the CPU indefinitely even if the task with priority ""1"" also becomes ready-to-run.  This is because task 1 will be behind task 2 in the FIFO queue.

Using the round-robin (RR) scheduling policy can be an improvement here, since the kernel will time-slice the two tasks rather than allowing task 2 to indefinitely preempt task 1.

Although there is no ideal solution due to the lower number of actual priority levels in the kernel, the RR policy is arguably a better choice here.







","enhancement, invalid",https://github.com/nasa/osal/issues/68
Posix - optionally disable use of some realtime features for debugging,"It was discovered that the pthreads library supplied by Xilinx for their Microblaze platform does not properly support the PTHREAD_PRIO_INHERIT attribute on mutexes.

The problem occurs when a higher-priority thread becomes blocked on a mutex owned by a lower-priority thread, in this pthreads implementation the higher priority task starts ""spinning"" and ultimately uses 100% CPU, locking out any other process, including the ability to kill or stop the process - reboot is the only recourse.

This bug is a problem in the Xilinx-supplied pthreads library, but until a real fix is done, we need to disable the PTHREAD_PRIO_INHERIT option.  Disabling this feature may also be useful to others during debugging if another user runs into a similar issue.

It was also useful to disable RT scheduling entirely while debugging this problem.

This ticket will add compile-time macros that can be added to the ""osconfig.h"" file that will control these features.  The default (if nothing is defined) will be to use the same features that are currently in place (no change).



",enhancement,https://github.com/nasa/osal/issues/67
OSAL: OS_EOF Macro is Not Defined (GSFC DCR 22719),EOF can be defined differently for different platforms. The OSAL should define this value and make reference to this return value in the OSAL Library API documentation.,"enhancement, invalid",https://github.com/nasa/osal/issues/66
OSAL: Consider Allowing Root Task (caller of OS_API_Init) to Register and Use OSAL Services (GSFC DCR 21564),Consider a model for the system root task where the caller to OS_API_Init() is also a registration of the task with the OSAL. This can ensure that the root task can use OSAL functions. This also allows to OSAL to initialize CPU affinity for the root task and use that stored CPU affinity for inforcing CPU affinity policies when the root task spawns tasks.,"enhancement, invalid",https://github.com/nasa/osal/issues/65
Backtrace-tracking feature for debugging OSAL mutexes,"Buggy code that takes a mutex but forgets to release it can be very difficult to debug - when the code is stopped in the debugger, it is clear that the thread is waiting on the mutex, but evidence of the real problem is long gone and it is impossible to tell which thread took the mutex but did not give it up.

glibc has a {{{backtrace()}}} function which can be extremely useful in debugging these situations.

This will add an enhancement to the ""posix-ng"" build to __optionally__ obtain and store a backtrace with each successful ""take"" of a mutex.  

If at some point in the future another thread gets locked trying to obtain the mutex, the backtrace will point exactly to the code that obtained the mutex without releasing it.

Obviously this has some performance/memory implications (although not much) so it will not be enabled by default.  This would be something the developer could enable when actually trying to debug mutex release issues.
",enhancement,https://github.com/nasa/osal/issues/64
Enforce Strict ASCII,Replace all non-ASCII characters (i.e. copyright symbol) with ASCII equivalent.,bug,https://github.com/nasa/osal/issues/63
Connect compiler warnings to test results parser,"After compiling, scan the resulting log for warning messages, and produce an output file presenting the warnings as ""test failures"" that can be observed (and quarantined) from within the Bamboo interface.

Interesting Design Goals:

 * Ability to configure patterns that group warnings
   that are closely related but scattered through the
   build logs (I'm OK with doing this by editing the
   warning-detecting AWK script, at least initially).

 * Ability to report ""test now passing"" for groups of
   warnings previously identified.

 * Fall back to a reasonably sane organizational method
   to present any warnings not captured by patterns above;
   GCC's ""-Wsome-warning-type"" tags are suggested.

Requirements too obvious to state:
 * Input is the ""warning"" lines from a compile
 * Build area path needs to be stripped from the input
 * Output is ""XML-ish"" files for Bamboo's JUnit parser


Yes, I'm already tinkering with a prototype ;)
",enhancement,https://github.com/nasa/osal/issues/62
Add Xenomai OSAL,Add Xenomai OSAL V1.0 as delivered from Matt Benson/Odyssey Space Research on 04/17/15,"enhancement, wontfix",https://github.com/nasa/osal/issues/61
Implement user-selectable compiler warning switches,"It has become apparent that a ""one-size-fits-all"" approach to compiler warnings may not be sufficient going forward.

In general, most developers should be using ""-Werror"" in addition to ""-Wall"", ""-pendantic"", etc to catch any coding issues at first sight.  

However, the specific set of warnings for any given piece of code is dependent on the specific compiler version, target architectures, and optimization level in use at the time of build.  This can mean code that builds without warnings on one build can fail miserably on a different build.

This could be an major issue for a novice who clones the latest code from the community repository, and builds it with the latest version of GCC (i.e. one that we may not have tested yet) and finds a new warning that causes the entire build to fail unexpectedly.

As a compromise, the following is proposed:
* Always use ""-Wall"" switch to enable the most reasonable warnings (incidentally, this is not __all__ warnings, it leaves out the ones most likely to generate false positives).  
* Do not put ""-Werror"" in the official build scripts, so if compiling with a new GCC version or a different target architecture than the what has been officially tested, the build will not fail if a new warning is triggered.
* Also leave out ""-pedantic"" from the official build as this, by definition, tends to warn on constructs that are generally OK in practice but violate some (possibly esoteric) aspect of the C standard.  The thought behind this is that plenty of old existing code out there may work fine but might not compile cleanly using ""-pedantic"", so we should not force this switch upon users by default.
* Add a mechanism by which developers can easily add extra CFLAGS to a build, without modifying a Makefile (or CMakeLists) file.  This way, any users that want to may enable ""-Werror"" or ""-pedantic"" on their own builds, all the time, without having to maintain a private branch of the build script.

The automatic builds done by Bamboo, these will be built __without__ ""-Werror"" but the build log will be checked for warnings, and the presence of any new warnings will be logged as a unit test error so they can be fixed before moving the code forward.





",enhancement,https://github.com/nasa/osal/issues/60
add locking during test runs,"The build support scripts presume they have unique ownership
of the test target. This assumption may be violated if the
script is run manually.

This can be resolved by using the flock(1) command to set up
an advisory lock within the shell script.
",enhancement,https://github.com/nasa/osal/issues/59
Bogus usage of strncpy in unit tests,"There are several places in OSAL where the Buffer Overflow protection
feature of the `strncpy()` function is used incorrectly, in a way that causes
it to not protect against buffer overflow.

Correct usage is to pass the size of the destination area as
the third argument, so strncpy() will stop before trying to write
past the end of the destination storage.

Incorrect usage observed is passing the length of the SOURCE string
as the limiting size. The resulting behavior is:

- Call strlen() to get length of source data.
- Call strncpy() to copy the string
- strncpy() copies bytes until it sees NUL or copies N bytes.
- in this case, it will always copy all data, and stop before the NUL.

The upshot of this is `strncpy()` always copies the whole source
string and never writes a terminating NUL.

Better usage would be to present the destination buffer size
as the limiting size in the 3rd argument (yes, `strncpy()` stops
writing after writing the NUL).

",duplicate,https://github.com/nasa/osal/issues/58
add osprintf to OSAL,"JSC has developed a known and understood version of printf that has been code reviewed and unit tested.  It can be used on platforms that do not provide a printf (such as ARCIN653) or as a known, trusted implementation of the printf function on other OSs.  Currently, versions (there are small variations in the implementation between OSs) for the posix, VxWorks6, and ARINC653 OSALs are available.

Need to add branch with OSAL/src/os/posix, vxworks6, ARCIN653/osprintf.c and OSAL/src/os/inc/psprintf_priv.h, osprintf.h","enhancement, wontfix",https://github.com/nasa/osal/issues/57
API additions to formalize common routines in OSAL,"During unit testing and for ""restart"" actions in a real system (either processor or power-cycle restarts) it is necessary to have a method of cleanly shutting down the system.  

Currently, support for shutdown operations is left up to the BSP, and it is not consistently handled between the various BSPs or not handled at all in some cases.

OSAL needs to have formal procedures for a normal shutdown since there is often some clean up work to do, including but **not limited to**:
* Sanely exit all running tasks, or collect resources from tasks that have exited already
* Delete queues, mutexes and semaphores (this is particularly necessary on systems where this is a limited resource and may affect the ability to implement a warm restart)
* Unmount any non-volatile filesystems that may have been mounted
* Delete shared memory segments

This ticket will add some basic API calls to formalize the procedure and provide the hooks necessary to do this cleanup.  

The POSIX layer needs this with the highest priority, as it is used extensively for testing where a sane shutdown/restart procedure is important.



",enhancement,https://github.com/nasa/osal/issues/56
Adjust usage of feature support macros for glibc/posix,"Glibc (de-facto standard C library for GNU/Linux) uses compiler macros to select features from the various C standards out there.

At a bare minimum, the POSIX build currently relies on some features in XPG5 and POSIX.1c (1995).

In order to ensure these are enabled, the osapi.c file #defines ""USE_UNIX98"" immediately before including pthread.h.  This is not the proper way to do this -- USE_UNIX98 (with underbars) is an internal macro defined by the glibc headers based on OTHER macros that were specified.

It should also be done in such a way that all source files adhere to the same general standard (for sanity sake).

== Recommended Fix ==

Use ""XOPEN_SOURCE=600"" across the entire build.  This will enable XPG6 features.  XPG6 adds some more realtime features that are likely to be useful to applications such as this, e.g. clock_nanosleep() and some others.",bug,https://github.com/nasa/osal/issues/55
OSAL public/private data structure delineation,"This ticket was originally part of ticket #36 but the change was independent and significant enough to warrant breaking this out into a separate review item.

This will fix some issues with the OS Module API:
* CPU addresses must be stored using the ""cpuaddr"" type, not uint32.

* The ""OS_module_record_t"" should be made into an OS-dependent structure, as the different OS layers may have different sets of data that they need to retain for loaded modules.  This will also make it more consistent with the other APIs -- e.g. Tasks, Queues, Semaphores all define their internal record structures in the OS-specific implementation and not part of the public API.

* The OS_ModuleInfo() call should return a standardized structure and not the direct internal record.  This will also be more consistent with the way the other APIs do this where they have a separate ""prop"" structure that is returned that is defined as part of the public API.




",enhancement,https://github.com/nasa/osal/issues/54
Fix OSAL timer test ID usage,"The OSAL timer test implementation assumes that timer IDs will always be issued in sequential order starting with ""0"".  It incorrectly assumes that the timer ID will be suitable for an array index.

An intermediate lookup table is required here, which has OS_MAX_TIMERS entries, to correctly map the ID supplied during the create call back to a local array index.

",bug,https://github.com/nasa/osal/issues/53
Add pc-rtems BSP to OSAL,"For development under RTEMS it is helpful to have a basic BSP that does not require any special development boards.

The RTEMS project provides this via the ""pc686"" BSP. This makes it possible to boot and run an RTEMS application on ordinary commodity PC hardware.

This also boots and runs in virtual machines i.e. QEMU which is very desirable for testing.

This ticket will add a ""pc-rtems"" BSP to OSAL that can be used for this purpose.",enhancement,https://github.com/nasa/osal/issues/52
Do not block synchronous hardware-generated signals in pc-linux BSP,"As of OSAL 4.1, __all__ signals are blocked during execution of the OS_Application_Startup() call, then unblocked before entering the wait loop.

There is some valid logic behind this -- 
* By definition, a signal is directed to a process, not a thread.  In a multi-threaded process, each thread gets its own signal mask and ""normal"" signals may be delivered to __any thread__ within that process that has the signal unmasked.
* By masking all signals during OS_Application_Startup(), any threads created during this time will automatically inherit the mask and therefore have all signals blocked. 
* Signals will then be unblocked only in the original (main) thread, therefore any signals generated will be delivered only to this thread.

The issue here is that some signals on Linux are generated by the underlying hardware and the kernel forwards these (synchronously) to the specific __thread__ that was executing on the CPU when the actual signal was triggered.  

The set of hardware-generated signals: SIGSEGV, SIGILL, SIGBUS, SIGFPE should **NOT** be blocked at any time by any thread.

For instance, if a thread causes a segmentation fault by using a bad pointer while SIGSEGV is blocked, the thread will continue running, but results are undefined.


",bug,https://github.com/nasa/osal/issues/51
"Clean up ""-D"" compile time macros used in pc-linux build","This is the equivalent of trac 17 in the CFE PSP -- see [https://babelfish.arc.nasa.gov/trac/cfs_psp/ticket/17].  The same build flags are duplicated in the OSAL BSP.

The ""pc-linux"" OSAL BSP defines the following to be added to the compiler CFLAGS:

{{{-D_EL -DENDIAN=_EL -DSOFTWARE_LITTLE_BIT_ORDER -D__ix86__ -D_ix86_ -Dposix -DX86PC -D_REENTRANT -D_EMBED_ -DOS_DEBUG_LEVEL=3}}}

These were brought into the cmake build from the original build scripts in order to be consistent just in case any code required it.  However, they are unnecessary, many are not even used anywhere in CFE/OSAL, and potentially even wrong.

The reality is that with Linux, the ""pc-linux"" is a general purpose PSP that can most likely be used on __any__ general-purpose development machine that runs Linux.  It is not limited to only x86 PC's, and in fact works just fine on ARM, PowerPC, and Microblaze targets too.

I have successfully used the (unmodified) pc-linux BSP to execute unit tests on a BeagleBone Black (ARM) as well as an emulated PowerPC 440 based development machine.  In all these cases, the ""x86"" macros are wrong, and on the PowerPC, the EL/ENDIAN/SOFTWARE_LITTLE_BIT_ORDER are wrong too.

To summarize - I recommend removing **ALL** of these macros from the pc- linux build when using the cmake scripts (the old makefiles can stay as- is).",bug,https://github.com/nasa/osal/issues/50
Write XML files for Bamboo,"We use the Atlassian ''Bamboo'' system to automatically build
the project, run the test, and present the results, but the
system is not an oracle: it requires test results to be in
one of the several forms for which it has parsers.

I was able to construct XML files that Bamboo's ""JUnit Results""
parser was able to handle. This commit introduces a simple
implementation of a file writer for those files.

This is a ''bare-bones'' implementation, onto which we can
hang future enhancements. Note that there are rules for
quoting data in strings, and text not within `<..>` tags;
the simple approach taken here is merely to completely avoid
the use of any character that needs quoting.

My intention is to continue work on this when I get back
from vacation on the 23rd.
","enhancement, wontfix",https://github.com/nasa/osal/issues/49
Improve Bamboo builds of cFS OSAL tree,"The current Bamboo plan for the `cfs_osal` project compiles OSAL and runs both sets of tests, but only recovers test results from one of the two sets. Work needs to be done to extend the test results recapture to pull in the results of the other tests.",enhancement,https://github.com/nasa/osal/issues/48
pthread_create 3rd arg must be of right type,"OS_TaskCreate is handed an OSAL entry point, which is a
pointer to a function taking no parameters and returning
no return value. It passes it along to pthread_create
which is expecting a pointer to a function that takes
a single void pointer parameter, and returns a void pointer
return value.

The code as written triggers a compiler warning that we
want to get rid of.

Casting the pointer gets rid of the warning, at the cost
of presuming that the ABI will do the right thing when
the caller and callee disagree on the function signature.
This has an associated technical debt: every implementation
that uses this code has to be aware of the issue and
assure that this kind of signature mismatch is OK.

Alternately, we can stash the pointer to the entry point
somewhere, and hand pthread_create a pointer to a function
of correct type, which is responsible for calling the
entry point and returning a pointer. This has a runtime
memory cost of one stack frame.

Doing nothing retains the potential failure, but also retains
a warning about the potential failure. I suggest either doing
the real fix, or leaving the code alone until -Werror forces
us to do the real fix.

I will not automatically push this into the 2015-03-10
integration candidate, as tempted as I am.
",bug,https://github.com/nasa/osal/issues/47
OS_ModuleLoad() 2nd and 3rd args need to be const,"The current integration candidate for CFS_CFE includes code
that passes (char const *) pointers as the 2nd and 3rd
parameters to the OS_ModuleLoad() function. In order for this
to compile without warnings, these parameters of this function
need to carry `const` qualifiers in the header defining the
function and in the function itself.

The function does not modify data pointed at by these
parameters, so the `const` qualifier is appropriate.

This change does not require changes to callers (but does
allow them to pass pointers to `const` data).

This change will need to be included in the 2015-03-10
integration candidate synchronized across all projects.

( I thought I had seen a ticket for this, but was unable
  to lay hands on it. )
","bug, duplicate",https://github.com/nasa/osal/issues/46
update OSAL for Class A & Associated unit tests,"The currently released OSAL unit tests may not fully run with OSAL 4.1.1.

JSC has made updates so that they run with Linux and ARINC653 OSAL 4.1.1.  

JSC is currently updating to work with VxWorks 6.7.  

These updates are being tracked in the JSC subversion repo and need to be pushed into a proper git branch and further work continued from there.",bug,https://github.com/nasa/osal/issues/45
"OSAL PPC VxWorks ""test runner""","Independent of any other issues with building test code for
the PowerPC running VxWorks -- it appears that I will need
a small bit of ""helper code"" in order to make my testing
environment a little bit more robust.

Currently, running a unit test requires someone, by hand,
to do the following steps for each test:

- Observe the value of `(int)OS_BSPMain`
- issue `ld < testname.elf` command
- Watch out for any ''undefined symbol'' errors
- Verify that `(int)OS_BSPMain` changed
- issue `sp(OS_BSPMain)` command
- Monitor console output watching for the test to finish
- perhaps reboot the target if things went horribly wrong

Running the tests by calling `OS_BSPMain()` directly from
the shell introduces problems if the test program makes any
changes in the task that disturb the shell -- most notably,
if the task calls `exit()` all bets are off.

What I want in a ""test runner"" is to have code that supervises
loading of the program, detects any load errors, and assures that
the loaded image provides a suitable entry point. If all is
good, start the test as a subtask. The runner needs to then
wait for the task to complete, which unfortunately requires
it to periodically test to see if the task is still alive.

A nice thing to have for this sort of facility is a timeout,
which turns out to be pretty trivial given that we have to
drop into a polling loop. If we loop too long, we can kill
off the task and make appropriate log annotations.

The initial runner I envision is simply an image to be
loaded after the target boots, exporting a function that
does the work for one test, coupled with a script that
loads the image and calls the function for each test
to be run.

",enhancement,https://github.com/nasa/osal/issues/44
TSF: osloader OS_ModuleLoad #4,"The OS_ModuleLoad test case in the osloader unit test fails
during the ""test setup"" loop. Once the test was augmented to
report the failing module name, it was discovered that this
was due to not staging the ""MODULE%d.so"" files to the target
running the unit tests.

Repairs actually applied to the build script over in
the cfs_test project (cfs_test/osal/build.sh).
",bug,https://github.com/nasa/osal/issues/43
"Fix OSAL build when using RTEMS ""pc686"" BSP","In the RTEMS distribution, the rtems_interrupt_catch() function is not always defined.  It depends on the BSP build-time options, specifically if the macro ""CPU_SIMPLE_VECTORED_INTERRUPTS"" is defined set to FALSE then the API call is not available.

This causes a link error when building with the ""pc686"" BSP since OS_IntAttachHandler() calls rtems_interrupt_catch().

This ticket will simply add a preprocessor check for the above condition, and if rtems_interrupt_catch() is not available then OS_IntAttachHandler() should return OS_ERR_NOT_IMPLEMENTED.

",bug,https://github.com/nasa/osal/issues/42
2015-02-12 Integration Candidate,"This ticket will collect branches to be merged and tested based on the 2015-02-02 CCB.
Further details will be added in comments.",,https://github.com/nasa/osal/issues/41
OSAL should use UT framework similar to that of CFE,"With trac ticket #29 (and related #30) now implemented, the OSAL tests can be used as one piece of a build verification tool suite.

However, the implementation is currently very basic - it does not use any real testing framework, it simply counts errors using a global integer added to each test.

CFE has a more sophisticated UT framework consisting of the following functions:
* UT_Text() - informational / log file text printing function;
* UT_Report() - provides a common method to check for a condition, along with code to log PASSED/FAILED in a consistent manner;
* UT_SetRtnCode() - ability to tailor the response code of stub functions in order to exercise error paths;
* UT_ReportFailures() - test summary generator

OSAL could benefit from using the same framework to run its tests.  Most importantly, using the common ""UT_Report()"" API ensures that any errors that occur will be counted and logged in a consistent way.  This is particularly important for automated tests, as a simple ""grep"" command can reliably find failures within log files containing thousands of test cases.











",enhancement,https://github.com/nasa/osal/issues/40
OS_PEND and OS_CHECK are backwards,"For functions that have a ""timeout"" parameter, two special values are defined: ""OS_PEND"" can be used to wait forever, and ""OS_CHECK"" can be used to not wait at all / return immediately.

The issue is that ""OS_PEND"" is defined as ""0"" and ""OS_CHECK"" is defined as ""-1"".  These should be the other way around.

The problem is not so much when the special values are used but rather when they are NOT used and the timeout is computed by subtracting a current time from a deadline time.  If the result of that computation happens to be zero, the OSAL will interpret this as ""OS_PEND"" and will end up waiting forever.

Simply swapping the definitions of OS_CHECK and OS_PEND would make the operation much more logical by making a computed timeout of zero get the behavior of OS_CHECK and not OS_PEND.

",enhancement,https://github.com/nasa/osal/issues/39
Alternate time references for OSAL timers,"OSAL currently has a timer API which references only to the real time clock in the CPU.  All timers created using the OS_TimerCreate() / OS_TimerSet() API are always based on the same clock reference.

However, in an embedded system, a local clock may not always be the real reference for events; many systems derive their timing from an external entity which is NOT necessarily synchronized to the local CPU clock.

This ticket will add a new type of OSAL object called a ""Time Base"".  By default a time base can be driven from the local CPU real time clock, which will mimic the current behavior of timers.  However the BSP/PSP may create additional time bases and synchronize them to e.g. an external timing interrupt.  The same existing ""TimerSet"" API can be used to set the timers against the alternate time base and it will be transparent to the app.


",enhancement,https://github.com/nasa/osal/issues/38
"More lenient operation when ""SIMULATION"" compile-time directive is defined","When using the POSIX OSAL implementation under Linux, certain things only fully work when running as root.  Specifically:
* Attempts to create POSIX queues at depths greater than /proc/sys/fs/mqueue/msg_max (typically 10) will fail.
* Attempts to raise the priority of user threads will fail.

The queue depth issue in particular is so frequently encountered that there is a special message printed if queue creation fails.  However, the suggested workarounds require root access, and this would not typically be the case when using an official ACES-issued Linux workstation (unless one has elevated privileges).

In order to make it easier for someone to initially get up and running with OSAL/CFE, the OSAL should be more lenient and allow the operation to succeed even if all the parameters were not met due to being a normal user and not root.  

A workaround such as this can be employed if and only if compiling with the ""SIMULATION"" flag, as this indicates the user is performing a debug build and not running on a real target.  This way, the operation will still fail when performing a build for real hardware.

","enhancement, invalid",https://github.com/nasa/osal/issues/37
API prototype changes to address compiler warnings,"These areas of the OSAL API need clean up.

Task API:
* OS_TaskCreate() stack pointer is declared const (read-only).  By definition, stack space should not be read-only.
* OS_TaskInstallDeleteHandler() takes a ""void *"" argument rather than a function pointer.  This should be a function pointer.

Module API: 
* To be consistent with the other API's, a separate property structure should be defined for use with OS_ModuleInfo().  Currently this returns the internal OSAL ""OS_module_record_t"", while all other API's return a dedicated property object.  This is necessary to allow the internal implementation of the OSAL to change in the future while preserving the public API types.
* The types should be changed to use the ""cpuaddr"" type rather than uint32 where a memory address is stored (OS_module_address_t, OS_SymbolLookup())

General:
* When passing character strings as input to functions these should preferably be declared as ""const char *"" whenever possible.  This allows one to pass string literals into the function.  Otherwise a warning may be generated if a literal is used for a parameter declared as ""char *"".




",bug,https://github.com/nasa/osal/issues/36
Make file system API work more like the rest of OSAL,"In addition to the error code issue in ticket #34, other aspects of the filesystem API should be fixed to better integrate with the rest of OSAL:
* The filesystem API is not a full abstraction, it is only a light wrapper around the POSIX/C library functions.  Similarly, the ""os_fstat_t"", ""os_dirp_t"", and ""os_dirent_t"" are directly typedef'ed to the C library types and not abstracted in any way.  The effect of this is that any application code written using the OSAL filesystem API is ultimately still dependent on the underlying system libraries and headers, and the particular POSIX/C standard variant it supported, and may not be portable to other OS's.
* Due to the direct use of OS-supplied types and implementation, this implicitly adds a limitation that any OSAL filesystem must also map to a ""real"" filesystem recognized by the underlying OS.  It is not possible to access a file storage device unless the OS already recognizes its filesystem.
* The API calls are defined differently and look/feel more like C library functions than the rest of OSAL.  Some FS functions return an ""int32"" which serves as both an object ID and error code.  Other FS function return a pointer and these have no way of returning a more descriptive error other beyond a NULL pointer.  In the rest of OSAL, API functions pass back an object ID separately from the error code via a separate ""uint32"" parameter.  This eliminates confusion of how to differentiate an error code from a valid object ID.

This can be fixed without breaking API compatibility with existing code:
* The types which are currently directly typedef'ed to the C library types can be properly abstracted.  This will be transparent to application code as long as the names are preserved.
* A new file API can be introduced that works more like the rest of OSAL, and wrappers implemented to mimic the current API so that existing code still works.  To save code memory space, an optional compile time switch (e.g. in osconfig.h) can disable the wrapper functions once application code is updated.",enhancement,https://github.com/nasa/osal/issues/35
Duplicate OSAL error codes and  error string API,"osapi-os-filesys.h has its own set of error codes that overlap with and are **different from** the rest of OSAL error codes.  For example, ""OS_FS_ERR_NAME_TOO_LONG"" is not the same as ""OS_ERR_NAME_TOO_LONG"".  There are several codes that are redefined differently.  At a minimum, this is confusing, but it can also cause real bugs if the wrong action is taken due to misinterpreting an error.

Furthermore, FS has a second implementation of OS_GetErrorName called OS_FS_GetErrorName() that only translates the FS error codes.  Passing an error code from one of the filesystem functions into OS_GetErrorName will get the wrong string.

This should be cleaned up - the FS error codes should be merged with the rest of OSAL error codes into a single set, with a single implementation of OS_GetErrorName() to get them all.

",bug,https://github.com/nasa/osal/issues/34
API versioning for OSAL,"The OSAL version ID e.g. ""4.1.0.0"" can also be used by application code to determine API features in case they change over time.

Although the existing OSAL API is intended to remain stable across versions, new calls can (and should) be added when appropriate.  However this presents a problem for backward compatibility as new code written against a new API cannot be compiled with an older version of OSAL.

This is a common problem and is generally solvable by creating/checking a version macro.  For example, glibc uses ""POSIX_C_SOURCE"" as an integer to define which version of POSIX it should behave like.

The OSAL should do the same, and create an ""OSAL_API_VERSION"" macro that application code can check to see what version of the API the current OSAL supports.  Application code can then adjust itself accordingly, either by compiling without the new feature or generate a compile error if that feature is required.
",enhancement,https://github.com/nasa/osal/issues/33
Add free-run tick counter API to OSAL,"Many times it is simpler and more efficient to deal with a simple free-running tick counter than to deal with the full-blown time API.  On some OS platforms this is as simple as reading an internal timer tick register, but in the worst case it can always be generated from gettimeofday() or whatever the OS_GetLocalTime() already uses.

The OSAL currently has an API call for OS_GetLocalTime() that fills in an OS_time_t structure.  The problem with this structure is that it has two parts, seconds and microseconds, which makes it difficult to add and subtract from other OS_time_t structures.  Even if this were C++ and the code could be ""hidden"" behind an overloaded +/- operator, there is still the issue of an extra function call and checking for overflow which makes it slow and inefficient no matter how you mask it.

It can be argued that the majority of client code that calls functions such as this are really interested in ""relative"" time i.e. the amount of time elapsed since some prior event, as this is how timeouts and error handling are typically invoked.

A simpler way to solve this is via a single ever-incrementing (free-running) integer counter that simply increments each period and wraps around if INT_MAX is reached.  The major advantage is fast and simple add/subtract/compare operations to acquire relative times.  The disadvantage is that it is not easy to display as a human-readable time but this is typically not a problem -- the OS_GetLocalTime works for this.  It also is not able to measure relative times more than 2^31^ ticks (about 24.8 days for 1ms period), but if time spans that long need to be measured then typically a 1-second resolution is preferable anyway and that is already available via OS_GetLocalTime().

As this is a new API call, it will not affect any existing code, it only provides a new call to simplify operations where it is more appropriate than OS_GetLocalTime().

","duplicate, enhancement",https://github.com/nasa/osal/issues/32
Add OSAL abstraction for network/socket interface,"Currently the OSAL has a very minimal abstraction for network/socket functions.

Network operations are a common requirement and the presence/type of network stack can vary, such as BSD-style sockets or the lightweight IP (LwIP) stack.  This is a prime candidate for addition to the OSAL.  The abstraction layer should contain:

* Abstraction of OS socket address (sockaddr_in/_in6 for IPv4 and IPv6 at least)
* Abstraction of Stream/TCP & Datagram/UDP socket creation
* Bind/Listen for TCP
* Sendto/Recvfrom for UDP
* Abstractions for the basic inet_aton()/inet_ntop() IP-address ",enhancement,https://github.com/nasa/osal/issues/31
"Fix warnings in OSAL ""unit-test"" code","The code in the ""unit-tests"" directory in OSAL has a number of warnings when it compiles and this is one thing preventing turning on the strictest compiler settings (-Wall -Werror, etc) during the build.

Many of the warnings are related to passing a non-const string directly to a printf function when logging test results.
",bug,https://github.com/nasa/osal/issues/30
Make OSAL tests more autonomous,"The OSAL tests (in the ""tests"" directory, NOT ""unit-test"") provide reasonable ""black-box"" style testing of the OSAL features via the public API.  However they are currently implemented with the expectation of being explicitly run by a user at the console, not from an automated script:
* Most run infinitely, requiring a CTRL+C to stop the test
* They do not count errors or provide a status code to indicate whether the test worked as expected or not.

In order to integrate with a continuous integration system, these tests need to be more automated.

This ticket is to add a ""script-mode"" feature to the tests which:
* Checks for the expected conditions and maintains an error counter of any tests that did not satisfy expected conditions
* Limits the time of execution and exits the test automatically (no CTRL+C)
* Returns a non-zero exit code if any errors occurred (for scripting)

(Note: this does not apply to the ""unit-tests"" directory which is more white-box style code coverage testing -- this will possibly need other tweaks to work with a CI system and that is a separate ticket)
",bug,https://github.com/nasa/osal/issues/29
Refactor common code between VxWorks/Posix/Rtems into OSAL shared layer,"The OSAL library is essentially three separate libraries sharing a common API.  The VxWorks, Rtems, and Posix implementations do not share any code aside from the common osapi header files.  Depending on the OS selection, one of the three libraries will be compiled.

However, under the hood, many of the operations within these three libraries are very similar.  Although the final call down into the OS differs, much of the ""housekeeping"" that OSAL performs is similar between all three implementations.  

Each of them maintain internal tables that map OS objects to names and numbers, and all the OSAL API calls check their arguments against these internal tables to see e.g. if an object by some ID is valid or if an object by some name already exists.

All this housekeeping //really should be identical// and it could be argued that any difference is really a bug and not a feature, as differences here could affect the portability of application code from one OS to another.

Refactoring this ""common"" functionality into a layer which is actually shared among OS implementations provides several benefits:
* Cuts down on the code in the actual OS-specific portions by about 50%, and the code that is left is much more direct and ""to-the-point"".  For instance, an implementation of creating a semaphore //ONLY// needs to create the actual semaphore and return a success/fail code.  All locking, table manipulation, error checking, and recovery is handled by the shared/common layer.  
* This makes additional operating system layers easier to implement and less costly to maintain in the future.
* Likewise, abstraction of additional OS features (such as network sockets) is easier to implement and less costly to maintain in the future.
* Ensures that the housekeeping operations are done consistently across __ALL__ supported operating systems.  This greatly reduces the chances of operations working differently on one OS vs another.  This is particularly true of error conditions that may not be exactly the same or recovered in the same way between current OS implementations.


 
",enhancement,https://github.com/nasa/osal/issues/28
Document available OSs in trac wiki,"It would be helpful to construct a small Wiki page corresponding
to each Operating System implementation giving a quick overview of
the platform for which support is being provided.

I suggest including hotlinks on each such page back into the doc
subtree of the specific OS for extended documentation -- as clones
will obtain the content of the project sources but do not clone
the Trac wiki.",docs,https://github.com/nasa/osal/issues/27
Document available BSPs in trac wiki,"It would be helpful to construct a small Wiki page corresponding
to each Board Support Package giving a quick overview of
the platform for which support is being provided.

I suggest including hotlinks on each such page back into the doc
subtree of the specific BSP for extended documentation -- as clones
will obtain the content of the project sources but do not clone
the Trac wiki.",enhancement,https://github.com/nasa/osal/issues/26
Enhanced build system for OSAL,"This ticket is for the OSAL portion of the enhanced build system pushed out under the corresponding cFS ticket:

​[https://babelfish.arc.nasa.gov/trac/cfs_cfe/ticket/1]

The CMake script for OSAL can also be used to generate a standalone OSAL library for use with projects other than CFS",enhancement,https://github.com/nasa/osal/issues/25
"OSAL ""common_types.h"" is not completely reliable","On some systems (particularly 64-bit) the types defined in OSAL ""common_types.h"" file do not always match their expected widths.

There is currently a very helpful compile-time assert to catch this if it does go wrong but we need it to not go wrong in the first place.

The best way to solve this is to leverage the C ""stdint.h"" file - this has been standard since C99.  For any C library that does not have this header it can fall back to using the existing defines.",bug,https://github.com/nasa/osal/issues/24
Document stand-alone build using cmake,"**Is your feature request related to a problem? Please describe.**
Unable to replicate old make functionality with cmake in a stand-alone OSAL repo

**Describe the solution you'd like**
Document how to build, execute coverage tests, execute functional tests, and report coverage using cmake (or if the capability doesn't exist, add it).

**Describe alternatives you've considered**
Update build/*

**Additional context**
N/A

**Requester Info**
Jacob Hageman/NASA-GSFC
",duplicate,https://github.com/nasa/osal/issues/23
Stand-alone posix-ng coverage test fails to build,"**Describe the bug**
Posix-ng coverage tests fail to make

**To Reproduce**
Steps to reproduce the behavior:
From a clean directory with BASE_DIR=(your cFS base directory)
```
cmake -DOSALCOVERAGE_TARGET_OSTYPE='posix-ng' $BASE_DIR/osal/src/unit-test-coverage/
make
```
builds up to making ut_posix-ng_osapi with the following error:
```
[ 42%] Building C object posix-ng/modules/CMakeFiles/ut_posix-ng_osapi.dir/src/ut-osapi.c.o
cd /home/jhageman/cFS/osal_test_dir/posix-ng/modules && /usr/bin/cc  -D_UNIT_TEST_ -I/home/jhageman/cFS/cFS-GitHub/osal/src/unit-test-coverage/ut-stubs/inc/overrides -I/home/jhageman/cFS/cFS-GitHub/osal/ut_assert/inc -I/home/jhageman/cFS/cFS-GitHub/osal/src/os/inc -I/home/jhageman/cFS/cFS-GitHub/osal/src/bsp/pc-linux/config -I/home/jhageman/cFS/cFS-GitHub/osal/src/os/shared -I/home/jhageman/cFS/cFS-GitHub/osal/src/os/portable -I/home/jhageman/cFS/cFS-GitHub/osal/src/unit-test-coverage/ut-stubs/inc -I/home/jhageman/cFS/cFS-GitHub/osal/src/os/posix-ng  -D_LINUX_OS_   -Wall -Werror -pg --coverage -o CMakeFiles/ut_posix-ng_osapi.dir/src/ut-osapi.c.o   -c /home/jhageman/cFS/cFS-GitHub/osal/src/unit-test-coverage/posix-ng/modules/src/ut-osapi.c
/home/jhageman/cFS/cFS-GitHub/osal/src/unit-test-coverage/posix-ng/modules/src/ut-osapi.c:9:19: fatal error: osapi.c: No such file or directory
compilation terminated.
```

**Expected behavior**
Clean build, and execute/pass with make test

**Code snips**
Didn't investigate

**System observed on:**
 - cFS development server (VM)
 - OS: Linux 4.4.0-146-generic
 - Versions: rc-6.7.0 bundle

**Additional context**
N/A

**Reporter Info**
Jacob Hageman/NASA-GSFC",invalid,https://github.com/nasa/osal/issues/22
Fix #17: Update function description blocks across OSAL,"**Describe the contribution**
Fix #17 

Update inline block comments in function/file headers across all of OSAL and ensure consistency with the code itself.

- All documentation covering the specific details, inputs/outputs
and return values should be on the function _declaration_, not the
definition.

- The definition should also contain a block comment for visual
distinction in the source file, but should be brief and refer
back to the prototype/declaration for detail.  Any detail information
that was indicated only with the definition is moved to the
declaration.

- Add doxygen tags/markup to external/public API block comments
and expand the descriptions of these functions where needed.

- Add block comments to the internal API prototypes, but _not_
as doxygen tags/markup.  Note these functions are internal use,
not part of the public API, and are not necessarily intended
to be stable across OSAL releases like the public API is.

- Removed stray prototypes for functions where there was no
actual definition/implementation.

**NOTE**: All changes are primarily confined to comments, except where unused/unimplemented prototypes were removed.

**Testing performed**
Rebuilt CFE/OSAL per default config, with unit test enabled.  Confirm build as successful and unit tests execute.

**Expected behavior changes**
No impact to behavior

**System(s) tested on:**
Ubuntu 18.04 (64-bit)

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/osal/pull/21
"Fix #10, Update documentations for OS_TimerSet","**Describe the contribution**
Update TimerSet and TimerDelete API documentations. 

**Testing performed**
None

**Expected behavior changes**
None

**System(s) tested on:**
None


**Contributor Info**
Anh Van, NASA Goddard

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/osal/pull/20
"Fix #11, Update OS_TimerSet to return OS_ERROR ","**Describe the contribution**
Update OS_TimerSet to return OS_ERROR when both parameters are zero.

Fix #11

**Testing performed**
Steps taken to test the contribution:
1. Build steps 
2. Modify sample app to make OS_TimerSet API call with both parameters as zero
3. Verify return. 

**Expected behavior changes**
 - API Change: OS_TimerSet

**System(s) tested on:**
 - Hardware
 - OS: Ubuntu 18.04.03
 - cFS 6.7, GroundSystem 2.1.0, 


**Contributor Info**
Anh Van, NASA Goddard

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/osal/pull/19
OSAL headers define a shared memory API that is not actually implemented anywhere,"**Describe the bug**
The `osapi-os-core.h` header defines several prototypes e.g. `OS_ShMemCreate()`.  However, these functions are not implemented anywhere, and are not used by CFE nor CFS apps.

**To Reproduce**
N/A - this is unused code.

**Expected behavior**
The headers should not include these prototypes if they are not implemented and there is no plan or requirement to implement them.

**Code snips**

```
/*
** Shared memory API 
*/
int32 OS_ShMemInit          (void);
int32 OS_ShMemCreate        (uint32 *Id, uint32 NBytes, const char* SegName);
int32 OS_ShMemSemTake       (uint32 Id);
int32 OS_ShMemSemGive       (uint32 Id);
int32 OS_ShMemAttach        (cpuaddr * Address, uint32 Id);
int32 OS_ShMemGetIdByName   (uint32 *ShMemId, const char *SegName );
```


**System observed on:**
Ubuntu 18.04 (64-bit)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
","good first issue, deprecate",https://github.com/nasa/osal/issues/18
Inline documentation on OSAL routines is incorrect/outdated in many places,"**Describe the bug**
The comments in the function headers of many of the OSAL calls have become outdated and incorrect.

**To Reproduce**
N/A.  This reflects source code comments only.  Most evident on the ""implementation"" files which copied the comment block from the external function call.

**Expected behavior**
Comment blocks should better reflect reality of what the code does.  The ""real"" comment block that describes the function should reside with the function prototype.  The definition should also have a comment block but primarily for visual differentiation in the source code.  This block should not re-describe the function, as this results in multiple copies of the same description and thus could become stale/divergent again.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",docs,https://github.com/nasa/osal/issues/17
Fix #15 unit test warnings,"**Describe the contribution**
Fixes #15 
- Remove unused variable
- Add local function prototype where missing
- Qualify all pointers to string literals as `const`

**Testing performed**
Rebuild OSAL per default configuration with unit tests enabled
Re-ran all unit tests and confirm passage

**Expected behavior changes**
No warnings generated when using `-Wall -Werror -std=c99 -pedantic -Wwrite-strings -Wstrict-prototypes'

**System(s) tested on:**
Ubuntu 18.04 (64-bit)

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/osal/pull/16
Many compiler warnings in unit tests when using strict compiler flags,"**Describe the bug**
For historical backward-compatibility reasons ANSI C defines string literals as `char*` type, but these strings are typically put into an `.rodata` section on modern processors/linkers, and this section is usually write-protected.  If code actually attempts to modify this value, it will generate a segmentation fault and crash.

Building with `-Wwrite-strings` causes the compiler to treat string literals as `const char *` instead, thereby generating a warning if passed or assigned to a non-const pointer value.

**To Reproduce**
Configure with `make OSAL_USER_C_FLAGS='-Wall -Werror -std=c99 -pedantic -Wwrite-strings' ENABLE_UNIT_TESTS=true` and observe many warnings generated in the unit test code.

**Expected behavior**
The build should be free of warnings, such that `-Wwrite-strings` can be enabled by default.

**System observed on:**
Ubuntu 18.04 (64-bit)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",unit-test,https://github.com/nasa/osal/issues/15
Release candidate 5.0 merge to master,"**Describe the contribution**
Bulk merge to 5.5 and version update

**Testing performed**
Steps taken to test the contribution:
1. Checked out cFS rc-6.7.0, updated to latest cFE/OSAL/PSP rc branches and setup/built via standard instructions
2. Ran cFE and observed version update

```
EVS Port1 42/1/CFE_ES 2: Versions:cFE 6.7.0.0, OSAL 5.0.0.0, PSP 1.4.0.0, chksm 47578
```

**Expected behavior changes**
Major behavior changes will be documented in the VDD upon release (no major/requirements updates)
- Last gen build no longer included
- Refactored shared code
- Numerous bug fixes and improvements (no significant API changes)

**System(s) tested on:**
- cFS development server
- Ubuntu 16.04.6, 4.4.0-146-generic, x64
- 6.7.0 bundle with this update

**Additional context**
None

**Contributor Info**
Jacob Hageman/NASA-GSFC

**Community contributors**
CLA on file",,https://github.com/nasa/osal/pull/14
Added automated build capabilities using Travis-CI,"**Describe the contribution**
Auto build capabilities added using Travis-CI

**Testing performed**
Steps taken to test the contribution:
1. Verified auto build performed when new code is pushed to Github
2. Verified that each unit test runs and passes

**Expected behavior changes**
 - Auto build will be performed whenever new code is pushed to GitHub
 - Unit tests will be executed
 
**System(s) tested on:**
 - GitHub - Linux Xenial distribution

**Additional context**
none

**Contributor Info**
Travis Wheatley - Emergent Space Technologies

**Community contributors**
Work performed for NASA ""Task 3015""",duplicate,https://github.com/nasa/osal/pull/13
Microsecond round up code doesn't round up.,"**Describe the bug**
Spawned from #1 

The code comment claims it rounds up to never return zero.  The formula implemented doesn’t actually round up in all cases, since generally when casting a float/double to an int you lose the fractional part (truncation, not rounding).  So the code is not self-consistent.  It’s not a POSIX or OS issue, it’s that the code doesn’t do what it says it does.  The API document doesn’t specify a non-zero guarantee.

https://github.com/nasa/osal/blob/bfa7a33020e9a77221352a99bd2dbee4860ba852/src/os/posix/ostimer.c#L284-L290

Similar misleading comment at:

https://github.com/nasa/osal/blob/bfa7a33020e9a77221352a99bd2dbee4860ba852/src/os/posix/ostimer.c#L231-L232

For what it’s worth, on Linux (our Ubuntu dev system) this code reports 100 ticks per second, and 10000 usec per tick.  But if you pass in high values for ticks per second, it does return zero when it claims to round up (try 2000000 ticks per second).

**To Reproduce**
Steps to reproduce the behavior:
1. Compile
```
#include <stdio.h>
void main()
{
  float num = 0.7;
  printf(""float = %f, cast = %d\n"", num, (int)num);
}
```
2. Execute:
```
float = 0.700000, cast = 0
```

**Expected behavior**
Expected code to match comment, round up to not equal zero.  Algorithm doesn't work as claimed in comment.

**System observed on:**
 - cFS development server
 - OS: 4.4.0-146-generic #172-Ubuntu
 - Versions: n/a, sample code shows behavior (although I poked in cFE to cause the same thing)

**Additional context**
Add any other context about the problem here.

**Reporter Info**
Jacob Hageman/NASA-GSFC",enhancement,https://github.com/nasa/osal/issues/12
Return OS_ERROR if OS_TimerSet is called with both parameters as zero,"**Is your feature request related to a problem? Please describe.**
Related to the discussion in #9

**Describe the solution you'd like**
See title, as described in https://github.com/nasa/osal/issues/9#issuecomment-528071853

**Describe alternatives you've considered**
See #9 comment thread

**Additional context**
None

**Requester Info**
Jacob Hageman/NASA-GSFC",enhancement,https://github.com/nasa/osal/issues/11
Update OS_TimerSet API documentation for timer disable,"**Is your feature request related to a problem? Please describe.**
As stated in #9, the OS_TimerSet documentation does not match behavior.

**Describe the solution you'd like**
API documentation should describe OS_TimerDelete() as the method to cancel the timer (not a start time of zero)

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman/NASA-GSFC",docs,https://github.com/nasa/osal/issues/10
Rtems timer can not be disabled,"I think Rtems OS_timerset() not satisfy it's description in API document


![image2018-8-1_17-14-28](https://user-images.githubusercontent.com/4904059/43511205-ceb83d0e-95b2-11e8-9cb3-8679e8e8f144.png)


https://github.com/nasa/osal/blob/75beb864db7913bc29dc0b2cdfb193e2002fe40b/src/os/rtems/ostimer.c#L368

In POSIX API, Call OS_timerSet() with ""start_msec = 0"" causes timer stop but Rtems just ignore that parameter

I hope to change OSAL rtems api code to 

 if ( start_time > 0 )   {
      OS_UsecsToTicks(start_time, &timeout);
      status = rtems_timer_fire_after(OS_timer_table[timer_id].host_timerid, 
                                        timeout, 
                                        OS_TimerSignalHandler, (void *)timer_id );
      if ( status != RTEMS_SUCCESSFUL )
      {
         return ( OS_TIMER_ERR_INTERNAL);
      }
   } else {
     **status = rtems_timer_cancel(OS_timer_table[timer_id].host_timerid);
     if ( status != RTEMS_SUCCESSFUL )
     {
        return ( OS_TIMER_ERR_INTERNAL);
     }**
}
",duplicate,https://github.com/nasa/osal/issues/9
Binary Semaphore Can not be set 0 when it create,"https://github.com/nasa/osal/blob/75beb864db7913bc29dc0b2cdfb193e2002fe40b/src/os/posix/osapi.c#L2274

I think this statement has a  problem. 

If I input semaphore with initial value 0, this statement ignores input value 0 and make it 1

Is there any other intention that I missed?

if not I recommend to fix statement
  if (sem_initial_value < 0)  >>>     if (sem_initial_value <= 0)

",invalid,https://github.com/nasa/osal/issues/8
qnx osal,Does such exists in nature?,question,https://github.com/nasa/osal/issues/7
Test `bin-sem-flush-test` does not compile,"OSAL fails to compile with a clean clone of the repo.

```
(.venv) chris@linux-fkyc:~/Workspace/osal> source setvars.sh 
(.venv) chris@linux-fkyc:~/Workspace/osal> cd build/
(.venv) chris@linux-fkyc:~/Workspace/osal/build> make config
test -d inc || mkdir inc
cp -f ../src/bsp/pc-linux/config/osconfig.h inc/osconfig.h
(.venv) chris@linux-fkyc:~/Workspace/osal/build> make
make -C tests 
make[1]: Entering directory '/home/chris/Workspace/osal/build/tests'
make -C bin-sem-flush-test 
make[2]: Entering directory '/home/chris/Workspace/osal/build/tests/bin-sem-flush-test'
gcc  -I/home/chris/Workspace/osal/src/inc -I/home/chris/Workspace/osal/src/os/inc -I/home/chris/Workspace/osal/src/tests/bin-sem-flush-test -I/home/chris/Workspace/osal/src/../ut_assert/inc -I../../inc   -D_EL -DENDIAN=_EL -DSOFTWARE_LITTLE_BIT_ORDER  -D__ix86__ -D_ix86_ -D_LINUX_OS_ -Dposix -DX86PC -DBUILD= -D_REENTRANT -D _EMBED_  -D_XOPEN_SOURCE=600   -Wall -pedantic -std=c99 -Wstrict-prototypes -O1 -DOS_DEBUG_LEVEL=3 -c -o bin-sem-flush-test.o /home/chris/Workspace/osal/src/tests/bin-sem-flush-test/bin-sem-flush-test.c
In file included from /home/chris/Workspace/osal/src/tests/bin-sem-flush-test/bin-sem-flush-test.c:5:0:
/home/chris/Workspace/osal/src/os/inc/common_types.h:326:38: error: size of array ‘TypeUint32WrongSize’ is negative
 CompileTimeAssert(sizeof(uint32)==4, TypeUint32WrongSize);
                                      ^
/home/chris/Workspace/osal/src/os/inc/common_types.h:104:60: note: in definition of macro ‘CompileTimeAssert’
 #define CompileTimeAssert(Condition, Message) typedef char Message[(Condition) ? 1 : -1]
                                                            ^
/home/chris/Workspace/osal/src/os/inc/common_types.h:330:38: error: size of array ‘Typeint32WrongSize’ is negative
 CompileTimeAssert(sizeof(int32)==4,  Typeint32WrongSize);
                                      ^
/home/chris/Workspace/osal/src/os/inc/common_types.h:104:60: note: in definition of macro ‘CompileTimeAssert’
 #define CompileTimeAssert(Condition, Message) typedef char Message[(Condition) ? 1 : -1]
                                                            ^
/home/chris/Workspace/osal/src/make/app-rules.mak:21: recipe for target 'bin-sem-flush-test.o' failed
make[2]: *** [bin-sem-flush-test.o] Error 1
make[2]: Leaving directory '/home/chris/Workspace/osal/build/tests/bin-sem-flush-test'
Makefile:2: recipe for target 'all' failed
make[1]: *** [all] Error 2
make[1]: Leaving directory '/home/chris/Workspace/osal/build/tests'
Makefile:8: recipe for target 'all' failed
make: *** [all] Error 2
(.venv) chris@linux-fkyc:~/Workspace/osal/build> 
```",question,https://github.com/nasa/osal/issues/6
Added missing gitignore rules,"Just adding gitignore rules to prevent the dirty git status when project is built:

```
# Untracked files:
#   (use ""git add <file>..."" to include in what will be committed)
#
#	build/inc/
```",,https://github.com/nasa/osal/pull/5
OS_QueueGet bugfix,"When user uses OS_QueueGet  with timeout paramater, then always timeot fails even if actual data aquired",,https://github.com/nasa/osal/pull/4
Pull request partial deadlock fix,"The OSAL api uses a global lock to perform some operations using mutex,
semaphores, queues and so. This leads to a possible deadlock in the program
due the following situation.

Let ""I"" be the timer interrupt (SIG63):

```
   |[Thread 1]
   |  ...
   |  call OS_TaskGetInfo
   |    ...
   |    lock(global)
   |    ...
   +--------------------+
                        |[Interrupt]
                        |  ...
                        |  call OS_TaskGetInfo
                        |    ...
                        |    lock(global)  // DEADLOCK
```

There are some possible solutions to avoid this problem. One is to never use any
OSAL primitives on the interrupt context, which quite limit the library. Other
would be block all signals during the global lock and let them be pending. This
approach may introduce poor performance. Other would be find out how to remove
these global locks. Another could be use safe locks on interrupt handler.

This patch implements the blocking signals solution because it is the best
trade-off of the current solutions.
",wontfix,https://github.com/nasa/osal/pull/3
Use stdint as common type bases,,duplicate,https://github.com/nasa/osal/pull/2
Avoid division by zero in posix targets,"The tick duration in microseconds may be calculated to zero depending on the
processor clock speed.

Maybe another solution could be using BogoMips for calculating the tick duration or even querying sysfs (i.e. /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq). Both have drawbacks and in some case zero will be get as a result.

Also BogoMips has recently change and now it can be specified at build time.
",invalid,https://github.com/nasa/osal/pull/1
