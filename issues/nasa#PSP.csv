Title,Body,Labels,URL
Create test,"**Checklist (Please check before submitting)**

* [ ] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [ ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
- Include explicitly what issue it addresses [e.g. Fixes #X]

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
 - Note CLAs apply to only software contributions.
",,https://github.com/nasa/PSP/pull/401
"Fix #399, Fixes errors in IC Bundle workflow file","**Checklist (Please check before submitting)**

* [X] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Addresses issue #399.

**Testing performed**
Generated IC branch in fork.

**Expected behavior changes**
No additional ""#"" is placed in front of ""#define CFE_PSP_IMPL_BUILD_NUMBER ..."" in fsw/mcp750-vxworks/inc/psp_version.h
No additional ""#"" is placed in front of ""#define CFE_PSP_IMPL_BUILD_NUMBER ..."" in fsw/pc-linux/inc/psp_version.h
No additional ""#"" is placed in front of ""#define CFE_PSP_IMPL_BUILD_NUMBER ..."" in fsw/pc-rtems/inc/psp_version.h

**System(s) tested on**
GitHub

**Contributor Info - All information REQUIRED for consideration of pull request**
Dylan Z. Baker/NASA GSFC",,https://github.com/nasa/PSP/pull/400
Formatting Issues with ICBundle Workflow,"**Describe the bug**
Similar to nasa/cFE#2419. There are some small formatting issues that should be corrected in the changelog/version.h updates made by the ICBundle workflow:
1. An additional ""#"" is placed in front of ""#define CFE_PSP_IMPL_BUILD_NUMBER ..."" in fsw/mcp750-vxworks/inc/psp_version.h
2. An additional ""#"" is placed in front of ""#define CFE_PSP_IMPL_BUILD_NUMBER ..."" in fsw/pc-linux/inc/psp_version.h
3. An additional ""#"" is placed in front of ""#define CFE_PSP_IMPL_BUILD_NUMBER ..."" in fsw/pc-rtems/inc/psp_version.h

**To Reproduce**
Steps to reproduce the behavior:
1. Push a code change to a user-owned feature branch
2. Submit a pull request for that code change
3. Go to the ""Actions"" tab in GitHub and run the ""Integration Candidate Bundle Generation"" workflow with the PR number as the input argument for the field labeled ""The pull request numbers to include (Comma separated):""
4. Wait for the workflow to complete
5. Inspect the newly updated/generated ""integration-candidate branch""
6. Observe the changes made to the fsw/mcp750-vxworks/inc/psp_version.h, fsw/pc-linux/inc/psp_version.h, and fsw/pc-rtems/inc/psp_version.h files by the workflow

**Expected behavior**
1. No additional ""#"" is placed in front of ""#define OS_BUILD_NUMBER ..."" in fsw/mcp750-vxworks/inc/psp_version.h
2. No additional ""#"" is placed in front of ""#define OS_BUILD_NUMBER ..."" in fsw/pc-linux/inc/psp_version.h
3. No additional ""#"" is placed in front of ""#define OS_BUILD_NUMBER ..."" in fsw/pc-rtems/inc/psp_version.h

**System observed on:**
GitHub

**Reporter Info**
Dylan Z. Baker/NASA GSFC",,https://github.com/nasa/PSP/issues/399
Implement VxWorks Sysmon,"**Describe the solution you'd like**
Implement a VxWorks Sysmon to calculate CPU utilization. 

**Describe alternatives you've considered**
None. 

**Additional context**
Add any other context about the feature request here.

**Requester Info**
Full name and company/organization if applicable
Anh Van, GSFC NASA",,https://github.com/nasa/PSP/issues/398
"Fix #396, Implement RTEMS Sysmons","**Checklist (Please check before submitting)**

* [ x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [ x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
Fixes 396, Implemented a rtems sysmon
Not fully tested for SMP

**Testing performed**
Steps taken to test the contribution:
1. Build with Rtems 5/6
2. Modify sample app to call and run rtems_sysmon
3. Make SIMULATION=i686-rtems6/i686-rtems5 prep
4. Make insall
5. run on qemu


**Expected behavior changes**
None

**System(s) tested on**
 - Simulated:
 - i686 - rtems5/6 

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
 - Note CLAs apply to only software contributions.

Anh Van, GSFC
",,https://github.com/nasa/PSP/pull/397
Implement RTEMS SYSMON,"**Is your feature request related to a problem? Please describe.**

**Describe the solution you'd like**
Implement a version of linux_sysmon for rtems 

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Full name and company/organization if applicable
Anh Van. GSFC
",,https://github.com/nasa/PSP/issues/396
RTEMS.cmake: add quotes around ${RTEMS_BSP_C_FLAGS}.,"Without the quotes, only the first argument is actually passed to the compiler by rtems-syms.

**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [X] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
- This change ensures that all flags from `RTEMS_BSP_C_FLAGS` are passed from `rtems-syms` to the compiler.

**Testing performed**
Steps taken to test the contribution:
1. Only tested to check if compilation succeeds.

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: N/A
 - Behavior Change: xxx (if applicable)

Before: The only flag that `rtems-syms` passes to the compiler is `-march=armv7-a`. This causes a crash because the compiler assumes the wrong floating point ABI.
```
/home/jacob/projects/rtems/6/bin/rtems-syms -vvv -e -c -march=armv7-a -mthumb -mfpu=neon -mfloat-abi=hard -mtune=cortex-a7 -fno-common -fdata-sections -ffunction-sections -C /home/jacob/projects/rtems/6/bin/arm-rtems6-gcc -o cmTC_56657.exe-dl-sym.o cmTC_56657.exe-prelink
    RTEMS Kernel Symbols 6.ac1fee4f04fe
    kernel: cmTC_56657.exe-prelink
    cache:load-sym: object files: 1
    cache:load-sym: symbols: 1459
    Filtered symbols: 1074
    symbol C file: /tmp/ccaneeaa.c
    symbol O file: cmTC_56657.exe-dl-sym.o
    execute: /home/jacob/projects/rtems/6/bin/arm-rtems6-gcc -march=armv7-a -O2 -c -o cmTC_56657.exe-dl-sym.o /tmp/ccaneeaa.c 
```

After: All flags are correctly passed to the compiler. The floating point ABI is correctly specified.
```
/home/jacob/projects/rtems/6/bin/rtems-syms -vvv -e -c ""-march=armv7-a -mthumb -mfpu=neon -mfloat-abi=hard -mtune=cortex-a7 -fno-common -fdata-sections -ffunction-sections"" -C /home/jacob/projects/rtems/6/bin/arm-rtems6-gcc -o cmTC_ed3ae.exe-dl-sym.o cmTC_ed3ae.exe-prelink
RTEMS Kernel Symbols 6.ac1fee4f04fe
kernel: cmTC_ed3ae.exe-prelink
cache:load-sym: object files: 1
cache:load-sym: symbols: 1463
Filtered symbols: 1075
symbol C file: /tmp/ccNoeeaa.c
symbol O file: cmTC_ed3ae.exe-dl-sym.o
execute: /home/jacob/projects/rtems/6/bin/arm-rtems6-gcc -march=armv7-a -mthumb -mfpu=neon -mfloat-abi=hard -mtune=cortex-a7 -fno-common -fdata-sections -ffunction-sections -O2 -c -o cmTC_ed3ae.exe-dl-sym.o /tmp/ccNoeeaa.c 
```

**System(s) tested on**
 - Hardware: Raspberry Pi 3.
 - OS: Building on Ubuntu 22.04 for RTEMS 6.
 - Versions: PSP `draco-rc4`.

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
 - Jacob Killelea / Personal","CCB:Approved, Equuleus-rc2",https://github.com/nasa/PSP/pull/395
Static Analysis Warnings,"**Describe the bug**
Several coding violations were flagged by software assurance.  We need to adjudicate the warnings defined in the attached spreadsheet.

[StaticAnalysisWarnings.xlsx](https://github.com/nasa/PSP/files/11757770/StaticAnalysisWarnings.xlsx)

**Reporter Info**
Dan Knutsen
NASA Goddard",,https://github.com/nasa/PSP/issues/394
CFE_PSP_Module_FindByName does not find base modules,"**Describe the bug**
PSP modules can be enabled in two ways, either by adding to the `${cpuname}_PSP_MODULELIST` in targets.cmake (for optional/platform-specific hardware access routines) or a set of ""standard"" modules listed in `psp_module_list.cmake` file under the PSP.

Problem is that `CFE_PSP_Module_FindByName()` only looks at the user-specified list (from targets.cmake) and not the list of standard modules.

This is needed for HS because the `linux_sysmon` monitor (for cpu utilization) is now listed as a standard module for pc-linux PSP, but this inadvertently made it un-findable.

**To Reproduce**
Run the current build of framework + HS app (which relies on being able to locate the `linux_sysmon` module).  HS does not find a module and disables CPU usage reporting.

**Expected behavior**
HS should find the module and enable usage reporting

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/PSP/issues/393
PSP Integration candidate: Caelum-rc4+dev47,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #391. Addresses Issue #390

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/669/checks)
[PSP Checks](https://github.com/nasa/PSP/pull/392/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 22.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@dzbaker",,https://github.com/nasa/PSP/pull/392
"Fix #390, Create Workflow for IC Bundle Generation","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFE/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
A clear and concise description of what the contribution is.
- Addresses issue #390.

**Testing performed**
Generated IC branch in fork.

**Expected behavior changes**
Adds new workflow for integration candidate branch generation.

**Contributor Info - All information REQUIRED for consideration of pull request**
Dylan Z. Baker/NASA GSFC 582",CCB:Approved,https://github.com/nasa/PSP/pull/391
Automate Generation of Integration Candidate Branch,"**Is your feature request related to a problem? Please describe.**
Generating the integration candidate branch is a very straightforward process, although it can be highly time consuming. Automating this process can result in significant time savings.

**Describe the solution you'd like**
Use a GitHub workflow to automatically merge a set of pull requests into the integration candidate branch and push it to GitHub.

**Describe alternatives you've considered**
Scripts can be used to simplify this process as well, but it requires setup by the person maintaining the repository and isn't as portable.

**Requester Info**
Dylan Baker/NASA GSFC 582","enhancement, continuous-integration",https://github.com/nasa/PSP/issues/390
PSP Integration candidate: Caelum-rc4+dev45,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #386. Addresses Issue #385

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/667/checks)
[PSP Checks](https://github.com/nasa/PSP/pull/389/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 22.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",,https://github.com/nasa/PSP/pull/389
"Fix #387, Replace hand-written function names with __func__","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #387
  - Updated a few `printf()` strings with hand-written function names to use the `__func__` identifier.

Although the names of these functions are unlikely to change, it never hurts to lower dependence on hand-written comments that may need to be updated in the future. May as well use the functionality provided by the predefined identifiers if it's available.

**Testing performed**
GitHub CI actions all passing successfully and local cFS bundle tests confirm no issues.

**Expected behavior changes**
No change to behavior.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/PSP/pull/388
A few hand-written function names in printf strings could be updated to use `__func__`,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the `bug` report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
There are a few remaining locations in PSP that use hand-written function names in the `printf()` message strings.

**Code snips**
https://github.com/nasa/PSP/blob/6fceb13c1dc433f0943fb41511acd1f9a96916f3/fsw/pc-rtems/src/cfe_psp_support.c#L83
https://github.com/nasa/PSP/blob/6fceb13c1dc433f0943fb41511acd1f9a96916f3/fsw/pc-linux/src/cfe_psp_support.c#L131

**Expected behavior**
Use the `__func__` predefined identifier where possible to lower future dependencies to updating hand-written comments.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/PSP/issues/387
"Fix #385, adds generic driver interface and Linux sysmon module","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Defines an ""iodriver"" interface with a simple module id + opcode + argument interface, which can be extended as necessary for different purposes.

Also adds a ""linux_sysmon"" module that implements this interface to provide system monitoring capabilities.  This includes, but is not limited to, the CPU utilization that HS needs.

Fixes #385

**Testing performed**
Build and run CFE with (patched) HS, observe CPU utilization getting reported correctly via the PSP module

**Expected behavior changes**
Adds ""iodriver"" pluggable/extendable interface, and ""linux_sysmon"" for health monitoring

**System(s) tested on**
Debian

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/PSP/pull/386
Add API for obtaining system health statistics,"**Is your feature request related to a problem? Please describe.**
CFS apps (such as HS in particular) need to monitor and report the health of the system, in particular CPU usage.  Unfortunately this info can vary wildly and there is no standardized way of getting it via POSIX or other OS APIs - it is generally only obtainable via platform-specific access methods such as the `/proc` filesystem on Linux.

**Describe the solution you'd like**
Design an API that can obtain system health statistics.  Initially this must support per-core CPU usage, but should be extendable to support arbitrary variables such as temperature, network+disk I/O stats, RAM+swap use, etc.  Basically anything that is typically shown in a PC ""health monitor"" app.

**Additional context**
Initially the CPU usage stats would allow nasa/HS#3, nasa/HS#4, and nasa/HS#85 to be resolved.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/PSP/issues/385
Add example of hardware-based 1Hz signal,"**Is your feature request related to a problem? Please describe.**
A few releases back the 1Hz configuration was changed to be initiated by CFE TIME itself, rather than started by the PSP.  This was done in order to resolve a race condition where the signal arrived before CFE TIME was ready to process it.

However, as a result, we no longer have a good example of a ""real"" hardware-based 1PPS/1Hz signal driving the CFE TIME 1Hz input, as the current example uses a software kernel timer only.

**Describe the solution you'd like**
Create an alternative to the `soft_timebase` module that reads a 1PPS signal from an external reference such as a serial port - as a number of GPS receivers do use a serial line to provide 1PPS along with location data.  This probably still wouldn't be directly usable but it would at least provide a (closer) example of how this could be achieved, that the user could modify for their particular setup.

**Describe alternatives you've considered**
There are two other ways this could be synced:
1. Use an external process like gpsd to sync the kernel clock to the 1PPS, then use `soft_timebase` as-is.  The result is that the 1Hz TIME signal will be in phase with the reference signal, but it won't occur at the same time.  This phase delay may or may not acceptable depending on the application.  This does have the advantage of having only a single time domain across the entire system (kernel/OS clocks and timers will all be synchronous with the GPS time) and it is totally transparent to apps - they just read time as normal.
2. Use an external sync routine (last argument to `OS_TimeBaseCreate` to wait for the 1PPS.  This is similar to 1 but easier to implement (no external dependencies) however the result will be more jittery and apps must know that this timebase may not be synchronous with the OS/kernel clock.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

","enhancement, CCB:Ready, Equuleus-rc2",https://github.com/nasa/PSP/issues/384
"Fix #382, Replace exit(1) and exit(-1) with EXIT_FAILURE macro","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #382 
  - A few cases of `exit(1)` and `exit(-1)` replaced with `EXIT_FAILURE` macro.

Note: A single case was replaced with `EXIT_SUCCESS` in `CFE_PSP_DisplayUsage()` - this call to `exit()` seems to be there simply to explicitly end execution of the function (it's a `void` function) so I assume there is no difference between exiting with SUCCESS or FAILURE.

**Testing performed**
GitHub CI actions all passing successfully.
Tested locally to confirm no change to test outcomes or coverage.

**Expected behavior changes**
No change to behavior.
The macros are more expressive and potentially more portable.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/PSP/pull/383
Replace exit(1) and exit(-1) with preferred macro EXIT_FAILURE,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the bug**
PSP contains a few uses of `exit(1)` and 'exit(-1)'.
Copy of https://github.com/nasa/tblCRCTool/pull/77

**Expected behavior**
Recommend replacing with the more expressive and more portable `EXIT_FAILURE` or 'EXIT_SUCCESS' macros.

**Code snips**
https://github.com/nasa/PSP/blob/6fceb13c1dc433f0943fb41511acd1f9a96916f3/fsw/mcp750-vxworks/src/cfe_psp_support.c#L118
https://github.com/nasa/PSP/blob/6fceb13c1dc433f0943fb41511acd1f9a96916f3/fsw/pc-rtems/src/cfe_psp_support.c#L84

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/PSP/issues/382
"Fix #274, Cleanup and add doxygen for cfe_psp.h","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Partially fixes #274 

I have not attempted to split up the header, nor removed any functions - I intended to leave those as separate work items in the original issue or open a new issue for them. Can also remove functions in this PR if there is consensus/advice to do so.

Doxygen markup added, along with more detail for @param's, @return's etc.

Moved some existing function header information from the implementation files into `cfe_psp.h` - *unless* there is platform-specific information in that particular variant's function header comment. The .h file is the logical and central 'source-of-truth' for the function header information, and doubling it up (or tripling/quadrupling in the case of PSP) just leads to inconsistencies when updates occur.

Comments referring to `BSPReadCDSRtn`, `BSPWriteCDSRtn` and `PSPRestartRt` were removed as these seem to be no longer implemented - unless they exist in some other non-public implementation?

Also, is `PtrToDataToRead` a bit of a misnomer? (the pointer is for storage of the data no?)

**Testing performed**
Just GitHub CI.

**Expected behavior changes**
Documentation changes only.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/PSP/pull/381
"Fix #379, Align mismatched function prototype/implem. parameter names","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fixes #379 
  - Similar to https://github.com/nasa/cFE/pull/1551/files from cFE

All flight code function declarations now match the implementations (incl. parameter names).

**Testing performed**
GitHub CI actions all passing successfully.
Local test build - 100% tests passing successfully.

**Expected behavior changes**
No change to behavior.
Code clarity and consistency improved.

**System(s) tested on**
Intel(R) Celeron(R) N4100 CPU @ 1.10GHz x86_64
Debian GNU/Linux 11 (bullseye)
Current main branch of cFS.

**Contributor Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/PSP/pull/380
Scrub for mismatched function prototype/implementation parameter names,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
3 cases of mismatched parameter names between function prototypes and their implementations.
e.g.
https://github.com/nasa/PSP/blob/6fceb13c1dc433f0943fb41511acd1f9a96916f3/fsw/inc/cfe_psp.h#L397
https://github.com/nasa/PSP/blob/6fceb13c1dc433f0943fb41511acd1f9a96916f3/fsw/shared/src/cfe_psp_memutils.c#L69

**Expected behavior**
Mismatched parameter names can be confusing for maintenance and application programming. Best for them to match for the sake of code clarity.

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/PSP/issues/379
Must 'else if' constructs always have a final 'else'?,"**Describe the bug**
Do the coding guidelines (or general cFS custom) require all `else if` constructs to have a final 'catch all' `else` block?
If so, there are a couple of remaining cases here in PSP that are missing one.

**Code snips**
https://github.com/nasa/PSP/blob/6fceb13c1dc433f0943fb41511acd1f9a96916f3/fsw/pc-linux/src/cfe_psp_start.c#L378-L405

**Suggestion**
1st case can simply be replaced by an `else` (there are only 2 options for the validity flag) or just leave as is, but add an empty `else` at the end to make it explicit).
![Screenshot 2023-01-27 14 30 41](https://user-images.githubusercontent.com/9024662/215009748-083cd609-9892-485c-9805-17ce30685421.png)

Note: there is 1 more case in the test code

**Reporter Info**
Avi Weiss @thnkslprpt",,https://github.com/nasa/PSP/issues/378
PSP Integration candidate: Caelum-rc4+dev34,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #374. Addresses Issue #373
- PR #372. Addresses Issue #371

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/638/checks)
[PSP Checks](https://github.com/nasa/PSP/pull/377/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 22.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper",,https://github.com/nasa/PSP/pull/377
"Fix #375, Separate network logic in pc-rtems to support generic targets","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #375 

NOTE: really this is just a draft proof of concept to show this can be used generically if the network config is removed

**Testing performed**
Spot checked with LEON3 QEMU.

**Expected behavior changes**
Eventually plan to use source selection to include platform specific config... or consider making this generic in some other way.  PSP module would be nice but I'm not aware of a way to select from a toolchain file or based on platform without making another psp.

**System(s) tested on**
LEON3 QEMU, see https://github.com/nasa/osal/pull/1350

**Additional context**
Depends on an as-yet submitted toolchain file.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/PSP/pull/376
Separate network logic in pc-rtems to support generic targets,"**Is your feature request related to a problem? Please describe.**
The only non-generic implementation in pc-rtems is the network setup, which prevents use on a generic target.

**Describe the solution you'd like**
Isolate/separate network setup to support source selection or similar configuration option.  Consider configuring from target defs or similar to avoid changes required within psp.

**Describe alternatives you've considered**
Could make an additional psp, but doesn't seem worth duplicating all the pc-rtems code that isn't specific to pc's.

**Additional context**
Specific parts:
https://github.com/nasa/PSP/blob/a260e9cc0a8fa5c96e55b1df4d39a6799a812ea4/fsw/pc-rtems/src/cfe_psp_start.c#L36-L40
https://github.com/nasa/PSP/blob/a260e9cc0a8fa5c96e55b1df4d39a6799a812ea4/fsw/pc-rtems/src/cfe_psp_start.c#L67-L84

Might also benefit from making /mnt/eeprom a config param... depends on how/where this is actually set up by the PSP.  Would be nice to shift away from ""eeprom"" and use generic ""nonvol"".

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/PSP/issues/375
"Fix #373, Squash constParameter warning in linux cfe_psp_memory.c","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #373 

**Testing performed**
CI

**Expected behavior changes**
Squash CI failure/cppcheck style warning

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/PSP/pull/374
"cppcheck 2.7 style warnings, constParameter","**Is your feature request related to a problem? Please describe.**
From unrelated run: https://github.com/skliper/PSP/actions/runs/3830123523

<html>
<body>
<!--StartFragment-->

severity | location | error id | issue
-- | -- | -- | --
style | fsw/pc-linux/src/cfe_psp_memory.c:758 | constParameter | Parameter 'PtrToKernelSegment' can be declared with const
style | fsw/pc-linux/src/cfe_psp_memory.c:758 | constParameter | Parameter 'SizeOfKernelSegment' can be declared with const

<!--EndFragment-->
</body>
</html>

**Describe the solution you'd like**
Squash warnings

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/PSP/issues/373
"Fix #371, Remove obsolete _USING_RTEMS_INCLUDES_","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #371 

**Testing performed**
CI

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/PSP/pull/372
Remove obsolete `_USING_RTEMS_INCLUDES_`,"**Is your feature request related to a problem? Please describe.**
`_USING_RTEMS_INCLUDES_` is no longer used for anything.

https://github.com/nasa/PSP/blob/a260e9cc0a8fa5c96e55b1df4d39a6799a812ea4/fsw/pc-rtems/src/cfe_psp_start.c#L27

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/PSP/issues/371
"Fix #311, Free (close) FileDescriptor resource to avoid leak","*Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #311 
Added additional `close()` for `FileDescriptor` which was missing before the end of the function.

**Testing performed**
GitHub CI actions (incl. Build + Run, Unit Tests etc.) all passing successfully.

**Expected behavior changes**
`FileDescriptor` freed (closed) before going out of scope, avoiding slight resource leak.

**Contributor Info**
Avi @thnkslprpt",,https://github.com/nasa/PSP/pull/370
PSP Integration candidate: Caelum-rc4+dev26,"**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- PR #365. Addresses Issue #364
- PR #368. Addresses Issue #367

**Testing performed**
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/597/checks)
[PSP Checks](https://github.com/nasa/PSP/pull/369/checks)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
@thnkslprpt",,https://github.com/nasa/PSP/pull/369
"Fix #367, Remove redundant/inconsistent comments (/* end of function */, /* end if */ etc.) and clean up empty lines.","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #367
Removes redundant and inconsistent comments (e.g. `/* end of function */`, `/* end if */`, function name in function header comments).
There were also a few cases of unnecessary empty lines (e.g. on the last line before the closing brace of a function) and also missing empty lines (e.g. between functions) which were corrected. Some of these empty lines trigger the CI format checks.
I've left the commits separated for now to make life easier for whoever reviews this. I can squash them if/when this is ready for merge.

**Testing performed**
None (comment and whitespace changes only).

**Expected behavior changes**
No impact on behavior.
These updates will reduce clutter and inconsistency in the code, improving readability.

**Contributor Info**
@thnkslprpt ",,https://github.com/nasa/PSP/pull/368
"Redundant comments (/* end of function */, /* end if */ etc.) and clean up empty lines.","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Copy of https://github.com/nasa/to_lab/issues/68 and https://github.com/nasa/sample_app/issues/111
There are quite a few redundant comments in the code, such as:
- `/* end of function */`-type comments
- `/* end if */`-type comments
- function header comments which include the function name

Another minor issue has to do with empty lines:
a) _unnecessary_ empty lines (e.g. first line after the opening brace of a function/struct, or the last line before the closing brace - the latter apparently sometimes triggers the CI format checks).
b) _missing_ empty lines between functions (i.e. closing brace of last function, then next function beginning on the immediately next line without an empty line in between)

The unnecessary empty lines (at the beginning or end of a function, for example) represent a low single-digit percentage of the cases (the vast majority of functions/structs do not have these extra empty lines), so there is an argument to remove them purely for consistency, not just due to them being redundant and triggering the CI format checks.

**Expected behavior**
Remove redundant comments to reduce clutter and inconsistency in the code, and improve readability.

**Reporter Info**
@thnkslprpt ",,https://github.com/nasa/PSP/issues/367
CFE_PSP_WatchdogInit method is not present in ut_psp_stub.c file,"**Describe the bug**
Receiving an error during building unit tests that states ""undefined reference to `CFE_PSP_WatchdogInit' "" while testing a method that calls the CFE_PSP_WatchdogInit method.

**To Reproduce**
Steps to reproduce the behavior:
1. Find a production code method that uses the CFE_PSP_WatchdogInit
2. Write a unit test that tests that function
3. Attempt to build
4. See error

**Expected behavior**
Build successfully, run tests with them able to use the stubbed behavior from CFE_PSP_WatchdogInit.

**Code snips**
The production code declaration:
https://github.com/nasa/PSP/blob/1bd7bd9508dbe7e0084fc8ad600479c5831d7660/fsw/inc/cfe_psp.h#L330-L333

**System observed on:**
 - Hardware: Dell Precision 7730
 - OS: RHEL 8.6
 - Versions: tag v1.6.0-rc4, also **main** branch

**Additional context**
This is only one of many watchdog methods in PSP; none are present in the ut_psp_stubs.c file. I did not encounter the usage of any other of these watchdog methods, yet.

**Reporter Info**
Alan Gibson
NASA/GSFC Code 587
",,https://github.com/nasa/PSP/issues/366
"Fix #364, Stop empty function catching CI workflow format checks","**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Quick fix of #364

**Testing performed**
None

**Expected behavior changes**
Empty function will stop catching up workflow check and causing its failure.

**Contributor Info - All information REQUIRED for consideration of pull request**
@thnkslprpt ",CCB:Approved,https://github.com/nasa/PSP/pull/365
CI Workflow check catching empty function,"        > > @thnkslprpt Can you take a look at the format check workflow and fix the issue caught by it? Specifically about `void CFE_PSP_SetDefaultExceptionEnvironment(void)`. Thank you!
> 
> It seems that the warning was deemed ignorable in this case, given that the pull request was merged, which is good because I was having trouble deciphering exactly what the error was referring to anyway. Was it just due to the empty function?

The ""error on differences"" step of the format check workflow (https://github.com/nasa/PSP/actions/runs/3163591969/jobs/5151273223) looks something like this:

16 -void CFE_PSP_SetDefaultExceptionEnvironment(void)
17 -{
18 -}
19 +void CFE_PSP_SetDefaultExceptionEnvironment(void) {}

The check recommends removing lines 16-18 by ""-"" before the line. The check recommends adding line 19 by showing ""+"" before the line.

_Originally posted by @chillfig in https://github.com/nasa/PSP/issues/360#issuecomment-1267236597_
      ",,https://github.com/nasa/PSP/issues/364
PSP Integration Candidate: Caelum-rc4+dev23,"**Describe the contribution**
PR #361
- Fix #183, Create Changelog File

PR #358
- Fix #357, Remove unnecessary parentheses around return values.

PR #360
- Fix #359, Remove 'return;' from last line of void function.


**Testing performed**

PSP checks <https://github.com/nasa/PSP/pull/TBD/checks>
cFS Bundle checks <https://github.com/nasa/cFS/pull/TBD/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
@thnkslprpt
@ArielSAdamsNASA",,https://github.com/nasa/PSP/pull/363
Wrong type of arguments to snprintf,"**Describe the bug**
Function call with incorrect argument type. This argument should be of type 'unsigned int' but is of type 'PCS_WIND_TCB *'.

**Expected behavior**
Same behavior, fix error

**Code snips**
https://github.com/nasa/PSP/blob/e3d28d85a49c849c79f83e7414be65a318a8f834/fsw/mcp750-vxworks/src/cfe_psp_exception.c#L205-L206

**System observed on:**
VxWorks 6.9/MCP750

**Additional context**
From CodeQL 
 Use ""%08lX"" as the format and explicitly cast the argument as ""(unsigned long)""

**Reporter Info**
Ariel Adams, MCSG Tech",enhancement,https://github.com/nasa/PSP/issues/362
"Fix #183, Create Changelog File","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [ ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #183 

**Testing performed**
N/A

**Expected behavior changes**
Users can see important information on readme without changelog information.

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, MCSG Tech
","CCB:Approved, docs",https://github.com/nasa/PSP/pull/361
"Fix #359, Remove 'return;' from last line of void function.","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #359
Removes a single (the only) case of redundant ""return;"" statement on the last line of a void function.
Corrected a typo in the comments that was noticed along the way.

**Testing performed**
None, prior to submission.

**Expected behavior changes**
No impact on behavior.

**Contributor Info**
@thnkslprpt ",CCB:Approved,https://github.com/nasa/PSP/pull/360
"Remove ""return;"" from last line of void functions","**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
""return;"" at last line in void function is redundant.
Copy of https://github.com/nasa/cFE/issues/1540

**Describe the solution you'd like**
Remove

**Reporter Info**
@thnkslprpt ",,https://github.com/nasa/PSP/issues/359
"Fix #357, Remove unnecessary parentheses around return values.","**Checklist (Please check before submitting)**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/osal/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Fixes #357  
Removes parentheses in return statements in PSP that return a single value/term.
This is aligns these return statements with the predominant style of cFS.

**Testing performed**
None, prior to submission of the pull request.

**Expected behavior changes**
No impact on behavior.

**Contributor Info - All information REQUIRED for consideration of pull request**
@thnkslprpt ",CCB:Approved,https://github.com/nasa/PSP/pull/358
Scrub use of () in return statements,"**Checklist**
* [x] I reviewed the [Contributing Guide](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md).
* [x] I performed a cursory search to see if the bug report is relevant, not redundant, nor in conflict with other tickets.

**Describe the bug**
Unnecessary parentheses around return values in PSP
Copy of https://github.com/nasa/osal/issues/866

**Reporter Info**
@thnkslprpt ",,https://github.com/nasa/PSP/issues/357
PSP Integration Candidate: Caelum-rc4+dev16,"**Describe the contribution**
PR #351
- Fix #353, correct PSP module IDs and lookups


**Testing performed**

PSP checks <https://github.com/nasa/PSP/pull/356/checks>
cFS Bundle checks <https://github.com/nasa/cFS/pull/541/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",,https://github.com/nasa/PSP/pull/356
pass extra ldflags to RTEMS.cmake,"**Describe the bug**
I'm working on TI TMS570LC4357 SoC with RTEMS running cFS. This SoC is a `big-endian` device.
During build process, the linker does not properly pass `big-endian` flag, I suggest passing an
extra `RTEMS_BSP_LINKER_FLAG` to allow additional flags

[Here](https://github.com/iotpi-space/PSP/commit/d2a0626d4a2d62c751f8f9dbf5cacd6b9528dd73) is my proposal commit for it, but I'm still not ready to send a PR yet.

Without extra LINKER FLAGS, the link cmd will be
```
rtems/5/bin/arm-rtems5-gcc -o ci_lab.obj -r CMakeFiles/ci_lab.dir/fsw/src/ci_lab_app.c.o
```
and reported error: 
```
arm-rtems5/bin/ld: CMakeFiles/ci_lab.dir/fsw/src/ci_lab_app.c.o: compiled for a big endian system and target is little endian
```

[Another corresponding commit](https://github.com/iotpi-space/PSP/commit/e8f305bbcf63d88285d2e4d4ae2b82ab96c63458) is the `rtems-syms` needs `""` to wrap `RTEMS_BSP_C_FLAGS` to properly use all C FLAGS

**To Reproduce**
build for a big-endian device on RTEMS

**Expected behavior**
A clear and concise description of what you expected to happen.

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - Hardware: 11th Gen Intel(R) Core(TM) i7-11800H
 - OS: Debian 11
 - Versions: cFE draco-rc2, PSP for custom tms570lc4357

**Reporter Info**
Yang Hongbo, Qingdao IotPi Information Technology Ltd.
",,https://github.com/nasa/PSP/issues/355
"Fix #353, correct PSP module IDs and lookups","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Correct the CFE_PSP_Module_FindByName and CFE_PSP_Module_GetAPIEntry lookups to use the correct length of the config data 'PspModuleList'.

The internal variable that had been used reflected the total across two lists and thus was not a correct limit.

Rather than having these functions search both lists, this instead keeps it to only exposing the user-specified modules in PspModuleList, it does not expose the built-in/base modules.  This makes the change simpler, as typically the built in modules would not be accessed through these functions at all.

Fixes #353

**Testing performed**
Boot CFE and confirm modules being initialized as expected.  Confirm that module lookup is working and returning correct module ID.

**Expected behavior changes**
- Will not segfault if attempting to find a module that does not exist
- Will return the same ID that the module was initialized with (this was different and should not have been)

**System(s) tested on**
Ubuntu 22.04

**Additional context**
This PR does _not_ currently add a coverage test for this code, although that should be considered as a follow on.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/PSP/pull/354
CFE_PSP_Module_FindByName uses incorrect list limit/stop condition,"**Describe the bug**
The internal variable `CFE_PSP_ModuleCount` is used as the limit for searching for a matching name in the PSP module list here:

https://github.com/nasa/PSP/blob/15c2ced1185461aeb67db189f8a8ffd79f4ab8c6/fsw/shared/src/cfe_psp_module.c#L127

However, a while back the set of modules was split into two, so now we have separate lists:

    CFE_PSP_BASE_MODULE_LIST
    GLOBAL_CONFIGDATA.PspModuleList

The `CFE_PSP_ModuleCount` value reflects the total number of entries (sum) of both lists.
But the `CFE_PSP_Module_FindByName` function is only searching the second list (GLOBAL_CONFIGDATA.PspModuleList).  This means that if there is no matching entry, it might read beyond the end of the list.

**To Reproduce**
Call `CFE_PSP_Module_FindByName` on a module name that does not actually exist in the system.  The loop will segfault when it gets to the NULL entry that normally terminates the `GLOBAL_CONFIGDATA.PspModuleList`.

**Expected behavior**
The search should cover `CFE_PSP_BASE_MODULE_LIST` and `GLOBAL_CONFIGDATA.PspModuleList`  like the init function does

**Code snips**
Init function uses a helper function that does each list at: https://github.com/nasa/PSP/blob/15c2ced1185461aeb67db189f8a8ffd79f4ab8c6/fsw/shared/src/cfe_psp_module.c#L80-L87

Search function should mirror this.

**System observed on:**
Ubuntu 22.04

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc. on behalf of Alan Cudmore (GSFC)
",bug,https://github.com/nasa/PSP/issues/353
PSP Integration Candidate: Caelum-rc4+dev13,"**Describe the contribution**
PR #351
- Fix #350, remove commented out code


**Testing performed**

cFE checks <https://github.com/nasa/PSP/pull/352/checks>
cFS Bundle checks <https://github.com/nasa/cFS/pull/525/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",,https://github.com/nasa/PSP/pull/352
"Fix #350, remove commented out code","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Clean up code block that was ifdef'd out

Fixes #350

**Testing performed**
Build and run tests

**Expected behavior changes**
None; code was already disabled

**System(s) tested on**
RHEL 8

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/PSP/pull/351
Remove commented out code,"**Is your feature request related to a problem? Please describe.**
While developing other software I noticed some ""jphfix"" comment tags remaining.  These should have been removed before commit but were missed (mistake).

https://github.com/nasa/PSP/blob/a8ae3bc4a29aa3fd20b6f4aa1502dbfdb03946ca/unit-test-coverage/shared/src/coveragetest-cfe-psp-exceptionstorage.c#L45-L50

**Describe the solution you'd like**
Remove commented out code

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/PSP/issues/350
PowerPC specific include in vxworks timebase,"**Is your feature request related to a problem? Please describe.**
There's a PowerPC specific include in the timbase_vxworks here:
https://github.com/nasa/PSP/blob/4bf1eefc81738de9ed03d6ea0eb018ce03b0d92b/fsw/modules/timebase_vxworks/cfe_psp_timebase_vxworks.c#L47

It would be good to make this module vxworks generic if possible.

**Describe the solution you'd like**
I'm not sure what's needed from that include, but if it is necessary it would be nice to abstract it out or ifdef it in only for PPC.

**Describe alternatives you've considered**
Nothing particular in mind, but any method to make that module generic vxworks would work.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping @superolmo",enhancement,https://github.com/nasa/PSP/issues/349
`CFE_PSP_TIMER_LOW32_ROLLOVER` defined but not used in vxworks timebase implementation ,"**Is your feature request related to a problem? Please describe.**
Defined here:
https://github.com/nasa/PSP/blob/4bf1eefc81738de9ed03d6ea0eb018ce03b0d92b/fsw/modules/timebase_vxworks/cfe_psp_timebase_vxworks.c#L55-L62

Expected use here:
https://github.com/nasa/PSP/blob/4bf1eefc81738de9ed03d6ea0eb018ce03b0d92b/fsw/modules/timebase_vxworks/cfe_psp_timebase_vxworks.c#L166-L185

**Describe the solution you'd like**
Use the define or delete it.  Note it's defined as 0 and the function returns 0 so behavior wouldn't change.

**Describe alternatives you've considered**
None.

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC

Ping @superolmo",enhancement,https://github.com/nasa/PSP/issues/348
"Fix #345, Add CFE_PSP_StatusToString and CFE_PSP_STATUS_C","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #345

**Testing performed**
Added a few calls in cFE startup to exercise the function and it worked.  PSP coverage for shared doesn't look to be fully implemented so didn't add tests yet.

**Expected behavior changes**
None, just adds an a useful API

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this change + a few calls to exercise the new PSP API

```
diff --git a/modules/es/fsw/src/cfe_es_start.c b/modules/es/fsw/src/cfe_es_start.c
index f90a248..9aef09c 100644
--- a/modules/es/fsw/src/cfe_es_start.c
+++ b/modules/es/fsw/src/cfe_es_start.c
@@ -36,6 +36,7 @@
 */

 #include ""cfe_es_module_all.h""
+#include ""cfe_psp.h""

 #include <stdio.h>
 #include <string.h>
@@ -255,6 +256,12 @@ void CFE_ES_SetupResetVariables(uint32 StartType, uint32 StartSubtype, uint32 Bo
     */
     PspStatus = CFE_PSP_GetResetArea(&ResetDataAddr, &resetAreaSize);

+    CFE_PSP_StatusString_t pspstatusstring;
+    OS_printf(""TEST_PSP_STATUS: success %s\n"", *CFE_PSP_StatusToString(PspStatus, &pspstatusstring));
+    OS_printf(""TEST_PSP_STATUS: error %s\n"", *CFE_PSP_StatusToString(CFE_PSP_ERROR, &pspstatusstring));
+    OS_printf(""TEST_PSP_STATUS: error %s\n"", *CFE_PSP_StatusToString(INT32_MAX, &pspstatusstring));
+    OS_printf(""TEST_PSP_STATUS: error %s\n"", *CFE_PSP_StatusToString(INT32_MIN, &pspstatusstring));
+
     /*
     ** Make sure the status is OK or size is big enough
     */
```

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/PSP/pull/347
psp Integration candidate: Caelum-rc4+dev10,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
PR #344
- Fix #342, Resolve uninit var static analysis warning

**Testing performed**

[PSP Checks](https://github.com/nasa/PSP/pull/346/checks) 
[cFS Bundle Checks](https://github.com/nasa/cFS/pull/492)

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/492>

Format check workflow failure expected for Integration Candidates

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
skliper
",,https://github.com/nasa/PSP/pull/346
Add PSP_Status_t and associated macros/wrappers/APIs,"**Is your feature request related to a problem? Please describe.**
Same justification as nasa/cFE#2110, supports clean handling/reporting of PSP status.

**Describe the solution you'd like**
Add the type and wrappers, note actual use/enforcement can be later but elements need to exist in Draco to maintain future compliance.

**Describe alternatives you've considered**
None.

**Additional context**
- nasa/cFE#2110
- nasa/osal#1112
- nasa/cFE#2010

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/PSP/issues/345
"Fix #342, Resolve uninit var static analysis warning","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/CF/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate Contributor License agreement to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #342

**Testing performed**
CI + static analysis run

**Expected behavior changes**
None, just squashes static analysis warnings

**System(s) tested on**
 - Hardware: VM
 - OS: Ubuntu 18.04
 - Versions: Bundle main + apps + related static analysis resolution branches

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/PSP/pull/344
PSP Integration candidate: Caelum-rc4+dev9,"**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**

PR #337 
- Fix #325, Update codeql workflow for reusable updates

PR #341  
- Fix #340, Add cpu affinity example

PR #339
- Fix #338, Update RTEMS CMake Platform File


**Testing performed**
Rtems 4.11, 5
Ubuntu 18.04

**Expected behavior changes**
See PRs

**System(s) tested on**
RTEMS 4.11, 5
Ubuntu 18.04

**Additional context**
Part of https://github.com/nasa/cfs/issues/471

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
skliper
acudmore",,https://github.com/nasa/PSP/pull/343
Uninitialized variable static analysis warning,"**Is your feature request related to a problem? Please describe.**
Uninitialized variable static analysis warning observed (license restricts publishing)

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/PSP/issues/342
"Fix #340, Add cpu affinity example","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #340

**Testing performed**
Built and ran core, `taskset -a -p PID` replacing PID with the core-linux PID reported from top.  Confirmed CFE_* tasks were all assigned to core 0 (mask == 1), the rest floated (mask == ff).

**Expected behavior changes**
Tasks w/ the name starting with CFE_ and their children are now assigned to core 0

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Note we wouldn't actually have to merge this... it's just an example.  It works though, and merging it will ensure it doesn't rot.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/PSP/pull/341
Provide example for setting processor affinity (SMP example),"**Is your feature request related to a problem? Please describe.**
SMP is a hot topic these days, we keep saying it's easy but no example provided showing how one could set a thread's CPU affinity.

**Describe the solution you'd like**
Provide an example for the ""simplest"" identified method for assigning threads to cores.

**Describe alternatives you've considered**
There's numerous approaches, this just shows one that assigns threads when created.  One could manage threads from a platform specific app, do power management, fault management, etc.

**Additional context**
See https://github.com/nasa/osal/issues/210, https://github.com/nasa/cFS/discussions/427.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/PSP/issues/340
"Fix #338, Update RTEMS CMake Platform File","Please Note: This PR depends on cFE PR 2017: https://github.com/nasa/cFE/pull/2097

- Fixes #338

**Checklist (Please check before submitting)**

* [ ] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [ ] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
Updates the RTEMS.cmake platform file to account for:

- Differences in RTEMS 4.11, 5.1, 6.x, and the Gaisler provided RCC toolchain
- Building the cFE core as a standalone executable or a dynamically loaded module

**Testing performed**
I built pc-rtems for RTEMS 4.11 and 5 and ran them both on the CI containers.
This was with: https://github.com/nasa/cFE/pull/2097 applied

**Expected behavior changes**
No impact on behavior to existing pc-rtems builds.

**System(s) tested on**
Tested on RTEMS 4.11 and RTEMS 5 CI systems. (pc-rtems)

**Additional context**
This enables upcoming RTEMS changes documented here:
https://github.com/nasa/cFS/discussions/468

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Cudmore, NASA/GSFC Code 582","CCB:Approved, dependency",https://github.com/nasa/PSP/pull/339
"Support RTEMS 6, Gaisler RCC, and Dynamically loaded cFE build in RTEMS.cmake platform file","**Is your feature request related to a problem? Please describe.**
A few minor modifications to the RTEMS.cmake platform file are needed to support RTEMS 6, Gaisler RCC (RTEMS 5), and Dynamically loaded cFE core builds.

**Describe the solution you'd like**
Modify cmake/Modules/Platform/RTEMS.cmake to add:
RTEMS_DYNAMIC_LOAD variable to select how the CMAKE executable rule is defined
Add a RTEMS_BSP_SPECS_FLAGS variable in the RTEMS_SYS_SPECS_FLAGS define to allow of toolchain file customizations.
This will allow existing RTEMS 4.11 and RTEMS 5 pc-rtems platforms to still build, while enabling RTEMS 6, RCC, and other RTEMS platforms.

**Describe alternatives you've considered**
The alternative here would be to use separate Cmake platform files, which creates more Cmake files to maintain and makes it more confusing to setup a new RTEMS target.

**Additional context**
Depends on the following cFE issue for minor toolchain file updates:
https://github.com/nasa/cFE/issues/2096

**Requester Info**
Alan Cudmore, NASA/GSFC Code 582.0",dependency,https://github.com/nasa/PSP/issues/338
"Fix #325, Update codeql workflow for reusable updates","**Checklist (Please check before submitting)**

* [x] I reviewed the [Contributing Guide](https://github.com/nasa/PSP/blob/main/CONTRIBUTING.md).
* [x] I signed and emailed the appropriate [Contributor License Agreement](https://github.com/nasa/cFS/blob/main/CONTRIBUTING.md#contributor-license-agreement-cla) to GSFC-SoftwareRelease@mail.nasa.gov and copied cfs-program@lists.nasa.gov.

**Describe the contribution**
- Fix #325 

**Testing performed**
CI

**Expected behavior changes**
None, just fixes codeql workflow

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/PSP/pull/337
Missing Doxygen for function CFE_PSP_SetupReservedMemoryMap,"Missing the Doxygen for function CFE_PSP_SetupReservedMemoryMap
https://github.com/nasa/PSP/blob/e3d28d85a49c849c79f83e7414be65a318a8f834/fsw/pc-linux/src/cfe_psp_memory.c#L649",docs,https://github.com/nasa/PSP/issues/336
Add EEPROM read and block read/write APIs,"**Is your feature request related to a problem? Please describe.**
No PSP API's for EEPROM write block, or any EEPROM reads.

**Describe the solution you'd like**
Add CFE_PSP_EepromWriteBlock, Read[8|16|32|Block]

**Describe alternatives you've considered**
None

**Additional context**
#274 
This would better support MM EEPROM actions with specific APIs for reading writing vs the former use of the generic CFE_PSP_MemCpy, CFE_PSP_MemSet.  Could consider deprecating all the ram API's since they aren't really useful, the calls are surrounded w/ validity checks already so not really clear why they are necessary.

**Requester Info**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/PSP/issues/335
"Fix #333, Relative strict-dir-list for static analysis workflow","**Describe the contribution**
- Fix #333

**Testing performed**
Needs nasa/cFS#454 in main to actually test with CI

**Expected behavior changes**
Will work once nasa/cFS#454 is in

**System(s) tested on**
CI

**Additional context**
Depends on nasa/cFS#454, similar update as what's implemented in nasa/CF#228

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:Approved, CCB:FastTrack, dependency",https://github.com/nasa/PSP/pull/334
Update static analysis workflow strict directory list for nasa/cFS#453,"**Is your feature request related to a problem? Please describe.**
See #453, really PSP was the only repo that worked right in the presence of the leading `.` applied within the shared workflow since it's a single directory.

**Describe the solution you'd like**
Provide directory relative to local repo such that a list will also work

**Describe alternatives you've considered**
None

**Additional context**
nasa/cFS#453

**Requester Info**
Jacob Hageman - NASA/GSFC
",continuous-integration,https://github.com/nasa/PSP/issues/333
Apply latest contributor license agreement links,"**Is your feature request related to a problem? Please describe.**
Changes links from the old contributor license agreement location to its new location.

**Describe the solution you'd like**
Working links

**Additional context**
Depends on https://github.com/nasa/cFS/pull/448

**Requester Info**
Justin Figueroa, ASRC Federal
",,https://github.com/nasa/PSP/issues/332
"Fix #332, Apply latest contributor license agreement links","**Describe the contribution**
- Fixes #332 

Adds checklist for CLA and contributing guide.

**Expected behavior changes**
Working links

**Additional context**
Depends on https://github.com/nasa/cFS/pull/448

**Contributor Info - All information REQUIRED for consideration of pull request**
Justin Figueroa, ASRC Federal
","CCB:Approved, CCB:FastTrack, dependency",https://github.com/nasa/PSP/pull/331
psp Integration candidate: Caelum-rc4+dev7,"**Describe the contribution**
PR #328  
- Fix #327, Update copyright header

PR #329  
- HOTFIX #318, Standardize version information


**Testing performed**
psp Checks <https://github.com/nasa/PSP/pull/330/checks>
cFS Bundle checks <https://github.com/nasa/cFS/445/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu
RTEMS

**Additional context**
Part of nasa/cFS#445

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
",,https://github.com/nasa/PSP/pull/330
"HOTFIX #318, Standardize versioning information","**Describe the contribution**

Per conversation in CCB:2022-03-24 and in https://github.com/nasa/cFE/commit/e5be0612ad6bf9db09ddf640306a65292abce2d5#commitcomment-69358417

Ensuring REVISION number is set to 99 and MISSION_REV = 0xFF

**Testing performed**
Text and documentation only

**Expected behavior changes**
No behavior change

**System(s) tested on**
n/a

**Additional context**
https://github.com/nasa/cFE/commit/e5be0612ad6bf9db09ddf640306a65292abce2d5#commitcomment-69358417

**Third party code**
none

**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA
",,https://github.com/nasa/PSP/pull/329
"Fix #327, Update copyright header","**Describe the contribution**
- Fix #327

**Testing performed**
Documentation only, but built/ran unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/PSP/pull/328
Apply latest copyright header,"**Is your feature request related to a problem? Please describe.**
Updated copyright header

**Describe the solution you'd like**
Update

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/PSP/issues/327
psp Integration candidate: Caelum-rc4+dev4,"**Describe the contribution**

PR #324 
- Fix #323, Remove explicit filename doxygen comments

PR #322 
- Fix #321, Apply header guard standard

**Testing performed**
psp Checks <https://github.com/nasa/PSP/pull/326/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/432>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04
RTEMS 4.11 and 5

**Additional context**
Part of https://github.com/nasa/cFS/pull/432

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper
",,https://github.com/nasa/PSP/pull/326
 CodeQL Workflow Broken due to Name Change,"**Describe the bug**

Merging https://github.com/nasa/cFE/pull/2035 broke the components' CodeQL workflow as expected. 

Need to update the osal codeQL workflows to match the patterns implemented in https://github.com/nasa/cFE/pull/2035

**To Reproduce**

See failed workflows 
- https://github.com/nasa/PSP/actions/workflows/codeql-build.yml

**Expected behavior**

Workflow executes

**Code snips**
None

**System observed on:**
GitHub Actions

**Additional context**
None

**Reporter Info**
Gerardo E. Cruz-Ortiz NASA",continuous-integration,https://github.com/nasa/PSP/issues/325
"Fix #323, Remove explicit filename doxygen comments","**Describe the contribution**
- Fix #323

**Testing performed**
Make doc, observe no filename warnings

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: i5/wsl
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/PSP/pull/324
Remove explicit file name references in doxygen file comments to avoid warnings,"**Is your feature request related to a problem? Please describe.**
File comment without a filename implies the comments apply to the current file.  Adding the file name makes doxygen try to match that file.  The issue is there's multiple files with the same name, so doxygen gets confused unless you add full path.  Really it's just overhead since the point is to comment the current file.

Sample warning if you `make doc` from the bundle:
```
/home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c:22: warning: the name `os-impl-binsem.c' supplied as the second argument in the \file statement matches the following input files:
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/posix/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/rtems/src/os-impl-binsem.c
   /home/jhageman/cFS/cFS-GitHub/osal/src/os/vxworks/src/os-impl-binsem.c
Please use a more specific name by including a (larger) part of the path!
```

**Describe the solution you'd like**
Easiest to just remove the name since for every case the comment applies to the current file

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",docs,https://github.com/nasa/PSP/issues/323
"Fix #321, Apply header guard standard","**Describe the contribution**
- Fix #321

**Testing performed**
CI

**Expected behavior changes**
None

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/PSP/pull/322
Apply header guard standard formatting,"**Is your feature request related to a problem? Please describe.**
Nonstandard guard used

**Describe the solution you'd like**
Apply standard

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/PSP/issues/321
CFE_PSP_GetCFETextSegmentInfo returns success even though it failed to get module info,"**Describe the bug**
When moduleInfoGet() function returns ERROR, CFE_PSP_GetCFETextSegmentInfo() returns CFE_PSP_SUCCESS
https://github.com/nasa/PSP/blob/9a1af6cadddc74fa743309feadf8cd71dd692db0/fsw/mcp750-vxworks/src/cfe_psp_memory.c#L548

**Expected behavior**
I would think that if the CFE Text Segment cannot be retrieved, the function should return CFE_PSP_ERROR

**System observed on:**
 - Aitech SP0
 - Vxworks 6.9
 - Versions Latest

**Reporter Info**
Claudio Olmi - METECS
",,https://github.com/nasa/PSP/issues/320
Module list count includes both `CFE_PSP_BASE_MODULE_LIST` and the configurable `PspModuleList` but some APIs use just the latter.,"**Describe the bug**
Both lists are initilized:
https://github.com/nasa/PSP/blob/c3a3f6ecaa33e62ded0d9b95dc91dd25b9e36a46/fsw/shared/src/cfe_psp_module.c#L82-L89

which increments the `CFE_PSP_ModuleCount`:
https://github.com/nasa/PSP/blob/c3a3f6ecaa33e62ded0d9b95dc91dd25b9e36a46/fsw/shared/src/cfe_psp_module.c#L72

but then the API's use `CFE_PSP_ModuleCount` to limit references to just the configurable list (and other related issues):
https://github.com/nasa/PSP/blob/c3a3f6ecaa33e62ded0d9b95dc91dd25b9e36a46/fsw/shared/src/cfe_psp_module.c#L120-L142

**To Reproduce**
For example if there's 1 entry in `CFE_PSP_BASE_MODULE_LIST` and 1 in the additional `PspModuleList`, then `CFE_PSP_ModuleCount` will == 2.  Then if you call CFE_PSP_MODULE_FindByName with any module not in the `PspModuleList` it'll actually go off the end of the `PspModuleList` since it's limited to 2... and it won't find anything in the `CFE_PSP_BASE_MODULE_LIST`.

**Expected behavior**
A complete module list should be used for APIs that includes both the built in and added.

**Code snips**
See above.

**System observed on:**
N/A - code inspection

**Additional context**
Stakeholder identified issue

**Reporter Info**
Jacob Hageman - NASA/GSFC
",bug,https://github.com/nasa/PSP/issues/319
psp Integration candidate: Caelum+dev1,"**Describe the contribution**

PR #301 from pavll/fix-299-sleep-before-exit

- Fix #299, Sleep before exit when printing

PR #314 from jphickey/fix-313-stub-databuf

- Fix #313, check the address in PSP get segment stubs

**Testing performed**
PSP Checks <https://github.com/nasa/PSP/pull/318/checks> 
Bundle Checks <https://github.com/nasa/cFS/pull/390/checks>

**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu 18.04
RTEMS 4.11
RTEMS 5

**Additional context**
Part of <https://github.com/nasa/cFS/pull/390>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@pavll
@jphickey ",community,https://github.com/nasa/PSP/pull/318
"Fix #316, Reuse CodeQL, Static Analysis, and Format Check","**Describe the contribution**
Fixes #316

**Testing performed**
PSP CodeQL Reuse: https://github.com/ArielSAdamsNASA/PSP/actions/runs/1391815588
PSP Format Check Reuse: https://github.com/ArielSAdamsNASA/PSP/actions/runs/1391827461
PSP Static Analysis: https://github.com/ArielSAdamsNASA/PSP/runs/4027249814?check_suite_focus=true

**Expected behavior changes**
PSP will reuse CodeQL, Static Analysis, and Format Checker that are held in cFS. These workflows will not work until nasa/cFS#386 is merged.
 
**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal",continuous-integration,https://github.com/nasa/PSP/pull/317
"Reuse CodeQL, Format Checker, and Static Analysis Workflows","**Is your feature request related to a problem? Please describe.**
When needing to change workflows, one must create an issue and PR for each submodule. This feature would reduce duplication.

**Describe the solution you'd like**
To reuse workflows, the workflow simply uses `uses` and the full path of the workflow. The cFS workflows, or targeted workflows, must include workflow_call and can include inputs seen below. 
```
on:
  push:
  pull_request:
  workflow_call:
    inputs:
      runs-on: 
        description: Platform to execute on
        type: string
        default: ubuntu-latest
```

**Describe alternatives you've considered**
Keep it as is. 

**Additional context**
Tested in forked cFS: https://github.com/ArielSAdamsNASA/cFS-JSF-Rules/actions/runs/1381659167
Tested in forked OSAL: https://github.com/ArielSAdamsNASA/osal/actions/runs/1381486439

**Requester Info**
Ariel Adams, ASRC Federal",continuous-integration,https://github.com/nasa/PSP/issues/316
"Static analysis workflow missing duplicate check and restricting to main push, remove --quiet flag","**Is your feature request related to a problem? Please describe.**
Missing duplicate check, overly restrictive to main push:
https://github.com/nasa/PSP/blob/1bd7bd9508dbe7e0084fc8ad600479c5831d7660/.github/workflows/static-analysis.yml#L4-L13

remove `--quiet` flag so files processed will be listed:
https://github.com/nasa/PSP/blob/1bd7bd9508dbe7e0084fc8ad600479c5831d7660/.github/workflows/static-analysis.yml#L36

**Describe the solution you'd like**
Fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
","duplicate, continuous-integration",https://github.com/nasa/PSP/issues/315
"Fix #313, check the address in PSP get segment stubs","**Describe the contribution**
Checks the correct local variable (TempAddr) to see if the data buffer address was set by the test case

Fixes #313

**Testing performed**
Build and sanity check CFE, run all tests

**Expected behavior changes**
None to FSW
Stub should work correctly in UT

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, unit-test",https://github.com/nasa/PSP/pull/314
Get text segment stubs seem to be bugged,"**Describe the bug**
Looks like the stubs are checking input values vs successful UT_GetDataBuffer, which doesn't make sense to me since it's used to decide if the buffer values should be used or not:
https://github.com/nasa/PSP/blob/1bd7bd9508dbe7e0084fc8ad600479c5831d7660/ut-stubs/ut_psp_stubs.c#L559-L570
https://github.com/nasa/PSP/blob/1bd7bd9508dbe7e0084fc8ad600479c5831d7660/ut-stubs/ut_psp_stubs.c#L604-L615

**To Reproduce**
You'll get an uninitialized error on the input pointer if not already set, if it's nonzero and you don't set the buffer that will utilize the Temp values which doesn't make sense to me.

**Expected behavior**
Use buffer values if passed in, otherwise use local dummy segment.

**System observed on:**
N/A

**Reporter Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/PSP/issues/313
Argument Cannot Be Negative ,"**Describe the bug**
tempFd is passed to a parameter that cannot be negative.

Function open("".reservedkeyfile"", 64, 448) returns a negative number.

**Expected behavior**
Add an if statement to ensure that tempFd is not a negative number. 

**Code snips**
https://github.com/nasa/PSP/blob/1bd7bd9508dbe7e0084fc8ad600479c5831d7660/fsw/pc-linux/src/cfe_psp_memory.c#L664

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",bug,https://github.com/nasa/PSP/issues/312
Resource Leak,"**Describe the bug**
Handle variable FileDescriptor going out of scope leaks the handle.

**Expected behavior**
Free FileDescriptor or point to mmap

**Code snips**
https://github.com/nasa/PSP/blob/1bd7bd9508dbe7e0084fc8ad600479c5831d7660/fsw/modules/eeprom_mmap_file/cfe_psp_eeprom_mmap_file.c#L102

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",bug,https://github.com/nasa/PSP/issues/311
TOCTOU Bug for open,"**Describe the bug**
Calling function open that uses ""EEPROM.DAT"" after a check function. This can cause a time-of-check, time-of-use race condition.

**Expected behavior**
The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. Could also use the O_CREAT and O_EXCL flags of POSIX's open() function.
https://cwe.mitre.org/data/definitions/367.html
https://wiki.sei.cmu.edu/confluence/display/c/FIO45-C.+Avoid+TOCTOU+race+conditions+while+accessing+files

**Code snips**
https://github.com/nasa/PSP/blob/1bd7bd9508dbe7e0084fc8ad600479c5831d7660/fsw/modules/eeprom_mmap_file/cfe_psp_eeprom_mmap_file.c#L102-L108

**System observed on:**
Coverity: https://scan.coverity.com/projects/arielsadamsnasa-cfs-jsf-rules?tab=overview

**Reporter Info**
Ariel Adams, ASRC Federal
",bug,https://github.com/nasa/PSP/issues/310
Replace _init and _fini references in pc-linux PSP,"**Describe the bug**
When compiling the cFS main pc-linux target for Ubuntu 21.04 on RISC-V, the build fails with undefined references to the ""_init"" and ""_fini"" symbols. These symbols are used by the PSP to get the cFE core text segment addresses. The build works on Ubuntu 21.04 Aarch64.
These symbols are deprecated on all targets and only still exist on the x86 and ARM targets to support legacy software. The RISC-V target does not include them.
We can replace them with other symbols such as: __executable_start for _init, and __etext for _fini.

**To Reproduce**
Just build the main branch of cFS on Ubuntu 21.04 on RISC-V. I am using the SiFive HiFive Unleashed board, but QEMU can also be used.

**System observed on:**
 - SiFive HiFive Unleashed board
 - OS: Ubuntu 21.04 server
 - Versions: main branch (as of 9/14/2021)

**Reporter Info**
Alan Cudmore/NASA GSFC",,https://github.com/nasa/PSP/issues/309
"Typos in documentation, print statements, and comments","**Is your feature request related to a problem? Please describe.**
 Found multiple typos throughout the codebase

**Describe the solution you'd like**
Correct grammar and spelling errors

**Describe alternatives you've considered**
None

**Additional context**
Retroactively created for #300
",,https://github.com/nasa/PSP/issues/308
psp Integration candidate: 2021-09-07,"**Describe the contribution**
PR #304 

- Fix #303, check that module type is not invalid 

PR #306 

- Fix #305, do not override add_psp_module for coverage test 

**Testing performed**
psp Checks <https://github.com/nasa/PSP/pull/307/checks>
cFS Bundle Checks <https://github.com/nasa/cFS/pull/351/checks>


**Expected behavior changes**
See PRs

**System(s) tested on**
Ubuntu

**Additional context**
Part of <https://github.com/nasa/cFS/pull/351>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey ",,https://github.com/nasa/PSP/pull/307
"Fix #305, do not override add_psp_module for coverage test","**Describe the contribution**
Implements a differently-named function instead, which does mostly the same thing as the override had done, but does not directly re-add the original subdirectory.  This does repeat some info (e.g. the list of FSW source files) that was not repeated otherwise, but it works in general.

Fixes #305

**Testing performed**
Build and sanity check CFE in a configuration that uses several PSP modules for Hardware access

**Expected behavior changes**
CMake builds the FSW modules correctly

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, build-system, coverage",https://github.com/nasa/PSP/pull/306
"Override of ""add_psp_module"" for coverage test gets global scope","**Describe the bug**
In order to (attempt to) implement coverage test for PSP modules without redefining the sources for that module, the Cmake script currently redefines the `add_psp_module` function to do something different when building for coverage tests.

Problem is, this override ends up getting global scope, not directory scope.  So in the event that multiple modules are specified and if the psp library gets built first (which will include coverage test if enabled), then any modules built after the psp will fail, because they use the coverage test override function rather than the proper function as defined in `arch_build.cmake`

**To Reproduce**
Create a project utilizing several PSP modules/extensions for custom HW access.  Modules will fail to build when ENABLE_UNIT_TESTS is set true, even if they do not contain a coverage test, because the FSW build is using the wrong definition of the `add_psp_module` function.

**Expected behavior**
Should build successfully.

**Code snips**
Root of the problem is this override at: https://github.com/nasa/PSP/blob/6d40816cfcc2836182f04bacf7d98b7d5cf5163b/unit-test-coverage/modules/CMakeLists.txt#L14

**System observed on:**
Ubuntu

**Additional context**
This function definition ends up getting global scope, not directory scope, so even after returning to the parent directory, this modified definition remains active.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",build-system,https://github.com/nasa/PSP/issues/305
"Fix #303, check that module type is not invalid","**Describe the contribution**
Rather than only calling ""Init"" on a ""SIMPLE"" module type, just check that it is not invalid instead.  Even extension types
still have an Init routine that needs to be called.

Fixes #303

**Testing performed**
Build and sanity check CFE, including using some HW access extension modules

**Expected behavior changes**
Module gets initialized as it should

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

",CCB:Approved,https://github.com/nasa/PSP/pull/304
"Too strict of check before calling ""Init"" function of module","**Describe the bug**
For PSP modules the initialization is only called if the module type is ""SIMPLE"" - but this is not necessary to enforce, because the intent is to allow this to be extended to other module types as the mission requires.

Since the ""Init"" function pointer is a fixed/defined entry (so all modules have it, regardless of type) and it is already permitted to be NULL if it is not needed, then there is no real reason to restrict calling it to the ""SIMPLE"" module type.

**To Reproduce**
Define an extension module type and try to use it with Caelum.  It will not be initialized as expected, the init call is skipped.

**Expected behavior**
If a module provides an init function, it should be called, regardless of whether the module type is ""SIMPLE"" or something else.

**Code snips**
Check is here: https://github.com/nasa/PSP/blob/6d40816cfcc2836182f04bacf7d98b7d5cf5163b/fsw/shared/src/cfe_psp_module.c#L67

Through some form of evolution it was checking specifically for `CFE_PSP_MODULE_TYPE_SIMPLE` only, but it would be better to check that `ModuleType != CFE_PSP_MODULE_TYPE_INVALID` instead.

**System observed on:**
Ubuntu

**Additional context**
Only breaks when trying to add modules of other types (extensions).  Could theoretically be fixed in other ways, but still, the intent of this code is only to confirm that the module structure is initialized to something before invoking a function pointer.  So it is more correct to check that it is not invalid, rather than checking specifically for one value.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/PSP/issues/303
Report actual errno / error string from C library calls,"**Is your feature request related to a problem? Please describe.**
During startup, the PSP makes several calls into C library functions, and an unexpected failure of these functions causes the system to abort/not start.  However, the error messages reported do not include any detail of what went wrong.

Example: https://github.com/nasa/PSP/blob/6d40816cfcc2836182f04bacf7d98b7d5cf5163b/fsw/pc-linux/src/cfe_psp_memory.c#L143-L147

**Describe the solution you'd like**
On any system call that sets the global `errno` value, if that function fails, this should be included in the error that is printed to the console.  At a bare minimum, could include the numeric value, but far preferable to use the system library call to print in a more human-friendly form, such as `strerror()` or `perror()` if the system provides it.

**Additional context**
Should probably also not use `OS_printf()` here due to its extra buffering, see #203, #299 

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/PSP/issues/302
"Fix #299, Sleep before exit when printing","**Describe the contribution**
- Fixes #299 

**Expected behavior changes**
- Print before exit [#299]

**Additional context**
- Considering if 100 milliseconds would be better than 1000 to save time and have a print.
- Considering fflush(stdout) instead of OS_TaskDelay

**Contributor Info - All information REQUIRED for consideration of pull request**
Paul Oberosler, Individual
","CCB:Approved, community",https://github.com/nasa/PSP/pull/301
"Fix #308, Correct various typos in docs and comments","**Describe the contribution**
Fixed various typos in README docs, comments and explanatory text.

- Fix #308
  
**Testing performed**
None. All modifications are to non-executable code.

**Expected behavior changes**
None (minor text changes). Code execution is unaffected.

**System(s) tested on**
n/a

**Additional context**
n/a

**Code contributions**
n/a",community,https://github.com/nasa/PSP/pull/300
Add sleep(1) before exit call when printing,"**Is your feature request related to a problem? Please describe.**
User reported OS_print doesn't display before exit, for example:
https://github.com/nasa/PSP/blob/6d40816cfcc2836182f04bacf7d98b7d5cf5163b/fsw/pc-linux/src/cfe_psp_memory.c#L145-L146

**Describe the solution you'd like**
Add sleep(1) between prints and exits to give it a chance

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/PSP/issues/299
Support test override of `GLOBAL_CONFIGDATA` defined in PSP stubs to support coverage,"**Is your feature request related to a problem? Please describe.**
Could improve coverage if the `GLOBAL_CONFIGDATA` could be defined by the test (need a NULL case, valid case, and various error cases which can't be done all with one definition).

https://github.com/nasa/cFE/issues/468#issuecomment-871372104

**Describe the solution you'd like**
Provide a way to override/exclude the PSP stub definition.

**Describe alternatives you've considered**
None

**Additional context**
nasa/cfe#468

**Requester Info**
Jacob Hageman - NASA/GSFC
",unit-test,https://github.com/nasa/PSP/issues/298
"Enable ""format check"" workflow for push to all branches","**Is your feature request related to a problem? Please describe.**
The format check workflow only runs for pull requests or for pushes to ""main"" so it will not run on work done in forks. 

**Describe the solution you'd like**
Remove branch restriction for ""push"" trigger and add ""check for duplicates"" job

**Describe alternatives you've considered**
None
",duplicate,https://github.com/nasa/PSP/issues/297
psp Integration candidate: 2021-06-15,"## Testing 

psp Checks <https://github.com/nasa/PSP/pull/296/checks> 
cFS Bundle Checks <https://github.com/nasa/cFS/pull/265/checks>

## Context

Part of <https://github.com/nasa/cFS/pull/265>

## Authors

@jphickey 
@ArielSAdamsNASA 

## Description

### PR #292

Fix #291, Implement Coding Standards in CodeQL

### PR #294

Fix #293, rename doc to docs



",,https://github.com/nasa/PSP/pull/296
Improve PSP config override concept,"**Is your feature request related to a problem? Please describe.**
Historically PSP's have been treated as clone-and-own, but to be a bit friendlier for reuse it would help to support a more general configuration override concept that wouldn't break unit testing.

Example issue - if a user overrides cfe_psp_config.h for a specific target, it ends up getting used by unit test for the other PSPs that rely on unique/conflicting cfe_psp_config.h elements.  This can be avoided by conditionally NOT pulling in a cfe_psp_config.h override for native or when ENABLE_UNIT_TESTS=1 unless trying to unit test the system it applies to but this really isn't pretty if it's a multi-build and you really do want to coverage test using overridden configs.  Basically a user had an override to the linux PSP config, but unit tests build for vxworks coverage and they tried to use the linux PSP coverage override.

**Describe the solution you'd like**
Allow for easily disabling PSP unit tests for the non-target PSPs.  Likely a good thing for OSAL also.  Really users only need to test what they are using, just the open source bundle needs to test them all.

Also would help to transition to the OSAL pattern for setting cmake variables, and use those to set the defines with default backups.  The built configs could then easily override just what they want, and the common-across-psp settings would be portable.  Maybe the config headers should have unique names associated with the implementation vs all being called cfe_psp_config.h since really they aren't portable.  Or separate the unique and portable settings.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC, from conversation with @excaliburtb
",enhancement,https://github.com/nasa/PSP/issues/295
"Fix #293, rename doc to docs","**Describe the contribution**
This is a simple rename of the `doc` subdirectory, for consistency with other modules.

Fixes #293 

**Testing performed**
Build cFE documentation

**Expected behavior changes**
None, but may affect scripts/tools that look for/link to a specific ""doc"" directory name (none found for PSP based on my initial checks, but there could potentially be some links hidden elsewhere).

**System(s) tested on**
Ubuntu

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","CCB:Approved, docs, build-system",https://github.com/nasa/PSP/pull/294
"Rename ""doc"" to ""docs"" for consistency","**Is your feature request related to a problem? Please describe.**
Most other cFS modules put the documentation in a `docs` subdirectory, except OSAL and PSP, which put it in `doc`

**Describe the solution you'd like**
Be consistent, use `docs` since this is what cFE and the majority of cFS apps use.

**Additional context**
Inconsistent naming means over complicated scripts and tools, that have to look in multiple different possible names/locations

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/PSP/issues/293
"Fix #291, Implement Coding Standards in CodeQL","**Describe the contribution**
Fix #291
Added the duplicate jobs action to avoid duplicate jobs from running. Added a separate job for coding standard queries. Created two configuration files, one for default queries and security queries and another for jpl rules. 

**Testing performed**
Testing done on cFE forked repository, ArielSAdamsNASA/cFE which used the same files, but with different configuration paths.

Jobs were failing when the entire path of the configuration file were not used. Have to use nasa/cFE/.github/codeql/config-name@branch-name. The branch must be included in the path. 

The CodeQL analysis workflow will fail for this PR since it is calling for a configuration file in main the main branch. It will not work until the configuration files are merged into main. 

In the screenshot is the same workflow as in this pull request, but the configuration path is changed to the forked repo and tested branch. 

![image](https://user-images.githubusercontent.com/69638935/119024913-36fa2580-b969-11eb-9aac-ede0002804a0.png)

**Expected behavior changes**
There should be one job for security queries and one job for JPL and MISRA queries. 

**Third party code**
Skip duplicate workflows license: https://github.com/fkirc/skip-duplicate-actions/blob/master/LICENSE

CodeQL license: https://github.com/github/codeql-action/blob/main/LICENSE

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal","CCB:Approved, continuous-integration",https://github.com/nasa/PSP/pull/292
Implement Coding Standard Rules in CodeQL ,"
**Is your feature request related to a problem? Please describe.**
CodeQL does not use JPL rules, which is used in the upcoming coding standard. 

**Describe the solution you'd like**
Implement JPL rules for CodeQL. Continue using the security queries, but keep them separate from the JPL results. Can use two different workflows, one for the coding standard and one for the security queries. 

**Describe alternatives you've considered**
Might be able to use one workflow, as long as the results can be easily identified as a coding standard issue or security issue. 

**Additional context**
JPL queries are found here: https://github.com/github/codeql/tree/main/cpp/ql/src/JPL_C

**Requester Info**
Ariel Adams, ASRC Federal ",continuous-integration,https://github.com/nasa/PSP/issues/291
format codes,"**Describe the contribution**
A clear and concise description of what the contribution is.
- Include explicitly what issue it addresses [e.g. Fixes #X]

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
- Else if Company
  - **HAND SIGNED** Company CLA must be on file (once per release): [Company CLA](https://github.com/nasa/cFE/blob/master/docs/GSC_18128_Corp_CLA_form_1219.pdf)
- Else if Individual
  - **HAND SIGNED** Individual CLA must be on file (once per release): [Individual CLA](https://github.com/nasa/cFE/blob/master/docs/GSC_18128_Ind_CLA_form_1219.pdf)
",invalid,https://github.com/nasa/PSP/pull/290
psp Integration candidate: 2021-04-06,"## Describe the contribution

### PR #286

Fix #171, use OSAL timebase for CFE timers

Cleans up stale code from the previous methods of generating 1Hz. Adds a new PSP module that instantiates an OSAL abstract timebase for use with cFE services. This single module is used across all psp implementations (mcp750, pc-linux, pc-rtems). Results in 1Hz timing tick on MCP750 will be more accurate. No changes to Linux or RTEMS

### PR #282 
Fix #10, modularize the ram, port, and eeprom access 

Fixes segfaults when `CFE_PSP_Port` routines are invoked on Linux. 

Converts `cfe_psp_ram.c` and `cfe_psp_port.c` into modular components and removes from the ""shared"" directory. The existing implementations become the corresponding ""direct"" module, and are enabled based on the psp module selection. Adds a ""notimpl"" variant where all the functions return `CFE_PSP_ERR_NOT_IMPLEMENTED`. This is used on Linux
or any other system where direct access is not possible.  Renames the existing `eeprom_stub` module to be `eeprom_notimpl` for consistency and to avoid
confusion with the unit test stubs.

### PR #285 

Fix #266, psp module to implement timebase 

No impact to behavior. Implements two PSP modules to provide `CFE_PSP_GetTime` and `CFE_PSP_GetTimeBase`, one for POSIX-compliant RTOS using `clock_gettime()` and the other specifically for PowerPC processors on VxWorks that have the `vxTimeBaseGet()` routine. Clarifies and documents the difference and use cases for `CFE_PSP_GetTime` and `CFE_PSP_GetTimeBase`.

Adds a coverage test for the VxWorks PSP timebase module and provides an example of how this can be implemented for other modules.

## Additional context
Part of <https://github.com/nasa/cFS/pull/238>

## Tests
psp Checks <https://github.com/nasa/PSP/pull/289/checks>
cFS Bundle <https://github.com/nasa/cFS/pull/238/checks>

## Third party code
None

## Authors 
",,https://github.com/nasa/PSP/pull/289
PSP Integration candidate: 2021-04-02,"## Change Description and Behavior Impacts

### PR #287

Fix #280, remove psp configdata global object

Removes unnecessary global config structure `Target_PspConfigData` and associated elements infavor of the new version API.

### PR #283

Fix #281, cleanup memory range table

The mem pool stats TLM command now works on 64-bit Linux and sends out the expected telemetry packet.
Converts `CFE_PSP_MemoryTable` to internal object (instead of external) that should only be accessed via the PSP API. Replace `uint32`s with `size_t`. Use full range (SIZE_MAX) in the Linux/RTEMS implementation.

## Testing
psp <https://github.com/nasa/PSP/pull/288/checks>
bundle <https://github.com/nasa/cFS/pull/233/checks>

## Context
Part of <https://github.com/nasa/cFS/pull/233>

## Authors
@jphickey 
",,https://github.com/nasa/PSP/pull/288
"Fix #280, remove psp configdata global object","**Describe the contribution**
Cleans up unneeded global to simplify things.

This global config structure is not really necessary.  The original intent was to allow dependents (e.g. CFE) to get vars at runtime but keep them stored within PSP.  However for all those cases where CFE needs PSP info, an API function is defined to get the info.  There should not be any need to read this variable directly.

Fixes #280

**Testing performed**
Build and sanity check CFE, run all unit tests

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Co-dependent with nasa/cfe#1273

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",dependency,https://github.com/nasa/PSP/pull/287
"Fix #171, use OSAL timebase for CFE timers","**Describe the contribution**
Add a new PSP module that instantiates an OSAL abstract timebase for use with cFE services.  This single module is then used
across all 3 implementations (mcp750, pc-linux, pc-rtems) and does not need to be duplicated.

Cleans up stale code from the previous method(s) of generating 1Hz

Fixes #171

**Testing performed**
Build and sanity check CFE, run all unit tests
Make sure 1Hz timing ticks are working as expected

**Expected behavior changes**
1Hz timing tick on MCP750 will be more accurate
No changes to Linux/RTEMS

**System(s) tested on**
MCP750 vxworks 6.9
Ubuntu 20.04
RTEMS 4.11.3 (qemu)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/PSP/pull/286
"Fix #266, psp module to implement timebase","**Describe the contribution**
Implements two PSP modules to provide CFE_PSP_GetTime and CFE_PSP_GetTimeBase, one for POSIX-compliant RTOS using `clock_gettime()` and the other specifically for PowerPC processors on VxWorks that have the `vxTimeBaseGet()` routine.

This also clarifies and documents the difference/use cases for CFE_PSP_GetTime and CFE_PSP_GetTimeBase.

Finally this includes a coverage test for the VxWorks PSP timebase module, providing an example of how this can be implemented for other modules.

Fixes #266 

**Testing performed**
Build and sanity check CFE, run all unit tests
Confirmed timebase operation on MCP750

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04
MCP750 / vxworks 6.9

**Additional context**
This included a fair bit of investigation as to what the CFE_PSP_GetTime  and CFE_PSP_Get_Timebase functions actually do on MCP750, and why they both exist to begin with.

For compatibility, this keeps things mostly as they were as far as API goes (i.e. neither function is removed/deprecated at this time).  However now that it is documented what the difference between these functions is, CFE should probably focus on using only CFE_PSP_GetTime() since it is more platform-agnostic.  Once existing use cases of CFE_PSP_Get_Timebase() have been transitioned away, it would be a good idea to deprecate it.

When using this implementation the time reported by CFE_PSP_GetTime() is sourced by the same underlying function as CFE_PSP_Get_Timebase() uses.  It no longer uses the separate countdown timer within the Raven PCI device on the MCP750.

This should be more efficient because vxTimeBaseGet() simply reads a local CPU register, whereas reading the Raven register requires PCI access and obscure conversion logic.  The other benefit is that it does not wrap every 27 seconds, thereby allowing CFE time to be simplified at a future date, too.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/PSP/pull/285
Ensure all functions in cfe_psp.h have a stub routine defined,"**Is your feature request related to a problem? Please describe.**
It is possible (or even likely?) that the set of stub functions in the stub library is not complete.

**Describe the solution you'd like**
Before next release should do a check to make sure all functions defined in cfe_psp.h have a stub implementation defined as well as the normal/real one.

**Additional context**
See #275 for recent issue.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/PSP/issues/284
"Fix #281, cleanup memory range table","**Describe the contribution**
A number of cleanup items related to the PSP memory range API

- Make the table itself an internal object - should only be accessed via the PSP API.
- Update to use size_t instead of uint32
- Update the Linux/RTEMS implementation to use full range (SIZE_MAX).

Fixes #281

**Testing performed**
Build and sanity check CFE
Issue the mem pool stats TLM command on Linux, confirm that the `CFE_PSP_MemValidateRange()` call now succeeds

**Expected behavior changes**
The mem pool stats TLM command now works on 64-bit Linux, and sends out the expected telemetry packet.

**System(s) tested on**
Ubuntu 20.04
VxWorks 6.9 on MCP750
RTEMS 4.11.3 on QEMU

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","conflicts, dependency",https://github.com/nasa/PSP/pull/283
"Fix #10, modularize the ram, port, and eeprom access","**Describe the contribution**
This is another attempt at resolving the long-standing issue of platform-specific code in the shared directory which is not easy to replace/override.

Convert the current ""cfe_psp_ram.c"" and ""cfe_psp_port.c"" routines into modular components, and remove from ""shared"" dir.  The existing implementations become the corresponding ""direct"" module, and are enabled based on the psp module selection.

Also added is a ""notimpl"" variant, where all the functions return CFE_PSP_ERR_NOT_IMPLEMENTED.  This is used on Linux
or any other system where direct access is not possible.

Note this also renames the existing ""eeprom_stub"" module to be ""eeprom_notimpl"" for consistency and to avoid any
confusion with the unit test stubs.

Fixes #10

**Testing performed**
Build and sanity check CFE on RTEMS, VxWorks/MCP750 and native Linux
run all unit tests
Confirm that the ""direct"" implementation of Port/RAM access is used only on VxWorks build
Confirm that the ""notimpl"" implementation is used on Linux.

**Expected behavior changes**
No longer segfaults if e.g. CFE_PSP_Port routines are invoked on Linux.  Instead an error code is returned.

**System(s) tested on**
Ubuntu 20.04 (native)
MCP750 (vxworks)
RTEMS 4.11.3 + QEMU 

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/PSP/pull/282
CFE_PSP_MemValidateRange() always fails on 64-bit targets,"**Describe the bug**
When attempting to telemeter Memory Pool stats, CFE ES calls `CFE_PSP_MemValidateRange()` on the address of the pool data.  However on 64 bit Linux this function ends up always returning an error, because the internal table is not set up for 64 bit address

**To Reproduce**
Run CFE on a 64-bit pc-linux platform, then issue CFE ES command code `CFE_ES_SEND_MEM_POOL_STATS_CC` (22) with a valid Pool ID.

This always fails and says invalid handle, even though the handle is actually fine, because it is not passing the `CFE_PSP_MemValidateRange()` check.

**Expected behavior**
Check should pass.

**Code snips**
If applicable, add references to the software.

**System observed on:**
Ubuntu 20.04 (64-bit)

**Additional context**
This table is still using `uint32` sizes.  It must have been missed in the previous updates that changed much of this to `size_t`.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/PSP/issues/281
"Remove ""GLOBAL_PSP_CONFIGDATA"" object","**Is your feature request related to a problem? Please describe.**
This global/constant structure object was originally added to facilitate modular linking, but isn't really necessary anymore, and was never really used.  As it stands today, only the PSP has it, which makes it a bit of an anomaly in the system context.

**Describe the solution you'd like**
Clean it up, remove this extra global object.

**Additional context**
In contrast the similar object `GLOBAL_CFE_CONFIGDATA` object _is_ used, as it facilitates getting PSP access to constants defined in CFE at link time, without PSP having to directly `#include` the header that defines it at compile time (as this would create a backwards dependency).

The `GLOBAL_PSP_CONFIGDATA` object is the same idea but was for PSP constants, however there isn't the same dependency structure here, so it was never really needed.  Only the version info was ever used externally by CFE, and now that is replaced by an API call to get the info, (recent PRs nasa/psp#257 and nasa/cfe#1206) so there is no need for this global at all anymore.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/PSP/issues/280
psp Integration candidate: 2021-03-30,"### Describe the contribution
Fix #277, add version file 
Fix #275, Adds a UT stub for CFE_PSP_GetKernelTextSegmentInfo

### Testing
psp tests <https://github.com/nasa/PSP/pull/279/checks>
bundle tests <https://github.com/nasa/cFS/pull/227/checks>

**Expected behavior changes**
### PR #278 

Includes `cfe_psp_version.c` in the cmake source list, which was mistakenly omitted previously.

### PR  #276

Applied the patch and confirmed that CS Cmake unit tests build. Unit tests relying on `CFE_PSP_GetKernelTextSegmentInfo` will build.


### Additional Context

Part of <https://github.com/nasa/cFS/pull/227>

### Authors
@ejtimmon 
@jphickey ",,https://github.com/nasa/PSP/pull/279
"Fix #277, add version file","**Describe the contribution**
cfe_psp_version.c should have been included in the source list, but was mistakenly omitted in previous PR.

Fixes #277

**Testing performed**
Build and sanity check CFE, run unit tests

**Expected behavior changes**
References to version API will now successfully link

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Corrects an omission from #257.
Required for nasa/cfe#1255 to work.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:FastTrack,https://github.com/nasa/PSP/pull/278
"Add missing ""cfe_psp_version.c"" to source list","**Describe the bug**
The `cfe_psp_version.c` file was not included in the PSP source list as it should have been.

**To Reproduce**
Referencing any version info call results in linker error.

**Expected behavior**
Link should succeed

**System observed on:**
Ubuntu 20.04

**Additional context**
This was supposed to be part of previous PR #257.  Somehow it got missed/omitted from that PR.  (too much stuff going on at once maybe...)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/PSP/issues/277
"Fix #275, Add stub for CFE_PSP_GetKernelTextSegmentInfo","**Describe the contribution**
Fix #275, Adds a UT stub for CFE_PSP_GetKernelTextSegmentInfo

**Testing performed**
Applied the patch and confirmed that CS Cmake unit tests build.

**Expected behavior changes**
Unit tests relying on CFE_PSP_GetKernelTextSegmentInfo will build.

**System(s) tested on**
 - Ubuntu 18.04
 - Main branch of cFS bundle

**Contributor Info - All information REQUIRED for consideration of pull request**
- Elizabeth Timmons/NASA GSFC
",,https://github.com/nasa/PSP/pull/276
Unit test stub needed for CFE_PSP_GetKernelTextSegmentInfo,"**Describe the bug**
There is no unit testing stub for CFE_PSP_GetKernelTextSegmentInfo.  This prevents unit testing the Checksum (CS) application.

**To Reproduce**
Steps to reproduce the behavior:
1. Build CS CMake Unit Tests

This produces the error ""undefined reference to `CFE_PSP_GetKernelTextSegmentInfo'"".

**Expected behavior**
Unit tests should build.

**Code snips**
If applicable, add references to the software.

**System observed on:**
 - Ubuntu 18.04
 - ""eval-cert2"" branch of the cFS repository

**Reporter Info**
Elizabeth Timmons/NASA GSFC
",unit-test,https://github.com/nasa/PSP/issues/275
PSP Headers need a scrub/cleanup,"**Is your feature request related to a problem? Please describe.**
The `cfe_psp.h` header file puts its comments/description _after_ the function declaration and does not use doxygen style.  It also contains at least a few functions that are not used by CFE and also may not even be implemented

**Describe the solution you'd like**
Cleanup.   At least fixup comments to be more readable - put before declaration and ideally also add some doxygen markup. 

At least the `CFE_PSP_Decompress()` function appears to be not implemented at all - recommend removing this prototype.

**Additional context**
Other functions which are inconsistently implemented or too hardware specific to be useful, might be targets for deprecation/removal (These are not used by CFE, either):

- `CFE_PSP_InitSSR()` - why an init but no read/write/mount/etc?  Seems like a thought that was never completed.
- `CFE_PSP_Get_Timer_Tick()` - note this is different than `CFE_PSP_GetTimerTicksPerSecond()`
- `CFE_PSP_Get_Dec()` - not well defined what this value really is, so not really usable in portable apps.

These are referenced but have some issues:
- `CFE_PSP_GetTime()` - The definition is inconsistent, sometimes it maps to a real clock and sometimes its more of an interval timer with an arbitrary wrap point, needs more info/definition at least because it is generally hard to use __correctly__.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/PSP/issues/274
psp Integration Candidate: 2021-03-23,"## Describe the contribution
Fixes #263 -  Make PSP more modular
Fix #265 - use quotes for local includes
Fix #270, Add Contributing Guide

## Tests
Part of <https://github.com/nasa/cFS/pull/223/checks>

## Behavior Changes

### PR #264 

This is a very simple approach to addressing the issue of incompatible/non-portable code blobs in ""shared"" directory of the PSP. It uses the same modular init pattern as is used elsewhere in CFE.

CMake is used to generate a list of ""base"" modules correlating with the selected PSP (i.e. pc-linux, mcp750-vxworks, etc).
These modules are then initialized (in order) before the rest of PSP runs.

The ""direct write"" EEPROM is not used unconditionally. Instead the proper eeprom implementation module is selected based on which PSP is selected. MCP750 uses direct write, pc-linux uses an mmap file, and pc-rtems uses a stub (not implemented).

It is currently not easy to override items in the ""shared"" directory even for platforms which it does not apply.

For example, in the ""cfe_psp_ram.c"" and ""cfe_psp_port.c"" files this contains code that directly writes to physical memory addresses, which may work on mcp750, but will likely segfault on an pc-linux system.

The code should be better structured as modules so the ""correct"" implementation can be used for each system without breaking the other system.

There really shouldn't be much in the `shared` directory (the existence of such a directory implies its not platform-specific, but yet its in the PSP).

### PR #272 

Replaces `""` used on non-system header `#include`s with `<>`


### PR #271 

Added a contributing guide that links to the main cFS contributing guide.

## Additional context
Part of <https://github.com/nasa/cFS/pull/223>

## Authors

@ArielSAdamsNASA 
@jphickey 
@skliper 
",,https://github.com/nasa/PSP/pull/273
"Fix #265, Use quotes for local includes","**Describe the contribution**
Fix #265 - use quotes for local includes

**Testing performed**
Build/run unit tests

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: cFS Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/PSP/pull/272
"Fix #270, Add Contributing Guide","**Describe the contribution**
Fix #270 
Added a contributing guide that links to the main cFS contributing guide. 

**Expected behavior changes**
Users should be able to view the contributing guide contents easily from the PSP repo. 

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal","docs, CCB:FastTrack",https://github.com/nasa/PSP/pull/271
Add Contributing Guide ,"**Is your feature request related to a problem? Please describe.**
Add a contributing guide for the PSP repo. 

**Describe the solution you'd like**
Create a contributing guide markdown file. In the guide, add a link to the cFS contributing guide. 

**Requester Info**
Ariel Adams, ASRC Federal
",docs,https://github.com/nasa/PSP/issues/270
 HOTFIX Integration candidate: 2021-03-12 ,"**Describe the contribution**
Bump to v1.5.0-rc1+dev82
Update Readme, fix URL for IC-2021-03-12 entry in changelog",,https://github.com/nasa/PSP/pull/269
Integration candidate: 2021-03-12,"**Describe the contribution**
HOTFIX - for older CMake support

**Testing performed**
CI

**Expected behavior changes**
See PRs

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",,https://github.com/nasa/PSP/pull/268
Integration candidate: 2021-03-12,"**Describe the contribution**
HOTFIX - for older CMake support

**Testing performed**
CI

**Expected behavior changes**
See PRs

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey",invalid,https://github.com/nasa/PSP/pull/267
Should not use OS_GetLocalTime() for PSP timebase,"**Is your feature request related to a problem? Please describe.**
The PSP timebase (returned via `CFE_PSP_Get_Timebase()`) is used by CFE performance monitoring and it is important that this time is stable and does not get reset.  

But depending on the implementation of OSAL, it may be possible to reset/change the OSAL ""local time"".  At least there is an `OS_SetLocalTime()` function defined - whether it works or not depends on what kernel resource was used to implement this.

**Describe the solution you'd like**
On pc-linux and other POSIX-like systems this should use `clock_gettime()` with CLOCK_MONOTONIC directly, instead of calling OSAL.  

Furthermore this function can be split into a separate module and therefore used on any system that provides `clock_gettime()` 

**Additional context**
See nasa/osal#844 - `OS_GetLocalTime()` may be redefined/clarified to indeed refer to ""real"" time, which would make it less suitable for this purpose used here.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/PSP/issues/266
"Scrub for include <> vs """" use (<> should be system only)","**Is your feature request related to a problem? Please describe.**
<> used on non-system header includes.  Example:
https://github.com/nasa/PSP/blob/d7af7a05e92df18854a12ed40543064ebba4630f/fsw/mcp750-vxworks/src/cfe_psp_exception.c#L61

**Describe the solution you'd like**
Full scrub/fix

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/PSP/issues/265
"Fix #263, modular psp implementation","**Describe the contribution**
This is a very simple approach to addressing the issue of incompatible/non-portable code blobs in ""shared"" directory of the PSP.  It uses the same modular init pattern as is used elsewhere in CFE.

CMake is used to generate a list of ""base"" modules correlating with the selected PSP (i.e. pc-linux, mcp750-vxworks, etc).
These modules are then initialized (in order) before the rest of PSP runs.

Fixes #263 

**Testing performed**
Build and run CFE for pc-rtems and pc-linux
Confirm the correct/expected EEPROM implementation was used

**Expected behavior changes**
The ""direct write"" EEPROM is not used unconditionally.  Instead the proper eeprom implementation module is selected based on which PSP is selected.  MCP750 uses direct write, pc-linux uses an mmap file, and pc-rtems uses a stub (not implemented).

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11.3

**Additional context**
This pattern could be applied to much more of the PSP stuff.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.

",CCB:FastTrack,https://github.com/nasa/PSP/pull/264
Make PSP more modular,"**Is your feature request related to a problem? Please describe.**
It is currently not easy to override items in the ""shared"" directory even for platforms which it does not apply.

For example, in the ""cfe_psp_ram.c"" and ""cfe_psp_port.c"" files this contains code that directly writes to physical memory addresses, which may work on mcp750, but will likely segfault on an pc-linux system.

The code should be better structured as modules so the ""correct"" implementation can be used for each system without breaking the other system.

**Describe the solution you'd like**
Most of the code in `shared` should be modularized so it can be selectable per-platform.
Each platform (mcp750, pc-linux, pc-rtems, plus whatever others users might have) then becomes just a collection of modules.

**Additional context**
There really shouldn't be much in the `shared` directory (the existence of such a directory implies its not platform-specific, but yet its in the PSP).

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/PSP/issues/263
"Fix #261, add psp_module_api interface target","**Describe the contribution**
Adds a new target for PSP modules and use this to propagate the compile definitions and include directories for all PSP code.

This is basically analogous to the `core_private` interface library provided by CFE, but for PSP code.   It is used by PSP internal components and extensions.  The public/external PSP API is still provided by the interface properties on the normal (static) PSP library.

Fixes #261

**Testing performed**
Build and sanity check CFE
run all unit tests

**Expected behavior changes**
No impact to behavior (build system change only)

**System(s) tested on**
Ubuntu 20.04

**Additional context**
nasa/cfe#1203 will also require this.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:FastTrack,https://github.com/nasa/PSP/pull/262
"Add ""psp_module_api"" interface target","**Is your feature request related to a problem? Please describe.**
PSP should provide and use an interface library target for all of its own modules.  This simplifies the build.

**Describe the solution you'd like**
Add a `psp_module_api` interface library target to go along with the `core_api` interface target being added in nasa/cfe#1203.
Fix remaining uses of directory-scope properties and change to target properties.

**Additional context**
Continuation of #254/#255 - where #255 just made PSP work with CFE after CFE transitioned to interface libraries, this makes PSP also use interface libraries internally and for all its components.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/PSP/issues/261
Integration candidate: 2021-03-05,"**Describe the contribution**
PR #259 
PR #257 
PR #255 
PR #253

**Testing performed**
CI

**Expected behavior changes**
See PRs

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@zanzaben @jphickey @ArielSAdamsNASA ",,https://github.com/nasa/PSP/pull/260
"Fix #258, Add Testing Tools to the Security Policy","**Describe the contribution**
Fix #258 
Updated the Security Policy to include the type of testing done for PSP or the cFS bundle under a new section titled ""Testing"". Provided a disclaimer that under the Apache license, liability is not provided. 

Added that security reports should be emailed. 

**Expected behavior changes**
Users should now be aware of the type of testing PSP or the cFS bundle undergoes. 

**Additional context**
References: 
https://github.com/thanos-io/thanos/security/policy
https://github.com/phpMussel/phpMussel/security/policy
https://github.com/timberio/vector/security/policy

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal 
","docs, CCB:FastTrack",https://github.com/nasa/PSP/pull/259
Add Testing Tools to the Security Policy,"**Is your feature request related to a problem? Please describe.**
Users are unaware of how cFS/PSP is tested. By providing this information, transparency is provided to the community which promotes trust. 

**Describe the solution you'd like**
The security policy should inform users what tools are being used to test cFS/PSP while being cautious of liability issues. To do so, we can state explicitly that our software does not provide liability under the Apache license. The security policy should inform users that they may view the LGTM results. The policy would state that the alerts from LGTM may not be accurate, since they cannot be dismissed.  

Add that security report should be emailed. 

**Additional context**
References: https://github.com/thanos-io/thanos/security/policy

**Requester Info**
Ariel Adams, ASRC Federal 
",docs,https://github.com/nasa/PSP/issues/258
"Fix #256, add PSP version API","**Describe the contribution**
Add a PSP implementation of the version API discussed in nasa/cFS#200

Fixes #256

**Testing performed**
Build CFE and sanity check

**Expected behavior changes**
Adds an API to get version info rather than using macros/globals.
This just returns the values of the globals.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Attempting to make the version info patterns consistent between all components.  See nasa/cFS#200 for full background.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/PSP/pull/257
Implement PSP version functions,"**Is your feature request related to a problem? Please describe.**
A simple API to get version info was discussed in nasa/cFS#200.  

**Describe the solution you'd like**
PSP should implement the same API discussed there, to evolve the current macros/globals.

**Additional context**
Already implemented in nasa/osal#824 - this will make PSP consistent with that.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/PSP/issues/256
"Fix #254, use CMake to publish interface details","**Describe the contribution**
Use `target_include_directories` and `target_compile_definitions` to propagate the interface details for PSP

Fixes #254

**Testing performed**
Build and sanity check CFE, confirm building successfully

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This becomes required to support nasa/cfe#1203

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",build-system,https://github.com/nasa/PSP/pull/255
Update PSP library to work with CMake interface logic,"**Is your feature request related to a problem? Please describe.**
PSP should ""publish"" its public API interface via CMake using target_include_directories and target_compile_definitions such that other modules that link to PSP (e.g. CFE core) will automagically get the include dirs and definitions without having to hard-code them.

**Describe the solution you'd like**
Use ""target_include_directories"" and ""target_compile_definitions"" to advertise the interface

**Additional context**
Required for moving toward an interface-based build.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/PSP/issues/254
"Fix #246, fix comment style","**Describe the contribution**
Fixes #246
Remove the unused code 

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC",,https://github.com/nasa/PSP/pull/253
"Implement ""CFE_PSP_GetVersion()"" function","**Is your feature request related to a problem? Please describe.**
As described in nasa/osal#821 it is better to acquire version info strings/values at runtime rather than via a macro, because of where and how it will get evaluated.

PSP is actually in better shape than OSAL/CFE because `CFE_PSP_VERSION` currently refers to a string which is stored in GLOBAL_PSP_CONFIGDATA.  But still, it would be better and more conventional to get this value via an API call.

**Describe the solution you'd like**
Implement `CFE_PSP_GetVersion()` and related APIs to get the various version strings.

**Describe alternatives you've considered**
Leave in global object.

**Additional context**
See details in nasa/osal#821

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",duplicate,https://github.com/nasa/PSP/issues/252
Static Analysis: 'unsigned int' but is of type 'PCS_WIND_TCB *' ,"**Describe the bug**
See <https://github.com/nasa/cFS/security/code-scanning/1?query=ref%3Arefs%2Fpull%2F193%2Fmerge>

Detected in `psp/fsw/mcp750-vxworks/src/cfe_psp_exception.c:208`

Not sure we might want to dismiss it 

**To Reproduce**
Run CodeQL

**Code snips**
<img width=""991"" alt=""Screen Shot 2021-02-17 at 1 14 02 PM"" src=""https://user-images.githubusercontent.com/59618057/108248658-25af3c00-7122-11eb-958f-38e2f7619614.png"">

","bug, security",https://github.com/nasa/PSP/issues/251
PSP Integration candidate: 2021-02-02,"**Describe the contribution**
Fix #230, Add workflow timeout and format check
Fix #210, Apply standard formatting
Fix #248, Add CodeQL analysis to workflow
Fix #241, add missing '+dev' string to development version report 

**Testing performed**
See <https://github.com/nasa/cFS/pull/182/checks>

**Expected behavior changes**
PR #245 - Updates continuous integration workfow by adding static analysis with timeout and code format check. Adds status badges to ReadMe and removes old TravisCI artifacts.

PR #249 - Adds CodeQL analysis to continuous integration 

PR #247 - Apply standard formatting to psp codebase. Only changes whitespace.

PR #242 - Adds missing ""+dev"" to development version output

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/182>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@astrogeco ",,https://github.com/nasa/PSP/pull/250
"Fix #248, Add CodeQL analysis to workflow","**Describe the contribution**
Fix #248 - adds CodeQL analysis

Differences from bundle - just builds psp-pc-linux, has timeout

**Testing performed**
Ran on fork

**Expected behavior changes**
Adds Code QL analysis on push to main and pull requests (to main)

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:FastTrack, continuous-integration",https://github.com/nasa/PSP/pull/249
Add CodeQL analysis to workflow,"**Is your feature request related to a problem? Please describe.**
CodeQL analysis not implemented in submodules

**Describe the solution you'd like**
Add so alerts are generated on pull requests to submodules

**Describe alternatives you've considered**
None

**Additional context**
CodeQL is run at the bundle (nasa/cFS) level, but link to code in submodules doesn't work.

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, continuous-integration, security",https://github.com/nasa/PSP/issues/248
"Fix #210, Apply standard formatting","**Describe the contribution**
Fix #210 - Apply standard formating

**Testing performed**
Whitespace changes only, build confirmed

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
Note - did refactor a couple comments which looked ugly after autoformat, trivial to redo in a way that looks good (to me) and works with the autoformatting

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/PSP/pull/247
C++ comment style and commented out code violations,"**Is your feature request related to a problem? Please describe.**
C++ comment style and commented out code violates style guidelines
https://github.com/nasa/PSP/blob/0cd14abbb58691eb83afdd816e116f68e681b8e0/fsw/pc-rtems/src/cfe_psp_memory.c#L544-L565

**Describe the solution you'd like**
Clean up

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/PSP/issues/246
"Fix #230, Add workflow timeout and format check","**Describe the contribution**
Fix #230 - update static analysis with timeout and add format check into github workflow, includes badges in readme and removal of old travis config

**Testing performed**
CI

**Expected behavior changes**
Added format check in workflow and timeouts

**System(s) tested on**
CI

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","CCB:FastTrack, continuous-integration",https://github.com/nasa/PSP/pull/245
"Support VxWorks ""muncher"" for C++","**Is your feature request related to a problem? Please describe.**
VxWorks requires a tool called a ""muncher"" in order to generate stubs required for static destructors/constructors to run, when building for C++. 

**Describe the solution you'd like**
Run the muncher. An example implementation is below:

In VxWorks-CFE.cmake, change 
```
set(CMAKE_CXX_CREATE_SHARED_MODULE ${CMAKE_C_CREATE_SHARED_MODULE})
```
to
```
if(NOT DEFINED CMAKE_CXX_CREATE_SHARED_MODULE)
    set(CMAKE_CXX_CREATE_SHARED_MODULE ${CMAKE_C_CREATE_SHARED_MODULE})
endif()
```
Somewhere in the target-specific PSP cmakefiles or toolchain file, define something like (the below is for SP0-S, derived from the workbench-generated makefiles)
```
set(VSB_DIR ""${WIND_BASE}/target/lib"")
set(VXMUNCHER_TAGS ${VSB_DIR}/tags/ppc/PPC85XX/e500v2common/dkm.tags)
set(VXMUNCHER_TCL ""tclsh ${WIND_BASE}/host/resource/hutils/tcl/munch.tcl -c ppc -tags ${VXMUNCHER_TAGS}"")
set(VXMUNCHER_COMPILE_FLAGS ""-O2 -fstrength-reduce -te500v2 -mhard-float -fno-implicit-fp -mstrict-align -fno-builtin -fdollars-in-identifiers -c"")
set(VX_LINK_FLAGS ""-r -nostdlib -Wl,-X -T ${WIND_BASE}/target/h/tool/gnu/ldscripts/link.OUT"")


set(CMAKE_CXX_CREATE_SHARED_MODULE
    ""<CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_C_LINK_FLAGS> ${VX_LINK_FLAGS} <LINK_FLAGS> <OBJECTS> -o <TARGET>.PartialImage.out <LINK_LIBRARIES>""
    ""${CMAKE_NM} <TARGET>.PartialImage.out | ${VXMUNCHER_TCL} > <TARGET>.ctdt.c""
    ""<CMAKE_C_COMPILER> -c <TARGET>.ctdt.c -o <TARGET>.ctdt.c.o ${VXMUNCHER_COMPILE_FLAGS}""
    ""<CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <TARGET>.PartialImage.out <TARGET>.ctdt.c.o -o <TARGET> ${VX_LINK_FLAGS}""
)
```

**Describe alternatives you've considered**
Leave `CMAKE_CXX_CREATE_SHARED_MODULE`  unset so it can be overridden in the toolchain file. 

**Additional context**
N/A

**Requester Info**
John N Pham, Northrop Grumman",,https://github.com/nasa/PSP/issues/244
psp Integration candidate: 2021-01-19,"**Describe the contribution**

Fix #228, Refactor UT_ClearForceFail to UT_ClearDefaultReturnValue
Fix #126, Refactor CFE_PSP_ModuleType_t enum
Fix #236, Create Security Policy

**Testing performed**
See https://github.com/nasa/cFS/pull/177/checks

**Expected behavior changes**

PR #239 - Add `Security.md` with instructions on reporting vulnerabilities.

PR #229 - Rename `UT_ClearForceFail` as `UT_ClearDefaultValue` to reflect <https://github.com/nasa/osal/issues/724>

PR #235 - Remove unused elements in `CFE_PSP_ModuleType_t` enum to avoids irregular enum warning

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of https://github.com/nasa/cFS/pull/177

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@skliper 
@zanzaben 
@ArielSAdamsNASA 
",,https://github.com/nasa/PSP/pull/243
"Fix #241, Add missing +dev to development version string","**Describe the contribution**
Fix #241, Version String not reported correctly

Increase size of `Version` element of `CFE_PSP_VersionInfo_t` to char[32] and rename as `VersionString`


**Testing performed**
Ran on local linux host, cFE EVS output now shows correct format for psp development version

```
EVS Port1 66/1/CFE_ES 2: cFS Versions: cfe v6.8.0-rc1+dev248, osal v5.1.0-rc1+dev184, psp v1.5.0-rc1+dev46. cFE chksm 43674
```

**Expected behavior changes**
Version report matches osal and cfe for development versions. 

Increased structure 

**System(s) tested on**
Ubuntu

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@astrogeco ",,https://github.com/nasa/PSP/pull/242
Version string not reported correctly,"@skliper commented on [Fri Jan 08 2021](https://github.com/nasa/cFE/issues/1080)

**Is your feature request related to a problem? Please describe.**
`EVS Port1 66/1/CFE_ES 2: cFS Versions: cfe v6.8.0-rc1+dev236, osal v5.1.0-rc1+dev149, psp v1.5.0-rc146. cFE chksm 52385`

Note missing `+dev` for psp

**Describe the solution you'd like**
add `+dev`

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC


",bug,https://github.com/nasa/PSP/issues/241
psp Integration Candidate: 2021-01-12,"**Describe the contribution**

Fix #227, Use OSAL time conversion/access methods

**Testing performed**
See <https://github.com/nasa/cFS/pull/174/checks>

**Expected behavior changes**

PR #231 - Instead of accessing `OS_time_t` member values directly, use the OSAL-provided conversion and access methods. This provides independence and abstraction from the specific `OS_time_t` definition and allows OSAL to transition to a 64 bit value.

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/174>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey ",,https://github.com/nasa/PSP/pull/240
"Fix #236, Create Security Policy","**Describe the contribution**
Fix #236 
Created a draft of a security policy markdown file for PSP. The purpose of a security policy is to inform users on how to submit bugs or vulnerabilities. It is ideal to include a section for supported versions.

**Additional context**
Optional sections that may be included:

- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Contributor Info - All information REQUIRED for consideration of pull request**
Ariel Adams, ASRC Federal","docs, CCB:FastTrack, security",https://github.com/nasa/PSP/pull/239
Fix #236 Create PSP Security Policy,,invalid,https://github.com/nasa/PSP/pull/238
Fix #236 Create PSP Security Policy,,invalid,https://github.com/nasa/PSP/pull/237
Implement a Security Policy,"**Describe the bug**
Create a security policy for users on how to report security vulnerabilities.

**Expected behavior**
The security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns.

**Additional context**
Additional sections that may be included:
- What to expect security-wise such as what type of testing is done
- Address privacy concerns
- Supported versions
- License
- Known vulnerabilities

References to Public Security Policies:
https://github.com/thanos-io/thanos/security/policy
https://github.com/minhealthnz/nzcovidtracer-app/security/policy
https://github.com/odoo/odoo/security/policy

**Reporter Info**
Ariel Adams, ASRC Federal","docs, security",https://github.com/nasa/PSP/issues/236
"Fix #126, Refactor CFE_PSP_ModuleType_t enum","**Describe the contribution**
Fix #126 - Avoids irregular enum warning

**Testing performed**
Build bundle and unit test (passed)

**Expected behavior changes**
None other than eliminates static analysis warning

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/PSP/pull/235
PSP Integration candidate: 2021-01-05,"**Describe the contribution**

Fix #232, Add cppcheck GitHub Action workflow

**Testing performed**
See Github Actions <https://github.com/nasa/PSP/pull/234/checks>

**Expected behavior changes**
PR #233 - Adds cppcheck GitHub Actions workflow file 

**System(s) tested on**

Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/172>

**Third party code**
none

**Contributor Info - All information REQUIRED for consideration of pull request**
@astrogeco",,https://github.com/nasa/PSP/pull/234
"Fix #232, Re-add automated static code analysis ","**Describe the contribution**
Fix #232

**Testing performed**
See action runs in fork: <https://github.com/astrogeco/psp/actions>

**Expected behavior changes**
Static analysis workflow runs on pull requests and push.

Workflow saves log file as an artifact for analysis.

**System(s) tested on**
n/a

**Additional context**
n/a

**Third party code**
n/a",CCB:FastTrack,https://github.com/nasa/PSP/pull/233
Re-add static code analysis for pull requests,"**Describe the bug**
The Travis CI runner ran cppcheck which we don't have anymore

**To Reproduce**
Submit pull request, notice that Travis CI doesn't run anymore.

**Expected behavior**
A success or failure report of a cppcheck run.

**Code snips**
Check from travis.yml

```
  # Check versions
  - cppcheck --version

  #cppcheck flight software psp/fsw
  - cppcheck --force --inline-suppr --std=c99 --language=c --error-exitcode=1 --enable=warning,performance,portability,style --suppress=variableScope --inconclusive fsw 2>cppcheck_flight_psp.txt
  - |
    if [[ -s cppcheck_flight_psp.txt ]]; then
      echo ""You must fix cppcheck errors before submitting a pull request""
      echo """"
      cat cppcheck_flight_psp.txt
      exit -1
    fi
 
```

**System observed on:**
n/a

**Additional context**
Part of ongoing TravisCI to GitHub Actions migration
","bug, continuous-integration",https://github.com/nasa/PSP/issues/232
"Fix #227, Use OSAL time conversion/access methods","**Describe the contribution**

Instead of accessing `OS_time_t` member values directly, use the OSAL-provided conversion and access methods.  This provides
independence/abstraction from the specific `OS_time_t` definition and allows OSAL to transition to a 64 bit value.

Fixes #227 

**Testing performed**
Build and run tests, sanity check CFE

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11.3 + pc686 (qemu)

**Additional context**
Also adjusts the conversion factors within in `CFE_PSP_GetTime()` to get a more precise result on VxWorks.  Linux/RTEMS are just pass-thru to OSAL anyway.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",dependency,https://github.com/nasa/PSP/pull/231
Add workflow timeouts and format check,"**Is your feature request related to a problem? Please describe.**
- No timeout in workflow (default is 360 minutes) could consume allocations
- Missing format check
- Remove old travis configuration
- Update badges

**Describe the solution you'd like**
Add timeout and format check

**Describe alternatives you've considered**
None

**Additional context**
Similar to transition in nasa/cFS

**Requester Info**
Jacob Hageman - NASA/GSFC

EDIT - was general workflow ticket (duplicate of #232), made specific for remaining changes","enhancement, continuous-integration",https://github.com/nasa/PSP/issues/230
"Fix #228, Refactor UT_ClearForceFail to UT_ClearDefaultReturnValue","**Describe the contribution**
Fixes #228
Rename UT_ClearForceFail to UT_ClearDefaultValue

**Testing performed**
Build and run unit test

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04

**Additional context**
Dependant on nasa/osal#725

**Contributor Info - All information REQUIRED for consideration of pull request**
Alex Campbell GSFC
","dependency, refactor",https://github.com/nasa/PSP/pull/229
Change UT_ClearForceFail to UT_ClearDefaultReturnValue,"**Is your feature request related to a problem? Please describe.**
UT_ClearForceFail was refactored to UT_ClearDefaultReturnValue for nasa/osal#724. It needs to have its name changed here as well.

**Additional context**
Part of nasa/osal#724

**Requester Info**
Alex Campbell GSFC
",refactor,https://github.com/nasa/PSP/issues/228
Update PSP to use OS time conversion/access methods,"**Is your feature request related to a problem? Please describe.**
PSP is directly accessing specific fields within `OS_time_t` which will break when the struct definition changes.   

**Describe the solution you'd like**
Instead of directly accessing the `seconds` and `microsecs` fields within `OS_time_t`, use the accessor functions to convert/extract the relevant info from  the value instead.

**Additional context**
see nasa/osal#429

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.",enhancement,https://github.com/nasa/PSP/issues/227
PSP Integration Candidate: 2020-12-08,"**Describe the contribution**

Fix #197, Updated readme file for pc-rtems PSP and added a new readm…
Fix #222, Remove obsolete OS_TaskRegister comment

**Testing performed**
See https://github.com/nasa/cFS/pull/160/checks

**Expected behavior changes**

PR #220 - Updates the Readme for RTEMS and adds `README_RTEMS_5.txt`. The changes include removing references to the CEXP module loader, and describing the development environment setup for RTEMS 5.

PR #223 - Remove obsolete OS_TaskRegister comment

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of https://github.com/nasa/cFS/pull/160

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@acudmore 
@skliper 
",,https://github.com/nasa/PSP/pull/226
Cleanup RTEMS ifdefs using cmake,"@jphickey please flesh out, based on conversation from #220

_Originally posted by @astrogeco in https://github.com/nasa/PSP/issues/220#issuecomment-737374246_",,https://github.com/nasa/PSP/issues/225
Reformat and refine ReadMe for RTEMS,"- Combine into a single ReadMe and have the RTEMS 4 as an appendix
- Maybe reformat from .txt to markdown (open a new issue)

_Originally posted by @astrogeco in https://github.com/nasa/PSP/issues/220#issuecomment-737374246_",,https://github.com/nasa/PSP/issues/224
"Fix #222, Remove obsolete OS_TaskRegister comment","**Describe the contribution**
Fix #222, remove obsolete OS_TaskRegister comment (really only called for ES tasks... remaining comment is what is important)

**Testing performed**
None, comment only

**Expected behavior changes**
None

**System(s) tested on**
N/A

**Additional context**
nasa/osal#255

**Third party code**
None.

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:FastTrack,https://github.com/nasa/PSP/pull/223
Remove obsolete reference to OS_TaskRegister,"**Is your feature request related to a problem? Please describe.**
Obsolete comment (in each psp, but sample below):
https://github.com/nasa/PSP/blob/859101404d43c65abe62bf2893e71a7bd4cc125e/fsw/mcp750-vxworks/src/cfe_psp_exception.c#L172

**Describe the solution you'd like**
Remove obsolete comment

**Describe alternatives you've considered**
None.

**Additional context**
nasa/osal#255

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/PSP/issues/222
psp Integration Candidate: 2020-11-24,"**Describe the contribution**
Fix #214, Refactoring UT_SetForceFail to UT_SetDefaultReturnValue
Fix #217, use size_t in PSP stubs

**Testing performed**
See events for ""github actions test"" at <https://github.com/astrogeco/cFS/actions>

**Expected behavior changes**
PR #215 - Rename `UT_SetForceFail` to `UT_SetDefaultReturnValue` since some functions that retain more than 1 value are not necessarily failing.

PR #219 - Use of the size_t type instead of uint32 in unit-tests to avoid a compiler type mismatch error on some platforms. 

**System(s) tested on**
Ubuntu 18.04

**Additional context**
Part of <https://github.com/nasa/cFS/pull/158>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@zanzaben 
@jphickey ",,https://github.com/nasa/PSP/pull/221
"Fix #197, Update readme file for pc-rtems PSP and added a new readme file for RTEMS 5","**Describe the contribution**
Fix #197 

This change updates the README.txt file and adds a README_RTEMS_5.txt for the pc-rtems PSP. No code changes in the PSP were necessary to support RTEMS 5.1 for the pc-rtems PSP. The changes include removing references to the CEXP module loader, and describing the development environment setup for RTEMS 5.

**Testing performed**
No testing is required for these README changes, but I did create both the RTEMS 4.11 and RTEMS 5.1 development environments according to the README files. I also tested building and running the cFS bundle on both RTEMS 4.11 and RTEMS 5.1.

**Expected behavior changes**
 - No impact to behavior

**System(s) tested on**
 - Hardware: QEMU i686
 - OS: RTEMS
 - Versions: RTEMS 4.11 and RTEMS 5.1

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Alan Cudmore, NASA/GSFC Code 582.0
",,https://github.com/nasa/PSP/pull/220
"Fix #217, use size_t in PSP stubs","**Describe the contribution**
Recent API updates require use of the `size_t` type instead of `uint32`.

This change is required at the same time as nasa/osal#654 is merged (dependency).

Fixes #217 

**Testing performed**
Build and run all unit tests.

**Expected behavior changes**
None.  No FSW changes, only UT stub update here.  

**System(s) tested on**
Ubuntu 20.04

**Additional context**
This is only UT stubs.  FSW requires API change to use `size_t` and that will be a separate issue/PR.  (see #218)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","dependency, unit-test",https://github.com/nasa/PSP/pull/219
"Refactor PSP ""memory area"" API","**Is your feature request related to a problem? Please describe.**
PSP implements dedicated APIs to retrieve the pointer/size of special memory areas such as ES reset area, CDS, RAM disk, etc.  

- [ ] CFE_PSP_GetUserReservedArea
- [ ]  CFE_PSP_GetVolatileDiskMem
- [ ] CFE_PSP_GetResetArea
- [ ] CFE_PSP_GetKernelTextSegmentInfo
- [ ] CFE_PSP_GetCFETextSegmentInfo
- [ ] CFE_PSP_GetCDSSize

**Describe the solution you'd like**

- Currently these APIs use `uint32` type for sizes. This should change to `size_t`.
- Each memory area has a distinct/separate API.  Should change to a more extensible approach, allowing more memory blocks to be allocated without creating a new API for each one (e.g. ID based, where IDs can be more easily added in the future, but functions stay the same).

**Additional context**
Creating a better API here can help clean up some issues in the CFE side where there is only one ""reset area"" that is part of ES.  However both EVS and TIME core apps also store data here, and therefore this creates issues where these subsystems have to make their private data structs into public ones so they can be combined into this area.  Cleaning this up would help make the CFE core apps more independent and modular.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",,https://github.com/nasa/PSP/issues/218
Update unit test stubs to use size_t,"**Is your feature request related to a problem? Please describe.**
As part of nasa/osal#635 the unit test routines were updated to use `size_t` rather than `uint32` for object sizes.

**Describe the solution you'd like**
PSP stub implementations need to use `size_t` instead of `uint32` to avoid a compiler type mismatch error on some platforms.

**Additional context**
This needs to go with/dependency on PR nasa/osal#654.

This issue is only for stubs as it will cause a build issue without it.  There will be a separate change/to-do item to fix PSP FSW APIs that are still using uint32.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, dependency, unit-test",https://github.com/nasa/PSP/issues/217
Graceful shutdown for VxWorks/MCP750,"**Is your feature request related to a problem? Please describe.**
When the CFE ""Restart"" command is executed, it calls `CFE_PSP_Restart()`.  In the MCP750 implementation, this ultimately just invokes the `reboot()` kernel API.

This is rather extreme -- all apps/tasks are still running when this command comes in, and this just suddenly reboots the CPU with no notice.  Those tasks could have been doing something important when they suddenly get the carpet ripped out from underneath.

**Describe the solution you'd like**
Should do some sort of graceful shutdown like Linux does with CTRL+C handling.  Cancel or suspend all running tasks first so that when the ""reboot()"" is called there shouldn't be any other activity going on.

**Describe alternatives you've considered**

**Additional context**
During CFE 6.8 testing there was some occasional spurious exceptions observed when issuing the CFE Restart command - causing it to effectively execute a PROCESSOR restart instead of the intended POWERON Reset.

I was not able to reproduce that with the core framework distro, but my hypothesis is that there were possibly some apps running and doing something when the reboot was initiated and this set the stage for indeterminate behavior.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/PSP/issues/216
"Fix #214, Refactor UT_SetForceFail to UT_SetDefaultReturnValue","Describe the contribution
Fixes #214 by changing UT_SetForceFail to UT_SetDefaultReturnValue

Testing performed
Build and run unit test

Expected behavior changes
No impact to behavior

System(s) tested on
Ubuntu 20.04

Additional context
Dependant on nasa/osal#646

Contributor Info - All information REQUIRED for consideration of pull request
Alex Campbell - NASA/GSFC",dependency,https://github.com/nasa/PSP/pull/215
Refactor UT_SetForceFail,"Describe the bug
UT_SetForceFail was refactored to UT_SetDefaultReturnValue for https://github.com/nasa/osal/issues/559. It needs to have its name changed here as well.

Expected behavior
Change UT_SetForceFail  to UT_SetDefaultReturnValue 

Additional context
Part of https://github.com/nasa/osal/issues/559

Reporter Info
Alex Campbell","enhancement, dependency",https://github.com/nasa/PSP/issues/214
Integration Candidate: 2020-11-03,"**Describe the contribution**
Fix #199, set kernel task name for OSAL tasks

**Testing performed**
See framework-bundle CI: https://github.com/nasa/cFS/pull/154/checks

**Expected behavior changes**

PR #212 - Use event callback mechanism to invoke pthread_setname_np() such that the OS kernel is informed of the OSAL task name. `/proc` filesystem on Linux now has actual task name, instead of all being core-cpu1. The `pthread_setname_np` API requires `_GNU_SOURCE` to be defined when compiling - this can be local to PSP.

HOTFIX - Move variable declaration in fsw/pc-linux/src/cfe_psp_start.c 

HOTFIX - Set REVISION to ""99"" to indicate development version in version.h


**System(s) tested on**
Ubuntu on Travis CI

**Additional context**
Part of https://github.com/nasa/cFS/pull/154

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey ",,https://github.com/nasa/PSP/pull/213
"Fix #199, set kernel task name for OSAL tasks","**Describe the contribution**
Use event callback mechanism to invoke `pthread_setname_np()` such that the OS kernel is informed of the OSAL task name.

Fixes #199 

**Testing performed**
Build and sanity test CFE
Check `/proc/<pid>/task/<tid>/comm` and confirm that the correct name is shown for CFE tasks e.g. CFE_EVS, CFE_SB, etc.

**Expected behavior changes**
`/proc` filesystem on Linux has actual task name, instead of all being `core-cpu1`.

**System(s) tested on**
Ubuntu 20.04

**Additional context**
The `pthread_setname_np` API requires `_GNU_SOURCE` to be defined when compiling - this can be local to PSP.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/PSP/pull/212
Apply standard formatting,"**Is your feature request related to a problem? Please describe.**
Various formatting styles in codebase

**Describe the solution you'd like**
Apply standard formatting, if it's an improvement then submit for fasttrack (minimize impacts to open work).  If standard format requires hand mods, update such that application of standard format in the future doesn't require repeat modification.

**Describe alternatives you've considered**
Leave as-is if not an improvement.

**Additional context**
None.

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/PSP/issues/210
Integration Candidate: 2020-10-20,"**Describe the contribution**
Fix #111 

**Testing performed**
Bundle CI: https://github.com/nasa/cFS/pull/152/checks

**Expected behavior changes**

PR #207 - Improves the module ID lookup when getting the CFE core text segment info. VxWorks PSP should use the real module name, not assume cfe-core.o when getting text segment info

**System(s) tested on**

Ubuntu CI

**Additional context**
Part of <https://github.com/nasa/cFS/pull/152>

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
",,https://github.com/nasa/PSP/pull/209
Add a functional test for CFE_PSP_GetCFETextSegmentInfo,"**Is your feature request related to a problem? Please describe.**
Related to #111 - really need functional tests for all the APIs, but there was a bug in this routine (if executable file name didn't match hardcoded value) that wasn't noticed until verification testing a different app.

**Describe the solution you'd like**
Add a functional test, should check for proper behavior or NOT_IMPLEMENTED.

**Describe alternatives you've considered**
None

**Additional context**
#111, functional test brought up in discussion for #207

**Requester Info**
Jacob Hageman - NASA/GSFC",unit-test,https://github.com/nasa/PSP/issues/208
cES1503 requirement compliance (clear volatile file system) relies on actual power cycle or wrapper logic not included in bundle,"**Describe the bug**
Current requirement verbiage:  Upon a Power-On Reset, the cFE shall clear the Volatile File system.

When executing in the context in which a power on reset command does not actually cause a true power on reset (typical when running locally in a development context from a command line) the bundle does not autonomously cause a power cycle or clear the volatile file system due to the risks of doing this on a development platform.  A ""wrapper"" or some other external action is necessary in this context to be compliant with cES1503.  Typical real deployments have the wrapper logic to cause a power on reset (which clears the Volatile File system).

Note this also means processor resets and power on resets when running from the command line don't actually restart the software.  Typically there's a background service (systemd or similar) that would perform those actions.

**To Reproduce**
On a Linux System:
1. Place a file in the volatile file system  - /dev/shm/osal:RAM/
2. Start the software with -RPO (Power-On Reset) option. 
3. Verify that the file still exists.

**Expected behavior**
Example wrapper logic should be included to demonstrate a pathway to compliance with this requirement.

Other potential solution - provide a setup (docker? VM?) in which this could be implemented/demonstrated.

**System observed on:**
OS: ubuntu-19.10
Versions: cfe: v6.7.0+dev295; osal: v5.0.0+dev247; psp: v1.4.14.0

**Reporter Info**
Dan Knutsen
NASA/Goddard

EDIT - Updated per CCB discussions by Jacob Hageman",,https://github.com/nasa/PSP/issues/211
"Fix #111, do not assume a specific core name","**Describe the contribution**
Improve the module ID lookup when getting the CFE core text segment info.

- Ideally get the ID directly from what was loaded by startCfeCore
- As a fallback use the actual CFE core name from the configdata

Do not use a hardcoded name.

Fixes #111 

**Testing performed**
Build and run unit tests

**Expected behavior changes**
VxWorks PSP should use the real module name, not assume `cfe-core.o` when getting text segment info

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",dependency,https://github.com/nasa/PSP/pull/207
Integration Candidate 2020-10-13,"**Describe the contribution**
Fix #200
Fix #204

**Testing performed**
See Bundle PR - https://github.com/nasa/cFS/pull/147/checks

**Expected behavior changes**

PR #201  - Use the osal_id_t typedef whenever dealing with an OSAL ID value.

PR #205 - Resolves build error regarding redefinition of PPC macros in the coverage test, when building on the actual ppc/vxworks target.

**System(s) tested on**
Bundle CI, Ubuntu 

**Additional context**
Part of https://github.com/nasa/cFS/pull/147

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
@jphickey 
",,https://github.com/nasa/PSP/pull/206
"Fix #204, redefinition of macros in PPC vxworks unit test build","**Describe the contribution**
Fix #204
Resolves build error regarding redefinition of PPC macros in the coverage test, when building on the actual ppc/vxworks target.

This is due to the fact that the system limits.h file implicitly provides these PPC symbols.  It does not appear that there are
any current test cases that depend on values of these symbols.

**Testing performed**
Build verification only at this time (resolves compile error)

**Expected behavior changes**
None

**System(s) tested on**
GSFC vxworks build machine (gs582w-cfelnx)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/PSP/pull/205
PSP coverage tests fail to build on the MCP750/VxWorks 6.9 target,"**Describe the bug**
When building for MCP750 with all unit/coverage tests enabled, an error occurs:

```
In file included from /home/jphickey/cfecfs/github/psp/fsw/mcp750-vxworks/src/cfe_psp_exception.c:46:
/home/jphickey/cfecfs/github/psp/unit-test-coverage/ut-stubs/override_inc/arch/ppc/vxPpcLib.h:32:1: error: ""_PPC_FPSCR_UE"" redefined
In file included from /opt/WindRiver/vxworks-6.9/target/h/types/vxArch.h:148,
                 from /opt/WindRiver/vxworks-6.9/target/h/types/vxANSI.h:65,
                 from /opt/WindRiver/vxworks-6.9/target/h/limits.h:42,
                 from /opt/WindRiver/gnu/4.3.3-vxworks-6.9/x86-linux2/bin/../../lib/gcc/powerpc-wrs-vxworks/4.3.3/include-fixed/limits.h:122,
                 from /opt/WindRiver/gnu/4.3.3-vxworks-6.9/x86-linux2/bin/../../lib/gcc/powerpc-wrs-vxworks/4.3.3/include-fixed/syslimits.h:7,
                 from /opt/WindRiver/gnu/4.3.3-vxworks-6.9/x86-linux2/bin/../../lib/gcc/powerpc-wrs-vxworks/4.3.3/include-fixed/limits.h:11,
                 from /home/jphickey/cfecfs/github/psp/unit-test-coverage/ut-stubs/inc/PCS_basetypes.h:26,
                 from /home/jphickey/cfecfs/github/psp/unit-test-coverage/ut-stubs/inc/PCS_stdio.h:5,
                 from /home/jphickey/cfecfs/github/psp/unit-test-coverage/ut-stubs/override_inc/stdio.h:15,
                 from /home/jphickey/cfecfs/github/psp/fsw/mcp750-vxworks/src/cfe_psp_exception.c:39:
/opt/WindRiver/vxworks-6.9/target/h/arch/ppc/archPpc.h:187:1: error: this is the location of the previous definition
```

**To Reproduce**
Prepare using `make SIMULATION=ppc-vxworks6.9 ENABLE_UNIT_TESTS=true prep` and sample_defs config
Then run `make`

**Expected behavior**
Build should succeed

**System observed on:**
`gs582w-cfelnx` build machine with MCP750 target

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

","bug, unit-test",https://github.com/nasa/PSP/issues/204
Errors printed using OS_printf may never appear,"**Describe the bug**
OS_printf uses an additional output buffer with a low priority task to move the data from the buffer to the console.  In the case of fatal errors which cause the process to exit as a result, the output may not get transferred before the process exits and the task is killed.

**To Reproduce**
See #202 of a case where (for other reasons) shmget failed but no error message was shown.

**Expected behavior**
Error messages should be shown

**Additional context**
This is particularly an issue for errors which cause an immediate process exit.  So long as the process keeps running and the output task isn't immediately cancelled, there should not be an issue.  

Recommendation is to use `fprintf(stderr, ...)` for fatal error messages, as even the stdout stream might have some line buffering in the C library, but the stderr stream should be (relatively) unbuffered.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.  ( based on previous report in #202 )
",bug,https://github.com/nasa/PSP/issues/203
No error message emitted when shmget() fails.,"**Describe the bug**
On certain platforms, `shmget` may fail with `EINVAL` but the error handler does not call `OS_printf`. Interestingly enough, replacing the `OS_printf` call with regular `printf` worked and displays an error message.

This happened to me with a Raspberry Pi Zero when `CFE_PLATFORM_ES_USER_RESERVED_SIZE` was left at the default of `1024*1024`. This can be fixed by reducing the size to `1024*128`.

**To Reproduce**
Steps to reproduce the behavior:
1. Clone cFS on an Ubuntu 20.04 x86_64 host machine with ARM cross compilers (arm-linux-gnueabihf-gcc version 9.3.0).
2. Copy the build config files for cpu1 to cpu2 and modify `toolchain-cpu2.cmake` for ARM (change architecture and compiler paths).
3. Edit `targets.cmake` to compile for cpu2.
4. Build for cpu2, copy the directory `build/exe/cpu2` to the target machine
5. Run on the target machine (a Raspberry Pi Zero) with `sudo ./core-cpu2 --reset PO`
6. cFS exits with error code 255 (-1 as a signed integer), but no error message is observed.

**Expected behavior**
cFS should either launch or fail with an error message.

**Code snips**
cFS exits with error code -1 but no error message.
```
CFE_PSP: Reset Type: PO
CFE_PSP: Default Reset SubType = 1
CFE_PSP: Default CPU ID = 2
CFE_PSP: Default Spacecraft ID = 66
CFE_PSP: Default CPU Name: cpu2
OS_Posix_GetSchedulerParams():195:Policy 1: available, min-max: 1-99
OS_Posix_GetSchedulerParams():195:Policy 2: available, min-max: 1-99
OS_Posix_TaskAPI_Impl_Init():381:Selected policy 2 for RT tasks, root task = 99
pi@raspberrypi:~/cpu2 $ echo $?
255
```

**System observed on:**
 - Raspberry Pi Zero 
 - OS: Linux raspberrypi 5.4.51+ #1333 Mon Aug 10 16:38:02 BST 2020 armv6l GNU/Linux
 - Versions: Current submodule versions listed in github.com/nasa/cFS on 4 Oct 2020.

**Reporter Info**
Jacob Killelea",duplicate,https://github.com/nasa/PSP/issues/202
"Fix #200, Update PSP to use osal_id_t","**Describe the contribution**
Use the osal_id_t typedef whenever dealing with an OSAL ID value.

Fixes #200 

**Testing performed**
Build and sanity test CFE on all supported platforms

**Expected behavior changes**
None

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11.3 / pc686 (QEMU) on Ubuntu 20.04 host
VxWorks 6.9

**Additional context**
This is for consistency with other components and to future proof against type changes.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/PSP/pull/201
Update PSP to use osal_id_t type instead of uint32,"**Is your feature request related to a problem? Please describe.**
The `osal_id_t` typedef was recently added to OSAL to differentiate OSAL IDs from simple integers.

**Describe the solution you'd like**
PSP should use this type, instead of `uint32`, for all the places where an ID is stored.

**Additional context**
Using the typedef helps future-proof  the code for possible ID type changes.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/PSP/issues/200
Set thread name on pc-linux,"**Is your feature request related to a problem? Please describe.**
OSAL currently does not inform the OS kernel of the actual thread names, because this is not a standard POSIX feature.   But Linux has this capability and it helps with debugging to see real thread names.

**Describe the solution you'd like**
Use the OSAL callback framework introduced in nasa/osal#541 to set the thread name at the kernel level when using the `pc-linux` PSP.

**Additional context**
Originally suggested in nasa/osal#532

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.

",enhancement,https://github.com/nasa/PSP/issues/199
Add support for vxWorks 7,"**Is your feature request related to a problem? Please describe.**
cFS traditionally has supported vxWorks 6. There are projects interested in using vxWorks 7 with cFS, so support must be added. This requires work in PSP and OSAL.

**Describe the solution you'd like**
An ideal solution is to support both vxWorks 6 and 7 with as little cloning of old vxWorks 6 as possible. On PSP, the current work is to copy mcp750-vxworks for the working platform. (5020) OSAL's goal is to have the vxworks osal support both 6 and 7.

**Describe alternatives you've considered**

**Additional context**

**Requester Info**
Steven Seeger / Embedded Flight Systmes, Inc. / GSFC Code 582
",,https://github.com/nasa/PSP/issues/198
Add support for RTEMS 5.1 - Cmake updates and pc-rtems PSP readme updates,"**Is your feature request related to a problem? Please describe.**
The cFS Bundle currently supports RTEMS 4.11. Now that RTEMS 5.1 has been released, I would like to update the necessary components to support RTEMS 5.1 on the pc-rtems platform. This involves minor modifications to the cfe repository, the PSP repository, and the OSAL repository. These changes can be done in such a way that preserves the current RTEMS 4.11 support and adds RTEMS 5.1 support.

**Describe the solution you'd like**
I would like to add support for RTEMS 5.1 while maintaining compatibility with the existing RTEMS 4.11 support. For the PSP repository there are a few minor changes needed to allow support of RTEMS 5.1 and RTEMS 4.11:
- Minor changes in the PSP cmake/Modules/Platform/RTEMS.cmake file
- changes to the pc-rtems readme and the addition of an RTEMS 5 specific readme

**Describe alternatives you've considered**
Alternatives include:
- Not supporting newer versions of RTEMS, but several projects will depend on RTEMS 5 support.
- Dropping RTEMS 4.11 support and just making the changes needed for RTEMS 5, but there may be projects that depend on RTEMS 4.11. We can consider dropping RTEMS 4.11 support on a future release.

**Additional context**

**Requester Info**
Alan Cudmore / NASA GSFC Code 582
","enhancement, rtems",https://github.com/nasa/PSP/issues/197
Integration Candidate 2020-09-16,"**Describe the contribution**
Fix #187 
Fix #194 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/140/checks

**Expected behavior changes**
PR #191 - Sets the stub config data spacecraft id to historical value 0x42, was 42.

PR #195 - Installs unit test to target directories.

**System(s) tested on**
Ubuntu - CI

**Additional context**
 https://github.com/nasa/cFS/pull/140


**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC

",,https://github.com/nasa/PSP/pull/196
"Fix #194, Install unit test to target directories","**Describe the contribution**
Fix #194, Install unit test to target directories

**Testing performed**
Make unit tests, install, observe they install in correct directory

**Expected behavior changes**
Correct install directory

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: Bundle main + this commit

**Additional context**
None.

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","bug, CCB:FastTrack",https://github.com/nasa/PSP/pull/195
Coverage test not installed in correct directory,"**Describe the bug**
Coverage test not installed in correct directory - see nasa/cfe#881

**To Reproduce**
Make unit tests, make install, observe unit test in build directory.

**Expected behavior**
Should go in target directory (build/exe/cpu1 for sample config)

**Code snips**
https://github.com/nasa/PSP/blob/5f08c5c06b2899d5c7f24b38a7b643595d4c51f9/unit-test-coverage/mcp750-vxworks/CMakeLists.txt#L60-L62

**System observed on:**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/PSP/issues/194
Vxworks7,"**Describe the contribution**
This is changes for vxworks7, built on top of a standalone branch to solve several Wconversion warnings when compiling for the platform.

**Testing performed**
I built it and ran my environment with CF 3.0 on a PPC 5020 with vxWorks 7.

**Expected behavior changes**

None, but this branch suggests some small API typing changes.
**System(s) tested on**
PowerPC 5020 (dual-core 64-bit powerpc)
vxWorks 7

**Additional context**
There were some issues building base stuff with conversion and cast-align issues with the vxworks7 64-bit powerpc toolchain.

**Contributor Info - All information REQUIRED for consideration of pull request**
Steven Seeger, GSFC-582. Embedded Flight Systems, Inc.
",CCB:Ignore,https://github.com/nasa/PSP/pull/193
1.5.x,"**Describe the contribution**
A clear and concise description of what the contribution is.
- Include explicitly what issue it addresses [e.g. Fixes #X]

**Testing performed**
Steps taken to test the contribution:
1. Build steps '...'
1. Execution steps '...'

**Expected behavior changes**
A clear and concise description of how this contribution will change behavior and level of impact.
 - API Change: xxx (if applicable)
 - Behavior Change: xxx (if applicable)
 - Or no impact to behavior

**System(s) tested on**
 - Hardware: [e.g. PC, SP0, MCP750]
 - OS: [e.g. Ubuntu 18.04, RTEMS 4.11, VxWorks 6.9]
 - Versions: [e.g. cFE 6.6, OSAL 4.2, PSP 1.3 for mcp750, any related apps or tools]

**Additional context**
Add any other context about the contribution here.

**Third party code**
If included, identify any third party code and provide text file of license

**Contributor Info - All information REQUIRED for consideration of pull request**
Full name and company/organization/center of all contributors (""Personal"" if individual work)
- If NASA Civil Servant Employee or GSFC Contractor on SES II
  - Address/email/phone and contract/task information (if applicable) must be on file
- Else if Company
  - **HAND SIGNED** Company CLA must be on file (once per release): [Company CLA](https://github.com/nasa/cFE/blob/master/docs/GSC_18128_Corp_CLA_form_1219.pdf)
- Else if Individual
  - **HAND SIGNED** Individual CLA must be on file (once per release): [Individual CLA](https://github.com/nasa/cFE/blob/master/docs/GSC_18128_Ind_CLA_form_1219.pdf)
",invalid,https://github.com/nasa/PSP/pull/192
"Fix #187, Set stub spacecraft ID to historical value (0x42)","**Describe the contribution**
This is the PR copy of #188, just for the main branch (via the integration-candidate branch).

Fix #187 - set the stub config data spacecraft id to historical value 0x42, was 42.

**Testing performed**
Nominal build/test, passed.

**Expected behavior changes**
Anything using the stub config data will now get the default.  The point is really to reduce confusion the mismatch could cause.  Nothing should actually be using this stub data directly.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main (+ cfe/osal main) + this change

**Additional context**
nasa/cfe#828

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/PSP/pull/191
Integration Candidate: 2020-08-26,"**Describe the contribution**
Fix #165 
Fix #185 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/134/checks

**Expected behavior changes**
PR #189 - Adds `CFE_PSP_GetProcessorName`

PR #186 - Removes classic make artifacts

**System(s) tested on**
Ubuntu - CI

**Additional context**
https://github.com/nasa/cFS/pull/134

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC",,https://github.com/nasa/PSP/pull/190
"Fix #165, Add CFE_PSP_GetProcessorName","**Describe the contribution**
Fix #165 - Add CFE_PSP_GetProcessorName

**Testing performed**
Added test code in sample_app to output SC ID, CPU ID, and CPU NAME
Build and ran (pc-linux only), tested with both default options and `./core-cpu1 --cpuid=2 --scid=40 --cpuname=""bleh""`, confirmed expected output

**Expected behavior changes**
Now provides get processor name API

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main (+ cfe/osal main) + this change.

**Additional context**
nasa/cFE#827

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:FastTrack",https://github.com/nasa/PSP/pull/189
"Fix #187, Set stub spacecraft ID to historical value (0x42)","**Describe the contribution**
Fix #187 - set the stub config data spacecraft id to historical value 0x42, was 42.

**Testing performed**
Nominal build/test, passed.

**Expected behavior changes**
Anything using the stub config data will now get the default.  The point is really to reduce confusion the mismatch could cause.  Nothing should actually be using this stub data directly.

**System(s) tested on**
 - Hardware: cFS Dev Server
 - OS: Ubuntu 18.04
 - Versions: bundle main (+ cfe/osal main) + this change

**Additional context**
nasa/cfe#828

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:FastTrack, cFS-Bootes, dependency, backport",https://github.com/nasa/PSP/pull/188
Hardcode of spacecraft id to 42 in psp unit test stub,"**Is your feature request related to a problem? Please describe.**
Likely should be 0x42 since that's the historical sample setting.  Not critical since this is just stub data, but easier to understand intent if the settings are consistent.

**Describe the solution you'd like**
Default spacecraft ID to the historical setting.

**Describe alternatives you've considered**
Some random value, or use CFE_SPACECRAFT_ID_VALUE

**Additional context**
nasa/cfe#710, nasa/cfe#828

**Requester Info**
Jacob Hageman - NASA/GSFC",bug,https://github.com/nasa/PSP/issues/187
"Fix #185, Remove classic make artifacts","**Describe the contribution**
Fix #185 - removes classic make artifacts

**Testing performed**
`make SIMULATION=native ENABLE_UNIT_TESTS=true prep; make; make install; make test` (passed)

**Expected behavior changes**
None, these files are no longer used anywhere

**System(s) tested on**
 - Hardware: cFS Dev server
 - OS: Ubuntu 18.04
 - Versions: Main bundle (main cfe/osal since they weren't in sync) + this change

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved, CCB:FastTrack",https://github.com/nasa/PSP/pull/186
Remove classic make artifacts,"**Is your feature request related to a problem? Please describe.**
Classic make no longer supported, *.mak files not used.
```
$ find ./ -name ""*.mak""
./psp/fsw/mcp750-vxworks/make/compiler-opts.mak
./psp/fsw/mcp750-vxworks/make/link-rules.mak
./psp/fsw/mcp750-vxworks/src/psp.mak
./psp/fsw/pc-linux/make/compiler-opts.mak
./psp/fsw/pc-linux/make/link-rules.mak
./psp/fsw/pc-linux/src/psp.mak
```

**Describe the solution you'd like**
Remove

**Describe alternatives you've considered**
N/A

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/PSP/issues/185
Integration candidate 2020-07-29,"**Describe the contribution**
PR #168 

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/119/checks

**Expected behavior changes**
PR #174 - Provide a new framework and perform PSP coverage tests. New coverage test executable is built and several files within PSP are targeted.

**System(s) tested on**
Ubuntu

**Additional context**
Part of nasa/cfs#119

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/PSP/pull/184
Use a changelog to keep track of changes instead of having them in the Readme ,"**Is your feature request related to a problem? Please describe.**
The version history in the Readme file clutters useful information

**Describe the solution you'd like**
Move the ""version history"" from `Readme.md` to `CHANGELOG.md` and start following this spec: https://keepachangelog.com/en/1.0.0/

**Describe alternatives you've considered**
Move changelog section in the readme to a section at the very bottom of the file

**Additional context**
None

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",enhancement,https://github.com/nasa/PSP/issues/183
"Fix #181, Reverted broken include path change","**Describe the contribution**
Fix #181, broken include paths

**Testing performed**
Build on vxworks host

**Expected behavior changes**
Builds without errors.

**System(s) tested on**
 - cFS vxworks host
 - OS: VxWorks 6.9
 - Versions: bundle /w this change

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",duplicate,https://github.com/nasa/PSP/pull/182
VxWorks build broken - missing include path for net/uio.h,"**Describe the bug**
```
[  1%] Building C object osal/vxworks_impl/CMakeFiles/osal_vxworks_impl.dir/src/os-impl-filesys.c.obj
In file included from /home/jhageman/cFS/cFS-GitHub/osal/src/os/vxworks/src/os-impl-filesys.c:43:
/opt/WindRiver/vxworks-6.9/target/h/ioLib.h:161:21: error: net/uio.h: No such file or directory
```

**To Reproduce**
Steps to reproduce the behavior:
1. Set TGT1_SYSTEM to ppc-vxworks6.9 and try to build for mcp750

**Expected behavior**
Should build

**Code snips**
Old includes: https://github.com/nasa/PSP/blob/fc786c0dfb6449c80f01d05ae742eee558ec15e3/fsw/mcp750-vxworks/make/build_options.cmake#L10-L11

Current: https://github.com/nasa/PSP/blob/3c531af44704bd1863b373b052dbf921e6782efb/fsw/mcp750-vxworks/make/build_options.cmake#L21-L23

**System observed on:**
 - cFS vxworks host
 - OS: building for vxworks6.9
 - Versions: current bundle

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC","bug, dependency",https://github.com/nasa/PSP/issues/181
Add replacement for deprecated OSAL - OS_IntLock and OS_IntUnlock,"**Is your feature request related to a problem? Please describe.**
OS_IntLock and OS_IntUnlock were deprecated from OSAL since there wasn't a platform independent way to implement the actual intent.

**Describe the solution you'd like**
Need a replacement implemented where possible to support the concept of executing a uninterrupted block of code.

**Describe alternatives you've considered**
Non-portable implementation of uninterruptible code?

**Additional context**
Memory manager has a Load Memory with Interrupts Disabled command.  Perhaps operationally could be done differently?

*NOTE* - Priority to come up with a solution to support upcoming MM release.

**Requester Info**
Jacob Hageman - NASA/GSFC",question,https://github.com/nasa/PSP/issues/180
Increase Exception Action choices in PSP Handler,"**Is your feature request related to a problem? Please describe.**
If, during *application development*, a task fails and raises a Kernel exception, the PSP handler can only choose between Processor Reset (zero) or Restart the Application (non-zero value). When that happens, all the information about the exception are lost during the memory reset.

**Describe the solution you'd like**
Add extra options to the Exception Action field in the startup script to “Do nothing” in case of exception, and therefore keep memory intact for task autopsy. Maybe if Exception Action is below zero ignore. 

**Describe alternatives you've considered**


**Additional context**
I can see this easily expanded to handle special cases where we want to recover data from the failed task, or communicate to another task/application this information.

**Requester Info**
Claudio Olmi NASA-JSC
Doyle Mills NASA-JSC
",enhancement,https://github.com/nasa/PSP/issues/179
"Resolve #177, Add baseline and build to version.h","**Describe the contribution**
Resolve #177 

**Testing performed**
Steps taken to test the contribution:
Built on top of current integration candidate
Built with other integration candidates as well as with nasa/osal#532 and nasa/cfe#771

**Expected behavior changes**
New macros defined. No changes on it's own. When combined with nasa/cfe#771 and nasa/osal#532 then startup reporting now looks like 
<img width=""331"" alt=""Screen Shot 2020-07-15 at 8 56 43 AM"" src=""https://user-images.githubusercontent.com/59618057/87557256-ab977000-c685-11ea-893c-a27e54441639.png"">
<img width=""340"" alt=""Screen Shot 2020-07-15 at 8 56 52 AM"" src=""https://user-images.githubusercontent.com/59618057/87557332-c5d14e00-c685-11ea-8fd7-4ad987984e72.png"">
<img width=""208"" alt=""Screen Shot 2020-07-15 at 8 56 35 AM"" src=""https://user-images.githubusercontent.com/59618057/87557452-ebf6ee00-c685-11ea-8914-c4ea6844fde4.png"">


**System(s) tested on**
Docker Ubuntu-based gcc image on OSX

**Additional context**
Also Tested with nasa/osal#532 and nasa/cfe#771

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Gerardo E. Cruz-Ortiz, NASA-GSFC",CCB:FastTrack,https://github.com/nasa/PSP/pull/178
Add Build name and Build number to version.h,"**Is your feature request related to a problem? Please describe.**
Need a better way to describe versions during development

**Describe the solution you'd like**
Add Build name and Build number to version.h
As discussed, we will add a a build name string and a continuously incrementing build number to `version.h`

**Additional context**
See notes from CCB: <https://github.com/nasa/cFS/wiki/Community-CCB-Agenda:-July-01-2020>

**Requester Info**
Gerardo E. Cruz-Ortiz, NASA-GSFC
",enhancement,https://github.com/nasa/PSP/issues/177
Integration Candidate: 2020-06-24,"**Describe the contribution**
Fix #169

**Testing performed**
Bundle CI - https://github.com/nasa/cFS/pull/108/checks

**Expected behavior changes**
PR #172 - Restructure code to make more amicable for rebuilding in a unit test environment. No major changes, primarily just shifting code between locations/headers to support unit testing.

PR #178  -  Adds a char element `Version` to `CFE_PSP_VersionInfo_t`. Defines new macros for the Build Number and the Build Baseline. 

**System(s) tested on**
Ubuntu - CI

**Additional context**
Part of https://github.com/nasa/cFS/pull/108

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
 Gerardo E. Cruz-Ortiz, NASA-GSFC
 Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/PSP/pull/176
Integration Candidate: 2020-06-10,"**Describe the contribution**
 Fix #170

**Testing performed**
Bundle CI: https://github.com/nasa/cFS/pull/102/checks

**Expected behavior changes**
PR #173 -  Store the size of the stored data into the exception record on mcp750-vxworks platform.

**System(s) tested on**
Ubuntu:Bionic

**Additional context**
part of nasa/cfs#102

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/PSP/pull/175
"Fix #168, PSP coverage unit test","**Describe the contribution**
Add a framework and example for coverage test of the PSP code.

Fix #168

**Testing performed**
Build and run unit test
Build and sanity check CFE (no changes to FSW)

**Expected behavior changes**
New PSP coverage test executable is built, and several files within PSP are targeted.

**System(s) tested on**
Ubuntu 20.04

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/PSP/pull/174
"Fix #170, set exception context size","**Describe the contribution**
Store the size of the stored data into the exception record on mcp750-vxworks platform.

Fixes #170 

**Testing performed**
Build and sanity test CFE.
Unit testing via PSP coverage tests (separately in issue #168)

**Expected behavior changes**
The exception context stored on MCP750 has a valid size.

**System(s) tested on**
Ubuntu 20.04 running coverage tests for MCP750.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/PSP/pull/173
"Fix #169, make separate targets for PSP","**Describe the contribution**
Restructure code to make more amicable for rebuilding in a unit test environment. No major changes, primarily just shifting code between locations/headers to support unit testing.

Fixes #169 

**Testing performed**
Build and sanity check CFE on RTEMS and Linux
Run all unit tests and confirm passing.

**Expected behavior changes**
No impact to behavior.

**System(s) tested on**
Ubuntu 20.04
RTEMS 4.11.3 via QEMU/pc686

**Additional context**
Makes the code structure better for unit testing.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/PSP/pull/172
MCP750 should set up a timebase like other PSPs do,"**Is your feature request related to a problem? Please describe.**
MCP750 currently uses a (Very inaccurate) infinite loop with an `OS_TaskDelay()` to mimic a 1Hz callback.  This is inaccurate as it drifts over time and not the best way to create a 1Hz tick.

**Describe the solution you'd like**
In pc-linux and pc-rtems this just sets up a timebase object so CFE_TIME (or anything else) can register their own 1Hz timer and have it by synchronized to the PSP Time source.  Recommend to use this on MCP750 too.

**Additional context**
Infinite loops with no exit condition are also bad for unit testing.

This code to set up a PSP timebase using kernel timer could be modularized, as the implementation is already abstracted in OSAL.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, mcp750",https://github.com/nasa/PSP/issues/171
MCP750 needs to set context size on exception handling,"**Describe the bug**
MCP750 is not storing the context size, which results in the size being 0 and therefore no extended data is saved to the log file even though its in memory.

**To Reproduce**
Found in unit testing with new PSP coverage tests (not yet merged)

**Expected behavior**
The `CFE_PSP_ExceptionHook` function should set the `context_size` field to the amount of data it has actually stored in the buffer.  This is then used later if a file dump is requested to write the exception data to a file.

**System observed on:**
Ubuntu 20.04 running PSP coverage tests.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.

",bug,https://github.com/nasa/PSP/issues/170
Build PSP components as a separate targets,"**Is your feature request related to a problem? Please describe.**
As part of coverage testing that is being introduced in #168, it will require rebuilding the PSP code more than once, to make a variant that include coverage instrumentation.  This requires a bit of restructuring to support.

**Describe the solution you'd like**
Build components (e.g. shared directory) as separate targets so they can be added more than once with different configurations.
Define all target names using a separate re-definable string such as `${CFE_PSP_TARGETNAME}` rather than `${CFE_SYSTEM_PSPNAME}` to avoid target name conflicts.

**Additional context**
Prerequisite to #168, isolated to separate issue because it affects FSW headers and build scripts, not just unit test, and therefore warrants separate review.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/PSP/issues/169
Create PSP unit test framework and example,"**Is your feature request related to a problem? Please describe.**
Need to provide example of PSP unit tests.  Coverage and functional testing are required but require a different approach.  This issue will focus on the coverage test portion.

**Describe the solution you'd like**
Provide a framework and example to perform PSP coverage test.

**Additional context**
Using MCP750 as a proof-of-concept.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, unit-test",https://github.com/nasa/PSP/issues/168
Integration Candidate: 2020-05-27,"**Describe the contribution**
Fix #162 

**Testing performed**
https://github.com/nasa/cFS/pull/96/checks

**Expected behavior changes**
PR #164 - This changes the PSP reference to be compatible with the change in nasa/osal#449 making the BSP modules more generic and changes the name. 

**System(s) tested on**
Ubuntu:Bionic

**Additional context**
Part of nasa/cfs#96

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/PSP/pull/167
Integration candidate: 2020-05-20,"**Describe the contribution**
Fix #161 

**Testing performed**
Bundle CI - https://travis-ci.com/github/nasa/cFS/builds/168822512

**Expected behavior changes**
PR #163 - Replace 'OS_VolumeTable' with `OS_FileSysAddFixedMap()` in all PSPs.

**System(s) tested on**
Ubuntu Bionic

**Additional context**
Part of nasa/cFS#91

**Contributor Info - All information REQUIRED for consideration of pull request**
 Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/PSP/pull/166
Add CFE_PSP_GetProcessorName() API,"**Is your feature request related to a problem? Please describe.**
The build configuration specifies a spacecraft ID, CPU/Processor ID, and a CPU/Processor Name, but the PSP API only gives runtime access to two of the three:

```
uint32 CFE_PSP_GetSpacecraftId   (void)
uint32 CFE_PSP_GetProcessorId    (void)
```


**Describe the solution you'd like**
Should add:
```
const char *CFE_PSP_GetProcessorName    (void)
```

**Describe alternatives you've considered**
Continue to offer incomplete information from PSP API.

**Additional context**
related to nasa/cfe#710

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/PSP/issues/165
"Fix #162, reference generic OSAL BSP","**Describe the contribution**
The change in nasa/osal#449 makes the BSP modules more generic and changes the name.  This changes the PSP reference to be compatible.

**Testing performed**
Build for all platforms and sanity check CFE operation

**Expected behavior changes**
No change to behavior.

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 on pc686 / QEMU
VxWorks 6.9 on MCP750

**Additional context**
Makes build compatible with nasa/osal#449

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.","enhancement, CCB:Approved",https://github.com/nasa/PSP/pull/164
"Fix #161, remove OS_VolumeTable","**Describe the contribution**
Removes all references to the OS_VolumeTable in all PSPs.

Replace with call to OS_FileSysAddFixedMap() for the FS_BASED entries.  Other types are already handled at runtime anyway.

Fix #161 

**Testing performed**
Build and sanity check CFE on all supported platforms (vxworks, linux, rtems)

**Expected behavior changes**
No impact to behavior.  

**System(s) tested on**
Ubuntu 20.04 (native)
RTEMS 4.11 on pc686 / QEMU
VxWorks 6.9 on MCP750

**Additional context**
Makes code compatible wtih nasa/osal#367 which deprecates the OS_VolumeTable

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","enhancement, CCB:Approved",https://github.com/nasa/PSP/pull/163
Reference the generic OSAL BSPs,"**Is your feature request related to a problem? Please describe.**
Recent OSAL changes make the BSP layer more generic for VxWorks and Linux.  In nasa/osal#449 this changes the name from mcp750-vxworks to generic-vxworks, and from pc-linux to generic-linux, respectively.

**Describe the solution you'd like**
Change the PSP references to match the OSAL BSP name.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/PSP/issues/162
Deprecate definition/use of OS_VolumeTable,"**Is your feature request related to a problem? Please describe.**
OSAL has an API where volume table mappings can be added during the startup code, rendering the static `OS_VolumeTable` object unnecessary.

**Describe the solution you'd like**
Use the OSAL API to register the FS_BASED file system mappings, and remove OS_VolumeTable.

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/PSP/issues/161
Integration Candidate COMBINED 2020-04-29 and 2020-05-06,"**Describe the contribution**
Fixes #156 ans #158

**Testing performed**
See PRs
Bundle CI - https://travis-ci.com/github/nasa/cFS/builds/165726730

**Expected behavior changes**
PR #157 - Removes non-termination string warnings when building with GCC9.

PR #159 - Exception handling is now implemented on POSIX. There is no longer a separate handler for SIGINT - it is now treated as an exception and goes through the normal process which ends up ""restarting"" CFE. On pc-linux causes the process to exit normally. There is now a mechanism to capture the CTRL+C exception code and use it during normal test cycles. 

**System(s) tested on**
See PRs

**Additional context**
Part of nasa/cfs#83


**Contributor Info - All information REQUIRED for consideration of pull request**
 Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/PSP/pull/160
"Fix #158, Implement exception storage in PSP","**Describe the contribution**
Implements exception capture and storage within the PSP.
Provides a new API so that CFE can poll for exceptions at a later time and also record the information in the ER log.

**Testing performed**
Add a divide by zero ""bug"" to sample_app
Confirm that the PSP captures the exception context correctly and it is later logged by CFE
Confirm SIGINT, SIGQUIT, and SIGTERM are appropriately handled on POSIX

**Expected behavior changes**
Exception handling is now implemented on POSIX.  The initial config will capture arithmetic errors (SIGFPE) as well as SIGINT and SIGTERM.  The latter is notable in that there is no longer a separate handler for SIGINT - it is now treated as an exception and goes through the normal process which ends up ""restarting"" CFE, which on pc-linux causes the process to exit normally.  

Importantly, as CTRL+C is frequently used during testing, this means that there is now a mechanism through which the exception code will get used during normal test cycles.  Otherwise the code is very infrequently used and could suffer from bit-rot.

**System(s) tested on**
Ubuntu 20.04 LTS 
VxWorks 6.9 on MCP750
i686-rtems4.11 (pc-rtems) on  QEMU (no exception handling here, just tested to ensure nothing broke)

**Additional context**
Goes along with nasa/cfe#411, nasa/cfe#76

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",,https://github.com/nasa/PSP/pull/159
Implement exception logging/capture in PSP,"**Is your feature request related to a problem? Please describe.**
Exception handling in CFE is not possible due to race conditions and differences between platforms, so the PSP needs to take a greater role in handling these events.

**Describe the solution you'd like**
PSP should capture exception contexts locally, and provide a more abstract API for CFE to poll and retrieve them rather than pushing direct.

**Additional context**
Related to nasa/cfe#411, nasa/cfe#76

**Requester Info**
Joseph Hickey, Vantage Systems, Inc.
",enhancement,https://github.com/nasa/PSP/issues/158
"Fix #156, termination on strncpy","**Describe the contribution**
Fix possible non-termination of strings in command line option parsing.
These generated warnings in GCC9.

Fixes #156 

**Testing performed**
Build code with default config, SIMULATION=native BUILDTYPE=release on GCC 9.3.0.
Confirm successful build with no warning.

**Expected behavior changes**
No impact to behavior

**System(s) tested on**
Ubuntu 20.04 LTS 64 bit

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","bug, CCB:Approved",https://github.com/nasa/PSP/pull/157
Many string truncation warnings with newer GCC,"**Describe the bug**
Ubuntu has released 20.04 LTS which includes GCC 9.3.0.  When using this compiler it implements a much stricter (and often over-zealous) checking of string ops.

For instance: 
```
In file included from /usr/include/string.h:495,
                 from /home/joe/code/cfecfs/github/psp/fsw/pc-linux/src/cfe_psp_start.c:37:
In function ‘strncpy’,
    inlined from ‘CFE_PSP_ProcessArgumentDefaults’ at /home/joe/code/cfecfs/github/psp/fsw/pc-linux/src/cfe_psp_start.c:524:7:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: error: ‘__builtin_strncpy’ specified bound 32 equals destination size [-Werror=stringop-truncation]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

**To Reproduce**
Build code with default config using GCC 9.3.0, with optimization enabled and full warnings.

**Expected behavior**
Code should build cleanly.

**System observed on:**
Ubuntu 20.04 LTS 64 bit.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/PSP/issues/156
Integration Candidate 2020-04-15,"**Describe the contribution**
Fixes #150 and #76 

**Testing performed**
Bundle CI: https://travis-ci.com/github/nasa/cFS/builds/162280689
See PRs

**Expected behavior changes**

1. PR #147 - Slightly slower calculation of microsecond conversiondepending on hardware, but exact (to the resolution provided) conversion
2. PR #152 - Changes to documentation only 

**System(s) tested on**
Bundle CI - Ubuntu:Bionic
See PRs

**Additional Context**
Part of https://github.com/nasa/cFS/pull/70

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
Leor Bleier, NASA-GSFC",,https://github.com/nasa/PSP/pull/155
Inconsistent default CPU ID/Spacecraft ID between PC-Linux and other platforms,"**Describe the bug**
The CPU ID/Spacecraft ID on Linux differs from the VxWorks build due to the Linux build deriving the value from the targets.cmake and other platforms deriving it from the value of [target name]_platform_cfg.h and [mission name]_mission_cfg.h

**To Reproduce**
Set CFE_MISSION_SPACECRAFT_ID in [mission name]_mission_cfg.h different than SPACECRAFT_ID in targets.cmake. Do same for CFE_PLATFORM_CPU_ID and the <x> value in TGT<x>. Build for Linux and a VxWorks target. CPU IDs will be different  when attempting to run SBN

**Expected behavior**
The same default CPU IDs should show up across both platforms.

**Code snips**
It appears this is due to the Linux PSP using GLOBAL_CONFIGDATA in CFE's target_config.c and the other platforms using CFE_MISSION_SPACECRAFT_ID and CFE_PLATFORM_CPU_ID  directly. 

**System observed on:**
 - OS: [e.g. Linux 4.4]
 - Versions cFE 6.7.12 , PSP 1.4 for mcp750, Linux, sp0

**Additional context**
Add any other context about the problem here.

**Reporter Info**
John Pham, Northrop Grumman
",enhancement,https://github.com/nasa/PSP/issues/154
Integration Candidate: 2020-04-08,"**Describe the contribution**
Fixes #145, #135, and #121 

See Bundle IC at https://github.com/nasa/cFS/pull/66

**Testing performed**
See PRs,
Bundle CI - https://travis-ci.com/github/nasa/cFS/builds/160607248

**Expected behavior changes**
PR #146 RTEMS builds successfully without errors
PR #148 Build script uses a proper CMakeLists.txt instead of the aux_source directory
PR #149 Code structure/linking change only.

**System(s) tested on**
See PRs
Bundle CI

**Contributor Info - All information REQUIRED for consideration of pull request**
 Joseph Hickey, Vantage Systems, Inc.
Gerardo E. Cruz-Ortiz, NASA-GSFC
",,https://github.com/nasa/PSP/pull/153
"Fix #150, update doxygen comments to fix warnings","**Describe the contribution**
Fixes #150
Resolve doxygen warnings

**Testing performed**
Steps taken to test the contribution:
1. Corrected lines that generated warnings
2. Rebuilt documentation with `make doc`
3. Observed no warnings generated
4. Viewed relevant page(s) to verify correctness

**Expected behavior changes**
Changes to documentation only; no code impact

**Contributor Info - All information REQUIRED for consideration of pull request**
Leor Bleier, NASA\GSFC
","CCB:Approved, docs",https://github.com/nasa/PSP/pull/152
Integration Candidate 2020-04-01,"**Describe the contribution**
Integration Candidate
Fixes #143 

**Testing performed**
See PR #144 
Bundle CI - https://github.com/nasa/cFS/pull/64
Test Log: https://travis-ci.com/github/nasa/cFS/builds/159710339

**Expected behavior changes**
No Travis CI configuration warnings

**System(s) tested on**
Bundle CI - Ubuntu:Bionice


**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman, NASA-GSFC
Gerardo E. Cruz-Ortiz, NASA-GSFC",,https://github.com/nasa/PSP/pull/151
Fix doxygen warnings,"**Describe the bug**
Warnings are generated when compiling the documentation

**To Reproduce**
1. Build documentation using `make doc`
2. Observe warnings in `cFS/build/doc/warnings.log`

**Expected behavior**
No warnings should be generated

**Reporter Info**
Leor Bleier, GSFC\582
","bug, docs",https://github.com/nasa/PSP/issues/150
"Fix #121, Unify CFE PSP with OSAL BSP","**Describe the contribution**
Instead of redefining the basic entry point symbols, use the OSAL BSP and its abstractions.  The CFE PSP just becomes an extension to the OSAL BSP, and only needs to define the OS_Application_Startup symbol like any other OSAL application.

Fixes #121 

**Testing performed**
Build code for all supported targets (ppc-vxworks6.9, i686-rtems4.11, native/x86-64 linux). Verify clean build. Confirm CFE boots and responds to commands as normal for RTEMS and native linux targets.

**Expected behavior changes**
No behavior changes.  Code structure/linking change only.

**System(s) tested on**
Ubuntu 18.04 LTS 64 bit (native, build host)
QEMU for RTEMS 4.11

**Additional context**
VxWorks testing pending on availability of test platform

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/PSP/pull/149
"Fix #135, Add separate CMakeLists.txt for each implementation","**Describe the contribution**
Do not use aux_source_directory to assemble a list of source files. Instead, put a proper CMakeLists.txt file in each implementation and build the implementation separately from the shared/common parts.

In addition to avoiding the aux_source_directory this allows PSP-specific compile definitions to be set on a per-implementation basis because it is defined separately.

Fixes #135 

**Testing performed**
Build code for all supported targets (ppc-vxworks6.9, i686-rtems4.11, native/x86-64 linux).  Verify clean build.  Confirm CFE boots and responds to commands as normal.

**Expected behavior changes**
No impact to behavior - changes build script only.

**System(s) tested on**
Ubuntu 18.04 LTS 64-bit + GSFC vxworks build machine

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.",CCB:Approved,https://github.com/nasa/PSP/pull/148
"Fix #76, Microsec conversion lost resolution","**Describe the contribution**
Full precision conversion implemented, and documented options for speed
Fix #76

**Testing performed**
Steps taken to test the contribution:
1. CI - https://travis-ci.com/github/skliper/cFS/builds/158006610

**Expected behavior changes**
Slightly slower calculation depending on hardware, but exact (to the resolution provided) conversion

**System(s) tested on**
 - Hardware: AMD
 - OS: Ubuntu 18.04
 - Versions: bundle w/ this change

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/PSP/pull/147
"Fix #145, Update RTEMS CMake module","**Describe the contribution**
Addresses various compatibility/usability issues observed during testing

- Correctly set/export the CMAKE_EXE_EXPORTS_C_FLAG
- Incorporate the system specs directly into the COMPILE_OBJECT templates
  so these don't need to be specified by the toolchain or CMAKE_C_FLAGS
- Similarly include the always-needed linker flags flags for entry point
  and relocation address into the linker command template

Fixes #145

**Testing performed**
Build for i686-rtems4.11 (in combination with nasa/cfe#573).
Execute CFE and perform basic sanity check (boots, accepts cmd msgs)

**Expected behavior changes**
RTEMS builds successfully without errors

**System(s) tested on**
Ubuntu 18.04 LTS 64 bit build host with cross tools for RTEMS 4.11.3/pc686 built according to README.

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
",CCB:Approved,https://github.com/nasa/PSP/pull/146
RTEMS CMake module does not define all required outputs,"**Describe the bug**
When building with CFE, this ultimately triggers a (seemingly) unrelated error:
```
i386-rtems4.11-gcc: error: unrecognized command line option '--whole-archive'
i386-rtems4.11-gcc: error: unrecognized command line option '--no-whole-archive'
```

**To Reproduce**
Build software for i686-rtems4.11 per README instructions and example toolchain

**Expected behavior**
Build should succeed without warnings or errors

**System observed on:**
Ubuntu 18.04 LTS 64-bit (build host) building for i686-rtems4.11 

**Additional context**
This regression was introduced when CFE added logic to inspect the variable `CMAKE_EXE_EXPORTS_C_FLAG` and use the same flags for the `--[no-]whole-archive` option on the link line.    Normally `CMAKE_EXE_EXPORTS_C_FLAG` is exported by the platform module, but not in the locally-provided RTEMS module.

RTEMS uses the compiler to perform linking (gcc) and as such it needs the `-Wl,` prefix.  It may also benefit from `--export-dynamic` anyway so it is a good idea to include this.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/PSP/issues/145
"Fix #143, Resolve CI config warnings","**Describe the contribution**
Resolves CI configuration warnings
Fix #143 

**Testing performed**
Steps taken to test the contribution:
1. CI (CI change only)

**Expected behavior changes**
No Travis CI configuration warnings

**System(s) tested on**
 - Hardware: CI
 - OS: Ubuntu 18.04
 - Versions: this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/PSP/pull/144
Fix travis-CI config warnings,"**Is your feature request related to a problem? Please describe.**
Build config validation (from travis-CI) -
root: deprecated key sudo (The key `sudo` has no effect anymore.)
language: unexpected sequence, using the first value (c)
root: missing os, using the default linux

**Describe the solution you'd like**
See https://github.com/nasa/ci_lab/commit/6cf5a57f5995710345b2a5411d11af2b2d7f80ee

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC","enhancement, continuous-integration",https://github.com/nasa/PSP/issues/143
Integration Candidate - 20200311,"**Describe the contribution**
Fix #139 

**Testing performed**
See PR #140 
Integrated IC testing on cfs repo, see https://github.com/nasa/cFS/pull/57

**Expected behavior changes**
Build for MCP750 using default config and procedure, confirm warnings are fixed (others still exist in other modules, however).

**System(s) tested on**
 - CI - Ubuntu: Bionic

**Additional context**
See PR #140

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA GSFC
Gerardo E. Cruz-Ortiz - NASA GSFC",,https://github.com/nasa/PSP/pull/142
IC - 20200304,"**Describe the contribution**
Integration Candidate  20200304
Fixes #136 

See PR #137 for details

**Testing performed**
CI Only

**Expected behavior changes**
See PR #137 

**System(s) tested on**
See PR #137 

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC
Gerardo E. Cruz-Ortiz - NASA/GSFC",,https://github.com/nasa/PSP/pull/141
"Fix #139, compiler warnings on mcp750 PSP","**Describe the contribution**

Fix #139

Patches for the MCP750 PSP to avoid some compiler warnings that show up when building with strict flags.

**Testing performed**
Build for MCP750 using default config and procedure, confirm warnings are fixed (others still exist in other modules, however).

**Expected behavior changes**
No impact to behavior.  Only fixes warnings.

**System(s) tested on**
 - GSFC build host (gs582w-cfelnx)

**Contributor Info - All information REQUIRED for consideration of pull request**
Joseph Hickey, Vantage Systems, Inc.
","bug, CCB:Approved",https://github.com/nasa/PSP/pull/140
MCP750 PSP fails to build,"**Describe the bug**

Building the current ""master"" branch for mcp750 yields the following build error:
```
/home/jphickey/cfecfs/github/psp/fsw/mcp750-vxworks/src/cfe_psp_memory.c: In function 'CFE_PSP_GetCFETextSegmentInfo':
/home/jphickey/cfecfs/github/psp/fsw/mcp750-vxworks/src/cfe_psp_memory.c:426: error: passing argument 1 of 'moduleFindByName' discards qualifiers from pointer target type
```

**To Reproduce**
Build ""master"" using standard procedure and default config.

**Expected behavior**
Build should succeed.

**System observed on:**
 - GSFC MCP750 build machine (gs582w-cfelnx)

**Additional context**
This is an error now due to the inclusion of `-Wall -Werror` in the default build.

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",bug,https://github.com/nasa/PSP/issues/139
IC - 20200226,"Describe the contribution
Fix #66 

Testing performed
Steps taken to test the contribution:

    Current CI passes
    Test 4 in Enhanced CI in https://github.com/nasa/cFS/pull/40

Expected behavior changes
PR #116  - simplifies array handling in 'fsw/mcp750-vxworks/src/cfe_psp_memory.c'

System(s) tested on
    CI: Ubuntu 18.04

Additional context
N/A

Third party code
N/A

Contributor Info - All information REQUIRED for consideration of pull request
Gerardo E. Cruz-Ortiz - NASA/GSFC",CCB:Approved,https://github.com/nasa/PSP/pull/138
"Fix #136, Remove local mcp750 header file","**Describe the contribution**
Removed in favor of using cross-compiler provided header
Fix #136 

**Testing performed**
Steps taken to test the contribution:
1. Diff'ed local file with cross-compiler version and they were identical
1. Switched to ppc-vxworks6.9 toolchain and built with cross compiler, no issues

**Expected behavior changes**
None

**System(s) tested on**
 - Hardware: cFS cross-compiler PC
 - OS: Linux 2.6
 - Versions: master bundle w/ this commit

**Additional context**
None

**Third party code**
None

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC","enhancement, CCB:Approved",https://github.com/nasa/PSP/pull/137
Remove mcpx750.h,"**Is your feature request related to a problem? Please describe.**
mcpx750.h doesn't belong in open source release.

**Describe the solution you'd like**
Remove file, real version gets picked up as part of include path for this platform cross-compiler toolset.

**Describe alternatives you've considered**
None

**Additional context**
None

**Requester Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/PSP/issues/136
Implement psps without relying on aux_source_directory,"**Is your feature request related to a problem? Please describe.**
The CMake documentation presents the following caveat for `aux_source_directory`:

> It is tempting to use this command to avoid writing the list of source files for a library or executable target. While this seems to work, there is no way for CMake to generate a build system that knows when a new source file has been added.


**Describe the solution you'd like**
The targets should have a list of files that go into making the specific psps. 

**Requester Info**
Andrei Zisu of Planetary Transportation Systems (Berlin, Germany).
",build-system,https://github.com/nasa/PSP/issues/135
Allow out-of-tree psp paths,"**Is your feature request related to a problem? Please describe.**
Requiring a PSP to always be defined inside the PSP repository means holding a set of patches on top of the upstream version. This adds friction when updating to latest version.

**Describe the solution you'd like**
At least initially, `CFE_SYSTEM_PSPPATH` should be introduced. It should be configurable and it should allow arbitrary paths to PSP files. 
",enhancement,https://github.com/nasa/PSP/issues/134
Fix #134: Abstract out path to CFE_SYSTEM_PSPPATH,"**Describe the contribution**
This change allows us to move custom PSPs out of tree, so that we don't have to keep a set of patches on top of upstream PSP code.

Future forseeable changes:
- A better, although more involved, solution might involve pulling the shared files in their own library, `psp-shared`, and allowing custom PSPs to be defined entirely out of tree while depending on `psp-shared` as a library. 
- Using targets more extensively would also allow the elegant use of `target_include_directories` with `PRIVATE`, `PUBLIC` and `INTERFACE` descriptors.
- Making the build system less reliant on `aux_source_directory`. The CMake documentation presents the following caveat:
> It is tempting to use this command to avoid writing the list of source files for a library or executable target. While this seems to work, there is no way for CMake to generate a build system that knows when a new source file has been added.

**Testing performed**
Build of the sample cFS configuration.

**Expected behavior changes**
`CFE_SYSTEM_PSPPATH` is introduced as a configuration variable in the build system. If not specified, it will fallback to previous behavior.

**System(s) tested on**
 - PC, Ubuntu 19.04
- current cFS master

**Contributor Info**
Andrei-Costin Zisu of Planetary Transportation Systems GmbH (Berlin, Germany). Company-wide CLA is being signed and will be sent soon.","invalid, conflicts",https://github.com/nasa/PSP/pull/133
Integration Candidate 20200121,"**Describe the contribution**
Fix #128

**Testing performed**
Steps taken to test the contribution:
1. Current CI passes
1. Enhanced CI in #40 passes debug/with deprecated elements testing

**Expected behavior changes**
Resolved warnings

**System(s) tested on**
 - CI: Ubuntu 18.04, IC bundle

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/PSP/pull/132
"Deprecated multiple ""success"" code responses","**Is your feature request related to a problem? Please describe.**
API's with multiple ""success"" codes are frequently mishandled

**Describe the solution you'd like**
Single success response, unique information should be passed back in parameters

**Describe alternatives you've considered**
N/A

**Additional context**
N/A

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/PSP/issues/131
Integration Candidate 20200108,"**Describe the contribution**
Merge #123
Fix #122

**Testing performed**
1. Checked out IC bundle
1. Built and ran cFS unit tests and OSAL coverage (vxworks and shared)
   1. All passed
1. make osalguide to confirm it built
1. Ran core-cpu1 (cFS), no errors/warnings/failures observed

**Expected behavior changes**
None - cppcheck error cleanup

**System(s) tested on**
 - cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: IC branches

**Additional context**
N/A

**Third party code**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",CCB:Approved,https://github.com/nasa/PSP/pull/130
Do not directly use a literal for char* members,"**Describe the contribution**

Fix #128

Instead of directly using a literal, declare a static `char[]` variable with the string and use that instead.  This resolves a warning.

**Testing performed**
Build for PC-RTEMS (i686-rtems4.11) and confirm warning is no longer triggered.  Execute CFE using QEMU and confirm that network is functioning normally.

**Expected behavior changes**
No impact to behavior

**System(s) tested on:**
Ubuntu 18.04 build host, i686-rtems4.11 target using pc-rtems PSP.

**Contributor Info**
Joseph Hickey, Vantage Systems, Inc.

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/PSP/pull/129
RTEMS PSP using string literal for non-const char*,"**Describe the bug**
When setting up the network driver, the PC-RTEMS PSP is using string literals to assign `char*` data types.  This triggers a warning when compiling with strict warnings.

**To Reproduce**
Build for PC-RTEMS using strict compiler settings, including `-Wwrite-strings`.  Warnings are generated in `cfe_psp_start.c`.

**Expected behavior**
Should build cleanly.

**System observed on:**
Ubuntu 18.04 LTS 64-bit, building for i686-rtems 4.11 (pc-rtems)

**Reporter Info**
Joseph Hickey, Vantage Systems, Inc.
",,https://github.com/nasa/PSP/issues/128
Integration Candidate 20191230,"**Describe the contribution**
Fix #117, Fix #119

**Testing performed**
1. Checked out all IC 20191230 branches
1. Built and ran cFS unit tests and OSAL coverage (vxworks and shared)
   1. All passed (although osal_timer_UT occasionally still fails due to a test issue)
1. Make cmdUtils where cFS-GroundSystem expects it
   1. cd tools/cFS-GroundSystem/Subsystems/cmdUtil
   1. make
1. Started Ground system
   1. python3 GroundSystem.py
1. Enabled commands to 127.0.0.1
1. Confirmed telemetry packets received
1. Sent ES and TIME noop commands, confirmed noop message from cFS on Port 1
1. Sent ES power on reset and observed cFS exit

**Expected behavior changes**
See related pull requests

**System(s) tested on**
 - cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: ic-20191230 branches

**Additional context**
N/A

**Contributor Info - All information REQUIRED for consideration of pull request**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/PSP/pull/127
recommended lgtm issues:,"**Is your feature request related to a problem? Please describe.**
Recommended issue from lgtm:

cfe_psp_module.h
```
typedef enum
--
37 | {
  | In an enumerator list, the = construct should not be used to explicitly initialize members other than the first, unless all items are explicitly initialized.
38 | CFE_PSP_MODULE_TYPE_INVALID = 0,
39 | CFE_PSP_MODULE_TYPE_VALID_RANGE  = 1000,
```

",refactor,https://github.com/nasa/PSP/issues/126
"Fix #124, Release Prep","**Describe the contribution**
Fix #12
 - Updated README
 - removed custom license document
 - added standard Apache 2.0
 - Updated copyright release version cFE 6.6 -> 6.7

**Testing performed**
1. Standard build, unit test and execute

**Expected behavior changes**
 - No impact to behavior

**System(s) tested on:**
 - Hardware: cFS Dev Server 2
 - OS: Ubuntu 18.04
 - Versions: cFE 6.7.0 related versions and OSAL 5.0.0

**Contributor Info**
Jacob Hageman - NASA/GSFC",enhancement,https://github.com/nasa/PSP/pull/125
Release Prep,"**Is your feature request related to a problem? Please describe.**
Updates for release:
- Updated README
- removed custom license document
- added standard Apache 2.0
- Updated copyright release version cFE 6.6 -> 6.7

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/PSP/issues/124
"#122, fix lgtm issue","**Describe the contribution**
fix lgtm issue. 

**Testing performed**
Steps taken to test the contribution:
1. make prep
2. make
3. make install
4. verify still run.
5. Mock pull request on dummy repository
6. Verify lgtm indicates issue has been resolve. 


**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
 - CFE 6.6

**Contributor Info**
Anh Van, NASA Goddard

",CCB:Approved,https://github.com/nasa/PSP/pull/123
 Parameter CommandData hides a global variable with the same name. [lgtm],"**Describe the bug**

cfe_psp_start.c
```
void CFE_PSP_ProcessArgumentDefaults(CFE_PSP_CommandData_t *CommandData)
--
  | Parameter CommandData hides a global variable with the same name.
```

**To Reproduce**
Steps to reproduce the behavior:
1. build against lgtm

**Reporter Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/PSP/issues/122
Improve consistency and reduce duplication in PSP BSP implementation,"**Is your feature request related to a problem? Please describe.**
See https://github.com/nasa/osal/issues/261, where this ticket is to address item 3 to reduce code duplication in the PSP's.

**Describe the solution you'd like**
The CFE PSP should be an extension of the OSAL BSP, not a replacement for it. The PSP already defines a CFE_PSP_Main() entry point for itself, and this can be invoked as a second-stage after OS_Application_Startup to do the additional startup tasks required for CFE.

**Requester Info**
Jacob Hageman - NASA/GSFC
",enhancement,https://github.com/nasa/PSP/issues/121
"issue #119, adding travis.yml for cppcheck on flight","**Describe the contribution**
Adding travis.yml for cppcheck on psp/fsw

**Contributor Info**
Anh Van, NASA Goddard

",CCB:Approved,https://github.com/nasa/PSP/pull/120
Add travis.yml for cppcheck on psp/fsw,"**Is your feature request related to a problem? Please describe.**
Add cppcheck for fsw

**Requester Info**
Anh Van, NASA Goddard
","enhancement, continuous-integration",https://github.com/nasa/PSP/issues/119
"issue #117, Resolved cppcheck warning","**Describe the contribution**
Resolve PSP cpp check warning

**Testing performed**
Steps taken to test the contribution:
1. cppcheck --force --inline-suppr --std=c99 --language=c --error-exitcode=1 --enable=warning,performance,portability,style  --inconclusive psp/fsw 2>psp.txt

2. Verify warning is gone
3. make prep
4. make 
5. make install
6. verify cfs still runs. 

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
 - CFS 6.6


**Contributor Info**
Anh Van, NASA Goddard

",CCB:Approved,https://github.com/nasa/PSP/pull/118
PSP cppcheck warning stricter flag,"**Is your feature request related to a problem? Please describe.**
[psp/fsw/mcp750-vxworks/src/cfe_psp_exception.c:90] -> 
[psp/fsw/mcp750-vxworks/src/cfe_psp_exception.c:136]: (style, inconclusive) Function 'CFE_PSP_ExceptionHook' argument 3 names different: declaration 'pEsf' definition 'vpEsf'.
[psp/fsw/pc-linux/src/cfe_psp_memory.c:679] -> 
[psp/fsw/pc-linux/src/cfe_psp_memory.c:680]: (style) Variable 'return_code' is reassigned a value before the old one has been used.
[psp/fsw/pc-linux/src/cfe_psp_memory.c:680] -> 
[psp/fsw/pc-linux/src/cfe_psp_memory.c:681]: (style) Variable 'return_code' is reassigned a value before the old one has been used.
[psp/fsw/pc-linux/src/cfe_psp_memory.c:681] -> 
[psp/fsw/pc-linux/src/cfe_psp_memory.c:682]: (style) Variable 'return_code' is reassigned a value before the old one has been used.
[psp/fsw/pc-linux/src/cfe_psp_memory.c:686] -> 
[psp/fsw/pc-linux/src/cfe_psp_memory.c:687]: (style) Variable 'return_code' is reassigned a value before the old one has been used.
[psp/fsw/pc-linux/src/cfe_psp_memory.c:687] -> 
[psp/fsw/pc-linux/src/cfe_psp_memory.c:688]: (style) Variable 'return_code' is reassigned a value before the old one has been used.
[psp/fsw/pc-linux/src/cfe_psp_memory.c:688] -> 
[psp/fsw/pc-linux/src/cfe_psp_memory.c:689]: (style) Variable 'return_code' is reassigned a value before the old one has been used.
[psp/fsw/pc-rtems/src/cfe_psp_exception.c:138]: (warning, inconclusive) The buffer 'TaskName' may not be null-terminated after the call to strncpy().
[psp/fsw/modules/eeprom_mmap_file/cfe_psp_eeprom_mmap_file.c:191]: (style) Variable 'Status' is assigned a value that is never used.
[psp/fsw/shared/cfe_psp_module.h:106] -> 
[psp/fsw/shared/cfe_psp_module.c:111]: (style, inconclusive) Function 'CFE_PSP_Module_FindByName' argument 1 names different: declaration 'ModuleName' definition 'DriverName'.
[psp/fsw/mcp750-vxworks/src/bsp-integration/cfeSupport.c:192]: (style) The scope of the variable 'i' can be reduced.
[psp/fsw/mcp750-vxworks/src/bsp-integration/cfeSupport.c:193]: (style) The scope of the variable 'cfNameFound' can be reduced.
[psp/fsw/mcp750-vxworks/src/bsp-integration/cfeSupport.c:194]: (style) The scope of the variable 'tempFd' can be reduced.
[psp/fsw/mcp750-vxworks/src/bsp-integration/cfeSupport.c:195]: (style) The scope of the variable 'CompactFlashName' can be reduced.
[psp/fsw/shared/cfe_psp_module.c:57]: (style) The scope of the variable 'ApiPtr' can be reduced.


**Describe the solution you'd like**
Resolve warning


**Requester Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/PSP/issues/117
"Fix #66, Simplified code to use just the array names where correct","**Describe the contribution**
Fixes issue #66. 

Made changes to file `mcp750-vxworks/src/cfe_psp_memory.c` in order to simply code to use just the array names when correct. Used grep to find any instances as instructed. 

**Contributor Info**
Zufishan Ali, Seneca College of Applied Arts & Technology

**Community contributors**
Pending: You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/PSP/pull/116
Integration Candidate 20191115,"**Describe the contribution**
Fixes #112 

**Testing performed**
Steps taken to test the contribution:
1. Checked out bundle with ic-20191115 branches 
1. make ENABLE_UNIT_TESTS=TRUE SIMULATION=native prep
1. make
1. make install
1. make test
Built without warnings, all tests passed except osal_timer_UT (nominal result on linux)
executed cfe, successful startup with no warnings

Confirmed passed CI (with cppcheck enforced!)

**Expected behavior changes**
No functional changes, doxygen warning cleanup.

**System(s) tested on:**
 - cFS dev server
 - OS: Ubuntu 16.04
 - Versions: bundle ic-20191115 branch

**Additional context**
None

**Contributor Info**
Jacob Hageman - NASA/GSFC",,https://github.com/nasa/PSP/pull/115
"cfe_psp_start timer race condition, leading to undef memory writes","Hi I'm working with cFE in the context of NASA's icarus codebase

We think we found an issue, In psp/fsw/pc-linux/src/cfe_psp_start.c, a timer is setup with this line:
    setitimer (ITIMER_REAL, &timer, NULL);
The timer event ultimately calls CFE_ES_PerfLogAdd after 250ms which starts making assignments on the perf object like so:
    Perf->MetaData.InvalidMarkerReported = TRUE;
 
The problem is there is a time race condition in that CFE_ES_MAIN_FUNCTION’s call to CFE_ES_SetupPerfVariables has not yet initialized the Perf object, depending on your execution speed. This is unlikely but if you are adding initialization code after setitimer it will likely lead to undefined behavior
 



**To Reproduce**
Steps to reproduce the behavior:
after 
   setitimer (ITIMER_REAL, &timer, NULL);
add
   sleep(30);

And undefined behavior will happen (or nothing observable). It was crashing our lengthy DLL initialization that we were running in the place of sleep(30);



**Expected behavior**
No Crash

**Code snips**
N/A

**System observed on:**
 - 64 bit intel
 - OS: vmware workstation 14 running Ubuntu 18 vm, host is windows 10
 - Versions current

**Additional context**
N/A

**Reporter Info**
Reachable at tyler.young@jhuapl.edu. This isn't currently an issue for us but is probably worth reporting
","bug, duplicate",https://github.com/nasa/PSP/issues/114
"Fix #112, fix doxygen warning","**Describe the contribution**
Fix #112, fix doxygen warning 

**Testing performed**
Steps taken to test the contribution:
1. Make usersguide
2. Very warning is gone

**System(s) tested on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc-6.7.0

**Contributor Info**
Anh Van, NASA Goddard

**Community contributors**
You must attach a signed CLA (required for acceptance) or reference one already submitted
",CCB:Approved,https://github.com/nasa/PSP/pull/113
doxygen warning,"**Describe the bug**
psp/fsw/inc/cfe_psp_configdata.h:22: warning: the name `cfe_psp_config.h' supplied as the second argument in the \file statement is not an input file

**To Reproduce**
Steps to reproduce the behavior:
1. make usersguide
2. See error

**System observed on:**
 - Hardware
 - Ubuntu 18.04
 - doxygen 1.8.13, rc-6.7.0

**Reporter Info**
Anh Van, NASA Goddard
",enhancement,https://github.com/nasa/PSP/issues/112
"mcp750-vxworks PSP hardcodes core as ""cfe-core.o""","**Requested feature**
CFE_PSP_GetCFETextSegmentInfo fails if CFE_MODULE_NAME doesn't match what was run, currently hardcoded to ""cfe-core.o"".  Could make lookup more general so it wouldn't require hardcoded name.

**To Reproduce**
Steps to reproduce the behavior:
1. Build for vxworks, use core name other than cfe-core.o (cfe-core.exe)
2. Execute
3. Checksum of text segment will report as 0xFFFF due to failed moduleFindByName on hardcoded cfe-core.o

**Expected behavior**
Checksum should work

**Code snips**
See fsw/mcp750-vxworks/src/cfe_psp_memory.c lines related to CFE_MODULE_NAME

**System observed on:**
 - Hardware: MCP750
 - OS: VxWorks6.9
 - Versions 6.7 bundle

**Additional context**
None

**Reporter Info**
Jacob Hageman - NASA/GSFC
","bug, Priority: Mission",https://github.com/nasa/PSP/issues/111
Update PSP build options files to use add_definitions,"These had been setting the ""OSAL_C_FLAGS"" variable and relied on OSAL preserving this value.

However after [cfs_osal:216] this no longer gets preserved (necessary because UT and real code may have different BSPs/Flags).

Using the cmake `add_definitions` mechanism is more appropriate and more reliable as it does not depend on the behavior of the OSAL build procedure.",bug,https://github.com/nasa/PSP/issues/110
Remove references to osalbool/boolean,"The C99 ""bool"" and related true/false identifiers should be used instead.

This is related to [cfs_osal:228]",bug,https://github.com/nasa/PSP/issues/109
Update mcp750-vxworks PSP for CMake,"In order to build the VxWorks image using CMake, a platform module and other various bits need to be added.

This PSP was previously only buildable with classic makefile.",bug,https://github.com/nasa/PSP/issues/108
MCP750 uncommanded reset at startup,"An uncommanded reset periodically occurs (~1 in 5 startups) at startup on the MCP750 using vxworks6.9.

This bug has likely been around for a long time (10 years or more), is only seen on a ""processor reset"", and is likely related to something corrupted in memory that gets reused.  Reset type is based on a register, and after the reset, a ""power-on reset"" is performed and is always successful (formats/clears the corrupted memory before use).","bug, wontfix",https://github.com/nasa/PSP/issues/107
"Remove ""ENHANCED_BUILD"" macro","The classic build is being deprecated, so the ""ENHANCED_BUILD"" switch that indicated a cmake-based build is no longer required, as it is always the case.

This is related to [cfs_cfe:318] in CFE.",bug,https://github.com/nasa/PSP/issues/106
Wrap/remove old backwards compatibility in cfe_psp_start,"Comments say cfe_platform_cfg.h include is only for old makefiles, can this be removed now that classic build is deprecated?

Remove backward compatibility for old OSAL - CFE_PSP_SetupLocal1Hz and associated call.",bug,https://github.com/nasa/PSP/issues/105
Wrap CFE_PSP_SUBMINOR_VERSION in deprecated ifndef,fsw/pc-rtems/inc/psp_version.h has CFE_PSP_SUBMINOR_VERSION marked as only for backward compatibility.  ,bug,https://github.com/nasa/PSP/issues/104
Consistent CFE_PSP_Main implementation,"RTEMS PSP hardcodes ""/cf/cfe_es_startup.scr"", but mcp750 and pc-linux both use the CFE_PLATFORM_ES_NONVOL_STARTUP_FILE.

Inconsistent implementations.

From #102  (solved here):
cfe_psp_start.c for mcp750 VxWorks has StartupFilePath as an input parameter to CFE_PSP_Main, but calls CFE_ES_Main with CFE_PLATFORM_ES_NONVOL_STARTUP_FILE.

Confusing implementation... looks like at least the pc-linux PSP only uses CFE_PLATFORM_ES_NONVOL_STARTUP_FILE (but a different prototype).",enhancement,https://github.com/nasa/PSP/issues/103
mcp750 PSP ignores StartupFilePath,"cfe_psp_start.c for mcp750 VxWorks has StartupFilePath as an input parameter to CFE_PSP_Main, but calls CFE_ES_Main with CFE_PLATFORM_ES_NONVOL_STARTUP_FILE.

Confusing implementation... looks like at least the pc-linux PSP only uses CFE_PLATFORM_ES_NONVOL_STARTUP_FILE (but a different prototype).

","duplicate, enhancement",https://github.com/nasa/PSP/issues/102
Remove old MKS flags in comments,"$Id, $Date, $Revision, $Log, etc all no longer useful and slightly misleading since they don't get updated.",bug,https://github.com/nasa/PSP/issues/101
Update vxworks PSP name (no longer 6.4),,bug,https://github.com/nasa/PSP/issues/100
PSP must not use OS_printf() before OS_API_Init,"In particular this is important when the ""utility task"" is in use (soon to be standard).  If `OS_API_Init()` hasn't been called yet, then the data buffer to which `OS_printf()` writes is not valid.

The OSAL implementation does protect against this and it should drop the data, but PSP shouldn't be calling this function before the initialization.  

(It happened to be OK if OS_printf was just a wrapper around printf, but if OS_printf is anything more, then it doesn't work).

Just use `printf` or native C library calls before OS_API_Init().",bug,https://github.com/nasa/PSP/issues/99
Update copyright and license info for end-of-summer release,,bug,https://github.com/nasa/PSP/issues/98
Mark memcpy/set as deprecated,"As discussed related to #35 and #36 (6/12/2019 CCB), see related discussions on those tickets.",duplicate,https://github.com/nasa/PSP/issues/97
Resolve Klocwork issues found in 1.3.0,See attached spreadsheet.,bug,https://github.com/nasa/PSP/issues/96
"Add ""ramdisk startup script"" module","This module adds a simple way for a PSP to create the startup script file in a RAMDISK, using embedded data linked at build time with CFE.

Intended for use on systems that have no persistent storage to hold this file.","enhancement, wontfix",https://github.com/nasa/PSP/issues/95
Add top level readme for open source release,Applies to both psp-1.3.0a and development branch.,enhancement,https://github.com/nasa/PSP/issues/94
Update copyright and license for open source cFS framework release 6.6.0a,Need to update/add copyright and license to Apache 2.0 for open source release of 6.6.0a.,bug,https://github.com/nasa/PSP/issues/93
Remove tools directory,Directory clean-up,enhancement,https://github.com/nasa/PSP/issues/92
Remove non-CCB controlled PSPs,"sp0 and grut699 are not CCB controlled PSPs, remove them from development branch.

Note techdev branches were created to store the work (both have diverged from current dev)",enhancement,https://github.com/nasa/PSP/issues/91
Improper strncpy to ResetType in pc-linux PSP,"Static analysis noted that the following strncpy in `CFE_PSP_ProcessArgumentDefaults()` is potentially a problem:

{{{
    strncpy(CommandData->ResetType, ""PO"", 2 );
}}}

This is because the string is a constant two character literal and the fixed copy size of ""2"" means that the null terminating byte will never get copied to the output buffer.

In the PSP, because the buffer had been zeroed out by an earlier memset() call, the code still worked OK.  Still, this should be fixed, as the prior path to get to this function might not always be identical to the way it is today.",bug,https://github.com/nasa/PSP/issues/90
CFE_PSP_WriteToCDS input buffer should be const,"The CFE_PSP_WriteToCDS() API is not currently const-correct.  The input buffer should be qualified as ""const"" but it is not currently so.

The API prototype:

{{{
int32 CFE_PSP_WriteToCDS(void *PtrToDataToWrite, uint32 CDSOffset, uint32 NumBytes)
}}}

should become:

{{{
int32 CFE_PSP_WriteToCDS(const void *PtrToDataToWrite, uint32 CDSOffset, uint32 NumBytes)
}}}

In particular, this incorrect definition can cause a spurious compiler warning any time the data being written is ""const"".  In certain places, CFE calls this function with string literals, which trigger compiler warnings on some platforms/configurations.

","bug, duplicate",https://github.com/nasa/PSP/issues/89
(pc-linux) psp should not use signals (1hz timer),"The PSP 1hz timer uses SIGALARM and setitimer. There is a proposal ticket:76 to use timer_create() instead. This still has the problem  of using asynchronous signal delivery. Asynchronous signal delivery does not belong in realtime applications. We should remove this and instead us timerfd_create() and create a thread to wait on the timer event. This tracks overruns as well as removes the danger of calling thread-unsafe functions in signal handlers (which pc-linux does.)

In order to avoid the race condition specified in ticket:23 the PSP API should be changed for the user to register a callback rather than depeding on an external dependency from TIME. This would allow PSP to start the timer relative to ""bootup"" and it would allow the user to avoid the race condition by registering itself with the timer. If we made it a blocking call the user could call from their own thread, it also would let the user control the priority of the thread receiving the timer event.

I believe the point of the 1hz timer is for platforms where there is a hardware timer that can be used with better granulatiry than OS timers. If that is no longer true, then we should just get rid of this and use an OS timer. ","bug, wontfix",https://github.com/nasa/PSP/issues/88
PSP for sp0-vxworks6.9 needs update for cfe v6.6,,"bug, invalid",https://github.com/nasa/PSP/issues/87
pc-linux64,"Create a PSP for x86_64 on Linux. This can serve as a development platform for code targeting the ARM Cortex-A53, for example.",enhancement,https://github.com/nasa/PSP/issues/86
Update pc-rtems to support released RTEMS 4.11,"The `pc-rtems` PSP was initially developed for CFE 6.5 using the development RTEMS branch (pre-4.11).  Since then, RTEMS 4.11 has been released and upstream RTEMS development has moved on to 4.12.

There are some changes between the pre-release and final versions of RTEMS 4.11.   Some functions being used were marked as deprecated.

As part of testing CFE 6.6 release the `pc-rtems` was re-validated against the latest RTEMS 4.11.2 official release.  This ticket contains the necessary updates to pc-rtems PSP to run with RTEMS 4.11.2.",bug,https://github.com/nasa/PSP/issues/85
Fix PSP to use updated names for macros and symbols,"CFE 6.6 addresses a number of naming convention inconsistencies, and many of the symbol names are updated to be clearer about the intent and purpose of the symbol.

As part of CFE 6.6 a backward-compatibility mapping is also provided.

This ticket is to do the corresponding updates to the PSP to use the correct new-style name, and not rely on the backward compatibility macro anymore.  This will need to be done before the compatibility names can be turned off.",bug,https://github.com/nasa/PSP/issues/84
Include PSP unit test stub functions,"Per the UT assert framework design, each component should include basic stubs for the same public API calls provided by the component.

This adds those stubs for the PSP.","enhancement, unit-test",https://github.com/nasa/PSP/issues/83
PSP API prototype fixes for warning cleanup,"Some PSP API calls were missing a `const` qualifier from their prototypes (e.g. the memcpy wrapper) which means that it triggered a compiler warning any time application code used these functions with a value that was correctly qualified as `const`.  

The prototype and all definitions of the function should be fixed.",bug,https://github.com/nasa/PSP/issues/82
Include PSP API unit testing stubs in PSP,"In the distributed UT assert framework, unit testing stubs for PSP functions should be included with the PSP.","duplicate, enhancement",https://github.com/nasa/PSP/issues/81
use timer_create() instead of setitimer() for pc-linux,"PSP uses setitemer() to call CFE_PSP_TimerHandler at 4hz. setitemer() does this by sending SIGALRM to the process every 1/4s.

SIGALRM (and signals in general) have no mechanism for distinguishing who created the signal, and handling the signal is tricky in multi-threaded environments. I would like to integrate a library but it also uses SIGALRM (also for timing) and the two uses conflict.

Additionally, ""POSIX.1-2008 marks getitimer() and setitimer() obsolete"" and also has a number of issues regarding multiple timers and accuracy of the timers under load. See https://linux.die.net/man/2/setitimer

I propose using timer_create() and sigaction() as demonstrated in the manual page: http://man7.org/linux/man-pages/man2/timer_create.2.html","enhancement, invalid",https://github.com/nasa/PSP/issues/80
(re)create MacOSX PSP,"The wiki includes OSX as one of the target PSP's, but it was removed a while ago. It should be re-created/updated.","enhancement, invalid",https://github.com/nasa/PSP/issues/79
Missing PSP API Document,"An API reference document is needed and should be provided.  See OSAL API document for reference however, it is highly recommended to create this document via doxygen.","enhancement, good first issue, docs",https://github.com/nasa/PSP/issues/78
MCP750 Causes cES1702.2 and cES1703.2 Requirement Failures on VxWorks 6.9,"Although the mcp750 vxworks PSP directory is named ""mcp750-vxworks6.4"", this implementation should support all 6.x versions of VxWorks.  It was found the CFE_PSP_SetDefaultExceptionEnvironment function defined in cfe_psp_exception.c does not set all the required flags in order to produce a task restart following a CPU or Float Point exception produced via task running under 6.9.  The Recoverable Interrupt flag (_PPC_MSR_RI) is missing in the call to vxMsrSet.  It was recommended by WindRiver to update how we setup the default exception environment using the vxMsrGet call.  The following code will resolve the issue in vxworks 6.9 and will also not affect 6.4 from producing the desired behavior:

vxMsrSet(vxMsrGet() |_PPC_MSR_FE0|_PPC_MSR_FE1|_PPC_MSR_EE|_PPC_MSR_FP|_PPC_MSR_ME|_PPC_MSR_DR);
       
vxFpscrSet(vxFpscrGet() | _PPC_FPSCR_VE | _PPC_FPSCR_OE|_PPC_FPSCR_NI|_PPC_FPSCR_ZE);

vxFpscrSet(vxFpscrGet() | _PPC_FPSCR_XE | _PPC_FPSCR_UE );
",enhancement,https://github.com/nasa/PSP/issues/77
CFE_PSP_GetTime Loses Resolution in Conversion to Microseconds (GSFC DCR 14952),"There's a 'bug' in the implementation of the mcp750/vxworks PSP which causes the loss of timing resolution in the function CFE_PSP_GetTime(). for example:  

{{{
void CFE_PSP_GetTime( OS_time_t *LocalTime) 
{    
   uint32 DecCount;     

   /* Reads the time from the hardware register, then converts it     
    * into usable seconds and microseconds */    

   sysPciRead32(0xFC0011C0, (UINT32 *)(&DecCount));    
   DecCount = DecCount & 0x7FFFFFFF;    
   DecCount = ((uint32)  0x0D6937E5) - DecCount;    
   LocalTime-&gt;seconds = DecCount / 8333311;    
   DecCount = DecCount % 8333311;    
   LocalTime-&gt;microsecs = (DecCount/8333) * 1000; 
}/* end CFE_PSP_GetLocalTime */   
}}}

In this case, (DecCount/8333) * 1000 is performed as an integer calculation (as DecCount and LocalTime-&gt;microsecs are integers), basically reducing resolution from microseconds (which this function can calculated from fractions of microseconds) to miliseconds.  

NOTE: GSFC's rad750 version has a similar calculation ((DecCount / 2062) * 1000)  

Should this be changed to something like (for mcp750):     

{{{
LocalTime-&gt;microsecs = (uint32) (( ((double)DecCount) /8333.0) * 1000.0);
}}}",bug,https://github.com/nasa/PSP/issues/76
Add CFE_PSP_GetLocalMET and CFE_PSP_SetLocalMET API Functions (GSFC DCR 21074),"These functions are called by the cFE/TIME subsystem and were never implemented.
",enhancement,https://github.com/nasa/PSP/issues/75
Add C++ Support in PSP Header Files (GSFC DCR 22017),"To support C++ based applications, the PSP header files need to have the following code:

In the beginning of each header file:

#ifdef __cplusplus
extern ""C"" {
#endif

At the end of each header file:

#ifdef __cplusplus
}
#endif",enhancement,https://github.com/nasa/PSP/issues/74
Add PSP API to Return Startup Path of cFE (GSFC DCR 22624),"APL has requested a PSP API function to return the startup path of the cFE.  This will allow them to load tables and applications from the same location the cFE was loaded from without having to use absolute/full paths.

APL has prototyped this and is considering its use on Solar Probe Plus.  Overall description of the changes:

cfe_psp_start.c:
New function
void CFE_PSP_ParseAndSaveStartupPath(char *StartFilePath);
Add storage for strings:
startup file full path and filename
Startup path
Startup filename (excluding path) 
In cfe_psp_main()
Call new function with the string used to pass into cfe_es_main()
inc/cfe_psp.h
New API prototype
uint32 CFE_PSP_GetStarupPath(char *path)
cfe_psp_support.c
New API definition",enhancement,https://github.com/nasa/PSP/issues/73
Consider Adding the VxWorks RTP/Memory Protected PSP (GSFC DCR 18574),"Add the PSP and startup manager code for the VxWorks RTP implementation.

This was used in an APL/GSFC IRAD to run the cFE within a memory protected process.  Using the startup manager, more than one instance of the cFE can be run on the same processor.

At a minimum this should be added to the ""PSP Technology"" Branch.","enhancement, invalid",https://github.com/nasa/PSP/issues/72
Preserve Reserved Memory on a Soft Power-On Reset (GSFC DCR 18535),"The default action on all PSP implementations is to clear the reserved memory on a soft Power-On Reset.  This is where the cFE stores the exception and reset log information.

On both the GPM and MMS missions, the PSP's were customized to preserve the reserved memory on most soft power-on resets.  The PSP implementations should be changed to preserve this memory where possible.  This may not be possible for all PSP, but at a minimum could be done for the mcp750 target.

Attached is a sample of how the PSP was changed on GPM for their rad750 target. ",enhancement,https://github.com/nasa/PSP/issues/71
Add API to Return EEPROM write enable/disable status (GSFC DCR 13420),"The PSP should provide an API to allow a caller to retrieve the write enable/disable status of a selected bank of EEPROM (or alternatively, the status of all available banks).  This would allow this information to be made available in telemetry.   ","enhancement, wontfix",https://github.com/nasa/PSP/issues/70
"Move PSP timer init earlier, prior to module initialization","PSP modules may require timers.  To support this, the PSP timer initialization should be prior to initialization of the module list.","duplicate, enhancement",https://github.com/nasa/PSP/issues/69
Pass Module ID as parameter to PSP module init function,Some modules can benefit from having a unique identifier they can use to allocate resources.  This is a simple change to add.,enhancement,https://github.com/nasa/PSP/issues/68
PC-RTEMS fixes from psp-1.3/cfe-6.5 testing,"During testing of psp-1.3/cfe-6.5 candidate, found a few things in need of attention in the pc-rtems PSP.",bug,https://github.com/nasa/PSP/issues/67
"Use (foo), not &(foo[0]), where appropriate","In a number of places, code jumps through extra hoops
to take the address of the first element of an array,
rather than just allowing the array name to gracefully
decay into the pointer.

Where just using the array name is more correct, we should
simplify the code to use it.
",enhancement,https://github.com/nasa/PSP/issues/66
"MCP750-VxWorks - Memory Variables Should be ""cpuaddr"" Type","There are several variable instances in the cfe_psp_memory.c source file in  the mcp750-vxworks implementation that define memory address variables as a  uint32 type.  These definitions need to be updated to use the platform defined ""cpuaddr"" type. ",bug,https://github.com/nasa/PSP/issues/65
Redundant Assignments,"One common anti-pattern in cFS is to call functions that return
potential error codes, store the return values in variables, then
never bother to check the value of the variable.

cppcheck reports this as a redundant assignment.

Current cases in PSP:

{{{
psp/fsw/pc-linux/src/cfe_psp_memory.c:682: performance: Variable 'return_code' is reassigned a value before the old one has been used.
psp/fsw/pc-linux/src/cfe_psp_memory.c:681: performance: Variable 'return_code' is reassigned a value before the old one has been used.
psp/fsw/pc-linux/src/cfe_psp_memory.c:683: performance: Variable 'return_code' is reassigned a value before the old one has been used.
psp/fsw/pc-linux/src/cfe_psp_memory.c:684: performance: Variable 'return_code' is reassigned a value before the old one has been used.
psp/fsw/pc-linux/src/cfe_psp_memory.c:689: performance: Variable 'return_code' is reassigned a value before the old one has been used.
psp/fsw/pc-linux/src/cfe_psp_memory.c:688: performance: Variable 'return_code' is reassigned a value before the old one has been used.
psp/fsw/pc-linux/src/cfe_psp_memory.c:690: performance: Variable 'return_code' is reassigned a value before the old one has been used.
psp/fsw/pc-linux/src/cfe_psp_memory.c:691: performance: Variable 'return_code' is reassigned a value before the old one has been used.
}}}

Not sure how we missed this in the 2016-04-12 sweep.
",duplicate,https://github.com/nasa/PSP/issues/64
Remove obsolete PSPs,"CCB meeting on 2016-04-12 agreed that
we can remove the following PSPs
that have not been maintained lately:

- mac-osx
- mcf5235-rtems
- pc-cygwin
",,https://github.com/nasa/PSP/issues/63
printf format codes vs argument types,"Resolve a number of mismatches between printf format string conversions
and the data types of the parameters.

From cppcheck:

{{{
psp/fsw/grut699-vxworks6/src/cfe_psp_start.c:226: warning: %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.
psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c:251: warning: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.
psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c:252: warning: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.
psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c:253: warning: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.
psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c:255: warning: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.
psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c:256: warning: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.
psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c:257: warning: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.

}}}
",bug,https://github.com/nasa/PSP/issues/62
PSP build fails for MCP750,"Greg Limes reports the following errors he got with ""make -k"" and notes because some files do not compile, the build does not attempt to build some others, so this may not be a complete list of all the actual errors:

(None of this is *hard* to fix ... just frustating when I only get  short snips of time to push on this issue ...)

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_start.c:73: error: conflicting types for 'CFE_PSP_Main'
psp/fsw/inc/cfe_psp.h:180: error: previous declaration of 'CFE_PSP_Main' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_start.c:73: error: conflicting types for 'CFE_PSP_Main'
psp/fsw/inc/cfe_psp.h:180: error: previous declaration of 'CFE_PSP_Main' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:209: error: conflicting types for 'CFE_PSP_GetResetArea'
psp/fsw/inc/cfe_psp.h:287: error: previous declaration of 'CFE_PSP_GetResetArea' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:209: error: conflicting types for 'CFE_PSP_GetResetArea'
psp/fsw/inc/cfe_psp.h:287: error: previous declaration of 'CFE_PSP_GetResetArea' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:248: error: conflicting types for 'CFE_PSP_GetUserReservedArea'
psp/fsw/inc/cfe_psp.h:294: error: previous declaration of 'CFE_PSP_GetUserReservedArea' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:248: error: conflicting types for 'CFE_PSP_GetUserReservedArea'
psp/fsw/inc/cfe_psp.h:294: error: previous declaration of 'CFE_PSP_GetUserReservedArea' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:287: error: conflicting types for 'CFE_PSP_GetVolatileDiskMem'
psp/fsw/inc/cfe_psp.h:300: error: previous declaration of 'CFE_PSP_GetVolatileDiskMem' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:287: error: conflicting types for 'CFE_PSP_GetVolatileDiskMem'
psp/fsw/inc/cfe_psp.h:300: error: previous declaration of 'CFE_PSP_GetVolatileDiskMem' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:367: error: conflicting types for 'CFE_PSP_GetKernelTextSegmentInfo'
psp/fsw/inc/cfe_psp.h:306: error: previous declaration of 'CFE_PSP_GetKernelTextSegmentInfo' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:367: error: conflicting types for 'CFE_PSP_GetKernelTextSegmentInfo'
psp/fsw/inc/cfe_psp.h:306: error: previous declaration of 'CFE_PSP_GetKernelTextSegmentInfo' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:409: error: conflicting types for 'CFE_PSP_GetCFETextSegmentInfo'
psp/fsw/inc/cfe_psp.h:311: error: previous declaration of 'CFE_PSP_GetCFETextSegmentInfo' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c:409: error: conflicting types for 'CFE_PSP_GetCFETextSegmentInfo'
psp/fsw/inc/cfe_psp.h:311: error: previous declaration of 'CFE_PSP_GetCFETextSegmentInfo' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_exception.c:74: error: conflicting types for 'CFE_ES_ProcessCoreException'
cfe/fsw/cfe-core/src/inc/cfe_es.h:1600: error: previous declaration of 'CFE_ES_ProcessCoreException' was here

psp/fsw/mcp750-vxworks6.4/src/cfe_psp_exception.c:74: error: conflicting types for 'CFE_ES_ProcessCoreException'
cfe/fsw/cfe-core/src/inc/cfe_es.h:1600: error: previous declaration of 'CFE_ES_ProcessCoreException' was here

Also Matt Grubb reports the following problems/fixes that were made in his environment to get the mcp750 build to compile:

1. Psp_version.h needed updated with the _IMPL definitions as I found in pc-linux 
2. Cfe_psp_exception.c, cfe_psp_memory.c, and cfe_psp_start.c all needed updates for new function definitions in cfe_psp.h 
3. The version.cmake file creates a ""version.h"" file when building. This is a filename required by VxWorks, so I renamed the file in the script to cmakeversion.h and changed the target_config to include cmakeversion.h 
4. Added a build_options.cmake file to the mcp750 PSP 
5. Created a toolchain file for the mcp750 on vxworks 6.4 in proj_defs


",bug,https://github.com/nasa/PSP/issues/61
n2x PSP,"Development branch for the n2x Quad Leon4 development board

Need to branch off trac-54-ut699-improvements since it has all of the ut699 updates plus a good linux psp from trac-10","enhancement, wontfix",https://github.com/nasa/PSP/issues/60
fix SP0 PSP,,"bug, invalid",https://github.com/nasa/PSP/issues/59
additional ut699 changes from trac-10,"Ticket for the purpose of building a change set, for review, from the existing trac-10 ticket.",bug,https://github.com/nasa/PSP/issues/58
PSP 1.3 Version Description Document Review Cycle,"Attached PSP 1.3 VDD is open for CCB review. Please attach any tracked changes/comments with initials included in document filename i.e. ""OSAL 4.2.0.0 Version Description Document-sls.docx"". Following the CCB review cycle, when all changes have been reviewed/accepted or rejected, the document will be open for signature and release.",,https://github.com/nasa/PSP/issues/57
PSP build fails for GRUT699,"Steve Duran reports that he is encountering errors in the GRUT-699 PSP
as follows:

{noformat}

/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:209: error: conflicting types for 'CFE_PSP_GetResetArea'
/home/sduran/COP_CFS_Workspace/psp/fsw/inc/cfe_psp.h:287: error: previous declaration of 'CFE_PSP_GetResetArea' was here
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c: In function 'CFE_PSP_GetResetArea':
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:219: warning: cast increases required alignment of target type
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c: At top level:
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:248: error: conflicting types for 'CFE_PSP_GetUserReservedArea'
/home/sduran/COP_CFS_Workspace/psp/fsw/inc/cfe_psp.h:294: error: previous declaration of 'CFE_PSP_GetUserReservedArea' was here
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c: In function 'CFE_PSP_GetUserReservedArea':
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:258: warning: cast increases required alignment of target type
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c: At top level:
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:287: error: conflicting types for 'CFE_PSP_GetVolatileDiskMem'
/home/sduran/COP_CFS_Workspace/psp/fsw/inc/cfe_psp.h:300: error: previous declaration of 'CFE_PSP_GetVolatileDiskMem' was here
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c: In function 'CFE_PSP_GetVolatileDiskMem':
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:297: warning: cast increases required alignment of target type
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c: At top level:
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:363: error: conflicting types for 'CFE_PSP_GetKernelTextSegmentInfo'
/home/sduran/COP_CFS_Workspace/psp/fsw/inc/cfe_psp.h:306: error: previous declaration of 'CFE_PSP_GetKernelTextSegmentInfo' was here
/home/sduran/COP_CFS_Workspace/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c:405: error: conflicting types for 'CFE_PSP_GetCFETextSegmentInfo'
/home/sduran/COP_CFS_Workspace/psp/fsw/inc/cfe_psp.h:311: error: previous declaration of 'CFE_PSP_GetCFETextSegmentInfo' was here

{noformat}

These appear to be due to the changes to some of the PSP functions, to go from
using `void*` to indicate where to store a pointer, to using `(cpuaddr*)` which
is slightly better.

I have a place I am currently building GRUT-700 VxWorks images, so I should be
able to make this change and verify that it builds.

This should be able to get done, tested, and integrated in time to be part of
the next PSP release (PSP 1.3).
",bug,https://github.com/nasa/PSP/issues/56
Trick PSP,There is growing interest in being able to use the Trick OSAL/PSP so that a CFS build can be executed within a Trick simulation - basically allowing developers to fly unmodified FSW within an all SW simulation environment on their desktop.  The approach was used extensively and successfully on the Morpheus project.  The Trick OSAL/PSP were developed a few years ago.  Some work will be necessary to get them up and running again with the latest CFS.,"enhancement, invalid",https://github.com/nasa/PSP/issues/55
ApexSim for Arinc653 Posix simulator,"Effort has been made at JSC to build an ""ApexSim"" which is a arinc653 OS simulator that runs in POSIX.  

The tool was development by Guy de Carufel and Mathew Benson.  

It is not complete, but should be a good starting point for Arinc653 development.  The Arinc Modules that have been implemented are fully tested.  It can be a good resource for any Arinc653 OSAL development.  The Arinc653 OSAL Timer has been tested with this tool.

Eventually, this could be adapted into a PSP layer.

Here are things missing:
- Add partition scheduling for multi-partition build
- Add Missing modules (Queuing Port, Events, Error Handler, blackboard)
- XML parsing tool to turn XML config file into ApexSim tables
- Documentation
- Develop a PSP layer
","enhancement, invalid",https://github.com/nasa/PSP/issues/54
Volume Table Requires User Modification,"The volume table definition is source file that is included with each PSP implementation.  The implementation source code files are not intended to be modified.  The volume table however, requires user modification to specify the volumes and their physical locations specific to a project/mission.

Adding a volume table macro is a simple solution to allow volume information to be specified at build time.",bug,https://github.com/nasa/PSP/issues/53
Allow C99 code in PSP.,"Update compiler flags to allow C99 code to be used
everywhere in PSP.

Just removing `-ansi` tells GCC to allow GNU extensions in the
source code, which gets us most of what we want from C99 but
not actually everythying. Using `-std=c99` tells GCC that the
code is expected to be INCITS ISO/IEC 9899:1999 (aka C99), and
any other extensions as explicitly requested in the code.
",bug,https://github.com/nasa/PSP/issues/52
Update PSP Version Number for 1.3.0 Release,"All PSP version.h header files need to be updated from version 1.2.0.0 to 1.3.0.0 for the release.

Note: This will be the last release that uses the old versioning scheme where all PSP implementation version header files are updated with the same version number and no version exists for the shared code or API's.",enhancement,https://github.com/nasa/PSP/issues/51
Standardize Version Numbering (in PSP),"Bring version number management within OSAL into line
with the cFS standards documented at

https://babelfish.arc.nasa.gov/trac/cfs_test/wiki/ReferenceVersion

",bug,https://github.com/nasa/PSP/issues/50
Update mcp750-vxworks6.4 cfeSupport.c to Enforce CF Name,"The CF device is a rawFs device for the first part of the disk that contains the MBR and some unused space.  Mounting the device via VxWorks 6.4 resulted in the device name of CF:0.  This behavior has changed with newer versions of VxWorks where the device name may result in CF:0 or CF:1 depending on where the device partition is made.  A device name of CF:1 will require the default PSP volume table to be updated.  

To avoid changes to the PSP volume table the attached kernel code make an update to the CFE_PSP_InitFlashDisk function to look for a valid CF:X (where X is 1-4) and then if it finds one that isn't 0, it will create another device for 0. This wastes a small amount of ram but is otherwise harmless.  Also the disk is mounted in buffered mode instead of sync mode.",enhancement,https://github.com/nasa/PSP/issues/49
"Rename ""mcp750-vxworks6.4"" Folder",The mcp750-vxworks6.4 implementation is not specific to vxworks version 6.4.  This implementation will work with other vxworks 6 versions up to vxworks 6.9.  The folder should be renamed to mcp750-vxworks6 to avoid any confusion.,"bug, wontfix",https://github.com/nasa/PSP/issues/48
should PSP have byte-swapping utilities for endian conversions?,"We're constantly running into code needing to swap bytes in 16- and 32-bit data for big-endian data on little-endian platforms and I think it might be a convenience if CFS provided byte-swapping utilities. (Theoretically, some platforms may have the ability to perform byte swaps more efficiently using CPU instructions or the like.)

This may be more appropriately housed in OSAL or elsewhere. CFS code should be reviewed for redundancies such as the FS code has CFE_FS_ByteSwapUint32 that could utilize a more generic function. (I can take on writing the patch once I receive concurrence that this is a wise update and the right location to house the code.)","duplicate, enhancement",https://github.com/nasa/PSP/issues/47
Simplify Function Pointer Manipulations,"There are a number of places within the CFS Projects where the usage of Function Pointers is somewhat obfuscated by the inclusion of redundant operators. Removing those operators can improve the clarity of the code.

The redundancies are based on code that, when written, did not properly base itself on the following aspects of Function Pointers in the C programming language.

1. Function names decay into Function Pointers in the same way
   that Array names decay into pointers to their first elements,
   which means that an `&` operator is redundant when setting a
   pointer to point at a function. For the classical example of
   this, see most `qsort` examples, where no `&` is applied to
   the comparison function when passing it as the last argument,
   which has type ''pointer to function...''

2. The function call operator `(`''args''`)` operates on a
   function pointer -- so every function call you see actually
   is invoking the above decay semantics. This means that
   the `*` operator is ''not'' needed when calling a function
   via a function pointer. Happily, this also often means that
   you also do not need an extra level (or two?!) of parentheses
   to asure that the `*` is applied to the function pointer and
   not to the return value.

3. Calling a function pointed to by a structure member is a
   very common operation, and with the above in mind, note that
   there is no parsing or evaluation order ambiguity; no extra
   parentheses are required to assure that `.` and `->` and the
   function call operator are evaluated in the proper order.

My task -- embodied in this ticket -- is to seek out cases in
the PSP source code where redundant operations are applied
to function pointers (at assignment sites ''and'' at call sites),
and provide recommended changes to improve clarity.

Specific examples will accumulate in the Comments below.

Ticket to be closed when my scan of the project is complete,
and all call sites have been resolved (whether the resolution
is to improve them now, file a ticket for later improvement,
or where we will be leaving the code unchanged).

''(This also makes the code robust against the rare but troublesome
case where an external function changed from a function to
a function pointer ... we may never do this, but it is always
good to foster good code hygene.)''",enhancement,https://github.com/nasa/PSP/issues/46
SPARC Leon3 memory alignment sensitivity and handling,"In our CFS_TST/ut699_vxworks6.9 build, I have noted that there are still cfe/osal/psp build warnings (49). On ut699/VxWorks, they are almost all memory alignment warnings. 
""warning: cast increases required alignment of target type""

I understand why we are getting theses, and only on this processor(not linux or PPC-based processors - for these ones, either the processor or compiler will compensate for unaligned accesses).  The SPARC processor is sensitive to memory alignment (in fact neither the processor or compiler will align for you, it just will crash and generate a memory alignment exception).  It is a trade between hardware and compiler complexity and performance.  I enabled the mem align warning in the compiler options.  I have not looked at every single one of these warning cases, but most are something like
char *ptr to a buffer or just a char buf[100], then later there is code that casts a uint32 pointer to the buffer to access it - this is where you get the warning.  The char * or char buf could end up on an odd address, the compiler does not guarantee allocation to an even address.  However, in all of these cases, it has to currently be allocating to even, 32-bit aligned addresses (which is most efficient for memory access).

We need to look at these warning cases(these exit not only in the PSP but in the cFE and OSAL) and see if there is a better way to implement.

The other and probably better option is to develop an exception handler that would trap the alignment exception and then still perform the access, there is a small performance hit if/when this occurs, but it beats crashing any day.
","enhancement, invalid",https://github.com/nasa/PSP/issues/45
change * to ** in cfe_psp_memory.c,"For improved efficiency consider changing 1st argument to be a double pointer of type void, and not a single pointer of type void.  Then a straight assignment can be used in place of memcpy(used to copy 4 bytes). This will be an API change. 

{{{
int32 CFE_PSP_WriteToCDS(void *PtrToDataToWrite, uint32 CDSOffset, uint32 NumBytes)
}}}
to 
{{{
int32 CFE_PSP_WriteToCDS(void **PtrToDataToWrite, uint32 CDSOffset, uint32 NumBytes)
}}}
Need to assess this proposed change.  Why was it implemented the way it was originally?
","enhancement, wontfix",https://github.com/nasa/PSP/issues/44
Use more accurate return codes,"In cfe_psp_memory.c, original code returns OS_ERROR(-1) error code, modified at some point to return CFE_PSP_ERROR(-1), but really should more acurratley use CFE_PSP_INVALID_POINTER(-2).  However, this would basically change the API though by returning -2 instead of -1.  Need to determine not sure how well any calling code checks return value and assess the impacts of this potential change.",enhancement,https://github.com/nasa/PSP/issues/43
unld PSP core unit test causes a processor exception,"load and run test, then unload, and load again to run test a 2nd time and redirect output to a file results in an exception on the 2nd load.  This issue is only see in the way the unit tests were trying to be run.  It is not any sort of system runtime issue.

-> unld ""core_UT.o""                                                             
value = 0 = 0x0                                                                 
-> ld<core_UT.o  

grlib> run 0
IU in error mode (tt = 0x2b)
 652c35f8  80a06063   cmp  %g1, 99
grlib> hist
 1042809817            ahb read,  mst=0, size=2    [6117d400 06117881]
 1042809824            ahb read,  mst=0, size=2    [61178800 06117891]
 1042809831            ahb read,  mst=0, size=2    [61178900 0000008e]
 1042809837            ahb write, mst=0, size=2    [61178900 000000ae]
 1042809873            ahb read,  mst=0, size=2    [00000000 10800400]
 1042809874  652c35d8  ld  [%g1], %g1              [10800400]
 1042809877  652c35dc  add  %g1, 1, %g2            [10800401]
 1042809878  652c35e0  sethi  %hi(0x0), %g1        [00000000]
 1042809879  652c35e4  or  %g1, %g1                [00000000]
 1042809886            ahb write, mst=0, size=2    [61178900 000000ee]
 1042809889  652c35e8  st  %g2, [%g1]              [00000000 10800401]
 1042809890  652c35ec  sethi  %hi(0x0), %g1        [00000000]
 1042809891  652c35f0  or  %g1, %g1                [00000000]
 1042809892            ahb write, mst=0, size=2    [00000000 10800401]
 1042809892  652c35f4  ld  [%g1], %g1              [10800401]
 1042809903            ahb read,  mst=0, size=2    [652c3600 01000000]
 1042809904            ahb read,  mst=0, size=2    [652c3604 03000000]
 1042809904  652c35f8  cmp  %g1, 99                [trapped]

grlib> reg

	  INS       LOCALS      OUTS     GLOBALS
   0:  00000064   F3401FC4   6123E878   00000000
   1:  00000000   652C35C8   6123EB10   10800401
   2:  6123EB10   652C35CC   00000000   10800401
   3:  0000000A   00000010   00000177   00010007
   4:  652C7FC8   00000800   00002800   00000007
   5:  0000000A   00000177   00000001   00000000
   6:  61175150   611B88B8   611750E8   00000000
   7:  6013FB3C   601CC000   600ACEE4   00000000

 psr: F3401FE4   wim: 00000008   tbr: 60001050   y: 00000000

 pc:  652c35f8  cmp  %g1, 99                
 npc: 652c35fc  ble  0x652c363c     

","bug, invalid",https://github.com/nasa/PSP/issues/42
Update grut699-vxworks6 cfe_psp_start.c per white box unit testing results,"During white box testing the following issue was identified with the grut699-vxworks6 version of cfe_psp_start.c

* In CFE_PSP_GetRestartType, the input pointer is not checked for NULL prior to dereferencing it.

Issue identified during #14  white box testing, commit: [changeset:ad4e7c5f]","bug, invalid",https://github.com/nasa/PSP/issues/41
Update grut699-vxworks6 cfe_psp_timer.c per white box unit testing results,"During white box testing the following issue was identified with the grut699-vxworks6 version of cfe_psp_timer.c

* CFE_PSP_Get_Timebase - possible divide by zero in the calculation:

lower /= sysTimestampFreq() / 1000000UL

if sysTimestampFreq() returns a number less than 1000000UL.

Issue identified during #14  white box testing commit: [changeset:eade737]
","bug, invalid",https://github.com/nasa/PSP/issues/40
Limit the calculated results in CFE_PSP_WatchdogSet,"CFE_PSP_WatchdogSet computes a new value to set the watchdog timer to, but does not limit the results to the specified min and max values (CFE_PSP_WATCHDOG_MIN and CFE_PSP_WATCHDOG_MAX).

The calculation is also not protected from overflowing the possible range, so it is possible to get a much different result than expected.

Issues identified during #14  white box testing commit:[changeset:998ebe4a] ","bug, invalid",https://github.com/nasa/PSP/issues/39
CFE_PSP_MemRangeSet() description error,"CFE_PSP_MemRangeSet() in cfe_psp_memrange.c has a comment error on the MemoryType argument that could be misleading.

CFE_PSP_MemRangeSet() validates against CFE_PSP_MEM_RAM and CFE_PSP_MEM_EEPROM types and errors out with any other type.  (This is consistent with the CFE_PSP_MemValidateRange() implementation.)  But the source file comments for CFE_PSP_MemRangeSet() have (cfe_psp_memrange.c, line 188):
{{{
<...snip...>
**
** Parameters: 
**    RangeNum --   A 32 bit integer ( starting with 0 ) specifying the MemoryTable entry.
**    MemoryType -- The memory type to validate: CFE_PSP_MEM_RAM, CFE_PSP_MRM_EEPROM, or CFE_PSP_MEM_ANY
**    Address --    A 32 bit starting address of the memory range
<...snip...>
}}}

That last ""or CFE_PSP_MEM_ANY"" is incorrect.",bug,https://github.com/nasa/PSP/issues/38
Update grut699-vxworks6 cfe_psp_memory.c per white box unit testing results,"During white box testing a number of functions were identified which return CFE_PSP_ERROR rather than CFE_PSP_INVALID_POINTER for NULL pointers.  Functions include:
CFE_PSP_GetCDSSize
CFE_PSP_WriteToCDS
CFE_PSP_ReadFromCDS
CFE_PSP_GetResetArea
CFE_PSP_GetUserReservedArea
CFE_PSP_GetVolatileDiskMem
CFE_PSP_GetKernelTextSegmentInfo
CFE_PSP_GetCFETextSegmentInfo

Other issues:
Several functions take two pointer arguments, but only check if one is a NULL pointer.

Should check calling functions to see if changes to the return values may potentially cause issues.

Issues identified during #14  white box testing commit: [changeset:612f00f3]
","bug, invalid",https://github.com/nasa/PSP/issues/37
CFE_PSP_MemCpy doesn't handle overlapping ranges,"**CFE_PSP_MemCpy()** in cfe_psp_memutils.c does not contain any logic for handling the case where the source and destination memory regions overlap.  

The current grut699-vxworks6 implementation currently calls the C memcpy(), which is documented to have undefined behavior in this case.","bug, wontfix",https://github.com/nasa/PSP/issues/36
CFE_PSP_MemCpy/Set not checking for NULL pointer args,"In the psp/fsw/shared/cfe_psp_memutils.c, the **CFE_PSP_MemCpy()** and **CFE_PSP_MemSet()** do not check for null pointer arguments.

If a null pointer is passed then a segfault occurs.  Both function signatures already have a return value for an error code.  

**However, we have an API problem in practice:**

**CFE_PSP_MemCpy()** is called by these CFS apps: **CF, CI, CS, FM, HK, io_lib, MD, MM, SBN, SBN653, and SC**, by the cFE **ES, EVS, FS, SB, and TBL** but the function return value is not checked by **any** of them.  The same goes for **CFE_PS_MemSet()**, it is also called by CFS apps: **CF, CI, CS, DS, FM, io_lib, LC, LCX, MD, MM, SBN653, SC, SCH and TO**.  It is also called by cFE **ES, EVS, FS, SB, TBL and TIME** where none of them check the return value.

It appears that either the PSP return value was added later than most of the client development OR client developers just assumed a C-like behavior with no return values.","bug, wontfix",https://github.com/nasa/PSP/issues/35
CFE_PSP_MemRead/Write() not checking for NULL pointer args,"In the psp/fsw/shared/cfe_psp_ram.c, we have CFE_PSP_MemRead8/16/32 and CFE_PSP_MemWrite8/16/32 functions.  They all take memory addresses as uint32 values and the *Read functions take a pointer.  All of these addresses & pointers are happily dereferenced without checking for a null pointer.  (The -16 and -32 read/write functions DO check for alignment and error out.)

Some spot-checks revealed a larger problem: some clients that call these functions don't look at the return value.

CFE_PSP_MemRead8(): The CFS **MD** does check the return value in md_dwell_pkt.c, but **MM** does not in 10 call sites (mm_dump.c and mm_mem8.c), and cFE's **ES** doesn't check the status.  

CFE_PSP_MemWrite8(): The CFS **MMM** does not check the return value in 4 call sites (mm_load.c and mm_mem8.c).

Similar results for CFE_PSP_MemRead16(), CFE_PSP_MemWrite16(), CFE_PSP_MemRead32(), and CFE_PSP_MemWrite32().

Recommendation: Since these return an error code already, these functions should check for null pointers/addresses.  But ES and MM should be fixed to properly check the return codes first.","bug, wontfix",https://github.com/nasa/PSP/issues/34
PSP API for onboard devices,"This has been split off from #6 
PSP needs to define some common API/framework for communication with onboard devices.  This would present a consistent API so CFS code can be better abstracted from the hardware implementation details.

For instance, if a serial controller device is present on the board, it would speak the same protocol regardless of whether the physical devices is connected over RS232, RS485, an LVDS link, or some other link.  However the configuration API and the means to communicate over these different types of interfaces differs.  Some boards might have dedicated hardware channels, others might ""bit bang"" with GPIO, etc.

The PSP should abstract this difference and present a similar API so the CFS code that talks to these devices can be portable.  The standardization work being performed by the CCSDS SOIS working group may be relevant here as well.","enhancement, invalid",https://github.com/nasa/PSP/issues/33
Add SP0 PSP,"Add the AiTech SP0 PSP developed at JSC.  It is still under development, but the basics appear to work.
- watchdog and exception handling code not done yet",enhancement,https://github.com/nasa/PSP/issues/32
"Fix ""utbsp.h"" not found failure when building on some platforms","Testing on other platforms revealed an issue regarding the include path for the utassert header files.

In particular, the latest Ubuntu (15.04) failed to build due to ""utbsp.h"" not being found.  (This may be related to the more recent CMake v3.0.2)
","bug, invalid",https://github.com/nasa/PSP/issues/31
"Update ""beaglebone-linux"" PSP","LaRC is contributing a Beagle Bone Linux PSP, which is based on the CFS 6.4.1 version of the PC-Linux PSP. It is now present in the cfs_psp project tree under the ""ic-LaRC-beaglebone-linux"" branch on Babelfish, based at the 6.4.1 release.

This PSP does not yet have the following updates to bring it up to match the development versions of the other PSPs:

#4  enhanced build script
#5 - change uint32 to cpuaddr
#6 - dependency management
#19   compatibility with CFE ""const"" API
#21 - clean up build macros

","enhancement, invalid",https://github.com/nasa/PSP/issues/30
Outdated License(?),"Many files in the PSP (and one in the CFS) contain a file license header that seems to be outdated?  It doesn't reference the NOSA, and seems to include restrictions that are in conflict with the NOSA (see the 2nd paragraph).  Note, Working with the SourceForge cFE release.

An example:
{{{
**      Copyright (c) 2004-2006, United States government as represented by the
**      administrator of the National Aeronautics Space Administration.
**      All rights reserved. This software(cFE) was created at NASA Goddard
**      Space Flight Center pursuant to government contracts.
**
**      This software may be used only pursuant to a United States government
**      sponsored project and the United States government may not be charged
**      for use thereof.
}}}

A quick grep showed these files:
{{{
find . -type f -exec grep -li ""This software may be used only"" {} \;
./CFS/hs/fsw/unit_test/cfe_psp_timer.c
./cFE/psp/fsw/mcp750-vxworks6.4/inc/psp_version.h
./cFE/psp/fsw/mcp750-vxworks6.4/inc/cfe_psp_config.h
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_support.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_start.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_ssr.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_voltab.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_exception.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_watchdog.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_timer.c
./cFE/psp/fsw/mcp750-vxworks6.4/src/cfe_psp_memory.c
./cFE/psp/fsw/inc/cfe_psp.h
./cFE/psp/fsw/arm-linux/inc/psp_version.h
./cFE/psp/fsw/arm-linux/inc/cfe_psp_config.h
./cFE/psp/fsw/arm-linux/src/cfe_psp_support.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_start.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_ssr.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_voltab.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_exception.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_watchdog.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_timer.c
./cFE/psp/fsw/arm-linux/src/cfe_psp_memory.c
./cFE/psp/fsw/pc-cygwin/inc/psp_version.h
./cFE/psp/fsw/pc-cygwin/inc/cfe_psp_config.h
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_support.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_start.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_ssr.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_voltab.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_exception.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_watchdog.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_timer.c
./cFE/psp/fsw/pc-cygwin/src/cfe_psp_memory.c
./cFE/psp/fsw/mac-osx/inc/psp_version.h
./cFE/psp/fsw/mac-osx/inc/cfe_psp_config.h
./cFE/psp/fsw/mac-osx/src/cfe_psp_support.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_start.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_ssr.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_voltab.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_exception.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_watchdog.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_timer.c
./cFE/psp/fsw/mac-osx/src/cfe_psp_memory.c
./cFE/psp/fsw/pc-linux/inc/psp_version.h
./cFE/psp/fsw/pc-linux/inc/cfe_psp_config.h
./cFE/psp/fsw/pc-linux/src/cfe_psp_support.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_start.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_ssr.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_voltab.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_exception.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_watchdog.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_timer.c
./cFE/psp/fsw/pc-linux/src/cfe_psp_memory.c
./cFE/psp/fsw/grut699-vxworks6/inc/psp_version.h
./cFE/psp/fsw/grut699-vxworks6/inc/cfe_psp_config.h
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_support.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_start.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_ssr.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_voltab.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_exception.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_watchdog.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_timer.c
./cFE/psp/fsw/grut699-vxworks6/src/cfe_psp_memory.c
./cFE/psp/fsw/mcf5235-rtems/inc/psp_version.h
./cFE/psp/fsw/mcf5235-rtems/inc/cfe_psp_config.h
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_support.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_start.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_ssr.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_voltab.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_exception.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_watchdog.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_timer.c
./cFE/psp/fsw/mcf5235-rtems/src/cfe_psp_memory.c
}}}
",bug,https://github.com/nasa/PSP/issues/29
PSP startup code should confirm that OS_API_Init worked,"If the {{{OS_API_Init()}}} call fails for some reason, it means that the OSAL services are not available.

This can result in some very strange and hard-to-debug situations, if it gets so far as to use underlying OS primitives that have not been initialized.  Proceeding to call CFE Main after a OS_API_Init failure is undefined and almost certain to deadlock the process. 

It would be preferable to call the PSP Panic function to make the initialization failure obvious.",bug,https://github.com/nasa/PSP/issues/28
Race condition: PSP timer callbacks are set up and started before CFE_TIME is running,"This was the point brought up by Chris Monaco during today's CCB meeting while discussing the CFE core app startup dependencies

The reference tickets in cfe: [https://babelfish.arc.nasa.gov/trac/cfs_cfe/ticket/40] and [https://babelfish.arc.nasa.gov/trac/cfs_cfe/ticket/42]

The problem is that the PSP actually starts the timer before calling CFE_ES_Main().  Depending on how long it takes to reach the initialization for CFE_TIME, the timer may fire and call the 1Hz function before the semaphore is created or the 1Hz task is started.

**NOTE**:
This issue actually becomes moot when the latest {{{posix-ng}}} or {{{rtems-ng}}} OSAL is used.  With this version a mutex ID of 0 is never valid, and attempting to ""give"" that mutex will fail in a benign manner and do nothing.  Although it is not an ideal fix, there is no chance of problems occurring due to this when using these OSALs. 

**ALSO NOTE**:
Delaying the start of the 1Hz tick may not be an option because this means scheduling will not work until CFE_ES_Main() returns, which may be considerably delayed if apps have long startup sequences, or if they actually depend on the 1Hz signal in order to start properly.

",bug,https://github.com/nasa/PSP/issues/27
Small Fixes pc-rtems BSP,"This fixes a number of small issues found when testing the ""pc-rtems"" PSP:

* when compiling with -pedantic, gcc complains about the old-style initializer syntax
* move the shell init call earlier in the main process, this is more logical placement and allows for a working console in the event that the CFE Main function has a problem.
* utilize the OS_API_Wait call implemented in the newest OSAL
* remove conditional compiles around timer setups (it is not expected this PSP will be used with earlier OSAL versions)

",bug,https://github.com/nasa/PSP/issues/26
Fix pc-linux PSP for the latest OSAL,"Several items in the pc-linux PSP can be removed/cleaned up when using the newest revisions of OSAL:
* The hack to use {{{-m32}}} can be removed as the latest osal works with 64 bit natively
* The installation subdirectory should be ""cf"" rather than ""eeprom1""
* The task priority modifications done in main() (cfe_psp_start.c) are now integrated into OS_API_Init and OS_API_Wait so these can be removed.
",bug,https://github.com/nasa/PSP/issues/25
Enforce Strict ASCII,Replace all non-ASCII characters (i.e. copyright symbol) with ASCII equivalent.,"bug, wontfix",https://github.com/nasa/PSP/issues/24
Fix inclusion of PSP internal headers from within public headers,"The PSP public {{{cfe_psp.h}}} file includes configuration and version information from another file which is located in the PSP platform-specific (internal) subdirectory.

Specifically, these headers are platform-specific and therefore must only be used within PSP itself:
* cfe_psp_config.h
* psp_version.h

Access to the values within these platform-specific includes should go through the public API rather than direct inclusion.",bug,https://github.com/nasa/PSP/issues/23
Add Xenomai BBB PSP,Add Xenomai BBB (Beagle Bone Black) PSP V1.0 as delivered from Matt Benson/Odyssey Space Research on 04/17/15,"enhancement, invalid",https://github.com/nasa/PSP/issues/22
"Clean up ""-D"" compile time macros used in pc-linux build","The ""pc-linux"" PSP defines the following to be added to the compiler CFLAGS for __all__ files in the mission:

{{{-D_EL -DENDIAN=_EL -DSOFTWARE_LITTLE_BIT_ORDER -D__ix86__ -D_ix86_ -Dposix -DX86PC -D_REENTRANT -D_EMBED_ -DOS_DEBUG_LEVEL=3}}}

These were brought into the cmake build from the original build scripts in order to be consistent just in case any code required it.  However, they are unnecessary, many are not even used anywhere in CFE/OSAL, and potentially even wrong.  

The reality is that with Linux, the ""pc-linux"" is a general purpose PSP that can most likely be used on __any__ general-purpose development machine that runs Linux.  It is not limited to only x86 PC's, and in fact works just fine on ARM, PowerPC, and Microblaze targets too.

I have successfully used the (unmodified) pc-linux PSP to execute CFE on a BeagleBone Black (ARM) as well as an emulated PowerPC 440 based development machine.  In all these cases, the ""x86"" macros are wrong, and on the PowerPC, the EL/ENDIAN/SOFTWARE_LITTLE_BIT_ORDER are wrong too.

To summarize - I recommend removing **ALL** of these macros from the pc-linux build when using the cmake scripts (the old makefiles can stay as-is).


",bug,https://github.com/nasa/PSP/issues/21
2015-03-10 Integration Candidate,"CCB meeting on 2015-03-10 authorized Joe's changes currently
merged in the CFE project, together with CMake support in
all projects, as the next development branch.

The final list of changesets is as follows:

* [changeset:3c29724] #4 CMake Support
* [changeset:3d3d2c5] #8  Change uint32 to cpuaddr
* [changeset:f633fda] #9  Dependency Management
* [changeset:731c533] #13  pc-rtems PSP
* [changeset:daf6ab4] intermediate merge of the above changes
* [changeset:cea350d] #19  (rebased) Compatibility with CFE ""const"" API
* [changeset:4695f60] #21  (rebased) Clean up build macros
* [changeset:945cb59] Revised merge including the above changes

",,https://github.com/nasa/PSP/issues/20
PSP modifications for const-correct CFE API,"For context, see trac 28 in the CFE repository: [https://babelfish.arc.nasa.gov/trac/cfs_cfe/ticket/28]

The CFE API has been updated such that the pointer arguments in functions called via the PSP are now declared ""const"".  This helps in several ways, but the most important reason is so they can be safely supplied from a data structure in ROM rather than requiring that the data structure be copied to RAM first.



",bug,https://github.com/nasa/PSP/issues/19
Implement Continuous Integration tests of cFS PSP tree,"Need to construct a CI plan that builds everything that can be built in `cfs_psp` and runs all of the local test programs that are suitable for fast turnaround automatic test cycles.

","enhancement, good first issue, continuous-integration",https://github.com/nasa/PSP/issues/18
2015-03-10 Integration Candidate,"CCB meeting on 2015-03-10 authorized inclusion of
the CMake related changes as part of the next
integration test and merge cycle.

For the CFS_PSP project, this includes

* [changeset:3c29724] #4 enhanced build system
",duplicate,https://github.com/nasa/PSP/issues/17
consider adding PSPs developed at JSC,"JSC has developed a number of PSPs as listed in the attachment.  Consider adding some or all to repo.

","enhancement, invalid",https://github.com/nasa/PSP/issues/16
provide grut699-vxworks6 PSP updates,"JSC developed grut699-vxworks6 PSP from JSC's subversion repo rev 1202 was provided to GSFC and released with cFE 6.41.

Since its release, changes have been made that need to be push to the main repo.

JSC Redmine issue #158 8
Fixes get time base issue in grut699 PSP 
As currently implemented, CFE_PSP_Get_Timebase() does not set tbu and tbl correctly, based on

From cfe_es_perf.c::CFE_ES_PerfLogAdd()
/* Time is stored as 2 32 bit integers, (TimerLower32, TimerUpper32): /
/ TimerLower32 is the curent value of the hardware timer register. /
/ TimerUpper32 is the number of times the timer has rolled over. /
/ /
/ Time is stored as a absolute time instead of a relative time between log /
/ entries. This will yield better accuracy since storing relative time between /
/ entries will accumulate (rounding/sampling) errors over time. It also is /
/ faster since the time does not need to be calculated.

For this board, since upper is seconds and the 32-bit timer register is reset to 
0 (basically rolled over) every second that exactly fits this definition.

upper = g_nSecondsCount; <-- upper is correct

lower needs to be changed 
FROM 
lower = sysTimestampLock();
lower /= sysTimestampFreq() / 1000000UL;

TO
lower = sysTimestampLock();

When using using the 64-bit TBR on PPC processors, this definition still fits, because 
the upper 32-bits increments each time the lower 32-bits rolls over at 2^32.

Also, in cfe_psp_timer.c, I am pretty sure that CFE_PSP_TIMER_LOW32_ROLLOVER should 
be 9375000 instead of 0. It rolls over each second at 9375000 ticks. 0 means it rolls 
over at its max (2^32) value, which in this case it does not.

NOTE: This only impacts the correctness of performance log data time tags. No other code in CFS uses this function.

JSC Redmine issue 18 55
PSP updates for cFE 6.4.x compatibility

In compiler-opts.mak, changed
FROM:
    $(CFE_TOOLS)/elf2cfetbl/elf2cfetbl
TO
    TABLE_BIN  = elf2cfetbl
    
Also, changed PSP rev to 1.2","bug, invalid",https://github.com/nasa/PSP/issues/15
Add PSP unit tests,"Currently, the JSC developed PSP unit tests are not included in the CFS release.  They currently work with pc-linux and OrionSCP PSPs.  Updates to so that they work with a VxWorks target PSP are in work (ut699-vxworks6.7 PSP)

These updates are being tracked in the JSC subversion repo and need to be pushed into a proper git branch and further work continued from there.",duplicate,https://github.com/nasa/PSP/issues/14
Add pc-rtems PSP,"""pc-rtems"" is a PSP implemented for running CFE on standard PC hardware using the RTEMS OS.

It is mainly targeted at debugging or proof-of-concept validation using QEMU as an emulator to provide a virtual PC hardware.

It can also potentially be used as a build target for bamboo builds to ensure that all code builds, links, and runs properly using RTEMS.

","duplicate, enhancement",https://github.com/nasa/PSP/issues/13
Document available PSPs in trac wiki,"It would be helpful to construct a small Wiki page corresponding
to each Platform Support Package giving a quick overview of
the platform for which support is being provided.

I suggest including hotlinks on each such page back into the `doc`
subtree of the specific PSP for extended documentation -- as clones
will obtain the content of the project sources but do not clone
the Trac wiki.
",bug,https://github.com/nasa/PSP/issues/5
Add pc-rtems PSP,"""pc-rtems"" is a PSP implemented for running CFE on standard PC hardware using the RTEMS OS.

It is mainly targeted at debugging or proof-of-concept validation using QEMU as an emulator to provide a virtual PC hardware.

It can also potentially be used as a build target for bamboo builds to ensure that all code builds, links, and runs properly using RTEMS.

",enhancement,https://github.com/nasa/PSP/issues/12
PSP needs unit tests,"This project has no unit tests that can be run as part of an automatic build-and-test cycle to assure that a change has not broken fundamental behaviors.

We need central portable unit tests that can be run against any PSP that check the basic behaviors required of every PSP, and a way for individual PSPs to provide additional unit tests that verify any PSP-specific required behaviors.
","duplicate, enhancement",https://github.com/nasa/PSP/issues/11
"PSP memory, port, and EEPROM functions assume direct-mapped access","The PSP currently provides a number of access functions such as CFE_PSP_MemWrite8/16/32, CFE_PSP_PortRead8/16/32, etc.

These functions all assume that the memory is directly accessible to the current process by simply casting the address as a pointer and directly reading/writing from it.  Unfortunately this is often ***NOT*** the case.
* I/O port access in the x86/intel world is never memory mapped and requires different instructions (inline asm or kernel syscalls) in order to get to it.
* When using virtual memory, physical memory addresses are not directly accessible to the running process until the memory is mapped into the current virtual memory space.
* Many EEPROM devices are actually connected via a serial bus such as SPI or TWI and therefore would not be memory mapped.

With the way it is structured right now, cfe_psp_ram.c, cfe_psp_port.c, and (to a lesser degree) cfe_psp_eeprom.c only provide slow performance-robbing function calls to simply cast a pointer.

Furthermore, it is arguable whether direct I/O port or physical memory access even belongs in the PSP at all; the API this provides to the application layer remains far too hardware-specific to provide any useful abstraction.  Any CFS application performing direct I/O is already unlikely to be portable to any other platform, since (by definition) this would be accessing a specific hardware device at a specific location.

Proposed changes:
* Stop compiling cfe_psp_ram.c, cfe_psp_port.c, and cfe_psp_eeprom.c from the ""shared"" code by default; what these currently implement is more of an exception than the general rule.  These can be renamed or moved to indicate they are not always used.
* Deprecate/discourage future use of the RAM/port access functions.  Instead, a ""driver"" architecture should be used so the hardware device can be better abstracted (see #6   This also allows easier simulation of the hardware, and the resulting CFS application will be much more portable/reusable.
* On the PSP's for which direct memory access //is// valid, they can continue to compile-in the current implementations to maintain backward compatibility.
* On the PSP's for which direct memory access //is not// valid, either customized functions can be provided or simply return the NOT_IMPLEMENTED error.


",enhancement,https://github.com/nasa/PSP/issues/10
"Remove references to ""cfe_platform_cfg.h"" from PSP","For maximum portability and the simplest build process, the PSP library should be completely independent of the specific CFE configuration that is running on top of it.  The PSP's behavior should be dictated entirely by the capabilities/capacities of the platform it is supporting, not the application using it.

As such, it should not need to directly ""compile-in"" any values or definitions from the application layer (cFE).

* The ""reset types"" returned by the PSP functions use a definition that comes directly from the CFE ES core application.  Since the hardware platform is what actually defines the different reset types, the definition of these types really belongs in the PSP.
* For memory area sizes, a better differentiation should be made between the size of memory that the hardware provides (capacities) and the sizes that cFE needs in order to operate (requirements).  Currently only one value is defined for both which is not really accurate; the cfe_platform_cfg.h defines the cFE requirements but the capacities are fixed by the physical hardware available.
",bug,https://github.com/nasa/PSP/issues/9
Fix all PSP Memory functions that use a uint32 for memory addresses,"Many functions within the PSP code use a uint32 to store a memory address.  This practice reduces code portability, most importantly it completely breaks on 64-bit processors.

Reference [https://babelfish.arc.nasa.gov/trac/cfs_cfe/ticket/7]

At a minimum the uint32 should be replaced with an integer type guaranteed to be wide enough for memory addresses on the local CPU.

Note that this change depends on having an OSAL that offers the ""cpuaddr"" type for this purpose.
",bug,https://github.com/nasa/PSP/issues/8
Clean up shared EEPROM read/write implementation,"The code in ""cfe_psp_eeprom.c"" is far more complicated than it needs to be.

The objective of this code appears to be to accomplish basic read/writes of 8, 16, or 32 bit values to a memory device that only supports 32 bit access.  Therefore for words less than 32 bits it performs a read-modify-write sequence.  

It has a completely separate implementations for big endian vs little endian.  The code could be easily made endian-neutral and MUCH simpler by first reading the 32 bit value into a union and then performing simple byte/word access to update the value, then write it back.  All #ifdefs would become unnecessary and the code would be much more straightforward.





","enhancement, wontfix",https://github.com/nasa/PSP/issues/7
PSP modular build enhancements,"Currently, in order to support a different variant of a board, such as one that has the same processor but different set of peripherals, one must ""clone"" the entire PSP of the board and modify it to support the new board.

The problem with this approach is that as usage becomes more widespread we will end up with a large number of similar-but-different PSPs needing maintenance.  Any change to the CFE that requires PSP support will require updating ALL VARIANTS of the PSP which will become increasingly difficult.

The CMake build system introduced in ticket #4 as the ability to //statically// link in a set of extra mission-defined code modules into the PSP library.  With this system in place, CFS applications can bind to specific ""PSP drivers"" at runtime.

This is analogous to statically linking driver modules into the Linux kernel depending on the hardware configuration.  As long as the interface is the same (e.g. ""/dev/ttyS*""), the application need not know what hardware is actually providing the interface.

This allows code re-use in many ways:
* A single PSP can support multiple physical board variations by loading a different module set.
* Multiple PSP's can leverage the same drivers where appropriate (e.g. an ADC driver that communicates over a serial bus can work equally well on ARM, x86, or PPC as long as it has a compatible serial bus).
* As long as all similar-function PSP modules provide the same application-facing API, any CFS application implementing ""business logic"" can operate in a completely hardware-independent manner.  The driver module can be replaced with a different module and the CFS application does not need to change (or even be recompiled) to work with alternate hardware.

This framework should help avoid the need to ""clone-and-own"" a PSP for a particular project.  This is especially true for Linux PSPs which are already very generic (e.g. pc-linux easily runs on ARM Linux or PPC Linux).  The framework is a very simple extension to the PSP and does not change existing PSP APIs so it will not interfere with existing code.

",enhancement,https://github.com/nasa/PSP/issues/6
Enhanced build system for cFS,"This ticket is for the PSP portion of the enhanced build system pushed out under the corresponding cFS ticket:

[https://babelfish.arc.nasa.gov/trac/cfs_cfe/ticket/1]
",enhancement,https://github.com/nasa/PSP/issues/4
Release candidate 1.4 merge to master,"**Describe the contribution**
Bulk merge to 6.7, plus bug fix #22 and version update

**Testing performed**
Steps taken to test the contribution:
1. Checked out cFS rc-6.7.0, updated to latest cFE/OSAL/PSP rc branches and setup/built via standard instructions
2. Ran cFE and observed version update
```
EVS Port1 42/1/CFE_ES 2: Versions:cFE 6.7.0.0, OSAL 5.0.0.0, PSP 1.4.0.0, chksm 47578
```

**Expected behavior changes**
Minor behavior changes will be documented in the VDD upon release (no major/requirements updates)

**System(s) tested on:**
 - cFS development server
 - Ubuntu 16.04.6, 4.4.0-146-generic, x64
 - 6.7.0 bundle

**Additional context**
None

**Contributor Info**
Jacob Hageman/NASA-GSFC

**Community contributors**
CLA on file",,https://github.com/nasa/PSP/pull/3
Added auto build capabilities using Travis-CI,"**Describe the contribution**
Auto build capabilities added using Travis-CI

**Testing performed**
Steps taken to test the contribution:
1. Verified auto build performed when new code is pushed to Github

**Expected behavior changes**
 - Auto build will be performed whenever new code is pushed to GitHub
 
**System(s) tested on:**
 - GitHub - Linux Xenial distribution

**Additional context**
none

**Contributor Info**
Travis Wheatley - Emergent Space Technologies

**Community contributors**
Work performed for NASA ""Task 3015""",duplicate,https://github.com/nasa/PSP/pull/2
switch PSP to use OSAL timers rather than itimers,"[(this is the same as trac 76 in babelfish)

PSP should use the OSAL timer API for the main (1hz) timer.",duplicate,https://github.com/nasa/PSP/issues/1
