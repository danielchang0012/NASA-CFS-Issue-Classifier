text,label
"fix # <number> , convert <code> return codes and variables to <code> <section> - fixes # <number> - most <code> return codes converted over to <code> - <code> <code> / <code> variables holding cfe return codes converted to <code> <section> github ci actions all passing successfully . <section> no change to behavior . <code> is more expressive and improves consistency with cfe / cfs . <section> avi weiss <user>",2
sc <code> return codes and variables should be converted to <code> <section> sc has a few return codes ( as well as local <code> / <code> variables which hold <allcaps> cfe </allcaps> return codes ) that can be easily converted over to the <code> typedef . <section> use the more expressive <code> and improve consistency with cfs . <section> avi weiss <user>,2
"fix # <number> , update command code underscores for consistency <section> - fixes # <number> - a few command codes with inconsistent underscores separating words were updated to better fit the cfs / cfe naming conventions <section> github ci actions all passing successfully ( incl . unit tests and build + run ) . <section> no change to behavior . improved consistency and clarity . note : there are similar issues with some of the sc eids lacking underscores between words : e . g . <code> <section> avi weiss <user>",2
command code / enum naming convention inconsistencies <section> - similar to lc issue : <url> - sc also has a few command code macros that are not consistent with the enumeration identifiers or the command function name ( all are cases of <number> words being combined into <number> ) . <section> <code> <code> ( should be <code> ) <code> <code> ( should be <code> ) . <repeated> and a couple more . <section> identifiers should conform to the cfs / cfe naming convention with regard to consistent use of underscores to make mnemonics clear and readable . <section> avi weiss <user>,2
"sc_loadats_test_atsentryoverflow unit test indexes past array bounds <section> the <code> unit test indexes past array boundaries . there are two arrays that get indexed improperly , both in <code> : <number> . the first is a file - global variable , <code> - this array has <number> indexes ( <number> * <number> ) by default <number> . the second is local to <code> , named : <code> - this array has <number> indexes ( <number> / <number> ) by default in <code> , local variable <code> gets increased to a value of <code> . this variable is used to index into both of the above arrays . these accesses are indirect , through these pointers : - <code> - <code> also , i am not sure if i am understanding the test correctly , but it seems like <code> should be used instead of <code> , when initializing the <code> array . perhaps it would help to use more verbose variables than <code> and <code> . <section> <number> . add prints to print out the values of <code> before each <number> . run the unit tests <section> all of these out - of - bound accesses seem invalid , and should be able to be removed . this unit test should probably be revised and cleaned up anyway . for example , after the initial <code> loop , the test describes that its intending to fill the ( one ) last entry with an invalid value . however , what the actual test attempts to do is initialize two entries ( not one ) . additionally , this unit test does not do much verification of <code> to confirm that the function worked as expected . i ' d expect more than just a single <code> call . <section> <code> <section> - x86_64 - os : <allcaps> gnu </allcaps> / linux <number> - versions : draco rc4 <section> this issue only seemed to pop up when we built the linux target for a <number> - bit linux executable , with <code> . <section> keegan moore <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , squash static analysis ( codeql ) uninitialized variable warning <section> - fixes # <number> - initialize <code> to zero to avoid codeql warning / failure . <section> github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> codeql ci actions now passing without errors . <section> avi weiss <user>",2
squash static analysis ( codeql ) uninitialized variable warning <section> <url> image <img> <section> <code> variable triggering codeql ( potentially ) uninitialized variable warning on some prs . codeql is apparently unable to confirm if <code> is assigned a value in all execution paths ( i . e . if the top while block will always execute at least once ) . <section> code should compile without any serious static analysis failures . <section> avi weiss <user>,2
"table data pointer not successfully being re - acquired in sc_managetable * x ] i reviewed the [ contributing guide <url> . * [x ] i performed a cursory search to see if the bug report is relevant , not redundant , nor in conflict with other tickets . <section> sc is not able to successfully send commands . <section> attempt to send a command from a sc table . <section> stored commands executes nominally . <section> uint32 * tbladdr ; switch ( type ) { case <allcaps> ats </allcaps> : tblhandle = sc_operdata . atstblhandle [ arrayindex ] ; tbladdr = sc_operdata . atstbladdr [ arrayindex ] ; break ; case <allcaps> rts </allcaps> : tblhandle = sc_operdata . rtstblhandle [ arrayindex ] ; tbladdr = sc_operdata . rtstbladdr [ arrayindex ] ; break ; case <allcaps> append </allcaps> : default : tblhandle = sc_operdata . appendtblhandle ; tbladdr = sc_operdata . appendtbladdr ; break ; } /* release table data pointer */ cfe_tbl_releaseaddress ( tblhandle ) ; /* allow cfe to manage table */ cfe_tbl_manage ( tblhandle ) ; /* re - acquire table data pointer */ result = cfe_tbl_getaddress ( ( void <wink> & tbladdr , tblhandle ) ; <section> - hardware - os : [ e . g . linux <number> ] - versions [ e . g . cfe <number> , <allcaps> osal </allcaps> <number> , <allcaps> psp </allcaps> <number> for mcp750 , any related apps ] <section> dan knutsen <allcaps> nasa </allcaps> / goddard",0
"fix # <number> , apply consistent event id names to common events <section> - fixes # <number> - consistent event ids have been applied to the inconsistent cases to align them with a common event id naming convention . <section> only github ci actions . <section> no impact on code behavior ( no logic changes ) . consistent event id names for the events which are common to all / most cfs components and apps will improve consistency and ease make code review / debugging easier . <section> avi weiss <user>",2
"fix # <number> , remove unnecessary parentheses around return values . <section> - fixes # <number> - removes parentheses in return statements in sc that return a single value / term . this aligns these return statements with the predominant style of cfs . <section> none , prior to submission of the pull request . <section> no impact on behavior . <section> <user>",2
resolve issues building users guide with ubuntu <number> / doxygen <date> <section> doxygen <code> <section> remove unnecessary documentation <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"fix # <number> , reorder conditions in if statements to optimize code * x] i reviewed the [ contributing guide <url> . * x] i signed and emailed the appropriate [ contributor license agreement <url> to <email> and copied <email> . <section> fix # <number> , reordered conditions in if statements so less complex conditions are tested first <section> unit testing <section> no impact to behavior <section> - os : ubuntu <number> <section> haven carlson - <allcaps> nasa </allcaps>",2
"could simplify by just managing tables periodically vs by registering for command ( unique approach across common apps ) <section> for the standard <number> apps , sc is the only one to use the <code> <allcaps> api </allcaps> and manage tables on command . <url> <url> <url> <section> could instead just periodically manage all the tables ( like all the rest ) . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"redundant conditional ( and repeated code ) for determining <allcaps> ats a </allcaps> vs b <section> <code> is set by testing <code> against both <code> and <code> . not much point testing twice since the index is already assumed valid when used to dereference array elements . it ' s also repeated multiple times . <url> <url> <url> <section> implement logic once , and it ' s either a or b . <section> none <section> coverage issue <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , updates <allcaps> cla </allcaps> information for apache <number> deletes old sc clas , removes language in contributing . md of app - specific <allcaps> cla </allcaps> , adds link to new clas in pull_request_template <section> a clear and concise description of what the contribution is . - fixes # <number> - fixes <url> <section> visually inspected links in fork and in pr template . <section> all references to clas should be updated to the cfs app <allcaps> cla </allcaps> . <section> google chrome browser <section> none <section> justin figueroa , <allcaps> asrc </allcaps> federal",1
"update <allcaps> cla </allcaps> information * [ ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> have new clas given the change in <url> with the combined <allcaps> cla </allcaps> , <section> - [ ] update the instructions in each app ' s contributing . md - [ ] delete old <allcaps> cla </allcaps> pdfs - [ ] update pr and issue templates as needed <section> none <section> none <section> gerardo e . cruz - ortiz",1
remove cfe_psp_memset use for addresses in <allcaps> ram </allcaps> <section> should just use memset / memcpy for addresses in <allcaps> ram </allcaps> . the <allcaps> psp </allcaps> functions serve no use in this context . <section> replace with memset / memcpy . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"<allcaps> rts </allcaps> table file load "" failure "" event at startup misnomer causes build run workflow failure <section> the build and run workflow checks for err | warn | fail , but sc nominally sends the following event : <code> see error here : <url> <section> really this is not a failure . it ' s just than only <number> of up to <number> <allcaps> rts </allcaps> tables were loaded automatically . maybe just change to say ' <allcaps> rts </allcaps> table files not loaded automatically at startup = <number> ' or similar . <section> could set the configuration just to load the <number> existing <allcaps> rts </allcaps> ' s . <repeated> but it may be handy to leave as somewhat larger to avoid requiring recompile to add more default <allcaps> rts </allcaps> ' s . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
strict cppcheck static analysis style warnings <section> fails cppcheck strict static analysis workflow as seen here ( <url> <code> <section> fix the name inconsistencies . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"static analysis issues relative to flight code handful of static analysis issues in the "" red "" identified ( non - style issues ) . need to resolve these . filter : - file : elf - file : ut - file : cfe - file : os - file : cf_ - file : _lab_app . c ! ( significance : style ) should resolve and / or disposition the higher ranked ones at minimum . note license restricts publishing issues . imported from <allcaps> gsfccfs </allcaps> - <number>",0
remove all mentions of <allcaps> asist </allcaps> or <allcaps> itos </allcaps> artifacts from documentation some of our doxygen docs still reference <allcaps> asist </allcaps> or <allcaps> itos </allcaps> artifacts . see cfs_mm repo : fsw / src / mm_msgdefs . h : l28 imported from <allcaps> gsfccfs </allcaps> - <number>,1
apps should use cfe_msg_ptr macro instead of cast or local unwrapping apps typically cast to a cfe_msg_message_t or use * . msg . better to use abstracted cfe_msg_ptr . <allcaps> note </allcaps> - not backwards compatible with caelum so recommend not addressing in draco . imported from <allcaps> gsfccfs </allcaps> - <number>,2
sc : <allcaps> atp </allcaps> control block data has compiler added padding / / the below update to sc_tbldefs . h would explicitly add padding typedef struct { uint8 atpstate ; /* execution state of the <allcaps> atp </allcaps> */ uint8 atsnumber ; /* current <allcaps> ats </allcaps> running if any */ / / uint16 padding ; /* alignment padding */ uint32 cmdnumber ; /* current cmd number to run if any */ uint16 timeindexptr ; /* time index pointer for current cmd */ uint16 switchpendflag ; /* indicates that a buffer switch is waiting */ } sc_atpcontrolblock_t ; imported from <allcaps> gsfccfs </allcaps> - <number>,2
"use real headers and structures to define tables <allcaps> rts </allcaps> uses a relative time tag that is <number> bit native endian . current definition of tables uses a uint16 array which makes the table endian specific . could instead define a structure with the real contents ( headers and commands ) , union with an array to make it the right size , then use designated initializers . this would allow the compiler to handle the endianness . imported from <allcaps> gsfccfs </allcaps> - <number>",0
move table header definitions to table header sc_rtsentryheader_t and sc_atsentryheader_t are currently defined in sc_app . h : <url> <url> really should be owned by sc_tbldefs . h so that tables that use them do not need to include the entire sc_app . h . imported from <allcaps> gsfccfs </allcaps> - <number>,2
"sc code simplification - reduce copies required to read / send sb messages sc could use significant code refactoring and simplification . it would make code more readable , but could also reduce the number of copies required to read and send the software bus messages . imported from <allcaps> gsfccfs </allcaps> - <number>",2
streamline sc_getnextrtscommand and sc_parserts both functions use temporary buffers and potentially unnecessary copies . imported from <allcaps> gsfccfs </allcaps> - <number>,2
"allow rtsgrp commands to accept non - contiguous ranges currently the rtsgrp commands accept a range of rtss from start_index to end_index . instead , the command could accept a set of bytes where each bit corresponds to the <allcaps> rts </allcaps> to start . this would allow the group commands to work with a range of rtss that is non - sequential imported from <allcaps> gsfccfs </allcaps> - <number>",2
"add a continuertsonfailureflag to sc there is currently a "" continueatsonfailureflag "" that allows an operator to choose whether the processing of an <allcaps> ats </allcaps> should continue after an error has been encountered . there is currently no corresponding option for <allcaps> rts </allcaps> processing . imported from <allcaps> gsfccfs </allcaps> - <number>",2
combine loops in sc_buildtimeindextable there are two loops in sc_buildtimeindextable that appear to be easily combinable . imported from <allcaps> gsfccfs </allcaps> - <number>,2
sc_processatpcmd is very long - could be refactored imported from <allcaps> gsfccfs </allcaps> - <number>,2
"reorder conditions to optimize code in sc_processatpcmd , the following condition could be reordered : if ( ( ! sc_compareabstime ( sc_appdata . nextcmdtime [ sc_atp ] , sc_appdata . currenttime ) ) & & ( sc_appdata . nextprocnumber = = sc_atp ) & & ( sc_operdata . atsctrlblckaddr - > atpstate = = sc_executing ) ) since sc_compareabstime ( ) is more complex than the next two conditions , put it as the last one to save <allcaps> cpu </allcaps> cycles should any of the simple comparisons fail another small optimization : the "" stillprocessing = false "" condition could be moved out of the if and else blocks starting at line <number> in the sc_loadats function imported from <allcaps> gsfccfs </allcaps> - <number>",2
"consolidate similar functions sc_manageatstable , sc_managertstable , and sc_manageappendtable are similar enough that some consolidation may be possible . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"clarify code by making array index <number> reserved or unused the command interface to sc identifies rtss and atss starting with <number> , but the code identifies them starting with <number> . thus in each command , there is code to adjust the table number to the table index . code could be simplified by making array index <number> reserved or unused so that the conversion could be avoided . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"use os_stat to verify file existence in sc_loaddefaulttables , the os_opencreate function is used to verify that a file can be opened before any attempt is made to load a table from it . since the code as - is appears to only be checking for file existence ( and not performing any validation on the files ) , code could be streamlined by using os_stat . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"consolidate common patterns in sc could reduce lines of code by using a loop for several common patterns in sc initialization . specifically the sequence of cfe_tbl_register calls in sc_registeralltables ( ) , the sequence of cfe_tbl_getaddress calls in sc_getdumptablepointers ( ) , and the sequence of cfe_tbl_notifybymessage calls in sc_registermanagecmds ( ) . imported from <allcaps> gsfccfs </allcaps> - <number>",2
not updated for new cfs versions the cfs <allcaps> api </allcaps> has changed substantially since the last commit to this repo and the sc app no longer compiles with new versions of cfs .,0
"sc does not compile with cfs <number> hi all , i have tried to compile sc with cfs <number> . <number> and i get many errors . here are a few examples : <code> given how old the last commit in this repo is , i understand these incompatibilities . i have read <url> coming up ; when can we expect it ? fixing these errors should not take too much time , but i dont want to duplicate work , especially as you might have some <allcaps> nasa </allcaps> internal discussions , which i am not part of , about how to make these changes consistently with the other cfs repos .",0
"pointer precision loss casting pointer down to ( int pointer precision loss casting pointer down to ( int ) , causing segfault on <number> - bit . see : <url>",0
