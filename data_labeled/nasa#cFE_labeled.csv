text,label
"older versions of make do not support "" abspath "" <section> the table build procedure uses the <allcaps> gnu </allcaps> make function <code> as documented here : <url> however , older versions of make ( e . g . <number> ) appear to not support this function as described - although make itself does not throw an error about this function , the result is an empty string . this in turn causes the command being executed to fail because its missing the argument , which is supposed to be a file name . <section> build the software using an older version of <allcaps> gnu </allcaps> make , an error such as this occurs : <code> <section> there should be a library filename between the "" x "" and the object filename . <section> the command in the makefile here is : <url> note that the <code> evaluated to the empty string . whereas on <allcaps> gnu </allcaps> make <number> . x this works as described in the documentation . <section> vxworks <number> , which ships a binary version of <allcaps> gnu </allcaps> make v3 . <number> . <section> joseph hickey , vantage systems , inc .",0
"occasional table build failures with parallel builds ( - j ) <section> when using the - j option to <code> , occasionally some table builds may fail . <section> depends on a configuration that uses a lot of table files ( > <number> ) . repeatedly do clean builds followed by <code> where x is a number greater than <number> or so . occasionally an error will occur due to a missing object . <section> should succeed <section> debian <section> initial analysis of a failed build seems to suggest it was trying to build the same intermediate table library twice , at the same time . as such either the <code> or <code> actions failed because one of them stepped on the files from the other parallel build . <section> joseph hickey , vantage systems , inc .",0
"table build logic is assuming "" . o "" extension for object files <section> the new scripts that are used to build table files assume a "" . o "" extension on object files . this is not always the case , as some other systems use "" . obj "" . <section> build using the vxworks <number> toolchain combined with the vxworks platform module - this sets up for an "" . obj "" extension . table file generation will fail due to a missing . o file . <section> should build successfully . <section> vxworks <number> ( <allcaps> gsfc </allcaps> build machine ) <section> the variable <code> should be used here . <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , cfe functional test <number> fixes # <number> - cfe functional test <number> failing if the cfe functional tests are executed multiple times in a row , because of differences in pre - test log messages - cfe_es_writetosyslog can return cfe_es_err_sys_log_truncated during execution of cfe test <number> . functional test <number> was updated to allow for the cfe_es_err_sys_log_truncated return value - as that is an acceptable / nominal condition . <section> successfully executed functional tests multiple times in a row . <section> cfe functional test <number> should no longer intermittently fail . <section> dan knutsen <allcaps> nasa </allcaps> goddard",0
es functional test : test write to sys log failing intermittently <section> cfe functional test <number> ( test write to sys log ) is failing intermittently . <section> execute functional tests multiple times . <section> test should consistently pass if there is no anomalous config / behavior . <section> dan knutsen <allcaps> nasa </allcaps> goddard,0
"add source - routing feature to software bus <section> normally , software bus messages are fully assembled by clients , then passed to the software bus via e . g . <code> for delivery to subscribers . this routing to subscribers is currently done based on the <code> value that is present in the message - that is , the msgid is looked up in the routing table , which is in turn translated to a list of destinations ( subscribers ) to deliver that message to . <section> add an alternative <allcaps> api </allcaps> that allows the message to be routed to destination ( s ) that are are given explicitly in the <allcaps> api </allcaps> call . that is , allow the caller to specify the <code> that sb should use to route and deliver the message . specifically - this passed - in <code> for routing may be different than the msgid value contained in the message . <section> n / a <section> the use - case for this feature has to do with complex systems with distributed software bus services across many instances of <allcaps> cfe </allcaps> . in this context the destination may not be directly reachable from the source , but reachable through some sort of intermediate hop . this feature gives the needed flexibility to work with such an architecture , by allowing messages to be routed to an intermediate delivery assistant app that may not be the final destination of the message . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , adds utassert message descriptions to readme_functionaltes … - fixes # <number> - adds descriptions of each utassert message to the functional test readme markdown file for easier readability . <section> previewed markdown file <section> no impact to behavior . <section> - os : ubuntu <number> <section> description content resourced from : <url> <section> n / a <section> justin figueroa , vantage systems",1
"update readme_functionaltest . md to include <allcaps> utassert </allcaps> message descriptions <section> the cfe functional tests include assert messages that can be further clarified in the <allcaps> readme </allcaps> . <section> include and describe each enumerated assert message in the readme . <section> n / a <section> n / a <section> justin figueroa , vantage systems",1
update readme_functionaltest . md to include sample_app in startup script <section> the cfe functional tests are dependent on the inclusion of sample_app for the successful execution of all tests . <section> include sample_app in the example startup script and explain that there is a dependency . <section> dan knutsen <allcaps> nasa </allcaps> goddard,1
make the shared table used in the cfe functional tests configurable <section> projects typically will remove sample_app from their build . this creates an issue because the cfe functional tests are dependent on it such that tests will fail after removal . need a mechanism to easily swap out the sample_app table used in the functional tests such that projects can still run the tests as part of their ci / cd once sample_app is removed . <section> make the name of the table used in the cfe functional tests configurable such that projects can easily swap out the sample_app table with a table in their project specific build . <section> dan knutsen <allcaps> nasa </allcaps> goddard,2
counters included in cfe functional test summary does not add up to total test count <section> cfe functional test summary does does not contain information on all counters that increase the total test case count . this results in the appearance of missing tests when the results are read . <section> add an information statement that includes the test counters for the remaining tests that increase the total test count . <section> dan knutsen <allcaps> nasa </allcaps> goddard,2
"reorganize include files for <allcaps> cfe </allcaps> <section> a recommendation for header file naming and scoping was documented in # <number> and pr # <number> . however , that pr was just a document , <allcaps> cfe </allcaps> itself does not ( yet ) adhere to this convention <section> split the current "" cfe_mission_cfg . h "" and "" cfe_platform_cfg . h "" into module - specific chunks ( es , sb , evs , tbl , time ) . and organize the names and contents of those chunks according to the documented convention in <url> <section> n / a <section> this is important going forward as some files ( in particular , those that define the interfaces ) may be generated from a tool . it is therefore important to separate the file content according to the convention . this allows headers that are generated by the tool to be "" source - selected "" accordingly ; we do not want to have those definitions mixed with other types of unrelated definitions . currently , the <allcaps> cfe </allcaps> platform and mission config files contain a mixture of definitions - all of the core apps are mixed together , and some of the definitions affect the interfaces , and some do not . <section> joseph hickey , vantage systems , inc .",2
"new cfe_locate_implementation_file ( ) includes fallback file in results even if override found <section> when using a "" fallback_file "" option , this is put at the last priority when using the "" allow_list "" option , this function returns <allcaps> all </allcaps> files found that match the pattern being searched for . when those two options are used together , it means that the fallback file will be included in the result list , along with the user - supplied files . this is not the intent ; the fallback file should only be returned if _no_ user - supplied files were found . the result of including both is that one gets duplicate defs and / or unexpected values . the "" generate_include_configfile ( ) "" uses it in this way , and thus gets both copies . <section> use "" generate_config_includefile "" with a file that has been overridden by the user . the generated include file will get both the default and the user - supplied copy . <section> only the user - supplied copy should be used . <section> joseph hickey , vantage systems , inc .",0
"update <allcaps> eds </allcaps> based on latest compatibility testing <section> the <allcaps> ctf </allcaps> / <allcaps> ccdd json </allcaps> files produced by the <allcaps> eds </allcaps> tool from the <allcaps> xml </allcaps> files ( see nasa / edslib # <number> ) do not exactly match the current scripts . <section> generate <allcaps> json </allcaps> products from <allcaps> eds </allcaps> , then run <allcaps> ctf </allcaps> - based tests using those <allcaps> json </allcaps> files , observe mismatch errors <section> should run cleanly - the generated <allcaps> json </allcaps> files should be fully compatible with the existing <allcaps> json </allcaps> files . <section> test / validation vm <section> this means there are a few cases where the <allcaps> eds </allcaps> file does not exactly match how it is currently implemented . things like missing "" spare "" bits , or a different width type , etc . <section> joseph hickey , vantage systems , inc .",0
"document recommended file naming conventions and expected content <section> the <allcaps> cfs </allcaps> apps still vary quite a bit in terms of the content and structure of the source files , even though many do share similar file names in their source trees , the content is not always aligned . for example , <code> and <code> apps both have <code> files ( draco - rc4 tag linked here ) : <url> <url> <url> <url> but the content of the file between these two apps is quite different ; in "" hs "" the <code> file contains only some <code> statements associated with table definitions , whereas in "" hk "" this has the complete table definition structures . in contrast , the "" hs "" app puts the complete table structure definitions in <code> , but this same file has only a <code> in hk . <section> improve consistency not only in file naming but also the content and scope / usage of those files , which starts by documenting the recommended patterns so developers have a guide to follow , as opposed to assumptions . <section> this is extra misleading in <allcaps> cfs </allcaps> because files _do_ have similar - looking names , which suggests similar usage and content , but the latter is not actually the case . having the appearance / veil of consistency without actual consistency within the file is worse than having no appearance of consistency at all . <section> joseph hickey , vantage systems , inc .",2
<allcaps> tbl ut </allcaps> failure when max table size is increased <section> <allcaps> tbl </allcaps> unit tests do not always initialize a memory pool large enough for table load buffers prior to unit test execution . <section> increase the size of the max allowable table sizes and run unit test . example : <hashtag> define </hashtag> cfe_platform_tbl_max_dbl_table_size <number> <hashtag> define </hashtag> cfe_platform_tbl_max_sngl_table_size <number> <hashtag> define </hashtag> cfe_platform_tbl_buf_memory_bytes ( <number> * <number> ) <hashtag> define </hashtag> cfe_platform_tbl_max_simultaneous_loads <number> <section> dan knutsen <allcaps> nasa gsfc </allcaps>,0
"automate generation of integration candidate branch <section> generating the integration candidate branch is a very straightforward process , although it can be highly time consuming . automating this process can result in significant time savings . <section> use a github workflow to automatically merge a set of pull requests into the integration candidate branch and push it to github . <section> scripts can be used to simplify this process as well , but it requires setup by the person maintaining the repository and is not as portable . <section> dylan baker / <allcaps> nasa gsfc </allcaps> <number>",2
"inconsisent search paths used for mission - provided files <section> the cmake build system allows the user to provide customized versions of particular files by creating a file of the same name in the <code> configuration directory . specifically this feature is important for configuration header files and table files that are intended to be customized by the user . the problem is that the search paths / patterns used for the cmake <code> function ( for table files ) and the <code> function ( for headers ) are not related at all , which is confusing . <section> the search patterns and search order / priority levels between two functions should be more consistent , ideally use a common file finding function under the hood to implement the search , so the patterns and order will be the same . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , move no_such_table_err_eid into findtableinregistry and make optional testing performed * * github ci actions all passing successfully . local tests with cfs suite confirm no net loss of coverage . note : quite a few tests had to have an event count incremented up one because <number> functions in <code> were calling <code> but were not sending an event on failure ( like those from <code> were ) . so any unit tests calling these functions ( including downstream ) with intentional failures to find the table now issue an event , where they did not do so previously . <section> event reports of <code> are now all issued from within <code> and can be optionally switched on or off from within the platform config file . <section> intel ( r ) celeron ( r ) n4100 <allcaps> cpu </allcaps> @ <number> . 1 0 ghz x86_64 debian <allcaps> gnu </allcaps> / linux <number> ( bullseye ) current main branch of cfs . <section> avi weiss <user>",2
"move cmd pipe processing into separate dispatch file <section> currently the "" taskpipe "" function is comprised of a couple big switch statements based on msgid and fcncode , along with length validation and potentially other structural checks . if / when migrating to <allcaps> eds </allcaps> some of that logic can be handled by common code that check against constraints defined in <allcaps> eds </allcaps> . <section> the current "" taskpipe "" function and the supporting logic around it should be moved to a separate "" dispatch "" source unit . this improves organization in general , but also makes for an easier switch to different logic in the future , should that come to be needed . <section> the alternative is to add <code> blocks if validation logic needs to be switched . <section> the recommended solution of moving this logic to a separate source unit permits source - selection in cmake at configuration time rather than relying on preprocessor - based option selection . this is generally cleaner , and permits all options to be verified in a single unit test build , as opposed to only being able to test the selected option . <section> joseph hickey , vantage systems , inc .",2
"cfe_sb line / branch coverage not <percent> <section> currently cfe_sb is not seeing full code coverage during the unit tests . there are two conditions that seem to be causing this : <number> . in various functions there are checks for - pendingeventid ! = <number> and status = cfe_success . however , both of these variables are being changed together , such that conditions are mutually exclusive . the end results is that there is no path for pendingevent to still be non - <number> if the status does not equal cfe_success . example ( cfe_sb_api . c line <number> <sad> if ( status = = cfe_success ) { cfe_sb_pipedescsetfree ( pipedscptr ) ; - - cfe_sb_global . stattlmmsg . payload . pipesinuse ; } else if ( pendingeventid ! = <number> ) { cfe_sb_global . hktlmmsg . payload . createpipeerrorcounter + + ; } <number> . another issue that is occurring is in all usages of switch statements . without a default case capturing an unknown event id , sb assumes that the case will always fall within the defined eids - which causes an issue with gcov coverage statistics . example : switch ( pendingeventid ) { case cfe_sb_del_pipe_err1_eid : cfe_evs_sendeventwithappid ( cfe_sb_del_pipe_err1_eid , cfe_evs_eventtype_error , cfe_sb_global . appid , "" pipe delete error : bad argument , pipedid % ld , requestor %s "" , cfe_resourceid_to_ulong ( pipeid ) , fullname ) ; break ; case cfe_sb_del_pipe_err2_eid : cfe_evs_sendeventwithappid ( cfe_sb_del_pipe_err2_eid , cfe_evs_eventtype_error , cfe_sb_global . appid , "" pipe delete error : caller ( %s ) is not the owner of pipe % ld "" , fullname , cfe_resourceid_to_ulong ( pipeid ) ); break ; } <section> i believe these were already adjudicated as part of the coverage analysis . however , they were pointed out by <allcaps> jsc sa </allcaps> and it is likely the non100 % coverage statistics will keep coming up such that it would be worthwhile to revisit / fix or document why we think the branch coverage meets requirements . further , we may want to audit our branch coverage for the other core apps as well . <section> dan knutsen <allcaps> nasa gsfc </allcaps>",2
"add "" workflow_dispatch "" for any workflow that depends on an external action <section> currently , the existing github workflows are only triggered by pull request and push events . however , many of them use external workflows , mainly those defined in <code> bundle repo , and some 3 rd party ones . problem is , when merging new code to the cfs bundle repo main branch , there is no way to re - run the cfe workflows against the updated main branch of cfs . clicking the "" re - run "" button on the previous run does not work ; it runs with the same bundle commitid as the original did . we need a way to run against the updated <code> branch of the cfs repo , even when the cfe repo may not have changed at all . currently the only way to trigger this is to make a bogus push to a fork , which will trigger the actions to run and will use the latest version . <section> add "" workflow_dispatch "" as an option to workflows - especially for anything that references an external workflow or action in the <code> branch that can in turn be updated outside the merge cycle of the local repo . <section> this provides a simpler , cleaner method to re - validate the cfe workflows are still functioning after a change to the cfs repo . <section> joseph hickey , vantage systems , inc .",2
"add abstract target for documentation dependencies <section> both the <allcaps> cfe </allcaps> documentation as well as the <allcaps> cfs </allcaps> app documentation builds require certain generated files to exist before they can run . currently the <allcaps> cfe </allcaps> itself solved this with a direct dependency on <code> but this is not ideal , because it is referring to a very specific <allcaps> osal </allcaps> target , which is based on the way <allcaps> osal </allcaps> documentation is currently implemented , but may not be so in the future . furthermore , the <allcaps> cfs </allcaps> app doc workflows do not have this , and thus the workflow fails . <section> add an abstract target for documentation , correlating to the existing <code> for source files , such as <code> . this can in turn depend on the specific targets that are needed to be created in order to build documentation . this allows all submodules to also add dependencies onto this target , in case they have an artifact that needs to be generated prior to building documentation . <section> joseph hickey , vantage systems , inc .",2
"cppcheck errors reported using latest workflow update <section> the latest version of ubuntu ( with cppcheck v2 . <number> ) is reporting the following errors in the cfe repo : | severity | file | line | issue | | - - - | - - - | - - - | - - - | | error | / home / runner / work / cfs / cfs / source / cfe / modules / tbl / ut - coverage / tbl_ut . c | <number> | uninitialized variable : file . tblheader | | error | / home / runner / work / cfs / cfs / source / cfe / modules / tbl / ut - coverage / tbl_ut . c | <number> | uninitialized variable : file . tblheader | <section> run latest version of static analysis workflow ( depends on nasa / cfs # <number> ) <section> should run cleanly <section> ubuntu <number> , with cppcheck v2 . <number> <section> summary from workflow run <url> <section> joseph hickey , vantage systems , inc .",0
"remove changelog from cfs documentation action <section> related to <url> the cfs documentation and guides workflow is failing due to an error in <allcaps> psp </allcaps> ' s changelog . <section> remove the changelog <section> keep as is . <section> ariel adams , <allcaps> mcsg </allcaps> tech",1
"recursion and side effects in boolean expressions <section> side effect in a boolean expression and use of recursion in several cfe files . avoiding recursion allows tools and people to better analyze the program . this ticket is for side effects in boolean expressions that also fixes recursion issues . <section> same behavior <section> one example : <url> <section> caught by codeql . can either dismiss as will not fix , false positive , or used in tests ( some are test files ) or fix these alerts . <section> ariel adams , <allcaps> mcsg </allcaps> tech",2
"automate changelog for <allcaps> readme </allcaps> <section> when merging an integration candidate branch into main , the author must manually update the changelog for the <allcaps> readme </allcaps> . md file . this can be automated to reduce time and possible missed pull requests . <section> automate the creation of a changelog and use it to replace / update the existing <allcaps> readme </allcaps> . md file . an example can be found in cfs , <url> but it will need to be tweaked so that only merged prs are included . <section> keep as is . <section> can use github actions or github cli like gh . <section> ariel adams , <allcaps> mcsg </allcaps> tech",1
"resolve issues building users guide with ubuntu <number> / doxygen <date> <section> automatic generation of doxygen documentation fails at latex make step , hangs up at <code> error prompts . <section> resolve via simplifying the dox source files <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"uninitialized variable static analysis warnings <section> <number> new warnings identified , <number> in ut and <number> in op code . note op code issue is just to squash the warning , no real operational issue identified . <section> squash <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_es_getpoolbuf ( ) return value is confusing on error , cfe_es_getpoolbuf ( ) returns a status code , but on success , it returns the size allocated ( which is actually the size input parameter , so the return value is redundant . ) i suggest either make the size parameter an in / out parameter , or just return a <allcaps> cfe </allcaps> status and the caller can assume cfe_success means the memory size requested was allocated . <url>",2
"only the first item passed to add_cfe_app_dependency ( ) function is actually registered <section> the add_cfe_app_dependency ( ) function in the build system is intended to register when one module depends on another module . it is supposed to accept a list of modules , but only the first item actually gets registered . if attempting to register more than one , the second item ( and anything beyond that ) do not have an effect . <section> attempting to change the "" bp "" app to depend on the bplib library as well as a input / output layer called "" iodriver "" , i changed : <code> to <code> however this did not have any effect , i did not get the iodriver public include path as expected - it did nothing . <section> all listed dependencies should be registered and public include paths of all dependencies should be added to the app target . <section> ubuntu <number> <section> this is caused by the wrong variable in the loop . there _is_ a loop to handle all the listed dependencies , but it registers the first one multiple times , because the wrong variable is referenced inside the loop . <section> joseph hickey , vantage systems , inc .",0
"abort on restart after maximum resets ( linux w / mismatched restart request / restart type ) <section> after exceeding the maximum number of unplanned resets allowed per cfe_platform_es_max_processor_resets , the system attempts to perform a <allcaps> por </allcaps> instead of a <allcaps> processor </allcaps> reset . unfortunately this orderly reset fails due to an apparent deadlock and the system eventually times out and calls abort . note that this does not occur when using cfe_es_resetcfe , only with cfe_psp_restart ( cfe_psp_rst_type_processor ) . <section> steps to reproduce the behavior : modify any app to call cfe_psp_restart ( cfe_psp_rst_type_processor ) on command - i used sample app ' s noop command issue the command to trigger the restart and then re - spawn the executable repeat the restart until the system falls back to a <allcaps> por </allcaps> reset <section> expect a clean <allcaps> por </allcaps> restart without the <number> second timeout and abort <section> <section> - hardware intel i7 - 1 0 8 7 0 h <number> <allcaps> gb ram </allcaps> - os : [ e . g . linux <number> ] linux - - - - - - - - <date> - <number> - generic # <number> ~ <phone> ~ <number> ~ 7 d5e891 <allcaps> smp </allcaps> preempt_dynamic fri j x86_64 x86_64 x86_64 <allcaps> gnu </allcaps> / linux - versions [ e . g . cfe <number> , <allcaps> osal </allcaps> <number> , <allcaps> psp </allcaps> <number> for mcp750 , any related apps ] latest cfs distribution as of <date> , modification to sample_app to call cfe_psp_restart . <section> stack trace from running threads at the time of the abort <code> <section> lorn miller red canyon engineering & software",0
remove stray <allcaps> todo </allcaps> <section> <url> <section> remove <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"shift overflow compiler warning in endian macros <section> <code> from : <url> <section> mask , then shift . <section> none <section> - # <number> or really transition to serializer / deserializaer concepts . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
update wrong comment regarding the value of cfe_sb_invalid_msg_id <section> cfe_sb_invalid_msg_id value is no longer the maximum representable number of type cfe_sb_msgid_t . comment needs to be updated . <section> link to lines of code <url> <section> jose f . martinez pedraza / <allcaps> gsfc </allcaps> <number>,1
add cfe_status_t conversion macros / functions <section> various issues / complexities relative to cfe_status_t handling : - # <number> - # <number> - # <number> but there are no conversion wrappers / apis . <section> add cfe_status_c and cfe_statustostring to support future enhancements to error handling . matches <allcaps> osal </allcaps> pattern ( except <allcaps> osal </allcaps> does not have osal_statustostring yet ) . <section> see linked issues . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"stopping an <allcaps> app </allcaps> that has a locked mutex using cfe_es_stopappcmd <allcaps> bug </allcaps> <section> an <allcaps> app </allcaps> cannot be correctly stopped by cfe_es if the <code> is sent in the same moment that the <allcaps> app </allcaps> has a mutex locked . although the app is terminated ( with errors ) , when we try to restart it , it does not work . <section> steps to reproduce the behavior : <number> . create a mutex in sample_app using <code> <number> . take the mutex in the sample_app runloop using <code> <number> . perform cfe_es <allcaps> cmd </allcaps> <code> using "" sample_app "" as target <number> . see error <code> <section> <number> . cfe_es should be able to unlock the mutexes in a target <allcaps> app </allcaps> in order to close all its resources . <number> . in case cfe_es behavior can not do that , how can we handle apps that have mutexes and may be closed in the exactly same moment that its mutex is locked ( "" taken "" ) ? <section> - ubuntu <number> <allcaps> lts </allcaps> - version : cfs caelum release candidate <number> ] ( <url> ( also tested with [ aquila ] ( <url> and [ cfs bootes release candidate <number> <url> <section> an example : image <img> <section> igor luppi",0
"<allcaps> url </allcaps> to "" cfe users guide "" in the top - level <allcaps> readme </allcaps> . md returns a <number> <section> this is the <allcaps> url </allcaps> to the <code> given on the front page <allcaps> readme </allcaps> . md : <url> the <allcaps> url </allcaps> returns a <number> . <section> steps to reproduce the behavior : <number> . go to <url> <number> . follow the link given by : > the detailed cfe user ' s guide can be viewed at <url> <number> . click the link and see the <number> . <section> the document should exist at the given <allcaps> url </allcaps> . <section> alex carrillo",1
resolve uninitialized variable warnings in fsw when compiling unit tests <section> static analysis warnings observed relative to fsw when compiling the unit tests based on how the stubs are implemented . <section> fix since it also makes the code more robust to underlying <allcaps> api </allcaps> changes . not marking as bug since non unit test analysis does not identify issues . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"automatic suppression of flooding events <section> we have observed that overly verbose event messages can take down a processor , especially if the generation of events can induce the production of more events due to increased sb / sbng traffic . some ability to rate - limit events regardless of filter state seems to be desirable , as the default for many apps is often unfiltered , and during an event storm it may not be possible to command an event to be filtered . in addition , there are concerns about critical event messages being lost amongst a flood of less critical events , especially when not commandable due to being in a temporary loss - of - signal state . there ' s also the desire to automatically re - enable an event if it is no longer flooding , and the proposed solution would have that characteristic . this is important if the event notifying that the filter has been activated gets lost due to flooding . events could still be permanently suppressed w / the existing binary filters . <section> a filter that is applied per - app , per event type ( priority ) . a token counter for ( app , event type ) is incremented every time an event message arrives for ( app , event type ) . meanwhile , the token counter is decremented at a fixed rate . if the token counter exceeds a certain threshold , incrementing stops and all incoming events for that ( app , event type ) are discarded until the counter is below a threshold ( could be the same as the suppress threshold , then it ' ll effectively rate limit after allowing a small burst ) . <section> to simplify the implementation , this could be done globally for all events instead of on a per - app basis . there would be the problem of a misbehaved app flooding out another app sending more critical event messages , but this could be mitigated somewhat by doing this per - event type or prioritizing by event type . a more granular solution would filter only excessively verbose events by ( app event id ) but this would probably require registration of all events and enforcement . it appears that not all apps register all events w / <allcaps> evs </allcaps> ( i . e . sbng ) . another solution that only addresses the auto - reenabling of formerly flooding events would be to add another filter type besides binary filter that uses the above mentioned token scheme . this does not help too much since the filter type is set by the app during registration , if events are registered at all . <section> initial driver was sbng does not come w / default filters for floodable events , and one of our other apps also sends off a lot of events on startup . obvious solution is to modify these apps to setup default filters , but this does not address reenabling the events automatically when the transients go away , nor does it address unexpectedly flooding messages due to unforeseen edge cases . <section> john n pham , northrop grumman",2
"default to <number> bit memory address / offset for all io ( cmd / tlm / tbl / binary dumps ) <section> cfe_es_memaddress_t / cfe_es_memaddress_c and cfe_es_memoffset_t / cfe_es_memoffset_c are used to convert cpuaddr into a fixed size for cmd / tlm / tbl / binary output . currently they are both hard - coded to uint32 : <url> problem is this basically is just wasted space on <number> bit and also requires querying a separate element to know if these values are valid . also ends up reducing functionality ( and not supporting some requirements on certain apps ) . <url> there ' s also cases where validity is not actually indicated within the element as in tbl tlm : <url> note mm , cs , and md also all have memory addresses in io . <section> default to <number> bit everywhere and reorganize io to avoid implicit padding where possible based on the change . this is a breaking change ( io change ) so probably appropriate to either provide backwards compatibility or target a major release . this does waste space on <number> - bit systems , but makes it such that the values are always valid ( no longer need a special flag as long as the underlying functionality is still valid ) . none of the uses are in what would typically be high rate telemetry so should be minimal impact . if really need we could support configurability , or projects could locally modify if really needed . <section> none <section> discussed at <number> <allcaps> ccb </allcaps> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"convert mission / platform cfe configuration to cmake to support source selection <section> many configuration options involve conditionally compiled code which is discouraged in various coding standards and makes unit testing multiple configurations require separate builds . <section> switch to the <allcaps> osal </allcaps> pattern of defining configuration via cmake file ( s ) , which then could be used to source select during the prep . also all units could then be tested / covered regardless of the actual selection to ensure code is not rotting . functional testing would still require a separate build , but at least this would show the code still compiles in the unit test setup . <section> add multiple unit test builds <section> # <number> as a specific example of a related issue . note <allcaps> msg </allcaps> already uses cmake variables for source selection , which should be added to the config . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"use document generation reusable workflow <section> updates to make documentation more consistent for # <number> requires an update to the documentation generation workflow , so also switching to use reusable workflow added by nasa / cfs # <number> . <section> use reusable workflow added by nasa / cfs # <number> <section> none <section> depends on nasa / cfs # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"use consistent documentation generation directories / names to support matrix actions from cfs <section> naming is not consistent , osal - apiguide uses osalguide directory , mission - doc generates a detaildesign directory but the warning file gets put in the docs directory instead of subdir , etc . <section> make behavior consistent . <section> none <section> cleaning up top level nasa / cfs # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"build failure with cfe_platform_time_cfg_src_time = = true <section> build failures when enabling time source configuration . <code> <section> - set <code> true - set <code> true - set <code> false <section> should build and run . <section> see warning above , note <number> instances of the old reference . <section> - hardware : i5 / wsl - os : ubuntu <number> - versions : bundle main <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
apply latest copyright header <section> updated copyright header <section> update <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"sb housekeeping internalerrorcounter increments for nominal conditions <section> sb housekeeping internalerrorcounter increments for nominal conditions such as <code> or <code> <section> have apps running that poll a pipe or block w / timeout <section> internalerrorcounter only increments on actual errors <section> <url> <section> - sp0 - os : vxworks <number> - versions : <allcaps> cfe </allcaps> 9 c86dd4020327e52d894f1266d7b98d32dc6d34a <section> add any other context about the problem here . <section> john n pham , northrop grumman",0
"use osal common config to resolve <allcaps> osal </allcaps> doxygen references and provide default settings <section> path dependencies in cfe on <allcaps> osal </allcaps> <section> use the osal - common . doxygen instead , removes cfe dependency on <allcaps> osal </allcaps> paths <section> none <section> depends on nasa / osal # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"cfe_es_waitforstartupsync ( ) - - behavior if timeout reached ? i am a little confused by the cfe_es_waitforstartupsync ( ) timeout , there ' s no way to determine if the timeout was reached ( except looking at wall clock time elapsed ) and what should the application do if the timeout is reached ( if anything ) ? i am guessing that the caller should just proceed assuming startup has completed even if the timeout was reached , but perhaps this can be made clear in the documentation for this function ? i plan to use this for <allcaps> sbn </allcaps> but perhaps i should be using cfe_es_waitforsystemstate ( ) instead ? the comments imply cfe_es_waitforstartupsync ( ) is a convenience and may be deprecated ? <url>",3
"nonmonotonicity with cfe_time_gettime <section> the time returned by cfe_time_gettime ( ) is not monotonically increasing . <section> steps to reproduce the behavior : create a new app ( add the appropriate configuration to startup script and targets . cmake ) with the following files : runner . c : <code> analyze_time / cmakelists . txt : <code> <section> there should never be any case when a timestamp has the same seconds but lower subseconds field than an earlier timestamp . <section> see above <section> - os : <number> . <number> - <number> - generic ubuntu <section> the frequency with which the time discrepancy is printed decreases when the input to the usleep ( ) function is increased . still , there is always one timestamp discrepancy printed regardless of the input to usleep ( ) . we first noticed the behavior while trying to read data from an <allcaps> imu </allcaps> sending values at roughly 1 2 5 hz .",3
update app dev guide and unit tests to use <code> instead of <code> <section> <code> still used in ut and docs where <code> should be used to avoid dependency on internal cfe_msg_message_t elements . <section> replace with <code> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"doxygen <code> if needed should not contain unique content , just references <section> currently <code> has content , and since only one <code> can exist in a doxygen document other documents can not include this unique information . <section> doxygen will set up document in order , so could just replace <code> with a front page and <code> the front page first . <section> make ' mainpage ' just a reference to other pages . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> per project request .",1
"link error when building with mission_msgid_v2 = <allcaps> true </allcaps> <section> cfe compiles ( with warnings about implicit function declarations ) , but linking the cfe_core executable errors out with undefined references to symbols <code> and <code> . <section> steps to reproduce the behavior : <number> . create a mission configuration . modify global_build_options . cmake by adding the following two lines : set ( mission_include_ccsdsext_header <allcaps> true </allcaps> ) set ( mission_msgid_v2 <allcaps> true </allcaps> ) <number> . build cfs . the following warnings will be issued when compiling cfe_msg_msgid_v2 . c : [ <percent> ] building c object msg / cmakefiles / msg . dir / fsw / src / cfe_msg_msgid_v2 . c . o / home / dsa / lpnt_ws / dsa_lpnt_fsw / fsw / cfs / cfe / modules / msg / fsw / src / cfe_msg_msgid_v2 . c : in function ‘ cfe_msg_getmsgid ’ : / home / dsa / lpnt_ws / dsa_lpnt_fsw / fsw / cfs / cfe / modules / msg / fsw / src / cfe_msg_msgid_v2 . c : <number> <time> : warning : implicit declaration of function ‘ cfe_sb_valuetomsgid ’ [ - wimplicit - function - declaration ] <number> | * msgid = cfe_sb_valuetomsgid ( msgidval ) ; | ^ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ / home / dsa / lpnt_ws / dsa_lpnt_fsw / fsw / cfs / cfe / modules / msg / fsw / src / cfe_msg_msgid_v2 . c : in function ‘ cfe_msg_setmsgid ’ : / home / dsa / lpnt_ws / dsa_lpnt_fsw / fsw / cfs / cfe / modules / msg / fsw / src / cfe_msg_msgid_v2 . c : <number> <time> : warning : implicit declaration of function ‘ cfe_sb_msgidtovalue ’ [ - wimplicit - function - declaration ] <number> | cfe_sb_msgid_atom_t msgidval = cfe_sb_msgidtovalue ( msgid ) ; | ^ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ the following error will be reported at the link phase : [ <percent> ] linking c executable core - cpu1 / usr / bin / ld : . <repeated> / msg / libmsg . a ( cfe_msg_msgid_v2 . c . o ) : in function <code> cfe_sb_valuetomsgid ' / usr / bin / ld : . <repeated> / msg / libmsg . a ( cfe_msg_msgid_v2 . c . o ) : in function <code> cfe_sb_msgidtovalue ' collect2 : error : ld returned <number> exit status make11 <url> [ cpu1 / cmakefiles / core - cpu1 . dir / build . make : <number> : cpu1 / core - cpu1 ] error <number> <number> . the bug occurs because the two functions are defined as ' static inline ' in cfe_sb . h , which is not referenced in cfe_msg_msgid_v2 . c , and because the c language prior to the c99 standard implicitly defines functions as <code> . simply adding <code> fixes the problem . <section> core - cpu1 should compile and link cleanly . <section> see attached patch file . msg_v2_link_error_patch . txt <url> <section> - hardware : virtualbox <date> emulation of a generic x86 - <number> system on macos <number> . <number> - os : ubuntu <number> - compiler : <allcaps> gcc </allcaps> <number> . <number> - versions : cfe tag v7 . <number> - rc4 , <allcaps> osal </allcaps> tag v6 . <number> - rc4 , <allcaps> psp </allcaps> tag v1 . <number> - rc4 <section> <section> chuck fry , <allcaps> qts </allcaps> inc . , subcontractor to <allcaps> kbr </allcaps> wyle on the isrds3 contract , at <allcaps> nasa arc </allcaps> code ti <email>",0
"resolve detailed design doxygen generation warnings from <code> and enforce in ci <section> <code> produces warnings <section> fix issues to resolve warnings , enforce in ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"remove explicit file name references in doxygen file comments to avoid warnings <section> file comment without a filename implies the comments apply to the current file . adding the file name makes doxygen try to match that file . the issue is there ' s multiple files with the same name , so doxygen gets confused unless you add full path . really it ' s just overhead since the point is to comment the current file . sample warning if you <code> from the bundle : ` ` <code> os - impl - binsem . c ' supplied as the second argument in the \ file statement matches the following input files : / home / jhageman / cfs / cfs - github / osal / src / os / posix / src / os - impl - binsem . c / home / jhageman / cfs / cfs - github / osal / src / os / rtems / src / os - impl - binsem . c / home / jhageman / cfs / cfs - github / osal / src / os / vxworks / src / os - impl - binsem . c please use a more specific name by including a ( larger ) part of the path ! ` ` ` <section> easiest to just remove the name since for every case the comment applies to the current file <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"fix # <number> , remove redundant word <section> - fix # <number> a clear and concise description of what the contribution is . - removes redundant word in the application developer ' s guide in order to make documentation clearer <section> a clear and concise description of how this contribution will change behavior and level of impact . - no impact to behavior <section> personal - hugo valente",1
"<code> handler default behavior fails if return not set <section> any ut not setting the return for <code> will see the call fail in the unit under test : <url> <section> < ore helpful to test against cfe_sb_invalid_msg_id if the return is not set . <section> none <section> just test against invalid , since max is configurable and ut ' s should not rely on it . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"replace cfe_sb_valuetomsgid ( <number> ) with cfe_sb_invalid_msg_id <section> using zero explicitly is not great , for the most part all cases should be replace with just using the invalid macro : <code> <section> replace with cfe_sb_invalid_msg_id <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"implement message dispatch table within sb for unified validation and invocation of handler <section> most ( but not all ! ) applications use a big <code> statement to interpret the <allcaps> mid </allcaps> and command code , and invoke a handler . problem is : - still done very inconsistently . styles of this <code> vary significantly in terms of where the checks are done , and the type of validation that is done ( some apps still do not do length checks before casting ) - fundamentally still requires interpretation of msgid as integer value , because a <code> in c only works on integer values . ideally apps should treat msgid as opaque , not do any local interpretation of the value . - some apps do not use the <code> approach at all , implementing a dispatch table instead . notable examples are <allcaps> tbl </allcaps> services , and the cf app . while these both use the general concept of a table lookup to a function pointer , they are implemented pretty differently . <section> the dispatch table is a cleaner design , since it allows the application code to be more agnostic to how mids work . notably , the part that interprets / matches the mids can be put into sb , thereby no longer requiring the _app itself_ to interpret / match the mids . but rather than letting every app individually migrate to this pattern and have each one done differently , the framework should preemptively add a generic dispatch routine within sb . the generic function should : - validate the initial message <allcaps> mid </allcaps> coming in ( does it match any known <allcaps> mid </allcaps> in the table ) - interpret and validate the command code , if the msg has one ( does it match any known cc in the table ) - confirm that the length of the message is correct - cast the message to the correct "" real "" type and invoke the handler function that was provided from the app . <section> see <allcaps> tbl </allcaps> services and cf app , its the same idea . <section> framework needs to add this alternative method of dispatching first , but apps would not be required to use it ( backward compatible ) . the framework apps in draco could all be converted to a dispatch table . but <allcaps> gsfc </allcaps> and other external <allcaps> cfs </allcaps> apps would continue using their existing methods in order to remain "" caelum - compatible "" but could be updated over time to the unified dispatched as warranted , if / when changed for other reasons . <repeated> this is also somewhat related to / part of # <number> . <repeated> it would cover one of the items listed in there ( generic length check ) <section> joseph hickey , vantage systems , inc .",2
"revert app info structure modification (# <number> , # <number> ) , relative to draco development cycle <section> <code> is public so the change in # <number> /# <number> is breaking . should not have been included in draco . makes cs non - portable between caelum and draco . <section> revert . <section> could add accessor functions or some sort of abstraction / layer or back - port , but the change really is very low priority . could be considered in a future major update cycle if there ' s some actual benefit from the additional structure . could make cs adapt also ( conditional compilation or whatever ) , but i do not think it ' s worth it for this sort of change or carrying that option . <section> need to decide if we want to reopen # <number> as future work or leave closed . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , add cfe_es_appinfo_t element documentation <section> - fix # <number> <section> documentation only / ci <section> none <section> - hardware : ci only - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
add app info structure element descriptions back in <section> element descriptions were dropped in # <number> <url> <url> <section> add element descriptions <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"<allcaps> es perf </allcaps> array size calculation assumes "" uint32 "" array base type <section> the es perf code uses macros to determine the array length based on the overall array size ( via <code> ) . problem is , these calculations hard - code a <code> type as the divisor ( element size ) which may not always be true . <section> change the definition of the masks in <allcaps> tlm </allcaps> to be e . g . uint8 - based instead of uint32 - based . array lengths are now calculated incorrectly , because it divides by <code> which would now be wrong . <section> should use <code> to get the actual type of the element , this makes the calculation future - proof , as it does not assume / repeat the array element type ( adheres to <allcaps> dry </allcaps> principle ) <section> <url> <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",2
initialize <allcaps> cds </allcaps> block data in es unit testing to avoid uninit var warnings from valgrind <section> block data is used uninitialized in unit test : <url> <url> <url> <section> initialize . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
limit <allcaps> sbr </allcaps> message id loops for reasonable test times <section> loops over cfe_platfor_sb_highest_valid_msgid can take a long time on some systems ( many minutes ) . unit tests that cover the full range for the default setting is sufficient to show proper operation . <url> <url> <url> <section> limit the loops . <section> none <section> none <section> jacob hageman <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <user>,2
username change i changed my username from ( at ) pavll to <user> . the problem is that someone else claimed my old name an now he ' s mentioned every time ( at ) pavll was used ( mostly prs ) . do i have to state this change somewhere for my nasa opensource contribs ( because github does not redirect @ mentions to new usernames ) ?,3
"compiling in external libraries hi , i am currently trying to run the core flight executive on a freertos environment . i am currently using a community port based on an older version and am running into some difficulties during the linking stage . my main issue i believe is due to the fact that i am trying to link an externally compiled library that contains freertos and all of the device drivers generated by my <allcaps> ide </allcaps> . however , when i insert the following lines into the cmakelists . txt file in the osal folder : add_library ( libfreertros <allcaps> static imported </allcaps> ) set_target_properties ( libfreertos <allcaps> properties </allcaps> imported_location "" / home / user1 / projects / cfs / bsp / libfreertos . a "" ) i get an error : set_target_properties can not find target to add properties to : libfreertos please let me know if this is the appropriate place to post this :",3
"fix # <number> , cfe application developers guide . md : specify language for improved code highlighting <section> fixes # <number> specify the language to improve the code highlighting . <section> none . <section> no impact to behavior or <allcaps> api </allcaps> .",1
"inttypes . h - style printf format strings for common types <section> for message id ' s , cfs generally use 0x % 0 8 x but sometimes it ' s printed with 0x % 0 8 x ( lowercase a - f ) , or without the 0x , or even as % d or % u . ( although i do not know if that ' s used anymore . ) <section> per <url> c99 added printf format string macros for int types and it would be keen to follow this practice . i suggest prixmsg or pridmsg for printing ( generally , sending an event message ) a message id in hex or decimal ( defined as <code> and <code> for unsigned integer ( <number> - bit ) msgids . so instead of : <code> it would be : <code> <section> leave well enough alone . <repeated> <laugh> <section> add any other context about the feature request here . <section> <email>",2
"cfe application developers guide . md shows use of deprecated binary filter constant name <section> cfe_evs_binary_filter appears in the guide , but the current usage is cfe_evs_eventfilter_binary . <section> n / a <section> update guide to show use of cfe_evs_eventfilter_binary . <section> there are <number> locations : line <number> <url> line <number> <url> line <number> <url> <section> n / a <section> alan gibson <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <number>",1
cfe application developers guide . md showing use of deprecated event message constants <section> developer ' s guide is still showing the old event message type names . <section> n / a <section> all uses of event message types should be updated to the currently used names in the guide . <section> main listing of event type values : line <number> <url> examples of cfe_evs_error use within the guide : line <number> <url> line <number> <url> <section> n / a <section> alan gibson <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <number>,1
"add delayed responses to command verification documentation related to command codes <section> missing documentation on delayed responses . for example , cfe_es_stop_app_cc is a "" request "" which when initiated creates the cfe_es_stop_dbg_eid ( documented ) , but when the request is actually completed a cfe_es_stop_inf_eid is sent ( not documented ) . <url> <url> <section> scrub "" request "" class of commands for complete verification documentation and add where missing . confirm these events are checked in test . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_platform_endian - - not used ? . <repeated> # <number> removed definitions for ccsds_ { <allcaps> big </allcaps> | <allcaps> little </allcaps> } _endian . in cfe / sample_defs / cpu1_platform_cfg . h , there is a definition for cfe_platform_endian but it is defined as ccsds_little_endian but that is not defined anywhere . also the comments mention that the valid values for cfe_platform_endian are "" <number> "" or "" <number> "" .",2
"mismatched foreach in cmake function the endforeach args do not match the foreach args foreach ( <allcaps> app </allcaps> ${ mission_deps } ) list ( <allcaps> append varlist </allcaps> "" ${ <allcaps> app </allcaps> } _mission_dir "" ) endforeach ( <allcaps> app </allcaps> ${< section > } ) <url>",2
"overrun warning false alarm for cfe_sb_buffer_t <section> overrunning struct type cfe_sb_buffer_t of <number> bytes by passing it to a function which accesses it at byte offset <number> using argument msgsize ( which evaluates to <number> ) . <section> fix overrun <section> <url> <section> coverity : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",2
"incrementing componentptr when pointing at componentterm goes out of bounds ( but is not accessed ) <section> using componentptr as an array . this might corrupt or misinterpret adjacent memory locations . <section> fix out - of - bounds access bug <section> <url> <section> coverity : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",2
"overrun warnings false alarm for cfe_msg_message_t <section> out - of - bounds access ( <allcaps> overrun </allcaps> ) <section> fix overruns <section> overrunning struct type cfe_msg_message_t of <number> bytes by passing it to a function which accesses it at byte offset <number> using argument 1 6 0 ul . <url> overrunning struct type cfe_msg_message_t of <number> bytes by passing it to a function which accesses it at byte offset <number> using argument 4 8 ul . <url> overrunning struct type cfe_msg_message_t of <number> bytes by passing it to a function which accesses it at byte offset <number> using argument 3 2 ul . <url> overrunning struct type cfe_msg_message_t of <number> bytes by passing it to a function which accesses it at byte offset <number> using argument 4 4 ul . <url> overrunning struct type cfe_msg_message_t of <number> bytes by passing it to a function which accesses it at byte offset <number> using argument 3 0 0 ul . <url> overrunning struct type cfe_msg_message_t of <number> bytes by passing it to a function which accesses it at byte offset <number> using argument 2 8 ul . <url> <section> coverity : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",2
"unsigned compared against <number> always true <section> this greater - than - or - equal - to - zero comparison of an unsigned value is always true . cmdptr - > triggermode >= cfe_es_perf_trigger_start . <section> fix the if statement . <section> <url> <section> coverity : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",2
"dereference null return value warning false alarm <section> dereferencing bucketptr , which is known to be <allcaps> null </allcaps> . <section> check if bucketptr is not <allcaps> null </allcaps> before dereferencing . <section> <url> <section> coverity : <url> <section> full name and company / organization if applicable",2
"check return value of cfe_es_putpoolbuf <section> calling cfe_es_putpoolbuf without checking return value ( as is done elsewhere <number> out of <number> times ) . <section> check return value of cfe_es_putpoolbuf as seen elsewhere . <section> <url> <section> coverity : <url> <section> examples of return value being checked for cfe_es_putpoolbuf <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",2
"strict aliasing build errors in unit test code <section> when using strict aliasing in combination with tests ( i . e . enable_unit_tests = true ) , additional aliasing warnings are produced by <allcaps> gcc </allcaps> <number> . <section> build <allcaps> cfe </allcaps> with tests enabled along with strict aliasing compiler settings ( <code> ) , build will fail with errors such as : <code> <section> should build cleanly <section> ubuntu <number> ( w / gcc <number> ) <section> most of these are related to <code> casts , which is easily resolved by making another local <code> variable to temporarily hold the pointer . <section> joseph hickey , vantage systems , inc .",0
"build errors when using extended headers <section> in caelum when setting <code> to use extended headers , i get a build error due to duplicate typedef of the <allcaps> msg </allcaps> types : <code> <section> enable extended headers in caelum config , and build . <section> build should succeed . <section> this is because the "" typedef "" cannot be in both places . in contrast , the standard header ( non - extended ) defines only the union / struct , not typedef ' ed : <url> whereas the extended header version has a typedef : <url> <section> ubuntu <section> joseph hickey , vantage systems , inc .",0
"cfe_sb_getuserdata needs functional test <section> this function uses an overly simplistic method to determine the location of the payload structure : <number> . it uses cfe_msg calls to determine if its is <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> ( assuming it has been initialized with a proper msgid ) <number> . it adds the size of the corresponding header to the base pointer . problem is , this does not take into account compiler - added padding , which might be present depending on the size of the header and the alignment requirements of the payload member . <section> deprecate this function ? would need to come up with a solution for the places its used in <allcaps> cfs </allcaps> apps . <section> move logic to cfe_msg , where it knows details ( alignment ) of the header but that is unfortunately not really going to help , since its the alignment of the payload that is the issue here . that is not known anywhere in a generic <allcaps> api </allcaps> . <section> in <allcaps> eds </allcaps> it could actually be made to work properly , because with this tool one knows the layout of the structures and whether or not padding exists - so it can get the real offset of the payload member . without <allcaps> eds </allcaps> , there is not much way to fix this , other than to ensure both <allcaps> tlm </allcaps> and <allcaps> cmd </allcaps> headers have explicit padding added to make them multiples of the worst - case payload alignment . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , implement abstract config registry module <section> adds a new module called "" config "" that tracks simple key / value pairs . all values are const . as a proof of concept , all version information is mirrored into this key store , and es is updated to use this instead of the global_configdata when generating events . fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> , run all tests . <section> slightly different version display during startup ( module names are all_caps , mainly ) . otherwise pretty transparent . <section> ubuntu <section> this attempts to balance the advantages / disadvantages of having a string - based key / value store and an integer - based key / value store . in this implementation , the table is primarily indexed by an integer , which is assigned at compile time , so its fast ( direct lookup from key to table entry ) . but the downside to this is that it creates a compile - time dependency on the assigned integer ids . so , the keys also have string names associated with them , such that an app can find a key by name , to avoid having a hard compile - time dependency on a particular configuration item , such as if its an optional component . this also has the side effect of improving branch / line coverage in es where it was reading the "" const "" configdata objects . due to the fact that configdata is declared "" const "" , it means that coverage test can also only run with one copy . therefore , it could not cover all the branches as a result . <section> joseph hickey , vantage systems , inc .",2
"implement generic runtime configuration registry for <allcaps> cfe </allcaps> <section> rather than compiling - in various values ( e . g . via <code> or <code> ) it would be more flexible and more useful to put many of these configuration items into some type of simple runtime registry . the registry would be a simple key / value store , where the key is the configurable item id , and the value is either an integer or a pointer to a global data object ( ideally const , to avoid sharing / concurrent access issues ) . the registry can be somewhat dynamic , allowing registry items to be easily added / extended . default values and text - based descriptions can also be potentially included . <section> user <allcaps> api </allcaps> that works something like : - <code> - <code> <section> this would reduce dependency on <code> and <code> for keeping this type of value , and also provide a place for the version info currently in <code> . thereby consolidating the current bunch of different types of info with different access methods into one generic registry with a common , simple access method . similar model exists in <allcaps> unix </allcaps> / <allcaps> posix </allcaps> in the <code> facility - so certain platform - specific values do not need to be compiled into binaries , thereby improving binary portability ( i . e . compile once for a <allcaps> cpu </allcaps> arch , run anywhere that has that arch ) . this would make the long - desired feature of separate <allcaps> cfe </allcaps> core and app builds closer to reality . of course windows has its well - known registry , which is huge and unwieldy - this should _not_ turn into that . more like <allcaps> unix </allcaps> sysconf , but with pointers / strings also supported , not just integers . other issues with <code> - ed config values : - value is effectively compiled - into the binary , so if the value ever changes , modular binaries become incompatible ( but this is _not_ actively detected - its a subtle , silent incompatibility ) . - works ok for integers , but not as well for strings , even less well for structured data - requires that the <code> / <code> be kept in sync with the source code . new variables added in new builds must be manually propagated to the user build . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , functional requirements grammar cleanup <section> - fix # <number> grammar cleanup only , no actual change to meaning . <section> none , doc change only <section> none <section> n / a <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
grammatical cleanup of requirements <section> many grammatical issues identified in functional requirements . <section> fix them <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"possible alias warning on certain compiler versions <section> when getting the address of a memory pool buffer directly as a <code> type , it may trigger an alias warning in certain compilers / configurations . example when using <code> on <allcaps> gcc </allcaps> <number> : <code> <section> should build clean <section> using a local <code> intermediate value should avoid this . <section> joseph hickey , vantage systems , inc .",2
"making and mounting a file system from cfe functional caused a reformat of <allcaps> ram </allcaps> on mcp750 <section> see # <number> . note # <number> worked around the issue by just using existing ram , but os_mkfs / os_mount should have no impact on the existing drive ( s ) . <section> run the old fs test that creates the additional mount and observe the reformat on mcp750 . <url> <section> should not cause a reformat . <repeated> <section> - hardware : mcp750 - os : vxworks <number> - versions : bundle main ( pre # <number> merge ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"header structure name assumptions limit <allcaps> msg </allcaps> abstraction capability <section> the <allcaps> msg </allcaps> library is supposed to offer a complete abstraction of the header format , but in practice there are still some direct references to header structure members in caelum which limit this capability . in particular , when converting a local message buffer to a <code> pointer , when passing into any cfe_sb <allcaps> api </allcaps> , the code references a sub - member , such as : <url> while this was nice in that it is fully type - safe , it limits the header abstraction in two important ways : <number> . it assumes / requires that the buffer itself contains a <code> member . <number> . it assumes / requires that the <code> structure , in turn , contains a <code> member . for item ( <number> ) above , the <allcaps> tlm </allcaps> header is a structure controlled / defined by the cfe_msg module , and there is no guarantee that a "" msg "" member exists . this will be a problem if an alternate <allcaps> msg </allcaps> module is used , where the <code> member is not called "" msg "" . ( the whole point of <allcaps> msg </allcaps> is to make these structures free - form , and no assumptions should be made as to their internal structure , so this reference somewhat defeats that purpose ) . <section> - convert this to a cast instead , e . g . <code> - have cfe_msg provide a macro / inline function to implement this conversion / cast <section> just document what the names need to be , and make it a requirement to name things in this manner . major issues with that - mainly that it is not friendly to automated tools which might be used to generate these headers / structures from a <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> database . <section> there is no real convention to the names that exist today . it would be more viable to do that if a specific convention / reasoning was followed , such as the <code> member being called <code> ( i . e . without the cfe_msg_ prefix or _t suffix ) . this way a tool would know what name to call things in the generated files . but as it is , there is simply no naming consistency in these members , a tool would have to hard - code "" special "" member names for each structure , for no good reason other than that ' s what a human had used for an abbreviation at one point . but furthermore , even if a name convention was follwed prevents an additional layer of headers to be added . for example , the "" tlmheader "" is assumed contain a "" msg "" member directly . however in some implementations a user might want an intermediate header , where it would become <code> instead . there is no way to accommodate a third layer with the current assumptions in the code . _regarding suggested casts_ - - by casting , it can be converted without knowing what the member is specifically named , nor knowing how deep within the structure the message structure lies . this is not as bad as it sounds , and not really going back to being type - unsafe , because it is being cast to a <code> , not a <code> as previous <allcaps> cfe </allcaps> versions had done here . because of this , and the fact that <allcaps> cfe </allcaps> is compiled with strict aliasing rules enabled , it will trigger an alias violation if the structure is not actually cast - able to a <code> type . while this is not quite as robust as the current type safety , it is much more flexible , and user errors / mismatches should still be caught . <section> joseph hickey , vantage systems , inc .",2
"potential for recursive loop if event <allcaps> tlm </allcaps> msgid is incorrect <section> if the software bus <code> fails to send a message due to a validation failure , it will send an event through <allcaps> evs </allcaps> . event services , in turn , generates a message ( longeventtlm / shorteventtlm ) which is broadcast via software bus . however if the event telemetry <allcaps> mid </allcaps> value ( <code> ) is not set correctly ( or some other <allcaps> evs </allcaps> config is bad ) such that <allcaps> evs </allcaps> tries to send event messages which do not validate , a recursive loop ensues and the software eventually segfaults . <section> ( mis ) configure <code> to a value which will not pass the cfe_sb_transmitmsgvalidate tests . run <allcaps> cfe </allcaps> , it will get in a recursive loop and eventually segfault / crash as soon as any app sends an event . <section> should not do a recursive loop <section> ubuntu <section> should be protection against recursive event loops like this , where if an event fails to send , it should not cause another event to be sent . this protection appears this is not working correctly right now , at least not for <allcaps> evs </allcaps> messages . __note__ : to be absolutely clear - the issue described here is a mis - configuration issue . it will not happen in a properly configured system , so long as <allcaps> evs </allcaps> generates messages which are "" transmittable "" . <allcaps> but </allcaps> - there are other events that might be triggered by a cfe_sb_transmitmsg call , such as a msglim error , and its not clear of a similar recursive loop might be possible there ( have not tested / investigated ) . <section> joseph hickey , vantage systems , inc .",0
"mismatch between <allcaps> msg api </allcaps> and test case in "" testmsgid "" functional test <section> there is a test case in the "" testmsgid "" set which passes in <code> to <code> , and expects <code> return value : <url> however : - the <allcaps> api </allcaps> does not document that it returns cfe_msg_bad_argument in response to an invalid msgid value ( in fact it does not say anything about validating the input msgid at all ) - the implementation is not actually checking if its a valid msgid anyway . it is checking if it is <code> , which is a different concept . although this is currently "" passing "" - it is only by chance , because cfe_sb_invalid_msg_id has the value of - <number> , which when converted to an unsigned int , will be greater than <code> ( unless the latter is set to 0 xffffffff ) . <section> run this test against an alternate <allcaps> msg </allcaps> module implementation ( i . e . one that has different criteria ) and / or change the sb definition of "" cfe_sb_invalid_msg_id "" . the test will now fail . <section> test case should still pass , even when run against an alternate <allcaps> msg </allcaps> implementation . should not depend on "" chance "" values that it does not control . <section> actual implementation is here ( same basic check in v1 / v2 ) : <url> <section> ubuntu <section> the important concept is nowhere does the documentation say that the <code> constant must be greater than the <code> . in fact , the latter may not even exist in all implementations . - if the intent was to reject an invalid msgid value , the proper function to use is <code> , and the <allcaps> api </allcaps> documentation should state that cfe_msg_bad_argument will be returned in response to an invalid msgid ( it does not currently say this ) . - however , in general the <allcaps> msg </allcaps> module is just supposed to be a getter / setter , not a validator , in its role . so in that sense , validating the msgid is superfluous here , and the check against "" highest "" msgid should be removed . <section> joseph hickey , vantage systems , inc .",0
fix broken link in app developers guide fix broken link,1
"typos in documentation , print statements , and comments <section> found multiple typos throughout the codebase <section> correct grammar and spelling errors <section> none <section> retroactive issue for # <number>",2
"improve consistency in application of cfe_sb_msgidtovalue / valuetomsgid conversions <section> a <code> value , like other ids , is supposed to be a unique type / opaque value that identifies a message within the sb application context . although it is currently implemented using an integer ( <code> specifically ) application should not assume this . instead , a set of macros and inline conversion functions ( cfe_sb_msgidtovalue and cfe_sb_valuetomsgid ) are provided for when the application needs to interpret the value as an integer for a valid purpose . however , since use of this conversion is not currently enforced - there is no config option that makes msgid into a strict type , as there is for resourceid - so much of the newly - added code such as tests and apps , did not completely apply it . <section> add conversions where they are currently missing <section> preferably , the <allcaps> mid </allcaps> constants should be defined directly as a <code> type value , which would eliminate the need for conversions all over the runtime code . however , this breaks the switch / case paradigm used when dispatching - a <code> label needs to be an integer value . so although this would yield cleaner code it does have a bigger backward compatibility impact which is why it was avoided for caelum . <section> joseph hickey , vantage systems , inc .",2
"use <number> as cfe_sb_invalid_msg_id <section> currently the value for an "" invalid "" <allcaps> msg id </allcaps> is - <number> , as defined here : <url> the pattern used in other modules ( which is preferred ) is to use <number> as the invalid value , for several reasons : - local variables / structures which are explicitly memset to <number> before use ( common / recommended practice ) will get automatically set to the <allcaps> invalid </allcaps> value - global data structures in <allcaps> bss </allcaps> section get automatically memset to <number> by the loader - uninitialized members of a partially initialized data structure will be automatically memset to <number> so , its much safer to embrace <number> as the reserved / invalid / placeholder value , due to all the different ways memory is cleared to <number> both implicitly and explicitly . <section> change the definition of <code> to be <number> , rather than - <number> . <section> standard headers ( historical / v1 ) are safe because any valid msgid always has the "" secondary header "" flag set ( bit <number> ) . so any valid msgid is already guaranteed to be nonzero . should be trivial to change in this config . will require a check / confirmation of the extended headers ( v2 ) configuration , to ensure that the msgid value <number> does not correlate to a valid address . since one assumes that 0 xffffffff ( - <number> ) already does not correlate to a valid address , it may be as simple as just flipping the bits or adding <number> , if that ' s an issue . note that most other resource types ( appid , taskid , <allcaps> osal </allcaps> ids , memhandle , etc ) already use <number> as the invalid / reserved value for the same reason . msgid and tableid are still outliers that do not do this . for consistency and reliability reasons they should both be updated . ( tableid can be fixed under a separate ticket , possibly as part of a more complete refactor of <allcaps> tbl </allcaps> services ) <section> joseph hickey , vantage systems , inc .",2
"missing some dependency include files in public <allcaps> api </allcaps> headers <section> as a general rule of thumb , all header files should directly include whatever dependencies they require in order to provide the types / declarations they intend to provide . however in the <allcaps> cfe </allcaps> headers there remain a couple omissions / mistakes in this regard : - <code> declares the function <code> which accepts a resource id input , so this depends on <code> , but it does not directly include this dependency - <code> defines a <code> type , which in turn has a member sized to <code> , which is provided by <code> , but it does not directly include this dependency . in both cases the current framework sample builds do compile successfully , because the dependent header gets included implicitly ( i . e . by some header before it ) in all the current use cases , but this could change in other use cases . <section> use header files in contexts beyond what the current framework does , such as 3 rd party code only including "" cfe_es . h "" or "" cfe_tbl_api_typedefs . h "" directly . <section> headers should work ( compile w / o errors or warnings ) when included individually , they should include all dependencies directly rather than relying on inclusion ordering . <section> ubuntu <section> joseph hickey , vantage systems , inc .",0
"fix # <number> # <number> , update dev guide for <allcaps> msg </allcaps> and <allcaps> sbr </allcaps> <section> - fix # <number> - fix # <number> updates the application developer ' s guide for <allcaps> msg </allcaps> and <allcaps> sbr </allcaps> updates . <section> none , doc only . <section> none <section> na <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"es missing branch coverage in cfe_es_runperflogdump , condition not possible <section> there ' s no way for the current state to not be < cfe_es_perfdumpstate_cleanup : <code> here : <url> <section> maybe this is an artifact of a previous implementation ? really could just set the pending state to cleanup . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"update sb / <allcaps> msg </allcaps> tests to verify not implemented functions <section> functional tests fail if project is using custom cfe_msg functions that return cfe_sb_not_implemented . <section> in functional test , verify that function to be tested is implemented before running the tests . <section> none . <section> jose f . martinez pedraza / <allcaps> nasa gsfc </allcaps>",2
"es branch missing coverage in cfe_es_genpoolrecyclepoolblock and cfe_esgenpoolcreatepoolblock , <allcaps> null </allcaps> pointer check <section> the <allcaps> null </allcaps> pointer check in cfe_es_genpoolrecyclepoolblock would require either exposing this internal routine or getting really lucky corrupting the record from a separate task since it ' s valid from the calling function . <code> here : <url> same pattern in cfe_es_genpoolcreatepoolblock : <code> here <url> <section> questionable usefulness , since it can likely only be hit if a pool without a mutex is shared between tasks and access is not serialized ( <allcaps> bad </allcaps> ! ) . if the check does remain , could just expose the internal function to force the failure . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"es missing branch in cfe_es_registercdsex , overwrite success check does not make sense <section> i suspect there were code changes that made the check redundant / pointless since regupdatestatus only gets set if status = = cfe_success before this point , so there ' s no way for it to not be success and for status to also not be success . <code> here : <url> <section> really collapses back down into just one status . <repeated> no point for two . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"es missing branch coverage in cfe_es_registercdsex , isnewentry can not be true without isnewoffset being true <section> branches are not independent , since a new entry will always have a new offset ( can not hit false isnewoffset with true isnewentry ) : <code> here : <url> <section> could just test against isnewoffset . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"es missing branch coverage in cfe_es_registercdsex , conditions not independent ( already checked ) <section> the following check for cfe_success is not independent from the <allcaps> null </allcaps> pointer test in cfe_es_registercdsex : <number> [ + + <sad> <number> : if ( regrecptr ! = <allcaps> null </allcaps> ) <number> : : { <number> : : /* account for the extra header which will be added */ <number> : <number> : newblocksize = userblocksize ; <number> : <number> : newblocksize + = sizeof ( cfe_es_cds_blockheader_t ) ; <number> : : <number> : : /* if a reallocation is needed , the old block may need to be freed first */ <number> [ + - ] [ + + <sad> <number> : if ( status = = cfe_success & & regrecptr - > blockoffset ! = <number> & & newblocksize ! = regrecptr - > blocksize ) [ + + ] here : <url> <section> recommend just checking for cfe_success instead of <allcaps> null </allcaps> pointer check since it ' s already tested . we do not have a requirement to check for a <allcaps> null </allcaps> pointer within internal functions where it can not be <allcaps> null </allcaps> . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"es uncovered branch in cfe_es_taskentrypoint , conditions not independent ( defensive code ) <section> uncovered branch since realentryfunc always ! = <allcaps> null </allcaps> when cfe_es_gettaskfunction returns cfe_success : <code> here : <url> <section> if cfe_es_gettaskfunction was stubbed this could be exercised ( or alternate implementation ) . these are both internal functions so really does not require a <allcaps> null </allcaps> check . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , remove extra word in comment <section> remove extra word ( and ) in comment fixes # <number> <section> build and sanity check <section> none <section> ubuntu <section> joseph hickey , vantage systems , inc .",1
"cannot specify custom <allcaps> psp </allcaps> directory using psp_mission_dir <section> originally discussed in # <number> by <user> - hbr cannot specify "" non - standard "" psp source directory via the environment variable $ cfs_app_path or the cmake variable ${ psp_search_path } . > the cfe cmake build infrastructure uses the environment / cmake variable $ cfs_app_path as well as the cmake meta - variable pattern ${ ${ <allcaps> app </allcaps> } _search_path } to locate apps and other modules ( such as psp ) , and subsequently sets the variable pattern ${ ${ <allcaps> app </allcaps> } _mission_dir } ( see mission_build . cmake lines <number> - <number> ) . <url> > however , the resulting variable ${ psp_mission_dir } is not used in process_arch ( ) in arch_build . cmake line <number> when including a target platform ' s build_options . cmake file . this causes a cmake configuration failure when trying to use a non - standard psp location . <url> <section> build with psp in non - standard location , with the cfs_app_path environment variable set <section> ${ psp_mission_dir } is used in process_arch ( ) in arch_build . cmake for a successful build <section> system ( s ) tested on hardware : pc os : ubuntu <number> versions : cfe v6 . <number> - rc1 + dev933 <section> <user> - hbr",2
"sb missing coverage in cfe_sb_appinit , alternate config but suggested refactor / redesign <section> uncovered code since it would require an alternate config where cfe_platform_evs_max_event_filters is less than the defined number of filters : <code> here : <url> <section> consider refactor of self - filtering , unfriendly to ground management of filters . generated events should not spam to begin with , and be useful vs requiring self - filtering . or if this pattern is retained the silent misconfiguration is not great , could better utilize <allcaps> evs </allcaps> registration error reporting . either way this design is not great . could get coverage by modifying config , but really it ' d just be broken ( have user fix config vs silently not doing what the user requested ) . <section> see above . <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"comment about mission_global_applist is confusing <section> the first sentence for the description of mission_global_applist in <code> does not make sense . ' the "" mission_global_applist "" is a set of apps / libs that will be built for every defined and target . ' specifically ' defined and target ' does not provide clarity as to the intent here . removing the ' and ' would have it make sense , but was something else meant to be imparted here ? <section> n / a <section> n / a <section> <url> <section> n / a <section> n / a <section> alan gibson <allcaps> nasa gsfc </allcaps> / <number>",1
"make fails under macos <section> when following the instructions in the <allcaps> readme </allcaps> on a mac ( either intel or apple silicon <allcaps> arm </allcaps> ) , the first make fails with <code> this looks like a regression or maybe an untested case of # <number> . steps to reproduce the behavior : on a mac , follow the instructions in the <allcaps> readme </allcaps> to clone the project and then start the first make : <code> so far so good <code> fails with first error message to console : <code> the cmakeerror . log file says : <code> but that may be a secondary cascade error . i would expect it to compile without error . this is observed on both a macbook m1 and a mac pro ( intel ) , both with latest macos ( <number> . <number> ) and toolchain ( xcode <number> . <number> ; cmake <number> . <number> ; appleclang <number> . <number> ) . zsh shell ( but same result under bash ) . output of make attached : make_output . txt <url> cmakeerror . log <url> cmakeoutput . log <url>",2
"update <allcaps> time </allcaps> tests to use bitmask check macros <section> with nasa / osal # <number> , utassert now provides a better macro for testing bit fields / masks . the updated macro provides better / more concise information in the test log . <section> replace the utassert_uint32_eq checks with the new macros - utassert_bitmask_set / utassert_bitmask_unset . <section> depends on nasa / osal # <number> and nasa / cfe # <number> ( both currently in ic but not in main , as of this writing ) . <section> joseph hickey , vantage systems , inc .",2
"relax cmake directory expectations for elf2cfetbl <section> see conversation in < <url> > from a dependency / scope standpoint , the cfe_add_tables ( ) function really wants to be defined along with the table tool sources themselves . then , after finding the table source directory , the cfe cmake infrastructure could import implementations of those cmake functions which are tool - specific . then cfe and table generation can be decoupled via the cfe_add_tables ( ) interface . in that way , different implementations for cfe_add_tables ( ) can be used depending on the mission config . <section> create a modifiable <allcaps> cmake </allcaps> parameter for the location of elf2cfetbl so users can design custom directory structures <section> long - term , let users define custom toolchain compositions using tools other than elf2cfetbl <section> see above",2
"fix # <number> , update directory diagrams in app developer guide <section> fixes # <number> <section> used tree to provide a tree view of cfs , cfe , build , and apps . <section> did not add cs directory . <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"fix # <number> , incorrect <allcaps> osal </allcaps> format in users guide reference <section> fixes # <number> <section> users know where to find autogenerated documents and other documents . <section> did not keep the table in case files change names , location , or documents are added / removed . <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"<allcaps> tbl </allcaps> missing branch coverage of run - time endian logic ( and sometimes line ) <section> <allcaps> tbl </allcaps> suffers from the unfortunate pattern of run time checks for endian ( and associated logic ) , which leads to uncovered branches and possibly uncovered code ( depending on endian of platform ) . <code> <url> same pattern in : <url> <section> complete coverage is possible if run on each system , but should be resolved in the future . possibly in concert with # <number> and related abstraction such that this code does not care ( whatever underlying <allcaps> api </allcaps> / implementation that handles raw data should do the appropriate conversion ) . <section> none <section> same as # <number> for fs <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> tbl </allcaps> unreachable branch in cfe_tbl_getworkingbuffer and cfe_tbl_updateinternal ( memcpy overlap avoidance ) <section> can not hit ever hit the second false condition below since it only sets the buffer to inactive or a working buffer ( never the same as active ) : <code> <url> same pattern in cfe_tbl_updateinternal <code> <url> <section> trade "" defensive "" programming ( avoids memcpy overlap which is undefined behavior ) w / removing the impossible condition check since the only way to reach it would be to introduce a bug . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"caelum non - tested <allcaps> tbl </allcaps> apis <section> the following <allcaps> tbl </allcaps> apis are not being exercised in the functional test : cases requiring a second / companion app without access to the test table : <code> other special registration cases that may require an intermediate reboot to achieve : <code> cases requiring a transient state outside control of the test : <code> <section> document for caelum , eventually add a second test app and / or more sophisticated tests that can exercise these . <section> identified as part of scrub in # <number> some cases depend on having second test app per # <number> <section> joseph hickey , vantage systems , inc .",2
"caelum non - tested es apis <section> the following es apis are not being exercised in the functional test : related to <allcaps> cfe </allcaps> itself ( cannot reboot <allcaps> cfe </allcaps> in the middle of a test , could be done by parent script though ) : <code> related to app / <allcaps> cfe </allcaps> management ( these require a second test app that can be reloaded / restarted ) : <code> related to <allcaps> cds </allcaps> implementation ( or lack thereof ; all current targets _do_ implement <allcaps> cds </allcaps> , even though documentation allows it to return this code if it is not implemented ) : <code> related to syslog ( depends on having runtime mode set to "" discard "" rather than "" overwrite "" , which is not currently under test control : <code> <section> document for caelum , eventually add a second test app and / or more sophisticated tests that can exercise these . <section> identified as part of scrub in # <number> some cases depend on having second test app per # <number> <section> joseph hickey , vantage systems , inc .",2
"missing test cases for table services <allcaps> api </allcaps> parameter / return combinations <section> the following parameter / return code combinations are not exercised by the table services functional test : <code> <section> solve each missing case in one of three ways : <number> . add a test case covering that option <number> . update the <allcaps> api </allcaps> documentation <number> . add a <code> tag if the combination can only be reasonably achieved in a coverage environment <section> part of / related to # <number> ( each subsystem will be handled separately ) <section> joseph hickey , vantage systems , inc .",2
"missing test cases for file services <allcaps> api </allcaps> parameter / return combinations <section> the following parameter / return code combinations are not exercised by the file services functional test : <code> <section> solve each missing case in one of three ways : <number> . add a test case covering that option <number> . update the <allcaps> api </allcaps> documentation <number> . add a <code> tag if the combination can only be reasonably achieved in a coverage environment <section> part of / related to # <number> ( each subsystem will be handled separately ) <section> joseph hickey , vantage systems , inc .",2
"missing test cases for executive services <allcaps> api </allcaps> parameter / return combinations <section> the following parameter / return code combinations are not exercised by the executive services functional test : <code> <section> solve each missing case in one of three ways : <number> . add a test case covering that option <number> . update the <allcaps> api </allcaps> documentation <number> . add a <code> tag if the combination can only be reasonably achieved in a coverage environment <section> part of / related to # <number> ( each subsystem will be handled separately ) <section> joseph hickey , vantage systems , inc .",2
remove comment referencing cfe_tbl_err_file_not_found <section> reference to deprecated error code in comments > should remove it from here as well > > <url> _originally posted by <user> in <url> <section> inspect <code> <section> no references to deleted items <section> see above <section> source code coment <section> see # <number> <section> <user>,1
"cfe_tbl_load returns cfe_success when initially loading an incomplete image file ( cfe_tbl_warn_short_file internally ) <section> during a <code> call , the function is expected to return an error code if the loaded file was not complete ( i . e . does not result in a complete image in memory ) . in this case , if the image started at offset <number> , but had fewer bytes than required for a complete table ) , it triggers the <code> status internally inside cfe_tbl_loadfromfile , but then this gets overwritten to cfe_success in cfe_tbl_load , making the return value to the user seem like the table was fully loaded / valid . <section> call <code> on a table which has not been initially loaded with a partial data file . <section> should return an error not <code> , because the table image is only half loaded . <section> ubuntu <section> found as part of scrub in # <number> <section> joseph hickey , vantage systems , inc .",0
"cfe_tbl_err_file_not_found error defined but not used <section> this is documented as a return code from <code> however this function actually returns <code> when it cannot open the file . this "" file not found "" status code is not used - and it cannot be used - because os_opencreate does not really differentiate between the file not existing and existing but not having permission to open it . <section> remove unused status code <section> found as part of scrub in # <number> <section> joseph hickey , vantage systems , inc .",2
"search and replace error in syslog message inside cfe_es_poolcreateex <section> interesting word ended up in this syslog : <url> likely because the code was copied from library stuff , and "" lib "" was replaced with "" mempool "" , and this used the full word "" library "" . <repeated> <section> should say "" mem pool "" <section> joseph hickey , vantage systems , inc .",2
"cfe_tbl_err_bad_app_id error defined but not used <section> this error code was added at one point as a return value from various <allcaps> tbl api </allcaps> calls when they were called from a context which was not a <allcaps> cfe app </allcaps> . however , in the current code , the status code from the call to <code> is just passed through : <url> as a result , nothing actually returns <code> in the current code . <section> remove value from cfe_error . h and remove any remaining references to it . as the value is passed through from <code> , the actual return code when called from a bad context is <code> . <section> noted as part of scrub in # <number> <section> joseph hickey , vantage systems , inc .",2
"cfe_es_pool_bounds_error defined but not used <section> this error code was added at one point as a return value from <code> when there was an issue that caused the pool to go beyond the allocated size . however now the code validates the size before even starting to create the pool , and returns cfe_es_bad_argument if it is too small . so now the <code> has become stale , nothing uses this error anymore . <section> remove value from cfe_error . h and remove any remaining references to it . <section> noted as part of scrub in # <number> <section> joseph hickey , vantage systems , inc .",2
"enable strict resource id types with omit_deprecated build option <section> the build system has an "" omit_deprecated "" option which currently turns off all legacy - compatibility code and switches to only providing the new / preferred methods for any <allcaps> api </allcaps> elements that have been changed in recent versions . <section> as part of the omit_deprecated option , we should enable <code> mode . this mode uses type - safe definitions for all the different resource types , and prevents users from "" crossing "" different id types ( tasks , apps , etc ) at compile time rather than compiling successfully but not running correctly . <section> ci is already testing with omit_deprecated on and off so it seems like a good fit to enable strict resource id types too , the code will be tested in both backward - compatible mode and preferred / new mode . this was prompted by having two independent prs both breaking code by mixing id with other values ( one status code - id mixup , and one a tableid - <allcaps> cds id </allcaps> mixup ) in the same merge cycle . this strict build option catches both . <section> joseph hickey , vantage systems , inc .",2
cfe_resourceid_findnext can seg fault <section> if you pass a null for the checkfunc argument then cfe_resourceid_findnext will segmentation fault . also the comments in the c file mention how it is an internal function which it currently is not . <section> there should be a null check . a functional test for that null check . update the header file for the new return code <section> new functional test should plan with <url> <section> alex campbell <allcaps> gsfc </allcaps>,2
"update name of macros / functions added to "" cfe_assert "" <section> per the naming convention , any symbols provided by a given app / lib should be prefixed with the name of that module . for "" cfe_assert "" library , this would be <code> prefix . but the new macros that were directly lifted from the coverage test are using a <code> prefix . <section> search and replace the <code> prefix with <code> to be consistent . <section> this came from migrating the macros in haste ; the extra "" ut "" that does not really belong wasn ' t caught during initial implementation or review . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , consolidate msg get / set doxygen group <section> fix # <number> makes one group for sb message characteristics ( get / set combined ) . note the setter name was also out of family ( did not include sb ) . <section> ci - doc only <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"combine sb set / get message characteristics group <section> get message and set message characteristics grouping out - of - family ( no other separate getters / setters ) <section> make a single group , makes more sense for test grouping also ( test setter with getter ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"fix # <number> , group <allcaps> msg </allcaps> apis documentation by header type <section> fix # <number> improves <allcaps> msg api </allcaps> grouping in documentation <section> ci - documentation change only <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"improve <allcaps> msg api </allcaps> grouping in documentation - general , primary , secondary , extended <section> <allcaps> msg </allcaps> apis are all in one group , but affect different parts of the msg header and some are not applicable based on configuration ( extended headers enabled or not ) . <section> group in doxygen and add group description . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"missing test cases for event services <allcaps> api </allcaps> parameter / return status combinations <section> the following parameter / return combinations are not exercised by the event services functional test : <code> <section> ideally should be tested , but this may be difficult with the current cfe_testcase app because it uses event services to report test results . <section> document why these cannot be tested in the current caelum release , and rely on coverage testing to test these responses ( which is already implemented ) <section> part of / related to # <number> ( each subsystem will be handled separately ) these should generally not be marked as <code> in the doxygen because they ( theoretically ) _can_ be tested in a functional test , its just that the cfe_testcase app uses and registers with event services before starting tests , so any interference with this would prevent / conflict with normal test reporting . this is true for all calls to <code> ( because its already registered ) , and all items that return <code> or <code> ( which is really everything in the above list ) . these would all need a _separate_ app / task that is not registered with <allcaps> evs </allcaps> to accomplish . <section> joseph hickey , vantage systems , inc .",2
"add cfe_utassert macros to support tests where status is not predictable <section> the typical method of using <code> to validate the result of a <allcaps> cfe </allcaps> call will both invoke the function and check the result in a single macro . however , this requires advance knowledge of what the result is _supposed to be_ , before the call is made . in some functional test circumstances , particularly where the test is not being run in a clean / isolated environment , it may not always be feasible to predict the "" correct "" return code from an <allcaps> api </allcaps> call before it is made . for instance , there may be cases where a set of return values are acceptable , or the correct value depends on another aspect of system state that is not known beforehand . a test case may handle this currently by using a stack variable , for instance : <code> while this works , the test log entry will only show the check for <code> , it will not show the full function call that was tested here ( <code> ) . to make the logs most useful , this should show the full function call that was made , and that it was cfe_success ( the fact that the assertion was retroactive does not really matter ) . of course this can be done with the free - form <code> macro , but that requires the programmer to repeat the text of the function call , and is subject to getting stale / incorrect or cut / paste errors as any "" repeated "" info always is . <section> implement <allcaps> cfe </allcaps> utassert macros that decouple the function call from the expected return status value , so the test case can call the function and then retroactively / separately determine what the correct result should have been . the <allcaps> cfe </allcaps> utassert library can temporarily hold the status in a temp variable . this makes it simpler for the programmer to use , avoids issues with repeating the info , keeping things honest . the use pattern would be : <code> with this pattern , the assert library holds the full text of the function between the store and assert , so it can be logged in the same format as utassert_int32_eq does , and not require the programmer to repeat it , or jump through other hoops to make sure that the call gets into the test log as it should . <section> leave as is , but this imposes burdens on the programmer for corner cases ( by repeating info unnecessarily , and having to be explicitly concerned with writing it to the test log to make the test count ) and / or makes tests more fragile by repeating info ( after cut / paste / move the text of the copy can get out of sync with the real call ) . having a false / incorrect log is often worse than not having a log at all . <section> joseph hickey , vantage systems , inc .",2
"missing test cases for software bus <allcaps> api </allcaps> parameter / return combinations <section> the following parameter / return code combinations are not exercised by the software bus functional test : <code> <section> solve each missing case in one of three ways : <number> . add a test case covering that option <number> . update the <allcaps> api </allcaps> documentation <number> . add a <code> tag if the combination can only be reasonably achieved in a coverage environment <section> part of / related to # <number> ( each subsystem will be handled separately ) <section> joseph hickey , vantage systems , inc .",2
"default configuration does not permit max - size sb message buffer to be allocated <section> all messages need to be wrapped in a software bus message descriptor while in transit , and the software bus should be capable of accepting + passing messages up to <code> ( configurable ) . however , the default pool configuration does not allow this . calling <code> retuns <allcaps> null </allcaps> due to this . <section> build with default configuration , and call <code> - returns <allcaps> null </allcaps> . <section> should return non - <allcaps> null </allcaps> , as <code> is the upper limit that should be acceptable . <section> ubuntu <section> this is because in the default sb pool configuration , there is not enough extra space in the maximum size pool block . it is defined here : <url> the hardcoded "" + <number> "" bytes is not quite enough for the descriptor on a <number> - bit <allcaps> cpu </allcaps> ( it might work on <number> - bit , did not test ) <section> joseph hickey , vantage systems , inc .",0
"adding note on sb undefined behavior with sb_pend_forever and cfe_sb_deletepipe ( ) <section> this adds affirmative documentation regarding the discussion in # <number> and # <number> <section> documentation only . <section> documentation only . <section> - none <section> see discussion in # <number> <section> no third party code included . <section> jonathan bohren , honeybee robotics",1
"fix # <number> , update cfe_es_runloop documentation <section> add better description of the runstatus input / output parameter . fixes # <number> <section> build and check <allcaps> cfe </allcaps> , run all tests <section> none , documentation only <section> ubuntu <section> joseph hickey , vantage systems , inc .",1
"cfe_sb_receivebuffer does not return when the provided pipe is destroyed <section> if a pipe is destroyed while <code> is waiting with <code> , <code> either blocks indefinitely or returns <code> ( non - deterministically ) . this behavior is demonstrated in the proposed test case in pr # <number> . this is situation is only realizable in a multi - task context . the functional tests included in # <number> / # <number> do not test this behavior because they do not create multiple tasks in which one task is waiting on a blocking call to <code> while the pipe provided to it is deleted . <section> see test case in pr # <number> <section> the expectation ( albeit not documented ) is that if a pipe is deleted while waiting on <code> , that <code> would return immediately with an error code . <section> see pr # <number> <section> see pr # <number> <section> see pr # <number> <section> jonathan bohren , honeybee robotics",2
"make global test table setup in functional tests reusable i actually prefer the idea of making a "" setup "" function here that does this init , then it can be passed as the setup function as part of the uttest_add for any test that uses this table struct . that being said , its ok as is , i would not hold this up . _originally posted by <user> in <url>",2
"port "" cfe_utassert_successcheck "" and related macros from coverage test to functional test <section> the <allcaps> cfe </allcaps> coverage test has a number of useful test macros : - cfe_utassert_setup - cfe_utassert_teardown - cfe_utassert_success - cfe_utassert_msgid_eq - cfe_utassert_resourceid_eq - cfe_utassert_memoffset_eq however , these are only accessible / usable from the coverage test environment . it would be helpful if equivalent macros / functions existed in the functional test environment . <section> define the same basic set of macros in <code> so they can be used by any functional test . <section> due to the considerable differences in the application linkage , there currently is no ( real ) library that is common between the coverage test and functional test environments , aside from utassert itself . unfortunately this means there is no easy way to use the exact same definition of these macros , but as they are just wrappers around utassert functions so it is not that bad to duplicate them . <section> joseph hickey , vantage systems , inc .",2
"<allcaps> rtems </allcaps> cfe_ft_global build failure <section> <allcaps> rtems ci </allcaps> fails due to "" multiple definitions "" of <code> ` ` <code> cfe_ft_global ' ; cmakefiles / cfe_testcase . dir / src / cfe_test_table . c . <surprise> ( . data + 0x0 ) : first defined here / root / rtems - <number> / bin / i386 - rtems5 - ld : cmakefiles / cfe_testcase . dir / src / tbl_content_access_test . c . <surprise> ( . bss + 0x0 ) : multiple definition of <code> cfe_ft_global ' ; cmakefiles / cfe_testcase . dir / src / cfe_test_table . c . <surprise> ( . data + 0x0 ) : first defined here / root / rtems - <number> / bin / i386 - rtems5 - ld : cmakefiles / cfe_testcase . dir / src / tbl_information_test . c . <surprise> ( . bss + 0x0 ) : multiple definition of <code> cfe_ft_global ' ; cmakefiles / cfe_testcase . dir / src / cfe_test_table . c . <surprise> ( . data + 0x0 ) : first defined here ` ` <code> 8 7 1 a2d7 <code> modules / cfe_testcase / src / cfe_test_table . c <code> ` <code> ` ` <section> ci build of <allcaps> rtems </allcaps> <number> and <number> <section> found during ic : <number> - <number> - <number> process . see <url> and <url>",2
"add syslog for cfe_es_deleteapp and cfe_es_reloadapp id failures <section> cfe_es_deleteapp is required to log a bad id ( es : delete application - reject undefined , ces1309 . <number> ) , and cfe_es_restartapp has a requirement and does syslog . cfe_es_reloadapp does not have an associated requirement , but should be consistent . <section> add syslog for cfe_es_deleteapp and cfe_es_reloadapp <section> remove syslog write from the requirements and remove from cfe_es_restartapp . <repeated> <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"confirm / add system log write verification explicitly documented in requirements <section> a handful of the error handling requirements include system log writes . need to confirm verification in the associated test . <code> <section> confirm there ' s a check for the system log entry , and where required a check of the return code . if the verification is missing from the coverage check , add it . if it ' s not implemented , reconsider requirement ( is the system log write really necessary ? ) <section> none . need to verify requirements , and system log writes are easiest to verify from a stub call check in coverage code . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"update end child task error requirement ( can not return error code from void function ) <section> calling cfe_es_exitchildtask from a main application task is a bug / error , but it ' s a void call so impossible to fully meet the es : end child task - error if application main task , ces1314 . <number> as written since an error code can not be returned : <url> <section> remove the error code return language . <section> add a return code . really it ' s a bug so there ' s no use case to logically handle a return code when called from a main app context . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"delete / exit / create child task additional error codes need to be documented in <allcaps> api </allcaps> and tested ( related to requirements ) <section> we have got requirements to error if <code> or <code> relate to the main app task : <url> <url> also <code> can not be called from a child task : <url> <section> document in the <allcaps> api </allcaps> and exercise these cases and test for return codes : <code> <code> note <code> is a void so no error code to check but should not exit from a main app , exercise from main test app task to confirm <section> none <section> hopefully this would be caught by the upcoming <allcaps> api </allcaps> scrub ( <user> ) , but documenting explicitly since it ' s a requirement verification issue . not sure if it ' s easier to fix now or with the rest of the updates . <repeated> open to whatever is easiest . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"remove create child task error reporting requirement , out of family and over - constrains implementation <section> es : create child task - report error , ces1311 . <number> over - constrains the design / implementation . parameter errors like <allcaps> null </allcaps> pointers are not reported in the log for any parameter checking . no other apis have this sort of error handling related requirement . strict interpretations would mean the failing the requirement as written . <section> delete <section> changing the implementation would make it inconsistent with all other handling , changing the requirement really just turns the requirement into design . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"printf test logs missing last character <section> in the <allcaps> cfe </allcaps> coverage tests , assertions for "" printf "" include the message format string being checked for , but it truncates the last character . for example : <code> <section> run es coverage test , view logs <section> should include the full string , not cut off the last char . <section> ubuntu <section> off by one error in the string processing <section> joseph hickey , vantage systems , inc .",0
"cfe_es_runloop runstatus parameter is in / out , documented as in <section> documented as in : <url> but set : <url> <section> update <allcaps> api </allcaps> documentation . description is also somewhat incomplete , since it ' s also a way for the app to self exit for the typical case where it ' s a condition in the while loop . <section> a clear and concise description of any alternative solutions or features you have considered . <section> add any other context about the feature request here . <section> full name and company / organization if applicable",1
"add a companion test app for additional <allcaps> api </allcaps> coverage and lab app independence <section> currently the functional test ( see # <number> ) relies on sample_app running to test the table share <allcaps> api </allcaps> , there ' s also other apis that would be easier or could be more fully covered if there was another app owned by the functional test ( app control , cfe_es_exitapp , etc ) . <section> add support / logic and initial implementation ( the table case is a good place to start ) . does not actually need to be a full - blown app and / or could be a bunch of very trivial , single - use objects . could likely still just do all the asserts from the main functional app , and could use cfe_es_reloadapp if different logic is needed for the specific test . still not really easy since there is no <allcaps> api </allcaps> to load an app ( could send a command to es though , either from the functional test app or as another command from the ground ) , and you can not reload an app that is not running ( if it exits it ' s done ) . <section> a child task could do some of it , but would not be able to cover cfe_es_exitapp . cfe_es_exitapp or cfe_es_deleteapp would need care if taking the cfe_es_reloadapp approach ( do at the end , or use command to es to start again , etc ) . could also just require sample_app be loaded to run the test since that ' s not really much different than requiring an additional test app ( although the test app would be controlled with the rest of the functional logic , so more self - contained ) . definitely open to other ideas . <repeated> <section> worth a trade of what ' s "" good enough "" , since <allcaps> api </allcaps> testing does not really prove a distribution ' s use of the <allcaps> api </allcaps> will work . in <allcaps> osal </allcaps> the apis are functionally tested within the context of separate executables so testing the cfe <allcaps> api </allcaps> works within a test configuration ( with sample_app ) is analogous . distributions are still expected to test their functionality vs requirements , system test , and scenario test which really shows whatever apis they are using behave as required . there ' s also the challenges related to custom configuration which could cause the functional test to fail ( even as currently implemented ) . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
cfe_msg_gettypefrommsgid not handling all invalid inputs <section> cfe_msg_gettypefrommsgid calls cfe_msg_setmsgid and cfe_msg_gettype but ignores those return calls . they can return fail status codes so cfe_msg_gettypefrommsgid should handle that . <section> cfe_msg_gettypefrommsgid should check for failing status codes and return them if they happen . <section> alex campbell <allcaps> gsfc </allcaps>,0
"improve consistency when working with <allcaps> osal </allcaps> status codes <section> quite often in the <allcaps> cfe </allcaps> implementation , <allcaps> osal </allcaps> status codes are mixed with <allcaps> cfe </allcaps> status codes , often times sharing a single stack variable to hold either one , and even switching back and forth . to improve clarity and consistency , <allcaps> osal </allcaps> status codes should be stored in a _separate_ stack variable from the <allcaps> cfe </allcaps> status codes . ideally , in the future , these should also migrate to a separate type ( e . g . <code> , as in nasa / osal # <number> , or <code> , as in nasa / cfe # <number> ) . <section> - anywhere that an <allcaps> osal </allcaps> status code is stored on the stack , make a _separate_ variable . - always use a consistent name for that variable , e . g . <code> ( as opposed to "" status "" or "" returncode "" etc , which are vague ) . - avoid intermixing <allcaps> cfe </allcaps> status codes and <allcaps> osal </allcaps> status codes whenever possible ( there will still be some times its necessary , when calling generic functions ) . when it is necessary , make conversions between these types explicit / obvious via comments and / or type casting . - when printing <allcaps> osal </allcaps> status codes in a log or event message , print it as long decimal ( % ld ) , not as hex as the <allcaps> cfe </allcaps> status codes are . this is because <allcaps> osal </allcaps> defines its status codes as decimal numbers , so logs / events should match this . <section> this can be considered a prerequisite to nasa / cfe # <number> ( cannot introduce a unique <code> type until it is no longer being used to store <allcaps> osal </allcaps> codes ) . this would be a fix for next release ( not <number> . <number> ) . <section> joseph hickey , vantage systems , inc .",2
"no null pointer check on tblhandles in cfe_tbl_getaddresses and cfe_tbl_releaseaddresses <section> cfe_tbl_getaddresses does not check that the array of tblhandles is not <allcaps> null </allcaps> and will cause a segmentation fault . a similar issue appears to also exist in cfe_tbl_releaseaddresses . <section> steps to reproduce the behavior : <number> . the following line from my fork for # <number> will cause a segmentation fault instead of gracefully returning a cfe_tbl_bad_argument <code> whereas when the input tblptrs is <allcaps> null </allcaps> , cfe_tbl_bad_argument is correctly returned . <number> . similarly the following line will cause a segmentation fault from cfe_tbl_releaseaddresses <code> <section> * cfe_tbl_getaddresses should return cfe_tbl_bad_argument when the pointer tblhandles is <allcaps> null </allcaps> . * cfe_tbl_releaseaddresses should return cfe_tbl_bad_argument when the pointer tblhandles is <allcaps> null </allcaps> . <section> - hardware : pc - os : ubuntu <number> <section> niall mullane - <allcaps> gsfc </allcaps> <number> intern",2
"cfe_tbl_load does not reset loadinprogress when called on a locked table <section> when calling cfe_tbl_load on a table that is locked it correctly returns the status cfe_tbl_info_table_locked . <url> however , this branch skips over the function cfe_tbl_notifytblusersofupdate which resets the variable <code> . without this variable being reset to <code> , all future calls to cfe_tbl_load will fail . <url> once the table address is correctly released , all subsequent calls to cfe_tbl_load will still fail and return cfe_tbl_err_load_in_progress even though the last load failed when the table was locked . <url> this can be fixed by calling cfe_tbl_manage before trying to load data . <section> on my fork for # <number> the test <code> in the file <code> requires a call to cfe_tbl_manage before we can load data to the table after releasing the address for it . the following code snippet is from this file . <code> <section> after a failed table load because the table was locked , i should be able to release the address of a table and then call cfe_tbl_load without needing to call cfe_tbl_manage in between . <section> - hardware : pc - os : ubuntu <number> <section> niall mullane - <allcaps> gsfc </allcaps> <number> intern",0
cfe_evs_register not validating inputs first <section> inside <allcaps> evs </allcaps> register it clears the appdata record before it validates all the inputs . if some of the inputs are invalid that then causes the app to crash . <section> validate inputs first before anything else . <section> <url> <section> alex campbell <allcaps> gsfc </allcaps>,2
"transition <allcaps> cfe </allcaps> tests to use utassert macros ( moved from <allcaps> cfe </allcaps> ) <section> in pull request nasa / osal # <number> , a number of <allcaps> cfe </allcaps> coverage assert macros and generic functions were ported into the base utassert library . usage of the macro is equivalent . <section> after merging that pr , remove the local <allcaps> cfe </allcaps> definitions of the macros and functions , and search / replace all references to use the utassert version instead . <section> leave duplicate <section> requires nasa / osal # <number> to be merged first ( or at the same time ) <section> joseph hickey , vantage systems , inc .",2
"remove sb : last message sender info , csb4309 requirement ( removed <allcaps> api </allcaps> ) <section> support for getting the last message sender was removed in the caelum development cycle , need to remove the requirement <section> remove csb4309 - sb : last message sender info requirement <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"add ( unsigned int ) cast to <allcaps> mir </allcaps> prints in time_ut . c <section> <allcaps> mir </allcaps> prints in time_ut . c break the <allcaps> rtems </allcaps> build because % u expects ( unsigned int ) , but uint32 in <allcaps> rtems </allcaps> is an unsigned long . <section> add ( unsigned int ) cast to <allcaps> mir </allcaps> prints in time_ut . c <section> jose f . martinez pedraza / <allcaps> nasa gsfc </allcaps>",0
"move "" count "" global to test global struct <section> should not have random global variables around , particularly variables with simple / common names , as it may silently overwrite an existing variable ( i . e . if any other app / lib makes a global called "" count "" some os ' s will just happily bind to the existing variable , not make a separate instance , when dynamic refs are resolved after loading ) . <url> <section> now that we have a proper global struct , <code> - this should be moved into it . <section> joseph hickey , vantage systems , inc .",0
"explicitly document / test file offset behavior in relation to fs file read / write apis <section> it ' s not clear from the <allcaps> api </allcaps> where the file offset is left after using any of the fs apis that access the file : cfe_fs_readheader cfe_fs_writeheader cfe_fs_settimestamp <section> right now , at least some apps in the wild depend on current behavior so preferred fix for caelum is just to document current behavior ( success and error ) . error can be undefined , but success should be consistent / explicit . also worth adding a functional check to confirm this behavior ( if it ' s not already checked ) . <section> could explicitly be undefined , or change behavior to reset to the start of the file but that would ripple through all the apps . <section> from an app code review , currently undocumented behavior means apps should all lseek but rather than change every app it ' s likely better to document the current behavior explicitly in the <allcaps> api </allcaps> . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , ping <user>",1
"fix # <number> , mistakes in some copyright headers <section> - fixes # <number> <section> - no behavior changes paul oberosler , individual",1
"some source code files have mistakes in the copyright headers . <section> the source files have their file names in their headers , but some have just copied the text from another file , so the file names in their headers do not match that of the file . <section> example where this is a mistake . <url> <section> it ' s just a quick fix , not necessary for the program ' s features .",1
"datatocopy argument of cfe_es_copytocds should be "" const "" <section> this pointer argument is read - only , the data is passed to <allcaps> psp </allcaps> which is ( correctly ) a <code> <section> prototype should be : cfe_status_t cfe_es_copytocds ( cfe_es_cdshandle_t handle , const void * datatocopy ) <section> should not cause any issue for existing code ( ok to pass non - const to const , just not the other way ) . making const - correct avoids issue / warning if called from an app using <code> data . <section> joseph hickey , vantage systems , inc .",2
"scrub for discrepancies between implementation return codes and documentation <section> need to perform a general scrub of <allcaps> api </allcaps> documentation for parameters , error checking , and and return codes , as was done for <allcaps> osal </allcaps> . <section> - confirm that all return / status codes which are _directly_ generated by an implementation appear in the documentation for that function as a <code> clause . - confirm that all return codes specified by a <code> clause also have a test case that covers them - confirm that parameter documentation is appropriately marked <code> or <code> where applicable - confirm that there is a test case that violates above rule to test function response w / bad input - confirm that coverage tests are not "" overloaded "" ( i . e . violate only one rule at a time when confirming status code response ) . <section> see nasa / osal # <number> <section> joseph hickey , vantage systems , inc .",1
"incomplete <allcaps> osal </allcaps> error conversion in cfe_es_reloadapp <section> the cfe_es_reloadapp function uses the function os_stat to perform its work . the error handling in cfe_es_reloadapp assumes any failure in os_stat is due to a file io issue . this may not be the case because if a null pointer is passed in as the file name os_stat will return an os_invalid_pointer , but this specific error code will be ignored and cfe_es_reloadapp will just output cfe_es_file_io_err instead of a cfe_es_bad_argument . <section> steps to reproduce the behavior : <number> . call cfe_es_reloadapp with a null pointer for filename . it will return a cfe_es_file_io_err when the real issue was a bad argument . <section> cfe_es_reloadapp could include a null check itself to provide a more specific error message or the os_invalid_pointer returned by os_stat could be converted to a specific <allcaps> cfe </allcaps> error code . <section> see # <number> for a similar error conversion issue <section> niall mullane - <allcaps> gsfc </allcaps> <number> intern",2
no null pointer check in cfe_es_taskid_toindex <section> cfe_es_taskid_toindex does not check if the input index pointer is null and will cause a segmentation fault if it is null . <section> steps to reproduce the behavior : <number> . this <url> line in the functional unit tests on my fork will result in a segmentation fault if it is uncommented . <number> . build <allcaps> cfe </allcaps> and run functional unit tests to view the error . <section> cfe_es_taskid_toindex should return a cfe_es_bad_argument if the index pointer is null . <section> - hardware : pc - os : ubuntu <number> <section> niall mullane - <allcaps> gsfc </allcaps> <number> intern,2
"requirements scrub for caelum development cycle <section> caelum development included <allcaps> api </allcaps> additions , need updated requirements . <section> update : es : report task and application name , ces1305 - > es : get task information new : es : get library information , ces1344 es : delete memory pool , ces1345 es : get generic counter name , ces1346 fs : filename auto - complete , ces1605 fs : background file dump , ces1606 sb : delete pipe , csb4302 sb : set packet type , csb4346 sb : get header field , csb4347 sb : set header field , csb4348 sb : get sequence count , csb4349 sb : set sequence count , csb4350 sb : get next sequence count , csb4351 sb : get type from msgid , csb4352 <section> none <section> note - resource id apis and * _toindex apis were categorized as "" design "" so they are not associated directly with requirements ( a different implementation may not require these ) . of similar note , the message implementation supports user defined header fields , so the requirement is generic where there is not internal dependencies on the field . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
remove get message checksum requirement <section> as part of the message module refactor the cfe_sb_getchecksum external <allcaps> api </allcaps> was determined to have no use case . <section> remove associated requirement : csb4326 - sb : get checksum <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"remove requirements for message initialization "" clear "" vs "" no - clear "" options <section> cfe_msg_init no longer supports "" clear "" vs "" no - clear "" options due to abstraction incompatibilities . csb4315 . <number> - sb : initialize message - clear csb4315 . <number> - sb : initialize message - no clear <section> remove these "" special option "" requirements . the requirement is that it initializes the packet ( csb4315 ) , the design / implementation describes the exact behavior ( there are many possible compliant implementations by design ) . ambiguous options that can not be abstracted should be avoided in the <allcaps> api </allcaps> . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"most commands only generate <allcaps> debug </allcaps> event for successful completion <section> most commands will increment the command counter for the application and send a debug event after they are processed . however , in the default / sample config , debug events are filtered out , so these will <allcaps> not </allcaps> be visible to the operator . as such there is really no way to confirm a specific command was accepted - since _any_ command will increment the command counter ( including noop , etc ) the counter by itself is not a reliable means to check if a particular command was accepted . <section> generally , the fact that a command was accepted and processed is useful and necessary information for operators , so it should not be classified only as "" <allcaps> debug </allcaps> "" . consider making all these events to be of type <code> . note that some commands , such as no - op , already send an <allcaps> information </allcaps> event ( so not fully consistent as it is ) . <section> noted when reviewing command documentation in # <number> . for caelum will just document the <allcaps> eid </allcaps> that is currently being generated ( debug or information ) but will not change it . for next release should try to make this more consistent . <section> joseph hickey , vantage systems , inc .",2
"renumber requirements based on category <section> requirements have evolved such that the numbering is no longer consistent . makes it harder to quickly check implementation linkage to at least the correct category ( cfe_es_writetosyslog links to ces1014 which is typically the command / message group ) examples : ces1014 and associated is all about the system log , but in what is typically the command section ces1017 is the exception reset log ces1022 is for performance analyzer <allcaps> api </allcaps> ces1600 is fs , but is under es ( should be all under <allcaps> api </allcaps> ' s and / or functional ) . <repeated> and so on <section> x0 xx - commands / messages and behavior ( upon receipt of a command / message and x0 xx . x for additional behavior ) x3 xx - <allcaps> api </allcaps> ' s and behavior ( upon receipt of a request ) x5xx - reset behavior x7xx - functional / performance behavior fs should be split out from es ( 1 6 xx ) <section> none , although renumbering should always use <allcaps> new </allcaps> numbers to avoid confusion and helpful to have a comment with the old number ( or other way to identify in a search ) . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"remove application / child task registration <allcaps> api </allcaps> requirements <section> apis were removed in # <number> , registration handled by es and no longer requires <allcaps> api </allcaps> . ces1300 and <section> remove associated requirements , ces1300 - es : register application and ces1313 - es : register child task <section> none <section> # <number> , # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"implicit padding in <code> <section> implicit padding , as well as the issues detailed in # <number> ( configurable sized elements early in the packet ) in <code> . there ' s <number> bytes being added after <code> . <url> noticed when debugging memory handle info reporting commands in es . discovered the table pool handle was being interpreted incorrectly in cfs - groundsystem due to the implicit padding . <section> likely addressed as part of the transition to the cmd / tlm structures being generated / delivered from a more complete data description . <section> could quick fix . <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"correct return code mismatches in <allcaps> cfe </allcaps> <section> in several places across <allcaps> cfe </allcaps> , a function is documented as returning a <allcaps> cfe </allcaps> status ( e . g . cfe_success ) but checked against either os_success or cfe_psp_success , or vice versa . <section> functions documented as returning <allcaps> cfe </allcaps> status should check for <code> , where functions documented as returning an <allcaps> osal </allcaps> status should check for <code> , and functions returning a <allcaps> psp </allcaps> status should check for <code> . <section> similar to # <number> , but found in more places . since the definition of all these symbols is <number> , this is no change in practice , but should be fixed for correctness sake . <section> joseph hickey , vantage systems , inc .",2
"correct notes on cfe_fs_backgroundfiledumprequest <section> the notes for this <allcaps> api </allcaps> say "" not on heap "" when it really should say "" not on stack "" <section> if buffer is allocated on the stack and object goes out of scope before background job finishes , random unpredictable behavior occurs , as in pr # <number> . <section> correct comment . <section> ci <section> fundamental requirement is that object must persist for the time the background job runs . so stack is likely a problem , heap is ok as long as it is not freed before task is done . <section> joseph hickey , vantage systems , inc .",1
"re - add cfe_sb_deletepipe requirement <section> the requirement for the <code> <allcaps> api </allcaps> , csb4302 was mistakenly deleted in # <number> . <section> re - add . <section> none <section> got mistakenly cancelled in <allcaps> jira </allcaps> , un - cancelled . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"incorrect returncode check in cfe_es_createobjects <section> the <code> returns a <allcaps> cfe </allcaps> status . however , when checking the the return code , it is compared to <code> , rather than <code> . <url> <section> check against <code> <section> n / a <section> this is just a minor / pedantic correctness issue , since in practice os_success and cfe_success are the same value ( <number> ) . however when scrubbing for type correctness this shows up . <section> joseph hickey , vantage systems , inc .",2
"update doxygen groupnames to match cfs naming conventions # # description the doxygen "" groupnames "" do not have any separators and are difficult to read , see <code> in code snippet below . <url> see short discussion in <url> # # proposed solution have the group name match the updated directory structure after the modules update , for example - <code> cfe_es_entryexit # # alternatives leave names as is but introduce underscores <code> .",1
"es missing coverage in cfe_es_apps . c , cfe_es_cleanuptaskresources <section> <code> function contains a hard to reach line ( <number> below ) that remains untested , preventing us from reaching <percent> coverage in file . <code> <section> add coverage for line to complete <percent> coverage in file . <section> it ' s really difficult to recreate a case were cleanstate . foundobjects is greater than <number> since it always gets set to <number> in while ( <number> ) <url> <section> jose f . martinez pedraza / <allcaps> nasa gsfc </allcaps>",2
"correct syslog message in ut_bsp_unlock <section> the log message in <code> has the wrong function name ( os_mutsemtake ) . appears to be a copy / paste error from ut_bsp_lock above . <section> n / a ( does not fail in normal operation ) <section> log message should have <code> , not <code> <section> <url> <section> ubuntu <section> mismatch noted as part of review for # <number> <section> joseph hickey , vantage systems , inc .",0
"improve separation / distinction between <allcaps> osal </allcaps> and <allcaps> cfe </allcaps> error codes <section> application code should not conflate / intermix these two sets of error / status code values . <allcaps> osal </allcaps> and <allcaps> cfe </allcaps> differ in how their error codes are defined . for <allcaps> osal </allcaps> , in <code> , the codes are in signed decimal format ( e . g . <code> ) . for <allcaps> cfe </allcaps> , in <code> , the codes are in hexadecimal format ( e . g . <code> ) with bits having certain meanings . <section> - when storing an error code in a local stack variable , applications should create a _separate_ variable for storing an <allcaps> osal </allcaps> status code from a <allcaps> cfe </allcaps> status code . - the correct typedef should be used , e . g . <code> for <allcaps> cfe </allcaps> codes , and ( ideally ) <code> for <allcaps> osal </allcaps> codes ( which does not exist yet , but see issue nasa / osal # <number> ) . - when logging / printing or sending events , use the correct conversion specifier such that the format is consistent with how it is defined . this means <code> for <allcaps> osal </allcaps> codes , and <code> for <allcaps> cfe </allcaps> codes . ( in many cases , <allcaps> osal </allcaps> error codes are printed using the <code> conversion currently ) . <section> for caelum , the approach will be to document the functions / cases where <allcaps> osal </allcaps> and <allcaps> cfe </allcaps> status codes are conflated ( see issue # <number> ) but ideally for better code modularity , the two sets of status codes should not be intermixed at all . while issue # <number> will just document where this is a problem , this issue should be to fix those problem areas and keep things isolated . also note that <allcaps> psp </allcaps> also has a few of its own status codes , which also should be kept separate . <section> joseph hickey , vantage systems , inc .",2
"implement separate log / event for <allcaps> cfe fs </allcaps> filename validation failure <section> filename validation ( from commands , scripts , etc ) now happens at both <allcaps> cfe fs </allcaps> level ( via <code> ) and inside <allcaps> osal </allcaps> ( via <code> or <code> etc ) . however , in most code paths where this is done , the results are currently combined . that is - failure of either function is reported via the same event / log message . doing this ultimately requires putting the error code into the same "" int32 "" value ( thereby mixing <allcaps> osal </allcaps> and <allcaps> cfe </allcaps> error codes ) . <section> should have a separate event / log message for failures at the <allcaps> cfe fs </allcaps> level vs . failures at the <allcaps> osal </allcaps> level . the log message should clearly indicate whether the failure came from <code> or <code> ( or whatever other function was called ) . <section> note that the preferred format for printing / logging error codes is also different - to match the values in the osapi - error . h file and cfe_error . h files , <allcaps> osal </allcaps> codes should be printed as decimal , whereas <allcaps> cfe </allcaps> codes should be hex . when combining error codes into a single log , it requires choosing one format , which will be wrong for half of them ( it is still able to be decoded at least , because error numbers do not overlap , but not ideal ) . <section> joseph hickey , vantage systems , inc .",2
"incomplete <allcaps> osal </allcaps> error conversion in cfe_es_gettaskname <section> the cfe_es_gettaskname function uses an <allcaps> osal api </allcaps> to perform its work . however , its error handling path is not complete , it assumes any underlying <allcaps> osal </allcaps> failure is due to the resource id not being valid : <url> although a bad id is a _likely_ cause for failure , it is not the only possible cause of failure - for example , if the name is too large to fit in the buffer , <allcaps> osal </allcaps> may return <code> . <section> call <code> with a valid task id and string buffer size of <number> ( such that the task name is too long to fit in the buffer ) . the function will return <code> status , even though the real error was that the buffer was too short . <section> should do better error conversion - only <code> should translate to <code> , and other potential / foreseeable <allcaps> osal </allcaps> errors converted to the nearest <allcaps> cfe es </allcaps> error , or the generic catch - all <code> can be returned for other unexpected / unhandled errors . <section> see # <number> , for caelum will document the existing behavior , but a future release should correct this . <section> joseph hickey , vantage systems , inc .",0
"sb unreachable code in cfe_sb_appinit <section> the following conditional is never reachable with the default config : <url> to reach this would require that the code is built with a config where <code> ( from platform config , defaults to <number> ) is less than <code> ( hardcoded to <number> ) . <section> build code with default config and run coverage report . <section> code could be cleaned up to not have unreachable lines in any config , or at least convert the check such that it can be evaluated at compile time ( if <code> >= <code> then the code becomes unreachable ) . <section> ubuntu <section> somewhat related to # <number> , if this is fixed hopefully it would get both of these <section> joseph hickey , vantage systems , inc .",2
"cfe_sb_msghdrsize returns size_t but still attempts to return <allcaps> cfe </allcaps> status code <section> the <code> function returns a <code> value . therefore , there is no provision / possibility for an error to be returned . however , if passed a <allcaps> null </allcaps> argument , this still attempts to return <code> which will be implicitly converted to a <code> value - which is platform - defined . notably , since <code> is unsigned , the result is always positive ( success range ) and will not be correctly interpreted by the caller . <section> call <code> with a <allcaps> null </allcaps> <code> argument . <section> this function should probably return <number> instead of <code> in this case . cannot return <allcaps> cfe </allcaps> status codes from a function that does not return <code> ( or <code> ) . <section> <url> <section> ubuntu <section> this line was also not being covered by the coverage test (# <number> ) and the return type mismatch prevents this from being covered properly . <section> joseph hickey , vantage systems , inc .",0
revert <code> default file extension addition <section> added default extension is causing issues w / <number> character limit and confusion among users / testers <section> for generic files ( log / data / etc ) where there is not a required extension just leave the file name as requested by the user . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"cfe application developer ' s guide hardware servicing app section out of date <section> cfe application developers guide . md has references to generic <allcaps> isr </allcaps> apis and other functionality that is not supported . <section> update <url> section <number> . <number> "" hardware servicing "" application <section> none <section> nasa / cfs # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"add missing <allcaps> api </allcaps> ' s to user guide <section> in section <number> of the user guide , it lists all the apis , and some are missing from that list . cfe resource <allcaps> id api </allcaps> ' s – cfe_es_appid_toindex – cfe_es_libid_toindex – cfe_es_taskid_toindex – cfe_es_counterid_toindex cfe fs file utility apis – cfe_fs_getdefaultmountpoint – cfe_fs_getdefaultextension – cfe_fs_parseinputfilenameex – cfe_fs_parseinputfilename – cfe_fs_backgroundfiledumprequest – cfe_fs_backgroundfiledumpispending <section> should be listed in section <number> . <section> the details of the functions are in there correct place later in the guide . <section> full name and company / organization if applicable",1
remove unused function <code> in cfe_es_syslog . c <section> this function is not used . we also do not have ut for this function . <section> simply remove the code . <section> keep it and add the unit tests . <section> jose f martinez pedraza / <allcaps> nasa gsfc </allcaps>,2
"update the ci functional test to use the unit test report file <section> ci functional test currently tee ' s the console output and waits for a string , which is subject to flushing and not very robust . <section> # <number> added a test log file , ci in functional test can now just wait until this file exists to know when the test is complete ( vs tee on console output ) . that log file is then the artifact and can be checked for summary success / failure . <section> none . <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
fix documentation workflow warning . log archive <section> the documentation ci workflow has a typo in the directory for the usersguide - warnings . log output file . <section> see < <url> <section> workflow runs successfully and reports and archives warnings <section> <url> <section> this popped up after the update to the documentation build and i missed it when fixing up the ic,2
"es uncovered code cfe_es_api . c , cfe_es_exitapp infinite loop ( spins until deleted ) <section> missing coverage for cfe_es_exitapp function that contains an infinite loop . <url> <section> add coverage tests to include part of the function that is currently not being tested . <section> none . <section> jose f . martinez pedraza / <allcaps> nasa gsfc </allcaps>",2
"consistency in <allcaps> cfe </allcaps> coverage test helper macros <section> the following helper macros are defined in <code> and used in sb_ut . c , with the intent of applying to other modules : - <allcaps> setup </allcaps> - <allcaps> assert </allcaps> - assert_eq - assert_true - <allcaps> evtcnt </allcaps> - <allcaps> evtsent </allcaps> these macros are all specific to / tuned toward <allcaps> cfe </allcaps> coverage testing ( i . e . they are not generic ) because they embed certain <allcaps> cfe </allcaps> patterns / assumptions , i . e . <allcaps> setup </allcaps> and <allcaps> teardown </allcaps> check for cfe_success , the "" <allcaps> event </allcaps> "" macros deal with the ut stub event capture logic , etc . <section> the genuinely <allcaps> cfe </allcaps> - specific macros should be updated with a <code> prefix to indicate that they are assertion statements that are specific to <allcaps> cfe </allcaps> . for macros which are actually generic , such as "" assert_eq "" , consider replacing this with the existing generic <code> macro . also for wider coverage test applicability and consistency of logging output , should also add the following : - <code> macro to consistently log functions that do not have a return value , but still want to include the full text of what was called - <code> macro to check for equality between resource id values ( int32_eq is not sufficient here because one should not assume that ids are integers ) <section> discussed in <allcaps> ccb </allcaps> <number> - <number> - <number> , as part of issue # <number> and improving the test log output <section> joseph hickey , vantage systems , inc .",2
"add feature to <allcaps> cfe </allcaps> assert to write output to log file <section> the <allcaps> cfe </allcaps> functional tests executed via the cfe_assert helper app currently report test cases as events . problem is : - events are ( by default ) limited to <number> chars , and assert strings tend to be long - ish , so these are likely to get truncated - makes it difficult to write test analyzing tools - either need to somehow subscribe to those event ids ( non - trivial w / current script capabilities ) , or pipe the entire terminal log to a file ( os dependent ) . and in both cases , still subject to text truncation . <section> the cfe_assert app should have a feature to internally "" tee "" the results to a log file . this would alleviate the need ( and os dependency ) on trying to "" tee "" the output externally , and the output would contain <allcaps> only </allcaps> test logs i . e . not mixed with other syslog messages . <section> see # <number> , this would make ci tests more reliable <section> joseph hickey , vantage systems , inc .",2
"cfe_es_query_one_cc not performing as expected <section> within the cfe_es_app_tlm_mid packet - the following items are not behaving as expected : <number> . bssize <elongated> , codesize , and datasize always report <number> for a given app . <number> . startaddress for a given app changes whenever the software reset . <section> <number> . start <allcaps> fsw </allcaps> <number> . send the cfe_es_query_one_cc for a given app <number> . verify that the bssize <elongated> , codesize , and datasize always report <number> + startaddress is not fixed ( this may be by design . <repeated> i am thinking that it should only change if the software is re - compiled ) . <section> oracle vm virtualbox os : ubuntu - <number> versions : cfe v6 . <number> - rc1 + dev218 , osal v5 . <number> - rc1 + dev109 , psp v1 . <number> - rc142 <section> dan knutsen <allcaps> nasa </allcaps> / goddard",3
"add compile time assert that platform config sizes are < mission config sizes <section> a stakeholder bumped up cfe_platform_sb_max_pipes to <number> but left cfe_mission_sb_max_pipes as <number> , which is a broken config since tlm for pipedepthstats is sized using cfe_mission_sb_max_pipes . <section> add a compile time assert that cfe_platform_ * is < cfe_mission_ * <section> charge more to fix user errors . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , ping <user>",2
"incorrect osal <allcaps> api </allcaps> guide format in users guide reference the <allcaps> api </allcaps> is no longer a * . doc , it ' s generated and deployed from doxygen as a pdf , and it goes in a separate branch . right now it ' s in the cfs repo at <url> _originally posted by <user> in <url>",1
"standardize on "" docs "" subdirectory for documentation <section> in nasa / osal # <number> and nasa / psp # <number> , the <code> subdirectories will be renamed to <code> , to be consistent . going forward , documentation should be in a <code> subdirectory on all submodules / components . <section> places where <allcaps> cfe </allcaps> build system is using / referring to a <code> subdirectory ( e . g . refs into <allcaps> osal </allcaps> ) should be changed to <code> <section> needed for compatibility with / dependency on nasa / osal # <number> <section> joseph hickey , vantage systems , inc .",2
cfe_es_getpoolbufinfo header has incorrect return description <section> the return in the header says it returns execution status but it actually returns the buffer size or error code . <section> header file should be changed to match the implementation . <section> the code that does this has a comment saying it ' s not workable so we could also change the implementation <url> <section> alex campbell <allcaps> gsfc </allcaps>,1
"clean up version header and standardize reporting <section> unnecessary macros ( coding standard ) , strange line splits , various event formats . <section> i will provide a suggested cleanup . if people like it , keep it and consider applying the pattern across repos . <repeated> if not , toss it . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , update version description per current design <section> fix # <number> - cleanup of version description , biggest fix is mission revision definition location ( not in config files ) . also deleted template section which just duplicated an outdated version of cfe_version . h . <section> ci - documentation only <section> none <section> ci - documentation only <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"fix # <number> , document cfe_tbl_unregister use - case <section> fix # <number> - documents cfe_tbl_unregister on shared table use case vs use by owning task . <section> ci - documentation only <section> none <section> ci <section> # <number> documents potential races , global table handles often are not protected so care needs to be taken when using shared tables . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"fix # <number> , document cfe_es_runloop increment task counter behavior <section> fix # <number> - updated documentation <section> ci - documentation only <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"update <allcaps> api </allcaps> / error code documentation relative to osreturncode cases <section> there are multiple cfe <allcaps> api </allcaps> ' s that can return osreturncodes ( cfe_fs_readheader , cfe_fs_writeheader , etc ) . this is not explicitly documented in the <allcaps> api </allcaps> or as part of cfereturncodes . <section> add documentation . they do not conflict due to the severity bits / service bits . <section> convert all return codes to the <allcaps> cfe </allcaps> set , but probably not worth it and could obscure source of error . <section> spawned from requested change in # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"fix # <number> , updated fs read / writeheader <allcaps> api </allcaps> return documentation <section> fix # <number> - updated return documentation for cfe_fs_readheader and cfe_fs_writeheader to state they return bytes read / written or error code . left as cfe_status_t since they do return error codes , although overloaded . it is confusing since <number> actually indicates the data wasn ' t read or written , but that would require an <allcaps> api </allcaps> change . related issue is # <number> . <section> ci - documentation only <section> none , documentation only <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"unify / standardize method for writing files , multiple patterns currently implemented <section> some files are still written directly from the command handler ( main task ) , see <code> for example . some request the write from a background task using <code> and cfe_fs_background * routines , see <code> . then there ' s also the unique <code> with it ' s own run function that does not utilize <code> . side note - <code> does not check for cfe_fs_writeheader valid size ( just >= <number> ) <section> scrub all file writes and implement a single pattern . this should standardize events , error handling , scheduling work , dump deconfliction , etc . note there ' s multiple issues with overloaded eids in reporting errors , etc . avoid additional complexity from "" backwards compatible "" event messages , etc . <section> if these really require different handling , summarize file write handling and document . current design is challenging to analyze for file write timing impacts without in - depth knowledge of implementation . <section> # <number> documents some of the eventid issues <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"provide ut_bsp_lock / unlock in <allcaps> cfe </allcaps> assert app <section> in nasa / osal # <number> it adds a ut_bsp_lock / ut_bsp_unlock routine to protect the utassert global data structures . however for cfe_assert app the utbsp . c file is not used , it provides its own routines . therefore these routines need to be added . <section> add ut_bsp_lock / unlock wrappers in <allcaps> cfe </allcaps> assert ( this already has a mutex ) . <section> joseph hickey , vantage systems , inc .",2
"unique warn_logfile for documentation builds <section> <code> is set the same for both cfe documentation builds since it ' s set in cfe - common . doxyfile . in . potential conflict during a parallel build . <section> set unique warning file names for usersguide and doc build . <section> none <section> # <number> would also deconflict , but would deconflict ci artifacts ( no longer would need to rename in related action ) . this was mentioned in # <number> , but updated to make specific to the undocumented warnings . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"same event id used in multiple locations ( <allcaps> overloaded </allcaps> ) , should be unique <section> as part of <allcaps> eid </allcaps> scrub , identified the following cases where an eventid was used in multiple locations ( intent is for eids to be unique ) . cfe_es_syslog2_err_eid : <url> <url> cfe_es_erlog2_err_eid : <url> <url> cfe_es_perf_log_err_eid : <url> <url> cfe_es_filewrite_err_eid : <url> <url> cfe_es_creating_cds_dump_err_eid : <url> <url> # <number> documents overload cfe_sb_snd_rtg_eid and cfe_sb_snd_rtg_err1_eid cfe_sb_bad_cmd_code_eid : <url> <url> cfe_sb_getpipename_id_err_eid : <url> <url> cfe_sb_getpipeidbyname_name_err_eid - note the message also is not all that useful . <url> <url> cfe_evs_err_crlogfile_eid : <url> <url> cfe_evs_err_evtidnoregs_eid ( might benefit from being common code ) : <url> <url> <url> cfe_evs_err_appnoregs_eid , cfe_evs_err_illappidrange_eid , cfe_evs_err_noappidfound_eid - used in <number> locations , refactor ! cfe_evs_err_crdatfile_eid : <url> <url> cfe_evs_err_invalid_bitmask_eid used in <number> different places for different bitmasks , refactor candidate . cfe_tbl_load_success_inf_eid : <url> <url> cfe_tbl_validation_inf_eid : <url> <url> cfe_tbl_file_access_err_eid : note - gave up here . based on the number of these and no near - term solution it ' s likely explicitly recording every duplicate use of event ids will be out of date by the time this is addressed . may note as "" <allcaps> overloaded </allcaps> "" in event documentation but that is not all that reliable either . suggest scripted verification . <section> create unique eids <section> none <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"erroneous time behavior <section> time is jumping to an erroneous value after sending the cfe_time_sub_1hz_adjustment_cc command . i am not clear if the erroneous behavior is isolated only to the cfe_time_sub_1hz_adjustment_cc command - the error was just noticed when testing a script that sends that command . <section> steps to reproduce the behavior : <number> . set the <allcaps> stcf </allcaps> to a known value <number> . send add 1 hz adjustment ( in my attached test report i did <number> sec per sec to demonstrate behavior ) <number> . send sub1hz adjustment ( in my attached test report i did <number> sec per sec to demonstrate behavior ) <number> . observe an anomalous time jump ( lines <number> - <number> in my attached report ) <section> oracle vm virtualbox os : ubuntu - <number> versions : cfe v6 . <number> - rc1 + dev218 , osal v5 . <number> - rc1 + dev109 , psp v1 . <number> - rc142 . <section> dan knutsen <allcaps> nasa </allcaps> / goddard erroneoustimebehavior . txt <url>",0
"cfe_es_calculatecrc header has incorrect return description <section> the return in the header of cfe_es_calculatecrc says it returns error codes but it does not . when things go wrong it returns either the input crc or <number> depending on how it went wrong , <section> header should correctly explain what cfe_es_calculatecrc can return . <section> if typecrc is a non - implemented type then it returns <number> . if dataptr is null or datalength is zero it returns the input crc <section> alex campbell <allcaps> gsfc </allcaps>",1
"order event id ' s and fix duplicates <section> the whole "" <allcaps> max eid </allcaps> "" concept for avoiding conflicts is poorly followed , out of order <allcaps> eid </allcaps> ' s then lead to collisions . just one example shown here ( there are multiple ) : <url> <url> <section> order <allcaps> eid </allcaps> ' s by number . put new ones at the end . remove the unused <allcaps> max eid </allcaps> value which is fragile anyways . <section> none <section> # <number> - incorrect max <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"streamline change history in readme <section> the changelog history clutters the readme . <section> move all change history to a new <allcaps> changelog </allcaps> . md . replace "" history "" section on readme with a "" changes in latest build "" section that contains the latest entry in the changelog . <section> automatically generating the changelog . stop including the change summary in the readme . <section> none",1
"protect from eventid collisions with <code> <section> <allcaps> evs </allcaps> uses <code> to mark slots in the filter table as free : <url> since <code> is of type <code> , this ends up colliding with 0 xffff which is not documented in the <allcaps> api </allcaps> ' s as being "" reserved "" . leads to some very strange asserts in the coverage tests where - <number> eventid returns cfe_success where it should be rejected : <url> <section> <code> should be documented as an invalid eventid ( expose ) , and reject in apis / commands that take eventid . <section> none <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"convert or remove "" cfe requirements . docx "" <section> <code> is not easily readable since it requires both a download and the user to have ms word or equivalent installed . the document ' s purpose is ambiguous given the existence of <code> . i have also seen some "" tbds "" in the document hinting that there is some more work needed . <section> various options add a readme to the docs directory that explains the different files . additionally , replace <code> with markdown or <allcaps> pdf </allcaps> <section> none <section> none",1
remove unused <code> <section> unused error code . unsubscribe returns <code> from an unsubscribe call when there are no subscribers . <section> remove <section> none <section> # <number> updated the documentation <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"remove <allcaps> osal api </allcaps> guide from <allcaps> cfe </allcaps> <section> in nasa / osal # <number> the scripts for generating the <allcaps> osal api </allcaps> guide are now included in the <allcaps> osal </allcaps> repo , based on what <allcaps> cfe </allcaps> had here . with this , it should not be necessary to include the <allcaps> osal </allcaps> documentation in the <allcaps> cfe </allcaps> repo any longer . <section> remove the <allcaps> osal api </allcaps> guide config / templates from <allcaps> cfe </allcaps> , and call the <allcaps> osal </allcaps> script as a subdirectory to build the <allcaps> osal api </allcaps> documentation . <section> depends on nasa / osal # <number> being merged first ( or at the same time ) <section> joseph hickey , vantage systems , inc .",1
"move <code> internal ( no longer an <allcaps> api </allcaps> ) <section> since it ' s set up and registered by the <allcaps> time </allcaps> service via <code> , it no longer needs to be exposed . <section> move prototype internal <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , add doxygen aliases for <allcaps> osal </allcaps> parameter / retvals <section> adds "" nonnull "" , "" nonzero "" , and "" covtest "" tags to mark parameters and return values in documentation . this info is helpful when auditing the test cases . fixes # <number> <section> build osalguide documentation , confirm output in the generated <allcaps> html </allcaps> <section> documentation only , no <allcaps> fsw </allcaps> . doxygen parameters and retvals can now be marked accordingly <section> ubuntu <section> this markup will be required for some of the <allcaps> osal </allcaps> return value verifications <section> joseph hickey , vantage systems , inc .",1
"documentation tag to indicate return vals that are not tested in functional test <section> the pattern employed in <allcaps> osal </allcaps> ( and <allcaps> cfe </allcaps> ) is that functions should list all directly - generated return values from an implementation as <code> tags in doxygen markup . these are then cross referenced between the test logs to ensure that all documented return value are tested , and all tested return values are documented . coverage test should be able to exercise all values all the time , but functional test may not be able to exercise all of them . in particular the ones which depend on a failure of the underlying system call are not likely to be trigger - able from a functional test environment . <section> these return codes should be marked in the doxygen as being "" coverage test only "" . this will capture the fact that this has been checked / examined and the functional test is not expected to reproduce this value . <section> the retval statements could be entirely removed if they are not trigger - able in a functional test environment . ( many are pass - through values from the low level impl , but probably not all of them ) <section> this info is valuable not only for this test / documentation round but also any future audits of these test cases by projects and / or future releases . <section> joseph hickey , vantage systems , inc .",1
"small typos in developers guide <section> "" definition "" and "" negligible "" are misspelled in the developers guide .",2
"cfe_*_verify <censored> . h files are not included anywhere , so error checks are not being applied <section> <code> <code> <section> can also test by providing an invalid parameter . i set : <code> which should have triggered : <url> <section> verifications should be performed <section> na <section> - hardware : docker on laptop - os : ubuntu <number> - versions : bundle main <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"<code> , sample platform and sample mission headers require stdbool . h to appropriately evaluate <code> and <code> <section> without stdbool . h included , both true and false evaluate to <number> for the preprocessor , so tests in <code> will fail to check for exclusive settings . <section> <code> results in : <code> <section> should only fail if both <code> and <code> are defined as <code> <section> <url> <section> - hardware : docker on laptop - os : ubuntu <number> - versions : bundle main <section> note fairly hidden , since <code> is included in osal / src / os / inc / common_types . h . only observable if these headers are included from a file that does not already include osal standard headers . also <code> is not actually included anywhere (# <number> ) <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
use <code> in cmd / tlm and handling <section> defined as int16 even though a type is available : <url> <url> <url> <url> <url> <url> <url> <url> <url> <url> <url> <section> use <code> <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
factor out duplicate code in <code> by using <code> <section> duplicated code : cfe_time_calculateutc <section> <allcaps> utc </allcaps> = <allcaps> tai </allcaps> - leapseconds . use the utility function instead of duplicating logic to get <allcaps> tai </allcaps> . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"improve <code> error handling <section> hard coding retry count to <number> is a bit "" magic "" , not clear how much margin this has , not clear statistically how may conflicts are occurring , no error reporting , no way for the calling routine to take action or track , not clear even if these values are always required to be in sync or what happens if they are not , not obvious what is intended here . <section> clarify design , track / monitor / report performance / errors . if there ' s uses where it ' s critical , may need to deconflict ( protect query from update ) . maybe provide <allcaps> api </allcaps> that ' s slower but always correct , vs faster but possibly invalid if that ' s really a need . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<code> misnomer <section> <code> actually reads in and sets variables , so "" query "" is not a great verb to use . <section> rename ( maybe <code> or similar ) <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"time sync callbacks only called when the tone is marked as good <section> time sync callbacks may be desired even if <code> . <section> consider optional notification regardless of tone "" goodness "" <section> not really clear on the use case where <code> but the synch callback is desired . it ' s really just a check if it ' s within the <number> hz tolerance , which should be true even if it ' s virtual . if configured as a server and virtual , the tone should always be good . if not virtual and there ' s an external sync , should only call if the 1 hz is within tolerance . if not virtual and no external sync , then the <allcaps> isr </allcaps> would not get called anyways , so it would not call <code> , so not clear why changing the internal check against <code> would matter . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <allcaps> note </allcaps> - requested more information from commenter .",2
combine <hashtag> if </hashtag> / <hashtag> end if </hashtag> directives into <hashtag> if </hashtag> / <hashtag> else </hashtag> / <hashtag> end if </hashtag> in <code> <section> mutually exclusive logic : <url> <section> use <hashtag> if </hashtag> / <hashtag> else </hashtag> / <hashtag> end if </hashtag> <section> # <number> would likely make this obsolete <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"remove "" return ; "" from last line of void functions <section> "" return ; "" at last line in void function is redundant . <section> remove <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove empty <code> / <code> blocks in <allcaps> time </allcaps> for tone is / was , comment is sufficient <section> pointless empty block , comment is enough : <url> <url> <section> remove , also indent comments ( if autoformatting does not conflict ) . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"support multiple / alternative table definitions <section> some users have requested the ability to generate multiple different table files / configurations as part of the build , to represent different hardware configurations . this way , they can choose the active configuration at install time ( by choosing which file gets copied to the target ) or at run time , by loading a different table file . <section> currently the "" add_cfe_tables "" does not directly support this , but with a little work it should be able to . this requires adding an "" install "" hook so the user has a proper place to call this function to generate customized table files . <section> while this is possible to some degree with the current build system , all decisions are made at build time . for instance the c preprocessor can be used ( via e . g . add_definitions ) to select different table values based on build - time configurations . alternatively , the user can write their own script to compile a c file and call <code> on it , but it can be difficult to determine the proper include paths and compile definitions . <section> joseph hickey , vantage systems , inc .",2
"replace hardcoded message limits in <allcaps> time </allcaps> services <section> hard coded as <number> , although if there ' s <number> messages in the pipe that ' d be an issue . <repeated> <url> <url> <url> <section> the default subscriptions just use <code> so could just use it to keep subscriptions the same , even though <number> would be bad it ' s likely handled by the related verification logic . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"factor out duplicate logic in <code> and <code> <section> <code> and <code> duplicate logic . <section> refactor . <section> <code> seems overly restrictive . since it ' s a single entry per app , could just set it as <code> . note <code> does set it to <code> without restrictions . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"refactor or replace <allcaps> api </allcaps> ' s related to <code> <section> <code> , <code> , <code> , <code> , <code> all just call <code> . <section> could just expose and use cfe_time_getreference . <section> if the structure needs to stay internal , consider factoring out common logic . <section> code review . related to # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
replace if ' s with table and loop in <code> <section> <code> could just be a table / loop instead of individual <code> ' s: <url> <section> simplify with table / loop <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
declare leap seconds as unsigned <section> <code> type used for <code> in command payload : <url> also in hk : <url> <allcaps> api </allcaps> ' s: <url> <section> convert to <code> . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"define and apply naming standard for event id definitions <section> some services include the error type as part of the name of the <allcaps> eid </allcaps> / eventid / event id , others do not : <url> <url> <section> define and apply standard naming pattern . suggest append either _info_eid , debug_eid , err_eid , or crit_eid to the name . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , typos in developer guide <section> this commit fixes a few minor typos in the developer guide . please let me know if i need to file issues for such trivial changes , too <happy> <section> none . <section> none . <section> none . <section> none . <section> none . * individual <allcaps> cla </allcaps> is on file *",1
"simplify <allcaps> tbl </allcaps> <code> indication , and possibly the buffered table concept in general <section> strange indexing / math for double buffered vs non - double buffered tables for <code> : <url> really the whole "" double buffered "" table concept is a bit strange / limited . <section> separate into explicit shared buffer index and table buffer index or other method to deconflict meaning . <section> really "" double buffered "" is the capability to have <number> versions of a table in memory and be able to switch . could generalize to define the number of tables in memory , and be able to load to any of them , activate whichever one is request , etc . if the selected table to load to is active , then use a shared buffer and if not just directly load . design collapses and unique logic for "" double buffering "" goes away ( for just <number> table in memory it ' s the "" single buffer "" use case , more than <number> is an enhanced version of "" double buffer "" but still allows user to load to whatever index they want ) . could have an option to "" disallow "" loads to active table ( single buffer would reject reloads , multiple would prevent loading active index ) . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
add option to send <code> event from <code> <section> repeated pattern in <allcaps> tbl </allcaps> to find a table and if not found send the same event : <url> <url> <url> <url> <url> <url> <section> optionally ( if needed ) send event in <code> <section> other refactoring as suggested in # <number> <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"implement single pattern for command handler returns <section> - es ignores command handler returns , just returns cfe_succss ( increments counters within handler ) - <allcaps> evs </allcaps> captures the return and increments appropriate counter as part of the main command processing routine - <allcaps> tbl </allcaps> defines <code> but does not use it consistently , example : <url> <url> <section> utilize a consistent pattern . suggest using cfe_status_t and defined error types . this allows command handlers to use apis and not need to convert error codes . <section> none <section> code review , also related to issue # <number> to consistently use <code> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> tbl </allcaps> owner app id logic should utilize id utilities / defines <section> <allcaps> tbl </allcaps> services defines <code> as <code> and then tests for equality , just ends up mixing concepts . the relation is not obvious and it ' s not clear cfe_tbl_not_owned is actually an ( undefined ) id . <section> keep it simple , just use the valid id macros and associated definition for undefined if it ' s not owned . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"overloaded internal return codes in <allcaps> tbl </allcaps> service <section> multiple return codes are defined as <code> , this defeats the purpose of named codes and does not allow for unique handling , checking the error code is also not actually testing that the expected incorrect code was returned . <url> <url> note there ' s at least one cases where an index is initialized to one of these error codes , which is especially fragile (# <number> ) <section> defined unique error codes , if they every get passed out an <allcaps> api </allcaps> really they should be defined in cfe_error . h <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"printf format issue on <allcaps> rtems </allcaps> <section> when compiling the test app under <allcaps> rtems </allcaps> , a build failure occurs : <code> <section> build system for <allcaps> rtems </allcaps> <number> with unit tests enabled , and <code> will fail to build . <section> build should succeed . <section> <allcaps> rtems </allcaps> <number> <section> joseph hickey , vantage systems , inc .",2
"<code> translates a positive return from the validation function to an error ( - <number> ) <section> although it ' s documented in the <allcaps> api </allcaps> that a positive return is considered an error ( and overwrites the return status ) , this is out - of - family with the rest of cfe . <url> <url> also hardcoding as - <number> is not all that helpful , probably worth a unique error code ( if this error is kept ) . <section> seems like the code is trying to do too much . if ! = success just send the error event and return the status ( it ' s the apps problem to handle it ) , if it does not comply w / cfs error code standards it ' s outside the scope of cfe to do something special with it . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"refactor <code> to unmix error codes with indexes and simplify loop <section> mixes error codes ( at least by name ) with an index : <url> also the do / while loop is unnecessarily complex in how it exits ( has to check for last entry twice ) . <section> consider a simpler while or for loop with a break , do not mix index w / a command code . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<code> misnomer <section> <code> just marks the table as updated , does not "" notify "" <section> clarify name to reflect what is actually done <section> none <section> code review - just an internal naming change <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
consistent loop implementation in <code> and <code> <section> loops could be the same but are not : <url> <url> <section> consistent implementation <section> none <section> code review - note this is style suggestion only <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"remove local / duplicate file name length check from <code> <section> filename length is checked by os_opencreate , does not need a local check : <url> <section> use <code> return code to report the appropriate error <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
remove unnecessary <code> in <code> <section> memset followed by writing everything except last char : <url> <section> just do the <code> then <code> <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"use <allcaps> xor </allcaps> for ping - pong buffer in <allcaps> tbl </allcaps> <section> current pattern use for the active / inactive buffer index is not as obvious / common ( <code> ) , examples but needs full scrub : <url> <url> <section> <code> <section> current implementation works , this is just style <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"implement <allcaps> jpl </allcaps> rules in codeql <section> codeql does not use <allcaps> jpl </allcaps> rules , which is used in the upcoming coding standard . <section> implement <allcaps> jpl </allcaps> rules for codeql . continue using the security queries , but keep them separate from the <allcaps> jpl </allcaps> results . can use two different workflows , one for the coding standard and one for the security queries . <section> might be able to use one workflow , as long as the results can be easily identified as a coding standard issue or security issue . <section> <allcaps> jpl </allcaps> queries are found here : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",2
"convert to static array sizes for string parameters - <code> and scrub string handling <section> many apis and even internal functions require specific minimum string sizes to avoid a potential buffer overrun , yet take simple pointers , i . e . <code> . some tools complain about strcpy / sprintf / etc , but the sized versions are not any safer if the passed in string is too short . example case : <url> <section> leverage c99 checks on sized parameter arrays , which also will protect at compile time from <allcaps> null </allcaps> inputs . once minimum sizes are guaranteed , then revisit string comparison / manipulation calls to avoid buffer overruns based on these enforced minimums . note not backwards compatible where pointers are passed in vs the array . also would <allcaps> require </allcaps> the removal of all <allcaps> null </allcaps> pointer test cases and checks ( would cause compile errors or dead code respectively ) . <section> none <section> code review , related to # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
write <code> errors to syslog <section> multiple errors are not written to the syslog : <url> <url> <url> <url> <section> report errors <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"possible race conditions in table sharing if sharing / unsharing / unregistering while managing / updating / accessing <section> related to # <number> , no built in protection from possible race conditions with global table data if tables are shared / unshared / unregistered currently with other management functions from multiple tasks . <code> example : <url> <code> example : <url> note , looks avoidable if <code> and <code> happen at startup and shared tables do not <code> . but still need to keep in mind blocking related to management and how updates work . <section> via inspection . <repeated> <section> no race . add locks or disallow <allcaps> api </allcaps> use in certain system states . consider if simplification is possible based on actual use cases . <section> see above <section> na - inspection <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"<code> not processor specific ( comment clarification ) <section> multiple locations refer to <code> as "" processor specific "" , which does not make sense since it ' s just appname . tablename . even if the table is processor specific , it should likely have a non - processor specific name such that apps are portable . examples : <url> <url> <url> <url> <url> <url> note <code> is described as <code> which is somewhat circular , but this could be addressed as part of # <number> ( similar to # <number> ) . suggestions - fullname , qualifiedname , resourcename . <repeated> <section> remove processor specific language <section> none <section> # <number> is similar wrt <allcaps> cds </allcaps> names # <number> is a general issue related to resource naming <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"use <code> in <allcaps> tbl </allcaps> reporting when available <section> inconsistent reporting of table "" context "" throughout <code> ( and likely others ) . just ' name ' ( no app ) example : <url> no table context at all : <url> re - assembled name : <url> actual <code> use : <url> <section> just use <code> , it ' s assembled right at the start . consistent syslog format ( see also # <number> ) of "" function : tblname - message "" or similar . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
""" <allcaps> null </allcaps> "" entry no longer supported for libraries in startup script <section> set sample_lib entry point to <allcaps> null </allcaps> : <code> <section> see above . <section> <allcaps> null </allcaps> should skip the symbol lookup and load . note it does skip if the field is just left empty , as in : <code> <section> only skips if empty string : <url> probably could just convert "" <allcaps> null </allcaps> "" to empty in the cfs_lib processing section . <section> - hardware : docker - os : ubuntu <number> - versions : bundle main <section> found by <user> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"refactor <allcaps> tbl </allcaps> to reduce complexity , improve maintainability , reduce technical debt <section> <allcaps> tbl </allcaps> functions are complex and utilize many modes . complex enough that minor maintenance is avoided due to the high likelihood of breaking something . other code review notes to address as part of the refactor : - if block could go inside else at line <number> <url> - free handle is consumed even if status is already an error ( and not returned to the pool ) <url> - similar logic in <code> for single and double buffered tables , factor out duplication - may be able to shorten lock in <code> to just the resource allocation parts ( although since it ' s typically just part of startup should not be an issue ) - multiple returns in <code> should be refactored out - <code> loop could be a do / while and only loop if additional management required , although really the only two things that could be done in one manage are validate and dump ( if an update is scheduled it ' s first and exits loop ) , although these are globals so it seems like a validate could run before an update . <repeated> related to # <number> - consider using <code> from <code> - <code> should use <code> <section> break down large complex functions . <section> note grouped all the suggested refactor changes here , could break out smaller tasks and implement one by one but that may result in extra work . <section> code review , related to # <number> in that sharing is not clearly defined <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"consolidate command payload base types <section> many services define a service specific no - arg payload . there ' s also many filename only commands with repeated definitions , and numerous others . <section> consolidate , define a common set and standardize parameter names . still can utilize unique payload / message names , but just typedef the generic ones . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
use <code> for <code> in <allcaps> tbl </allcaps> <section> <code> not using expected type : <url> <url> <section> use <code> <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"update time format to support negative time or unify with <allcaps> osal </allcaps> time <section> unsigned <number> bit used for seconds in cfe . requires unique handing for rollover and avoiding negative time . <section> signed <number> bit seconds , or unify with <allcaps> osal </allcaps> time format and provide the necessary conversions . consider typedef of seconds and subseconds to support strict checking ( if there ' s still any functions left that take individual elements ) <section> none <section> code review , note backwards compatibility issues <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove <code> and <code> <section> no need to support getting the individual fields , just use <code> . avoids misuse , since individual fields are not in sync ( subseconds could roll between calls , etc ) . <section> remove / deprecate these extra apis ( confirm against requirements ) <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove / replace <code> macro <section> the stated purpose ( copy across different structures with second / subsecond fields ) really is better avoided by using a common time structure . <section> remove <code> , use cfe_time_systime_t which enables simple assignment (x = y ) , or replace with more type - safe / inline function . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"define table maximum object name length <section> hardcoded length : <url> <section> add a local define for reference for cases where sizeoff ( objectname ) is not appropriate . note elf2cfetbl just uses sizeof , so size is not duplicated anywhere currently . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"use <code> instead of individual seconds / subseconds <section> inconsistent use / definition of time structure vs individual sec / subsecs , benefits from common structure : <url> <section> use <code> <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove <code> and <code> apis <section> these two apis are out of family , no others take arrays of handles . not a significant benefit to maintain this capability . <section> remove these two apis <section> could provide handle array <allcaps> api </allcaps> ' s for all the standard <allcaps> tbl </allcaps> calls ( register , manage , etc ) , but really needs a use case since it ' s rare to see the existing apis used in the wild . this is not really all that great since it does not allow for individual error handling . maybe "" all or nothing "" sort of error handling is ok , but should be considered in the trade . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"embed table modification response actions / notification in <code> <section> <code> <allcaps> api </allcaps> that notifies table services the table has been modified could be replaced by an additional parameter to <code> , which might help with table sharing / synchronization since required actions could be completed prior to release . <section> perform "" modification "" response actions as part of <code> . <section> consider as part of design review related to # <number> <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"comments / document cleanup relative to <allcaps> tbl </allcaps> / <allcaps> time </allcaps> review <section> <code> , <code> , and <code> are all performed by <code> if there ' s a pending request . clarify in <allcaps> api </allcaps> documentation for all <number> ( missing completely from <code> ) . s / addresses / address , this should cross reference , not self reference : <url> add short description of spacecraft time , it ' s number of seconds since the epoch as set in mission configuration <url> self reference does not make sense : <url> there is no <allcaps> api </allcaps> to set or adjust leap seconds or <allcaps> sctf </allcaps> , this should be done by ground command only : <url> <url> now called by a timer , not <allcaps> psp </allcaps> : <url> hk command handler also sends the table registry packet ( if requested ) and dumps "" dump - only tables "" that are pending , document : <url> s / issued / issues : <url> remove commented out verification check using sizeof from cfe_tbl_verify . h : <url> remove pointless comment : <url> <section> fix <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"clarify acceptable actions on a shared table along with expected patterns and add functional tests <section> currently table sharing management requires careful design or restricting the design space to avoid block / priority concerns . - there is not a "" read only "" way to get a table address to restrict capability for management to a single "" owner "" - since update / management can be done by any app with shared access , blocking / priority has to be managed - not immediately clear how the locking / sharing is all intended to work together <section> should clarify the sharing design documentation , there ' s currently "" hints "" in the apis and a very short section in the cfe application developer ' s guide but there are not functional tests that actually implement / exercise all the sharing patterns or a full description of how it ' s intended to work . - clearly describe how unregistering a shared table is expected to work ( or not ) <url> <section> consider additions / simplification to the sharing model like read only access , etc . need to tie to requirements , funding , use cases , etc and trade against the additional complexity . <section> code review , see also # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"fix # <number> , correctly format code block section terminator <section> - a code block wasn ' t terminated terminate properly , causing the markdown to not render correctly on github . fix # <number> <section> <number> . view on github <section> - no impact to behavior <section> - n / a <section> n / a <section> n / a <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - company <allcaps> cla </allcaps> from honeybee robotics on file .",1
"add ${ <allcaps> argn </allcaps> } to add_cfe_coverage_test in arch_build . cmake <section> trying to build cf unit tests with additional libraries through add_cfe_coverage_test does not work because <allcaps> argn </allcaps> is not added in the target_link_libraries call . <section> add <code> into target_link_libraries call in add_cfe_coverage_test so that additional libraries can be given where necessary . <section> writing my own coverage test addition for my use case , but just adding the ${ <allcaps> argn </allcaps> } in add_cfe_coverage_test works , so why re - invent ? <section> the addition should be transparent to any other calls currently in use ; it is opt in only . <allcaps> argn </allcaps> should be empty in current use cases ( it could not be , but that is unlikely ) . <section> alan gibson <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <number>",2
"remove suppression of files checked by cppcheck in action to allow visual confirmation it worked <section> the "" all "" static analysis check suppresses standard output with <code> , so can not see that it actually did anything <section> remove <code> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
remove travis - ci script <section> the travis - ci script is currently broken and duplicates what ' s now covered by github actions <section> delete <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"cfe_es_poolcreateex numblocksizes error handling <section> in the header file of cfe_es_poolcreateex , for parameter numblocksizes it says "" if set equal to zero or if greater than <number> , then default block sizes are used . "" in the code though if numblocksizes is greater than cfe_platform_es_pool_max_buckets ( which is set to <number> ) then it returns error code cfe_es_bad_argument . <section> the header and functionality should match . <section> alex campbell <allcaps> gsfc </allcaps>",1
add a ci action to build and execute the cfe coverage tests <section> ci does not build and execute the cfe coverage tests <section> add <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
fs header functional tests <section> the functional test currently only test the base cases of the <allcaps> api </allcaps> functions . more in depth tests still need to be written . <section> write tests for all the possible cases <section> follow up to # <number> <section> alex campbell,2
<allcaps> es cds </allcaps> functional tests <section> the functional test currently only test the base cases of the <allcaps> api </allcaps> functions . more in depth tests still need to be written . <section> write tests for all the possible cases <section> follow up to # <number> <section> alex campbell,2
cfe es child task <allcaps> api </allcaps> functional tests <section> the functional test currently only test the base cases of the <allcaps> api </allcaps> functions . more in depth tests still need to be written . <section> write tests for all the possible cases <section> follow up to # <number> <section> alex campbell,2
use <code> for <code> in <code> <section> not using <code> : <url> <section> a clear and concise description of what you want to happen . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"make invalid id a generic define and use ( always <number> ) <section> hardcoded zero instead of <code> used by <code> : <url> <section> define a generic cfe_invalid_id <happy> <number> ) , and confirm it ' s used everywhere . <section> at minimum replace this specific use with define . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> api </allcaps> prototype / implementation mismatch scrub <section> example from <code> , <code> vs int32 : <url> <url> note numerous others , some noted in <allcaps> tbl </allcaps> . <section> general scrub , prototypes across all the headers should match implementation . also could remove <code> per # <number> . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add helper for <code> to implement common logic <section> repeated logic / pattern in <code> , <code> , and <code> . <section> put common logic in a helper , pass in info . <section> might even be able to make a generic function in # <number> for all apps / services to use since it ' s likely a very common pattern . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
replace loop with single <code> in <code> <section> loop not needed <url> <section> just <code> the sizeof*count <censored> . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"improve <code> naming <section> <code> , <code> and <code> have very similar names , but are of different type and from different causes . easy to confuse / typo or mix up the difference . <section> replace with more descriptive names , one suggested pattern is to also embed the type in the name . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
create array and loop for software bus subscriptions <section> repeated logic / pattern in subscriptions : <url> <section> create array and loop . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"add service "" health "" parameter to hk ( and provide a suggested pattern for apps to follow ) <section> historically syslog or events are used to report issues , and telemetry status reporting is likely scattered and / or inconsistent . not easy to really be sure everything is "" healthy "" at a glance . example issue is with system startup synchronization , there is not an easy way to tell ( especially if there ' s spotty com ) that startup synchronization was successful . there ' s also other cases where operation continues "" best effort "" in failure conditions , since there is not anything that can really be done from within the system . <section> add an app / service health summary parameter to hk , <number> is healthy and nonzero bits could indicate specific issues have been encountered . latch on condition , but clear with the a reset command . proper synchronization is an easy first condition to add , but scrub for others to include in the summary . with this addition , reduces the dependency on syslog / events for a monitoring system ( like hs or an "" external "" monitor ) or the ground to take appropriate action . additionally many of the <allcaps> cds </allcaps> "" errors "" are simply written to the system log ( or not ) and initialization continues . when these things fail there is something wrong or something got corrupted , needs to be more obvious ( examples ) : <url> <url> <url> <section> none <section> # <number> would allow apps to add the sync status , note also # <number> would provide the syslog . spawned from issues discussed at code review . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"use a statically constructed table for sb filter initialization <section> no need to store filter settings in global or individually process : <url> <section> statically construct the table and use it for initialization , can loop through it for size test . <section> not sure how consistent this pattern is , but another candidate for # <number> and use for all the services ( available for apps if they want it ) . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"report cfe_es_waitforsystemstate timeouts <section> timeouts are not reported when using <code> . <url> <section> syslog from within the <allcaps> api </allcaps> . <section> note the syslog from within the <allcaps> api </allcaps> provides the minimal amount of notification only , expectation is apps / services would handle the return for any local / additional actions that may be required ( like system heath / synchronization status reporting ) <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <allcaps> edit </allcaps> - updated possible solutions .",2
"add status output to <code> <section> <code> does not return status , so unique / local timeout responses can not be handled by the caller . <section> pass the return from <code> through <code> back to the caller so timeouts can be handled if needed from within the app context . note # <number> adds a syslog on timeout from underlying <code> . so handling would be anything extra , like app health reporting , aborting hazardous ops , etc . <section> none <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"use sized char array for <code> parameter and limit print <section> <code> takes a char pointer <code> without an associated size . relies on user to size the buffer correctly for the sprintf : <url> <url> <section> related to # <number> , explicitly size as an array and use snprintf to print to limit appropriately . note # <number> suggests moving this to a generic utility ( out of sb scope ) , maybe <allcaps> es api </allcaps> . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"replace magic number in <code> <section> the <code> limit on an <code> does not seem to make sense , looks like int16 max instead of uint16 max ? <url> <section> use a defined max , add a comment if the max choice is not obvious . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
reduce scope of lock to within <code> statement in <code> <section> locks outside if : <url> <section> move inside <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"combine mostly duplicated logic in <code> <section> duplicated logic : <url> <section> factor out , make an else with shared logic and internal if for the unique logic <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"improve documentation in sb subscription apis wrt non - priority based delivery <section> although they do document order of delivery ( last is first ) , it ' s not obvious the relation to priority and how a higher priority task could be blocked . related to lack of actual <allcaps> qos </allcaps> options . note duplicated info in each api , should just define once and reference . <section> provide details and example for out of order priority scheduling . <repeated> really tasks where it matters should probably not pend on the same message , and understand how sb works . <section> implement <allcaps> qos </allcaps> / priority delivery <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"factor out construction of fullname in sb event messages <section> <code> is called in virtually every <allcaps> api </allcaps> event message , example : <url> note for the special case in <code> it currently overloads fullname with caller and owner . really should report both if there is not a match . also fullname is referenced before initialized below , but not used . <repeated> : <url> <section> construct fullname outside switch and use it . <section> really there ' s inconsistent reporting in apis ( sometimes system log , sometimes events , unique message formats all over with differing info ) , would benefit from an overhaul . see also # <number> and related issues (# <number> , etc ) to fix . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"define a const global for <code> and use it <section> <code> and similar is defined hardcoded as size <code> , example : <url> <section> create a const global and use it . <section> may make sense to actually scrub reporting in apis to use consistent reporting style / technique . suspect there ' s either repetition or variation across the services . candidate for generic utility function - # <number> <section> code review . note fullname in sb is actually appname . taskname . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<code> typedef implies a callback , but it ' s callback arguments <section> name used in typedef misleading : <url> <section> <code> <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
add tag to <code> structure and use it instead of <code> for <code> and <code> <section> void pointers used in <code> : <url> <section> defining a tag and use in pointer definitions <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
keep local subscription status with subscription info so only one unsubscribe <allcaps> api </allcaps> is needed <section> do not need a special unsubscribe if the setting is available : <url> <section> store local setting so single unsubscribe <allcaps> api </allcaps> can just do the right thing based on the setting . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"remove / replace / rework <code> related macros <section> the <code> , <code> , <code> , <code> are all only used within cfe for avoiding recursion in sb , all just once except <code> <section> remove unnecessary macro , clearer to just use the expression vs an abstraction like everywhere else bits are set , cleared , tested . coding standards encourage avoiding overuse of macros . <section> could replace with inline functions and provide as a general utility ( sb scope is not all that intuitive ) , and use it more consistently . these are not thread safe , if they are maintained consider atomic bit ops . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"comments / document cleanup relative to sb / <allcaps> msg </allcaps> / <allcaps> sbr </allcaps> review ( and # <number> ) <section> clarify <allcaps> ccsds </allcaps> comment , just note <allcaps> ccsds </allcaps> maximum is <number> bigger than int16 : <url> add link to options in documentation : <url> clarify comments to eliminate implied coupling ( <allcaps> sbn </allcaps> is an example use ) : <url> mention cfe_sb_releasemessagebuffer for the case when a message is not transmitted in <code> : <url> extra <code> in comment : <url> comment in <code> about cfe_success status should be brought up to the <code> level , everything is success and explicitly mention in <allcaps> api </allcaps> documentation : <url> s / bush / bus : <url> fix comment , does not pad to boundary , instead pads to be divisible by <number> so compiler will not add padding if payload structure requires <number> bit alignment : <url> <url> <section> fix <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
remove duplicate status check in <code> <section> checking for status and outputing command handler debug event here : <url> could output event within the first check here : <url> <section> move event . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"refactor enable and disable command handlers to use common code w / boolean <section> duplicated logic in many enable / disable command handlers , example : <url> <url> <section> factor out common code . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
simplify logoverflowcounter increment logic <section> the cfe_evs_global . evs_logptr - > logoverflowcounter gets incremented in two locations and is done based on the logfullflag : <url> <section> pull up higher and change the if / else statement to : <code> <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"both enums ( index ) and defines ( mask ) exist for event type <section> having both the mask and the index requires keeping them in sync . event type bitmasks : <url> event type enum : <url> <section> collapse to one solution , either use the mask or the enums . related to # <number> and # <number> . <section> or use one to create the other so they do not get out of sync . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove defines for <allcaps> evs </allcaps> logmode <section> enum is defined here : <url> defines here : <url> <section> remove defines , replace any references with the enums . <section> boolean for overwrite ( although cmd / tlm should be fixed size ) <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
extend cfe service identifier in error codes <section> cfe service identifier is limited to <number> unique values which are fully subscribed : <url> means new modules need to overload existing service identifiers : <url> <section> add one more bit . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
replace character copy with memcpy in <code> <section> character copy performed in a loop instead of a memcpy : <url> <section> memcpy . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"refactor <code> and eliminate typo <section> there ' s a typo in one of the syslogs : <url> also could just write the time structure instead of seconds and then subseconds : <url> <section> write time structure , one syslog with an updated message . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"replace magic number in <code> with <code> <section> magic number : <url> <section> there ' s already a define , use it : <url> <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
avoid using <allcaps> ram </allcaps> to hold pointers to static const data <section> using <allcaps> ram </allcaps> to point to static const data : <url> comment also applies to ramdiskmountpoint . ( and to all of target_config . c ) <section> <allcaps> tbd </allcaps> - needs resolution defined . ping <user> <user> to resolve . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"convert defines to constant variables <section> defines are both discouraged by standards and clumsy when type matters . <section> convert to constant variables , performance is maintained and get type checking . use has started but should really convert the existing defines , example : <url> example of improvements , filters as const variables would allow overflow checking : <url> <section> none . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"simplify handling / checking of event type in commands and use a defined mask <section> inconsistent handling / checking of event type when input by command . there is no type mask defined , so some places it ' s constructed and other ' s hardcoded : <url> internal functions <code> and <code> both <section> mask and use a variable with a constructed value where the value should be const , fragile since each individual value is used ( twice ) so easy to get out of sync : <url> <url> all the command handlers that actually use the above helpers already check against a hard coded value and report out of range bit mask : <url> <url> <url> <url> <section> at minimum define a mask ( near bit definitions ) and use it . helpers could check the range and return an error , then handler could just report on failure . <section> could leave the check in the handler and remove the helpers since they ' d just be an | or & ~ , not really worth a helper for this approach . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"incorrect assumption about file name patterns in table build <section> on most cmake platforms the generated object file names are simply the file name ( including the . c ) concatenated with cmake_c_output_extension . so , for example , on table build for sample_app , the file <code> gets compiled into <code> which can then be used to call <code> . apparently this relationship is not guaranteed , there is at least one example of a platform where this gets compiled to <code> instead of <code> . <section> attempt to build on a platform that does not follow the expected pattern . tables will fail to build with a failure to open the object file due to the name mismatch . <section> table should build successfully . <section> i traced this back to a workaround that was put in for older cmake , which assumes the name of the object file : <url> the preferred / correct way to do this is to use the <code> generator expression , but this only works in newer cmake versions . the workaround was to assume a file name based on the expected pattern , which works most of the time , but there are exceptions . <section> originally reported by <user> when building for vxworks <number> . <section> joseph hickey , vantage systems , inc .",0
"use consistent type for eventid <section> eventid is defined as <code> and <code> , examples : <url> <url> <section> use a consistent definition . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
replace magic number in <code> defnition <section> magic number used : <url> <section> use a defined size ( this is probably for time ) <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
report error writing header in <allcaps> evs </allcaps> write app data file <section> error from <code> in <code> not reported . <section> add an event to report a failure in writing the file header . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"include element that caused write error in event reporting in <code> <section> element that caused error not included in event , so not obvious how much of the write was completed <url> <section> add the element number <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<code> returns <code> when filter already registered <section> see : <url> really all non - <code> returns from command handlers are handled the same ( increment command error counter ) . <section> really they are all just generic command handler errors , no need to be unique . suggest just simplifying ( there ' s already unique events created ) . <section> could define a unique error code , but it ' s not returned via an <allcaps> api </allcaps> so does not really need to be unique . uniqueness does allow for specific return check when coverage testing , but is it really worth unique codes ? <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"refactor handling of <code> return to eliminate duplication <section> logic for handling <code> repeated all over , example : <url> <section> factor out common logic . consider using a switch . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"put common and local counters in structures to simplify reset all counters command handling <section> individual counter values are reset in reset counter commands , example : <url> and logic is duplicated in every service . <section> common counters ( <code> and <code> ) could be in a structure , and for each service the rest of the counters reset by the generic reset counter command could also be in a structure , and simply memset the structures to <number> on reset . then could easily create a generic reset all counters function as part of # <number> . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"pass message id and function code into verify command length functions <section> both message id and function code are already available in typical calling function for the functions that verify command length , so could pass them in instead of extract them from the message ( again ) . note # <number> is open to provide an <allcaps> api </allcaps> to verify command length , so this could be generalized even more by passing in the event id . <section> generalize function , pass in values . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"refactor <code> to use <code> <section> duplicated logic , <code> could get appid and use <code> <url> <url> <section> refactor <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_evs_register - error on truncation and factor out filterlimit <section> <number> . <code> variable is not needed , just use <code> <number> . too many filters are reported in the system log , but should also report an error since this is a significant problem ( will not perform as designed / implemented ) <section> refactor and report <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
remove deprecated elements ( again ) <section> somehow # <number> got reverted in a few locations ( possible merge strangeness ) : <url> <url> <section> remove . again . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"replace ut_displaypkt with utprintx <section> ut_displaypkt is just a specialized version of utprintx , duplication of logic ( do not need the custom version ) . <section> update internal unit tests to use utprintx , make ut_displaypkt a macro that just calls utprintx <section> deprecate and eventually remove ut_displaypkt ( note there are external users that would need to update ) <section> nasa / osal # <number> - this actually fixes utprintx , once in no need for custom fuction . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"links broken in cfe application developers guide from broken code highlighting <section> the links at the top of the cfe application developers guide on the main branch quit working after heading <number> . this seems to be caused by an extra character added to the closing code highlighting marks , which you can see here : <url> note that the format of the document is also messed up because it highlights normal text as code and vice versa after section <number> . <section> steps to reproduce the behavior : <number> . open up the cfe application developers guide on the main branch on github <number> . click on the heading for <number> in the table of contents . <number> . it does not scroll down to that heading for you . <section> the link for section <number> should take me to that section and the document should not have flipped highlighting in section <number> and beyond . <section> none <section> use github to view the file <section> none <section> jeffrey royer , <allcaps> jsc </allcaps> er6",1
"auto increment telemetry sequence count overflow <section> the <allcaps> api </allcaps> ( called by cfe_sb_transmitmsg ) cfe_sbr_incrementsequencecounter has no protection to ensure the sequence counter does not exceed the maximum value dictated by the size of the field in the <allcaps> ccsds </allcaps> primary header ( <number> - bits w / max value <number> . <section> create a for - loop that calls cfe_sb_transmitmsg with the incrementsequencecount flag set to true . have the loop repeat this at least <number> times . view the resultant messages and verify that the sequence count stops incrementing and is stuck at the maximum value . <section> cfe_sbr_incrementsequencecounter ( or the caller cfe_sb_transmitmsg ) should check that the sequence counter does not exceed the maximum value dictated by the size in the header ( <number> ) . the sequence counter should be reset to <number> when it reaches the maximum . <section> in cfe_sb_transmitmsg : <code> in cfe_sbr_incrementsequencecounter : <code> <section> - hardware : n / a - os : n / a - versions : cfe : 2 4 f7b319 <section> n / a <section> pj chapates gateway <allcaps> vsm </allcaps> flight software production <allcaps> jsc </allcaps> , er6",0
"generate new set of <allcaps> cfe </allcaps> coverage test stubs <section> to achieve max flexibility the <allcaps> cfe </allcaps> coverage test stubs should have no built - in logic , with all handler logic in a separate function . this is the pattern that was introduced with nasa / osal # <number> , along with the stub generator script . <section> run the stub generator script on <allcaps> cfe </allcaps> core <allcaps> api </allcaps> headers to generate a new set of "" pure "" stub implementation files with no extra logic in them . migrate any existing post - hook logic in the old stub to be a default handler function , as was done for <allcaps> osal </allcaps> stubs . <section> extension of original request in nasa / osal # <number> , but for <allcaps> cfe </allcaps> . depends on nasa / osal # <number> to be accepted / merged before this can be done . <section> joseph hickey , vantage systems , inc .",2
"document / implement naming pattern for created elements <section> inconsistent on namespacing of created elements ( see # <number> ) . <section> scrub "" names "" of created elements and how they are defined ( configurable , <code> , locally ) and document / implement a common pattern . really do not need to be configurable , if only used once they do not really need to be a separate define ( only required when id is not available and need to be looked up which is rare sharing case ) , some prefix with <allcaps> cfe </allcaps> , etc . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
const correct parameter inputs in <allcaps> evs </allcaps> <section> <code> should be const : <url> <section> const . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
consider atomic assignments vs locking for a single variable ( possible performance improvement ) <section> in once case <code> is used with a simple assignment : <url> <url> others have a lock for a single assignment : <url> <section> consider using atomic types / assignments <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"report entry index on event log write error , and possibly total for context <section> current entry index and total expected not reported in log write error event : <url> <section> would be helpful to provide context for the error <code> . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"use <code> instead of checking <code> in event log logic <section> <code> is already available , do not need to check <code> : <url> <section> use <code> <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"report error when writing event log header <section> the return from <code> is checked when writing the event log header , but there ' s no event sent on error ( it just returns cfe_evs_file_write_error ) : <url> <section> send an event to help narrow down the issue . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
move writing of the event log to the fs background service <section> writing the event log could take a while and is done in the <allcaps> evs </allcaps> context by command : <url> <section> move to the fs background service like the rest of the logs <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"rework cfe / <allcaps> psp cds </allcaps> interface to improve real hardware support / performance <section> currently implementation of critical data store ( <allcaps> cds </allcaps> ) includes a cfe_es_clearcds function that writes uint32 [ <number> ] chucks to <allcaps> cds </allcaps> in a loop to cover the entire area . this could be very inefficient and possibly use up write cycles on the hardware , vs allowing the <allcaps> psp </allcaps> to implement a more hardware specific clear . <url> <section> design / implementation review and update of the <allcaps> cds </allcaps> interface ( especially the cache ) , maybe the <allcaps> psp </allcaps> should report / provide the appropriate cache size for efficient reading / writing . <section> might be less an issue and more just performance wrt modern storage , but <allcaps> eeprom </allcaps> or similar would suffer using current scheme . <section> from code review follow on discussions . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_evs_sendeventwithappid design improvements wrt <allcaps> eid </allcaps> context and calling context <section> cfe_evs_sendeventwithappid is really intended to provide the <allcaps> eid </allcaps> context when an event is created from a library . unfortunately the <allcaps> eid </allcaps> context replaces the app context info ( name ) , which means for short events the ground does not have app context ( can not tell what app generated the event ) . also means filtering by app context is not possible for these types of events , and apps really have no insight into or control over these events . <section> consider options to include both <allcaps> eid </allcaps> context and app context in short messages , filtering , etc . could utilize extra bits , could add a field , etc . may even help to rename cfe_evs_sendeventwithappid to something that indicates overriding the <allcaps> eid </allcaps> context . note if special bits were just reserved , this may collapse down to one <allcaps> api </allcaps> again ( cfe_evs_sendevent ) , but depends on how the rest is addressed . <section> see above . <section> spawned from code review follow - up . related to # <number> and # <number> . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"benchmark memcpy of full event packet vs size of the actual event message and memset the rest to zero <section> may be able to improve event services performance wrt writing the event to the log : <url> by replacing this with a memcpy of the used portion and a memset <number> for the rest . <section> benchmark , if the memcpy / memset is significantly faster consider implementing . <section> it ' s likely all hardware / compiler / optimization dependent and probably in the noise ( may not even notice when flooded w / events ) . if it ' s not worth it we can mark as wontfix and close , but at least it ' s documented . <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"construction of <allcaps> cds </allcaps> name inconsistent with other named elements <section> for the api functions dealing with the <allcaps> cds </allcaps> the variable name has multiple meanings . for registercds ( ) it wants the cdsname . getcdsblockidbyname ( ) and getcdsblockname ( ) both use the full cds name ( of the format "" appname . cdsname "" ) . the header file for these do not explain the difference very well either . also there is no easy way to get a full cdsname from the cdsname because the function that does that cfe_es_formcdsname ( ) is not public . <section> there should be more clarity in the differences as well as a way to get the full cdsname , like having the register function pass back the full name or making the formcdsname function public . <section> they could all use the same thing . <section> alex campbell <allcaps> gsfc </allcaps>",2
"improve / clarify log reporting / tracking ( es system log and <allcaps> evs </allcaps> event log ) <section> <allcaps> evs </allcaps> event logging reports <code> , <code> , and <code> . - the log is an array of <code> of size <code> so each entry has a slot - in either discard or overwrite , once the log is filled <code> is set to true , and <code> is incremented for each additional message ( so you can tell how many messages were dropped or added after being full ) . - note <code> is maintained internally but is not in tlm ( counts number of entries in the log , clamps at max ) es syslog reports <code> , <code> , <code> , and <code> . - the log is a more freeform char array <code> of size <code> - in either mode the log is "" full "" when <code> - <code> is less than <code> - <code> is set to the internal <code> which is the highest used element of the char array - <code> increments whenever a message is written , so if in overwrite it ' s not actually the number of entries in the log but the number of entries that have ever been written to the log - there are return codes ( <code> and <code> ) , but they are only returned in discard mode , and not available in tlm - <code> is the full size of the log , <code> <section> numerous misnomers and inconsistencies in log management should be fixed / clarified , within the context of the actual differences in these logs ( char array vs event array ) . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ping <user> <user>",2
refactor common code out of <code> and <code> <section> common code in the reset filter related apis is duplicated <section> refactor to reduce duplication . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"consistent use of <code> ( and clarify vs mask ) <section> numerous locations where eventtype is declared as uint16 , but there ' s a defined type <code> <section> use cfe_evs_eventtype_enum_t everywhere <section> use uint16 everywhere <section> code review # <number> - need to sort out enum vs mask use <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"overloaded "" packetid "" use in <code> <section> packetid means other things so it ' s a bit confusing in this context . <section> could be signature , pktidentity , eventsignature , eventcontext , context . <repeated> suggest your own ! <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
scrub error documentation section of command codes <section> error documentation section of command codes is not consistent / complete <section> scrub and update the error documentation for all command codes . needs to detail error cases . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"scrub parameter documentation section of command codes <section> parameter documentation for command codes not complete or always up to date <section> really the structure is the preferred place to document the parameters , the command code documentation is probably better off just referencing the structure . need to confirm all the information in the command code documentation is in the structure documentation and then clean . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"define file subtype value behavior / expectations <section> not clear if the cfe_fs_initheader subtype needs to be one of the fs enums or if it can be user defined by apps . note there is no longer a shell file created by es : <url> <section> need to determine if fs should define all file subtypes , or treat it as an extendable field ( or whatever ) . that will affect if the <allcaps> shell </allcaps> subtype gets removed or renamed ( since there is still an app that would create it ) . note right now apps do not even use <code> , but they do currently set unique values . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"move <code> to internal <allcaps> api </allcaps> <section> <code> is only used internally , should not be exposed as external <allcaps> api </allcaps> <section> move to * _core_internal . h <section> none <section> code review , once moved would also benefit from # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
explicitly sized parameters or data length wrt <code> <section> cfe_fs_extractfilenamefrompath requires data length assumptions <url> <section> explicitly define lengths for parameters or pass in a data length <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"comments / document cleanup relative to <allcaps> evs </allcaps> / fs review ( and # <number> ) <section> <code> parameter descriptions out of order : <url> "" primary header "" not clear in <code> description , really it ' s the size of this header so tools can be agnostic : <url> s / kog / log / : <url> typo , but could also just simplify : get null terminated name for reporting , example below but in <number> copy / paste locations : <url> <section> fix . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"improve <allcaps> evs </allcaps> event filter documentation <section> <code> <allcaps> api </allcaps> documentation not clear , would help to add something like it will treat the next event with that <allcaps> eid </allcaps> like it was the first ( independent of filter method ) along with an example . <url> add description of how they actually work : <url> <section> improve documentation <section> none <section> code review , note conversion to variables is in # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"move internal <allcaps> api </allcaps> ' s and stubs to core_private <section> currently the * core_internal . h files that define cfe internal apis are in core_api along with stubs . <section> move these to core_private since they do not need to be exposed outside of cfe <section> none <section> observations related to code review <allcaps> cfs </allcaps> - <number> , but not directly related to a comment so not marking w / label . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove cfe_evs_unregister <allcaps> api </allcaps> <section> there ' s no use case for apps to unregister themselves from <allcaps> evs </allcaps> using <code> , es cleans them up when an app is being terminated using <code> . <section> remove the <code> public <allcaps> api </allcaps> , confirm requirements also match up . requirement is cevs3101 - delete . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
if an application fails to initialize ; cfe will attempt to restart it indefinitely <section> outside of issuing a processor reset - i am not sure there is a clean way to exit this scenario ( which in theory should never happen in flight ) . this scenario would be further complicated if the app attempting to be started / restarted is included in the startup script . <section> consider implementing a maximum number of restarts . <section> dan knutsen <allcaps> nasa </allcaps> goddard,2
"improve robustness of <allcaps> cds </allcaps> checks before re - use / re - build of pool <section> currently the <code> function only confirms that a fixed signature is found at the beginning and end of the memory space , and <code> confirms that the size ( number of entries ) matches . if both of these checks pass , the code will attempt to re - use the contents of <allcaps> cds </allcaps> , rather than re - initializing it . <section> these checks are a little weak . conceivably , the number of registry entries can remain the same , but the size / format of the registry record changes , thereby making the size of the overall registry array larger . the data pool could be reduced by the exact same amount , meaning that the <allcaps> cds </allcaps> trailer will be at the exact some spot , too . in this case the the code might try to re - use the registry but the format has changed and it will be incompatible . should add more values to the size check , not just the number of entries but the sizes / offsets of where the registry and pool start , and it would not hurt to also add a <allcaps> crc </allcaps> - <number> check to this data too , just like is done for data records , before attempting to re - use the data . <section> leave as is , because this is unlikely to occur by random , it would more likely be intentional , and there are other was to force a <allcaps> cds </allcaps> rebuild ( i . e . change sig ) . <section> found during investigation of # <number> <section> joseph hickey , vantage systems , inc .",2
"documentation builds should use separate directories <section> the <number> documentation targets ( detaildesign , usersguide , osalguide ) all share the same "" doc "" subdirectory for the doxygen run . this can become a problem when trying to validate documentation builds and building with the <code> option . they work fine when built one at a time , but with <code> at one point my machine got into an endless loop with two doxygen builds running in parallel that kept stepping on the other ' s files . <section> use separate dirs so that builds can be done in parallel without interfering with each other . <section> this should also result in separate "" warnings . log "" files too , that can be more easily checked . <section> joseph hickey , vantage systems , inc .",2
"<allcaps> cds </allcaps> should include some fields of the cfe_es_cds_regrec_t in its <allcaps> crc </allcaps> - <number> validation <section> <allcaps> cds </allcaps> code utilizes a <allcaps> crc </allcaps> - <number> to check the integrity of the <allcaps> cds </allcaps> block . however it only covers the data itself , not any of the metadata of the <allcaps> cds </allcaps> block . when re - using <allcaps> cds </allcaps> memory , the code does not clear old <allcaps> cds </allcaps> blocks for a variety of reasons . the <allcaps> crc </allcaps> - <number> should offer protection against stale data appearing as good data . <section> should include fields from the registry record ( cfe_es_cds_regrec_t ) as well as the data . importantly , this way if the block is re - used and the name is different but the size is the same , the <allcaps> crc </allcaps> check will fail , and the old data from the previous instance is less likely to be interpreted as valid data . <section> offshoot from <allcaps> cfs </allcaps> - <number> review , issues # <number> and # <number> . there are valid reasons _not_ to forcibly clear <allcaps> cds </allcaps> blocks , but the <allcaps> crc </allcaps> check can serve as a reasonable substitute to avoid interpreting old data as valid . this is a suggestion that would make the this protection a little stronger . <section> joseph hickey , vantage systems , inc .",2
fix mismatched <code> <code> <section> mismatch : <url> <section> fix <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"document / verify <code> is power of <number> - <number> and sometimes used as <allcaps> mask </allcaps> ( and <allcaps> max </allcaps> ) <section> <code> is used in some places as <allcaps> max </allcaps> and others as a mask , also has to be power of <number> - <number> : <url> <section> document and verify <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
inconsistent error messages in verify header <section> some of the <code> messages do not match the test : <url> <url> <url> <section> fix <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
simpify long if / else if in <code> <section> error cases handled with long if / else if : <url> <section> use table ( or switch ) <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"obsolete logic in <code> file handling ( related to opencreate ) <section> obsolete logic , second <code> will truncate anyways : <url> <section> simplify <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"refactor the cfe_es_*appcmd <censored> handlers to reduce duplicated code <section> similar pattern in <code> , <code> , <code> , <code> <section> refactor to reduce duplicated logic . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"limit send <allcaps> hk mid </allcaps> ' s to <number> in pipe <section> default limit of <number> is excessive , getting behind is an error ( should not spam them either way ) . es example : <url> <section> set to <number> <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
default <code> in <code> <section> <code> is set to a default value whenever <code> returns <code> <section> could just set to the default value within this helper <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"cfe_es_syslogreaddata requires synchronization , add _unsync to name <section> <code> requires external synchronization : <url> <section> add _unsync to name to match pattern <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"replace duplicated write to sys log , delay , panic pattern <section> same pattern repeats many times : <url> <section> reduce duplicated code . <section> may get removed per # <number> ( would make this <allcaps> obe </allcaps> ) <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"move file system initialization logic out of cfe , should be set up at lower level <section> related to # <number> , file system initialization does not fit well in the cfe layer : <url> <section> remove / move , should be initialized before getting to cfe <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"document gatekeeper pattern in internal / local resource id inline functions <section> ismatch functions check for <allcaps> null </allcaps> pointer , others do not : <url> <url> <section> document justification behind pattern ( ismatch is used first , then all other ' s are "" safe "" ) <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
add compile - time debug capability to confirm functions that require external global locking are locked <section> various functions require global lock : <url> <section> add a debug capability to confirm appropriate locking <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"simplify loop in <code> <section> while loop with dual break could be simplified : <url> <section> refactor to simplify , possibly for loop on apprecptr . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"clarify / document elements in enums including zero dependence <section> set to zero of first element is redundant with standard , not documented : <url> similar case in fs , where <number> is <allcaps> unknown </allcaps> , should document dependence : <url> note it is documented here , really should do similar elsewhere when it matters : <url> <section> document enums , clarify logic dependence on first entry being <number> ( do not move ) . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
cfe_es_perflogadd blocking behavior - redesign or document <section> cfe_es_perflogadd can block : <url> <section> document behavior / impact / context <section> consider design updates to avoid blocking <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
move perflog prototypes from <code> to <code> <section> misplaced prototypes : <url> <section> move to <code> <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"replace multiline <code> macro with inline function <section> use of multiline macros should be avoided ( per coding standard ) : <url> <section> replaced with inline , or one line macro / inline combo <section> wrap with do { . <repeated> } while ( <number> ) , see <url> <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
correct const in generic memory pool apis <section> cfe_es_genpoolrecord_t pointer should be const : <url> <url> <url> <section> make const <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
improve <code> logic for <code> structure <section> magic number ( fixed bit pattern ) used for <code> in <code> is weak : <url> <url> and related checks against the magic number <section> could use actualsize and 2 s complement ( or even 1 s complement ) of actualsize for memory check . higher odds of catching an issue <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"cfe_es_genpoolinitialize : error if alignsize is not a power of <number> <section> <code> handles when <code> is not a power of <number> , but may be more appropriate as an error : <url> <section> analyze , make it an error or document why it ' s ok as - is for future reference <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
task not found case not explicitly handled in cfe_es_runexceptionscan <section> not clear if task not found case is handled correctly : <url> <section> analyze and explicitly handle if needed or document why not needed for future reference <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"add doxygen documentation to internal prototypes <section> missing documentation ( example , but scrub all ) : <url> for the block read / write , need to document requirements on the data pointer ( reads / writes size used when initializing handle ) <section> add documentation ( move from implementation if it exists there ) <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"update the cmake / sample_defs / default_osconfig . cmake to be just overrides / changes from osal / default_config . cmake <section> default_osconfig . cmake repeats many of the settings with the same selection as in default_config . cmake , confusing dependency <section> remove duplication , document in default_osconfig . cmake that it ' s for overriding values in default_config . cmake . <section> none <section> came up when trying to figure out why <allcaps> osal </allcaps> coverage test results were different at the bundle level vs osal level , wasn ' t clear that default_config . cmake was being used and hard to sort out what ' s actually being changed in default_osconfig . cmake <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_es_deletecds : zero out block when freed <section> block not cleared when freed : <url> <section> analyze , clear block if needed or document for future reference why it ' s not needed <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
scrub for appropriate / consistent use of sizeof vs os_max_api_name <section> inconsistent use of sizeof vs hard coded size ( example ) : <url> also local sizing ( example where it could just be sizeof ( cmdptr - > appname ) <sad> <url> <section> use sizeof when char arrays sizes are known <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"cfe_es_clearcds : check status before while loop to zero <section> status not checked from cfe_es_cds_cachepreload : <url> <section> analyze , check status if needed otherwise document why not for future reference <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_es_registercdsex : clear block if new allocation is needed but not new block size <section> may need to clear block if a new allocation is needed without a changed block size <url> <section> analyze , clear block if needed <section> if not needed , document why for future reference <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"standardize / clean function description comments <section> they need a general scrub , out of date references , etc . example : <url> should clearly indicate implementations that are <allcaps> api </allcaps> ' s vs internal / helper functions <section> automated cleanup . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"eliminate redundant switch in cfe_es_cleanupobjectcallback <section> redundant switch cases , could be eliminated by setting local status variable in first switch : <url> <section> eliminate redundant switch <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add missing prototypes <section> enable - wmissing - prototypes and observe warnings example identified in code review : <url> <section> add prototype <section> none <section> code reivew , specific case related to # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
refactor long switch in cfe_es_processcontrolrequest <section> long switch could be replaced with table and general logic : <url> <section> refactor <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"resolve signed / unsigned comparison warnings <section> enable - wsign - compare and observe warnings . from code reivew : <url> <section> resolve these <section> none <section> code review , specific case of # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
refactor for logic duplication in cfe_es_appcreate and cfe_es_loadlibrary <section> first part of cfe_es_appcreate : <url> and cfe_es_loadlibrary : <url> duplicate logic <section> refactor to reduce duplication <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"handle case of too many tokens in startup file <section> silently consumes <code> if numtokens = = cfe_es_startscript_max_tokens_per_line : <url> looks like it would just concatenate entries after that point , which could lead to strange errors <section> warn / error / report / abort <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
refactor cfe_es_startapplications startup script processing to reduce duplicated logic <section> could loop for volatile / non - volatile startup script processing instead of two if blocks : <url> <section> refactor <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"replace strlen use with memchr logic for checking valid length <section> strlen is an unlimited search , memchr is limited example case : <url> <section> use memchr instead <section> something similar to os_strnlen ( unfortunately not exposed ) <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"refactor similar <allcaps> es id </allcaps> / info related functions to share common logic <section> very similar pattern in the following sets of apis , consider refactor : - cfe_es_getappidbyname , cfe_es_getlibidbyname , cfe_es_gettaskidbyname - cfe_es_getappid , cfe_es_gettaskid , - cfe_es_getappname , cfe_es_getlibname , cfe_es_gettaskname - cfe_es_getappinfo , cfe_es_getlibinfo , cfe_es_gettaskinfo <section> factor out common logic <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"use synchronization mechanism instead of delays <section> synchronization mechanism would be better ( more responsive , etc ) vs delays . in cfe_es_waitforsystemstate : <url> in cfe_es_gettaskfunction : <url> <section> replace delay loop w / synchronization method <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"use %s , _func_ for all syslog messages <section> function name copy / paste mistakes and various reporting formats used in <code> and <code> : <url> <section> use a common format <code> <section> could use a macro <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ping <user> - may require test update when checking for specific messages",2
"refactor cfe_es_restartapp , cfe_es_reloadapp , cfe_es_deleteapp to use common code <section> logic duplicated in cfe_es_restartapp , cfe_es_reloadapp , cfe_es_deleteapp <section> refactor to utilize common logic <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"refactor / split files ( headers and c ) into smaller topics <section> huge files are harder to manage . example : <url> <url> note also split up old "" task "" pattern : <url> <section> split / refactor into more manageable units . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
resolve strange newline formatting <section> strange newline locations : <url> <url> <url> <section> adjust weighting in format definition ( this would be done in cfs ) <section> reformat comments such that they format cleaner relative to cfs format definition <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
<code> incorrect <section> max <allcaps> eid </allcaps> incorrect : <url> <url> <section> fix . <section> none <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"remove <code> from function prototypes <section> inconsistently applying extern to function prototypes <section> remove , it makes no difference . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> cfe es </allcaps> memory pool parameter order inconsistent <section> some apis have handle first , some do not , example : <url> <url> <section> make consistent <section> could be i / o based ordering , if so justify as such somewhere ( document typical pattern that can be followed ) <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"use <code> for <code> memory pointer <section> other routines use <code> , <code> uses <code> : <url> <section> make consistent <section> maybe there was a reason , analyze and if so document <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"scrub return code names for consistency <section> consistent naming pattern not followed for return codes , example : <url> <url> <section> use a consistent pattern cfe_service_severity_description <section> could create via macro , but obscures ( see # <number> ) <section> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove unused error codes <section> unused ( shell capability moved to stand - alone app ) : <url> last sender id logic removed , error code no longer used : <url> <section> remove <section> none <section> <allcaps> cfs </allcaps> - <number> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"construct return status codes from defined flags <section> error codes are hardcoded : <url> <section> could construct using defined field values , could utilize macros <section> leave as - is , full definition makes them easier to find from a status message . pattern to comment full value to retain this search capability is fragile . questionable benefit of changing at this point since they are all already defined . <section> <allcaps> cfs </allcaps> - <number> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
cast <code> to <code> <section> <code> does not match pattern for defining other <allcaps> cfe </allcaps> status returns : <url> <section> cast as <code> <section> document why not <section> <allcaps> cfs </allcaps> - <number> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
update cmake logic to utilize built in capabilities <section> - could get git_executable from cmake module : <url> - could simplify using <code> : <url> <section> use findgit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
convert table search paths if / else checks to lists <section> long if / else : <url> <section> convert to list <section> none <section> <allcaps> cfs </allcaps> - <number> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"require definition of <code> <section> cpu_id should be explicitly defined , defaulted here : <url> <section> remove default <section> none <section> from <allcaps> cfs </allcaps> - <number> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cleanup relative to additional compiler warning flags <section> some projects prefer additional flags that trigger warnings in cfe . current set : <url> possible additions for consideration : - wextra - wmissing - prototypes - wimplicit - function - declaration - wnested - externs <section> analyze , fix what makes sense . <section> not required to add to default list , but should compile cleanly if enabled ( for those that make sense ) <section> from <allcaps> cfs </allcaps> - <number> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"comments / document cleanup relative to es / resourceid review ( and # <number> ) <section> various cleanup : - document <code> in <code> parameter list : <url> <url> - update parameter list in <code> : <url> <url> - add <allcaps> null </allcaps> termination documentation on config lists ( autogenerated and added via build system ) : <url> - fix order of parameter documentation for <code> : <url> - remove <allcaps> obe </allcaps> child priority comment in <code> , related to # <number> : <url> - improve generic counter documentation ( example , purpose ) , really just a thread - safe counter capability ( suggested at one point for <allcaps> cfdp </allcaps> throttling ) : <url> - fix typos : <url> <url> <url> <url> - add comment that <allcaps> null </allcaps> check is done by cfe_es_getappinfo / cfe_es_getlibinfo : <url> - document load library calls library entry function in es context ( must not halt , etc ) - remove obsolete comments : <url> - replace obsolete comments , generically "" for initializing and starting cfe "" <url> - s / read / printed / <url> <section> fix <section> none <section> from <allcaps> cfs </allcaps> - <number> and # <number> code review <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"deprecate cfe_es_childtaskmainfuncptr_t <section> all es task functions can use cfe_es_taskentryfuncptr_t , do not need separate child typedef see : <url> <section> deprecate <section> could add <code> to be able to spawn with context , trade a single definition vs different for main task / child . <section> code review # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , submitted by <user>",2
"define and use a version structure for the cfe / <allcaps> osal </allcaps> / <allcaps> psp </allcaps> reporting in tlm <section> repeated individual majorversion , minorversion , revision elements for cfe / <allcaps> osal </allcaps> / <allcaps> psp </allcaps> see <url> <section> use a common structure . <section> none <section> from code review # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , submitted by <user>",2
"use macro in cfe_resourceid_isdefined <section> compares directly to <number> see <url> <section> use macro <section> none <section> code review # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , submitted by <user>",2
"remove cfe_resource_osal_compatible . h option and force use <section> not really currently an option , could simplify / clarify by forcing it <section> force use <section> none <section> from code review # <number> , various comments . <section> jacob hageman <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , submitted by <user>",2
"cfe_fs_readheader & writeheader api headers state wrong returns <section> in the header api ' s for readheader and writeheader they both say that they return the execution status , however the implementation has them return the size of the file they read / wrote if successful and an error code if not . <section> alex campbell <allcaps> gsfc </allcaps>",1
add cfe time current time <allcaps> api </allcaps> functional tests <section> need open source functional tests for certifiability <section> add functional tests for cfe time apis – cfe_time_gettime – cfe_time_gettai – cfe_time_getutc – cfe_time_getmet – cfe_time_getmetseconds – cfe_time_getmetsubsecs <section> n / a <section> n / a <section> alex campbell <allcaps> gsfc </allcaps>,2
add functional tests for <allcaps> cfe </allcaps> file header management apis <section> need open source functional tests for certifiability <section> add functional tests for cfe file header management apis – cfe_fs_readheader - read a header . – cfe_fs_initheader - initialize a header . – cfe_fs_writeheader - write a header . – cfe_fs_settimestamp - change the timestamp of a header . <section> n / a <section> n / a <section> alex campbell <allcaps> gsfc </allcaps>,2
"update codename to caelum and license header for release , version <number> . <number> <section> development version still has development labeling ( as expected ) . <section> upon official release , update relevant version / license info . <section> none <section> wait until official release <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_psp_gettime conversion to <allcaps> met </allcaps> <section> we have a hardware clock in our system that we plan to use as the source clock for <code> . we also have an <allcaps> fpga </allcaps> system that latches the hardware clock into a register on certain events . we ' d like to read the register value after it ' s latched , and then convert it to a cfs <allcaps> met </allcaps> . does <allcaps> cfe </allcaps> time services already have a routine for converting <allcaps> psp </allcaps> times to mets ? <section> a function that i can pass an old latchclock time value into and get back a valid <code> value . something similar to <code> , but with an additional input that replaces <code> . <section> our primary alternative at this point is to add code to the <allcaps> psp </allcaps> that updates our hardware clock via <allcaps> tatt </allcaps> commands . any other ideas would also be welcome . <section> morgan redfield <email> astrobotic",3
module list is duplicated / hard coded so can not be modified <section> part of the intent of modules was to be able to replace them . hard - coding of the module list at : <url> defeats this capability . <section> define the module list in a way it can be modified / customized by configuration . <section> none <section> currently breaks message header customization . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ping - <user>,2
remove <allcaps> builddir </allcaps> from makefile ( breaks if defined ) <section> <code> fails <section> remove the reference <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"make functional tests runnable via cfe_es_start_app_cc command <section> in the functional test proof - of - concept , the test cases are libraries that are loaded in the startup script , and the "" testrunner "" app actually runs them . but because libraries are not loadable / unloadable via command , it requires a custom startup script , and restarting <allcaps> cfe </allcaps> in order to run tests . <section> the functional tests should be integrated with test runner such that they are each their own app , therefore runnable by simply issuing the es command to start the app if they were not part of the initial startup script . <section> this will simplify the process of running tests on targets , since it will alleviate the need to customize the startup script . the <code> library itself will likely need to remain as a library , because it is a common dependency between all test apps . but it should not hurt to simply load this by default in the sample startup script , it will not interfere with <allcaps> fsw </allcaps> . <section> joseph hickey , vantage systems , inc .",2
"duplicate function in readme <section> in the version history of the readme , it states : > removes the now - unnecessary cfe_sb_zerocopyhandle_t type and all apis that refer or require it . replaces cfe_sb_zerocopygetptr ( ) and cfe_sb_zerocopygetptr ( ) with two new simplified functions cfe_sb_allocatemessagebuffer ( ) and cfe_sb_releasemessagebuffer ( ) , respectively . these new functions do not use a separate handle . updates the cfe_sb_transmitbuffer ( ) <allcaps> api </allcaps> to also remove the handle . does affect public apis . the issue is that the version history is stating that the same function , cfe_sb_zerocopygetptr , is being replaced by two different functions . in reality , cfe_sb_zerocopygetptr was replaced by cfe_sb_allocatemessagebuffer . cfe_sb_zerocopyreleaseptr and cfe_sb_zerocopysend , not cfe_sb_zerocopygetptr , was replaced by cfe_sb_releasemessagebuffer . <section> state that cfe_sb_zerocopyreleaseptr and cfe_sb_zerocopysend , not cfe_sb_zerocopygetptr , was replaced by cfe_sb_releasemessagebuffer . <section> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"remove "" pspconfig "" member in config structure <section> the "" pspconfig "" member does not really serve a useful purpose anymore and should be cleaned up . issue nasa / psp # <number> will remove the <allcaps> psp </allcaps> definition of this structure . <section> this structure also needs to be removed from the <allcaps> cfe </allcaps> <code> object . <section> this is co - dependent with nasa / psp # <number> and needs to be done in the same build cycle . the only remaining reference to this <code> member object is via the cfe_psp_version macro , where the version is printed . this should be replaced with a call to <code> instead . <section> joseph hickey , vantage systems , inc .",2
"add group name to doxygen "" close section "" command <section> keeping track of large doxygen sections can be hard . <code> <section> add the section name to the closing comment , similar to what we already do for <code> segments . <code> <section> leave as is",1
"incorrect limit check in cfe_es_genpoolvalidatestate <section> a check for the "" numbuckets "" member should be <code> but it is using <code> . <section> attempt to validate poolid <number> which uses the max number of buckets . function returns false , but record is valid . <section> cfe_es_genpoolvalidatestate ( ) should return true if using the max number of buckets ( <number> by default ) . <section> one - liner here : <url> <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",0
refactor cfe_es_err_buffer to cfe_es_bad_argument <section> most functions return bad_argument when they get a null pointer but a few stragglers still use buffer . <section> they should all be consistent and return the same error . <section> this is something that should have been done for # <number> <section> alex campbell <allcaps> gsfc </allcaps>,2
cfe_es_getappid missing null pointer check <section> cfe_es_getappid does not have a null pointer check and seg faults if passed one . <section> call it with a null pointer <section> should return cfe_es_bad_argument <section> ubuntu <number> <section> alex campbell <allcaps> gsfc </allcaps>,2
"cfe_assert should use sendevent <section> cfe_assert currently has all it ' s outputs done through cfe_es_writetosyslog which makes them hard to read and failures can get lost in all the noise . <section> cfe_assert could instead send events through the test runner , which would give a lot more flexibility to the output . <section> we just leave it as it is . <section> <url> could then be a further enhancement of this done at a later time . <section> alex campbell <allcaps> gsfc </allcaps>",2
"convert functional test startup script example to use "" simple "" filenames <section> do not need directory or extension in <url> <section> simplify <section> none <section> discussed at <allcaps> ccb </allcaps> for # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"redundant check in cfe_evs_earlyinit <section> redundant check : <url> only way to get here is if it ' s already cfe_success <section> remove redundant check , false condition can never execute ( would require returning from the <code> ) <section> none <section> static analysis warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
add generation of branch coverage info to genhtml line ( make lcov rule ) <section> genhtml not reporting / generating branch coverage <section> add <code> to genhtml line in makefile <section> none <section> adds the text summary and info in html <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
potentially uninitialized local variable ( false alarm squash ) - codeql <section> another round of potentially uninitialized local variable squashes . all false alarms but easy to initialized . <url> <url> <url> <url> <url> <url> <url> <section> initialize <section> none <section> static analysis warnings <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"cfe_es_copymoduleaddressinfo not working <section> when getting the app info , the addressesarevalid is false . that field is set by copymoduleaddressinfo when it ' s return code is not os_success . <section> steps to reproduce the behavior : call cfe_es_getappinfo see that addressesarevalid are set to false . <section> it should not be setting them to false . <section> ubuntu <number> <section> when called on an external app the return code is successful but addressesarevalid is still <number> . when called on a core app the return code it - <number> invalid id <section> alex campbell <allcaps> gsfc </allcaps>",3
"misspelled appname string in tbl cfe_tbl_validate function <section> the cfe_tbl_validate ( cfe_tbl_handle_t tblhandle ) has a misspelling in the appname string "" <allcaps> unknwon </allcaps> "" <section> directly visible in cfe \ fsw \ cfe - core \ src \ tbl \ cfe_tbl_api . c - - int32 cfe_tbl_validate ( cfe_tbl_handle_t tblhandle ) <section> the appname array should be initialized to the same , consistent string ' <allcaps> unknown </allcaps> ' as elsewhere in the code . however in the usual case , the appname would almost immediately be replaced with the valid cfe_es_getappname ( ) value upon passing cfe_tbl_validateaccess ( ) and would not have much impact other than test logging . <section> cfe / fsw / cfe - core / src / tbl / cfe_tbl_api . c <code> <section> noticed on code inspection <section> <section> mark o . schlegel , hammers inc",2
"consolidate cfe_psp_get_timebase and cfe_psp_gettime <section> this <allcaps> psp </allcaps> function is not particularly well - documented . on some systems ( pc - linux ) it ultimately returns the value of the <allcaps> posix </allcaps> "" clock_monotonic "" clock from the kernel . but on mcp750 it is calculated from a hardware tick counter that wraps every <number> seconds . there is a bunch of logic in <allcaps> cfe time </allcaps> to handle handle this wrap . <section> the bug is that the background task also samples cfe_psp_gettime but does not check for wrap , which works fine on linux but on vxworks this probably introduces a timing anomaly every <number> seconds when it wraps . this probably is not all that noticeable / serious because the background job will just runs an extra cycle and then resume normal operation , but incorrect nonetheless . <section> background job should sample a clock that is known / defined to be monotonic and has consistent / simpler rollover logic . alternatives could be the <allcaps> osal </allcaps> timebase that drives the 1 hz . however this is not guaranteed to exist on platforms that do not use the <allcaps> rtos </allcaps> for the 1 hz . so it might be necessary to define a new <allcaps> psp </allcaps> function , similar to cfe_psp_gettime , but is defined to be monotonic and has a more well - defined rollover characteristic . then this <allcaps> psp </allcaps> function can just read whatever facility is providing 1 hz signal - <allcaps> rtos </allcaps> / <allcaps> osal </allcaps> , hardware register , or whatever . <section> in particular the code here : <url> this works fine on linux but likely causes an anomaly every <number> seconds on mcp750 when the clock rolls over . <section> found during inspection when looking at other issues . <section> joseph hickey , vantage systems , inc .",2
"header guard update to match osal pattern <section> current header guards utilized reserved leading <code> , likely also inconsistent helpful if it also catches endif comment ( typically comments the matching define ) <section> apply <allcaps> osal </allcaps> pattern <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"limit dynamically - obtained version info to tags starting with "" v "" <section> tags may be created in the git repo for a number of reasons , not just releases / prereleases , and it is helpful to have the option of also making an annotated tag too so it can have a real description attached to it . but in that case the tag will be picked up by <code> which is what is used by default for dynamically obtained version info shown at runtime . <section> version tags in the <allcaps> cfe </allcaps> framework and <allcaps> cfs </allcaps> apps all follow the general pattern of <code> . so if the dynamic version info is limited to tags that start with <code> ( maybe also a number to be real specific ) this should effectively make it so extra snapshot tags will not be considered - so long as they do not start with <code> . <section> use annotated tags only for those that should be considered baselines , and only use non - annotated tags for any other snapshots . <section> users can still customize this <code> if they happen to use some other tagging pattern / convention . but all the framework stuff already uses the <code> convention . <section> joseph hickey , vantage systems , inc .",3
"update cfe_evs_sendevent calls to use macros introduced in # <number> <section> # <number> introduced cfe_evs_senddbg , cfe_evs_sendinfo , cfe_evs_senderr , cfe_evs_sendcrit macros but did not update code to use them <section> update core to use macros <section> none <section> note some coding standards discourage # # in macros . could go back to original implementation in # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , add contributing guide <section> fix # <number> added a contributing guide that links to the main cfs contributing guide . <section> users should be able to view the contributing guide contents easily from the cfe repo . <section> ariel adams , <allcaps> asrc </allcaps> federal <allcaps> edit </allcaps> - also fixes # <number> ( jh )",1
"add contributing guide <section> add a contributing guide for the cfe repo . <section> create a contributing guide markdown file . in the guide , add a link to the cfs contributing guide . <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"<allcaps> cfe </allcaps> coverage tests not getting built after re - org <section> after directory re - organization , it is missing the new recipes for building the <allcaps> cfe </allcaps> core coverage tests . <section> build + install with unit tests enabled . everything runs and passes but the <allcaps> cfe </allcaps> core tests are not there . <section> <allcaps> cfe </allcaps> core tests should be there <section> some empty placeholders in place of the real thing ( mistake in original pr ) . <url> <section> ubuntu <number> <section> unfortunately everything in tests + ci runs just fine without this being there , so it wasn ' t immediately noticeable that something was missing . <section> joseph hickey , vantage systems , inc .",0
"entry point function name too long <section> when trying to run the cfe test runner i got this error <number> - <number> - <time> . <number> es startup : loading file : / cf / cfe_testrunner . so , <allcaps> app </allcaps> : testrun_app os_genericsymbollookup_impl ( <sad> <number> : error : cfe_testrunner_appm : . / cf / cfe_testrunner . so : undefined symbol : cfe_testrunner_appm <number> - <number> - <time> . <number> es startup : could not find symbol : cfe_testrunner_appm . ec = 0 xffffffff it should be trying to use cfe_testrunner_appmain but is getting truncated at <number> characters . when i shortened the function name it worked fine . <section> <number> . add the start test scripts for the startup test . found here <url> <number> . start it . <section> it should run the tests . <section> ubuntu <number> <section> alex campbell <allcaps> gsfc </allcaps>",2
"scrub for include < > vs "" "" use ( < > should be system only ) <section> < > used on non - system header includes . example : <url> <section> full scrub / fix <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"do not rely on <allcaps> osal </allcaps> software_ ( <allcaps> big </allcaps> | <allcaps> little </allcaps> ) _bit_order <section> these endian - indicator macros are problematic for many reasons as documented in nasa / osal # <number> . the continued presence of these macros in <allcaps> osal </allcaps> came up again in a recent code review . <allcaps> osal </allcaps> will likely stop providing these macros in the next version , because nothing in <allcaps> osal </allcaps> is endian - dependent . <allcaps> cfe </allcaps> only uses these to implement cfe_make_big16 / cfe_make_big32 macros . <section> move the nonstandard logic from <allcaps> osal </allcaps> into <allcaps> cfe </allcaps> , because nothing in <allcaps> osal </allcaps> depends on it . for backward compatibility <allcaps> cfe </allcaps> will likely still have to provide this macro for historical reasons , in case some apps use it , and because <allcaps> time </allcaps> uses those cfe_make_big * macros . <section> see nasa / osal # <number> in <allcaps> cfe </allcaps> the logic should be put in a separate header where it can be confined / limited to the scopes where this is actually used / needed , rather than a ubiquitous header like <code> . this way an <code> directive if the check was inconclusive will make more sense since it will not error out on cases where we do not care ( i . e . most ) . <section> joseph hickey , vantage systems , inc .",2
"update directory diagrams in application developer guide <section> after pr # <number> the directory structure diagrams in the user guide are in need of an update . only the text was updated in that pr . <section> diagrams should be updated to match the text . <section> see # <number> <section> joseph hickey , vantage systems , inc .",1
"clean up es task / app registration <section> in nasa / osal # <number> it is proposed that <code> be finally deprecated / removed . but this function is invoked by two places in <allcaps> cfe es </allcaps> that follow a similar pattern : <code> and <code> . <section> at a minimum , calls to <code> must be removed to allow the function to be deprecated . furthermore there is already a task startup wrapper in es that can be used to call / handle setting up environment ( <code> ) meaning that these two functions themselves can also be deprecated - basically using the same design pattern as <allcaps> osal </allcaps> uses such that we do not need to burden apps with calling this extra function . this design is simpler and less error prone . <section> see nasa / osal # <number> <section> joseph hickey , vantage systems , inc .",2
"application performance monitoring and deadlines <section> - when developing a cfs application , i want to detect and correct performance problems as early as possible . - when integrating a cfs system , i want to observe application timing so i can confirm whether system performance matches my expectations . <section> - i would like an easy way to track performance statistics for each cfs application , specifically , last , average and max observed run time . - for systems using <allcaps> sch </allcaps> ( scheduler ) , i would also like enough information to trace in detail _when_ each application starts and finishes so i can compare the system ' s actual timing to the timing that i specified . - i would like all this to be possible without adding special performance instrumentation to the cfs application . <section> here are some ways that cfe ( and cfs ) can measure application performance today : | approach | limitation | | - - - | - - - | | es ( executive services ) task execution counter | tracks # of passes through application ' s main loop . does not track detailed timing information . | | es ( executive services ) performance log | tracks detailed timing information , but must be manually maintained ( started and stopped ) by the application . | | hs ( health & safety ) <allcaps> cpu </allcaps> utilization monitoring | tracks overall <allcaps> cpu </allcaps> utilization . not broken down per cfs application . | | hk ( housekeeping ) telemetry messages published by each application | an application ' s hk telemetry message can measure and report any timing information it wants , but this must be implemented by each application , so it ' s not very consistent ! | as a rule , existing methods are limited in that either ( <number> ) they do not track detailed timing information , or ( <number> ) they require application authors to manually instrument their cfs app and thus are not supported for all apps . <section> any solution must take into account the fact that a typical cfs application spends a lot of time idle , waiting for software bus messages . this means that simply instrumenting the cfe_es_runloop ( ) function will not give an accurate sense of how much <allcaps> cpu </allcaps> time is being consumed by even a simple application such as the sample_app . <code> there are many possible solutions . my suggestion is to make cfe_es_runloop ( ) fire either an event or a sb message signaling that each application has reached the top of its main loop ( i . e . , finished executing ) . because application execution is normally _triggered_ by a wakeup message as well , comparing the timing of the two messages allows measurement of application execution time . <code> a "" statistics tracking "" application could subscribe to both messages , compare their timings , and calculate / report any statistics desired , such as last , average , and max observed run time . outsourcing calculations to an app means they can be easily customized or disabled per mission without modifying cfe . <section> i am fond of this particular implementation because it easily enables another feature : application deadlines . a deadline is an execution time bound triggering a configurable action . it can also be thought of as a "" software watchdog "" . deadlines are important because they allow unexpectedly long - running applications to be rapidly detected and can help mitigate the timing impact of such applications on the rest of the system . today , the closest analogous feature is hs ( health & safety ) application monitoring of the es task execution counter . this only detects applications that get "" stuck "" for a long time . also , hs only monitors counters for liveness and does not check that they are incrementing at the expected rate . here is my suggested way to implement deadlines . the scheduler ( <allcaps> sch </allcaps> ) application assigns each scheduled app a deadline of configurable length l . if <allcaps> sch </allcaps> sends the application a wakeup message at time t , it will expect to receive the application ' s runloop ( ) message by time t + l . when the deadline is reached , if the application is not done , <allcaps> sch </allcaps> fires a schedule overrun event . the event can be caught and used by hs ( health & safety ) or some other application . <code> note : i have presented a lot of detail here . i am not tied to any of the details . my goal is to present a starting point for further discussion of whether these features are useful , and for any resulting implementation to be consistent with cfs ' s architecture . <section> peter fidelman - blue origin these ideas were originally presented during a talk at flight software workshop <number> ] ( <url> ( [ slides <url> .",2
"fix # <number> , add testing tools to the security policy <section> fix # <number> updated the security policy to include the type of testing done for cfe or the cfs bundle under a new section titled "" testing "" . provided a disclaimer that under the apache license , liability is not provided . added that security reports should be emailed . <section> users should now be aware of the type of testing cfe or the cfs bundle undergoes . <section> references : <url> <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"add testing tools to the security policy <section> users are unaware of how cfs / cfe is tested . by providing this information , transparency is provided to the community which promotes trust . <section> the security policy should inform users what tools are being used to test cfs / cfe while being cautious of liability issues . to do so , we can state explicitly that our software does not provide liability under the apache license . the security policy should inform users that they may view the <allcaps> lgtm </allcaps> results . the policy would state that the alerts from <allcaps> lgtm </allcaps> may not be accurate , since they cannot be dismissed . add that security report should be emailed . <section> references : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"implement single endianness handling pattern <section> multiple ways to handle target endian in various contexts : fsw / cfe - core / src / es / cfe_es_perf . c : cfe_es_setupperfvariables - determines it at runtime fsw / cfe - core / src / tbl / cfe_tbl_internal . c : cfe_tbl_readheaders - determines it at runtime fsw / cfe - core / src / tbl / cfe_tbl_task_cmds . c : cfe_tbl_dumptofile - determines it at runtime fsw / cfe - core / src / fs / cfe_fs_api . c : cfe_fs_readheader ( and many other functions in here ) - determines it at runtime fsw / cfe - core / src / inc / ccsds . h has macros for conversion ( cfe_make_big <wink> who ’ s implementation depends on software_big_bit_order there ’ s an endian flag in the <allcaps> ccsds </allcaps> header osal / src / os / inc / common_types . h defines either software_little_bit_order or software_big_bit_order based on <number> possible defines cfe / cmake / sample_defs / cpu1_platform_cfg . h defines cfe_platform_endian as either ccsds_little_endian or ccsds_big_endian , and also has a separately configurable cfe_platform_time_cfg_bigendian <allcaps> ccsds </allcaps> extended header has an endian bit then there ’ s all the different ways the various defines are used and custom swapping routines , examples : <url> <url> <url> note some cfe_endian . h macros evaluate <code> multiple times . <section> see <url> for a compile time suggestion : <hashtag> define </hashtag> is_little_endian ( ( ( union { unsigned x; char c ;}){ <number> } ) . c ) <section> none <section> triggered from email discussion on setting another endian flag in a toolchain file for an app to use <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ping - <user> <user> <user>",2
"possible negative char to isspace - static analysis warning <section> in theory a negative value could reach this code through public apis , which would lead to undefined isspace behavior as it gets converted to int . <url> <section> recommended practice is to cast to <code> , such that the conversion to <code> results in defined behavior . <section> could adjust all the parameters involved to <code> , but probably not worth it . <section> static analysis warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"update / resurrect the add_unit_test_lib / add_unit_test_exe functions <section> currently the <code> functions provide a routine to easily define a <allcaps> cfe </allcaps> app : <code> . this makes it easy for app developers to create an app target that uses all the right compiler definitions , include dirs and link / interfaces libraries . furthermore , having this wrapper in <allcaps> cfe </allcaps> helped future - proof so that apps did not need to change this call when # <number> was implemented . the problem is that we did not employ the same tactic for unit tests . for these , all the special logic for adding flags / includes is basically put into the cmakelists . txt in each app where the ut targets are defined . <section> the <code> does have a <code> and <code> function that was originally intended for this purpose , but these were never really used . we should implement the basic ut logic here and change sample app / lib to use them . <section> currently , the sample_lib / sample_app unit tests break when merging with # <number> because of the different paths and the transition toward interface libraries . rather than just updating these ut builds to work again , using these functions would help avoid this issue in the future . <section> joseph hickey , vantage systems , inc .",2
"report <allcaps> psp </allcaps> version info in <allcaps> es hk </allcaps> telemetry <section> currently the <allcaps> es hk tlm </allcaps> message includes the <allcaps> cfe </allcaps> and <allcaps> osal </allcaps> versions , but not <allcaps> psp </allcaps> . also , as noted in nasa / osal # <number> , using preprocessor macros to get <allcaps> osal </allcaps> / <allcaps> psp </allcaps> version info means its evaluated when <allcaps> cfe </allcaps> source code is compiled , and the result actually compiled into <allcaps> cfe </allcaps> . <section> add <allcaps> psp </allcaps> version info to <allcaps> hk tlm </allcaps> . also <allcaps> cfe </allcaps> should use the runtime <allcaps> api </allcaps> to get the version info , such that the info actually comes from the <allcaps> psp </allcaps> / <allcaps> osal </allcaps> library , respectively . <section> see also nasa / cfs # <number> <section> joseph hickey , vantage systems , inc .",2
missing requirement for default file name : es task status record to file ( <allcaps> cfe </allcaps> - <number> ) and <allcaps> cds </allcaps> write to file ( <allcaps> cfe </allcaps> - <number> ) requirements needs update to verify dumping executive services task status record and critical data store to a default file name . justifcation : want to provide a default in the event a user does not want to specify one,1
"cast vs mask to alter value in cfe_msg_setmsgid v1 - static analysis warning <section> in current implementation of cfe_msg_setmsgid for v1 uses a cast to alter a value : <url> <section> probably more obvious to mask , which would squash static analysis warnings <section> leave as - is <section> static analysis warning , cast alters value <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_time_print possible improvements <section> cfe_time_print does not take a buffer size such that the write to the buffer can be limited , also "" clunky "" implementation to write to the buffer . <section> use snprintf ? consider new <allcaps> api </allcaps> that includes buffer size ? <section> none . <section> could be part of more significant <allcaps> time </allcaps> refactor - # <number> there is a strange static analysis warning on the null character addition that would go away , but somewhat unrelated . <section> full name and company / organization if applicable",2
"question : difference between writetosyslog or sendevent hi , i was reading through the application developers guide and i read "" _developers should make use of the event services cfe_evs_sendevent whenever possible . if , however , there is a significant event that cannot be recorded using the cfe_evs_sendevent function , then the developer can use the cfe_es_writetosyslog function . _ "" i was wondering what difference does it make if i use writetosyslog or sendevent if my main goal is to print something to the terminal ? can i just always use writetosyslog ? thanks !",3
"coercion alters value caused by incorrect type - static analysis warning <section> cfe_tbl_findtableinregistery returns int16 , regindex is defined as uint32 and only checked for error ( negative ) <url> the last parameter passed to cfe_es_filewritebytecnterr for both uses is status ( int32 ) , yet it expects size_t . <repeated> seems like this is not defined correctly ? <url> <url> <url> not a bug , just an inconsistency warnings <section> correct type <section> none <section> static analysis warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
add documentation build to submodule github actions workflow <section> build cfe documentation at the component level instead of waiting for a bundle - level build this ensures we catch doxygen errors in individual prs as opposed to having to fix them after the pr is merged <section> have users check their prs manually <section> see documentation build example in bundle,2
"argument checks in internal functions ( cfe_sb_transmitmsgvalidate , etc ) <section> as discussed in # <number> we need to have some consensus on the proper level of argument checking for internal helper functions . sometimes internal functions have tests to validate their inputs ( range check etc ) on behalf of the caller , in the case where several public apis need to repeat the same tests - - putting these in a helper can reduce repeated code and make all apis consistent in their validation ( a good thing ) . but in other cases the helper is invoked from contexts where the inputs are never out of range or pointers can never be <allcaps> null </allcaps> . testing for such inputs can be redundant . <section> need to confirm / reach consensus on whether functions like cfe_sb_transmitmsgvalidate ( ) in <allcaps> cfe sb </allcaps> need to validate all their arguments . probably should better document _which_ args are tested and _why_ - and if there are limitations on other args ( e . g . certain args are assumed to be non - null ) . <section> this just causes some confusion during review and probably some additional comments / documentation could help . see thread here : <url> <section> joseph hickey , vantage systems , inc .",2
"evs_generateeventtelemetry does not handle vsnprintf error cases <section> vsnprintf can return negative error values , but is compared to unsigned int to handle truncation : <url> i would not call this a bug ( will just pass the initialized to zero string ) , but might be worth a unique message ? <section> explicitly handle failure ( and cast for comparison ) <section> place termination character at the start ? any other way to provide clues . <section> static analysis warning for coercion alters value . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_es_checkcounteridslotused does not handle error case ( <allcaps> null </allcaps> dereference ) - static analysis warning <section> cfe_es_checkcounteridslotused - > cfe_es_locatecounterrecordbyid can return <allcaps> null </allcaps> , and cfe_es_counterrecordisused dereferences <url> <url> <url> <section> handle null <section> none <section> static analysis warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_sb_getuserdatalength possible uninitialized variable ( false alarm ) <section> cfe_sb_getuserdatalength use of totalmsgsize causes static analysis warning . false alarm since msgptr is checked before cfe_msg_getsize , and & totalmsgsize will never be <allcaps> null </allcaps> , so it ' s always set . <section> initialize to <number> to squash the warning . <section> still dislike this function . <repeated> do not use it . <section> # <number> , static analysis warnings <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"possible uninitialized variables - compiler warnings ( release build , centos <number> ) <section> various warnings on centos <number> when <allcaps> buildtype </allcaps> = release : <code> <section> initialize variables where needed <section> none <section> compiler warnings , vs static analysis warnings reported in # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"long switch cases - static analysis warning <section> the following cases trigger a long switch case static analysis warning . <number> . consider moving to a command processing function , or possibly use the command table pattern ( and break up command processing routines into files ) like tbl . <url> <url> <url> <number> . extensive logic in a case , may benefit from being in a function : <url> <section> analyze , possibly refactor . <section> there ' s more logic required to implement the table pattern , so definitely debatable as to the preferred fix . <section> i thought we had an issue to make command processing consistent ( tbl vs everything else ) but can not find it . falls more into the nice to have / refactor bucket so not targeting caelum ( unless someone wants to volunteer ) . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"createpipeerrorcounter only incremented for cfe_sb_cr_pipe_bad_arg_eid or in cfe_sb_deletepipefull <section> createpipeerrorcounter logic does not seem to make all that much sense since it ' s only incremented for one error case , and also incremented as part of deleting a pipe . note the trivial switch below is a static analysis warning , might be more appropriate to count warnings for more cases : <url> <section> trace design to requirements , confirm current implementation makes sense . <section> none <section> uncovered due to static analysis warning , any change will be easier after # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"useless assignments / redundant checks - static analysis warning <section> useless assignments since fileopened is initialized to false ( or already checked for false ) : <url> <url> initialized to zero , then set to zero : <url> already memset to <number> : <url> already checked for numblocksizes . cfe_platform_es_pool_max_buckets <url> already cfe_success : <url> <section> remove . <section> none , useless assignments in the name of future - proofing is a slippery slope . to some ( like me ) these useless assignments make me thing the implementer did not fully understand the implemented logic , was sloppy / careless , or added useless logic "" just in case "" . <section> wait for # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"possible uninitialized variable ( false alarms ) - static analysis <section> all false alarms based on logic , but easy to squash ( just initialize ) . this one could be avoided w / simple refactor ( move success logic into if ) which reduces to one return location ( preferred coding style ) : <url> just initialize : <url> <url> <url> likely resolved if os_opencreate_t initialized the file descriptor on failure : <url> <url> <url> <section> see above <section> none <section> codeql warnings , wait until # <number> is resolved <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"user guide doxygen cutting parts out <section> there are parts of the user guide that when formatted by doxygen are causing parts of the content to get cut out and not included . i happened to find one but imagine there are others . <section> the one example i found was on page <number> for <number> . <number> cfe_tbl_register ( ) the tbloptionflags is missing the last <number> sentences of cfe_tbl_opt_critical . the user guide says • cfe_tbl_opt_critical - when this option is selected , the table service will automatically allocate space in the critical data store ( <allcaps> cds </allcaps> ) for the table and insure that the contents in the <allcaps> cds </allcaps> are the same as the contents of the currently active buffer for the table . this option is mutually exclusive of the cfe_tbl_opt_usr_def_addr and cfe_tbl_opt_dump_only options . it should also be noted that the <section> no information should be lost by doxygen formatting . <section> <url> <section> - adobe acrobat reader <number> <section> alex campbell <allcaps> gsfc </allcaps>",1
"es globals need cleanup <section> the es core app is quite disorganized in terms of its internal headers ( what defines what ) and global data structures . in particular there are three global data objects in this module . <url> <url> <url> <section> make a single <code> object as was done for other apps in pr # <number> . further clean up / re - org the internal headers to create a more logical / consistent content would be nice . <section> joseph hickey , vantage systems , inc .",2
"alternate condition impossible to exercise - static analysis <section> impossible to hit alternate case ( even considering reconfiguration ) : status is always >= cfe_platform_tbl_max_sngl_table_size ( line <number> ) since it ' s checked at line <number> : <url> numblocksizes > cfe_platform_es_pool_max_buckets is always false on line <number> since it ' s checked on <number> : <url> eventid can never be <number> and regname can never be <allcaps> null </allcaps> , if it was it would be a bug . this sort of thing ( preventing a developer from introducing a bug with logic in production code ) is better prevented via good unit test design . if a case is added it should check the event . <url> <section> remove cases where an alternate condition can not be exercised - a step closer to being able to do mc / dc coverage - remove unnecessary logic <section> occasionally considered "" future proofing "" but developers should never depend on a condition being tested twice when modifying code . <section> triggers codeql warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"mission version cfe_mission_rev description out of date <section> <url> mission version was removed from config file , it ' s intended for identifying mission custom changes to the "" delivered "" fsw , <allcaps> not </allcaps> to cover changes in the configuration file . <section> clarify use of mission version in documentation . <section> none <section> # <number> , # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"implement "" cfe_es_getversion ( ) "" function <section> as in nasa / osal # <number> it is preferable to obtain version strings via an <allcaps> api </allcaps> call rather than as a macro , because of how / where it is evaluated . <section> implement <allcaps> api </allcaps> calls that return the version strings currently defined as macros in <code> <section> see nasa / osal # <number> . <section> joseph hickey , vantage systems , inc .",2
replace ut_stub_checkforcefail with ut_stub_checkdefaultreturnvalue <section> see nasa / osal # <number> <section> update to use new name <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"refactor "" target_config . c "" logic to avoid <hashtag> include </hashtag> of data fragments <section> the content of the various <allcaps> configdata </allcaps> global data structures is dynamically generated from a combination of build scripts , some which run at prep / generation time and some which run at build time . the pattern currently used here is that the scripts generate "" fragment "" data files that only contain the dynamic content , without any c declarations or any other syntax . this is then paired / combined with the <code> file which is a regular version - controlled file that has the basic structure and declarations ( i . e . all the non - dynamic bits ) and uses <code> to pull in the data fragments where needed ( i . e . a "" fill - in - the - blank "" approach ) . this works well but there are some rules against using the <code> directive with anything other than an normal / conventional fully formed c header file ( i . e . it has <code> extension , fully self contained , syntactically correct , standalone , include - able by any c source file at will ) . so a "" dynamic data fragment "" file which is implemented here does not meet the criteria . <section> have the build system generate fully - formed source files before passing to c compiler in some way . currently evaluating / considering several approaches or combination thereof . <number> . put more of the non - dynamic "" c "" content ( structure ) into cmake <code> templates , generating a separate but fully - resolved . c source for each object that has dynamic content . <number> . pass the file through another explicit macro - processing step ( such as c preprocessor or m4 ) before compiling ( basically introduce another layer of indirection ) to generate a final file . either way the result should be a fully formed . c / . h file without any <code> in its body - as all data items should be "" filled in "" already - which is then built and linked as the current file is . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , remove deployment guide reference <section> fix # <number> - removes deployment guide reference from cmake / <allcaps> readme </allcaps> . md partially addresses # <number> ( removal of deployment guide reference ) <section> n / a - readme update only <section> none <section> n / a <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"question : where is the cfs deployment guide ? <url> says "" for a more in - depth guide and specific examples , see appendix a of the cfs deployment guide . "" i have searched for the cfs deployment guide and cannot find it . has the name changed ? where is it now ?",0
cfe_mission_es_max_shell_cmd and cfe_mission_es_max_shell_pkt no longer used <section> cfe_mission_es_max_shell_cmd and cfe_mission_es_max_shell_pkt are no longer used anywhere . <section> since they are no longer used they should be removed . <section> alex campbell <allcaps> gsfc </allcaps>,2
"commands using files should utilize new filename parser <section> issue # <number> + pr # <number> introduces a new fs utility <allcaps> api </allcaps> to parse a filename which is aware of the expected path and extension , and will default to these if unspecified in the input . the initial pr only applies it to es startup script . but this creates an inconsistency ; now you can put just a basename e . g . <code> in the startup script , but passing the same string as the filename to <code> command will __not__ work , which does not seem right . <section> for consistency in operation <allcaps> cfs </allcaps> should also employ the same filename parser in all commands that accept a filename . <section> it is ( intentionally , by design ) fairly trivial to update a current call to <code> to use the filename - aware alternative instead . the only minor issue / concern is that the new function has more input validation than <code> does , so it is more important to check the return status . so doing this generally introduces another check + path to generate the error event , so a ut test case needs to be added . but that ' s about it . <section> joseph hickey , vantage systems , inc .",2
"add codeql analysis to workflow <section> codeql analysis not implemented in submodules <section> add so alerts are generated on pull requests to submodules <section> none <section> codeql is run at the bundle ( nasa / cfs ) level , but link to code in submodules does not work . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
add format check to workflow <section> no indication of software format non - compliance on pull requests <section> add format check to workflow <section> none <section> see # <number> for applying the standard formatting <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"default file name for task info is too long <section> the default filename for the task info file is defined here : <url> the filename portion of the string - "" cfe_es_task_info . log "" - is exactly <number> chars , and <code> is also <number> chars , so it fails the max length test - because it needs to be less than the max for the <allcaps> nul </allcaps> char . <section> build with default config , issue cfe_es_query_all_tasks_cc command with no filename - which causes it to use default . observe error about failure to create file - error code <code> . <section> defaults should work . <section> ubuntu <number> <section> the prefix <code> is <number> chars by itself . a simple fix would be to trim this back to just <code> . would recommend changing all the default filenames for consistency . er log is already just <code> ( no es ) . <section> joseph hickey , vantage systems , inc .",0
"auto increment sequence on <allcaps> cmd </allcaps> packets <section> the <code> function has a boolean parameter to indicate if the sequence number should be incremented automatically based on the route . this route - based sequence number overrides whatever was in the buffer . however , this only works on telemetry packets . there is a test that checks specifically if the packet is <allcaps> tlm </allcaps> , and only updates the sequence number if so . this means that all locally - generated messages of the "" <allcaps> cmd </allcaps> "" variety - which includes the various <allcaps> time </allcaps> messages e . g . 1 hz , and all "" send_hk "" packets generated by <allcaps> sch </allcaps> - always have a sequence number of <number> in their header . <section> the sequence number should probably be valid on all these - otherwise there is no way to tell if a message was missed . <section> it is not clear why only locally - generated <allcaps> tlm </allcaps> packets would have a valid sequence , but not locally - generated <allcaps> cmd </allcaps> packets . note sch_lab currently calls <code> with the value set <code> - - so this would have to change too in order to get valid sequence numbers in send_hk packets . <section> joseph hickey , vantage systems , inc .",2
"consider simplifying the zero - copy <allcaps> sb api </allcaps> <section> after some refactoring in pr # <number> the whole <code> has become somewhat extraneous - there is no extra handle / descriptor for a zero copy buffer - they are all the same , and this simply refers to the same buffer descriptor now . <section> the <allcaps> api </allcaps> can be simplified and this extra handle removed . the buffer content pointer is good enough to reconstitute the descriptor pointer ( fixed offset ) . <section> leave <allcaps> api </allcaps> as is ( backward compatible , just a little more complex than it needs to be ) . <section> this will affect public apis - cfe_sb_zerocopygetptr , cfe_sb_zerocopyreleaseptr , cfe_sb_transmitbuffer . ( cfe_sb_zerocopysend and cfe_sb_zerocopypass are affected but already deprecated ) . <section> joseph hickey , vantage systems , inc .",2
"remove use of hk parameter ( logenabled ) in <allcaps> evs </allcaps> control logic <section> <code> is used in logic , discouraged pattern ( tlm data used for control ) <section> simplify the logic <section> none <section> # <number> , # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove cfeesugshellsrv section of users guide <section> es shell command removed , documentation outdated . <section> clean documentation : <url> and all references ( fix next / prev ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , update workflow action badge <section> fix # <number> - remove travis ci badge and add the static analysis badge to <allcaps> readme </allcaps> <section> added and confirmed it worked on branch ( set custom to fork and branch , forced a timeout failure , confirm badge showed failure ) <section> updated badge on <allcaps> readme </allcaps> <section> ci <section> <allcaps> tbd </allcaps> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - if <allcaps> nasa </allcaps> civil servant employee or <allcaps> gsfc </allcaps> contractor on <allcaps> ses ii </allcaps> - address / email / phone and contract / task information ( if applicable ) must be on file - else if company - <section> company <allcaps> cla </allcaps> must be on file ( once per release ) : company <allcaps> cla </allcaps> <url> - else if individual - <section> individual <allcaps> cla </allcaps> must be on file ( once per release ) : individual <allcaps> cla </allcaps> <url>",1
update <allcaps> readme </allcaps> badges for workflow actions <section> badge in readme still shows travis results <section> update to reflect action status <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
add timeout to actions in workflow <section> default timeout is <number> minutes which is unnecessary and could exhaust allocations . <section> add a timeout in workflows <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
""" pipename "" is unset for debug event <section> mistake in previous pr # <number> where the <code> buffer is used to send a debug event on success but it is only set to a value on failure . <section> enabled debug events , and "" subscription rcvd "" events do not have a valid name . <section> need to get name in all cases , not just failure . <section> ubuntu <number> <section> my preference would be to only print the id in a debug event , as its faster and it saves the work of copying the name since most of the time debug events are turned off anyway . but a "" quick fix "" that does not change the format is to just move the line . <section> joseph hickey , vantage systems , inc .",0
cfe_es_writetosyslog stub write to utdebug <section> cfe_es_writetosyslog stub is not informative when debugging <section> add debug output in cfe_es_writetosyslog stub <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"update <allcaps> evs </allcaps> optional log requirements ( no longer optional ) <section> the following are listed as <allcaps> optional </allcaps> , # <number> /# <number> removes the option : cevs3013 - <allcaps> evs </allcaps> : clear local event log cevs3014 - <allcaps> evs </allcaps> : set event logging mode cevs3015 - <allcaps> evs </allcaps> : write local event log to file cevs3016 - <allcaps> evs </allcaps> : write local event log order cevs3018 - <allcaps> evs </allcaps> : housekeeping message cevs3108 - <allcaps> evs </allcaps> : store message in event log cevs3108 . <number> - <allcaps> evs </allcaps> : store message in event log - set full flag cevs3108 . <number> - <allcaps> evs </allcaps> : store message in event log - increment overflow counter cevs3108 . <number> - <allcaps> evs </allcaps> : store message in event log - log full behavior cevs3202 - <allcaps> evs </allcaps> : initialize full flag to false on power on reset cevs3203 - <allcaps> evs </allcaps> : initialize logging mode on power on reset cevs3207 - <allcaps> evs </allcaps> : preserve event log reset mode on processor reset cevs3208 - <allcaps> evs </allcaps> : preserve log full state on processor reset cevs3210 - <allcaps> evs </allcaps> : preserve log overflow counter on processor reset <section> update requirements , not optional . <section> none <section> note once services transition to modules (# <number> ) , custom implementations could replicate <allcaps> evs </allcaps> w / o a log if really needed . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"apply style formatting ( release candidate prep ) <section> code has diverged from automated style . <section> apply automated style formatting . <section> none <section> suggest adding as a check in workflow until release . style has been very stable , should be manageable to enforce at least in the short term ( release candidate and release prep ) . could enforce just on rc branch ( es ) if there ' s an issue w / general enforcement . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"update ces1007 . <number> and ces1008 . <number> , reload / restart non - param error does not increment command err counter <section> non - command parameter errors ( errors within the object files ) do not increment the command error counter since the command is processed as a request that happens later ( takes time to execute ) ces1007 . <number> : if the cfe application restart fails due to a non - parameter error , then the cfe shall delete the application , <section> , and generate an event message . ces1008 . <number> : if the cfe application reload fails due to a non - parameter error , then the cfe shall delete the application , <section> , and generate an event message . <section> update the requirements . <section> more complex command error handling ( delay the success increment ) . <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"cfe_sb_default_qos exposed globally , with internal defaults , passing structure by value <section> cfe_sb_default_qos is extern from cfe_sb . h ( so any code including cfe_sb . h could change it ' s value ! <sad> <url> but the defines are "" internal "" to sb : <url> also structure passed by value : <url> there is no underlying implementation , so currently just a placeholder in the <allcaps> api </allcaps> . <section> possibly convert to bits in a uint32 / <number> or similar ( structure is overkill ) , provide default and the other values publicly as defines , do not expose as a global variable . <section> none <section> found when working # <number> , it ' s out of family since it ' s not at task global scope . <section> jacob hageman",0
"custom pipe message limits without requirements or justification <section> expectation is to use defaults unless there ' s a requirement / justification to have custom limits . there is neither for the code snips below , and no clear reason why the default limits are not good enough ( they should be fine ) . <url> <url> <url> <url> note for all but <number> case , the message limit value set is the same as the default ( <number> ) . <section> either justify these differences or just use the default subscribe call . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
calculate crc can not return error code <section> calculate <allcaps> crc </allcaps> returns a uint so any error code you use gets overloaded . <section> be able to handle errors <section> was found while working on # <number> <section> alex campbell <allcaps> gsfc </allcaps>,0
"cfe_sb_snd_rtg_eid and cfe_sb_snd_rtg_err1_eid used for all three write file cmds ( route , map , pipe ) <section> event id ' s should be unique , these are not . <section> define event id ' s for all three . also worth a general scrub of event id ' s to ensure they are unique . other considerations : - "" <allcaps> snd </allcaps> "" is a misnomer , these are write commands - there is no event for the file header error <section> none <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"es header prototypes for nonexistent functions <section> some old / stale prototypes in <code> are here : <url> these functions are not implemented - there is no definition to go along with these prototypes . <section> remove these - should not prototype functions that are not defined . ( obviously not being called by anything ) <section> noted this when reviewing other nearby changes . <repeated> <section> joseph hickey , vantage systems , inc .",0
"split "" resourceid "" type into a separate module <section> the <code> type is currently defined by es , but in issue # <number> and pr # <number> this was extended to be used by sb . there is also a potential to use it for <allcaps> tbl </allcaps> handles as well . there is also some choice here - in that the <code> type can be a simple typedef to <code> for compatibility , or a type - safe wrapper to make sure it does not get mixed . <section> put the type definition and associated access functions / macros / constants into a separate <allcaps> cfe </allcaps> module , like <code> and <code> are currently done . this gets it out from being an "" es "" type , extending it apply to all of <allcaps> cfe </allcaps> core and possibly also apps . <section> this also can incorporate a solution for # <number> - each app may specialize the generic type with its own typedef . <section> joseph hickey , vantage systems , inc .",2
"confirm no recursive locking and transition to fast mutex use <section> currently using recursive mutexes due to historical double locks ( see # <number> ) . could use more efficient fast mutexes after confirming all recursive locks have been removed . <section> survey for recursive locks , remove any remaining , and transition to fast mutexes . <section> none <section> # <number> was solved by # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"reduce memory use with <allcaps> mission </allcaps> defines to size tlm vs <allcaps> platform </allcaps> defines for internal table use <section> spawned from # <number> discussions where the point was brought up that <allcaps> platform </allcaps> defines could be used to size internal arrays for tracking ( for example <code> and <code> ) and <allcaps> mission </allcaps> defines could be used for sizing tlm ( so all platforms have the same packet definitions ) . <section> trade the additional requirements / complexity vs memory savings . consider requirements / design / implementation updates . if required , identify prime stakeholder and resources to implement . <section> leave as is where the mission maximums are used for both tlm and internal sizing ( current state meets current requirements ) . <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"update highest valid msgid documentation and verification <section> <code> description is out of date based on routing module ( with option for hash ) : <url> verification is also based on direct map : <url> <section> update documentation . consider checking that <code> < <code> since the invalid msg_id is set to the maximum value . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <user>",0
"suppress format - truncation warnings <section> it ' s only triggered when length limited * printf functions are used , and that ' s why we use them in the cfs context ( to truncate as needed ) . <section> add <code> to default flags , users can customize the flags as needed if they want to see these warnings . <section> up to this point we have been implementing ways to suppress the individual warnings , but that just adds complexity where the point is to truncate when needed . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"possible race conditions in sb pipe operations <section> as part of debugging # <number> recently , it was noted that several historical sb apis are not adequately locking the global data structures that they access . in particular during pipe operations and subscription / unsubscription , some functions are accessing the "" cfe_sb_piped_t "" objects ( pipe descriptors ) in the <code> and routes in the routing table outside any sb shared data lock , or are not maintaining the lock from start to finish . it is therefore possible that another task can modify this data while being accessed by another task . <section> not actually observed "" in the wild "" - this was found by code inspection . to manifest this would require running <allcaps> cfe </allcaps> on a multi - core system where task ( s ) were actively subscribing / unsubscribing or creating / deleting pipes _at the same time_ . <section> all sb global data access should be protected against any possible concurrency issues . <section> some examples of potentially affected routines / operations in older <allcaps> cfe </allcaps> versions ( these are observed in <allcaps> cfe </allcaps> <number> , just a quick skim though - this should <allcaps> not </allcaps> be considered an exhaustive / complete list ) : - cfe_sb_enableroutecmd ( ) / cfe_sb_disableroutecmd ( ) - accesses pipes and routes with no lock - cfe_sb_deletepipefull ( ) - locks initially , but releases lock in the middle of "" destptr "" loop to do unsubscribe , which could possibly also release another task that also accesses the same pipe or change routing ( i . e . changing the same list ) . - cfe_sb_getpipename ( ) - accesses pipetbl without lock - cfe_sb_subscribefull ( ) - when sending the final "" subscription report "" telemetry message , this is actually stored a global , filled while locked , but actually _sent_ after unlock . there is a possibility between the unlock and the send that another higher - priority task will do a subscribe and overwrite the message . <section> n / a <section> during "" steady state "" operations where the routing table is not being changed , there is not much risk , as normal sending / receiving of messages does not actually modify the data in the routing table . <section> joseph hickey , vantage systems , inc .",0
"customizable <allcaps> crc </allcaps> algorithms <section> it would be useful to be able to customize which <allcaps> crc </allcaps> algorithms are being implemented in cfe_es_calculatecrc . <section> instead of using a hard - coded lookup table , a user can set a few variables in a configuration file that describes the desired algorithm . on initialization of cfe_es , the lookup tables can be generated based on the configuration variables . i have attached a couple snippets of code to demonstrate a potential implementation . the <allcaps> crc </allcaps> algorithm variables are set in sample_mission_cfg . h . the lookup tables are generated in an initialization function that can be called when cfe_es initializes . <section> the example <allcaps> crc </allcaps> algorithms i used come from here ( <url> the <allcaps> crc </allcaps> - <number> algorithm is currently implemented in cfe_es_calculatecrc . <section> mathew mccaskey hx5 / <allcaps> nasa </allcaps> - <allcaps> grc </allcaps> regenerative fuel cell project snippets . zip <url>",2
"update <allcaps> crc </allcaps> algorithm documentation <section> it would be useful to update the documentation in cfe_es_calculatecrc function to include information on the <allcaps> crc </allcaps> algorithms used , specifically <allcaps> crc </allcaps> - <number> as that is currently the only one implemented . <section> include the following information that describes the crc16 algorithm - name : <allcaps> crc </allcaps> - <number> / <allcaps> arc </allcaps> - polynomial : 0x 8 0 0 5 - initialization : 0x0 0 0 0 - reflect input / output : true - xorout : 0x0 0 0 0 <section> while the specific algorithm has several aliases ( some listed here <url> this at least provides enough information for one to recreate the lookup table / perform their own sanity checks on the <allcaps> crc </allcaps> calculations . <section> mathew mccaskey hx5 / <allcaps> nasa </allcaps> - <allcaps> grc </allcaps> regenerative fuel cell project",1
"inconsistent pipe id reporting in sb events <section> as a follow on for issue # <number> / pr # <number> - i noticed that the format strings of many sb event texts are not consistent , particularly with respect to pipe ids . some print the pipe name , whereas some just print the id . there is also a debug event that gets generated whenever <code> runs , which means that for events that print the name , they actually generate _two_ events in the event log - which clutters things up . should be a rule of thumb that we should avoid generating more / different events in the process of generating an event - aside from being confusing it can also snowball . <section> only print the pipe ids , not names . , and use a consistent pattern / conversion ( i recommend hexadecimal / <code> conversion for resource ids as it clearly reveals the table index in the lower <number> hex digits ) . getting names at runtime is not totally trivial - there is <allcaps> cpu </allcaps> time to copy the string , and memory to store the name - and it makes all <allcaps> api </allcaps> functions that much more complex . but as long as the ids are in the event text , the names can be looked up later after the fact by dumping the pipe stats to a file . ( assuming that # <number> is fixed too ) . it ' s just faster and easier and keeps the implementation simpler . <section> the previous pr attempted to keep the event text the same as it was whenever possible , but this should be considered as a follow - on to clean up and simplify . <section> joseph hickey , vantage systems , inc .",2
"incorrect loop bounds in ut_checkeventhistoryfromfunc <section> incorrect check for events in unit test code in <code> helper routine . the event storage is an array of event ids ( <code> ) but stored in a generic byte buffer . this forgets to divide the <code> ( which is in bytes ) by <code> when reading this , so it ends up checking double the number of entries it is supposed to . after fixing this issue , it also exposes that some tests in <allcaps> tbl </allcaps> unit tests are also broken . <section> found by inspection . <section> should check the correct number of events . <section> loop at issue is here : <url> <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",0
clean up strncpy use <section> still occasionally using hardcoded defines for the character array length . better to use sizeof to simplify maintenance . also not always setting last character null . example : <url> . <repeated> <url> <section> use sizeof . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"hard lockup if user attempts to start library via cfe_es_start_app_cc <section> a hard lockup occurs if a user attempts to start a library with a stack size of <number> via the cfe_es_start_app_cc command . the only known recovery is to power cycle the unit . worth note , is that this applies only to our sp0 ( vxworks <number> ) and is not repeatable on a linux system . this bug was discovered when testing a <allcaps> ctf </allcaps> script with a copy and paste error in it . libraries are not intended to be started via the start app command , but given the severity of the error . <repeated> i wanted to submit an issue to better understand it . <section> steps to reproduce the behavior : <number> . start sample_lib via cfe_es_start_app_cc command ( note that stack size must be >= cfe_platform_es_default_stack_size in order to produce error ) <section> no lockup <section> - sp0 - os : vxworks <number> - cfe : v6 . <number> + dev295 - osal : v5 . <number> + dev247 - psp : v1 . <number> . <number> <section> add any other context about the problem here . <section> dan knutsen <allcaps> nasa </allcaps> goddard",0
"fix # <number> , clarify restart / reload app behavior <section> fix # <number> - clarifies the difference between restart and reload in <allcaps> api </allcaps> / cmd and user ' s guide documentation <section> none , comments only <section> none <section> n / a <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
cfe_sb . h - - <hashtag> if </hashtag> instead of <hashtag> if def </hashtag> cfe_omit_deprecated_6_8 probable typo ? <url>,0
"<allcaps> cfe sb </allcaps> pipes not safe across multiple tasks <section> some "" worker "" software design patterns involve multiple threads reading from a common / shared work queue . however due to the way sb buffers are managed , this is not currently possible with <allcaps> cfe </allcaps> child tasks and sb pipes . the "" current "" ( i . e . most recent ) buffer is stored in the pipe descriptor structure , and upon the next entry to <code> this function assumes that the last buffer stored in the pipe descriptor can be freed . but when multiple tasks are reading a single sb pipe , this model breaks , because only one buffer can be remembered . the current buffer is likely still in use by the other task when the next worker thread calls this necessitates some new apis to actually make this work . each worker task will need to individually indicate to sb when it is actually done with the buffer , it can not rely on entry to to <code> to indicate this . <section> _short term fix : _ just document that only one task may operate on a pipe id at a given time . app developers must externally sync their worker tasks to ensure this . recommendation would be to have one designated task ( i . e . the main task ) act as the delegater - it reads the sb pipe , identifies the request , and _copies_ the request data to an available worker thread . after this it can get a new request from the sb pipe while the worker goes on . _longer term fix : _ expose the sb buffer refcount increment / decrement routines separately in the public <allcaps> api </allcaps> , and decouple the previous buffer refcount decrement from <code> . so each worker task can safely get a buffer from sb without inadvertently freeing any previous buffer that may be still in use by other worker tasks . however , this is an <allcaps> api </allcaps> change that would affect all apps , as they now must make a new / additional call into cfe_sb when they are finished with a buffer as <code> cannot not do that automatically . <section> could feasibly have a task - based buffer record so that each <allcaps> cfe </allcaps> task will have its own "" slot "" so to speak , and thereby cfe_sb_receivebuffer could free the previous buffer _from that task_ rather than having the single buffer associated with the pipe id . but this has weakness too - sb has to have a slot for every possible task whether it uses sb pipes or not . it also means the only way to free your previous buffer is to call cfe_sb_receivebuffer ( ) again and get a new buffer . so if the work is a long - running job it will "" own "" the buffer the entire time and prevent its re - use ( and long - running jobs would likely be the reason for using a worker model in the first place ) <section> found when reviewing race conditions in sb as part of # <number> . supporting multiple threads reading the same pipe might be a nice to have but will have inherent race conditions with the current <allcaps> api </allcaps> design . so to keep the <allcaps> api </allcaps> design as is for this cycle we will have to restrict this . <section> joseph hickey , vantage systems , inc .",2
"cfe_sb_receivebuffer ( ) - - switch timeout to int32 <section> per discussion at the jan . <number> , <number> <allcaps> ccb </allcaps> , <user> suggested that the timeout parameter should be int32 , not uint32 . this should be changed . see also # <number> <section> <email>",2
avoid multiple returns and possible uninitialized variable warning in cfe_time_registersynchcallback <section> multiple returns and an ( invalid ) possible uninitialized variable warning shows up from static analysis : <url> <section> refactor for one return and avoid warning . <section> leave as is ( works ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"<allcaps> cfe </allcaps> intermittently showing invalid message id errors <section> when leaving <allcaps> cfe </allcaps> running for long periods of time , i am seeing occasional errors related to bad message ids / commands appear . for instance : <code> i was actually able to catch one of these in a core dump , and i can confirm that <code> looks like a perfectly well - formed message with msgid of 0x 1 8 1 0 . this particular example was caught at <url> <code> what is particularly mysterious is that 0x 1 8 1 0 is <code> . <repeated> these mids should be delivered only to cfe_time - <allcaps> evs </allcaps> does not subscribe to these - yet for some reason it appears to be delivered to <allcaps> evs </allcaps> . <repeated> <section> build <allcaps> cfe </allcaps> in default debug config ( <allcaps> simulation </allcaps> = native , etc ) . start up <allcaps> cfe </allcaps> core and just let it run . it may take several hours for the first error to appear . <allcaps> cfe </allcaps> appears to continue running normally afterwards though . <section> <allcaps> evs </allcaps> ( or other apps ! ) should not randomly see messages it did not subscribe to . <section> ubuntu <number> ( native ) <section> not sure when this started because everything seems fine when debugging <allcaps> cfe </allcaps> for shorter time periods . but over the last couple weeks i have noticed these messages randomly appearing in terminal windows where i have started <allcaps> cfe </allcaps> and forgotten about it ( overnight or longer ) . although i cite <allcaps> evs </allcaps> here ( because its the one i actually caught in a core file ) this phenomenon occurs in other apps too ( sb , <allcaps> time </allcaps> , etc ) all randomly getting a delivered message id they did not subscribe to . <section> joseph hickey , vantage systems , inc .",0
initialize status in cfe_es_waitforsystemstate <section> from <allcaps> lgtm </allcaps> : the variable status may not be initialized here . <url> <section> initialize to success <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"add_psp_module cmake include bug <section> when making <allcaps> psp </allcaps> modules and calling <code> from the respective <allcaps> psp </allcaps> module ' s cmakelists . txt file , the necessary includes are not available and the code will fail to compile due to <code> not being found . <section> steps to reproduce the behavior : <number> . create a <allcaps> psp </allcaps> module in psp / modules / < your module > <number> . create a cmakelists . txt file in psp / modules / < your module > and add line for <code> . <number> . make a . c source file in <code> and <code> in it . <number> . make sure to include this psp module in target . cmake so it will be built w / <code> <number> . build cfs <section> if you have the proper <allcaps> psp </allcaps> module boilerplate set up the compile error you should see is that compiler could not find <code> <section> i went ahead and modified cfe / cmake / arch_build . cmake function <code> include_directories line from <code> to <code> . <repeated> which fixed the problem . <section> - native linux - os : ubuntu <number> - versions [ cfe v6 . <number> - rc2 , <allcaps> osal </allcaps> v5 . <number> - rc2 , <allcaps> psp </allcaps> v1 . <number> - rc1 ] <section> joe mahoney - <allcaps> lta </allcaps> research",0
"resolve routeid msgid comparison issue reported by <allcaps> lgtm </allcaps> <section> comparison between routeidx of type cfe_sb_routeid_atom_t and endidx of wider type cfe_sb_msgid_atom_t . this alert was introduced in0c4f5d82 months ago <url> <section> this was implemented when there were two foreach functions , but foreach msgid was removed due to being a resource hog . really do not need a separate helper function anymore and types can be made consistent . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"implement a security policy <section> create a security policy for users on how to report security vulnerabilities . <section> the security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns . <section> additional sections that may be included : - what to expect security - wise such as what type of testing is done - address privacy concerns - supported versions - license - known vulnerabilities references to public security policies : <url> <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"re - enable static analysis after travis - ci shutdown <section> the travis ci runner ran cppcheck which we do not have anymore <section> submit pull request , notice that travis ci does not run anymore . <section> a success or failure report of a cppcheck run . <section> check from travis . yml <code> <section> n / a <section> part of ongoing travisci to github actions migration",0
"cfe_sb_receivebuffer ( ) should use cfe_sb_timeout_t for the timeout parameter in cfe_sb . h . <repeated> <url> but below , the <code> takes uint32 for the timeout . <repeated> <url> should not it be using the <code> type instead of uint32 for the timeout parameter ?",0
fix # <number> - corrects documentation for cfe_sb_getpipename ( ) stub <section> closes # <number> this corrects the documentation for the cfe_sb_getpipename ( ) unit test stub function . <section> documentation update only . <section> <email>,1
cfe_sb_getpipename stub doc references ut_pipename ? the documentation for the cfe_sb_getpipename stub references setting ut_pipename . <repeated> which <allcaps> afaict </allcaps> is not defined / used . i am assuming that users should use ut_setdatabuffer ( ut_key ( cfe_sb_getpipename ) . <repeated> ) . <url>,1
add actions in workflow to replace former ci implementation <section> ci no longer running for pr ' s in nasa repo <section> implement ci as github actions <section> none <section> similar to transition in nasa / cfs <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"return value of cfe_sb_receivebuffer stub does not match documentation for the stock stub function , it returns the default ( cfe_success ) return code but sets the message pointer to <allcaps> null </allcaps> . the documentation states that it defaults to return the <allcaps> timeout </allcaps> error . the logic for the stub may want to reflect this . <url>",1
<allcaps> osal </allcaps> guide generation warning <section> generated by user ' s guide action ` ` <code> osapisem ' for \ ref command / home / runner / work / cfs / cfs / cfe / docs / src / osalmain . dox : <number> : warning : unable to resolve reference to <code> osapisem ' for \ ref command / home / runner / work / cfs / cfs / cfe / docs / src / osalmain . dox : <number> : warning : unable to resolve reference to <code> ` ` <section> resolve warnings <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
change ut_clearforcefail to ut_cleardefaultreturnvalue <section> ut_clearforcefail was refactored to ut_cleardefaultreturnvalue for nasa / osal # <number> . it needs to have its name changed here as well . <section> part of nasa / osal # <number> <section> alex campbell <allcaps> gsfc </allcaps>,2
"update <allcaps> cfe </allcaps> to use os time conversion / access methods <section> <allcaps> cfe </allcaps> is directly accessing specific fields within <code> which will break when the struct definition changes . <section> instead of directly accessing the <code> and <code> fields within <code> , use the accessor functions to convert / extract the relevant info from the value instead . <section> see nasa / osal # <number> <section> joseph hickey , vantage systems , inc .",2
"replace calls to os_fsblocksfree <section> this function is scheduled to be deprecated in nasa / osal # <number> . <section> it should be replaced with a call to <code> instead . <section> old function has insufficient range as noted in nasa / osal # <number> . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , create cfe security policy markdown <section> fix # <number> created a draft of a security policy markdown file for cfe . the purpose of a security policy is to inform users on how to submit bugs or vulnerabilities . it is ideal to include a section for supported versions . <section> optional sections that may be included : - what to expect security - wise such as what type of testing is done - address privacy concerns - supported versions - license - known vulnerabilities references to public security policies : <url> <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
cmake - based source selection for <allcaps> rtems </allcaps> toolchain do a cmake - based source selection for <code> note that we should only need to set <code> in the current build scripts . the others are implied . could simplify here . <code> _originally posted by <user> in <url>,2
"remove use of <allcaps> osal </allcaps> internal headers <section> functions should use only <code> and <code> . other headers are getting refactored in nasa / osal # <number> . <section> remove direct use of other headers such as <code> <section> this is required in order to implement / merge the fix for nasa / osal # <number> <section> joseph hickey , vantage systems , inc .",0
"relation between cfe requirements and unit test implementation hi all ! i have some doubts about how tests are being implemented . in one hand if we look into a ut file , e . g . es_ut . c we can see that all the tests there make reference to ut_report as follows ( i took one at random ) : <code> i tried to have a deeper understanding of what is happening there but if i look for "" cfe_es_setupresetvariables "" o "" setupresetvariables "" or similar i am not able to find extra information neither in cfe_functionalrequirements . csv nor in requirements . docx . i do not know if maybe i am not looking in the correct place or maybe that files are out of date ; anyway i would like to know if there is any file where it is explained why to check "" cfe_es_setupresetvariables - other cause reset "" is performed an ut_printfisinhistory ( . <repeated> ) instruction is performed and not another one . thanks in advance and stay safe out there ,",3
"create <code> typedef to maintain app - specific command definitions <section> as part of the message processing pattern , applications currently define a header file ( typically ending in <code> ) that define the structures which serve as i / o message . notable exception to this pattern is in the "" send housekeeping "" commands - this has no app - defined type , it directly uses the type provided by the <allcaps> msg </allcaps> module e . g . <code> . <section> for consistency in operation we should really make an equivalent app defined message type ( e . g . <code> ) for this - it can be a simple typedef to <code> . having a type for this would maintain the pattern of having a dedicated typedef for each command definition that is locally defined / controlled by the app itself . <section> app can still _use_ or depend on types provided by other modules - this is ok - the main thing is that it should not be _assumed_ to do so . the send_hk style commands are unique in that they assume use of a bare <code> for this message . this is fine but the app should say this somewhere , it should not be assumed . having an app fully define its own i / o interface ( with no assumptions ) is also important if / when transitioning to a data dictionary / <allcaps> eds </allcaps> type message system . <section> joseph hickey , vantage systems , inc . _originally posted by <user> in <url>",2
"update cfe application developers guide ( <number> comments ) <section> the cfe application developers guide section <number> references the cfe deployment guide . please include the deployment guide or remove the reference . the cfe application developers guide section <number> . <number> states : "" child tasks can only execute at a priority equal to or less than the priority of the application ' s main task . "" which several folks have said is not true . it ' s not true in <allcaps> cfe </allcaps> <number> . x . <section> dan berry / <allcaps> nasa gsfc </allcaps>",0
"update sb "" send "" command names that write to a file <section> cfe_sb_sendroutinginfocmd_t , cfe_sb_sendpipeinfocmd_t , cfe_sb_sendmapinfocmd_t and the corresponding command codes actually write to a file . send should indicate a request to send information on the software bus . <section> fix names to be consistent - [x ] cfe_sb_send_routing_info_cc - > cfe_sb_write_routing_info_cc - [x ] cfe_sb_sendroutinginfocmd_t - > cfe_sb_writeroutinginfocmd_t - [x ] cfe_sb_sendroutinginfocmd - > cfe_sb_writeroutinginfocmd - [x ] cfe_sb_sendrtginfo - > cfe_sb_writertginfo - [x ] cfe_sb_send_pipe_info_cc - > cfe_sb_write_pipe_info_cc - [x ] cfe_sb_sendpipeinfocmd_t - > cfe_sb_writepipeinfocmd_t - [x ] cfe_sb_sendpipeinfocmd - > cfe_sb_writepipeinfocmd - [x ] cfe_sb_sendpipeinfo - > cfe_sb_writepipeinfo * - [x ] cfe_sb_send_map_info_cc - > cfe_sb_write_map_info_cc - [x ] cfe_sb_sendmapinfocmd_t - > cfe_sb_writemapinfocmd_t - [x ] cfe_sb_sendmapinfocmd - > cfe_sb_writemapinfocmd - [x ] cfe_sb_sendmapinfo - > cfe_sb_writemapinfo * - [ ] will also need to update comments in # <number> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove test_msg_printmsg in favor of ut_displaypkt <section> test_msg_printmsg was added with <allcaps> msg </allcaps> module , but duplicates what ut_displaypkt already did . no need for both . <section> replace test_msg_printmsg with ut_displaypkt and remove . <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"remove system log elements from cfe1521 , es : processor reset preservation list requirement <section> remove system log elements from ces1521 ( <allcaps> cfe </allcaps> - <number> ) requirement . over - specified , out - of - family , and somewhat redundant with ces1511 requirement to preserve the system log . ces1521 : upon a processor reset , the cfe shall preserve the following : - boot source - reset type - reset subtype - reset reason - number of processor resets - maximum processor resets - number of entries in system log - size of system log - number of bytes used in the system log",1
"ut stubs for cfe_sb_timestampmsg and cfe_sb_setmsgtime very inconsistent <section> these two functions do almost the same thing in <allcaps> fsw </allcaps> but the ut stubs have entirely different side effects . <code> stores the message pointer in a ut buffer , but the <code> stores the given time in the ut metadata for the message . <section> these should be more consistent . the <code> should update the metadata like <code> does because that ' s what <allcaps> fsw </allcaps> expects . <section> code inspection ( n / a ) <section> noticed this as part of # <number> review / discussion . probably also impacted by # <number> . <repeated> perhaps we can just focus on getting stubs for the cfe_msg module replacements right . we should get away from storing the message pointer in <allcaps> any </allcaps> of these stubs - because it references internal data objects and the life cycle of this object may not be persistent ( i . e . it could be on the stack ) so storing the pointer passed to any of the sb message functions is probably not a good idea . the newer method of creating a ut "" metadata "" object associated with the message pointer is better , because it has a lifespan of the unit test case - so guaranteed to be still valid when the function under test returns . <section> joseph hickey , vantage systems , inc .",2
"type mismatch between cleanup stub and implementation <section> the stub of these functions is declared as taking a <code> parameter : - [x ] cfe_evs_cleanupapp - [x ] cfe_sb_cleanupapp - [x ] cfe_tbl_cleanupapp - [x ] cfe_time_cleanupapp <section> these need to be changed to <code> to match <allcaps> fsw </allcaps> <section> ubuntu <number> <section> was not flagged as an error due to <code> not being included . after pr # <number> got merged , the stub mismatch is flagged . <section> joseph hickey , vantage systems , inc .",0
"pool buffers should not use <code> as interface type <section> the es memory pool <allcaps> api </allcaps> uses <code> as a buffer pointer - this is the type used in <code> and <code> among others . this presents a few usability problems : - most often the data being stored is _not_ actually <code> - so it generally needs to be type cast by the user . - typecasts are ugly and risky - specifically - typecasts to / from <code> might create a warning about alignment on some platforms ( one direction or the other is likely to be seen as an upgrade in alignment requirement ) - if alignment was the goal , <number> bits is still too low for <code> type , or a <number> - bit pointer , so it fails at that job . <section> the <allcaps> api </allcaps> should use <code> . <section> although this basically turns off type checking , there was no real type checking here to begin with , and pool buffers _intentionally_ should be convertible to any type , so no need for it here anyway . using <code> will clean up the code substantially , allowing a lot of unnecessary type casts to be removed . <section> joseph hickey , vantage systems , inc .",0
"questionable address adjustment in sb buffers may break alignment requirements <section> software bus message buffers should handle most restrictive alignment requirements for a message . address arithmetic used in manipulating buffers may break this alignment on some systems . even if not broken , a maintenance issue since an update to <code> could break things unexpectedly . <url> <url> <url> <section> not confirmed , but likely will not meet alignment requirement for a message with long double . <section> safer to use the real buffer type ( instead of <code> ) in the descriptor along with offsetof to size the buffer correctly ( cfe_sb_msg_t for now , or maybe cfe_sb_buffer_t from # <number> ) <section> see above <section> na - inspection <section> # <number> , # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"create consistent sb transmit / receive <allcaps> api </allcaps> ' s , refactored to utilize the zero copy pattern <section> duplicated logic in cfe_sb_sendmsg and cfe_sb_zerocopysend ( and related apis ) , refactor could simplify cfe_sb_sendmsgfull . sending / receiving software bus buffers vs the less restrictive alignment message type is not clear , names do not mirror . <section> implement the following : - [x ] cfe_sb_transmitmsg - sends the less restrictive alignment message type by coping it into a sb buffer , then transmitting buffer - [x ] cfe_sb_transmitbuffer - sends a message that is already in a software bus buffer ( like cfe_sb_zerocopysend ) - [x ] cfe_sb_receivebuffer - the old cfe_sb_rcvmsg ( it ' s not a message , it ' s a buffer ) - [ ] cfe_sb_allocatebuffer - the old cfe_sb_zerocopygetptr - [ ] cfe_sb_releasebuffer - the old cfe_sb_zerocopyreleaseptr possibly add flag for incrementing sequence count ( instead of more <allcaps> api </allcaps> ' s like cfe_sb_passmsg ) . <section> none <section> came from # <number> discussions <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
strncpy triggers a build failure in ubuntu focal release builds # # describe the issue <code> fails on *focal* <allcaps> release </allcaps> builds <url> <code> _originally posted by <user> in <url> # # alternative solution use ubuntu bionic for builds instead,0
"fix # <number> , apply consistent alignment pattern <section> fix # <number> fix # <number> - since it deprecates <code> and the new stubs are documented correctly partially addresses # <number> ( adds cfe_sb_transmitmsg , cfe_sb_transmitbuffer , cfe_sb_receivebuffer ) - main change is to utilize cfe_sb_buffer_t and cfe_msg_message_t in a consistent manner to facilitate alignment - deprecates cfe_sb_sendmsg , cfe_sb_passmsg , cfe_sb_rcvmsg , cfe_sb_zerocopypass , cfe_sb_zerocopysend - deprecates cfe_sb_tlmhdr_t , cfe_sb_cmdhdr_t - deprecates cfe_sb_cmd_hdr_size and cfe_sb_tlm_hdr_size - redefines cfe_msg_size_t as size_t to minimize duplicated work and facilitate transition to just size_t see also details in the individual commits . why is this necessary ? - the former implementation wasn ' t clear on the use of cfe_sb_msg_t vs cfe_msg_message_t , cfe_sb_tlmhdr_t vs cfe_msg_telemetryheader_t , cfe_sb_cmdhdr_t vs cfe_sb_commandheader_t - worst case alignment was enforce at the message level , making it impossible to use the message types in cmds / tlm without impacting the sizes of some of the cmds / tlm ( they would get rounded up ) - still could not cast to a command type that contained anything that required more than <number> bit alignment now - cfe_sb_buffer_t is aligned for up to a long double , so now for command processing cast alignment warnings are all resolved - clear use of cfe_sb_buffer_t and removal of duplicated / confusing terms - cfe_msg_message_t no longer requires any "" extra "" alignment and is available in the cfe_msg_telemetryheader_t and cfe_msg_commandheader_t structures so no cast is required to use the <allcaps> msg </allcaps> apis ( just pass in the msg ) - cfe_msg_telemetryheader_t and cfe_msg_commandheader_t can now be used in the definition of all cmd / tlm structures and avoid casts ( no more uint8 header of size * _hdr_size ) <section> bundle passed ci , unit tests pass . <section> none , pattern change . <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + # <number> , although # <number> is the subject of this pr <section> # <number> , # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <allcaps> edit </allcaps> : also fixed # <number>",2
"remove test_sb_cmds_subrptunexpcmdcode ( no longer applicable ) <section> test_sb_cmds_subrptunexpcmdcode seems like it was intended to test the subscription reporting with a command code parameter , but this is a no parameter command . it ' s also just a copy of test_sb_cmds_unexpcmdcode so does not do anything unique . <section> remove . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , include cfe_private . h in stubs <section> fix # <number> - added inclusion of cfe_private . h for stubs that implement related elements <section> built unit test , confirmed expected failure for cfe_es_registercdsex (# <number> ) <section> avoids future divergence . <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> depends on # <number> to pass <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
include cfe_private . h in stub implementations so they do not diverge <section> see # <number> <section> include the header <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"cfe_es_registercdsex stub mismatch <section> mismatch in cfe_es_registercdsex implementation and stub . <section> inspection <section> matching stub . <section> <url> <url> <section> na <section> looks like it was introduced in daf6c04 , part of fix # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ( from stakeholder email )",0
"refactor message header alignment and "" raw "" types to fit a clear pattern <section> aligned version of message headers currently in sb , shows different handling of the base type . <url> <section> see discussion below . <section> none . <section> brought up as part of # <number> /# <number> review . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ( from <allcaps> ccb </allcaps> discussion )",2
refactor ut_setforcefail describe the bug ut_setforcefail was refactored to ut_setdefaultreturnvalue for <url> it needs to have its name changed here as well . expected behavior change ut_setforcefail to ut_setdefaultreturnvalue additional context part of <url> reporter info alex campbell,2
"documentation / usage mismatch in <allcaps> cfe es </allcaps> "" start app "" command <section> the <code> is documented as being a default stack size , not a minimum stack size . but the <allcaps> cfe es </allcaps> "" start app "" command enforces it as a minimum value here : <url> but this is not in agreement with how it is documented : <url> <section> n / a <section> should not enforce the default as a minimum . i do not see any <allcaps> cfe </allcaps> platform definition for an enforced minimum stack size . if i remember correctly this was discussed once or twice and the agreement was that this is an operational issue - stack size requirements depend on the app stack usage and the memory constraints of the platform - so <allcaps> cfe </allcaps> cannot ( and should not ) impose some random limitations on it - it should attempt to do what the user requested . so recommendation would be to remove this check . one valid possibility is that if the stack size is specified as <number> ( which is definitely not valid ) , to use the default value instead . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",0
"remove the sb apis deprecated in # <number> and # <number> <section> deprecated code should be removed before major release . <section> remove . note the only remaining dependence on sb metadata is get / set user data size , and preference would be to remove this ( and get / set user data size would then act like all the other default stubs ) . <section> none . <section> # <number> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"user - friendly memory alignment from cfe_sb_rcvmsg <section> ~ command with <number> byte alignment requires a memcpy by the user ( <allcaps> afaik </allcaps> ) . ~ <allcaps> edit </allcaps> - see below , should already provide sufficient alignment . <section> align the buffer for the user ? any other options to make this easier ? <section> none . <section> stakeholder request / question . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ( from stakeholder ) <user>",3
"pass flags parameter to os_moduleload ( ) <section> change in nasa / osal # <number> adds a "" flags "" parameter to os_moduleload , which needs to be added to <allcaps> cfe </allcaps> where this function is invoked . <repeated> <section> add "" flags "" parameter . initially this can just use the <allcaps> global </allcaps> flag ( <number> ) to maintain the same behavior . <section> dependency of nasa / osal # <number> <section> joseph hickey , vantage systems , inc .",2
"ut_setdeferredretcode does not work as explained in ut_support . c <section> <url> description above makes it sound like calls to cfe_sb_rcvmsg will return : <number> , cfe_sb_time_out , - <number> . in practice it returns <number> , cfe_sb_time_out , <number> , <number> , - <number> since each call to ut_setdeferredretcode sets up another entry in the table , and each entry is processed until complete before moving on to the next ( which restarts the counter ) . the osal description is clear , it ' s just not used correctly in cfe : <url> <section> set more than one ut_setdeferredretcode on the same key , observe response . <section> set up so it will do <number> , cfe_sb_time_out , - <number> : <code> <section> see above <section> - hardware : cfs dev server - os : ubuntu <number> - versions bundle main <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"cfe_platform_sb_max_pipe_depth reporting and use misleading in relation to os_max_queue_depth <section> cfe_platform_sb_max_pipe_depth is reported in cfe_sb . stattlmmsg . payload . maxpipedepthallowed , which is not true if it ' s > os_max_queue_depth . <section> maybe remove as a <allcaps> cfe </allcaps> platform config ? it does not size arrays or anything , so it seems arbitrary at the cfe level . <allcaps> osal </allcaps> checks vs os_max_queue_depth . <section> verify < or = os_max_queue_depth ? <section> see nasa / osal # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
pipename refactor removed it from the send pipe info file dump <section> # <number> removed pipename from the structure that is written when the send pipe info command is sent . need to add this information back in . also related to # <number> . likely need to reconsider what is output ( memory addresses likely not helpful ) . <section> observe file output from a cfe_sb_send_pipe_info_cc command before and after # <number> merge . <section> # <number> should not have changed output file . <section> <url> <section> all . <section> observed in build verification test of <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ping <user>,0
"consider implementing a common task library <section> there ' s things we code over and over again , and where we do not follow standard patterns we probably should . <section> create a common set of utilities for a task ( aka a task library ) that the core services could also use . candidates : - cfe_task_verifycmdlength ( msgptr , expectedlength , erroreventid , errorcounter ) - could also pass in msgid and fcncode so they do not need to be looked up twice ? see # <number> - cfe_task_resetallcounters - see # <number> - cfe_task_getapptaskname - see # <number> for use in <allcaps> api </allcaps> reporting to provide consistent information - cfe_task_formfullname - see # <number> if a common formation pattern is implemented ( vs just naming pattern ) - generic double - linked list support <section> leave as - is . <section> observed when implementing # <number> , duplicated code is all over for a few of the standard task elements . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"automatically update leap seconds in sample cmake <section> based on # <number> , it would be useful to set up a github bot to check and update this every six months or so . <section> automate updating this file . <section> periodically open an issue when the leap seconds fall out of date . <section> official source of leap seconds <url> <section> gerardo e . cruz - ortiz",2
"time not using critical data store <section> the following requirements specify that <allcaps> time </allcaps> should be using <allcaps> cds </allcaps> : ctime2502 upon a processor reset the cfe shall verify the critical data store used to store time values . ctime2501 upon a processor reset the cfe shall acquire the following time elements from the <code> critical data store : - time status data - <allcaps> stcf </allcaps> - leap seconds ctime2700 during normal operation , the cfe shall preserve the following time elements in the <code> critical data store : - time status data - <allcaps> stcf </allcaps> - leap seconds - <allcaps> met </allcaps> ctime2502 . <number> if the critical data store is not valid , all of the time elements shall be initialized in the same fashion as following a power - on reset . there is no <allcaps> cds </allcaps> for time – the respective variables are preserved through the reset area . <section> the requirements or <allcaps> fsw </allcaps> should be updated to reflect intended implementation . <section> dan knutsen <allcaps> nasa </allcaps> / goddard",2
"new printf warnings in <allcaps> rtems </allcaps> build <section> a recent change re - introduced some printf type warnings on the <number> - bit <allcaps> rtems </allcaps> build <section> build for <allcaps> rtems </allcaps> i686 target warnings are issued : <code> <section> should build cleanly <section> ubuntu <number> build host for i686 - rtems4 . <number> target . <section> this always happens with fixed width types , needs explicit cast when used with printf . <section> joseph hickey , vantage systems , inc .",0
"resolve table services message initialization inconsistencies <section> hk and tbl regpacket are initialized in both cfe_tbl_earlyinit and cfe_tbl_initdata ( called from cfe_tbl_taskinit ) . the notify message packet is only initialized in cfe_tbl_sendnotificationmsg , and gets initialized every call . <url> <url> <url> the cfe_tbl_sendnotificationmsg could just be initialized once , then setmsgid and setfcncode each time . <section> these packets only need to be initialized once . <section> none . <section> observed when working on # <number> additional observation - the notification command gets timestamped , which fails for implementations where there is no time stamp in commands . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"use resource id type for sb pipe id <section> the <allcaps> cfe sb </allcaps> pipe id table is not safe from aliasing or other issues . <section> redefine the cfe_sb_pipeid_t type to be a form of cfe_es_resourceid_t like many other resources have already been converted ( mem pool handles , <allcaps> cds </allcaps> blocks , etc ) . re - use all the same management patterns of this structure . <section> the only potential downside is that resource ids are defined as <number> bit values but pipe ids were only <number> bits . so this will make <code> into <number> instead of <number> . but as long as apps are properly using the typedef and not assuming <code> or otherwise depending on this being a single byte , this should not be noticeable . this is somewhat related to previous issue # <number> - implementing this would be a good step in the right direction for that issue too . <section> joseph hickey , vantage systems , inc .",2
sample config leap seconds needs update <section> the sample configuration ' s cfe_mission_time_def_leaps was set to <number> and should currently be <number> <section> steps to reproduce the behavior : visual inspection <section> cfe_mission_time_def_leaps should be <number> <section> <url> <section> n / a <section> # <number> leap second history <url> <section> alex campbell <allcaps> nasa gsfc </allcaps>,0
"sb private / internal data structure being written to telemetry dump file <section> the <code> structure is defined within <code> and is internally used to manage the pipe state . but as part of the "" send pipe info "" command this structure is also directly written to a data dump file - making it effectively into telemetry data . <section> code should clearly delineate what is telemetry data intended to be consumed by the ground or other systems , and what is internal data that only resides in local memory . in particular , the <code> also contains pointers , so the dump file resulting from a send pipe info command will contain these internal memory address ( meaningless outside the current <allcaps> cpu </allcaps> ) and it will change size depending on whether it is running on a <number> - bit or <number> - bit <allcaps> cpu </allcaps> . <section> ubuntu <number> <section> whether data is sent directly in a telemetry message in real time or dumped to a file and transferred to the ground system in a deferred fashion , it is all basically telemetry data and the structures used in these data dump files should be defined in consistent ( i . e . non platform dependent ) terms so the tools on the ground can actually parse the file ( or message ) . <section> joseph hickey , vantage systems , inc .",0
"update startup processing to optionally use module suffix <section> startup scripts currently need to be modified across systems that have different module suffixes . <section> # <number> makes the module suffix available in software . if there is no suffix specified in the startup script , append it ( backwards compatible ) . this would make startup scripts more portable . <section> none <section> # <number> - table implementation would also benefit from not needing the suffix <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"report task details in query_all_tasks command <section> the current <code> structure , which is written by the query_all_tasks command , only has some very basic task information - the name / id , execution count , and what app the task is associated with . <section> suggest to also include : - stack size - priority - entry point ? ( would depend on # <number> ) <section> stack size is an important statistic for determining memory usage priority is potentially important for real time concerns both of these are tracked by <allcaps> osal </allcaps> and easily available , just have to get it and put it in the structure . <section> joseph hickey , vantage systems , inc .",2
"move entry point address info from app table to task table <section> the es global currently tracks task entry point in the app table , not task table . as a result only the "" main "" task entry point of an app is tracked in this regard . as child tasks are created , these all have different entry points , but they are not stored , and therefore cannot be reported in the telemetry as reported via e . g . query_all_tasks . <section> hold the actual runtime entry point address in the task table rather than the app table . <section> this would simplify the current task entry logic as it would only need to look at the task entry , not the app + task entry combination . still would need to hang onto the _configured_ ( string version ) of entry point for when an app is reloaded / restarted . <section> joseph hickey , vantage systems , inc .",2
"shorter name for es_backgroundtask <section> with the recent addition of setting the name at the linux os kernel in nasa / psp # <number> , task names are mostly shown in the debugger but not for the es background task . this is because the glibc / linux has a hard limit of <number> characters for this name . so even though os_max_api_name is <number> , names need to be less than <number> chars in order to show up properly . <section> run <allcaps> cfe </allcaps> in debugger and look at task names - "" es_backgroundtask "" does not show up . <section> should show the name . <section> ubuntu <number> <section> recommend keeping <allcaps> cfe </allcaps> task names to be all less than <number> chars even if os_max_api_name is set to a larger limit . <allcaps> osal </allcaps> is fine with longer names , but they just do not show up in the debugger due to the underlying glibc / linux limit . <section> joseph hickey , vantage systems , inc .",2
"cfe_fs subsystem has no tracking information <section> all the app core modules are tracked by es , because apps all have an entry in the global app table . so one can get an id and all other expected operations such as name / id lookups work . however <allcaps> cfe fs </allcaps> subsystem is not an app , it is a library . as a result , it cannot be identified / queried in any way . <section> call e . g . <code> and one will get a result of <code> , even though the cfe_fs subsystem definitely exists . <section> the fs subsystem should be registered in the global table as a library , so it can be identified and referred to . <section> ubuntu <number> <section> noticed this with extended testing of # <number> - queries for cfe_es , cfe_sb , etc all work , but an attempt to query cfs_fs does not work , but it probably should . <section> joseph hickey , vantage systems , inc .",2
"cfe_msg_initmsg does not always set secondary header bit <section> the behavior of cfe_msg_initmsg seems to be a regression from the old <number> cfe_sb_initmsg , which always set the secondary header flag regardless of the clear / initmsg parameter . there ' s always a <allcaps> ccsds </allcaps> secondary header , so this bit should always be set . <section> call cfe_msg_initmsg with the <code> parameter set to false <section> secondary header flag on message is set to <number> <section> <url> cfe_msg_initdefaulthdr should always be called . <section> - sp0 - os : vxworks - versions : cfe <number> <section> discovered when sbng did not properly set the command code due to missing secondary header flag . this was worked around by calling cfe_sb_initmsg w / the initmsg parameter set to true . <section> john n pham , northrop grumman",2
"refactor directory structure so it makes sense again ( fsw contains non - fsw ) <section> fsw is misleading in that it includes unit tests , etc but then there are also fsw implementations within modules . <repeated> <section> implement a flattened / sensible directory structure . needs discussion . <section> - cfe / - cmakelists . txt for the repo - fsw / - cmakelists . txt for the fsw - sbr / - cmakelists . txt for sbr ( and so on for cmake files ) - msg / - core / - es / - . <repeated> - public_inc / - unit - test / - stubs / - coverage / - functional / - eds / - docs / - . <repeated> and so on <section> <url> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ping <user> <allcaps> edit </allcaps> - updated for gerardo comment",2
"compiler warning when using optimized / release build <section> a compiler warning pops up when enabling full optimizations : <code> <section> build with <code> using a recent <allcaps> gcc </allcaps> ( e . g . v9 . <number> + ) such as the one with ubuntu <number> <section> should build cleanly <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",2
"update startup script names to match sample_app and sample_lib <section> pr ' s nasa / sample_app # <number> and nasa / sample_lib # <number> update the function names to use a consistent prefix - <code> and <code> , respectively . the example startup script needs to change accordingly . <section> update entry point names . <section> this is needed at the same time if / when the other two prs are merged . <section> joseph hickey , vantage systems , inc .",2
"cfe_es_cdsregdumprec_t has implicit padding <section> related to # <number> - implicit padding should be avoided <section> eventually pack definitions will come from a common definition , with explicit padding <section> none <section> observed in testing bootes <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <user>",2
"avoid <allcaps> osal </allcaps> ids in messages / data files <section> <allcaps> osal </allcaps> runtime types are not really defined as part of the external ( i . e . mission - scope ) interface . the <code> is one such example - it is a local runtime type , not really intended to be saved in data files or command / telemetry messages . this might seem pedantic because it is simply a <code> , but when using <allcaps> cfe </allcaps> with a command / data dictionary tool this becomes apparent that the <allcaps> osal </allcaps> types used in telemetry and data files are not part of the data dictionary . ( <allcaps> osal </allcaps> itself does not have a cmd / tlm interface so it naturally would not provide any such entity ) . <section> use the <code> instead . call <code> when writing and <code> when reading , to do the type conversion . the underlying value is compatible ( i . e . both <number> bit <code> , same numbers ) so it should be transparent to external tools . <section> have <allcaps> osal </allcaps> provide a stablized <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> definition of ids ? ( but <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> interface is not really part of <allcaps> osal </allcaps> ' s role - it is a runtime library ) <section> joseph hickey , vantage systems , inc .",0
"remove cfe_sb_sendprevsubs in favor of cfe_sbr_foreachrouteid <allcaps> api </allcaps> <section> cfe_sb_sendprevsubs holds locks that are not that useful , sufficient logic required , creates bus traffic , etc . <section> <allcaps> sbn </allcaps> could just use cfe_sbr_foreachrouteid , not really a true "" public "" <allcaps> api </allcaps> . <repeated> but seems like fair use in this case . would be outside of sb lock , but likely ok based on design ( enables subscription reporting first , then check all previous subs ) . <section> at least remove all the locking / unlocking . it does not help . <section> related to # <number> work . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ping <user>",2
update documentation for message map hash implementation <section> see <url> <code> <section> add this info and general design to documentation <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"potential for missed log messages between dump + clear commands <section> this issue was initially described in # <number> but isolated to a separate ticket for discussion / triage . the es syslog "" dump "" and "" clear "" are separate commands , so there is a window of opportunity between these actions where messages can be lost - as it is not possible to guarantee that no additional messages were written during this time . <section> <number> . log messages are written <number> . dump command issued <number> . more log messages are written <number> . clear command issued . logs written in ( <number> ) above are lost , as they are not in the dump file but they will be cleared by the clear command . <section> should have command structure which can ensure that no messages get lost . <section> joseph hickey , vantage systems , inc . , generalized from comment at <url>",0
"syslog support for incremental reads the concept is to use logs for forensic analysis , so yes as debug , but not as an exception more as always there . problem is , by the time you know you want a log it will be gone if you don ’ t get it to a persistent , accessible storage place . algorithm i ’ m trying to support is : on timer : - extract un - read logs - if enough logs have been extracted , package and send the current <allcaps> api </allcaps> supports reading all the logs in the buffer at once and then clearing the logs ( with the race condition that any logs that occur during the reading out will be lost , or need to lock out all loggers during the read which is not acceptable ) . the proposed update to the <allcaps> api </allcaps> is the addition of a single function that instead of setting the buffer size based of endidx , sets the buffer size based on the difference between the buffer - > lastoffset passed in and the writeidx . this is a traditional circular buffer interface and is well supported within the code as it stands , just needs an <allcaps> api </allcaps> to initialize the buffer correctly . advantages are : - traditional circular buffer interface so supports a well established model - allows readings of logs without loss of logs or undesirable locking - no impact to current code , so introduces no risk to current systems",2
"ut checking calls to os_printf <section> many unit tests are checking the calls to <code> . but typically all syslog / printf type messages are not fulfilling any sort of requirements , they are just informational in nature . so <allcaps> afaik </allcaps> there is not really a strong justification to specifically check for certain syslog messages , but the fact that the ut does check for these means that any time the syslog messages are changed or refactored in any way , one gets a bunch of nuisance ut failures . as a result we spend a lot of time fixing ut tests for things that are not really relevant to the operation of the code . <section> at least remove checks for number of times <code> was called in a given path . this is really quite irrelevant to pass / fail . the <code> tests might be ok to keep , but an actual return code should be preferred . if there is no return code then this is probably ok - its also less volatile because it just checks format string and confirms that a specific path was taken . <section> joseph hickey , vantage systems , inc .",0
"<allcaps> evs </allcaps> coverage test fails when cfe_platform_evs_default_type_flag is set to 0 xf <section> when cfe_platform_evs_default_type_flag is set to 0 xf there are two failures : <code> <section> steps to reproduce the behavior : <number> . set cfe_platform_evs_default_type_flag to 0 xf <number> . build unit tests , run cfe - core_evs_ut , observe failure <section> test should pass with debug events enabled ( should not care ) . <section> <url> <section> - hardware : cfs dev server - os : ubuntu <number> - versions : <number> . <number> - rc1 + dev129 <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
convert software bus destination linked list to circular <section> linear linked list requires more logic at insertion / removal <section> convert to circular <section> none <section> <url> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ( spawned from discussion on # <number> ),2
"race condition in control requests <section> due to the order of operations in clean up , the es global lock is given up and then re - acquired : <url> the problem is that this provides a window of opportunity for the underlying state to change externally while the global data is unlocked . <section> this can happen , for instance , if the task that is being cleaned up calls <code> while this state machine is also cleaning up the app . this actually does happen because <code> will return false if there is an exit request pending . it is just masked by the fact that most apps are pending in a message receive queue , so they do not self exit - they are deleted by es instead . i was able to get <allcaps> cfe </allcaps> to segfault / crash by allowing sample_app to exit itself at the very same time that this state machine was also cleaning it up . <section> no crashes , proper clean up . <section> ubuntu <number> <section> due to the ~ <number> second exit / cleanup delay it is unlikely to occur "" in the wild "" but it can easily be forced to happen . in my test i just used a slightly modified <code> that does not pend forever on <code> , and also delays itself such that it self - exits at the exact same time that the es background job is running , which reliably segfaults every time . <section> joseph hickey , vantage systems , inc .",0
"use memchr ( ) for string length checks <section> string length verification checks are generally done via the <code> c library <allcaps> api </allcaps> . the potential issue here is that <code> requires / assumes a termination byte to be present . if the user mistakenly passes an unterminated string , the implementation will search sequentially in memory beyond the string ( i . e . forever ) until it either encounters a <allcaps> nul </allcaps> char somewhere in memory , or segfaults , whatever comes first . <section> use <code> for string length check instead , which can specifically check for a <allcaps> nul </allcaps> char within a certain length . for instance , instead of : <code> use : <code> this has the advantage that it will _not_ search beyond the specified <code> , so its a bit safer . it ' s also a more direct check - the code generally does not care what the actual string length is , it just needs to know if its within max_length or not . <section> leave as is . <section> this is a minor thing , but would improve robustness a bit . <section> joseph hickey , vantage systems , inc .",2
"eliminating recursive locks in sb could allow for using more efficient resource <section> recursive locks possible in the following code ( may also be in other locations ) : <url> <url> <url> <url> related - the locking in the sendprevsubs command handling does not look like it really helps since it has to unlock to send the message ( same issues as the commands to record route / map info to file ) , typical use case is to enable subscription reporting , then send all previous subscriptions so may make sense to refactor ( and possibly throttle ) . <section> clear filters on the debug messages and trigger ( i stopped sample_app to cause the pipe deletion ) , or just subscribe and unsubscribe twice to trigger cfe_sb_unsub_no_subs_eid . <section> avoiding recursive lock could allow for using a more efficient resource on platforms where it ' s supported . <section> see above . <section> from code analysis , tested on ubuntu <number> . <section> from analysis during # <number> and # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_platform_es_perf_max_ids not fully deprecated <section> cfe_platform_es_perf_max_ids was superseded by cfe_mission_es_perf_max_ids as noted in this comment : <url> however , sample cpu1_platform_cfg . h still contains the definition for cfe_platform_es_perf_max_ids is still referenced in es_ut . c and comments in cfe_es_events . h and sample_perfids . h <section> n / a <section> either cfe_platform_es_perf_max_ids should be totally deprecated and all references should be replaced by cfe_mission_es_perf_max_ids or ( if deemed necessary ) support for platform - specific max values should be re - added in the perf - log implementation . <section> cfe / cmake / sample_defs / cpu1_platform_cfg . h : <number> cfe / fsw / cfe - core / src / inc / cfe_es_events . h : <number> cfe / fsw / cfe - core / unit - test / es_ut . c : <number> <section> n / a <section> n / a <section> pj chapates gateway vehicle system manager <allcaps> fsw </allcaps> production , <allcaps> jsc </allcaps>",0
"requirement ces1008 failure <section> requirement ces1008 specifies : upon receipt of a command the cfe shall reload the command specified cfe application from the command specified cfe application file . this is not consistent with how the <allcaps> fsw </allcaps> works . if a reload command is received , the <allcaps> fsw </allcaps> will restart the application with the previously loaded version as long as the command specified cfe application file exists . the same result is seen if an app is started / stopped - then loaded / started with a new version . the system / event log entries will indicate that the loading / starting of the new version of the app is successful . <repeated> however the original version of the app will be the one that will actually be executed . <section> steps to reproduce the behavior : <number> . start an app <number> . send the reload command with a filename that contains a different version of the app ( app name must remain constant ) <number> . verify that the original version of the app was actually the one started . alternatively : <number> . start an app <number> . stop the app <number> . start a different version of the same app ( app name must remain constant ) <number> . verify that the original version of the app was actually the one started . <section> able to restart a task of the the same name . <section> if applicable , add references to the software . <section> os : ubuntu - <number> versions : cfe : v6 . <number> + dev295 ; osal : v5 . <number> + dev247 ; psp : v1 . <number> . <number> <section> dan knutsen",0
"provide consistent name lookup <allcaps> api </allcaps> <section> many <allcaps> cfe </allcaps> resources have a name associated with them , but <allcaps> cfe </allcaps> is rather hit or miss on how resource ids ( apps , tasks , libs , etc ) can be looked up by name . for instance , <code> exists , but <code> does not . task ids can be found directly via <allcaps> osal </allcaps> through <code> but there is no <allcaps> cfe </allcaps> version of this despite the fact that es also tracks tasks . <section> for resource types that have names associated , there should be a consistent <allcaps> api </allcaps> to find the id by name , similar to <code> . the following should be implemented , all with the general <allcaps> api </allcaps> pattern ( name in , id out , status return ) : cfe_es_gettaskidbyname ( ) cfe_es_getlibidbyname ( ) cfe_es_getgencounteridbyname ( ) cfe_es_getcdsblockidbyname ( ) <section> keep things inconsistent . <section> this is also a prerequisite to # <number> - to have libs be manageable similarly to apps , part of that is being able to find lib id by name , which is required by several management / query commands . <section> joseph hickey , vantage systems , inc . edit - turns out and <code> does exist already . but the others do not .",2
"ctbl6000 . <number> requirement failure - no partial table load field in header current requirement verbiage : if the command specified file ' s header indicates that the file contains only a portion of the table , the cfe shall first load an inactive table image with the contents of the active table image and then load the contents of the command specified file . there is no field in the header that specifies if a table is a partial load . the software detects the partial load and handles it appropriately . <section> we should update the verbiage or consider combining with cfe - <number> ( ctbl6000 . <number> ) . <section> dan knutsen <allcaps> nasa </allcaps> / goddard",1
"add system - specific module and library suffixes to configdata struct <section> there are a number of use cases where the <allcaps> fsw </allcaps> could be improved if it knows the proper system - specific extension to use for modules and executable files . see existing issues # <number> and nasa / <allcaps> psp </allcaps> # <number> <section> should add this information to the <code> structure , to make it available for <allcaps> psp </allcaps> / <allcaps> cfe </allcaps> purposes . <section> could also be provided in the <code> structure that resides in the <allcaps> psp </allcaps> library , but this would require explicitly setting in each <allcaps> psp </allcaps> . because cmake already knows this information and its readily available in cmake variables , its simpler and probably more reliable to just put it in the top level config struct based on the cmake value . <section> joseph hickey , vantage systems , inc . , ( based off previous requests in other tickets )",2
doxygen description of stub for cfe_sb_sendmsg is not correct <section> description on the stub for cfe_sb_sendmsg is out of date . <section> update description <section> <url> <section> alan gibson <allcaps> nasa gsfc </allcaps> / <number>,1
"remove "" senderreporting "" from sb private "" global "" the senderreporting field exists in the sb global struct but is only set once and never used . <url>",2
"unit tests should use cfe defines instead of os_max_path_len and os_max_api_name <section> scrub unit tests for os size use vs cfe size , related to # <number> , # <number> . anything in io structures should be using cfe sizes ( cfe size is maximum of all platform os maximums ) . <section> os_max_api_name - > cfe_mission_max_api_len os_max_path_length - > cfe_mission_max_path_len in the code use sizeof instead of hard coded sizes . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ( spawned from <date> <allcaps> ccb </allcaps> discussion )",0
"add search option for relating message id to route <section> core implementation is message id = = message key , leading to a large , sparse message table to get the route index . <section> eliminate message table . order routing table by id and binary search , or other search options ( optimal solution may depend on configured sizes such as number of supported message ids and number of supported routes ) . <section> see also # <number> , hash . <section> allowed by # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add message id to message key hash option <section> core implementation is message id = = message key , leading to a large , sparse message table to get the route index . <section> hash message and deconflict on lookup ( confirm route matches msgid ) . could decrease message table size to a small multiple ( <number> or <number> maybe ) of the routing table size depending on how many conflicts are acceptable . <section> ordering the routing table and implement binary search and completely eliminate message table . <section> see # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"move sb route lookup ( including insert method ) to a module <section> various implementations possible for message and route tables , all with associated advantages and issues . <section> provide the capability to replace the core implementation . <section> none . <section> for implementations that support large msgids , or prefer smaller memory footprint at the cost of performance . hashes , searches , etc . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ( per stakeholder request for alternate implementation )",2
"stub for cfe_es_runloop default return is false , should it be ? <section> cfe_es_runloop uses ut_default_impl which typically returns cfe_success , which happens to also equal <number> . cfe_es_runloop returns ut_default_impl ! = <number> , which causes the default return to be false ( <number> ! = <number> ) . is that the desired default behavior ? <section> steps to reproduce the behavior : <number> . write a unit test that expects cfe_es_runloop to succeed by default . <number> . run test , see that is not the behavior . <section> i had expected ' true ' to be the default . <section> <url> to run a single loop for a unit test , this is required : <code> <code> the main reason this requirement does not make sense is ut_setforcefail makes one think it should fail , not succeed . <section> <allcaps> rhel </allcaps> <number> <section> if this is the desired behavior , close and disregard this issue . <section> alan gibson <allcaps> nasa gsfc </allcaps> / <number>",3
"add support for "" critical "" subscriptions ( message must be sent or will return error ) <section> software bus currently returns success even if a message is not sent to the subscribers ( queue full or over message limit ) . this causes the message to be dropped with no notification for the sender . this spawned from the cf use case where notification is required to be able to eliminate the semaphore that is currently used for flow control . <section> add support for a subscription to be "" critical "" . on send , check that all critical destinations have room for the message , if not do not send to any destinations and return an error . if every critical destination has room , send to all destinations . all done within the sb lock . for the cf use case , typically the receiver would dedicate a pipe with just that subscription and the individual msg limit check is sufficient ( as long as it ' s smaller than or equal to the queue limit ) . may make sense to transition <allcaps> qos </allcaps> to a bitfield ( currently an enum ) , supporting the subscription critical option . <section> see # <number> , # <number> <section> discussed that cf should cap work per cycle ( avoid free - run if unsubscribed , or no subscribers ) . also generate the message once , and retain to send next cycle if there is no room . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ( spawned from splinter on # <number> )",2
"improve uniqueness in resource ids <section> in the event that a resource "" a "" such as an app / counter / pool etc is created , then deleted , then another resource "" b "" is created , the code will re - issue the same resource id for "" b "" as was used for "" a "" . this means if a stale reference to "" a "" is stored somewhere , it silently now becomes an alias to "" b"". all validation / checks will pass . <section> should not immediately recycle id values . <section> this is the way <allcaps> osal </allcaps> already works , and is enabled by using abstract ids . with the recently introduced resource id abstractions , it is no longer necessary to limit to the respective table size ( s ) , because ids are not directly used as table indices anymore . this means that a much larger set of potential id values is available , and thus means that ids of old / deleted objects can be different than the new objects while keeping table size the same . <section> joseph hickey , vantage systems , inc .",2
"repetitive appid lookups in cfe_sb_sendmsgfull <section> sb has some code to filter an app ' s own messages via <code> . this gets the appid and compares to the appid of the pipe creator , and skips the destination if its a match : <url> the problem is that this is "" inside the loop "" of all destinations in the routing entry . so it will ( potentially ) call <code> multiple times . this also creates a double locking situation , because the sb lock is being held at the time this executes , and the es lock needs to be acquired by <code> <section> code should query the caller appid early , before taking the sb lock . <section> the code works but is inefficient , and double locking is a potential deadlock . <section> joseph hickey , vantage systems , inc .",0
update cfe_error . h to use the cfe_status_t type <section> as a followon to # <number> all of the const defines currently cast to <code> and they should be <code> . <section> <email>,2
"update cfe source and unit tests to use cfe_status_t <section> as a followon to # <number> , we should update all of the cfe source to use the cfe_status_t return status type instead of int32 . <section> may want to do this in phases , per component ; or incorporate into a clang - format code cleanup change set . <section> <email>",2
"cfe req . ces1007 . <number> : restart application - reject on missing file <section> cfe requirement ces1007 . <number> specifies that a user can not restart an application if the original file has been removed . if the user attempts to restart an application following removal of file , the cfe shall reject the command , increment the invalid command counter , and generate an event message . this is not what happens when the restart application command is received . if a user has deleted the cfe application file and then sends the restart application command . the application successfully restarts . <section> steps to reproduce the behavior : delete an applications shared library file from the / cf / location . send the associated restart application command . <section> oracle vm virtualbox os : ubuntu - <number> versions : cfe v6 . <number> - rc1 + dev28 , osal v5 . <number> - rc1 + dev12 , psp v1 . <number> + dev76 <section> dan knutsen <allcaps> nasa </allcaps> / goddard",0
"add support for <allcaps> rtems </allcaps> <number> - sample_defs toolchain file updates <section> the cfs bundle currently supports <allcaps> rtems </allcaps> <number> . now that <allcaps> rtems </allcaps> <number> has been released , i would like to update the necessary components to support <allcaps> rtems </allcaps> <number> on the pc - rtems platform . this involves minor modifications to the cfe repository , the <allcaps> psp </allcaps> repository , and the <allcaps> osal </allcaps> repository . these changes can be done in such a way that preserves the current <allcaps> rtems </allcaps> <number> support and adds <allcaps> rtems </allcaps> <number> support . <section> for the cfe repository , the only changes needed are to the sample_defs toolchain files . i need to make a small modification to the <number> <allcaps> rtems </allcaps> toolchain file , and add a new toolchain file for <allcaps> rtems </allcaps> <number> . <section> alternatives include : - not supporting newer versions of <allcaps> rtems </allcaps> , but several projects will depend on <allcaps> rtems </allcaps> <number> support . - dropping <allcaps> rtems </allcaps> <number> support and just making the changes needed for <allcaps> rtems </allcaps> <number> , but there may be projects that depend on <allcaps> rtems </allcaps> <number> . we can consider dropping <allcaps> rtems </allcaps> <number> support on a future release . <section> <section> alan cudmore / <allcaps> nasa gsfc </allcaps> code <number>",2
"provide separate type for each resource category <section> pull # <number> provided a generic typedef for resource identifiers . this commit stops using <code> and makes a dedicated type , but the type is the same for all resource categories ( apps , tasks , counters , etc ) . <section> per <user> comment here : <url> it would improve things further to provide a separate / unique typedef for each resource category . <section> this will be implemented as a follow - on to the original change . <section> joseph hickey , vantage systems , inc .",2
cast - align warning in sb_ut . c <section> <code> <section> resolve warnings <section> none <section> ubuntu <number> w / cast - align = strict <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"move typedefs used in cmd / tlm to the * _msg . h file <section> cfe_es_appinfo_t and cfe_es_memhandle_t are defined in cfe_es . h , but used in telemetry ( cfe_es_msg . h ) . all the typedefs used in telemetry should be defined in the * _msg . h file . <section> move cfe_es_appinfo_t and cfe_es_memhandle_t into cfe_es_msg . h note cfe_es_taskinfo_t is not used in cmd / tlm . <section> none <section> related to # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> cfe time </allcaps> should initialize the <allcaps> stcf </allcaps> from <allcaps> psp </allcaps> <section> the <allcaps> cfe time </allcaps> subsystem initializes its state using fixed values from <code> and <code> . as a result , all timestamps initially come out as <code> and increment from there . <section> it should get these initial values from the <allcaps> psp </allcaps> instead . this way on platforms that actually have an <allcaps> rtc </allcaps> , it can get the correct value . this would be a big improvement particularly when debugging on a pc / vm because timestamps could be the actual time , not <number> . <section> leave as is . <section> not a high priority , but this is often confusing , particularly to new users and / or test environments that do not have a <allcaps> cfe </allcaps> time server sending time at tone messages . <section> joseph hickey , vantage systems , inc .",2
"cmake build not correctly using the "" ${ <allcaps> cpuname </allcaps> } _system "" directive <section> with the current main branch even if the <code> variable is correctly set , it is being ignored . <code> works fine though . <section> run <code> without <code> and a targets . cmake file with <code> set to something non - empty . unexpected error is generated : cmake error at cmake / mission_build . cmake : <number> ( message ) : unable to find toolchain file for default <section> should generate build tree and build successfully . <section> <allcaps> gsfc </allcaps> mcp750 test build <section> joseph hickey , vantage systems , inc .",0
"documentation in targets . cmake does not match current implementation <section> <url> <url> cpu number is now assigned differently , name is assigned differently , etc . <repeated> <section> update documentation to be consistent <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"update cfe_sb_getuserdata unit test to catch padding differences between header / payload <section> cfe_sb_getuserdata returns the location right after the header , which is not always the start of the payload if padding gets inserted . <section> add generic packets with all width types , and ensure the correct location is returned . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , replace ut_text with utprintf <section> fix # <number> - replaces ut_text with utprintf and eliminates ut_verbose ifdef ( run time reporting control provided by ut_assert ) <section> built and ran unit tests , passed . spot checked reports and it looked good ( sb_ut , tbl_ut ) <section> minor text changes in report , but now can be controlled by run time test verbosity levels . also reports actual test line number and file ( instead of utility function info ) . <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"ut_checkforopensockets prototype duplicated <section> prototype defined in both cfe and <allcaps> osal </allcaps> . <url> <url> implemented here : <url> also violation of magic number use in the implementation , and does not seem to actually do what it says ( i do not see the close ) . <section> maybe remove if not useful ? if not , at least use the correctly scoped prototype and remove the second definition . <section> none . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"replace ut_text with utdebug and utprintf , remove ut_verbose ifdefs <section> compile time defines used for controlling reporting levels , also needless redefine ut_assert functions defeats the reporting of function and line number <section> ut_assert provides for run - time reporting levels , use them instead of compile time defines . this will also then cause the line number and file to be useful . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> evs </allcaps> improperly uses the eventcount member for incorrect appid filtering <section> the <code> member of the <allcaps> evs </allcaps> internal app data is intended to track the number of events sent by a particular app . <allcaps> but </allcaps> - it is also overloaded to track if the event came from the wrong app , here : <url> the problem is that this is , by definition , invoked when the calling appid is _wrong_ ( not registered ) , but it is changing a field that is also potentially used for _valid_ ( registered ) appids . <section> this can theoretically occur if an app calls <code> using an old appid value , for instance if an app was restarted it gets unregistered , and then gets a different appid but refs to the old value could still exist . the new appid does not necessarily have the same slot in the table - in fact it should not . the old table entry might refer to a totally different app . so if this happens it will corrupt / change the <code> member on an unrelated app data entry . this can be seen in the <allcaps> evs </allcaps> telemetry , where if the "" unregistered "" event occurs it inadvertently creates a nonzero <code> in the <allcaps> tlm </allcaps> data on an unrelated app that happens to share that slot in the table . also , if the counter was already nonzero because the table entry is in use by another ( registered ) app then this prevents the notification about the unregistered app from appearing at all . <section> should not overload the eventcounter to track a basically unrelated item - which is whether or not an "" unregistered "" event occurred on a different app that happened to map to the same entry . simple fix would be to just introduce a separate field to track this . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",0
"add typedef and nonzero base for resource identifiers <section> app ids , task ids , library ids , and other resources are all represented by a basic <code> identifier , which starts at <number> . <section> there should be a separate <code> for these identifiers , and <number> should be reserved as an "" undefined "" value ( like <allcaps> osal </allcaps> ) such that : - control structures and globals which are <code> to zero will not alias valid entries if they contain ids . - alleviates the need for a separate <code> boolean - <number> can indicate an unused entry , nonzero indicates a used entry this makes everything consistent as well as being simpler and safer . <section> type should initially be a <code> which makes this backward compatible for apps . after this change ids can no longer be directly used as array indices . this has already been removed / fixed in <allcaps> cfe </allcaps> itself in previous prs . <section> joseph hickey , vantage systems , inc .",2
"replace calls os_open and os_create with os_opencreate <section> for nasa / osal # <number> the <code> and <code> <allcaps> api </allcaps> calls will be deprecated , because they do not follow the correct pattern of returning an <allcaps> osal id </allcaps> via an output variable , instead returning the id via the <code> return code . <section> use the newly exposed <allcaps> osal api </allcaps> <code> which can replace both <code> and <code> via different flags , and outputs the id as all other <allcaps> osal </allcaps> functions do . <section> prerequisite to being able to deprecate these apis that do not follow the <allcaps> osal </allcaps> pattern . <section> joseph hickey , vantage systems , inc .",2
"unable to set return code of cfe_es_calculatecrc using ut_setdeferredretcode <section> the cfe_es_calculatecrc stub always return the value of <number> regardless of what deferred return code i set it to . <section> steps to reproduce the behavior : <number> . create a functionx that calls cfe_es_calculatecrc <number> . write a unit test for the functionx <number> . in ut_functionx , set the return code of cfe_es_calculatecrc as below <code> <number> . run the unit test <section> i expect the return value of cfe_es_calculatecrc to be <number> as i set it to . <section> however , the return value of cfe_es_calculatecrc will be <number> instead of <number> . <section> n / a <section> - hardware - os : centos7 - versions : cfs development build : <number> . <number> - rc1 + dev28 <section> n / a <section> n / a",2
"typedef for status return values <section> currently most <allcaps> cfe api </allcaps> ' s return a status code ( the return type defines as int32 . ) the numeric return type is somewhat unclear and could result in confusion with other types of information ( such as inadvertent confusion with return values from <allcaps> osal </allcaps> functions or numeric id ' s ) . <section> <code> in order to facilitate better coding practices , i also propose a utility function : <code> <section> this will require quite a lot of code change but could be migrated incrementally as creating the typedef to the same type will be compatible . eventually it could be changed to a struct wrapper or enum or something that will result in compiler errors when the type is considered a numeric type . <section> <email>",2
"fix # <number> , library table id management <section> apply the appid / taskid / counterid pattern to library resources . <section> build and sanity check <allcaps> cfe </allcaps> , ensure library is loaded correctly run all unit tests <section> no impact to behavior . internal change only . <section> ubuntu <number> <section> implement the same pattern on library ids which was previously implemented for apps , tasks , and counters . for unit testing this also moves the library - specific ut calls into a separate function . <section> joseph hickey , vantage systems , inc .",2
"update library code to decouple ids from table indices <section> library ids are currently coupled to the library table index . <section> library ids should be opaque values and not interpreted directly as a table index . apply the same pattern as in previous prs # <number> and # <number> to the library code . <section> part of ongoing effort to clean up ids across all of es . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , remove old name and id defines <section> fix # <number> , remove old name and id defines cfe_platform_cpu_id , cfe_platform_cpu_name , and cfe_mission_spacecraft_id use cfe_psp_getprocessorid ( ) , cfe_psp_getprocessorname ( ) , cfe_psp_getspacecraftid ( ) going forward . <section> built with unit tests , passed . also nominal core - cfe run . <section> none <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , install unit test to target directory <section> fix # <number> , install unit test to target directory <section> make unit tests , install , observe they install in correct directory <section> correct install directory <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> none . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , returned processor id to default to unbreak toolchain <section> fix # <number> ci port selection depends on processor id , # <number> changed the default which broke toolchain . <section> built , ran , confirmed ci is back to listening on default port . <section> defaults work again in the toolchain <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this change . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"default linux port got changed again . <repeated> <section> processor id was set to <number> , ci uses it to deconflict ports . broke toolchain . <section> normal run , reports ci is listening on <number> ( should be <number> ) <section> use historical port by default . <section> <url> <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main <section> broke in # <number> . really should fix nasa / cfs # <number> ( positive check in ci of proper execution and exit ) , and this would have been caught . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
unit tests no longer installing correctly <section> some unit tests show up in build directory after install <code> <section> make <allcaps> simulation </allcaps> = native enable_unit_tests = true prep make make install <section> they should all show up in build / exe / cpu1 ( for default config ) <section> no idea <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"fix # <number> , remove dependency on <allcaps> ccsds </allcaps> version define <section> fix # <number> - removes message_format_is_ccsds_ver2 and all references - now replaced by mission_msgid_v2 and mission_include_ccsds_header cmake variables - base mids localized to cpu1_msgids . h and improved documentation indicating example nature of implementation , note issue # <number> may make this obsolete - updated cfe_sb . dox for message module concept - msgid base type now always uint32 ( reduces logic differences ) - removed system log report of version used , in build and obvious from packet sizes - cleaned extra documentation from cfe_sb_msg_id_util . c - removed verification limits on cfe_platform_sb_max_msg_ids - removed ut_getactualpktlenfield and ut_getactualcmdcodefield that depended on the define , should not directly access message in a unit test since it ' s implementation dependent - default <allcaps> ccsds </allcaps> version default now always <number> ( per the standard ) but mission configurable <section> build unit tests , passed except for sample app . build usersguide and confirmed no errors or warnings . <section> none , just no longer requires additional configuration flag <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"document msg module customization method <section> no documentation on how to customize message module <section> add documentation - overview , suggestions , etc include cmake steps to replace : <code> note this is a "" power user "" option and not generally recommended unless absolutely required by the mission . <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"document mission_msgid_v2 and mission_include_ccsdsext_header cmake options <section> missing documentation for mission_msgid_v2 and mission_include_ccsdsext_header note not widely used . <repeated> <section> document as example in cmake file ( likely targets . cmake ) mission_include_ccsdsext_header - set to source select to include <allcaps> ccsds </allcaps> extended header ( cfs defined "" standard "" ) mission_msgid_v2 - set to source select version <number> message id implementation , depends on above being set <section> remove support for these in the framework . <repeated> the extended header is not standardized , custom headers can be implemented to support the few cases where the default is not sufficient ( and power users may end up defining their own header anyways ) . the framework does not really work with these settings without additional modification ( apps have v1 mids ) , etc . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"cfe_mission_rev defined in <number> locations <section> cfe_mission_reve defined in <number> locations <section> inspection <section> define in <number> location . <repeated> if it ' s for clone and own , version seems to make sense . <repeated> if it includes configuration versioning then useful in the config file . <section> <url> <url> <section> n / a <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"add function name and line number to cfe_evs_sendevent stub the <code> function , post # <number> will generate debug messages . this ticket proposes wrapping the function in a macro that adds the <code> and <code> to the output . see <url> <section> full name and company / organization if applicable",2
"add unsubscribe test case to cover # <number> <section> # <number> looks like it could have resulted in a seg fault , fixed in # <number> unsubscribe after no subscriptions are left . <repeated> <section> add test case . <section> none . should add test to confirm code works . <section> # <number> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <user>",2
"fix # <number> , deconflict cfe_es_lib_already_loaded and cfe_es_err_sys_log_truncated <section> fix # <number> - deconflict cfe_es_lib_already_loaded and cfe_es_err_sys_log_truncated eids <section> built and ran unit tests ( checks both those returns ) , passed . <section> eids no longer overloaded . <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , generic counter table management <section> apply the appid / taskid pattern to generic counter resources . <section> unit tests build and sanity test <allcaps> cfe </allcaps> . <section> no real logic change - just putting the repeated logic into inline functions . however , this does add a <code> wrapper around counter id allocation , deletion , and lookup to avoid a possible race condition here . this was likely a bug , but never noticed perhaps because these are not a heavily used feature . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",2
"create accessor functions for counter resources <section> the generic counter <allcaps> api </allcaps> uses a zero based id to directly index an array <section> make the "" generic counter "" <allcaps> api </allcaps> follow the same pattern as was done for apps and tasks in # <number> <section> this is for consistency and future development . all resource management should follow this pattern . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , add debug message from sendevents <section> fix # <number> - added debug message <section> built and ran test ( used to debug failure in <url> <section> now prints <allcaps> eid </allcaps> and spec when stub apis are called in debug mode . <section> - hardware : cfs dev server - os : ubuntu <number> - versions : main bundle + this commit <section> none . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
add debug messages from cfe_evs_sendevent stubs <section> requires code changes to debug event messages <section> print a debug message to make event message debugging easier ( just pass in <code> and review messages sent ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"if a message is subscribed , then unsubscribed , additional unsubscribes do not raise error events <section> if a message is subscribed , then unsubscribed , additional unsubscribes do not raise error events <section> have sb subscribe to a message have sb unsubscribe to that message have sb unsubscribe again to that message <section> event message should be raised <section> <url> if a message was previously subscribed to , and all pipes subscribing to it were subsequently unsubscribed , and an additional unsubscribe is issued , a valid routing index would still exist in the msgmap table , and thus an error event would not be raised . <section> n / a , discovered via code inspection <section> n / a <section> john n pham , northrop grumman",0
"scrub <allcaps> cfe </allcaps> to use correct type for <allcaps> osal </allcaps> ids <section> nasa / osal # <number> introduces a proper typedef for <allcaps> osal </allcaps> ids : <code> <section> the <allcaps> cfe </allcaps> needs to be scrubbed to use this typedef whenever storing an <allcaps> osal id </allcaps> , rather than <code> <section> keep using <code> as - is , but that defeats the purpose of having a typedef . <section> joseph hickey , vantage systems , inc .",2
"have "" make test "" provide full stats on the pass / fail ratio of the asserts <section> when running <code> it only gives information about which testrunner had at least <number> failing assert . this is useful , but very limited . <section> each test file run by <code> provide a "" fail asserts / total asserts "" in the output . <section> running each testrunner individually to get these results . writing my own bash script . <section> could be added as an additional runner <code> ? <section> alan gibson <allcaps> nasa gsfc </allcaps> / <number>",2
"cast align issue in cfe_es_task . c - cfe_es_taskpipe <section> <code> <section> build on gcc <number> + with cast - align = strict <section> clean build <section> <url> <section> - hardware : arm64 - os : ubuntu <number> - versions bundle + mods to cast - align = strict <section> # <number> , # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , pass aligned message into cfe_msg_computechecksum <section> fix # <number> - fixes the cast - align error ( use the aligned msg since it ' s available already ) <section> standard build and unit test , passes <section> no more alignment error <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"rpi4 make process throws alignment error following the "" quick start "" section of the <allcaps> readme </allcaps> , generates an error and make failure : <code> at first i thought this was because i was running on the <number> - bit beta raspberry pi os , so i tried it on a different pi4 , this one running the stable <number> - bit distribution ( buster , latest release ( <number> / <number> ) , updated yesterday ( <number> / <number> ) ) . it fails on the <number> - bit version also .",2
"cfe_es_err_sys_log_truncated value is not unique <section> <code> and <code> are both defined to be <code> ( in <code> <url> . <section> n / a <section> i think <code> should instead be set to <code> or some other unique value that follows the status code format . <section> n / a <section> n / a <section> n / a <section> keegan moore , <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"consolidate bit manipulation ( and other general ) macros <section> various services define various bit manipulation or other general macros , repeated / inconsistent logic . bit manipulation : <url> <url> <url> os_printf : <url> <url> <section> better scoping , consolidation into general bit manipulation macro header <section> none . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
remove / replace / deprecate questionable macros in sb <section> <url> <section> consider replacing or removing ( deprecating ) . <section> none <section> trying to write specific tickets related to # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"fix # <number> , replace cfe_mission_spacecraft_id with cfe_psp_getspacecraftid ( ) <section> fix # <number> - replaced cfe_mission_spacecraft_id use with cfe_psp_getspacecraftid ( ) and updated unit test <section> built version <number> with unit tests , executed and passed <section> no longer uses soon to be deprecated cfe_mission_spacecraft_id <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle integration candidate + this change <section> depends on changes in integration candidate <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"document nested usage of ut_add_test and clarify nomenclature for individual versus groups of tests # # describe the problem the <code> call has some limitations as addressed in nasa / cfe # <number> . some solutions are discussed in that pr . # # proposed solutions <number> . have <code> handle "" nested "" unit tests , or <number> . develop a nomenclature for unit test functions that explicitly indicates whether there are nested unit tests and then rename unit tests accordingly , or <number> . document the anti - pattern , or <number> . split up all unit tests to ensure only one test per function and make this a design pattern . # # additional context _originally posted by <user> in <url> > related to nasa / osal # <number> . individual tests are added w / the ut_add_test call . some tests are grouped at a lower level ( test_msg_ccsdsext is a group of tests ) , and those functions are called directly . same pattern is used in <code> : > > <url>",1
"msg module unit tests add tests within tests , which do not get executed with the current osal / ut_assert <section> msg unit tests utilized a pattern where subtests were added within other tests . <section> build and run msg unit test , observe the subtests do not execute . <section> all tests should execute . <section> see pr . <section> - hardware : cfs dev server - os : ubuntu <number> - versions : integration candidate <section> n / a <section> jacob hageman",2
"replace msg module use of cfe_mission_spacecraft_id with cfe_psp_getspacecraftid ( ) <section> cfe_mission_spacecraft_id is pending deprecation , see # <number> <section> replace with cfe_psp_getspacecraftid ( ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"tables are not built for static apps <section> tables are not built for static apps , only dynamic apps . ( only for apps in <allcaps> tgt </allcaps> \<x \ > _applist , not for apps in <allcaps> tgt </allcaps> \<x \ > _static_applist ) <section> tables should be built for both types of apps <section> add_cfe_tables ( ) loops over app_install_list : cfs / cmake / arch_build . cmake / line : <number> : <code> but , process_arch ( ) does not populate app_install_list for static apps : cfs / cmake / arch_build . cmake / line : <number> : <code> only for dynamic apps : cfs / cmake / arch_build . cmake / line : <number> : <code> <section> - cfe <number> <section> david degroote flight software engineer <number> n . lincoln avenue pittsburgh , pa <number> <email>",0
"fix # <number> , return message address from cfe_sb_sendmsg stub <section> fix # <number> , cfe_sb_sendmsg stub now behaves the same as cfe_sb_timestampmsg ( copies message pointer from local ) fix # <number> , no longer need to emulate cfe_sb_initmsg from test code , set the <allcaps> api </allcaps> / stub data buffers directly . <section> built with tests , tests ran and passed . depends on update to unit test in sample_app , nasa / sample_app # <number> . <section> stub returns message address instead of copy of message . <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main ( + cfe / osal main ) + this commit . <section> nasa / sample_app # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> lgtm </allcaps> issue - integer comparison size mismatch <section> <code> in theory if evtstosend is > max uint16 this could infinite loop . pretty unlikely , but definitely should not be in flight code . <section> i should be sized appropriately <section> none <section> split off from # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"es reports version <number> . <number> in telemetry , even when it ' s built off a development branch <section> misidentifies version <section> look at version in es housekeeping packet . <section> system should report a consistent version number at startup , from noops , and in tlm . could go back to the old way where development versions all report a revision of <number> . <section> <url> <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle . <section> got out of sync with new versioning scheme <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , spacecraft id sample set to historical value ( 0x 4 2 ) <section> fix # <number> - set spacecraft id in sample targets . cmake to 0x 4 2 <section> nominal build and test <section> spacecraft id back to historical value ( some toolchains depend on it ) . verified at <allcaps> psp </allcaps> startup , reported as <number> ( 0x 4 2 ) . <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main ( w / cfe / osal main ) + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"spacecraft id sample setting in targets . cmake should be 0x 4 2 <section> historically sample spacecraft id has been 0x 4 2 , when converting to cmake it became <number> ( decimal ) . <repeated> this leads to errors in toolchains expecting the historical value . <section> change to 0x 4 2 <section> none <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"deprecate cfe_platform_cpu_id , cfe_platform_cpu_name , and cfe_mission_spacecraft_id <section> got bit by this again ( used cfe_mission_spacecraft_id when cfe_psp_getspacecraftid ( ) should have been used ) . they also currently return different numbers since the define has historically been 0x 4 2 , but the setting in targets . cmake is <number> ( decimal ) . related to # <number> <section> deprecate , actually suggest this error out at compile if defined since it leads to bugs ( mismatch of ids ) in favor of cfe_psp_getspacecraftid ( ) and cfe_psp_getprocessorid ( ) ( and eventually cfe_psp_getprocessorname ( ) , see nasa / <allcaps> psp </allcaps> # <number> ) <section> none . <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , remove iterator modification in loop <section> fix # <number> - removed iterator modification from within the loop . <repeated> replaced with break . <section> built and ran unit tests . <section> none <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle ( and cfe / osal main ) + this change <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
provide a unit test utility to create software bus messages <section> the sample_app example of how to create a software bus message for use by the test is to use the cfe_sb_initmsg stub . as described in <url> tests should not be using stubs directly for utility operations . <section> n / a <section> add a ut_assert utility function that provides this functionality <section> <url> <section> <allcaps> rhel </allcaps> <number> <section> relates to <url> and <url> <section> alan gibson <allcaps> nasa gsfc </allcaps> / <number>,2
"cfe_es_findcdsinregistry ( ) infinte loop if registry size is zero <section> the loop inside this function has a poorly - constructed condition for ending the loop . it is comparing a <code> type to an <code> type , and in the event that the <code> is zero , it becomes impossible for this condition to be true and the loop runs forever . <section> easy to see in unit test if one clears the <code> data structure between tests . <section> loops should never have ending conditions that are impossible to reach unless they are supposed to be infinite . in the event that <code> is <number> , it should exit immediately . <section> <url> it is generally a bad idea to do any sort of relational comparison ( greater than / less than ) between signed and unsigned types , c + + actually errors about this but c does not . <section> ubuntu <number> <section> this variable is initialized in <allcaps> fsw </allcaps> from the config <code> which does say that the value needs to be at least <number> . but during unit test the value can be zero . interestingly , <code> swaps the weirdly - structured do - while for a normal while loop , so it is ok however it still does a signed / unsigned compare which should be fixed . <section> joseph hickey , vantage systems . inc .",0
"loop counters should not be modified in the body of the loop . <section> counter variable , i , is modified inside the for loop , which may lead to an infinite loop . should use while loop instead . <section> root / cfe / fsw / cfe - core / src / tbl / cfe_tbl_task_cmds . c lines <number> - <number> <section> use while loop or add comments explaining the reasoning of using for loop for future developers ( must ensure loop issues will not occur such as the code looping infinitely ) . if using while loop , please provide maximum limit for counter . <section> <url> <section> <url> <section> references : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",2
"further break down message module to facilitate customization <section> currently customization of the monolithic message module can either be done by "" cherry - picking "" code from the core and customizing / adding / replacing whatever needs to be customized or "" clone - and - own "" the entire module . "" cherry - pick "" is fragile since it depends on the internal file layout and structure of the message module ( implementation ) , "" clone - and - own "" is a lot of duplicated code and the possibility of divergence from core development . it ' s a similar concept as for a custom <allcaps> osal </allcaps> depending on shared or portable elements in the repo , in that cherry - picking is dependent on implementation , not just apis and the alternative is clone - and - own . <section> break the message module down into the different parts of the header - <allcaps> ccsds </allcaps> primary , <allcaps> ccsds </allcaps> extended , <allcaps> cfs </allcaps> secondary such that they can be included by projects as building blocks , and the "" cherry - pick "" vs "" clone - and - own "" is then in the context of smaller modules . basically if a project wants to customize just the time format , they could either clone - and - own the <allcaps> cfs </allcaps> secondary implementation or cherry pick . the primary and extended headers could be used as is . <section> approach is a project trade , this change makes that decision a smaller impact ( less code either way ) . the code was separated parts of the header by file already as part of # <number> to make cherry - picking easier ( and secondary is separated by field in the header ) , but also makes breaking into separate modules easier . <section> # <number> , # <number> <url> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"create <allcaps> changelog </allcaps> . md and move development history out of readme . md <section> the development history is clogging up useful information in the readme <section> move history to a new file named <code> <section> move development history to bottom of readme file <section> none <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",1
"fix # <number> , add msg stubs and update <allcaps> sb ut </allcaps> <section> fix # <number> - add msg stubs , update <allcaps> sb ut </allcaps> to use them , and remove msg module include from unit tests <section> standard build with unit tests enabled , passed . <section> uts will now use msg stubs . <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle + # <number> + this change <section> depends on # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"why does cfe_sb_sendmsg stub not save the passed in msgptr like cfe_sb_timestampmsg stub does ? <section> cfe_sb_sendmsg copies from local the contents of the passed in message pointer , but cfe_sb_timestampmsg copies from local the value of msgptr . <section> steps to reproduce the behavior : <number> . <url> <number> . compare with <url> <section> default cfe_sb_sendmsg stub behavior should be like cfe_sb_timestampmsg . a hook should be required to provide extra behavior . <section> see above . <section> <allcaps> rhel </allcaps> <number> <section> n / a <section> alan gibson <allcaps> nasa gsfc </allcaps> / <number>",3
"remove <allcaps> cfe </allcaps> deprecated code for next release <section> now that the "" <number> . x "" release branch has been created , the next release should remove all code / functions that are currently marked as deprecated . <section> removal of all code currently contained within an <code> conditional compile switch . <section> the removal only applies to "" main "" branch - not the <number> . x release branch , where it will continue to exist for that release series . this assumes the next release ( main ) will become version <number> . there are other changes currently in development which do break some deprecated items - hence why i ' d like to remove this sooner rather than later , as it saves the work of updating / fixing this old code if the intent is to remove it anyway . <section> joseph hickey , vantage systems , inc .",2
add functional tests for cfe miscellaneous apis <section> need open source functional tests for certifiability <section> add functional tests for cfe miscellaneous apis – cfe_es_calculatecrc - calculate a <allcaps> crc </allcaps> on a block of memory . – cfe_es_writetosyslog - write a string to the cfe system log . – cfe_es_processasyncevent - notification that an asynchronous event was detected by the underlying os / <allcaps> psp </allcaps> . <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
add functional tests for cfe generic counter apis <section> need open source functional tests for certifiability <section> add functional tests for cfe generic counter apis – cfe_es_registergencounter - register a generic counter . generated by doxygen <number> <allcaps> contents </allcaps> – cfe_es_deletegencounter - delete a generic counter . – cfe_es_incrementgencounter - increments the specified generic counter . – cfe_es_setgencount - set the specified generic counter . – cfe_es_getgencount - get the specified generic counter count . – cfe_es_getgencounteridbyname - get the id associated with a generic counter name . <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
add functional tests for cfe performance monitor apis <section> need open source functional tests for certifiability <section> add functional tests for cfe performance monitor apis – cfe_es_perflogentry - entry marker for use with software performance analysis tool . – cfe_es_perflogexit - exit marker for use with software performance analysis tool . – cfe_es_perflogadd - function called by cfe_es_perflogentry and cfe_es_perflogexit macros . <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
add cfe memory manager <allcaps> api </allcaps> functional tests <section> need open source functional tests for certifiability <section> add cfe memory manager <allcaps> api </allcaps> functional tests – cfe_es_poolcreate - initializes a memory pool created by an application while using a semaphore during processing . – cfe_es_poolcreateex - initializes a memory pool created by an application with application specified block sizes . – cfe_es_poolcreatenosem - initializes a memory pool created by an application without using a semaphore during processing . – cfe_es_getpoolbuf - gets a buffer from the memory pool created by cfe_es_poolcreate or cfe_es - _poolcreatenosem . – cfe_es_putpoolbuf - releases a buffer from the memory pool that was previously allocated via cfe_e - s_getpoolbuf . – cfe_es_getmempoolstats - extracts the statistics maintained by the memory pool software . – cfe_es_getpoolbufinfo - gets info on a buffer previously allocated via cfe_es_getpoolbuf . <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
add cfe es critical data store <allcaps> api </allcaps> functional tests <section> need open source functional tests for certifiability <section> add cfe critical data store <allcaps> api </allcaps> functional tests – cfe_es_registercds - reserve space ( or re - obtain previously reserved space ) in the critical data store ( <allcaps> cds </allcaps> ) – cfe_es_copytocds - save a block of data in the critical data store ( <allcaps> cds </allcaps> ) – cfe_es_restorefromcds - recover a block of data from the critical data store ( <allcaps> cds </allcaps> ) <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
add cfe es child task <allcaps> api </allcaps> functional tests <section> need open source functional tests for certifiability <section> add cfe child task <allcaps> api </allcaps> functional tests – cfe_es_registerchildtask - registers a cfe child task associated with a cfe application . – cfe_es_createchildtask - creates a new task under an existing application . – cfe_es_deletechildtask - deletes a task under an existing application . – cfe_es_exitchildtask - exits a child task . <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
add cfe es information <allcaps> api </allcaps> functional tests <section> need open source functional tests for certifiability <section> add cfe information <allcaps> api </allcaps> functional tests – cfe_es_getresettype - return the most recent reset type . – cfe_es_getappid - get an application id for the calling application . – cfe_es_getappidbyname - get an application id associated with a specified application name . – cfe_es_getappname - get an application name for a specified application id . – cfe_es_getappinfo - get application information given a specified app id . – cfe_es_gettaskinfo - get task information given a specified task id . <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"add cfe application behavior <allcaps> api </allcaps> functional tests <section> need open source functional tests for certifiability <section> add cfe application behavior <allcaps> api </allcaps> functional tests – cfe_es_runloop - check for exit , restart , or reload commands . – cfe_es_waitforstartupsync - allow an application to wait for the "" <allcaps> operational </allcaps> "" global system state . – cfe_es_waitforsystemstate - allow an application to wait for a minimum global system state . – cfe_es_incrementtaskcounter - increments the execution counter for the calling task . – cfe_es_exitapp - exit a cfe application . <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <allcaps> edit </allcaps> by <user> : removed cfe_es_registerapp since it no longer exists .",2
add es application control <allcaps> api </allcaps> functional tests <section> need open source functional tests for certifiability <section> add functional tests for cfe application control apis – cfe_es_restartapp - restart a single cfe application . – cfe_es_reloadapp - reload a single cfe application . – cfe_es_deleteapp - delete a cfe application . <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"network_includes . h needs to include siolib . h for vxworks target <section> when using rs - <number> in io_lib under vxworks , siolib . h needs to be included . <section> <number> . use the <number> . x tag to build a cfs system for vxworks . <number> . include io_lib in your apps <number> . ensure io_lib builds trans_rs422 . c <number> . observe build failure : <code> <section> build should succeed . <section> cfe / fsw / cfe - core / src / inc / network_includes . h should look like this ( note the added siolib . h line ) <code> <section> - building under ubuntu <number> host with vxworks <number> - versions - cfe <number> . x - custom <allcaps> psp </allcaps> and <allcaps> osal </allcaps> for <allcaps> ppc </allcaps> target - io_lib master <section> morgan redfield , astrobotic",2
"fix # <number> , remove legacy time header format support <section> fix # <number> fix # <number> collapses options down to just <number> bit second , <number> bit subsecond , always big endian . removes old defines , and errors out if the configuration is set to a format that was removed . <section> built and <code> with <code> , passes test . <section> time in header always big endian . <section> - hardware : cfs dev vm - os : ubuntu <number> - versions : main bundle plus # <number> , with this commit on top ( c039fb4 is the commit for this pr , or those marked with fix # <number> ) <section> # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
update cfe application developers guide . md for message module <section> application developer ' s guide covers older concepts ( like using uint8 and cfe_sb_tlm_hdr_size for defining headers ) and references the old apis . <section> update based on msg module implementation <section> none . <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"fix # <number> , remove os_milli2ticks document reference ( deprecated ) <section> fix # <number> removes reference from documentation . <section> none , documentation . <section> none . <section> n / a <section> nasa / osal # <number> <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
remove os_milli2ticks reference from documentation ( deprecated ) <section> deprecating per nasa / osal # <number> <section> removes references from the developers guide . <section> n / a <section> nasa / osal # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"improve resource management and internal consistency in es <section> executive services ( es ) maintains many internal tables of resources / objects , which track applications , libraries , tasks , counters , and memory pools , etc . there is a lot of inconsistency in how these internal objects are managed / tracked . some have a <code> boolean that is set true / false depending on whether the record is used . app table uses the <code> member . the memory pool passes around direct pointers which are dereferenced ( potentially dangerous ) . furthermore , all "" id "" values issued to external apps are zero based , and therefore can easily alias other object types or even other objects of the same type . for instance , if one app had id "" <number> "" and it was deleted , and after this a new / different app was started , the new app might also be assigned id "" <number> "" . <repeated> this means any old / stale reference to appid <number> will now be referring to the wrong app . <section> define a properly abstract "" resource id "" type and use it consistently across all these various internal tables . the abstraction should be based on / compatible with what <allcaps> osal </allcaps> does for its internal records . - the "" id "" value also serves as a marker to indicate whether the respective table entry is in use or not . - zero is reserved as an invalid value , and marks entries which are <allcaps> not </allcaps> in use . ( e . g . so a <code> to all zero can consistently clear an entry ) . valid entries / ids are never zero . - valid values are split into a "" type "" and sequential "" index "" value - type is unique for apps . libs , counters , etc so these cannot get crossed / misinterpreted ( i . e . can not pass an appid in place of a libid or vice versa ) . - index is sequential and does not immediately repeat ( i . e . do not wrap until 0 xffff , do not recycle / reassign ids after deletion ) . - provide a consistent mechanism to convert id to a zero based index where an array / table is needed . <section> this internal cleanup is a prerequisite to several related tickets : - # <number> - this blurs the difference between libraries and applications and makes the app <allcaps> api </allcaps> also apply to libraries , so they need a consistent means of identification and ( possibly ) make a single unified table . - # <number> - need a better way to identify mem pools in <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> messages , not a direct address / pointer . - # <number> - more examples of ugliness / duplication of logic between apps and libs <section> joseph hickey , vantage systems , inc .",2
"header version / implementation selection logic update <section> # <number> separates the header implementation logic and paves the way to use source selection for msgid implementation and <allcaps> ccsds </allcaps> extended header use . it partially uses new cmake flags to implement , but still relies on message_format_is_ccsds_ver_2 being set correctly ( but does not do it by default ) . <section> remove dependencies on message_format_is_ccsds_ver_2 ( see proposal below ) <section> consider changing cfe configs to cmake options ( like the osconfig update ) , and use the cmake options to set the define if still required . or could just set the version <number> define if either cmake option ( from # <number> ) is set . <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"collapse down to <number> time format for packet headers ( missions can customize msg module for alternates ) <section> # <number> made it possible to replace header implementation such that the core no longer needs to carry mission unique logic . it also added the single time format implementation , but did not switch to use it by default to minimize functional changes from that pr . <section> clean / remove all references to cfe_mission_sb_packet_time_format . note the change in # <number> also fixes # <number> when the new implementation is chosen . now just will do big endian , <number> byte sub - second field . <section> n / a <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add msg module stubs , update sb to use them , and no longer include actual msg target in unit test builds <section> follow on to # <number> , since it leaves the msg module as "" internal "" in the context of unit tests ( it includes the target ) . this was done such that it could be shown all the old sb unit tests would pass ( w / minor updates for the bug fixes and reorg ) . <section> add the stubs , rework the sb unit tests , and remove the msg target from ut builds . <section> n / a <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> cfe reload </allcaps> and <allcaps> restart </allcaps> commands handled ( almost ) identically <section> the documentation of the <code> specifically says here that it is _not_ reloaded from the disk file : <url> but in the way the code has evolved , both <allcaps> reload </allcaps> and <allcaps> restart </allcaps> control requests end up going through <code> function : <url> <url> notably , the <code> function will , in fact , unload the module via <code> , and the subsequent <code> function will load it again from disk . also important that the appid might change too as part of this process , which may or may not be expected ? <section> should make the documentation and code match one way or another : - if we want a true "" restart "" without reload , as the documentation for <code> says , we need to update this to <allcaps> not </allcaps> completely unload the module . - or if the current implementation is ok then i ' d say it is not sufficiently different from <code> to warrant the existence of a separate command . <section> i noticed this inconsistency while doing implementation of # <number> . i can put in a fix for this issues as part of the same ( upcoming ) pr , just need <allcaps> ccb </allcaps> concurrence on which way to go - do we make it work as described , or we describe the way it works . <section> joseph hickey , vantage systems , inc .",0
"cfe_sb_rcvmsg stub clears buffer , then copies the msg it appears that the cfe_sb_rcvmsg ( ) stub , when it has a buffer defined , clears the buffer , <allcaps> then </allcaps> copies the message pointer . backwards ? see : <url>",3
"allow target name subdirectory for install files and handle symlinks <section> just need to add to the paths of locations for the install list from <allcaps> tgt </allcaps> <n> _filelist the possibility of target_defs / <tgt_name> / < <allcaps> filename </allcaps> > also , if the file is a symlink , it needs to be followed to its source but copied as the name in <allcaps> filelist </allcaps> suggests . <section> <code> something like that maybe ? <section> a clear and concise description of any alternative solutions or features you have considered . <section> add any other context about the feature request here . <section> full name and company / organization if applicable",2
"fix # <number> , # <number> , update requirements <section> fix # <number> - ces1005 . <number> : remove application load address from start app command - ctbl6003 . <number> : clarify table validation pior to activate - cevs3103 . <number> , cevs3103 . <number> , cevs3001 : remove sb qualifier fix # <number> - csb4344 : added get packet type <allcaps> api </allcaps> requirement - csb4345 : added message id validation <allcaps> api </allcaps> requirement also removed previously deleted requirements from document <section> none , documentation update only <section> none <section> n / a <section> n / a <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"cfe_evs_send { crit | critical | err | error | info | information | debug } wrapper for cfe_evs_sendevent <section> with the expansion of the <code> constants as part of <code> , it got me thinking that we have a lot of extraneous typing when there ' s only four types of events . what about adding wrapper macros / functions that have the "" eventtype "" as part of the function name ? i also recommend both long and short versions , such as <code> and <code> . so , for example : <code> becomes <code> <section> <email>",2
"update <number> cfe requirements as part of the cfe certification effort , several requirements have been identified as in need of update : <number> . ces1005 . <number> ( cfe - <number> in <allcaps> jira </allcaps> <sad> need to remove application load address from the list of command parameters in the start application command ( es ) to reflect implementation . <number> . ctbl6003 . <number> ( <allcaps> cfe </allcaps> - <number> in <allcaps> jira </allcaps> <sad> need to update requirement verbiage to reduce ambiguity . a . old verbiage : if a table validation function exists for the specified table , the inactive table image shall be validated . b . new verbiage : the cfe shall reject an activate table command for a table that has a validation function but has not been validated . <number> . cevs3103 . <number> , cevs3103 . <number> , and cevs3001 ( <allcaps> cfe </allcaps> - <number> , <number> , and <number> <sad> requirements imply that the event format mode is sb controlled / commandable when in fact it is controlled by <allcaps> evs </allcaps> . need to swap sb with <allcaps> evs </allcaps> . <section> dan knutsen <allcaps> nasa </allcaps> goddard",2
"fix # <number> , update vxworks <number> example toolchain <section> add missing include path to the target / h and wrn / coreip directory . set and clarify difference between wind_home and wind_base variables . remove unrelated comment about <allcaps> cexp </allcaps> ( remnant from <allcaps> rtems </allcaps> ) . fixes # <number> also fixes nasa / psp # <number> <section> build with vxworks <number> . <section> no errors related to missing headers . <section> gs582w - cfelnx test machine ( vxworks <number> ) <section> joseph hickey , vantage systems , inc .",0
"update vxworks <number> toolchain <section> the example toolchain file for vxworks <number> does not work "" out of the box "" in combination with the current mcp750 <allcaps> psp </allcaps> . need to add additional include paths and other paths under <code> / <code> environment variables to more easily adapt to other platforms . <section> see nasa / psp # <number> <section> proposing alternative solution this issue via cmake toolchain file modifications . <section> joseph hickey , vantage systems , inc .",2
"es - command to load a new application , commands to load / unload / reload libraries <section> currently es can be commanded to unload or reload an existing application . commands should be added to load an application not currently loaded . similarly , there ' s no commands to load / unload / reload libraries - - these commands should be added . <section> addl . commands . <section> <allcaps> sbn </allcaps> currently directly loads libraries , if the library is not already resident . with this change , <allcaps> sbn </allcaps> should command es to load those libraries . <allcaps> sbn </allcaps> also reloads libraries when the <allcaps> sbn </allcaps> configuration table is changed , this should also translate to es commands . <section> <email>",2
"use a changelog to keep track of changes instead of having them in the readme <section> the version history in the readme file clutters useful information <section> move the "" version history "" from <code> to <code> and start following this spec : <url> <section> move changelog section in the readme to a section at the very bottom of the file <section> none <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",2
"ccsdsv2 msgid construction not <number> bits as described in cfe_sb_msg_id_util . h <section> ccsdsv2 msgid construction not <number> bits as described in cfe_sb_msg_id_util . h . it looks like the 8 th bit of the <allcaps> apid </allcaps> qualifier subsystem id is included , making the msgid <number> bits . <section> n / a , code inspection <section> msgid should mask off bit <number> in subsystem id <section> <url> <url> <url> <section> n / a <section> n / a <section> john n pham , northrop grumman",2
"update assert_eq to print both decimal and hex <section> for many cases bits or error codes are being compared , where hex is easier to interpret the difference <section> print both <section> add specific hex assert_eq <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"ut assert library for <allcaps> cfe </allcaps> functional tests <section> there is a need to do functional testing of <allcaps> cfe </allcaps> itself along with apps and libraries . these would benefit from using the same assert macros and test framework as the coverage tests use . <section> this can be done by compiling the same ut assert framework as loadable <allcaps> cfe </allcaps> app . <section> joseph hickey , vantage systems , inc .",2
"deprecate sb elements relative to msg module adaption <section> many apis will be updated for consistency relative to the <allcaps> msg </allcaps> module , also element scoping improvements ( sb does not actually care about the header , it just needs to route ) . <section> per <number> - <number> - <number> discussion sb for once # <number> is in . deprecating : - [x ] cfe_sb_pkttype_ * - > cfe_msg_type_t - [x ] cfe_sb_msgptr_t - > cfe_msg_message_t * - [x ] cfe_sb_msg_t - > cfe_msg_message_t - [x ] cfe_sb_msgpayloadptr_t ( use pointer to payload in structure ) - [x ] cfe_sb_initmsg - > cfe_msg_init - [x ] cfe_sb_gettotalmsglength - > cfe_msg_getsize - [x ] cfe_sb_settotalmsglength - > cfe_msg_setsize - [x ] cfe_sb_getmsgtime - > cfe_msg_getmsgtime ( this gets rid of structure return , similar to # <number> issue ) - [x ] cfe_sb_setmsgtime - > cfe_msg_setmsgtime - [x ] cfe_sb_getcmdcode - > cfe_msg_getfcncode - [x ] cfe_sb_setcmdcode - > cfe_msg_setfcncode - [x ] cfe_sb_getchecksum ( no use case defined , what do you need it for ? ) - [x ] cfe_sb_generatechecksum - > cfe_msg_generatechecksum - [x ] cfe_sb_validatechecksum - > cfe_msg_validatechecksum - [x ] cfe_sb_getmsgid - > cfe_msg_getmsgid - [x ] cfe_sb_setmsgid - > cfe_msg_setmsgid - [x ] cfe_sb_getpkttype - > cfe_msg_gettypefrommsgid - [x ] cfe_sb_setmsgseqcnt - > cfe_msg_setsequencecount <allcaps> not </allcaps> deprecating , but will note in <allcaps> api </allcaps> that these are fragile ( guesses based on assumptions ) . future implementation could be replaced via data dictionary sort of access or standards based header definitions ( including secondary header , and flags or extra internal data to mange the real sizes ) : - cfe_sb_msghdrsize : use actual message structure where possible - cfe_sb_getuserdata : use actual message structure where possible - cfe_sb_getuserdatalength : use actual message structure where possible - cfe_sb_setuserdatalength - use cfe_msg_setsize with full message structure where possible - cfe_sb_cmd_hdr_size - > sizeof cfe_msg_commandheader_t ) preferred <elongated> - cfe_sb_tlm_hdr_size - > sizeof ( cfe_msg_telemetryheader_t ) preferred note cfe_sb_qos_t and cfe_sb_default_qos will likely be used for # <number> ( critical subscription ) <allcaps> not </allcaps> deprecating , <allcaps> msg </allcaps> types are unaligned , sb types are now aligned : - cfe_sb_msg_t , cmdhdr_t , tlmhdr_t - > cfe_msg_ * <allcaps> not </allcaps> deprecating cfe_sb_timestampmsg . see # <number> that requests making this part of send . <section> just need to manage these , unique deprecation flag . <repeated> not all actually need to go , but reduced / simplifies unit testing <section> # <number> , # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"generate_config_includefile should display an error if no files are found at all <section> while testing other items i noticed that the <code> function will happily create an empty file if neither a user - provided file nor a default / fallback file is available . but because the file is _present_ but does not have any actual content , you end up with a slightly obfuscated compiler error about missing symbols rather than an indication that the expected config file is empty . <section> the function should trigger an error and inform the user that there was no file to use , rather than generating an empty file . it is a misconfiguration , so it should be corrected . <section> joseph hickey , vantage systems , inc .",0
"add build name and build number to version . h <section> need a better way to describe versions during development <section> add build name and build number to version . h as discussed , we will add a a build name string and a continuously incrementing build number to <code> <section> see notes from <allcaps> ccb </allcaps> : < <url> <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",2
"add struct name for typedef struct in cfe <section> all of the struct used in <code> are declared with <code> , which make the struct anonymous in debug info , and make it harder to access from the debugging tools such as <code> ` <code> ` <code> ` <code> ` <code> ` <code> ` <code> ` <code> ` ` <section> <section> <section> <user>",2
"fix # <number> , add to table search path <section> adds to table search path fix # <number> <section> ci <section> just adds to search path <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add to table search path . <repeated> either point solution or general <section> power users have had to clone and own the cmake logic for adding tables to implement preferred directory structure and naming patterns in searching for the table files . currently not a good way ( that i know of ) to customize : <url> <section> some way to customize the search path . <repeated> or we could just do a point solution where we add the desired search path for this stakeholder . if ( <allcaps> exists </allcaps> "" ${ mission_defs } /${ <allcaps> tgt </allcaps> } / tables / ${ <allcaps> tblwe </allcaps> } . c "" ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"scrub all <allcaps> cfe ut </allcaps> stub functions <section> the <allcaps> cfe </allcaps> stub functions remain incomplete and inconsistent . they need a scrub to bring everything up to the level it should be . <section> - all functions prototyped in the <allcaps> cfe </allcaps> public <allcaps> api </allcaps> headers ( the <code> dir ) should also have a stub defined . - all arguments should be registered in the context so the complete context is available within ut hook functions . - the argument names should always match the prototype . <section> joseph hickey , vantage systems , inc .",2
"document the cmake build system <section> our documentation does not explain to users how the build system works and how to customize it for their needs <section> a clear description and possibly some graphics showing how the different cmakelists files link with each other and how dependencies flow . from <allcaps> cfs </allcaps> - <number> : document dependencies based on features used ( xxd for "" embedded "" files ) <url> it might make more sense to move this into the github . com / nasa / cfs instead <section> related to conversation started in <url> <section> gerardo e . cruz - ortiz",1
"remove getlastsenderid ( ) <allcaps> api </allcaps> and replace with a recvmsg ( ) <allcaps> api </allcaps> that returns the appid of the sender of the message being received <section> the current cfe_sb_getlastsenderid ( ) <allcaps> api </allcaps> is broken , as indicated in # <number> and # <number> , but also as discussed at today ' s <allcaps> ccb </allcaps> , the intent and use - case is really "" who sent *this* message "" not "" who sent the *last* message "" on a pipe . in fact , <allcaps> sbn </allcaps> is currently using this <allcaps> api </allcaps> to prevent <allcaps> sbn </allcaps> message loops , and this <allcaps> api </allcaps> does not work correctly for that purpose . <section> the suggestion is to remove the getlastsenderid ( ) <allcaps> api </allcaps> entirely , and add a new receive method like : <code> that has an additional out parameter which will contain the appid of the app that sent the message returned in the bufptr . <section> <email>",2
"rogue license in cmake file <section> <url> <allcaps> nosa </allcaps> is wrong ( it ' s apache <number> ) , and no other cmake files are marked . <section> either mark all the cmake files in the same way with the correct license , or remove . clear guidance for apache <number> cmake files not found , fine with either solution ( trivial fix , already scripted ) <section> n / a <section> found during <allcaps> osal </allcaps> license updates . <repeated> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"secondary header : extracting wrong bits for command on <number> - bit <allcaps> arm </allcaps> platform the tools / . <repeated> / cmdutil has a test to - enable - tlm . sh command to test commands send to a running cfs session #. / core - cpu1 . the command code extracted through the function , cfe_sb_getcmdcode ( ) . <repeated> eventually calls the macro , ccsds_rd_fc ( . <repeated> ) . this macro masks and shifts bits to extract the command code ; however , the cfe / fsw / cfe - core / src / inc / ccsds . h need the following minor modification . original <hashtag> define </hashtag> ccsds_rd_fc ( shdr ) ccsds_rd_bits ( ( shdr ) . command , 0x 7 f00 , <number> ) my change <hashtag> define </hashtag> ccsds_rd_fc ( shdr ) ccsds_rd_bits ( ( shdr ) . command , 0x0 0 7 f , <number> ) once this code change is made , no problems . if this is a bug then the masking and bit shifting for all the secondary header should be changed else please let me know what i might be doing wrong . platform beaglebone : arm <number> <number> - bit linux beaglebone <date> - ti - r42 <hashtag> 1 buster </hashtag> <allcaps> smp preempt </allcaps> tue <date> <time> <allcaps> utc </allcaps> <number> armv7l <allcaps> gnu </allcaps> / linux",3
"cf_es_startapplications ( ) uses o_rdonly instead of os_read_only <section> latest os_open ( ) does not support o_rdonly flag <section> just observation trying to find other bug - no solution for that one yet . <repeated> <section> correct <hashtag> define </hashtag> use <section> if applicable , add references to the software . <section> - docker - os : linux fb2def16b3c1 <date> - microsoft - standard # <number> <allcaps> smp </allcaps> wed <date> <time> <allcaps> utc </allcaps> <number> x86_64 x86_64 x86_64 <allcaps> gnu </allcaps> / linux - versions [ versions : cfe <number> . <number> , <allcaps> osal </allcaps> <number> . <number> , <allcaps> psp </allcaps> <number> . <number> ] <section> add any other context about the problem here . <section> maurice smulders / geneva technologies inc",0
cfe_sb_timestampmsg in ut_sb_stubs . c does not record msgptr argument value <section> the value passed into cfe_sb_timestampmsg cannot be checked because the context value is not put into the ut_stub_copyfromlocal function . <section> write a unit test that attempts to check this value by setting up ut_setdatabuffer . test fails because the value was never saved so it will not equal the expected value . <section> ut_setdatabuffer when used for cfe_sb_timestampmsg will copy the argument value from local ( ut_stub_copyfromlocal ) . <section> current code : <code> <section> - hardware : pc - os : rhel7 - <number> . <number> - <number> . <number> . el7 . x86_64 - versions cfe <number> <section> add any other context about the problem here . <section> full name and company / organization if applicable,0
"consolidate implicit entries in mission_deps to defaults file <section> the build currently sets <code> as a list of dependencies which is basically the <allcaps> cfe </allcaps> core and <allcaps> osal </allcaps> by default . there is a desire to consolidate all "" fixed "" entries into a separate defaults file for increased visibility and manageability . <section> these two dependencies can be consolidated into the <code> default list being proposed in pr # <number> , but this also depends on # <number> so it needs to be implemented separately . <section> this is a dependency of both pr # <number> and # <number> . original discussion here : <url> <section> joseph hickey , vantage systems , inc .",2
"failure during cfe_es_exitapp if app calls cfe_tbl_unregister <section> should an app call cfe_tbl_unregister ? on cfe_es_exitapp i get : <code> the documentation ] ( <url> no longer says anything about it so i am starting to think it should not be used . the [ sample_app <url> in the cfs repo also does not call cfe_tbl_unregister either . the code seems to say we should though : <url> <section> <number> . register table <number> . unregister table <number> . call cfe_es_exitapp <section> no errors on exit <section> n / a <section> - hardware : laptop - os : linux - versions : versions : cfe <number> . <number> , <allcaps> osal </allcaps> <number> . <number> , <allcaps> psp </allcaps> <number> . <number> <section> n / a <section> philip cooksey , <allcaps> nasa </allcaps> ames",0
"implement generic location for <allcaps> cfe </allcaps> modules <section> there are a number of new modular add - ons for <allcaps> cfe </allcaps> that should be distributed with <allcaps> cfe </allcaps> core but are not really part of the "" core "" proper . such as : - test framework apps - message accessor library these modules should be with the <allcaps> cfe </allcaps> core so that users get a sensible baseline when cloning the <allcaps> cfe </allcaps> core repo as the <allcaps> cfe </allcaps> itself depends on / uses them , but these modules can also be replaced with customized versions at the user discretion . <section> proposal is to introduce a new top level directory <code> to hold these items . this needs to be added to the module path and also to provide a "" defaults "" file that can select the default set ( s ) of modules to include if the user does not override / replace them . <section> joseph hickey , vantage systems , inc .",2
"version <number> msgid construction does not match description , overloads bits <section> version <number> code takes the full <allcaps> apid </allcaps> ( 0x 7 ff mask ) , or ' s in a bit for cmd / tlm ( 0x 8 0 mask ) then or ' s in the subsystem id shifted by <number> that means if a user defines an <allcaps> apid </allcaps> of 0x 8 0 for a telemetry message ( which is valid per <allcaps> ccsds </allcaps> ) , the system will report it as type cmd if it gets the type from the msgid . it ' s also a collision between 0x 7 bits from the subsystem id and the 0x 7 0 0 bits of <allcaps> apid </allcaps> . basically logic does not mirror : cfe_sb_setmsgid of 0x 7 ff - > <allcaps> apid </allcaps> = 0x 7 f , type = cmd , subsystemid = <number> cfe_sb_getmsgid from <allcaps> apid </allcaps> =0 x7ff , type = tlm , subsytemid = <number> - > msgid = 0x 7 ff <section> n / a - code inspection <section> get / set should mirror ( setmsgid should not overload bits ) <section> <url> <url> <url> <section> n / a <section> uncovered as part of # <number> work <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"document configs to indicate that <allcaps> max </allcaps> string sizes do not include null - terminator <section> there is a laundry list of string size definitions in sample_mission_cfg . h , cpu1_platform_cfg . h , and default_osconfig . cmake that should be documented as to whether the setting includes a byte for a null - terminator ( so say <code> is defined as <number> , does that mean i must limit my table name to <number> characters plus the null - terminator ? ) this is related to # <number> . <section> <email>",1
"further simplify sb unit tests <section> recently the software bus unit tests were updated to employ macros for common code bits , but this only amplifies the fact that the sb unit tests do not follow the typical ut assert model . in particular , they "" collect "" a bunch of conditions together and then assert at the end that all the conditions where true . there is no reason to do this deferred reporting with ut assert , and it only serves to obfuscate the true failure because the ut assert failure message line number can be quite different than what actually failed . <section> now that the macros / wrappers are in place , rather than having them only mimic the old test logic , have them implement the preferred ut assert patterns . - remove <code> global variable . do not keep global state outside ut assert . - remove separate text messages inside "" if "" conditionals and replace with ut assert statements . that ' s what the ut assert <allcaps> api </allcaps> is for , after all . - remove <code> compile - time option . the ut assert has a runtime verbosity flag , just call <code> and the message will only be printed when set to verbose mode . <section> this really just the next step along the path to using ut assert as it was intended , and removing the "" compatibility crutches "" that were put into place because <allcaps> cfe </allcaps> ( and sb in particular ) did not employ the same test patterns as other apps / modules . <section> joseph hickey , vantage systems , inc .",2
cfe_sb_validatechecksum implementation does not match description <section> cfe_sb_validatechecksum claims it returns true if not supported : <url> but also claims it returns false : <url> and then implements a false return : <url> <section> read the code . <section> consistency <section> see above <section> n / a <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"msgid abstraction - add <allcaps> api </allcaps> to translate between topic id and msgid <section> currently applications hard - code the <allcaps> mid </allcaps> value they use for both publication of telemetry and subscribing to commands and / or telemetry from other applications . this is typically done via a header file such as <code> . the problem is in a multi - <allcaps> cpu </allcaps> environment this is a barrier ( and often the only barrier ) to having a single binary build be loaded onto multiple processors for core apps within <allcaps> cfe </allcaps> , this is already done by assigning a message "" topic id "" to each core app , which is an offset from a base <allcaps> mid </allcaps> . for instance , in <code> we have : <url> and "" topic "" definitions : <url> and in <code> this organizes it into message ids by topic : <url> offsetting a base <allcaps> mid </allcaps> by a topic value is a completely logical way to solve the issue of running the same code on multiple cpus and assigning different <allcaps> mid </allcaps> values , but <code> values are supposed to be abstract . there should be no assumption that they can be added together like this . additionally , the same translation should be implemented as a runtime <allcaps> api </allcaps> , rather than forcing the value to be computed only at compile time . <section> add a new <allcaps> api </allcaps> to software bus that allows determining a <allcaps> mid </allcaps> value at runtime , given a topic id along with an instance number . for instance : <code> this can be further simplified for "" local "" requests by getting the instance number from the <allcaps> psp </allcaps> , for example , something like : <code> would return the <allcaps> mid </allcaps> of the topic on the current / same <allcaps> cpu </allcaps> . topic ids can be assigned exactly as they are today ( at least for now ) , because they can be assigned at mission scope and are agnostic to <allcaps> cpu </allcaps> / instance number . furthermore , the translation between topic id and and msgid need not be limited to a simple addition / bitmask - the conversion can be a implemented in a user - supplied library and customized based on however a mission chooses to allocate its <allcaps> mid </allcaps> values for routing . subscription requests would then be simplified . for example in es , the hk subscription in : <url> would become : <code> this would in turn make all the <code> header files obsolete and unnecessary . <repeated> because all cpus can use the same topic ids and translate at runtime . <section> message ids can also be assigned in a separate configuration table and loaded via <allcaps> tbl </allcaps> services , which is supported today if the application is written that way , but most are not . for apps that do not already use <allcaps> tbl </allcaps> services for config , it is a fairly substantial change to add it . it is significantly easier to change the <allcaps> api </allcaps> used to translate the <allcaps> mid </allcaps> as proposed here to make the app <allcaps> cpu </allcaps> / instance agnostic , rather than introduce a configuration table for this purpose . <section> obviously not for <allcaps> cfe </allcaps> <number> . <repeated> but recommended to discuss for <number> / <number> or whenever . we might want to consider changing the name from <code> to <code> ( or something ) to make it clearer . but fundamentally its ok , and it still would apply even if the topics are assigned by a tool / database of some type in the future . <section> joseph hickey , vantage systems , inc .",2
"low cfe_mission_max_file_len and cfe_tbl_filedef ( . <repeated> , "" sample_app_table . tbl "" ) causes silent non - truncation <section> i was scratching my head why my table file was named "" sample_app_table . tbl \ <number> "" until i realized that cfe_mission_max_file_len is defined as "" <number> "" and "" sample_app_table . tbl "" is exactly <number> characters . if i had one more char , the compiler would err . but it accepts static definition of structs using strings that are the exact length , which loses the null terminator . <section> should allow file names of cfe_mission_max_file_len chars . <section> <email>",0
"fix # <number> , remove refs to ccsds data structures <section> replace all direct references to data types defined in <code> with the abstract type defined in <code> . fixes # <number> <section> build and run <allcaps> cfe </allcaps> , sanity check , confirm all unit test pass . <section> no impact to behavior . <section> ubuntu <number> <section> there are similar changes to apps , too , which will be separate prs ( not submitted yet ) . <section> joseph hickey , vantage systems , inc .",2
"improve handling of platform config <section> almost every app , including the <allcaps> cfe </allcaps> core apps , have some sort of "" platform scope "" internal config options . and the way we handle this for apps and external entities is currently different than the way we handle this for <allcaps> cfe </allcaps> core . to move forward we need to consolidate this into a single , consistent method that can be applied for both external apps and core apps . <section> cmake already generates the <code> file so with some tweaks we can get it to work for everything . there are several possible approaches to consider : option <number> : do we generate a single "" monolithic "" platform header file and let all apps include it ? - advantage : would look basically like the current "" cfe_platform_cfg . h "" and we can even keep the name , preserving backward compatibility - disadvantage : would contain configs for every app / module on the platform thereby giving access to all sorts of out - of - scope info , no way to enforce apps to use only their own config items , so they could inadvertently break <allcaps> abi </allcaps> consistency by using config items they do not own . option <number> : do we generate a per - app "" focused "" platform header file which is only used by that app ? - advantage : cleaner , better scoping , only give apps / modules a header file containing their own config items , they can not use what they can not see , and thereby can not introduce unexpected <allcaps> abi </allcaps> dependencies . - disadvantage : would probably need to be a different name , as we can not call everything "" cfe_platform_cfg . h "" ( too confusing ) , and would probably ( eventually ) require breaking up the current cfe_platform_cfg . h into a config file per core app ( es_platform_cfg . h , evs_platform_cfg . h , etc ) . in the current <allcaps> cfe </allcaps> core there are examples of cross - pollination too , where <allcaps> evs </allcaps> uses data structures defined by es which are based on platform config . so these become undocumented / uncontrolled <allcaps> abi </allcaps> dependencies . we ' d have to fix those . <section> option <number> is cleaner but arguably more work , might take a little longer to implement , and have a bigger impact on apps . this type of issue is coming more to the forefront when considering things like # <number> , but there have been periodic issues posted in the past regarding the "" weirdness "" around the way <code> is handled , so it would be good to generally fix that too , but need to get some sort of community consensus before implementing anything . <section> joseph hickey , vantage systems , inc .",2
"cfe_evs_register should log or send an event when numeventfilters > cfe_platform_evs_max_event_filters <section> when numeventfilters is > cfe_platform_evs_max_event_filters when calling cfe_evs_register , the specified filter table can get silently truncated . in addition , the filters parameter should be marked const as it is copied into the filter table . and not modified . <section> send a message to syslog warning of the truncated filter table <section> send an event message using the <allcaps> evt </allcaps> appid <section> this truncation happens for the ci open source app which has <number> events , but the default cfe_platform_cfg only supports <number> event filters . <section> john n pham , northrop grumman",0
"replace "" - - whole - archive "" link switch <section> the <allcaps> cfe </allcaps> core executable link process uses <code> to ensure that all functions provided in libraries are actually linked into the executable . normally during a link procedure , if a compilation unit within a static library does not resolve any unresolved symbol ( i . e . does not implement anything that is actually called by the application ) it is dropped . however because <allcaps> cfe </allcaps> dynamically loads applications / libraries at runtime , this can be a problem if a particular <allcaps> api </allcaps> is only invoked by apps and not by <allcaps> cfe </allcaps> itself . the <code> linker flag does accomplish the goal of making sure all the apis are linked in and available for application use , but it has problems : - the switch is not really supported by cmake , it requires a backdoor approach to add it via <code> . - adding using this method requires the full string of the exact option , which is specific to the <allcaps> gcc </allcaps> / ld toolchain paradigms other toolchains might have a similar option , but would require patching the link line to support them . - even when using <allcaps> gcc </allcaps> , the exact option string also differs depending on whether <code> or <code> tool is used for the final link step . ( in the former case , a <code> prefix is required to pass the option through to the linker stage ) . this has been a frequent issue for <allcaps> fsw </allcaps> target builds in that there is no reliable way to determine if this extra prefix is needed . <section> a possible alternative would be to use the <allcaps> osal </allcaps> "" static symbol "" feature to pull in every <allcaps> api </allcaps> that should be available for application use . <section> leave as - is . <section> downside of this approach is that it requires maintaining a separate list of every public <allcaps> api </allcaps> that <allcaps> cfe </allcaps> core + <allcaps> osal </allcaps> is supposed to contain . however , this is already ( somewhat ) done for unit test stubs . the upside is that it can help catch errors of missing functions . this may become relevant if / when users are allowed to override parts of <allcaps> cfe </allcaps> with their own implementation ( e . g . issue # <number> ) . if a required <allcaps> api </allcaps> is missing , this can detect it early and generate a linker error , whereas the current approach will get a runtime error only if / when an application is loaded that tries to use the missing <allcaps> api </allcaps> . <section> joseph hickey , vantage systems , inc .",2
"remove references to "" <allcaps> ccsds </allcaps> "" structures outside of <allcaps> cfe sb </allcaps> . <section> as a prerequisite to # <number> , all modules other than sb should __not__ refer to the "" <allcaps> ccsds </allcaps> "" data types and macros . <section> remove references to the <code> header file along with any direct references to types defined in this file . use the types or abstractions defined in <code> instead . <section> mostly an issue for the "" send hk "" commands that accept a <code> structure . <section> joseph hickey , vantage systems , inc .",0
"add user - specified extra modules to build system <section> as a prerequisite to # <number> , the user needs to have the ability to specify their own set of extra modules to provide for the features they are customizing . <section> a new setting in <code> that allows users to add their own customization layers . this is similar to but slightly different than loadable apps in that : - the same set / config should be applied to all cpus ( i . e . if using for a message abstraction layer , all cpus should share the same one ) . so it belongs as a global setting , rather than a setting associated with a single target . - these would be linked with cfe core , rather than as dynamically - loaded libraries because something like a message abstraction layer is needed by sb itself , so it can not be loaded later . <section> initial function would be very simple - just include the libraries in the build , nothing more . <section> joseph hickey , vantage systems , inc .",2
"unit test hooks should refer to context elements by name ( future proof ) <section> old context elements were position based , nasa / osal # <number> allows getting by name so order added in stub no longer matters . <section> get context by name to future - proof against stub changes . <section> none <section> # <number> - example <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"ut_sb_stubs . c decription comment for cfe_sb_rcvmsg does not match code <section> in ut_sb_stubs . c description comment for cfe_sb_rcvmsg incorrectly states that first call returns cfe_success , while additional calls return - <number> . it appears that it will always return cfe_success . <section> steps to reproduce the behavior : <number> . write a test where cfe_sb_rcvmsg is called at least twice . <number> . check result on first call = = cfe_success , will pass <number> . check result on second call = = - <number> , will fail ( result is cfe_success instead ) <number> . additional calls have same result as <number> above . <section> rewrite comment to show that result returned is always cfe_success , unless the commented behavior is what is desired , then fix code to accomplish that . <section> <code> <section> - hardware : pc - os : <allcaps> rhel </allcaps> workstation <number> ( maipo ) , linux <number> . <number> - <number> . <number> . el7 . x86_64 - versions cfe <number> <section> add any other context about the problem here . <section> alan gibson , <allcaps> nasa </allcaps> , <allcaps> gsfc </allcaps> - <number>",0
"separate secondary header access <allcaps> api </allcaps> ' s from sb <section> need to support # <number> software bus logic does not care about message format , just use message access apis like all the other services . <section> <allcaps> msg </allcaps> module and header file for all the message getter / setters . deprecation of the <allcaps> sb api </allcaps> ' s . code separation to support source selection / mission configuration . <section> none <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"clarify / clean up spacecraft / cpu names / ids <section> defined in platform config : - cfe_platform_cpu_id ( referenced by cfe_platform_tbl_valid_prid_1 and cfe_cpu_id ) - cfe_platform_tbl_valid_prid_1 is used in internal table logic - cfe_cpu_id looks unused - cfe_platform_cpu_name ( referenced by cfe_cpu_name ) - cfe_cpu_name looks unused defined in mission config : - cfe_mission_spacecraft_id ( referenced by cfe_platform_tbl_valid_scid_1 and cfe_spacecraft_id ) - cfe_spacecraft_id looks unused - cfe_platform_tbl_valid_scid_1 used in internal table logic defined by cmake : - cfe_cpu_id_value ( from <allcaps> tgtid </allcaps> ) , sets . default_cpuid in target config - cfe_cpu_name_value ( from <allcaps> tgtname </allcaps> ) sets . default_cpuname in target config - cfe_spacecraft_id_value ( from spacecraft_id ) sets . default_spacecraftid in target config <section> remove / deprecate unused and / or clarify use / intent . looks like spacecraft id may actually be defined differently ( <number> vs 0x 4 2 ) . <section> stay confused . <section> table use looks like it could lead to inconsistencies . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , triggered by <user> comments on nasa / psp # <number>",2
"fix # <number> , resolve highest msgid of 0 xffff bug <section> changes message key from uint16 to uint32 to avoid rollover and system hang fix # <number> fix # <number> <section> steps taken to test the contribution : <number> . set cfe_platform_sb_highest_valid_msgid to 0 xffff <number> . built ( <allcaps> simulation </allcaps> = native ) and ran , confirmed startup <number> . ci - <url> <section> full message id range available <section> - hardware : cfs dev <number> - os : ubuntu <number> - versions : bundle w / this change <section> identified / resolved by <allcaps> jsc </allcaps> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
setting highest valid message id ' s to 0 xffff hangs cfe <section> given max number of message keys is <number> + highest valid msgid : <url> and message key is uint16 : <url> setting cfe_platform_sb_highest_valid_msgid to 0 xffff results in forever loop in : <url> <section> set cfe_platform_sb_highest_valid_msgid to 0 xffff and build / run . <section> full <number> bits of message id should be usable . <section> see above <section> - hardware : cfs dev <number> - os : ubuntu <number> - versions : master bundle <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ( per <allcaps> jsc </allcaps> identification of the issue ),0
"cfe_es_oneapptlm_payload_t telemetry struct contains non mission - scoped - sized array <section> unsure if this is intentional , but <code> is directly used by <code> which is ground visible . <code> uses <code> , whereas all other ground - visible telemetry uses the mission - scoped <code> . <section> <code> should be structured such that the size is dependent solely on mission - scoped constants and consistent amongst all cpus . this is an enhancement as opposed to a bug report since in practice both constants are likely to be same . <section> none <section> none <section> john n pham , northrop grumman",0
"ut_sb_stubs . c needs a stub for cfe_sb_deletepipe <section> cfe_sb_deletepipe does not have a stub in ut_sb_stubs . c causing undefined reference error when building unit tests for an app that uses this call . <section> add the stub for cfe_sb_deletepipe with full context tracking . <section> create my own locally in the app ' s unit test , but this does not help everyone . <section> alan gibson , <allcaps> nasa </allcaps>",2
"ut_sb_stubs . c needs a stub for cfe_sb_zerocopysend <section> cfe_sb_zerocopysend does not have a stub in ut_sb_stubs . c causing undefined reference error when building unit tests for an app that uses this call . <section> add the stub for cfe_sb_zerocopysend with full context tracking . <section> create my own locally in the app ' s unit test , but this does not help everyone . <section> alan gibson , <allcaps> nasa </allcaps>",2
"ut_sb_stubs . c needs a stub for cfe_sb_zerocopygetptr <section> cfe_sb_zerocopygetptr does not have a stub in ut_sb_stubs . c causing undefined reference error when building unit tests for an app that uses this call . <section> add the stub for cfe_sb_zerocopygetptr with full context tracking . <section> create my own locally in the app ' s unit test , but this does not help everyone . <section> alan gibson , <allcaps> nasa </allcaps>",2
cfe / <allcaps> sch </allcaps> deadlocks on exit on linux using modules 9 5 f34d25cb2843b8ba9db6338bb0b53cb3e38f92 cfe c2bcebbc4d7e60a41b604e9acfc8af3c60b8536a osal 3 7 ee8eb2d7ce006dc1570b920ae75a7ac5f89d27 psp there seems to be a deadlock upon exit for timers being used by <allcaps> sch </allcaps> . see stacktrace <code>,0
"fix # <number> , typo in cfe_es_restartapp writetosyslog <section> fix typo fix # <number> <section> none , typo <section> typo fixed <section> n / a <section> n / a <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , utilize ut macros in sb_ut <section> cleanup of sb_ut . c fix # <number> fix # <number> <section> <email> <allcaps> edit </allcaps> : added fix # <number>",2
"utilize new macros and correct some sb_ut . c merge conflicts <section> doing the merge conflicts for the ic merges , i mis - merged a couple of joe ' s changes ( fix # <number> ) . <section> <email>",2
"align all software bus message definitions <section> as an extension to the changes in issue # <number> / pull # <number> , the same paradigm should be applied to all other message definitions . this is currently only working "" by chance "" in that the payloads already contain a uint32 ( or larger ) value so it is already aligned . <section> change the header structure which is currently defined as a <code> array into either cfe_sb_cmdhdr_t or cfe_sb_tlmhdr_t so it will be correctly aligned . <section> it is safe to assume all remaining message types were already <number> - bit aligned because there were no remaining compiler warnings about this , which means this change by itself will not have any effect on the existing message sizes or alignment . however , when moving to a <number> - bit build it may become necessary to enforce <number> - bit alignment rather than <number> - bit alignment for <code> and in that case , the sizes and padding may change from what it currently is . <section> joseph hickey , vantage systems , inc .",2
"tblhandle used before validation in cfe_tbl_load <section> tblhandle used before validation <section> see code snip , invalid handle could cause fault <section> validate handle before using <section> <url> <section> in code <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , resolve doxygen warnings for tbl <section> fixes doxygen warnings for the tbl subsystem . fix # <number> <section> make doc , grep "" <allcaps> tbl </allcaps> "" build / doc / warnings . log <section> <email>",1
"cfe_es_cleanuptaskresources attempts to delete child task twice <section> cfe_es_cleanuptaskresources appears to attempt to delete a child task twice , first via cfe_es_cleanupobjectcallback and subsequently via a direct call to os_taskdelete <section> on linux , call cfe_es_restart_app on an app that has a child task , such as ci , fm , or hs in vxworks , can induce also by inducing an exception causing an application restart <section> app should exit and restart cleanly <section> see cfe_es_cleanuptaskresources <section> - pc , sp0 - s - os : linux , vxworks - versions [ e . g . cfe <date> , <allcaps> osal </allcaps> <date> , <allcaps> psp </allcaps> <number> . <number> , ci , fm , hs ] <section> my colleague alan wang attempted the following : <code> another colleague john hueber reported the following : > ci doesn ’ t restart when commanded because it calls cfe_es_exitapp with the wrong status ( running ) . > if i put a <number> second task delay in ci_appmain before calling cfe_es_exitapp the tasks restarts fine . > it looks like whenever cfe_es_exitapp gets called before the task is deleted then the restart is unsuccessful . > if the task is deleted before it gets to cfe_es_exitapp then the restart is successful . > if the task has child tasks then it takes longer to get to deleting the main task because the child task is in the list of resources that have to be deleted . > there is a bug in this part because deleting the resources of the task also deletes child tasks , and when the resources are deleted cfe_es_cleanupapp tries to delete child tasks ( again ) , which fails and the failure prevents a restart . > > i put ci in apps / hs / fsw / tables / hs_xct . c ( hs_xct_type_app_main ) and apps / hs / fsw / tables / hs_amt . c ( hs_amt_act_app_restart ) > then caused an exception in ci no - op processing by clearing an instruction . with the <number> second delay in ci_appmain the restart was successful . > without the delay the restart is unsuccessful . > <section> john n pham , northrop grumman",0
"latex generation issues of mission doc <section> when building the <code> file , multiple warnings are observed from the tex system . additionally , the make process itself ends in error . note that currently the <code> file still gets generated . <section> steps to reproduce the behavior : <number> . make sure that <code> is set to <code> in <code> <number> . do a <code> in <code> <number> . go to <code> <number> . do a <code> <number> . observe all the issues printed to stdout <section> latex warnings should not be generated . make should not end in error <section> leor bleier , <allcaps> nasa gsfc </allcaps> \ code <number>",1
"doxygen warnings <section> doxygen warnings due to lack of documentation in the following files : - <code> - <code> specifically for function <code> in both files <section> steps to reproduce the behavior : <number> . build documentation using <code> <number> . observe relevant warnings in <code> <section> functions should be properly documented to avoid warnings <section> leor bleier , <allcaps> nasa gsfc </allcaps> \ code <number>",1
remove conditional <allcaps> tbl </allcaps> compilation logic <section> with # <number> <allcaps> tbl </allcaps> is no longer optional ; conditional code / compilation configuration should be removed . <section> <email>,0
"remaining alignment warnings in unit test <section> there are a few remaining warnings in the unit test stubs and test cases when compiling on an architecture that has strict alignment requirements . <section> build with enable_unit_tests = true on a platform that requires strict alignment ( e . g . <allcaps> sparc </allcaps> , <allcaps> mips </allcaps> , etc ) . <section> should compile cleanly <section> example error ( first one to appear in my build ) : <code> <section> ubuntu <number> , cross compiling for <allcaps> mips cpu </allcaps> . <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , reference to deprecated cfe_spacecraft_id <section> change to <code> , which is the non - deprecated symbol . fixes # <number> <section> build with extended header and <code> and confirm success . <section> build now works with both extended headers and omit_deprecated options set . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",0
"reference to deprecated symbol when extended header enabled <section> if <code> is defined then this references a deprecated symbol and fails to build when <code> is also set . <section> build with both <code> mission config and <code> compile option . <section> should build successfully . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc",0
"( <allcaps> wip </allcaps> ) fix # <number> , es comment cleanup <section> draft to consider for comment updates ( remove end , remove function name ) fix # <number> <section> none <section> none <section> n / a <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , deprecate <allcaps> cfs </allcaps> / fs time conversion apis <section> deprecates cfe_time_cfe2fsseconds and cfe_time_fs2cfeseconds - in short the conversion / management of local os time vs mission time is not within the scope of cfe ( it does not manage local os time , so does not maintain an appropriate conversion factor ) . utilize the cfe_fs_header_t time for file creation if needed , synchronize local os time with mission time , or use the return from stat as a relative ( with reset caveats ) fix # <number> <section> build and unit test - <allcaps> simulation </allcaps> = native enable_unit_tests = true with and without omit_deprecated = true all passes <section> none other than no longer supporting <section> - hardware : cfs dev server <number> - os : ubuntu <number> - versions : master bundle + this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"memory alignment issues in <allcaps> time </allcaps> ( 3 2 bit , mcp750 , ccsds_ver_2 config ) <section> <code> <section> force alignment where possible without changing bits on the wire <section> remove <code> for this build <section> note there are other alignment issues for other configuration options (# <number> , # <number> ) but they do not show up for mcp750 with <allcaps> ccsds </allcaps> version <number> so are not critical to <number> . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"clarify pipe name scope in documentation <section> from <url> > although the pipe names will not collide with other application pipe names in the cfe this not correct , because pipe names <allcaps> will </allcaps> conflict with other application pipe names within the cfe . it is actually <allcaps> osal </allcaps> that enforces uniqueness of queue names which underpin the sb pipes . <section> update the line in the documentation . <section> none <section> see discussion on # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"cfe cmd / tlm packet clean up <section> cfe telemetry / command packets could be organized such that variables are ordered in descending size to reduce overall length . this would make them easier to maintain and remove some of the alignment issues / reduce required padding . there ' s also configurable length elements before spares , which does not make sense if the configuration changes . also should standardize spare / alignment names , many no longer make sense ( why "" <number> "" in example ) : <url> <section> dan knutsen <allcaps> nasa </allcaps> / goddard",2
"mismatched variable types in data structures <section> while auditing cfe tlm packets for <number> bit alignment issues , i noticed that we have instances of mismatched variable types in data structures . this results in data being truncated / corrupted . example : in cfe_es . h : : cfe_es_appinfo_t there are multiple addresses ( startaddress , codeaddress , etc ) declared as uint32 . they should be declared as cpuaddr variables - similar to cfe_es_appstartparams_t : startaddress and os_module_address_t : code_address . another example is the priority , stacksize , and exception action variables . see below for declaration trace : cfe_es_parsefileentry : unsigned int priority unsigned int stacksize unsigned int exceptionaction cfe_es_appcreate : uint32 priority uint32 stacksize uint32 exceptionaction cfe_es_appstartparams_t : uint16 exceptionaction uint16 priority uint32 stacksize cfe_es_appinfo_t : uint16 priority uint16 exceptionaction uint32 stacksize <section> dan knutsen <allcaps> nasa </allcaps> / goddard",0
"add documentation for <allcaps> tbl </allcaps> event messages in cfe_tbl_events . h <section> the following events are missing documentation : <number> . cfe_tbl_load_val_err_eid <number> . cfe_tbl_load_src_type_err_eid <number> . cfe_tbl_load_filename_long_err_eid <number> . cfe_tbl_load_short_file_err_eid <number> . cfe_tbl_load_tblname_mismatch_err_eid <number> . cfe_tbl_handle_access_err_eid <section> search <code> for <code> <section> add doxygen documentation like the other eids in the file . delete <allcaps> todo </allcaps> comment <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",2
"fix # <number> , es start table <section> fix # <number> this is a re - do of the <allcaps> cfe es </allcaps> "" startup "" table code . this includes unit tests ( coverage ) and requested "" volatile "" boot option . <section> both unit tests and running the core <section> this changes es to use a table to load libraries and load and start applications . this is a significant change to the internals , as libraries are loaded and applications are started in the es task ( spawned by the es main task ) and , of course , a table is used instead of a . scr file . - <allcaps> api </allcaps> change : internal <allcaps> api </allcaps> changes - behavior change : loading from . tbl instead of . scr <section> debian <number> vm <section> <email>",2
"cfe_sb_getmsgid use , ut_setforcefail does not set the return code ( returns <number> ) . <section> cfe_sb_getmsgid in cfe / fsw / cfe - core / ut - stubs / ut_sb_stubs . c . cfe_sb_getmsgid is not returning the plss_state_det_wakeup_mid set by ut_setforcefail . the problem i see is the msgid is now calculated by the msgptr which points to a buffer . msg ( defined in cfe_sb_rcvmsg ) but this buffer . msg ( streamid [ <number> ] and streamid [ <number> ] ) is set to all zeros and never set to the plss_state_det_wakeup_mid . in cfe6 . <number> , the msgid was calculated from the stubentry data which is set by ut_setforcefail . <section> steps to reproduce the behavior : here is my unit test sequence <code> <code> the msgid is <number> which should be plss_state_det_wakeup_mid . the reason is because the msgptr points to buffer . msg ( set to all zeros ) defined in cfe_sb_rcvmsg <code> the msgptr is passed to the cfe_sb_getmsgid , where the msgid is calculated using <hashtag> define </hashtag> ccsds_rd_sid ( phdr ) ( ( ( phdr ) . streamid [ <number> ] < < <number> ) + ( ( phdr ) . streamid [ <number> ] ) ) the calucated msgid is <number> since msgptr is pointing to buffer . msg which is set to all zeros . <code> note : for ut_default_impl ( cfe_sb_getmsgid ) ; i . i do see plss_state_det_wakeup_mid being used . <section> return plss_state_det_wakeup_mid <section> - hardware - os : centos <number> - versions : cfe <number> . <number> , <allcaps> osal </allcaps> <number> . <number> , <allcaps> psp </allcaps> <number> . <number> , chksm <number> <section> jose tovias <allcaps> caci </allcaps> / <allcaps> lzt </allcaps> technology",3
"missing registering contexts in stub functions i ’ ll work this issue the issue causes seg faults cause by not registering contexts . i resolved this by adding the missing registrations . cfe / fsw / cfe - core / ut - stubs / ut_evs_stubs . c : int32 cfe_evs_sendevent ( uint16 eventid , uint16 eventtype , const char * spec , . <repeated> ) { int32 status ; ut_stub_registercontext ( ut_key ( cfe_evs_sendevent ) , & eventid ) ; ut_stub_registercontext ( ut_key ( cfe_evs_sendevent ) , & eventtype ) ; < - - - - - missing ut_stub_registercontext ( ut_key ( cfe_evs_sendevent ) , spec ) ; < - - - - - missing . <repeated> } cfe / fsw / cfe - core / ut - stubs / ut_es_stubs . c : int32 cfe_es_writetosyslog ( const char * pspecstring , . <repeated> ) { int32 status ; ut_stub_registercontext ( ut_key ( cfe_es_writetosyslog ) , pspecstring ) ; < - - - - - missing . <repeated> } expected behavior return register buffer size = <number> when using cfe_evs_sendevent and buffer size = <number> when using cfe_es_writetosyslog . system observed on : hardware os : centos <number> versions : cfe <number> . <number> , <allcaps> osal </allcaps> <number> . <number> , <allcaps> psp </allcaps> <number> . <number> , chksm <number> reporter info jose tovias <allcaps> caci </allcaps> / <allcaps> lzt </allcaps> technology",0
"system log / event string table model unification in <allcaps> fsw </allcaps> and ut update <section> for <allcaps> cfe </allcaps> code that generates syslog messages , the coverage testing checks that a particular message was sent to syslog . the ut code uses a string table , but the <allcaps> cfe </allcaps> code has it hard - coded in the code . <section> unify the string table model in <allcaps> cfe </allcaps> so that all <allcaps> cfe </allcaps> code that uses strings for events , syslog , etc . store those strings in said table . this would simplify ut checks and would also allow for localization of the <allcaps> cfe </allcaps> codebase . <section> removing the ut string table would also make things simpler . <section> <email>",2
"<allcaps> cfe </allcaps> needs to provide cmake - based config file for <allcaps> osal </allcaps> <section> currently the <allcaps> cfe </allcaps> cmake script generates an <code> file for <allcaps> osal </allcaps> to compile with . <section> after nasa / osal # <number> is fixed ( pr nasa / osal # <number> ) the <allcaps> cfe </allcaps> will need to pass <allcaps> osal </allcaps> a configuration file in cmake syntax , which then <allcaps> osal </allcaps> uses to generate its own <code> . <section> needed for compatibility <section> joseph hickey , vantage systems , inc .",2
"cfe_es_send_mem_pool_stats_cc issues <section> there are multiple issues with the cfe_es_send_mem_pool_stats_cc command : <number> . the command / function ( s ) used are fundamentally flawed in that a user can send a seemingly benign command that can result in a segmentation fault if one of the command parameters is incorrect . for example , if the poolhandle parameter is set to zero a segmentation fault will result ( pretty much any value below xfffffe28 faults on my machine ) . this occurs when handle is validated via the cfe_es_validatehandle function . should consider modifying the cfe_es_validatehandle function + updating the unit test to test command on boundary / extreme conditions . <number> . on a <number> - bit machine if the poolhandle parameter is set to a valid value the function will fail . this is because cfe_psp_memvalidaterange – which is called via the cfe_es_validatehandle function as part of the validation process , limits the max memory range of the handle to xffe <elongated> . <number> . on a <number> - bit machine - compiler added padding will be applied to the command . the order of variable declaration should ideally be descending in size to avoid future conflicts . <section> command works nominally and is vetted via combination of unit / functional tests . <section> oracle vm virtualbox os : ubuntu - <number> versions : cfe <number> . <number> , <allcaps> osal </allcaps> <number> . <number> , <allcaps> psp </allcaps> <number> . <number> <section> dan knutsen <allcaps> nasa </allcaps> / goddard",0
"pipe name collision discussion <section> in <url> > although the pipe names will not collide with other application pipe names in the cfe , the developer / operator could become confused if every application named their pipe ( s ) "" my_pipe "" . it should be noted , however , that all pipes for a single application must have unique names . this does not seem to be true since when i add two apps that try to have the same pipe name i get a failure . <section> if i use the same . so file in my startup script but change the app name of the second one : <code> i get the following error : <code> as they are both trying to make the same "" app_pipe "" . <section> i thought given the text that the pipe names would still be unique to that application . <section> n / a <section> laptop distributor id : ubuntu <number> . <number> <allcaps> lts </allcaps> versions : cfe <number> . <number> , <allcaps> osal </allcaps> <number> . <number> , <allcaps> psp </allcaps> <number> . <number> <section> n / a <section> philip cooksey <allcaps> nasa </allcaps> ames ( <allcaps> kbr </allcaps> )",3
"fix # <number> , sb subscription report control on separate <allcaps> mid </allcaps> <section> moves inter - app commands to separate <allcaps> mid </allcaps> ( like hk request from <allcaps> sch </allcaps> ) . these requests only come from <allcaps> sbn </allcaps> as of now . no longer using the ground command <allcaps> mid </allcaps> . also updates the unit tests to match the changes ( checks new error , updates <allcaps> mid </allcaps> ' s for command tests ) . fix # <number> <section> build and ran tests local , also ci - <url> <section> <allcaps> sbn </allcaps> will need to init command with new <allcaps> mid </allcaps> <section> - hardware : cfs dev server <number> / ci - os : ubuntu <number> - versions : master bundle + this branch <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , remove es_app_debug functionality <section> deletes now unused cfe_es_countobjectcallback and cfe_es_listresourcesdebug . fix # <number> <section> ci - <url> <section> none , flag was undefined <section> - hardware : ci - os : ubuntu <number> - versions : master bundle + this branch <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
global build options no longer global <section> deprecation flags not showing up in build for cfe / apps / <allcaps> psp </allcaps> <section> prep with <allcaps> simulation </allcaps> = native enable_unit_test = true omit_deprecated = true make <allcaps> verbose </allcaps> = true and see the <allcaps> deprecated </allcaps> flags not applied to cfe / apps / <allcaps> psp </allcaps> <section> global flags should be global <section> none <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle ( was testing fix to # <number> ) <section> critical for ci testing . <repeated> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"add "" special "" es shell commands as real commands <section> es special commands using the <allcaps> shell fc </allcaps> and a special string do not follow command processing model , missing requirements , etc cfe_es_listapplications cfe_es_listtasks cfe_es_listresources <section> implement these as real commands <section> delete these <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , string operations on gcc9 <section> ensure clean build , no warnings on string operations using <allcaps> gcc </allcaps> <number> . <number> . fixes # <number> <section> build code with default config , <allcaps> simulation </allcaps> = native <allcaps> buildtype </allcaps> = release on <allcaps> gcc </allcaps> <number> . <number> . confirm successful build with no warning . confirm unit tests passing sanity check <allcaps> cfe </allcaps> operation <section> no impact to behavior <section> ubuntu <number> <allcaps> lts </allcaps> <number> bit <section> some string ops were genuinely incorrect ( particularly in ut ) but some were perfectly ok and handled correctly per the c spec . in particular the new "" rules "" that gcc9 warns about make the <code> library function ( and some others ) somewhat off - limits even if used correctly . the new string truncation checking feature of <allcaps> gcc </allcaps> generates a boatload of false positives and basically makes certain library functions generate warnings even if used correctly , some other projects have been adding <code> compiler flag to avoid this . however with these workarounds <allcaps> cfe </allcaps> is able to build without adding this , but apps might need it . <section> joseph hickey , vantage systems , inc .",0
"many string truncation warnings with newer <allcaps> gcc </allcaps> <section> ubuntu has released <number> <allcaps> lts </allcaps> which includes <allcaps> gcc </allcaps> <number> . <number> . when using this compiler it implements a much stricter ( and often over - zealous ) checking of string ops . for instance : <code> <section> build code with default config using <allcaps> gcc </allcaps> <number> . <number> , with optimization enabled and full warnings . <section> code should build cleanly . <section> ubuntu <number> <allcaps> lts </allcaps> <number> bit . <section> unfortunately <allcaps> gcc </allcaps> warns about <allcaps> any </allcaps> construct which <allcaps> might </allcaps> truncate , even if truncation is anticipated and handled properly in the code . <allcaps> gcc </allcaps> now declares that one is never allowed to truncate anything in a c library string operation , even if you read the manual and coded it correctly per the c spec , it ' s still wrong to gcc9 . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , remove old cfe_arinc653 - related tests <section> fix # <number> removes all conditional preprocessing blocks related to cfe_arinc653 . ( only used in <code> and <code> ) . <section> steps taken to test the contribution : <number> . standard build and test procedure . <code> , <code> , <code> set to <code> then <code> , <code> all unit tests passed . no errors reported by cfs executable . <section> none <section> - imac ( retina 4 k , <number> ) - os : ubuntu <number> ( via vmware fusion <number> . <number> ) - <allcaps> gcc </allcaps> : <number> . <number> - versions : master bundle with this commit <section> also successfully built using custom docker images ( centos <number> , ubuntu <number> , and ubuntu <number> ) implementing the standard build procedure . in this context , different combinations of <code> and <code> were used . no errors reported by cfs executable . <section> none <section> guillaume lethuillier personal , individual <allcaps> cla </allcaps> submitted",2
"remove es_app_debug ifdef and related code <section> debug code exists in flight code , uses printf , ifdefed out with es_app_debug . undocumented option . <section> remove . <section> n / a <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , deprecate decompress <section> fix # <number> removes untraced capabilities to decompress libraries or apps on load . for non - startup apps , fs can be used . for startup , recommendation is to compress / decompress as part of boot / startup vs individual applications / libs at load . fix # <number> by deprecating decompress it can be moved to the fs app . fix # <number> static code analysis issues in decompress now n / a <section> steps taken to test the contribution : <number> . standard build with and without code deprecated , <allcaps> simulation </allcaps> = native , enable_unit_tests = true <section> no longer automatically decompresses apps / libraries as part of load <section> - hardware : cfs dev server <number> - os : ubuntu <number> - versions : master bundle + this commit <section> fs app updates will add decompress functionality , and decompress is planned to be implemented as a replaceable library <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
remove old cfe_arinc653 related tests <section> code breaks if cfe_arinc653 is defined . <section> remove old ifdef ' ed out test code <section> none <section> only used in fsw / cfe - core / unit - test / es_ut . c <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"unit tests fail to build when extended headers enabled <section> as a test of the most recent integration candidate , i attempted to verify operation with extended headers but the unit test code fails to build in this configuration . the following errors exist in <code> : <code> <section> build according to instructions , but set : <code> in mission config . <section> build should succeed . <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , infer osal_system_bsptype from cfe_system_psp_name <section> normally the <allcaps> cfe psp </allcaps> uses / links with an <allcaps> osal bsp </allcaps> of the same name . this removes the need to explicitly specify osal_system_bsptype in the toolchain file , as it can be reliably inferred . fixes # <number> this is also another alternative way to fix # <number> <section> build with defaults ( as in <allcaps> readme </allcaps> , e . g . a simple <code> ) , as well as <code> , and for i686 - rtems4 . <number> platform . confirm successful build . also "" forced "" a mismatch by hacking the i686 - rtems4 . <number> toolchain to request bad combinations , and confirm that the build system warns of the mismatch now : if <code> is set to <code> , the following warning happens in <code> <code> likewise if the <code> is set to <code> , the follow is seen ( from <allcaps> osal </allcaps> <sad> <code> finally removed settings of osal_system_ostype and osal_system_bsptype from the toolchain and confirmed that code correctly builds without issue , using the pc - rtems <allcaps> bsp </allcaps> and rtems os layers , as expected for this toolchain . <section> - mismatches between <allcaps> psp </allcaps> / <allcaps> bsp </allcaps> / os are now detected and warned about during make prep - only the cfe_system_pspname is actually required to be specified for a <allcaps> cfe </allcaps> build now . others can be omitted . <section> ubuntu <number> <allcaps> lts </allcaps> <number> bit , with i686 - rtems4 . <number> cross target <section> the related change to infer osal_system_ostype from osal_system_bsptype is in nasa / osal # <number> and pull request nasa / osal # <number> . if it is desired to merge separately this can still be merged but it will have to continue setting osal_system_ostype . <section> joseph hickey , vantage systems , inc .",0
"define toolchain via <allcaps> tgt </allcaps> <x> _system in sample configuration <section> see <url> cpu toolchain naming hack . <section> transition to defining the toolchain explicitly , eventually remove the hack support logic . <section> none <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"update build scripts so only cfe_system_pspname needs to be specified <section> currently when cross compiling the user - supplied scripts / toolchain file need to specify three configurations : - cfe_system_pspname - osal_system_bsptype - osal_system_ostype however , although an os layer can have multiple different <allcaps> bsp </allcaps> / <allcaps> psp </allcaps> layers , each <allcaps> psp </allcaps> only works with a specific os layer . <section> the <allcaps> cfe </allcaps> build should only require that cfe_system_pspname is specified . it should automatically choose the right <allcaps> osal os </allcaps> / <allcaps> bsp </allcaps> layers that correspond to that <allcaps> psp </allcaps> . <section> leaving it as - is has a potential for mismatching incompatible layers . <section> joseph hickey , vantage systems , inc .",2
"split unit - test files <section> using the eclipse <allcaps> ide </allcaps> , the large size of the unit test source files triggers the "" scalability mode "" . <section> there ' s little reason the source files need to be monolithic , splitting the unit test code ( further ) into separate files organized by <allcaps> api </allcaps> function or groups of related functions will improve organization , readability and performance . <section> leaving the files as - is . <section> <email>",2
"make prep broken out of the box <section> prep fails out of the box when following <allcaps> readme </allcaps> instructions : <code> <section> steps to reproduce the behavior : <number> . follow the <allcaps> readme </allcaps> instructions , make prep fails . <section> expected it to default to pc - linux as in the past . <section> the following does not set osal_system_bsptype since cfe_system_pspname and osal_system_ostype is defined . <repeated> <url> <section> - hardware : cfs dev server - os : ubuntu <number> - versions : master bundle <section> short term work around - pass in <allcaps> simulation </allcaps> = native at prep , or likely can define the target system in targets . cmake ( 2 nd approach not tested yet ) <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"<allcaps> cfe tlm </allcaps> header needs update to correspond with <allcaps> cmd </allcaps> header previous issue # <number> made it so the <allcaps> cmd </allcaps> secondary header was always in a consistent byte order , such that the content is independent of the endianness of the machine which processes / generates the packet . the submitted fix for this only changed the <allcaps> cmd </allcaps> header , leaving the <allcaps> tlm </allcaps> header alone . for consistency , the network byte order rule should be applied to the <allcaps> tlm </allcaps> header as well . _originally posted by <user> in <url>",2
utilize cmake interface libraries <section> see conversation around <url> interface libraries may be a cleaner approach than current implementation <section> consider utilizing interface libraries <section> leave as - is <section> see # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
replace os_fs_ * return codes with common definitions <section> there is mixed use of os_ * and os_fs_ * return codes . <section> suggest deprecation of the os_fs_err_ * defines and switch to common definitions . <section> nasa / osal # <number> nasa / osal # <number> <section> dan knutsen <allcaps> nasa </allcaps> / goddard,2
"memory alignment issue in es <section> <code> <section> resolve bug . <section> none . <section> other shell issues , # <number> , # <number> , etc . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"question on table service update procedure and notifications by message <section> i guess some more documentation on this procedure would be beneficial when talking about the table services . this is related to issue # <number> but more on documenting that feature . specifically , there really is not a lot of documentation on notify by message function : > int32 cfe_tbl_notifybymessage ( cfe_tbl_handle_t tblhandle , cfe_sb_msgid_t msgid , uint16 commandcode , uint32 parameter ) ; we want to use this to not have to poll for changes which works but i am slightly confused on the notification process . <section> i have enabled notify by message and i execute the following to test the app : <number> . upload new file to "" spacecraft "" ( just a new table with the table ' s exact name in it ) <number> . send command to load table ( this goes into inactive buffer ) : <number> . . / cmdutil - - endian = le - - host = localhost - - port = <number> - - pktid =0 x1804 - - cmdcode = <number> - - string = "" <number> <annoyed> cf / apps / sampleapplettb2 . tbl "" <number> . send command to validate table in inactive buffer <number> . . / cmdutil - - endian = le - - host = localhost - - port = <number> - - pktid =0 x1804 - - cmdcode = <number> - - half = <number> - - string = "" <number> : sampleapplet_app . satable1 "" <number> . <section> <number> . send command to active table <number> . . / cmdutil - - endian = le - - host = localhost - - port = <number> - - pktid =0 x1804 - - cmdcode = <number> - - string = "" <number> : sampleapplet_app . satable1 "" <number> . <section> questions : first , is this the ideal process for updating tables in flight ? i mostly had to piece together this by looking through the public headers . if i happened to just mistakenly miss some documentation on this then a pointer to that documentation would be awesome ! second , why is there a message after the validation function if the app can not do anything since the new table is still in the inactive buffer . is this a way to potentially ask the app to release the table pointer if it had been holding on to it ? <section> n / a <section> maybe there should be a issue format for questions ? <section> philip cooksey , <allcaps> nasa </allcaps> ames thank you for your time and help !",3
"unit tests fail to build when message_format_is_ccsds_ver_2 is enabled <section> unit tests fail to build when message_format_is_ccsds_ver_2 is enabled <section> enable message_format_is_ccsds_ver_2 in <code> run <code> <section> compilation succeeds , however build actually fails due to missing <code> <section> this can be fixed by doing the following <code> however , subsequently a checksum error is encountered when running the tests . this was worked around by doing the following , but unsure if the workaround is correct . <code> <section> - hardware : n / a - os : rhel7 - versions cfe <date> <section> john n pham , northrop grumman",0
document length limit of os_max_path_len and os_max_api_name includes null terminator <section> documentation not clear <section> document length limit of os_max_path_len and os_max_api_name includes null terminator <section> none <section> nasa / osal # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"unit tests need to link with ut_coverage_compile_flags / ut_coverage_link_flags <section> nasa / osal # <number> cleans up the compiler flag management , and as part of this it exports two variables , ut_coverage_compile_flags and ut_coverage_link_flags , rather than a single ut_c_flags value . <section> the unit tests need to use these variables , not ut_c_flags . <section> needs to be included with the nasa / osal # <number> merge . <section> joseph hickey , vantage systems , inc .",0
"cfe_tbl_loadfromfile ( ) should automagically add extension one issue that is quite an annoyance with the text - based startup file is that it lists the fully - qualified file name , including extension . the issue is that the extension varies from system to system , so when i build with e . g . <code> the extensions need to be <code> , but when building for <allcaps> rtems </allcaps> it needs to be <code> . ideally i ' d like to see a solution that only lists the basename of the app file in the user - maintained source file , and the extra info , in particular the extension , is attached by the build system based on the file type of loadable modules for the particular platform you are building . however the first step to any of this would be to get this table - based change in place , then smarter translation on the build side could be a follow - on . _originally posted by <user> in <url>",2
"improve es reset area memory allocation <section> currently the <allcaps> psp </allcaps> provides a single <allcaps> api </allcaps> <code> which is sized according to a user - specified <code> . with a note that says : > this area must be sized large enough to hold all of the data structures . it should be automatically sized based on the cfe_es_resetdata_t type , but circular dependancies in the headers prevent it from being defined this way . this is far from ideal , and in the default configuration 1 7 0 kib is allocated for this area where only 1 2 9 kib is actually used , wasting a fair bit of memory . furthermore , the circular dependency issue was only really a problem in the classic build . in the cmake build the "" target_config "" mechanism can be utilized here to make this a non - issue . <section> the <allcaps> psp </allcaps> generally allocates these memory spaces dynamically at start up anyway . - in the mcp750 this is based on <code> and the addresses are calculated from this base . - in pc - linux these are sysv shared memory segments . - in pc - rtems these are just <code> ' ed to simplify usage in <allcaps> qemu </allcaps> ( data does not survive a reset ) . <allcaps> cfe es </allcaps> should publish the _actual_ size required for its persistent data structures , and this actual size should be used when computing the addresses of these memory areas , rather than a compile - time fixed size which is almost certainly either too big or too small . <section> this issue is related to changes occurring in the exception and reset log implementation ( issues # <number> , # <number> ) . as part of this more of the er log ( or in particular , storing of exception context ) will be moved to the <allcaps> psp </allcaps> rather than being fully managed by es . this in turn changes the size of the cfe_es_resetdata_t structure substantially , and exposes the weakness / issues in how this is being currently allocated . <section> joseph hickey , vantage systems , inc .",2
"<allcaps> evs </allcaps> "" cfe_platform_evs_log_on "" option unit test failure <section> the event services subsystem has a broken compile - time platform option called <code> . the description says : "" the cfe_platform_evs_log_on configuration parameter must be defined to enable <allcaps> evs </allcaps> event logging "" if ut is disabled , then <allcaps> cfe </allcaps> core itself actually seems to build and run ok . however , certain risky things are not clear in the code that : - the <code> will be left uninitialized - the <code> will be left as <allcaps> null </allcaps> the code that accesses these seems to be mostly protected by checking the separate <code> member boolean in the outgoing telemetry packet . this seems like a weak design , in particular because the telemetry packet is supposed to be informational , not an active control structure . <section> disable the <code> option , and build with <code> . <allcaps> cfe evs </allcaps> unit test fails to build with a compiler error . <section> ubuntu <number> <allcaps> lts </allcaps> <number> bit . <section> unless there is a specific requirement for <code> as it stands today , my recommendation would be to deprecate this option and keep it always on , which reduces the testing matrix , and makes the <allcaps> fsw </allcaps> code more consistent . platform config options that actually add / remove <code> code should be avoided , as this has proven to be a testing / support issue time and time again . in this case , only the code that initializes the structures is compiled out . all the code that reads / writes to it is still compiled in , but skipped via a runtime test . so this is not saving much in the way of code / text space . if the goal of this option is to save data space memory , then _mostly_ the same effect can be achieved by keeping the log very small , by setting <code> to a very low number , such as <number> . in this mode the log structure uses only <number> bytes of memory on an x86 - <number> machine , down from <number> bytes with the default size of <number> . and the unit tests still build and pass with the max set to <number> , and it reduces the amount of conditionally - compiled code and variances on the <allcaps> fsw </allcaps> side . <section> joseph hickey , vantage systems , inc .",0
"cfe_sb_getlastsenderid returns pointer to internal data , possible race <section> cfe_sb_getlastsenderid returns pointer to data that could be overwritten at any time see <url> for related comments <section> conceptually - app calls cfe_sb_getlastsenderid , gets pointer , data gets overwritten , app takes action based on overwritten data vs original context <section> no race . <section> <url> <section> n / a <section> # <number> <section> jacob hageman",0
cfe_tbl should send events instead of using syslog <section> there ' s still a fair bit of code in cfe_tbl that sends syslog messages rather than generating events . <section> these messages should be removed and events generated where appropriate . <section> <email>,2
"fix # <number> , better events for cfe_tbl_load ( ) <section> addresses # <number> but this is a draft , still need ut code updates . simplified changes for cfe_tbl_load ( ) to make the code a bit easier to follow ( hey , events generated when results are off - nominal , instead of at the end ? ) partially addresses # <number> <section> initial build / run , ut not updated yet . <section> internal cfe_tbl_loadfromfile ( ) <allcaps> api </allcaps> changed slightly to add appname as a parameter . return value from loadfromfile ( ) no longer relevant for event generation . <section> debian <number> <section> <email>",2
add reference to deployed cfe user ' s guide in <allcaps> readme </allcaps> . md <section> user ' s guide is not included in repo <section> add reference to <url> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"cfe_evs_sendevent stub should provide full context <section> the cfe_evs_sendevent stub for ut - assert does not provide its full context . it only provides the first argument , eventid , providing no way to for unit tests to verify the correct eventtype or event message text was sent . <section> steps to reproduce the behavior : <number> . see the cfe_evs_sendevent stub <url> . only eventid is registered with the context and copied . <section> the cfe_evs_sendevent stub should provide its full context for unit testing purposes , including the eventid , eventtype , and the event message string . <strike> my preference would be that the event message text provided would not include the format specifiers and instead be the resulting string with the format specifiers replaced with the appropriate text . </strike> i have been convinced and also talked myself out of that preference . <section> <code> <section> - cfe <date> <section> n / a <section> eric gilligan <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> - <number>",2
table load refactor for cfe_tbl_load ( ) / cfe_tbl_loadcmd ( ) overlap and complexity reduction <section> there ' s code commonalities between cfe_tbl_loadcmd ( ) and cfe_tbl_load ( ) . also varying use of return vs status codes and many if layers within table load should be refactored to reduce complexity . goal ( per sw sys eng handbook guidance ) is cyclomatic complexity of <= <number> . <section> code should be consolidated between cfe_tbl_load ( ) and cfe_tbl_loadcmd ( ) . refactor to simplify / separate into functions . <section> <email>,2
add build verification scripts ( <allcaps> ctf </allcaps> based ) <section> no build verification scripts for command requirements <section> add build verification scripts <section> none . <section> need to discuss how we approach this . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"cfe_evs_generateeventtelemetry should check return code from cfe_sb_sendmsg ( ) <section> <allcaps> evs </allcaps> , when called to send events , eventually calls down to cfe_evs_generateeventtelemetry ( ) which sends the event to the ports and to the sb via cfe_sb_sendmsg ( ) . however , it currently does not check the return code from sendmsg ( ) . <section> generateeventtelemetry ( ) should report an error to syslog ( and the ports ? ) if it ' s unable to send the event to the sb ( preferably including the original event inside the syslog error report . ) <section> leaving it as it is , it ' s unlikely that cfe_sb_sendmsg ( ) would generate an error . <section> note also that if sendmsg ( ) [ really sendmsgfull ( ) ] generated an error , it would send an event through <allcaps> evs </allcaps> , causing a loop between sb code and <allcaps> evs </allcaps> code ( that will likely go on until the system crashes ) . again , this condition is unlikely , but this logic should be fixed to prevent loops . <section> <email>",2
"remove local - endian <allcaps> sid </allcaps> macros , and unnecessary abstraction of mask / shift <section> the following macros are not clearly documented as to use . they only work on a local endian streamid ( like what comes from <code> ) . <url> the ccsds_rd_bits / wr_bits is not <allcaps> ccsds </allcaps> related , and is just a mask / shift . more straight forward to just use mask / shift . see conversation on <url> <section> remove these since they just add to confusion . just use the ccsds_rd_sid / <allcaps> apid </allcaps> / <allcaps> shdr </allcaps> / <allcaps> type </allcaps> / <allcaps> vers </allcaps> macros directly on the header . <section> could deprecate , but no known uses . <section> conversation stemmed from # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> * <allcaps> edit </allcaps> * fixed code blob * <allcaps> edit </allcaps> * fixed my initial issue title and updated description per <user> clarification of intended use",2
"unit test - split "" <allcaps> and </allcaps> "" - ed conditionals into separate asserts <section> debugging unit tests can be very difficult , frustrating , and time consuming . one major part of the problem which makes them very debugging - unfriendly is something like the following : <code> the problem with this type of construct is that there are <number> separate tests being combined into one single assert . when it fails , it is not possible to see which of the three conditions are evaluating false . many of them call functions within the test case , too , which further obfuscate what the actual return value was . the only way to test this is run it in a debugger , break at the start of the test , then set a breakpoint inside e . g . ut_eventisinhistory to see what it returned . <section> <number> . at a minimum - split the <code> conditions into separate asserts . this would _at least_ let the developer know which one is actually the fault . <number> . nice to have - employ the macros similar to what <user> added in nasa / osal # <number> , which show the _values_ tested in the log , not simply just a pass / fail . <section> continue struggling to figure out what actually went wrong every time a ut failure comes up . <section> joseph hickey , vantage systems , inc .",2
"ability to register a function call for the performance manager ( or call a <allcaps> psp </allcaps> stub ) <section> sounds like historical ( and current ) missions typically end up adding calls to hardware from the performance calls . <section> either add in a <allcaps> psp api </allcaps> and call from es , or support an <allcaps> api </allcaps> to add a function call . <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_es_createobjects calls cfe_es_writetosyslog while holding shared data lock <section> during core service task create , <code> calls <code> while already holding the shared data lock in two places , resulting in a recursive lock / deadlock . * location <number> <url> * location <number> <url> <section> it appears it should be calling <code> instead . <section> the second location makes the issue pretty clear : <code> <section> - os : freertos <number> - versions : cfe <number> . <number> , <allcaps> osal </allcaps> <number> . <number> <section> mike stewart , capella space corporation",0
"sb message id documentation is unclear and arguably misleading <section> as a new cfs developer , i have been trying to build my first complete app utilizing the cfe application developer doc ( and as of the last <number> days the md ) . rather than copy / paste the sample_app , it has been my intent to build up my experience by starting from scratch ( i . e . minimize copy / paste ) . thus , when setting up message ids , i utilized the logic explained in section <number> . <number> . it ' s fairly simple and without really knowing what <allcaps> ccsds </allcaps> represented , i read this as follows "" pick any number , let it be unique within the application , but do not set the upper <number> bits "" . so i did . then i finally got around to trying to use the ground system tool by adding my app to the tool . it was at that time , i realized that i had a problem . all my "" commands "" were being interpreted as "" telemetry "" . i figured that i might have associated the wrong info into the tool . no , everything checked out with the tool setup . then i went through my app trying to see if maybe i was improperly initializing or associating something . i could find nothing . then i jumped into the debugger . i found that the first byte of my message id was being checked for <number> characteristics . my message id was failing the two checks and hence my "" command "" had become a "" telemetry "" message and could therefore never be utilized to drive command codes . after researching <allcaps> ccsds </allcaps> and examining the cfe logic , i was able to finally track down the exact spec that outlines what bits should be set within a message id . the lightbulb came on . <repeated> this is why all the default apps use 0x 1 8 <section> values in their msg . h files . unfortunately , it was not explained in the sample code or documentation . this information is massively impactful and should not be left out of the cfe app dev guide . the guide unfortunately makes it sounds like you can pick anything but that is far from the truth . it ' s much more stringent than keeping the <number> most significant bits at zero . <section> the cfe documentation should clearly outline the following : <number> . in the default build of cfs , you are bound to <allcaps> ccsds </allcaps> rules . <number> . explain how those rules influence the cfe api ( aside from message ids , what else do devs need to know about ? ) <number> . and most importantly , clearly explain why / when you need to set bit fields <number> and <number> in your message id . <number> . in the sample_app , it would be nice have some contextual information related to creating proper ids ( for those who might copy / paste the app ) . also , <allcaps> apid </allcaps> is mentioned in the acronyms list but it not utilized in the dev guide document . this needs to be explained or arguably removed from the document . <section> none . devs rely on the documentation to create their apps . <section> i found the info that ties the cfe bit check to an actual spec at <url> ( see section <number> . <number> ) working with dev guide updated as of commit 5 6 0 2 bff3 <section> maurice prather",1
"possibly outdated os_initfs / os_mkfs logic for creating / ram <section> cfe <number> . <number> + still retain the original logic for setting up <code> . for poweron resets it works fine , however i think the logic may now be outdated for processor resets . on a processor reset , the flow is : <number> . attempt to initialize the filesystem with <code> . <number> . if that fails , format the filesystem with <code> . this logic may have made sense for older osals , but i do not see how it is helpful with <allcaps> osal </allcaps> <number> + . in the new <allcaps> osal </allcaps> , both <code> and <code> call <code> , with only the final argument <code> differing . both call <code> to initialize the ram disk . for <code> , this is the only impl function called . in the <code> case , <code> is only checked if <code> succeeded , and only if it did , then <code> is called . because the two <allcaps> osal </allcaps> functions follow exactly the same path up until the check for <code> , it seems to me that if <code> fails , then <code> cannot possibly succeed . in other worse , if <code> fails , then the cfe will inevitably panic instead of actually attempting to reformat <code> . <section> n / a <section> i think the intended logic in the cfe start up was to attempt to initialize an existing <code> filesystem on a processor reset , but reformat it if that failed and continue to boot . with the current <allcaps> osal </allcaps> , the only way i can see for that to work would be something like this : <number> . initialize the filesystem with <code> . if that fails , panic . <number> . attempt to mount the filesystem with <code> . <number> . if that fails , use <code> to remove it , and then call <code> . <number> . attempt again to mount with <code> . if that fails , panic . the other possible change for this to work as i think it is intended would be to make <code> fail if given an invalid filesystem . but as written for that to happen , <code> would need to fail , which would also make <code> always fail . <section> cfe <allcaps> ram </allcaps> disk creation on processor reset : <code> os_filesys_initialize ( ) logic : <code> <section> - os : shared <allcaps> osal </allcaps> - versions cfe <number> . <number> , <allcaps> osal </allcaps> <number> . <number> <section> it ' s very possible that i am misunderstanding something here , in which case i apologize in advance for the noise ! <section> mike stewart , capella space corporation",2
"fix # <number> , cfe_es startup table <section> the following replaces the "" startup script "" code with a table file . note this does <allcaps> not </allcaps> include unit test code changes , so ci will fail . this is for <allcaps> ccb </allcaps> consideration before i spend a bunch of time cleaning up ut . fix # <number> <section> builds and runs . <section> replaces the startup script file with a start table that es loads . <section> debian <number> <section> <email>",2
add requirements to cover isvalidmsgid and getpkttype <section> exposing cfe_sb_isvalidmsgid and cfe_sb_getpkttype needs to flow from a requirement given the current cfe requirements pattern . <section> add the requirements <section> none <section> # <number> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"es should use a table for the "" startup script "" <section> the es "" startup script "" file ( a <allcaps> csv </allcaps> - like configuration of which applications and libraries to load at runtime ) is not very well designed ( using sscanf ) and not consistent with how cfs generally manages runtime configurations with tables . <section> replace the . scr code with a table . <section> one alternative is to update the . scr parser , and / or use one / more industry - standard file formats ( <allcaps> json </allcaps> , <allcaps> yaml </allcaps> ) and an open - source parser that we would include ( copy into ) in our codebase . general consensus is that the <allcaps> ccb </allcaps> prefers going with the standard table mechanism . <section> might be interesting to see if there ' s a way to change a table without having to re - compile . <repeated> otherwise would be helpful to have a document detailing how , post deploy , an operator can update the es configuration without having to do a full re - deploy . <section> <email>",2
"fix # <number> , deprecate cfe_os_ abstracted error codes <section> fix # <number> - deprecates cfe_os_ abstracted os error codes added cfe_omit_deprecated_6_7 just to be consistent also fix # <number> - removes non - existent codes <section> steps taken to test the contribution : <number> . ci - see <url> <section> none <section> - hardware : <allcaps> amd </allcaps> - os : ubuntu <number> - versions : bundle + this change <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> cfe </allcaps> needs to compile with the interface properties provided by <allcaps> osal </allcaps> <section> after the changes introduced by nasa / osal # <number> , the <allcaps> osal </allcaps> cmake script will no longer force setting of <code> directly in the <allcaps> cfe </allcaps> build by overwriting this value ( which is good ) . instead , any required compile definitions and related information will be conveyed in the more appropriate manner , through the <code> and <code> on the "" osal "" library target . <section> to work with this change , the <allcaps> cfe </allcaps> needs to explicitly check these properties on the osal target and use the values . by setting a directory - scope property at the top level , it will apply to all code . <section> cmake does this automatically so long as the executable directly links with <allcaps> osal </allcaps> . however , this does not apply to the apps which are built as a <code> . this is why it is easier to set the directory property so its all - inclusive . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , remove mission / platform include dirs <section> fixes # <number> removes classic build directories . <section> steps taken to test the contribution : <number> . tested w / ci bundle branch on fork , see : <url> <section> none , reduces user confusion due to duplicate defines <section> - hardware : ci ( <allcaps> amd </allcaps> ) - os : ubuntu <number> - versions : master w / this commit <section> only dependence found in framework was in cfs - groundstation . see <allcaps> x <elongated> </allcaps> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"unify "" table "" and "" . scr "" file loading <section> we currently have two ways of populating configuration data in cfs , the "" table "" <allcaps> api </allcaps> ( loading a binary data structure into memory ) and a "" configuration file "" ( cfe_es_startup . scr ) . these have similar purposes ( load - time configuration ) and could use the same <allcaps> api </allcaps> ? <section> it should be fairly straightforward to automagically determine whether a "" table "" file is an <allcaps> elf </allcaps> or a text file ( first byte = = 0x 7 f => <allcaps> elf </allcaps> ) and if it ' s not <allcaps> elf </allcaps> it should hand off to a text parser ( provided by <allcaps> osal </allcaps> ? ) to parse the table into an in - memory data structure . the current "" csv - like "" structure would not handle complex ( e . g . nested ) data structures but for common tables it should be sufficient . alternatives would be <allcaps> json </allcaps> or <allcaps> yaml </allcaps> or some other text format , but would require a way to disambiguate . table files trade efficiency for easy editing . <section> stick with the separate es code for loading the . scr file and table code . <allcaps> sbn </allcaps> previously used a similar . csv file format for its load configuration but it ' s been moved to a table - based configuration . <section> <email>",2
"fix # <number> , updates comments to note that the length limit of os_max_path_len and os_max_api_name includes null terminator <section> fixes # <number> related to nasa / osal # <number> , updates documentation to note that the actual length limit of os_max_path_len and os_max_api_name include the null terminator . <section> ran unit tests . <section> oracle vm virtualbox os : ubuntu - <number> versions : cfe <number> . <number> , <allcaps> osal </allcaps> <number> . <number> , <allcaps> psp </allcaps> <number> . <number> contributor info dan knutsen <allcaps> nasa </allcaps> / goddard",1
"fix # <number> , update <allcaps> rtems </allcaps> example toolchain <section> bring the example toolchain for i686 - rtems4 . <number> back into sync with the current <allcaps> psp </allcaps> and platform build module for this system . fixes # <number> <section> build software for i686 - rtems4 . <number> per <allcaps> readme </allcaps> instructions using this example toolchain file . sanity - check <allcaps> cfe </allcaps> build by ensuring it boots and accepts commands . <section> builds without error . <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit ( build host ) building for i686 - rtems4 . <number> <section> joseph hickey , vantage systems , inc .",0
"<allcaps> rtems </allcaps> example toolchain file incompatible with current <allcaps> psp </allcaps> <section> the example <code> file is no longer compatible with the <allcaps> rtems </allcaps> module within the <allcaps> psp </allcaps> . cmake fails to configure , i get output as follows : <code> <section> build using example toolchain file from sample_defs with unmodified <allcaps> psp </allcaps> , adjusting only for local installation paths ( rtems_bsp_top ) . <section> build should succeed . <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit ( build host ) building for i686 - rtems4 . <number> <section> failures is related to the "" specs "" options on the compiler . the toolchain file and <allcaps> rtems </allcaps> module in the <allcaps> psp </allcaps> got out of sync somewhere along the development path . <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , update app dev guide int handler <section> document change only , updates the interrupt handler section to note <allcaps> osal </allcaps> deprecation fixes # <number> <section> none , documentation only <section> none <section> n / a <section> related to <url> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
app dev guide - interrupt handling section update to indicate deprecated <section> related to <url> need to keep guide up - to - date <section> update guide <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"fix # <number> , resolve ci warnings and add badge <section> resolves warnings and adds badge to readme fix # <number> <section> steps taken to test the contribution : <number> . ci only <section> no travis - ci configuration warnings <section> - hardware : ci - os : ubuntu <number> - versions : bundle w / this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix travis - ci config warnings and add badge <section> build config validation ( from travis - ci ) - root : deprecated key sudo ( the key <code> has no effect anymore . ) language : unexpected sequence , using the first value ( c ) root : missing os , using the default linux also add badge on <allcaps> readme </allcaps> <section> see <url> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , <allcaps> ccsds </allcaps> command secondary header endian agnostic <section> implement <allcaps> ccsds </allcaps> command secondary header such that it is endian agnostic in code and unit test support . fix # <number> <section> steps taken to test the contribution : <number> . tested via bundle ci ( including non - zero command send to reset ) <number> . also tested locally with enabling to via cfs - groundsystem this covered both direct cmdutil call and cfs - groundsystem use . <section> cmd code ( and checksum ) are always in the same place ( matches <allcaps> gsfc </allcaps> spec for command secondary header ) <section> - hardware : ci and cfs dev server - os : ubuntu <number> - versions : test bundle with this change and <url> in cfs - groundstation <section> see also <url> these should be merged together <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"cfe_es_runloop increments the main task executioncounter rather than the task that called it <section> inside the <code> function itself , it looks up the maintaskid of the caller and only increments _that_ execution counter , not the execution counter of its own task record . this means no matter what child task actually calls this function , it implements the execution counter of the main task only . note that if the real main task is doing something else and also increments its own task counter , this is a race condition . <section> i suggest one of the following : <number> . just have <code> invoke <code> to increment the counter for the task from which it was called . so if it gets called from a child task , then that child task gets incremented , not the main task . this is at least straightforward / consistent and avoids the race condition . <number> . maintain a separate "" app "" exec counter which is incremented by cfe_es_runloop ( only ) , and use the <code> to account for other regular task activity . <section> noticed this when fixing # <number> and it seemed rather odd / incorrect to be storing the executioncounter where it is . this causes the code to jump to other entries in the table for the sole purpose of reading / updating this value , when it already had the correct app record to start . <section> joseph hickey , vantage systems , inc .",1
"add option to enable - - coverage flag on full stack <section> enhancement to be able to report coverage from full stack testing if desired <section> maybe enable_coverage = true , and global_build_options . cmake could add - - coverage if defined ? would duplicate the coverage enabled in unit test executables . <repeated> but does it matter ? <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_evs event filtering does not seem to work correctly <section> <allcaps> evs </allcaps> does not seem to filter out the mask for cfe_evs_first_one_stop . i have not tried other pre - defined filter mask values . <section> steps to reproduce the behavior : <number> . build & run <allcaps> sch </allcaps> as - is with just ci & to as part of the <allcaps> fsw </allcaps> . make sure to subscribes to short / long event messages . increase <allcaps> to tlm </allcaps> pipe depth to max depth . <number> . observe the console output from <allcaps> fsw </allcaps> . <allcaps> to tlm </allcaps> pipe would overflow with <allcaps> sch </allcaps> as sender <section> a clear and concise description of what you expected to happen . <section> if applicable , add references to the software . <section> - hardware - os : centos <number> & <number> . x - versions : cfe <number> . <repeated> x7 , <allcaps> osal </allcaps> <number> . x <section> add any other context about the problem here . <section> full name and company / organization if applicable",3
"fix # <number> , add branch coverage reporting <section> fix # <number> , adds branch coverage and removes no - longer - needed report file manipulation to exclude unit test code from coverage report <section> steps taken to test the contribution : <number> . standard build / test / lcov ( same as enhanced ci ) <number> . confirmed branch coverage reported ( ~ <percent> ) <section> no changes to operational behavior <section> - hardware : cfs dev server <number> - os : ubuntu <number> - versions : master bundle w / this change <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add branch coverage reporting and remove no longer necessary removal of unit test files <section> historically did not report branch coverage and needed to remove the unit test code from coverage reporting . <section> add branch coverage , remove unnecessary processing step <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
add build of pdf guides to make documentation rules <section> make documentation rules do not actually make the final pdf <section> add make in the document latex directory . <section> none <section> consider pushing document somewhere useful from ci vs requiring users to generate . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
fix make doc warnings <section> make doc creates multiple warnings ( in build / doc / warnings . log ) some caused by # <number> <section> resolve warnings <section> none <section> intended as project / distribution documentation of entire code base and never really well implemented ( internal elements not well documented ) . major rework required to make this document useful outside just the fix of warnings . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"fix # <number> , <allcaps> osal </allcaps> guide scrub <section> fix # <number> , see issue for list of changes . these are the changes required in the cfe repo to scrub the <allcaps> osal </allcaps> guide note <url> is the commit related to this issue . <section> steps taken to test the contribution : <number> . nominal build ( native ) and run , no issues <number> . make usersguide and confirmed no warnings in build / doc / warnings <number> . cd build / doc / users_guide / latex <number> . make <number> . confirm completes and guide looks ok <number> . make osalguide and confirmed no warnings in build / doc / warnings <number> . cd build / doc / osalguide / latex <number> . make <number> . confirm completes and guide looks ok <section> no behavior change other than warnings resolved for doc build <section> - hardware : cfs dev server <number> - os : ubuntu <number> - versions : bundle w / the commits below <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"clean - up related to <allcaps> osal </allcaps> user ' s guide scrub <section> various fixes / cleanup required related to <url> <section> - removed unused osalguide . dox ( it just copies the main page , unreferenced ) - removed unused cfe_usersguide . dox ( it just copies part of main page , unreferenced ) - fixed directory name reported by make osalguide - updated <allcaps> osal </allcaps> guide name - removed osal_misc_additions ( undefined ) - general consistency / updates of header sections for osalguide - os_taskregister note removed from initialization ( obsolete ) - file descriptor section update ( do not mix os / <allcaps> osal </allcaps> ) - changed include order to maintain document order ( main dox file added first ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
document deprecated elements looks like template broke . <repeated> anyways : add \ deprecated and \ name the group where appropriate relative to the user ' s guide documentation such that it shows up as deprecated . jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"fix # <number> , user ' s guide scrub <section> documentation / comments only included in this change . commit <url> - fixes # <number> users guide scrub ( see issue for individual changes ) - fixes # <number> all warnings - fixes # <number> by referencing header documentation ( removes typo ) commit <url> - fixes # <number> commit <url> - fixes # <number> commit <url> - fixes # <number> commit <url> - fixes # <number> <section> steps taken to test the contribution : <number> . standard make / build steps to confirm code wasn ' t broken <number> . make usersguide <number> . confirmed build / doc / warnings . log ( doxygen warnings ) empty <number> . cd build / doc / usersguide / latex <number> . make ( to build the pdf ) <section> user ' s guide generates and and creates pdf without errors <section> - hardware : cfs dev server - os : ubuntu <number> - versions : master bundle w / this commit <section> does not attempt to address # <number> and # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"provide configurable / customizable message abstraction layer <section> sb provides abstraction from <allcaps> ccsds </allcaps> packets , yet the ccsds_commandpacket_t is still referenced directly by the services ( and likely all the apps that accept a command ) and sb functionality itself is tightly coupled to the actual message format . <section> provide a "" <allcaps> msg </allcaps> "" abstraction layer ( like inc / cfe_msg . h and a src / msg ) to implement direct access getters / setters for supported "" header "" fields . allow for selection of the supported message formats , or customization via mission configuration ( and adding of additional getters / setters ) . sb should be abstracted the same as the other services . "" header "" is intentionally vague , since it should include any common fields for which getter / setter abstraction is appropriate related to cfe services and apps . <section> leave as is , which requires clone and own approach for customization and extensive sb impacts . <section> suggest that since this would now support customization , we collapse the open source supported time format options down to <number> ( big endian , with the <number> byte default ) . if missions need something else , they can easily customize . # <number> - separate message access <allcaps> api </allcaps> ' s from sb # <number> - local endian <allcaps> sid </allcaps> macros , unused shift / mask macros ( in ccsds . h ) # <number> - improve <allcaps> api </allcaps> consistency for functions accepting a software bus message # <number> - investigate various verifycmdlength implementations and possible common utility # <number> - unsafe macros , investigate conversion into inline functions # <number> - cfe_sb_getmsgtime ( ) and cfe_sb_setmsgtime ( ) do not handle byte - swapping on _el platforms <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove old <allcaps> asist </allcaps> mnemonics from doxygen comments <section> there ' s alias , extra mnemonic mapping files , and extra comments in code that lead to extra documentation that does not apply to anything other than internal proprietary ground stations . they also are very fragile . <repeated> defining the mnemonic in the middle of a comment block caused warnings like <code> but when defined at the top and immediately followed by another alias there were no warnings . <section> remove <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
remove undefined error defines in cfe_error . h <section> <url> neither of these exist in <allcaps> osal </allcaps> <section> delete <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
cfe_time_local1hzisr duplicated define <section> defined in both cfe_time . h and cfe_time_utils . h ( standard violation ) <section> single source of truth <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"<allcaps> cfe </allcaps> cmake rules for tables copy the files into / cf , not / cf / tables where expected <section> cfe cmake rules copy the * . tbl files into / cf / and not into / cf / apps where most apps seem to expect them : <section> steps to reproduce the behavior : <number> . build your own cfs tree based on <url> <number> . remove the * _lab apps <number> . add the official repos for cfs_sch . cfs_to , cfs_to , hk , hs and others <number> . configure everything <number> . build ( i was able to build specifically <number> bit on my <number> bit machine using cmake <number> or newer - with the attached config ) cfs_32bit_on_64bit . tar . gz <url> <number> . run <code> <number> . stop it , and do an ls <code> <number> . grep the app tree <code> <section> all . <allcaps> tbl </allcaps> files should be installed into / cf / apps / change to <section> : cmake / arch_build . cmake : install directory in add_cfe_tables needs to include apps <code> <section> - hw : dell laptop <allcaps> xps </allcaps> <number> - os : linux <allcaps> gti </allcaps> - uid0110 <number> . <number> - <number> - generic # <number> ~ <number> . <number> - ubuntu <allcaps> smp </allcaps> wed <date> <time> <allcaps> utc </allcaps> <number> x86_64 x86_64 x86_64 <allcaps> gnu </allcaps> / linux ( distro linux mint <number> ) - versions [ versions : cfe <number> . <number> , <allcaps> osal </allcaps> <number> . <number> , <allcaps> psp </allcaps> <number> . <number> , chksm <number> on linux , <allcaps> sch </allcaps> <number> . <number> , cfs_to commit 4 5 8 9 edb , cfs_ci , and other apps <section> add any other context about the problem here . <section> maurice smulders geneva technologies inc",3
apis do not consistently check return value of functions called <section> apis do not consistently check return values of functions called . i think not checking the return value is likely by design in many of the below cases . <repeated> i just wanted to have the group take a look and determine if any updates are warranted . apis flagged during audit : cfe_sb_api . c : cfe_sb_getpipeopts cfe_sb_api . c : cfe_sb_setpipeopts cfe_sb_api . c : cfe_sb_unsubscribelocal cfe_tbl_api . c : cfe_tbl_register cfe_time_api : cfe_time_externaltime cfe_time_api : cfe_time_externalgps cfe_time_api : cfe_time_externalmet cfe_es_api . c : cfe_es_registercds cfe_esmempool . c : cfe_es_poolcreateex cfe_esmempool . c : cfe_es_getpoolbuf cfe_esmempool . c : cfe_es_putpoolbuf cfe_sb_api . c : cfe_sb_rcvmsg cfe_sb_api . c : cfe_sb_getlastsenderid cfe_sb_api . c : cfe_sb_zerocopygetptr cfe_sb_api . c : cfe_sb_unsubscribe cfe_sb_api . c : cfe_sb_deletepipe cfe_tbl_api . c : cfe_tbl_unregister cfe_tbl_api . c : cfe_tbl_load cfe_tbl_api . c : cfe_tbl_share cfe_tbl_api . c : cfe_tbl_update cfe_es_api . c : cfe_es_processcoreexception cfe_es_api . c : cfe_es_resetcfe cfe_sb_api . c : cfe_sb_createpipe cfe_es_start . c : cfe_es_main cfe_esmempool . c : cfe_es_getpoolbufinfo cfe_es_api . c : cfe_es_waitforsystemstate cfe_es_api . c : cfe_es_runloop cfe_tbl_api . c : cfe_tbl_validate please reference the spreadsheet ( api_audit_v2 . xlsx ) attached to issue # <number> for additional information in regards to why each of the above apis were flagged . <section> dan knutsen <allcaps> nasa </allcaps> goddard,2
apis missing check for <allcaps> null </allcaps> pointer ( s ) <section> there are a number of apis that do not currently check to see if a <allcaps> null </allcaps> pointer has been passed in as an input argument . we should consider adding the additional check in the following apis : cfe_es_api . c : cfe_es_calculatecrc cfe_es_api . c : cfe_es_copytocds cfe_es_api . c : cfe_es_createchildtask cfe_es_api . c : cfe_es_getappid cfe_es_api . c : cfe_es_getappname cfe_es_api . c : cfe_es_getgencounteridbyname cfe_es_api . c : cfe_es_gettaskinfo cfe_es_api . c : cfe_es_processcoreexception cfe_es_api . c : cfe_es_registercds cfe_es_api . c : cfe_es_restorefromcds cfe_es_api . c : cfe_es_runloop cfe_es_api . c : cfe_es_writetosyslog cfe_esmempool . c : cfe_es_getmempoolstats cfe_esmempool . c : cfe_es_getpoolbuf cfe_esmempool . c : cfe_es_getpoolbufinfo cfe_esmempool . c : cfe_es_poolcreate cfe_esmempool . c : cfe_es_poolcreateex cfe_esmempool . c : cfe_es_poolcreatenosem cfe_esmempool . c : cfe_es_putpoolbuf cfe_evs . c : cfe_evs_sendevent cfe_evs . c : cfe_evs_sendeventwithappid cfe_evs . c : cfe_evs_sendtimedevent cfe_fs_api . c : cfe_fs_initheader cfe_fs_api . c : cfe_fs_readheader cfe_fs_api . c : cfe_fs_settimestamp cfe_fs_api . c : cfe_fs_writeheader cfe_sb_api . c : cfe_sb_createpipe cfe_sb_api . c : cfe_sb_zerocopygetptr cfe_sb_msg_id_util . c : cfe_sb_getmsgid cfe_sb_msg_id_util . c : cfe_sb_setmsgid cfe_sb_util . c : cfe_sb_generatechecksum cfe_sb_util . c : cfe_sb_getchecksum cfe_sb_util . c : cfe_sb_getcmdcode cfe_sb_util . c : cfe_sb_getmsgtime cfe_sb_util . c : cfe_sb_gettotalmsglength cfe_sb_util . c : cfe_sb_getuserdata cfe_sb_util . c : cfe_sb_getuserdatalength cfe_sb_util . c : cfe_sb_initmsg cfe_sb_util . c : cfe_sb_messagestringget cfe_sb_util . c : cfe_sb_messagestringset cfe_sb_util . c : cfe_sb_msghdrsize cfe_sb_util . c : cfe_sb_setcmdcode cfe_sb_util . c : cfe_sb_setmsgtime cfe_sb_util . c : cfe_sb_settotalmsglength cfe_sb_util . c : cfe_sb_setuserdatalength cfe_sb_util . c : cfe_sb_timestampmsg cfe_sb_util . c : cfe_sb_validatechecksum cfe_tbl_api . c : cfe_tbl_getaddress cfe_tbl_api . c : cfe_tbl_getaddresses cfe_tbl_api . c : cfe_tbl_getinfo cfe_tbl_api . c : cfe_tbl_load cfe_tbl_api . c : cfe_tbl_register cfe_tbl_api . c : cfe_tbl_share cfe_time_api : cfe_time_print cfe_time_api : cfe_time_registersynchcallback <section> na - code review / audit <section> dan knutsen <allcaps> nasa </allcaps> goddard,2
"apis missing argument validation <section> the following apis are missing argument validation : cfe_sb_api . c : cfe_sb_subscribefull - quality is not checked … consider checking that it is <number> or <number> cfe_es_api . c : cfe_es_deleteapp - can get a segmentation fault if user tries to delete an <allcaps> app </allcaps> greater than cfe_platform_es_max_applications cfe_tbl_api . c : cfe_tbl_getaddresses - can result in segmentation fault if numtables grows larger than max number of tables . cfe_tbl_api . c : cfe_tbl_releaseaddresses - should check to make sure numtables is less than cfe_platform_tbl_max_num_tables cfe_es_perf . c : cfe_es_perflogadd - should check if entryexit is either a <number> or <number> cfe_es_api . c : cfe_es_reloadapp - can result in segmentation fault if <allcaps> apid </allcaps> is invalid cfe_es_api . c : cfe_es_createchildtask - input argument ' flags ' is not validated … also it does not appear to be used anywhere , consider removing cfe_es_api . c : cfe_es_getappname - consider comparing bufferlength with os_max_api_name prior to use . cfe_es_api . c : cfe_es_registercds - consider checking if block size is less than cfe_platform_es_max_block_size cfe_fs_api . c : cfe_fs_initheader - subtype not checked cfe_sb_api . c : cfe_sb_zerocopygetptr - is there a maximum message size ? consider verifying msgsize prior to use . cfe_sb_util . c : cfe_sb_setuserdatalength - consider verifying length of user data ( if there exists a limit ) and / or totalmsgsize cfe_sb_api . c : cfe_sb_subscribelocal - msglim is not checked … if a max limit does exist , should add argument validation <section> all input arguments are validated prior to use . <section> na - code review / audit <section> dan knutsen <allcaps> nasa </allcaps> goddard",2
"fix # <number> , # <number> , and # <number> , updated cfe app developer ' s guide <section> updated the cfe app developer ' s guide markdown with changes to resolve issues <number> , <number> , and <number> . made a variety of other small content updates and reordered some sections . fixes # <number> , fixes # <number> , fixes # <number> <section> none - documentation only <section> none - documentation only <section> none - documentation only <section> n / a <section> n / a <section> elizabeth timmons - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"expose cfe_sb_getpkttype ( and add stub ) <section> requests to expose packet type as an <allcaps> api </allcaps> ( helps <allcaps> sbn </allcaps> , testing ) <section> add requirement , expose in <allcaps> api </allcaps> header , add stub , etc . <section> n / a <section> slightly related to # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"option to drop oldest message when msg limit on pipe reached ( keep newest ) <section> looks like sb rejects newest message when message limit reached <url> in some cases newest message is of higher priority <section> add option ( maybe part of <allcaps> qos </allcaps> ? ) to remove oldest message from queue when limit reached . easy if the message limit is <number> , likely need trade study if more than one ( reorder queue ? replace oldest w / newest would put them out of order , add new to queue remove oldest and remove gap ? etc ) . performance cost to find / replace / reorder / etc . <section> just subscribe with enough space to hold all , and chew through entire pipe to get the latest then process . <section> requested by <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"user ' s guide scrub <section> user ' s guide out of date and inconsistant <section> general scrub of users guide - replace non - documented formatting mechanisms for return codes ( causes errors ) - custom table aliases for return values causing issues , use built in - make references into links where needed - fix links where needed ( remove private links ) - remove duplicated documentation in * . c files ( <allcaps> api </allcaps> ' s documented in * . h , with prototype ) - remove duplicated brief in <allcaps> api </allcaps> table ( pull from object brief ) - remove xrefitem style formatting ( caused warnings , see # <number> ) - fix glossary table - fix use of <allcaps> bsp </allcaps> where <allcaps> psp </allcaps> applies - performance collection focused on cfe , not tool ( updated reference for java tool ) - update event message format documentation to match order / contents - update applicable documents with modern references - removed no - longer - up - to - date dox templates ( eclipse header templates ) - cleaned up sb sequence counter section - added a couple faqs - single sourced the versioning section - resolved <allcaps> all </allcaps> doxygen warnings ( including those detailed in # <number> ) <section> none <section> related issues : # <number> , # <number> , # <number> , # <number> , # <number> , # <number> , # <number> , # <number> , # <number> , # <number> looks like <allcaps> eds </allcaps> file for sb needs getpipeidbynameerrorcounter <section> - scrub return codes , not all listed in current <allcaps> api </allcaps> documentation - remove autodoc , explicitly document ( futureproof from missing documentation ) <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"unit test build fails when multiple cpus are defined <section> after updating some projects to the latest baseline , getting a new build failure : <code> <section> the configuration of this project uses multiple cpus that all share the same architecture ( <allcaps> ppc </allcaps> ) but different platform configs ( cfe_platform_cfg . h ) . <section> build should succeed <section> - ubuntu <number> <allcaps> lts </allcaps> <number> - bit ( build host ) - cross compiling for <allcaps> ppc </allcaps> ( embedded linux ) - latest "" master "" baseline ( <number> - <number> - <number> ) <section> this is related to a recent change that separated the ut stubs from the <allcaps> cfe </allcaps> . it works fine with only a single <allcaps> cpu </allcaps> / config , but if multiple cpus are defined then this fails . unfortunately only testing this now - the ci / cd build only uses a single <allcaps> cpu </allcaps> / config . need to remove ut dependencies on a specific "" cfe_platform_cfg . h "" to fix this . ( stubs should not need this file , it is not a real implementation , it is just stubs ) . <section> joseph hickey , vantage systems , inc .",0
"fix # <number> and # <number> , user ' s guide doxygen issues <section> fix # <number> - removed an extra line that caused breakage fix # <number> - removed private paths from user ' s guide processing <section> steps taken to test the contribution : <number> . make prep <number> . make usersguide <number> . cd buid / doc / users_guide / latex <number> . make <section> a clear and concise description of how this contribution will change behavior and level of impact . - <allcaps> pdf </allcaps> file now generated by process above <section> - hardware : cfs dev server <number> - os : ubuntu <number> - versions : current bundle w / this change <section> n / a <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"remove private files from user ' s guide documentation processing <section> user ' s guide is intended to document external elements ( <allcaps> api </allcaps> ' s , commands , error codes , etc ) , yet includes processing of internal directories . <section> remove internal directories from processing <section> none <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"comment before cfe_sb_rcvmsg mentions cfe_sb_pend , but it should be cfe_sb_pend_forever in the description comment before cfe_sb_rcvmsg in cfe_sb_api . c the timeout value cfe_sb_pend is mentioned ; however , the actual value is cfe_sb_pend_forever . this comment should be changed to reflect the correct value . <url>",1
doxygen of users guide fails to create pdf <section> make usersguide cd build / doc / users_guide / latex make observe error : ` ` <code> \ end ' ) * ` ` ` <section> fix so pdf will build . <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"add compile time assert that int size is <number> bit <section> per discussion <date> there ' s likely breakage in multiple places on a system where int ! = <number> bit ( standard minimum is <number> bit ) <section> along with # <number> , cfe not really designed to work on a system without char of <number> bit size and int of <number> . enforce / warn on build . <section> improve documentation ? still nice to bail on compile for those who do not read documentation . <section> # <number> , and many other places convert int32 to int or the unsigned equiv . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
clarify cfe_tbl_notifybymessage should not use ground command <allcaps> mid </allcaps> <section> cfe_tbl_notifybymessage should use a separate <allcaps> mid </allcaps> from ground commands to avoid command counter increments ( and any other ground specific processing ) . <section> update documentation to explicitly recommend <allcaps> not </allcaps> using ground command <allcaps> mid </allcaps> . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> * <allcaps> edit </allcaps> * - changed per comments below from a command code issue,1
"cfe_sb_gettotalmsglength return type does not support max packet size <section> cfe_sb_gettotalmsglength returns an uint16 , max packet <allcaps> ccsds </allcaps> packet size can be slightly bigger ( <number> vs <number> ) . note the c documentation claims the max return does not include the primary header (# <number> ) , but the <allcaps> api </allcaps> ( h file documentation ) claims it ' s the full packet . the code actually returns the full packet size ( the length field in the <allcaps> ccsds </allcaps> packet + <number> ) . <section> support full <allcaps> ccsds </allcaps> packet size . <section> none <section> initiated by jp / <allcaps> pace </allcaps> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"<allcaps> api </allcaps> header documentation does not match c file documentation <section> currently the <allcaps> api </allcaps> ' s are documented in both the . h and . c , and they are not always consistent . see : <url> vs <url> <section> document in header only ( remove duplicated info in . c ) , and reference from c files <section> none <section> requested by jp / <allcaps> pace </allcaps> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"add alternate <allcaps> mid </allcaps> for <allcaps> time </allcaps> diagnostics packet request <section> the current mechanism to collect the diagnostics packet from the <allcaps> time </allcaps> app requires a command to be sent to the app , which increments the <allcaps> time </allcaps> command counter . for anyone that wants this diagnostics packet to be generated regularly , this causes the command counter to also increment regularly , which makes the command counter less useful . <section> add a <allcaps> mid </allcaps> to the <allcaps> time </allcaps> app for diagnostic packet requests , which will not result in the command counter being incremented . this will create two ways to request the <allcaps> time </allcaps> diagnostics packet ( by command or by message ) . <section> - adding a configuration that enables / disables whether the command counter is incremented when this command is received . - check if the command was sent from the scheduler , and do not increment the command count if so . both of these go against the current requirement / philosophy of "" all commands should increment a command counter "" . <section> none . <section> keegan moore - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , message requirements scrub <section> now using the term message ( vs overloading "" command "" ) for a software bus triggered requirement that does not increment the command code ( typically inter - app messages ) fix # <number> <section> none , doc only <section> none <section> none <section> change is on top of the rest of the requirements scrub to simplify review , just view last commit for changes specific to the linked issue . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"disambiguate command vs message requirements <section> "" command "" terminology has been used for both ground commands ( that increment command counters ) and inter - app commands ( that typically do not increment command counters ) . so it ' s unclear in the requirement which sort of use case is intended . <section> "" command "" is ground command with additional associated behavior ( increments command counters ) , "" message "" is typical sb message that does not increment command counter . <section> none <section> discovered during requirements scrub , helps clarify what impacts command counter . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , software bus requirements scrub <section> see issue for detailed list of changes fix # <number> <section> none , doc change only <section> none <section> none <section> commit is on top of previous requirements work to facilitate review , only the last commit is applicable to this issue <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"sb subscription reporting request messages out of family <section> cfe_sb_enablesubreportingcmd , cfe_sb_disablesubreportingcmd , cfe_sb_sendprevsubscmd are processed like commands but do not increment the command counter . typical pattern is for non - ground , inter - app messages to have separate message ids from ground commands . <section> make consistent with standard pattern <section> none <section> see hk message processing , or the message processing in time services that do not increment command counter . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"software bus requirements scrub <section> sb requirements out of date <section> update requirements . <section> n / a <section> summary of changes ( w / links if individual issues exist already ) : - csb4000 - <allcaps> noop </allcaps> command out of family , make consistent with other services - csb4005 - hk message out of family , make consistent with other services - csb4300 - zero copy general requirement reads like level <number> , delete and replace with <allcaps> api </allcaps> requirements - csb4305 . <number> - max message size just clarify wording ( mission config parameter ) - csb4310 - free app resources ( done by es_appexit , delete from sb / <allcaps> api </allcaps> ) - csb4700 : max message id ’ s ( delete ) - csb4701 : sb maximum size ( delete ) - csb4704 : max destinations ( delete ) - csb4705 : maximum pipes ( delete ) - csb4706 : maximum pipe depth ( delete ) - <allcaps> new api </allcaps> requirements : - csb4311 - cfe_sb_getmsgid - csb4312 - cfe_sb_setmsgid - csb4313 - cfe_sb_messagestringget - csb4314 - cfe_sb_messagestringset - csb4315 - cfe_sb_initmsg - csb4315 . <number> - clear message contents and sequence counter - csb4315 . <number> - retain message contents and sequence counter - csb4316 - cfe_sb_getuserdata - csb4317 - cfe_sb_getuserdatalength - csb4318 - cfe_sb_setuserdatalength - csb4319 - cfe_sb_gettotalmsglength - csb4320 - cfe_sb_settotalmsglength - csb4321 - cfe_sb_getmsgtime - csb4322 - cfe_sb_setmsgtime - csb4323 - cfe_sb_timestampmsg - csb4324 - cfe_sb_getcmdcode - csb4325 - cfe_sb_setcmdcode - csb4326 - cfe_sb_getchecksum - csb4327 - cfe_sb_generatechecksum - csb4328 - cfe_sb_validatechecksum - csb4329 - cfe_sb_setpipeopts - csb4330 - cfe_sb_getpipeopts - csb4331 - cfe_sb_subscribelocal - csb4332 - cfe_sb_subscribe - csb4333 - cfe_sb_unsubscribelocal - csb4334 - cfe_sb_passmsg - csb4335 - cfe_sb_msgid_equal - csb4336 - cfe_sb_msgidtovalue - csb4337 - cfe_sb_valuetomsgid - csb4338 - cfe_sb_getpipename ( related to # <number> ) - csb4339 - cfe_sb_getpipeidbyname ( related to # <number> ) - csb4340 - cfe_sb_zerocopygetptr - csb4341 - cfe_sb_zerocopyreleaseptr - csb4342 - cfe_sb_zerocopysend - csb4343 - cfe_sb_zerocopypass - <allcaps> new </allcaps> cmd requirements : - csb4009 - upon receipt of valid command increment command counter - csb4010 - upon receipt of invalid command increment command error counter - csb4011 - cfe_sb_enablesubreportingcmd <number> - csb4012 - cfe_sb_disablesubreportingcmd <number> - csb4013 - cfe_sb_sendprevsubscmd <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , time services requirements scrub <section> updates <allcaps> time </allcaps> services requirements , see issue for details . fix # <number> <section> none , doc update only <section> none , doc update only <section> none , doc update only <section> see related issues , # <number> , # <number> . review just the latest commit for changes directly related to the associated issue . <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"assert ( ) in main - line code <section> in unit tests , we use assert statements . a lot of our code performs a number of safety checks ( pointer is not null , index is less than array size , etc . ) i suggest we develop something similar to the ut assert code , and use as much as possible in the main - line code base in lieu of our current safety checks as it will improve readability and support tooling of code analysis . <section> assert library should generate events , return values , and will need to be able to unwind such things as semaphores . <section> implementing this will introduce risk that we miss a safety check or otherwise mis - translate the check into an assert . need to develop the library and slowly migrate current safety checks to the library . <section> add any other context about the feature request here . <section> <email>",2
"time services requirements scrub <section> <allcaps> time </allcaps> requirements out of date <section> update requirements . <allcaps> note </allcaps> <number> - this is not major reworking of the requirements / design (# <number> ) , but focused on just bringing the requirements up to date . future issues will address significant development / rework . <allcaps> note </allcaps> <number> - <allcaps> met </allcaps> functionality still applies here ( not all abstracted to <allcaps> psp </allcaps> ) to support the virtual <allcaps> met </allcaps> capability ( hardware <allcaps> met </allcaps> is not required ) . <section> n / a <section> summary of changes ( w / links if individual issues exist already ) : - ctime2000 - hk requirement not consistent ( update wording ) - ctime2001 - wording scrub , remove "" time server and time client "" inconsistent pattern - ctime2002 - wording scrub , remove "" time server and time client "" inconsistent pattern - ctime2007 - update summary , it ' s really compute <allcaps> sctf </allcaps> given current time - ctime2008 - adjust <allcaps> ctf </allcaps> requirement ( delete , redundant with add / subtract requirements ) - ctime2010 - summary : select tone signal source , of <allcaps> primary </allcaps> vs <allcaps> redundant </allcaps> ( although not explicitly defined ) , setsignalcmd - ctime2012 - force to flywheel ( not just flywheel ) , then will not update time based on tone data / signal . - ctime2012 . <number> - propagates <allcaps> met </allcaps> locally ( update wording ) , uses internal best guess for <allcaps> met </allcaps> . - ctime2013 - remove "" second and subsecond "" , overdetailed and wrong , really <allcaps> sctf </allcaps> - ctime2014 - remove "" second and subsecond "" , overdetailed and wrong , really <allcaps> sctf </allcaps> - ctime23xx - all requests remove extra language ( format specified ) - ctime2701 - time at tone window not handled by ts ( delete , hardware ) , sent by request / cmd - ctime2702 - update <allcaps> met </allcaps> ( delete generic functionality requirement , <allcaps> psp </allcaps> / hardware ) - ctime2703 - <allcaps> met </allcaps> resolution ( delete , <allcaps> psp </allcaps> / hardware ) - <allcaps> new api </allcaps> requirements : - ctime2315 - provide time at tone message functionality given <allcaps> met </allcaps> , provide in message like hk - ctime2316 - tone data given <allcaps> gps </allcaps> - ctime2317 - tone data given time - ctime2318 - register synch callback ( callback at tone signal receipt ) - ctime2319 - unregister synch callback ( unregistersynchcallback ) - ctime2320 - get clock info state flags for <allcaps> time </allcaps> ( getclockinfo ) - ctime2321 - convert a given <allcaps> met </allcaps> to sc time ( met2sctime ) - ctime2322 - local1hzisr , <allcaps> api </allcaps> to trigger <number> hz processing - ctime2323 - externaltone , <allcaps> api </allcaps> to trigger tone processing - <allcaps> new </allcaps> cmd requirements : - ctime2012 . <number> - external time update mode - use updates ( update timekeeping when tone signal and data pair are received ) - ctime2015 - tonesendcmd just sends tone data message ( no time update ) - ctime2016 - tonedata ( cmd ) , triggers receipt of tone data processing - ctime2017 - tonesignal ( cmd ) , triggers tone signal processing - ctime2018 - onehz ( cmd ) , triggers 1 hz cycle processing - ctime2019 - set <allcaps> met </allcaps> , sets abstract <allcaps> met </allcaps> ( not hardware met ) , setmetcmd - ctime2020 - ( adddelaycmd ) - ctime2021 - ( subdelaycmd ) - <allcaps> note </allcaps> : cfe2fsseconds / fs2cfeseconds deleted per # <number> - <allcaps> note </allcaps> : setsourcecmd due refactor / fix per # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , event services requirements scrub <section> event services requirements scrub , see issue for changes fix # <number> <section> none <section> none <section> none <section> stacked commits for requirement scrub , just see latest one for the related ticket <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"event services requirements scrub <section> <allcaps> evs </allcaps> requirements out of date <section> update requirements <section> n / a <section> summary of changes ( w / links if individual issues exist already ) : - cevs3018 - hk requirement not consistent ( update wording ) - cevs3103 . <number> - filter counter configurable max ( change from hard number ) - cevs3110 - free app resources , done by es_appexit ( delete <allcaps> evs </allcaps> req ) - cevs3200 - initialize ports default config per port ( delete , psp / hardware configuration # <number> # <number> ) - cevs3201 - power on event format configurable ( change from long ) - cevs3207 - preserve log mode on processor reset ( clarify requirement , just wording update ) - cevs3209 - processor reset default log mode ( delete , conflicts with <number> ) - cevs3300 - support # of message ports ( delete , psp / hardware dependent # <number> # <number> ) - cevs3301 - event log size ( delete , mission config ) - cevs3302 - # of event filters per app ( delete , mission config ) - <allcaps> new api </allcaps> requirements : - none - <allcaps> new </allcaps> cmd requirements : - none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , table services requirements scrub <section> updates table services requirements per recent scrub , see issue for detailed changes . fix # <number> <section> none , doc change only <section> none <section> none <section> see latest commit for just the <allcaps> tbl </allcaps> changes ( stacked on the rest of the requirement commits to simplify review ) . <section> n / a <section> jacob hageman - <allcaps> gsfc </allcaps> / <allcaps> nasa </allcaps>",2
"fix # <number> , executive services requirements scrub ( cmd version ) <section> adds missing es command requirements fixes # <number> <section> none , doc change only <section> none <section> none <section> related to # <number> <section> n / a <section> jacob hageman - <allcaps> gsfc </allcaps> / <allcaps> nasa </allcaps>",2
"table services requirements scrub <section> <allcaps> tbl </allcaps> requirements out of date <section> update requirements <section> n / a <section> summary of changes ( w / links if individual issues exist already ) : - ctbl6011 - hk requirement not consistent ( update wording ) - ctbl6301 - free app resources handled by es_appexit , delete <section> <section> - <allcaps> new api </allcaps> requirements : - ctbl6313 : cfe_tbl_validate - ctbl6314 : cfe_tbl_dumptobuffer - ctbl6315 : cfe_tbl_modified cfe - <number> - ctbl6316 : cfe_tbl_manage cfe - <number> - <allcaps> new </allcaps> cmd requirements : - ctbl6013 : cfe_tbl_deletecdscmd - ctbl6013 . <number> : delete <allcaps> cds </allcaps> - table in use - ctbl6013 . <number> : delete <allcaps> cds </allcaps> - not critical table - ctbl6013 . <number> : delete <allcaps> cds </allcaps> - already deleted <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> * <allcaps> edit </allcaps> * - bold items missed in first round",2
executive services requirements scrub - missing command requirements <section> es requirements out of date <section> update requirements <section> n / a <section> note # <number> and # <number> missed the following new commands . new command requirements : - ces1029 : cfe_es_startperfdatacmd - ces1030 : cfe_es_setperffiltermaskcmd - ces1031 : cfe_es_setperftriggermaskcmd - ces1032 : cfe_es_queryalltaskscmd - ces1033 : cfe_es_sendmempoolstatscmd <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"fix # <number> , executive services requirements scrub <section> updates es requirements , see details in issue . fixes # <number> closed # <number> as a duplicate ( fixed here ) . <section> none , only doc change <section> requirements now match code except where addressed by open issues (# <number> , # <number> , # <number> , # <number> ) <section> n / a <section> note this commit is on top of # <number> commits , just review this commit . <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"es requirements scrub <section> es requirements out of date <section> update requirements <section> n / a <section> summary of changes ( w / links if individual issues exist already ) : - ces1000 - hk requirement not consistent ( not a real command , update wording ) - ces1007 . <number> - restart app claims app will continue running if file missing (# <number> ) , fix req - ces1010 - fix <allcaps> tbd </allcaps> in rational - ces1013 , ces1013 . <number> - shell requirements - remove (# <number> ) - ces1316 . <number> - copy from <allcaps> cds </allcaps> , invalid data case copies data and returns error ( make req match code ) - ces1522 - log mode discard on processor reset ( make configurable , # <number> ) - <allcaps> new </allcaps> ces1523 - log mode on power - on reset ( make configurable , # <number> ) - ces1700 - max apps ( remove , platform specifc ) - ces1702 * , ces1703 * - remove exception handling requirements from cfe ( they are <allcaps> psp </allcaps> ) - ces1704 , ces1705 , ces1706 , ces1707 , ces1708 - remove sizing , platform dependent - ces1302 , ces1303 - processor and spacecraft id are <allcaps> psp </allcaps> apis , remove from cfe req - ces1026 - dumpcds does not dump integrity ( update requriement ) - <allcaps> new api </allcaps> requirements : - ces1329 : cfe_es_poolcreatenosem ( ces1321 also updated to note it ' s the protected version ) - ces1330 : cfe_es_getmempoolstats - ces1331 : cfe_es_getpoolbufinfo - ces1332 : cfe_es_reloadapp - ces1333 : cfe_es_runloop - ces1334 : cfe_es_waitforsystemstate - ces1335 : cfe_es_waitforstartupsync - ces1336 : cfe_es_getappinfo - ces1337 : cfe_es_incrementtaskcounter - ces1338 : cfe_es_registergencounter - ces1339 : cfe_es_deletegencounter - ces1340 : cfe_es_incrementgencounter - ces1341 : cfe_es_setgencount - ces1342 : cfe_es_getgencount - ces1343 : cfe_es_getgencounteridbyname - ces1600 : cfe_fs_readheader - ces1601 : cfe_fs_initheader - ces1602 : cfe_fs_writeheader - ces1603 : cfe_fs_settimestamp - ces1604 : cfe_fs_extractfilenamefrompath , <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> * <allcaps> edit </allcaps> - * remove shell requirements added , ces3121 update noted , added new requirement numbers",2
"doxygen event documentation needs scrub <section> doxygen event output does not match code in at least <number> case , see cfe_es_initstats_inf_eid <section> scrub event doxygen and confirm it matches actual output ( and type ) <section> maybe <hashtag> define </hashtag> the string as a single definition and link in documentation <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"fix # <number> - update <allcaps> api </allcaps> documentation <section> updates <allcaps> api </allcaps> documentatin fix # <number> <section> steps taken to test the contribution : <number> . make usersguide <number> . verified modifications <section> none <section> - hardware : cfs dev server <number> - os : ubuntu <number> - versions : master bundle <section> does not fix everything , just <allcaps> api </allcaps> ' s see also # <number> for device driver <allcaps> api </allcaps> removal <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"update doxygen cfe <allcaps> api </allcaps> documentation <section> at minimum , cfe_tbl_notifybymessage is missing <section> scrub and include references to all <allcaps> api </allcaps> ' s in documentation <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , add native permissive mode configuration <section> this adds the native_osconfig . h which is included after the default_osconfig . h if <allcaps> simulation </allcaps> = native is set . fix # <number> <section> steps taken to test the contribution : <number> . copy cfe / cmake / sample_defs to top dir ( per standard setup instructions ) <number> . make <allcaps> simulation </allcaps> = native prep <number> . make ; make install ; <number> . execute core - cpu1 in build / exe / cpu1 and confirmed permissive mode <number> . also did steps above with just make prep , and confirmed permissive mode wasn ' t set <section> no longer requires sed "" hack "" to change the setting in default_config . h <section> - hardware : cfs dev server <number> - os : ubuntu <number> - versions : master bundle with this branch <section> update related <allcaps> readme </allcaps> ' s and ci to no longer perform sed "" hack "" <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_tbl_load should produce clearer message when it has a file header mismatch <section> cfe_tbl_loadfromfile compares the application ' s name + table name with the string in the header of the file . if you configure the cfe_es_startup . scr with a different application name than what is expected in the header , you get an obtuse "" fail to load tbl ' <app> . <tbl> ' from ' / cf / <file> . tbl ' "" not making it clear that it ' s purely a mismatch of the header . <section> at minimum it should indicate that the matter is a mis - match of the header and the expected header ( which means that the file is there , for example ) . better would be to report the actual contents of the header and the expected value . the <allcaps> eid </allcaps> for the error is unique so cfe_tbl_load can produce an event with more specific text . <section> could have cfe_tbl_loadfromfile generate the event , but that ' s an "" internal "" fn so probably not . <section> add any other context about the feature request here . <section> <email>",2
"<allcaps> cfe es </allcaps> unnecessarily keeping multiple copies of task / app names <section> when reviewing the changes for other tickets , noted that the <allcaps> cfe es </allcaps> is storing the app name in the <code> twice . it is stored in the <code> subfield , as well as the <code> sub field . these appear to be always set together , to the same value , such as in cfe_es_appcreate for example : <url> <url> it then goes on to store the same string a third time in the tasktable [ x] . taskname field for the task itself : <url> the name is a string value and therefore takes a fair bit of memory to store . in the "" stock "" example config this bloats the size of the es data structures by about <number> bytes , but could easily be much more in a real deployment if os_max_api_name is set longer and / or the max number of apps / tasks is larger . <section> should store _at most_ one copy of the name in the <code> , but even that might not be needed if it is always the same as the main task name ( which it appears to be ) . for tasks , <allcaps> osal </allcaps> already stores the task name . for the <allcaps> es api </allcaps> calls that need to get the name , it should just lookup the name from <allcaps> osal </allcaps> , just like we are doing for sb in # <number> <section> joseph hickey , vantage systems , inc .",2
"maximum number of cfe instances ? this is not a bug , but a question related to cfe usage : we are currently trying to perform multi - agent simulations using applications developed on the cfe middle - ware . a single agent is launched by running the core executive . however , we are not able to launch more than <number> instances of cfe on a single linux machine . the 8 th instance of cfe throws errors : "" createpipeerr : os_queuecreateerr returned - <number> "" please see attached image . are there any parameters that could be changed to enable more instances of cfe to run on a single machine ? changing the default values of os_max_queues , cfe_platform_sb_max_pipes did not seem to help . createpipeerr <img> <section> <allcaps> nia </allcaps> / <allcaps> nasa </allcaps> langley",3
"documentation on cfe_sb_getmsgtime ( ) / setmsgtime ( ) needs updated . they do not set / get timestamps for commands ( cfe_sb_cmd_hdr_size ) . <section> documentation does not clearly state that <code> and <code> are only useful if the message header is big enough . basically , the <code> does not have this field and so it would return <number> . <section> amend the documentation to let others know that those functions are not used when the <code> <section> actually it would probably be better if there was some kind of assert or check to inform the programmer that the function probably should not be used since returning <number> is really returning nothing . maybe ? <url> from <url> <section> documentation in <code> pg . <number> : > before sending an sb message to the sb , the application can update the sb message header . the most common update is to put the current time in the sb message . this is accomplished with one of two <allcaps> sb api </allcaps> functions . the most commonly used function would be cfe_sb_timestampmsg ( ) . this <allcaps> api </allcaps> would insert the current time , in the mission defined format with the mission defined epoch , into the sb message header . the other <allcaps> sb api </allcaps> that can modify the sb message header time is cfe_sb_setmsgtime ( ) . this <allcaps> api </allcaps> call sets the time in the sb message header to the time specified during the call . this is useful when the application wishes to time tag a series of sb messages with the same time . > > other fields of the sb message header can be modified by an application prior to sending the sb message . these fields , and the associated apis , are listed in the following table : i did not see anywhere that it said if the message is a command msg , i . e . , <code> then it will not have a timestamp and therefore these functions return <number> . code : <url> just went down a rabbit hole trying to figure out why the message header sizes did not match in my test cases . <section> philip cooksey at <allcaps> nasa </allcaps> ames",2
"remove obsolete * . mak files <section> find . / - name "" * . mak "" shows obsolete make files <section> remove them <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , remove device driver requirements <section> fixes # <number> - deleted ces1321 . <number> which was just a copy of ces1321 ( from old documents ) - fixed summary on ces1515 . <number> - in a separate commit , now ordering by id ( the correct flow ) <section> none - requirements change only <section> n / a <section> n / a <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove device driver references from app development guide and cleanup <section> device driver apis never implemented , guide has references to a design model that does not work <section> device driver scrub : - scrub the guide , remove non - existent references other minor cleanup : - fix table of contents - remove old doc file <section> n / a <section> see # <number> and # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , add usersguide / osalguide to local targets <section> added userguide and osalguide to the local target list to avoid makefile warning fix # <number> <section> steps taken to test the contribution : <number> . ran make userguide and osalguide and confirmed no longer outputs warnings <section> passes enhanced ci <section> - hardware : cfs dev server <number> - os : ubuntu <number> - versions : master bundle with this change <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfe_sb_getlastsenderid will crash if if called before message sent on pipe cfe_sb_getlastsenderid assumes that cfe_sb . pipetbl [ pipeid ] . currentbuff is not <allcaps> null </allcaps> . upon cfe_sb_createpipe , this will be null . currentbuff is only set upon receiving a message in cfe_sb_rcvmsg ( ) . so , if cfe_sb_getlastsenderid is called before receiving a message the program will crash . this is steven seeger from <allcaps> gsfc </allcaps> . guess i have a personal account on github . <happy>",0
unit test macros and example use with sb <section> sample macro - ification of ut code for <allcaps> ccb </allcaps> consideration . partial implementation of # <number> fix # <number> <section> made sb unit tests and confirmed all passed . <section> simplified ut code <section> debian linux <section> <email> <allcaps> edit </allcaps> : added this fixes # <number>,2
macros for simpler unit test code <section> existing cfe unit test code is voluminous and contains a lot of redundant conditional code . <section> the checking of conditions in cfe unit tests can be simplified with macros and / or functions . <section> would still like to consider a test generator of some sort . <repeated> <section> add any other context about the feature request here . <section> <email>,2
"doxygen warning for \ "" usersguide \ "" <section> doxygen errors for "" usersguide "" must be fixed before submitting a pull request defined by ci <url> <url> <section> ` <code> ` <section> amd64 compiler : gcc c <allcaps> buildtype </allcaps> = debug omit_deprecated = false <section> warning : overriding recipe for target ' usersguide ' warning : ignoring old recipe for target ' usersguide ' <section> anhelina yurkova <allcaps> nasa goddard </allcaps> / <allcaps> asrc ses ii </allcaps>",2
cfe tlm packet <number> - bit alignment issue <section> compiler add padding is applied to cfe telemetry packets if the data region does not start on a <number> bit boundary and the packet contains a <number> bit variable . <section> steps to reproduce the behavior : <number> . nominal build process . <number> . enable tlm . <number> . bit bust a telemetry packet containing a <number> bit variable . <section> no compiler added padding should be applied . <section> ubuntu <number> - bit - <number> <section> dan knutsen <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"build failure of ut_time_stubs with <allcaps> buildtype </allcaps> = release <section> matrix build fails with : <allcaps> buildtype </allcaps> = release omit_deprecated = false see also <url> ( enhanced ci ) <section> steps to reproduce the behavior : <number> . see ci process / results <section> successful build <section> <code> <section> - ci system , integration candidate bundle <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"separate execute in shell functionality from core cfe service <section> command to execute in shell a concern in some security scenarios . <section> remove from the core , better suited to an app ( optional , can be included or loaded based on mission requirements / needs ) <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"deprecate multiple "" success "" code responses <section> <allcaps> api </allcaps> ' s with multiple "" success "" codes are frequently mishandled <section> single success response , unique information should be passed back in parameters <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
""" error , can not open es app startup file : / cf / cfe_es_startup . scr "" when running a sample cpu1 application <section> i apologize in advance if the following issue that i am reporting is caused by my misunderstanding of the cfs / cfe cmake build system . the issue is that i am getting the following issue when <number> ) i run the <code> command from the <allcaps> cfs </allcaps> repository and also <number> ) if i run it from clion with the changes described in # <number> . <section> <code> the log : <code> <section> <code> the log : <code> ` ` <code> . / cf / cfe_es_startup . scr <code> ` <code> ` <code> cfe_es_startup . scr <code> . scr ` file available to <allcaps> cfs </allcaps> . <section> none . <section> stanislav pankevich ( <allcaps> pts </allcaps> , private german space company )",3
add functional test for sb unsubscribe / resubscribe with incrementing count <section> # <number> updated sequence counter behavior . need to add a functional test to cover it . <section> add a functional test . <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"potential for app exit failure when not passing back runstatus <section> cfe_es_exitapp reports error when passed in exitstatus is cfe_es_runstatus_app_run . typical app pattern ( see <url> is : ` <code> ` but cfe_es_runloop does not update runstatus on internal request to stop : <url> <section> steps to reproduce the behavior : <number> . send restartapp , will error and fail to restart . <section> set passed in runstatus to the control request for the case above : runstatus = cfe_es_global . apptable [ appid ] . controlreq . appcontrolrequest allows the app to take appropriate action . <section> - cfs dev server - os : ubuntu <number> - versions : current dev ( <number> . <number> ) <section> fails build verification testing <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"update section <number> . <number> “ hardware servicing ” application in developer ' s guide <section> section <number> . <number> hardware service in developer ' s guide needs to be updated . <section> anh van , <allcaps> nasa </allcaps> goddard",2
"incomplete coverage test for src / time <section> current coverage : <number> % cfe_time_api . c cfe_time_cfe2fsseconds <code> cfe_time_print <code> cfe_time_task . c cfe_time_taskinit <code> cfe_time_utils . c cfe_time_getreference <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"incomplete coverage test for src / tbl <section> current coverage : <number> % cfe_tbl_api . c cfe_tbl_register <code> cfe_tbl_update <code> cfe_tbl_manage <code> cfe_tbl_task_cmds . c cfe_tbl_loadcmd <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"incomplete coverage test for src / sb <section> current coverage : <number> % missing code coverage for the following : cfe_sb_api . c cfe_sb_setpipeopts <code> cfe_sb_sendmsgfull <code> cfe_sb_task . c cfe_sb_taskmain <code> cfe_sb_appinit <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"incomplete coverage test for src / fs <section> current coverage <percent> missing coverage for the following : cfe_fs_decompress . c fs_gz_eat_header_reentrant <code> <code> fs_gz_huft_build_reentrant <code> <code> <code> <code> <code> <code> <code> fs_gz_inflate_dynamic_reentrant <code> fs_gz_inflate_stored_reentrant <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"incomplete coverage test for cfe_es_apps . c <section> current coverage for cfe_es_apps . c = <number> % missing coverage test for the following : cfe_es_appcreate <code> cfe_es_cleanupobjectcallback <code> cfe_es_cleanuptaskresources <code> cfe_es_countobjectcallback <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"incomplete coverage test for cfe_es_task . c <section> missing code coverage for the following : cfe_es_taskinit <code> <code> <code> cfe_es_housekeepingcmd <code> <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"incomplete coverage test for cfe_es_start . c and cfe_es_syslog . c <section> coverage test : <percent> missing coverage for the following : cfe_es_start . c : cfe_es_createobjects <code> cfe_es_syslog . c : cfe_es_syslogreaddata <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"incomplete coverage test for cfe_es_shell . c <section> no coverage test for cfe_es_shellcountobjectcallback <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"incomplete coverage test for cfe_es_api . c <section> current coverage : <number> % missing coverage for the following : cfe_es_setappstate <code> cfe_es_reloadapp <code> cfe_es_exitapp <code> cfe_es_deletechildtask <code> cfe_es_getappidinternal <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"add global scope option to omit deprecated items <section> fix # <number> adds a "" global_build_options . cmake "" file akin to the existing arch_build / mission_build option files . include an example of this file that optionally does add_definitions ( ) to omit the deprected elements for build testing . <section> build with and without the omit_deprecated flag on the prep command , and confirm that it is correctly translated to the <code> globally for all tools and <allcaps> fsw </allcaps> code . <section> affects build system only . no change to runtime behavior . <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit <section> joseph hickey , vantage systems , inc . <section> you must attach a signed <allcaps> cla </allcaps> ( required for acceptance ) or reference one already submitted",2
"add compiler option examples <section> fix # <number> - add extra compile options for mission scope and arch scope . these are separated such that the same basic structure will also apply to cross compile environments that do not / cannot use the same flags on both ( host and cross ) builds . for "" mission "" build the targets are never cross compiled , only built for the native host machine . it should be safe to assume a compiler in the <allcaps> gcc </allcaps> family and the strict warnings should _always_ be applicable here . for "" arch "" build the options are compiler vendor dependent . the file as - supplied can only be used if all the target cross compilers are in the same family and support the same warning options . however , this file can be modified without affecting the options used for the host side tools . <section> build for <allcaps> simulation </allcaps> = native and confirm full suite of warnings is used for both host - side tools and <allcaps> fsw </allcaps> code . also build for other platforms ( <allcaps> mips </allcaps> , <allcaps> rtems </allcaps> ) where the code is not ( yet ) fully warning - free . confirmed that the warnings can be modified at the arch_build without affecting the host - side tools which are still built with full warnings . <section> no impact to runtime behavior <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit ( build host ) <section> joseph hickey , vantage systems , inc . <section> you must attach a signed <allcaps> cla </allcaps> ( required for acceptance ) or reference one already submitted",2
"doxygen obsolete warning <section> obsolete warning when creating osalguide / usersguide / doc : ` ` <code> details_at_top ' at line <number> of file <code> show_directories ' at line <number> of file <code> html_align_members ' at line <number> of file <code> xml_schema ' at line <number> of file <code> xml_dtd ' at line <number> of file <code> ` ` <section> anh van , <allcaps> nasa </allcaps> goddard",1
use src_local_path as single source of truth this avoids the two path diverging and possibly causing problems in the future <section> the call to <code> is building its own path even though its contents are identical to <code> . this change avoids possible divergence of these values in the future . <section> ran a local build . <section> no change in behavior .,1
"cfe_es_perflogadd needs better mutual exclusion <section> the <code> routine uses <code> in an attempt to get exclusive access to a common global data structure to record performance metrics / state . this is insufficient . the <code> function is generally not implemented on <allcaps> smp </allcaps> , and even if it is , it probably only affects the current core . either way , it will <section> provide exclusivity , because the other cores can still access the data even when interrupts are disabled . this function is also a no - op in the <allcaps> posix osal </allcaps> . <section> enable performance monitoring on a <allcaps> posix </allcaps> system and observe that occasionally samples occur in the log out of order or otherwise appear corrupted . this is likely due to concurrent writes to the same entry related to insufficient locking . <section> the function should use some form of primitive that actually does provide exclusivity between threads ( such as a mutex / spinlock ) and not an interrupt lock . <section> <url> <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , update tone leap variable <section> fixes # <number> <section> <number> . modified cpu1_platform_cfg . h such that i could reproduce the error : <hashtag> un def </hashtag> cfe_platform_time_cfg_bigendian - - > <hashtag> define </hashtag> cfe_platform_time_cfg_bigendian <number> . corrected cfe_time_tone . c via replacing all instances of attoneleaps variable with attoneleapseconds . <number> . recompiled software : make prep make make install <number> . ran software and verified that the issue was fixed : . / core - cpu1 <section> the software will compile and run successfully . <section> oracle vm virtualbox os : ubuntu - <number> version : cfe <number> . <number> ; <allcaps> osal </allcaps> <number> . <number> ; <allcaps> psp </allcaps> <number> . <number> <section> none <section> dan knutsen <allcaps> gsfc </allcaps> / <allcaps> nasa </allcaps>",0
"avoid alignment warnings on some cpus <section> - fix # <number> partially address # <number> ( overlapping issue ) on cpus with strict alignment requirements , some <allcaps> cfe </allcaps> code that uses a char - type pointer ( e . g . uint8 <wink> to compute memory addresses triggers an alignment warning when it gets cast back to the actual data type . in the mempool implementation , the pointer should be sufficiently aligned already , because the address computation already takes <allcaps> cpu </allcaps> alignment requirements into account when calculating the addresses / offsets . - for the cfe_sb pool buffers , using the <code> type , which is integer in nature , avoids the warning . - for the cfe_tbl internal table pointer , use a <code> internally to store the buffer pointer , rather than a <code> . this changes the casting needs elsewhere . <section> build <allcaps> cfe </allcaps> with enable_unit_tests = <allcaps> true </allcaps> confirm all unit tests passing perform sanity test on <allcaps> cfe </allcaps> ( normal startup , send commands from console ) build for mips64 and ensure that ( some ) alignment warnings are fixed <section> no change to behavior . fixes build warnings only . <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit <section> there are still some remaining alignment cast warnings regarding the message types , where a local message buffer is cast to a <code> which has a higher alignment requirement . this is a little harder to fix as it requires changing the local buffer definition . <section> joseph hickey , vantage systems , inc . <section> you must attach a signed <allcaps> cla </allcaps> ( required for acceptance ) or reference one already submitted",2
"consistent results from cfe_es_syslog_append and cfe_es_writetosyslog <section> from # <number> , cfe_es_writetosyslog : > upon additional review - the only "" extra "" thing that cfe_es_writetosyslog does is a final call to os_printf to duplicate the syslog message onto the console , which would not be done when calling the functions individually . > in particular , this means that any syslog messages generated in the <allcaps> cds </allcaps> use case would not appear on the console . this could be a valid concern / issue that might warrant a fix . <section> consistent behavior <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , create osal api guide with doxygen <section> create osal api guide <section> steps taken to test the contribution : <number> . make prep <number> . make osalguide <section> - hardware - ubuntu <number> - <allcaps> cfe </allcaps> <number> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"create osal api guide with doxygen <section> auto - generate osal api guide with doxygen <section> anh van , <allcaps> nasa </allcaps> goddard",2
"issue # <number> , update toolchain - ppc - vxworks6 . <number> <section> - fix # <number> update toolchain - ppc - vxworks6 . <number> . cmake to include new bsp name reference <url> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"update toolchain - ppc - vxworks6 . <number> . cmake <section> update toolchain - ppc - vxworks6 . <number> . cmake to use mcp750 - vxworks name <section> anh van , <allcaps> nasa </allcaps> goddard",2
"improve <allcaps> api </allcaps> consistency for functions accepting a software bus message <section> the data types accepted by the <allcaps> sb api </allcaps> are not entirely consistent . most <allcaps> api </allcaps> functions that operate on software bus message buffers accept a <code> . there are some exceptions , most notably the <code> function accepts a <code> . <section> all <allcaps> sb api </allcaps> functions that operate on message buffers should use the <code> type ( or <code> ) <section> making the interface type - correct helps the compiler ' s type checking do its intended job , helping to catch / avoid the possibility of passing a data buffer which is not actually an sb message buffer . using <code> permits anything to be passed in , effectively disabling all checking . <section> joseph hickey , vantage systems , inc .",2
"set osal_system_bsptype for native builds <section> fix # <number> this explicitly specifies the <allcaps> bsp </allcaps> to use when using <code> flags to the build . all other example toolchain files already included this setting . <section> rebuild code with and without <code> flag . confirmed no build issues / changes . <section> no impact - build script change only . <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit <section> this makes it compatible after a related <allcaps> osal </allcaps> build script cleanup is also merged ( see nasa / osal # <number> , nasa / osal # <number> ) . <section> joseph hickey , vantage systems , inc . <section> you must attach a signed <allcaps> cla </allcaps> ( required for acceptance ) or reference one already submitted",2
"<allcaps> cfe </allcaps> cmake toolchain script ( s ) should set osal_system_bsptype <section> the <allcaps> osal </allcaps> scripts contain some convoluted logic to deal with the fact that the <allcaps> cfe psp </allcaps> and <allcaps> osal bsp </allcaps> are overlapping in function . in particular the <allcaps> osal </allcaps> script checks <code> as a fallback if osal_system_bsptype is unset , in order to decide which <allcaps> bsp </allcaps> to use for unit tests . it is desired to clean this up and simplify this logic . <section> all example toolchains should set osal_system_bsptype so that <allcaps> osal </allcaps> builds a specific <allcaps> bsp </allcaps> for the platform , to be used for unit testing as well as ( eventually ) the <allcaps> psp </allcaps> startup as well . <section> having this variable set simplifies the <allcaps> osal </allcaps> build considerably and makes it better isolated from the <allcaps> cfe </allcaps> build . a proposed change to <allcaps> osal </allcaps> ( as part of issue nasa / osal # <number> ) will make the <code> a required option , failing the build if it is unset this change to the <allcaps> cfe </allcaps> toolchains should be backward - compatible . <section> joseph hickey , vantage systems , inc .",2
"alignment warnings when casting char * pointers <section> when compiling on architectures with strict alignment requirements , casts between <code> ( as used in some pointer arithmetic to calculate addresses ) to other types triggers a warning about alignment . <section> build for an architecture with strict alignment requirements ( <allcaps> sparc </allcaps> , <allcaps> mips </allcaps> , etc ) . example compiler warning : <code> <section> should build cleanly with no warnings <section> - ubuntu <number> <allcaps> lts </allcaps> build host - <allcaps> mips </allcaps> cross compiler ( mips - poky - linux - gcc version <number> . <number> ) <section> many of these are actually safe because <allcaps> cfe </allcaps> ensures that the <code> as well as the base / pool addresses are aligned for the largest data types . however , because the pointer arithmetic is done as a <code> the compiler sees the cast from an <code> to a larger type as an issue . <section> joseph hickey , vantage systems , inc .",2
"update ut entry point to correspond with <allcaps> osal </allcaps> / ut assert change <section> - fix # <number> use <code> instead of <code> as the entry point function for test applications . this needs to be merged in coordination with a related change in <allcaps> osal </allcaps> / ut assert . this also updates the ut application final link to use "" ut_assert "" rather than "" ut_bsp "" , as the separate bsp for unit test is also getting phased out . <section> build <allcaps> cfe </allcaps> for all supported platforms ( native linux , <allcaps> rtems </allcaps> , vxworks ) in conjunction with related <allcaps> osal </allcaps> pull request and confirm unit test build and run successfully <section> no change to behavior <section> ubuntu <number> <allcaps> lts </allcaps> <number> bit <section> needs to be merged in coordination with nasa / osal # <number> <section> joseph hickey , vantage systems , inc . <section> you must attach a signed <allcaps> cla </allcaps> ( required for acceptance ) or reference one already submitted",2
"use "" uttest_setup "" as name of entry point for unit tests <section> in nasa / osal # <number> , the ut assert library is being modified to use a different entry point function name for unit test code , not <code> as is used for a normal application . <section> the <allcaps> cfe </allcaps> unit tests need to use <code> instead . <section> any name could work for test setup , but the issue is that it has to be different than that of a normal application . this is so the normal entry point can be provided by ut assert here , allowing better layering . <section> changing the name of the test entry point makes more sense because these only use the <allcaps> osal bsp </allcaps> but run with the stub library for <allcaps> osal </allcaps> itself . it is therefore not really accurate to name the entry point as <code> because this is not an <allcaps> osal </allcaps> application at all , it is a unit test . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , release prep <section> fix # <number> - updated <allcaps> readme </allcaps> - removed custom license document - added standard apache <number> - updated copyright release version cfe <number> - > <number> <section> <number> . standard build , unit test and execute <section> - no impact to behavior <section> - hardware : cfs dev server <number> - os : ubuntu <number> - versions : cfe <number> . <number> related versions and <allcaps> osal </allcaps> <number> . <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
release prep <section> updates for release : - updated <allcaps> readme </allcaps> - removed custom license document - added standard apache <number> - updated copyright release version cfe <number> - > <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"issue # <number> , resolve cpp check <section> - fix # <number> resolve cpp check <section> steps taken to test the contribution : <number> . cppcheck - - force - - inline - suppr - - std =c 9 9 - - language =c - - error - exitcode = <number> - - enable = warning , performance , portability , style - - suppress = variablescope - - inconclusive fsw / cfe - core / src <number> > cppcheck_flight_cfe . txt <section> - hardware - ubuntu <number> - <allcaps> cfe </allcaps> <number> <section> add any other context about the contribution here . <section> anh van , <allcaps> nasa </allcaps> goddard",2
"fix # <number> , const string initialization <section> fixes # <number> <section> steps taken to test the contribution : <number> . make enable_unit_tests = <allcaps> true simulation </allcaps> = native prep <number> . make <number> . make install <number> . make test <section> no change <section> - cfs dev server - os : ubuntu <number> - versions : master bundle with this commit <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
fix missing const warning with - wdiscarded - qualifiers enabled <section> initialization discards const qualifier . <repeated> warning in sb_ut . c with the following flags enabled : <code> <section> add const ( the internal variables are not modified ) . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"issue # <number> , adding travis . yml for cppcheck on flight <section> - fix # <number> adding travis . yml for cppcheck on cfe - core / src <section> anh van , <allcaps> nasa </allcaps> goddard",2
"adding cppcheck for cfe - core / src <section> adding travis . yml for cppcheck on cfe - core / src <section> anh van , <allcaps> nasa </allcaps> goddard",2
"cppcheck for cfe - core / src <section> resolve cpp check warning . <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"fix # <number> , always increment sequence counter <section> - fix # <number> note that this means route entries will never be removed and unsubscribe messages will never be sent . <section> built and ran the sb unit tests . all passed , with changes included in this pull req . <section> sequence id ' s of messages should increment even when there ' s ( currently ) no subscribers to that message id . <section> debian vm <section> <email>",2
"many unit tests report event count errors as hex <section> unit tests check the number of events sent during the test , many of these in sb_ut . c are reported as hex . <repeated> such as in test_sb_cmds_sendprevsubs ( line <number> . ) <section> uncovered when i was changing getpipename to produce events ( as part of making it a public <allcaps> api </allcaps> ) and the unit test event counts had to be updated . a simple test is to change the "" exprtn "" for a test . <section> event counts should reported in decimal . <section> see above . <section> linux vm <section> n / a <section> <email>",2
"separate the <allcaps> cfe </allcaps> stubs from ut test cases <section> fix issue # <number> build the <allcaps> cfe ut </allcaps> stub library separately from the test cases . this moves the stub files into a separate ut - stubs directory , and the library is now called "" ut_cfe_core_stubs "" note : minor cleanup also done as part of moving . two stub files were in the source tree but not being built or used by any framework test config . these were : ut_arinc653_stubs . c ut_configdata_stubs . c these are now removed . also cleaned up some old macros / ifdefs that were never enabled or used in the current tests . <section> build <allcaps> cfe </allcaps> using default configuration with enable_unit_test = <allcaps> true </allcaps> . confirm <allcaps> cfe </allcaps> core executes normally . confirm all <allcaps> cfe </allcaps> unit tests build and run as normal . <section> no impact to behavior . <allcaps> cfe fsw </allcaps> code is unchanged , this only affects ut build / link procedure . <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit <section> joseph hickey , vantage systems , inc . <section> you must attach a signed <allcaps> cla </allcaps> ( required for acceptance ) or reference one already submitted",2
"investigate various verifycmdlength implementations and possible common utility <section> cfe_*_verifycmdlength <censored> is defined for each service except <allcaps> tbl </allcaps> , and <allcaps> tbl </allcaps> does it slightly differently within cfe_tb_taskpipe . <section> suggest a common implementation . <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"build system needs to better separate the ut stub function from the ut test cases <section> currently the "" unit - test "" subdirectory generates libraries that provide stubs for all public <allcaps> api </allcaps> calls defined in the <allcaps> cfe </allcaps> core apps , as well as test cases and executables for unit testing the <allcaps> cfe </allcaps> itself . having these combined like this causes a few problems : - the two products have different scopes . the ut stubs apply globally across the entire mission and can / should be used for all ut ( platform - independent ) , but the test cases do need to be tuned to the platform , so a separate set of test cases needs to be built per - platform . - as a result , the ut stubs themselves are also built per - platform . this is wasteful but more importantly this makes linking to the <allcaps> cfe </allcaps> stubs from application ut code difficult . - it is also undesirable just from a general code organization standpoint . the directory structure would be cleaner if these were in separate subdirectories . <section> build code with enable_unit_tests = <allcaps> true </allcaps> and observe that the <allcaps> cfe </allcaps> "" stub "" library is named "" libut_cfe_core_default_cpu1_stubs . a "" ( i . e . build specifically for the default / cpu1 platform config ) and it resides in the same directory as the ut executables / test cases . <section> the stub library should be named only "" libut_cfe_core_stubs . a "" and it should be in a separate subdirectory from the unit test cases themselves . <section> ubuntu <number> <allcaps> lts </allcaps> <number> bit <section> joseph hickey , vantage systems , inc .",2
"suggested upper limit value creates infinite loop when the user sets <code> , the documentation specifies a range of <number> to 0 xffff . this value is later used in a <code> in cfe_sb_priv . h as follows : <hashtag> define </hashtag> cfe_sb_max_number_of_msg_keys ( <number> + cfe_platform_sb_highest_valid_msgid ) this value is then used as the upper limit of a for loop here <url> . the problem is that if the user sets the upper limit of 0 xffff as specified , the <code> becomes <code> . this value is used as the upper range of the for loop linked above . since the iterator used in that loop is a unsigned <number> bit integer , it can never reach <code> and creates an infinite loop . suggested fix would be to : <number> . stop using <code> s which add to other <code> s <number> . never use <code> s as iterator range variables <number> . check types of all iterators <number> . change the documentation of <code> to say max value of <code>",2
clean up table services comments <section> inconsistent comments found on line <number> in cfe_tbl_internal . c ' . <section> ' cfe_tbl_internal . h ' should be replaced with ' cfe_private . h ' <section> <section> general scrub recommended . <section> dan knutsen <allcaps> nasa gsfc </allcaps>,1
"exception and reset log possible race conditions <section> cfe_es_clearerlogcmd and cfe_es_writetoerlog both modify shared cfe_es_resetdataptr values . cfe_es_processcoreexception and cfe_es_resetcfe both use cfe_es_writetoerlog ( both are <allcaps> api </allcaps> ' s , so could be out of es context ) . <section> looks to me like if cfe_es_clearerlogcmd gets interrupted by the processing of an app core exception , the log could get corrupted . <section> no race . <section> see functions above . <section> - latest cfs bundle dev branch <section> not observed , via code review . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"initialize system log mode implementation does not match requirement ces1522 <section> requirement ces1522 "" upon a processor reset , the cfe shall set the system log mode to discard . "" implementation : <url> the build verification test just happens to pass because the sample configuration defaults the mode to discard . <section> update requirement or implementation . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"clarify cfe_es_syslog_append use vs cfe_es_writetosyslog <section> cfe_es_syslog_append is used is just a few places ( cds , esmempool ) , everywhere else is cfe_es_writetosyslog . <section> consistency is preferred for maintenance and usability , if there is not sufficient justification for a separate macro , remove it and use cfe_es_writetosyslog . <section> if there is clear justification , consider adding to the macro documentation / comments <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> *edit* - typo",3
"remove device driver references from code <section> # <number> is to remove device driver requirements , there are also references in the software . <section> remove references to device drivers , "" cfe_drv "" , etc from software , configuration files , documentation , etc . for example : <url> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add <allcaps> contributing </allcaps> . md is your feature request related to a problem ? please describe . github repositories are suggested to have a <allcaps> contributing </allcaps> . md document which describes best practices for developers wishing to contribute to the main release . describe the solution you ' d like develop a <allcaps> contributing </allcaps> . md document with simple stuff like "" follow the coding style guidelines "" , run unit tests prior to a pull request , etc . describe alternatives you have considered likely will need to incorporate or reference existing documentation . could also use the wiki capabilities of dropbox . additional context add any other context about the feature request here . requester info chris knight , <allcaps> nasa </allcaps> ames research center .",1
"fix # <number> , add <allcaps> sb api </allcaps> to get pipe by name <section> fixes issue # <number> <section> make mission - all ; run cpu1 / cfe_core_default_cpu1 / unit - test / cfe_core_default_cpu1_sb_ut <section> adds a new function , cfe_sb_getpipeidbyname , which retrieves the pipe id given a name of a pipe . as this would conflict with the removal of the pipename from the pipetbl , this code uses the os_queuegetidbyname and iterates across the pipetbl to find the matching entry . <section> ubuntu <number> - bit linux <number> . <section> chris knight , <allcaps> nasa </allcaps> ames research center .",2
"doxygen warning expected <tr> tag and illegal command <section> / media / sf_share / cfs_11_5_2019 / cfs / cfe / fsw / cfe - core / src / inc / cfe_es . h : <number> : warning : expected <tr> tag but found tk_lnkword token instead ! / media / sf_share / cfs_11_5_2019 / cfs / cfe / fsw / cfe - core / src / inc / cfe_es . h : <number> : warning : expected <tr> tag but found tk_lnkword token instead ! / media / sf_share / cfs_11_5_2019 / cfs / cfe / fsw / cfe - core / src / sb / cfe_sb_priv . h : <number> : warning : expected <tr> tag but found tk_lnkword token instead ! / media / sf_share / cfs_11_5_2019 / cfs / cfe / fsw / cfe - core / src / sb / cfe_sb_priv . h : <number> : warning : expected <tr> tag but found tk_lnkword token instead ! / media / sf_share / cfs_11_5_2019 / cfs / cfe / fsw / cfe - core / src / sb / cfe_sb_priv . h : <number> : warning : expected <tr> tag but found tk_lnkword token instead ! / media / sf_share / cfs_11_5_2019 / cfs / cfe / fsw / cfe - core / src / sb / cfe_sb_priv . h : <number> : warning : expected <tr> tag but found tk_lnkword token instead ! / media / sf_share / cfs_11_5_2019 / cfs / cfe / fsw / cfe - core / src / sb / cfe_sb_priv . h : <number> : warning : expected <tr> tag but found tk_lnkword token instead ! / media / sf_share / cfs_11_5_2019 / cfs / cfe / fsw / cfe - core / src / sb / cfe_sb_priv . h : <number> : warning : expected <tr> tag but found tk_lnkword token instead ! / media / sf_share / cfs_11_5_2019 / cfs / cfe / fsw / cfe - core / src / sb / cfe_sb_priv . h : <number> : warning : expected <tr> tag but found tk_lnkword token instead ! / media / sf_share / cfs_11_5_2019 / cfs / cfe / fsw / cfe - core / src / inc / cfe_sb_msg . h : <number> : warning : illegal command \ sb_pipeoptsec as the argument of a \ c command <section> steps to reproduce the behavior : <number> . make usersguide <section> - hardware - ubuntu <number> - doxygen <date> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"untraced feature to decompress apps / lib on load <section> the feature to decompress apps / libraries on load that end in . gz does not have requirements or associated build verification . note it is covered in coverage / functional testing in fs_ut . c . <section> <number> . remove this feature from the core ( allows # <number> to externalize decompress to be implemented cleanly ) <number> . add requirements , design , and build verification and resolve how to implement vs # <number> desire to externalize <section> - implemented in cfe_es_apps . c - utilizes cfe_fs_api . c : cfe_fs_isgzfile , cfe_fs_getuncompressedfile , cfe_fs_decompress . c and cfe_fs_decompress . h <section> cfe_fs_decompress prototype is defined in both inc / cfe_fs . h and cfe_fs_decompress . h <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cfs style guide <section> code and file naming in cfs and apps is inconsistent and does not follow a particular set of guidance , and no guidance were developed previously for cfs . <section> develop a "" style guide "" in markdown format for inclusion in cfe / docs , describing code formatting conventions , symbol naming conventions , documentation conventions , directory structure and file naming conventions , etc . this should be referenced by the app developer ' s guide and any other relevant docs and may incorporate or replace parts of existing documents . perhaps also link / refer from the github wiki . <section> other options include adding style information to the app developer ' s guide or identifier naming conventions documents . <section> jake provided the <allcaps> gsfc </allcaps> "" indent "" flags that are standard at <allcaps> gsfc </allcaps> , this is a good starting point for formatting and should be documented . <section> chris knight , <allcaps> nasa </allcaps> ames research center",1
"cpp check error <section> cpp check has warning . cfe / fsw / cfe - core / unit - test / ut_time_stubs . c : <number> <url> uninitialized variable : result cfe / fsw / cfe - core / unit - test / ut_time_stubs . c : <number> <url> uninitialized variable : result <section> steps to reproduce the behavior : <number> . cppcheck - - force . <number> . see warning <section> - hardware - <number> - cppcheck <number> , cfe <number> . <number> , osal <number> . <number> <section> anh van , <allcaps> nasa </allcaps> goddard",0
"set <code> to no for doxygen document builds and resolve all <code> and <code> warnings <section> the extract_all flag set to <allcaps> yes </allcaps> defeats the warn_if_undocumented and warn_no_paramdoc enabled errors <section> set extract_all to no and explicitly document all elements for at minimum the usersguide documentation . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <allcaps> edit </allcaps> - separated original issue , warning file name now in # <number>",1
"fix # <number> , unable to resolve link <section> fixed doxygen warning : unable to resolve linke <section> steps taken to test the contribution : <number> . make usersguide <number> . cfe_es_msg . h : <number> : check cfe__es__msg_8h . html <number> . cfe_evs_msg . h : <number> : - cfe__evs__msg_8h . html <number> . cfe_evs_msg . h : <number> : - cfe__evs__msg_8h . html <number> . cfe_es . dox : <number> : - cfeesugswreset . html <number> . cfe_es . dox : <number> : cfeesugcdssrv . html <number> . cfe_es . dox : <number> : - cfeesugmempoolsrv . html <number> . cfe_es . dox : <number> : - cfeesugmempoolsrv . html <number> . cfe_evs . dox : <number> : - cfeevsugcounters . html <number> . cfe_evs . dox : <number> : - cfeevsugfaq . html <number> . verify warning . log that warning is longer there . <section> - hardware - ubuntu <number> - cfe <number> . <number> , rc - <number> . <number> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"doxygen misc warning <section> cfe / fsw / cfe - core / src / inc / cfe_es . h : <number> : warning : expected <tr> tag but found tk_lnkword token instead ! cfe / fsw / cfe - core / src / inc / cfe_es . h : <number> : warning : the following parameters of cfe_es_waitforsystemstate ( uint32 minsystemstate , uint32 timeoutmilliseconds ) are not documented : parameter ' minsystemstate ' cfe / fsw / cfe - core / src / inc / cfe_es_msg . h : <number> : warning : found unknown command <code> \ c ' cfe / fsw / cfe - core / src / inc / cfe_fs . h : <number> : warning : the following parameters of cfe_fs_initheader ( cfe_fs_header_t * hdr , const char * description , uint32 subtype ) are not documented : parameter ' description ' parameter ' subtype ' cfe / fsw / cfe - core / src / inc / cfe_sb . h : <number> : warning : argument ' optsptr ' of command <user> is not found in the argument list of cfe_sb_getpipeopts ( cfe_sb_pipeid_t pipeid , uint8 * optptr ) cfe / fsw / cfe - core / src / inc / cfe_sb . h : <number> : warning : the following parameters of cfe_sb_getpipeopts ( cfe_sb_pipeid_t pipeid , uint8 * optptr ) are not documented : parameter ' optptr ' cfe / fsw / cfe - core / src / inc / cfe_sb_msg . h : <number> : warning : illegal command \ sb_pipeoptsec as the argument of a \ c command <section> steps to reproduce the behavior : <number> . make usersguide <section> - hardware - ubuntu <number> - doxygen <date> , rc - <number> . <number> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"doxygen warning , unable to solve link <section> doxygen gives warning , unable to resolve link . <repeated> etc doxygen_warning_cfe_unable_to_resolve . txt <url> <section> steps to reproduce the behavior : <number> . make usersguide <section> - hardware - ubuntu <number> - doxygen <date> , rc - <number> . <number> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"doxygen warning : explicit link <section> doxygen gives warning : explicit link request to ' cfe_sb_cmdhdr_t ' could not be resolved . <repeated> etc userguide_warning_explicit_link . txt <url> <section> steps to reproduce the behavior : <number> . make usersguide <section> - hardware - ubuntu <number> - doxygen <date> , rc - <number> - <number> <section> anh van , <allcaps> nasa </allcaps> goddard",2
add sample vxworks toolchain file <section> no example toolchain file to build for mcp750 included . <section> add the toolchain file used for testing . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
exclude unit - tests from lcov report ( skews results ) <section> unit test coverage results skewed by unit - test directory inclusion ( shows uncovered stub lines ) <section> lcov - - remove unit - test ( or whatever ) from the coverage . info line in makefile . sample <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
remove test results from fsw path <section> test results should be supplied as artifacts with the release . these results are outdated and not used for any new comparison checks . <section> remove from <allcaps> fsw </allcaps> . <section> none <section> specifically : - cfe / fsw / cfe - core / unit - test / esresults - cfe / fsw / cfe - core / unit - test / evsresults - cfe / fsw / cfe - core / unit - test / fsresults - cfe / fsw / cfe - core / unit - test / sbresults - cfe / fsw / cfe - core / unit - test / tblresults - cfe / fsw / cfe - core / unit - test / timeresults <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"remove device driver requirements <section> device driver requirements are unimplemented . hardware libraries or apps already cover the required functionality . unloading a library is risky / complex , better to remove from startup script and restart . <section> remove device driver requirements . <section> requirements were debated , no solid use case to justify the additional complexity . <section> na <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"task id not valid in cfe_es_deleteapp <section> when deleting an app the task id not valid message was observed : <code> the app was still deleted . <section> steps to reproduce the behavior : <number> . should be able to recreate by just deleting an app ( say sample_app ) on vxworks6 . <number> <allcaps> osal </allcaps> ( i have not had a chance to verify myself ) <section> appid = <number> , taskid seem to start in the 6 5 5 xx range . i ' d expect the code to use the right values in the right calls . <section> needs investigation <section> - mcp750 - os : vxworks6 . <number> - versions : rc - <number> bundle <section> seen during build verification testing . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> found by walt m .",0
"cfe_evs_writelogfilecmd requires recursive locking <section> the function <code> in cfe_evs_log . c locks <code> for the entire duration of the function . if an error is encountered , it will call <code> , which also tries to lock the mutex . if the os / <allcaps> osal </allcaps> do not support recursive locking on mutexes , this will lead to a deadlock . <section> steps to reproduce the behavior : <number> . cause an error during the execution of <code> ( by e . g . giving it an invalid filename ) . <section> this may be expected behavior , if cfe requires its mutexes to be recursively lockable . if so , this is not a bug and i will have to modify our <allcaps> osal </allcaps> . but if that is not the expectation , then i would this function should relinquish its lock before calling <code> . more specifically , it looks like the this can be accomplished by moving the line <code> to just before each instance of <code> in the function . by each of these points , this function is done accessing sensitive <allcaps> evs </allcaps> data . <section> * cfe_evs_writelogfilecmd ' s release of the lock <url> <section> - capella flight computer - os : freertos <number> . <number> - versions : cfe <number> . <number> , <allcaps> osal </allcaps> <number> . <number> ( plus in - house freertos port ) <section> i found this while testing our fix for # <number> . <section> mike stewart , capella space .",0
"<allcaps> es cds </allcaps> defines two nearly identically - named constants with different values <section> the <allcaps> cds </allcaps> code uses two mission - scope configuration values : <code> <code> the values are actually different ; the "" <allcaps> length </allcaps> "" version is just the <allcaps> cds </allcaps> base name , where as the "" <allcaps> len </allcaps> "" is the size of the qualified name ( <allcaps> app </allcaps> . cdsname form ) . <section> no runtime issue , this is a style / maintenance issue . <section> the names should be more different and distinctive . suggest that <code> should be renamed to indicate that it reflects the size of the base name only . this value appears to primarily be used internally to <allcaps> cds </allcaps> , and does not get directly used in telemetry packets , so it would be easier to rename , with less impact on existing code . <section> joseph hickey , vantage systems , inc .",2
running core - linux . bin startup errors the startup says the queue depth may be too large for the os to handle . the msg_max defaults to <number> but when trying to change it the os does not allow msg_max file be saved in the editor . there is another problem with createpipeerr . image <img>,3
"fix # <number> , update developer ' s guide to use sample app , create markdown <section> fix # <number> , update to use sample app for template , update images , create markdown <section> anh van , <allcaps> nasa </allcaps> goddard <section> you must attach a signed <allcaps> cla </allcaps> ( required for acceptance ) or reference one already submitted",2
"update developer ' s guide to use sample app , create markdown version <section> update developer ' s guide to use sample app instead of qq , create markdown version . <section> anh van , <allcaps> nasa </allcaps> goddard",1
"user / beginner friendly permissive mode implementation failure when running as a normal user due to not setting the permissive mode should be user friendly . both for message queues and priorities failures . also requesting a command line option , or default to permissive mode for the bundle ( should just work out of the box on a linux system for a new user , the bundle is not a flight distribution ) . maybe relate it to <allcaps> simulation </allcaps> = native setting ? note current way it ' s set up ( as an <hashtag> un def </hashtag> in default_osconfig . h precludes passing it in as an option ) . worth discussing since currently the bundle defaults to debug mode with no optimization anyways . perhaps permissive mode is also appropriate ? distribution guide ( or whatever documentation is available ) could cover transition to more flight - like configuration .",2
"switch default linux toolchains back to posix ( was posix - ng ) removing last gen and next gen in to it ' s place in cfs_osal [ cfs_osal : <number> ] , requires going back to posix for default toolchain .",2
"quoting issue in doxygen build the arch_build . cmake file converts the cmake_c_flags variable and translates the defined macros into the doxygen command line . however , if the cmake_c_flags string is empty , then this fails . need to add quotes to make it work with an empty string .",0
add flag at prep stage to omit_deprecated need an easy way for users ( and the ci system ) to omit all deprecated elements . something like make omit_deprecated = true prep which would then internally add all the - dcfe_omit_deprecated - dosal_omit_deprecated and so on flags when building everything .,2
"need to dynamically determine whether extra flag prefix is required when linking <allcaps> cfe </allcaps> on platforms that link executables via gcc , these need to have an extra "" - wl , "" prefix on linker options . however , on platforms that call "" ld "" directly , these do not need the prefix , and using the prefix causes an error .",0
"remove calls to deprecated <allcaps> psp </allcaps> functions as part of the changes for <allcaps> psp </allcaps> trac [ cfs_psp : <number> ] and [ cfs_psp : <number> ] the following functions are proposed to be deprecated : { { { int32 cfe_psp_portread8 ( cpuaddr portaddress , uint8 * bytevalue ) ; int32 cfe_psp_portwrite8 ( cpuaddr portaddress , uint8 bytevalue ) ; int32 cfe_psp_portread16 ( cpuaddr portaddress , uint16 * uint16value ) ; int32 cfe_psp_portwrite16 ( cpuaddr portaddress , uint16 uint16value ) ; int32 cfe_psp_portread32 ( cpuaddr portaddress , uint32 * uint32value ) ; int32 cfe_psp_portwrite32 ( cpuaddr portaddress , uint32 uint32value ) ; int32 cfe_psp_memread8 ( cpuaddr memoryaddress , uint8 * bytevalue ) ; int32 cfe_psp_memwrite8 ( cpuaddr memoryaddress , uint8 bytevalue ) ; int32 cfe_psp_memread16 ( cpuaddr memoryaddress , uint16 * uint16value ) ; int32 cfe_psp_memwrite16 ( cpuaddr memoryaddress , uint16 uint16value ) ; int32 cfe_psp_memread32 ( cpuaddr memoryaddress , uint32 * uint32value ) ; int32 cfe_psp_memwrite32 ( cpuaddr memoryaddress , uint32 uint32value ) ; int32 cfe_psp_eepromwrite8 ( cpuaddr memoryaddress , uint8 bytevalue ) ; int32 cfe_psp_eepromwrite16 ( cpuaddr memoryaddress , uint16 uint16value ) ; int32 cfe_psp_eepromwrite32 ( cpuaddr memoryaddress , uint32 uint32value ) ; int32 cfe_psp_memcpy ( void * dest , const void * src , uint32 n ) ; int32 cfe_psp_memset ( void * dest , uint8 value , uint32 n ) ; } } } for cfe_psp_memcpy / cfe_psp_memset it is preferred to use the c library memcpy / memset call instead . for the access functions , just dereference the pointer locally ( as this is all they ever did ) .",2
"add psp_version creation as part of version . cmake <allcaps> psp </allcaps> build is unique in that it does not follow the pattern of apps , cfe , and osal for producing version information ( as part of version . cmake ) . consistent build framework is preferred .",2
"remove dependencies on bit_order macros osal / src / os / inc / common_types . h defines software_big_bit_order and software_little_bit_order that are targeted for future deprecation . need to remove dependencies in cfe / fsw / cfe - core / src / inc / ccsds . h , which defines cfe_make_big * macros , which are used in time services . eventually solved by <allcaps> eds </allcaps> , but need to solve it before actually deprecating these elements . slight relation to # <number> <allcaps> edit </allcaps> - the macros have been moved to cfe : <url> - deprecate these see also # <number>",2
"replace "" osalbool "" and "" boolean "" types with c99 bool <allcaps> ccb </allcaps> intends to deprecate the <allcaps> osal </allcaps> - provided "" boolean "" and "" osalbool "" types in version <number> . <number> , in favor of the c99 - specified "" bool "" type . <allcaps> cfe </allcaps> needs to be updated to stop using these types along with the related macro definitions : <code> and <code> should be <code> <code> should be <code> <code> should be <code>",0
"remove backwards compatibility provided by _enhanced_build_ no longer supporting classic build ( does not work with next - gen osal either ) , remove old backwards compatibility support and the associated _enhanced_build_ flag .",0
"enhanced versioning reporting updates github repos do not include the name in the tag ( since each repo is separate ) , so the git describe with - - match "" ${ <allcaps> name </allcaps> }* "" comes up blank . the most recent tag in every branch ( babelfish and github ) is legit , so no need to filter . recommend removing this match , and including the names in the print string : as in : <allcaps> cfe </allcaps> : %s , <allcaps> osal </allcaps> : %s looks like mission_pspmodules is not coming through as expected , suggest adding <allcaps> psp </allcaps> : %s ?",0
"remove old <allcaps> mks </allcaps> flags from comments $ id , $ date , $ revision , $ log , etc all no longer useful and slightly misleading since they do not get updated .",0
"remove - m32 flag from sample toolchain files sample posix toolchain files still include - m32 , are we ready to default to <number> ?",0
"remove cfe logic to support backwards compatibility to last gen <allcaps> osal </allcaps> opening for discussion making osal_opaque_object_ids the only option ( removes support for last - gen <allcaps> osal </allcaps> ) in <number> , and need to agree to plan for end of summer release . notes - users not updating cfe and <allcaps> osal </allcaps> together , as well as updating to cmake may have challenges with end - of - summer release . should not be a surprise .",2
"convert cfe_omit_deprecated_6_6 to deprecate by default switch ifndef cfe_omit_deprecated_6_6 to ifdef cfe_deprecated_6_6 , user action is to define if needed but leave out by default .",0
"remove reference to _have_stdint_ in doxygen input file relates to [ cfs_osal : <number> ] in cfe_osal , where the _have_stdint_ define is removed . now always using stdint . h ( burden is on projects if they use a platform that is not compliant with c99 ) .",0
"time state flags near duplicate functions , one skips istonegood cfe_time_getstateflags in cfe_time_utils . c is nearly identical to cfe_time_getclockinfo in cfe_time_api . c except getstateflags does not include istonegood flag ( both convert state data to flags ) . recommend removing getstateflags ( internal , only used in hk generation ) and replace with call to getclockinfo ( from <allcaps> api </allcaps> ) . from keegan moore email thread ( <date> )",0
"support separate app and table install subdirectories from christopher westerman ( <date> email paraphrased ) - requested support in arch_build . cmake to install tables and apps to different subdirectories . supporting "" separation of concerns "" design principle .",2
"add naming convention document from # <number> , but wasn ' t merged to <number> . <number>",0
cfe / es has hard coded values for command pipe depth and buffer limits the es init function has : cfe_es_taskdata . pipedepth = <number> ; cfe_es_taskdata . limithk = <number> ; cfe_es_taskdata . limitcmd = <number> ; these values should be user configurable . in addition the <number> cfe apps do not initialize their command pipe depths and buffer limits consistently ( but all are <allcaps> not </allcaps> user configurable ) .,2
"cfe_mission_es_max_shell_pkt causes es error when unsigned when cfe_mission_es_max_shell_pkt is defined as an unsigned value ( 2 0 0 0 u , for example ) and a shell command is executed that results in a shell output file of less than cfe_mission_es_max_shell_pkt , es gets stuck in a loop of sending millions of es shell telemetry packets . this error / loop is in the int32 cfe_es_shelloutputcommand ( const char * cmdstring , const char * filename ) function . i think it is caused by the filesize variable ( int32 ) getting converted to an uint32 and under - flowing . a workaround to this is to keep cfe_mission_es_max_shell_pkt defined as a signed integer , but i think that the fix should be for es to fix this under - flow . the cfe_mission_es_max_shell_pkt should be able to be thought of / defined as an unsigned value .",0
provide standard byte swap functionality via <allcaps> eds </allcaps> utilities as discussed on [ cfs_psp : <number> ],2
"cfe_platform_es_app_kill_timeout defined in multiple places the cfe_platform_es_app_kill_timeout macro is defined in multiple places , which can cause confusion and errors . it is defined in both of these files : fsw / platform_inc / cpu1 / cfe_platform_cfg . h fsw / cfe - core / src / inc / cfe_es . h",0
"clean up remaining use of deprecated config macro names in the <number> release all configuration macros were revised to contain a "" <allcaps> mission </allcaps> "" or "" <allcaps> platform </allcaps> "" designator in their name to indicate scope . the previous , non - designated names were deprecated , and a compatibility mapping was added . however , there is still some code that continues to directly use the old name . this should be fixed to use the correct name .",0
"add path to additional cmake modules for <allcaps> psp </allcaps> when building and linking <allcaps> cfe </allcaps> executables and shared libraries , the flags and procedures may not always be exactly the same as the standard defaults . furthermore , the upstream cmake does not have a platform file for all <allcaps> cfe </allcaps> / <allcaps> osal </allcaps> targets ( e . g . <allcaps> rtems </allcaps> ) so the <allcaps> rtems psp </allcaps> must supply an appropriate file to use here . the cmake_module_path should be extended with an additional path that is under the <allcaps> psp </allcaps> , so module file ( s ) can be found here .",2
update comments / documentation in the example targets . cmake file the <code> file that is included as a sample has some documentation that is incomplete / outdated . new features have been added since this file was originally written .,0
"add feature to support binary data blobs linked with <allcaps> cfe </allcaps> executable in a recent <allcaps> grc </allcaps> project , <allcaps> cfe </allcaps> was deployed on a virtualized host that had no runtime - accessible persistent storage at all . although there was a place to store the <allcaps> cfe </allcaps> executable image itself , the executing runtime image could not read or write to this area as a filesystem . the apps were statically linked with the executable , but there is no place to put the startup script ( cfe_es_startup . scr ) . a generic solution to this problem was to add a method for the cmake build to include arbitrary "" binary blobs "" and link these directly into the executable image , so the <allcaps> psp </allcaps> / <allcaps> cfe </allcaps> can access them at runtime . the content of these blobs can be entirely implementation - specific . the <allcaps> cfe </allcaps> framework just needs an "" out of the box "" way to link these images into the executable to make deployment on this type of platform easier . for the <allcaps> grc </allcaps> use - case , we used this approach to store an "" initial ramdisk "" tar file which the <allcaps> psp </allcaps> then untar ' ed into the ramdisk before starting <allcaps> cfe </allcaps> . however the approach could be used for storing any arbitrary data file , such as an <allcaps> fpga </allcaps> bitfile or <allcaps> dsp </allcaps> / microcontroller firmware .",2
"es perflog dumper thread should be persistent <code> spawns a child task to run <code> . there should be a persistent thread to handle dumping the data , created during initialization . this will require some changes to <code> which is currently written to run only once . - - - - background : i sent the following to the <allcaps> cfs </allcaps> community mailing list : > cfe_es_perflogstop spawns a new thread via cfe_es_createchildtask to > dump the performance data to disk . this occurs whenever es receives a > command to stop recording performance data . > > it ' s my understanding that spawning threads at runtime , as opposed to > during initialization , is discouraged in real - time code due to > overhead like allocating memory . see , e . g . > <url> > which states "" all rt threads need to be created at startup time , > before the rt show time . "" > > should a persistent "" dumper "" thread be spawned during es > initialization rather than when the stop command is received ? i then received an off - list reply from dave mccomas : > i noticed the same thing when i looked at the code after your other email and i agree . do you mind writing a ticket .",0
"size and alignment of cfe_es_memhandle_t vary depending on platform ; ground - visible structures affected <code> is [ <url> defined ] as <code> and the size and alignment of <code> vary by platform . this type is used as a member in ( at least ) the following telemetry structures : * [ <url> cfe_sb_housekeepingtlm_payload_t ] * [ <url> cfe_tbl_housekeepingtlm_payload_t ] * [ <url> cfe_es_poolstatstlm_payload_t ] it is also used in ( at least ) the following command structure : * [ <url> cfe_es_sendmempoolstatscmd_payload_t ] on <number> - bit platforms which require self - alignment ( e . g . x86_64 , aarch64 ) , the presence of a <code> member causes the structure to require <number> byte alignment . this results in a <number> byte hole between the <number> byte telemetry header and payload when the payload is defined as a separate structure , such as the cases noted above . note that unlike the various address values in <code> , the actual value of these handles is needed on the ground for use in the es "" send mempool stats "" command , which takes a handle as its argument . in addition , these telemetry structures do not have a field indicating the validity of the handle . both of these factors suggest the fix accepted by the <allcaps> ccb </allcaps> for <code> , populating the fields with the low bytes of the value and marking them invalid when the fields are too small to hold the actual value , may not be viable for these structures .",2
add top level readme for open source release top level readme that shows up on github likely want to also merge this to dev and maintain ( vs the wiki which does not ship with the release ) .,0
"remove gcov files , <allcaps> itos </allcaps> and <allcaps> asist </allcaps> directories cleaning of release for github",0
update copyright and license for open source cfs framework ( dev branch ) update / add copyright and license to apache <number>,0
"missing migration path for <allcaps> cfe </allcaps> <number> es enum values in <allcaps> cfe </allcaps> <number> , es introduced scoped names for several enumerated constants and deprecated their old names . for example , <code> was introduced to replace <code> . while developers were encouraged to migrate to the new names and an example <code> command was given , the old names remained usable unless <code> was defined . <allcaps> cfe </allcaps> <number> introduced a different style of scoped names , e . g . <code> , and provided aliases to the pre - <number> names , but did not provide compatibility aliases for the <number> versions . the result is that developers who attempted to follow the new naming scheme in <number> found their apps failing to build in <number> , whereas using the deprecated name would have continued to work . <allcaps> cfe </allcaps> <number> should provide aliases for the names from <number> as well as the pre - <number> names . for example , in addition to {{{# ! c <hashtag> define </hashtag> cfe_es_app_run cfe_es_runstatus_app_run } } } there should be {{{# ! c <hashtag> define </hashtag> cfe_es_runstatus_app_run cfe_es_runstatus_app_run } } }",0
"update <allcaps> eds </allcaps> files to match release plan to advertise the <allcaps> eds </allcaps> techdev branch as part of the release , so the <allcaps> eds </allcaps> files should be updated to match .",0
update copyright and license for open source cfs framework release <number> . 0 a need to update / add copyright and license to apache <number> for open source release of <number> . 0 a .,0
"es performance debug messages have incorrect parameter the second parameter in the following two debug event messages are incorrect : cfe_evs_sendevent ( cfe_es_perf_filtmskcmd_eid , cfe_evs_debug , "" set performance filter mask cmd rcvd , num % d , val 0x %x "" , ( int ) cmd - > filtermasknum , ( unsigned int ) cmd - > filtermasknum ) ; cfe_evs_sendevent ( cfe_es_perf_trigmskcmd_eid , cfe_evs_debug , "" set performance trigger mask cmd rcvd , num % d , val 0x %x "" , ( int ) cmd - > triggermasknum , ( int ) cmd - > triggermasknum ) ; in both cases "" num "" should be removed from the second parameter variable . the casting should also be examined .",0
"memory alignment issues in table services the <allcaps> cfe </allcaps> code has some problem areas for cpus that have strict memory alignment requirements ( e . g . <allcaps> sparc </allcaps> ) . casting from a type with smaller requirements to a type with larger requirements generates a compile time warning and may induce a runtime exception if the memory actually is not aligned . the following errors exist in the <allcaps> tbl </allcaps> subsystem : { { { / cfe / fsw / cfe - core / src / tbl / cfe_tbl_internal . c : in function ' cfe_tbl_removeaccesslink ' : / cfe / fsw / cfe - core / src / tbl / cfe_tbl_internal . c : <number> : <number> : warning : cast increases required alignment of target type [ - wcast - align ] status = cfe_es_putpoolbuf ( cfe_tbl_taskdata . buf . poolhdl , ( uint32 <wink> regrecptr - > buffers [ <number> ] . bufferptr ) ; ^ / cfe / fsw / cfe - core / src / tbl / cfe_tbl_internal . c : <number> : <number> : warning : cast increases required alignment of target type [ - wcast - align ] status = cfe_es_putpoolbuf ( cfe_tbl_taskdata . buf . poolhdl , ( uint32 <wink> regrecptr - > buffers [ <number> ] . bufferptr ) ; ^ } } } <allcaps> note </allcaps> : this is related to <allcaps> psp </allcaps> ticket [ cfs_psp : <number> ]",0
memory alignment issues in software bus the <allcaps> cfe </allcaps> code has some problem areas for cpus that have strict memory alignment requirements ( e . g . <allcaps> sparc </allcaps> ) . casting from a type with smaller requirements to a type with larger requirements generates a compile time warning and may induce a runtime exception if the memory actually is not aligned . the following errors exist in the sb subsystem : { { { / cfe / fsw / cfe - core / src / sb / cfe_sb_api . c : in function ' cfe_sb_zerocopygetptr ' : / cfe / fsw / cfe - core / src / sb / cfe_sb_api . c : <number> <time> : warning : cast increases required alignment of target type [ - wcast - align ] return ( cfe_sb_msg_t <wink> address ; ^ / cfe / fsw / cfe - core / src / sb / cfe_sb_api . c : in function ' cfe_sb_zerocopyreleaseptr ' : / cfe / fsw / cfe - core / src / sb / cfe_sb_api . c : <number> <time> : warning : cast increases required alignment of target type [ - wcast - align ] ( uint32 <wink> ( ( ( uint8 <wink> ptr2release ) - sizeof ( cfe_sb_bufferd_t ) )); ^ / cfe / fsw / cfe - core / src / sb / cfe_sb_buf . c : in function ' cfe_sb_getbufferfromcaller ' : / cfe / fsw / cfe - core / src / sb / cfe_sb_buf . c : <number> <time> : warning : cast increases required alignment of target type [ - wcast - align ] cfe_sb_bufferd_t * bd = ( cfe_sb_bufferd_t *)((( uint8 <wink> address ) - sizeof ( cfe_sb_bufferd_t ) ); ^ / cfe / fsw / cfe - core / src / sb / cfe_sb_util . c : in function ' cfe_sb_getmsgtime ' : / cfe / fsw / cfe - core / src / sb / cfe_sb_util . c : <number> <time> : warning : cast increases required alignment of target type [ - wcast - align ] tlmhdrptr = ( cfe_sb_tlmhdr_t <wink> msgptr ; ^ / cfe / fsw / cfe - core / src / sb / cfe_sb_util . c : in function ' cfe_sb_setmsgtime ' : / cfe / fsw / cfe - core / src / sb / cfe_sb_util . c : <number> <time> : warning : cast increases required alignment of target type [ - wcast - align ] tlmhdrptr = ( cfe_sb_tlmhdr_t <wink> msgptr ; ^ } } } <allcaps> note </allcaps> : this is related to <allcaps> psp </allcaps> ticket [ cfs_psp : <number> ],0
"cfe_time state saved in <allcaps> cds </allcaps> does not include "" delaydirection "" cfe_time has some features to save the current state of the reference to <allcaps> cds </allcaps> , which is then restored after reset . this includes the "" delay "" value that is used by time clients to adjust / compensate for distribution delays in the time signal . while the delay amount is saved in <allcaps> cds </allcaps> , the accompanying delay direction value is not saved . it is always reset to "" <allcaps> add </allcaps> "" after booting . so , for instance , if a time client had been running with a delay compensation value of e . g . - 1 0 ms before reboot , it would become + 1 0 ms after reboot and restore from <allcaps> cds </allcaps> . this seems incorrect .",0
"calling cfe_time_getreference in interrupt context can lock up system ocean color instrument <allcaps> fsw </allcaps> has been debugging watchdog resets since early february . we are running cfe <number> and <allcaps> sch </allcaps> <number> . last weekend , we disabled the watchdog , let the <allcaps> fsw </allcaps> freeze , and attached a debug monitor that let us see processor registers and memory . the backtrace indicates that <allcaps> fsw </allcaps> is calling cfe_time_getreference in interrupt context : grmon2 > bt % pc % sp # <number> 0x 4 0 2 d3260 ( = cfe_psp_gettime =0 x402d323c + <number> ) 0x 4 0 1 4 6 8 f0 ( = tidletask0_stack_base =0 x401442d0 + <number> ) <hashtag> 4 1 0 x402ef1c0 </hashtag> <happy> ' ' ' cfe_time_getreference ' ' ' =0 x402ef1a8 + <number> ) 0x 4 0 1 4 6 9 5 8 ( = tidletask0_stack_base =0 x401442d0 + <number> ) <hashtag> 5 1 0 x402ee5ec </hashtag> ( = cfe_time_getmetsubsecs =0 x402ee5a8 + <number> ) 0x 4 0 1 4 6 9 e0 ( = tidletask0_stack_base =0 x401442d0 + <number> ) <hashtag> 6 1 0 x404d5f14 </hashtag> ( = sch_getmetslotnumber =0 x404d5f10 + <number> ) 0x 4 0 1 4 6 a80 ( = tidletask0_stack_base =0 x401442d0 + <number> ) <hashtag> 7 1 0 x404d60ec </hashtag> <happy> ' ' ' sch_majorframecallback ' ' ' =0 x404d5fb4 + <number> ) 0x 4 0 1 4 6 ae0 ( = tidletask0_stack_base =0 x401442d0 + <number> ) <hashtag> 8 1 0 x402ef9d8 </hashtag> ( = cfe_time_notifytimesynchapps $ part <money> =0 x402ef9ac + <number> ) 0x 4 0 1 4 6 b40 ( = tidletask0_stack_base =0 x401442d0 + <number> ) <hashtag> 9 1 0 x402f00e4 </hashtag> ( = cfe_time_tone1hzisr =0 x402effcc + <number> ) 0x 4 0 1 4 6 ba0 ( = tidletask0_stack_base =0 x401442d0 + <number> ) <hashtag> 1 0 1 0 x402d49c0 </hashtag> ( = cfe_psp_interruptcallback_dleonint11 =0 x402d4658 + <number> ) 0x 4 0 1 4 6 c28 ( = tidletask0_stack_base =0 x401442d0 + <number> ) <hashtag> 1 1 1 0 x40012570 </hashtag> ( = handler_irq =0 x40012528 + <number> ) 0x 4 0 1 4 6 c88 ( = tidletask0_stack_base =0 x401442d0 + <number> ) <hashtag> 1 2 1 0 x40011dcc </hashtag> ( = intent =0 x40011ca8 + <number> ) 0x 4 0 1 4 6 cf0 cfe_time_getreference appears to be stuck in this <allcaps> do while </allcaps> loop : void cfe_time_getreference ( cfe_time_reference_t * reference ) { < other irrelevant code > do { versioncounter = cfe_time_taskdata . completeversioncounter ; < other irrelevant code > } while ( versioncounter ! = cfe_time_taskdata . pendingversioncounter ) ; these two counters are changed in task context , so i believe that anytime sch_majorframecallback is called when these counters are different , <allcaps> fsw </allcaps> will get stuck in this do while loop .",0
"cfe_es_restartapp ( ) writetosyslog typo the first writetosyslog ( ) occurrence indicates the message is from cfe_es_deleteapp instead of cfe_es_restartapp : cfe_es_writetosyslog ( "" cfe_es_deleteapp : cannot restart a <allcaps> core </allcaps> application : %s . \ n "" ,",0
"cfe_sb_createpipe : improve message when os_queuecreate fails currently if <code> fails in <code> , the message is just <code> . it would be valuable to show the name of the error rather than ( or in addition to ) the numeric error code . the <code> function may help here if it ' s available in all of the <allcaps> osal </allcaps> implementations . it may be valuable to provide other details depending on the error . for example , the message in the case of <code> could indicate the name of the pipe that was requested ( and is already in use ) .",2
"sb memory limit on individual pipes discussion spawning from # <number> and # <number> , <allcaps> apl </allcaps> has a use case for limiting the memory used on a pipe . different implementations were discussed ( see attached email chain ) . for steering committee discussion .",2
trade <allcaps> evs </allcaps> generalize filter requirement update <allcaps> ccb </allcaps> <date> discussed # <number> and # <number> which would complicate the filter design . consider if this functionality is worth a requirements change and trade additional complexity at the architecture level . kicked up to steering committee .,2
"restrict pipes to the app they were created in discussed in <allcaps> ccb </allcaps> <date> that sb could be updated to restrict pipes to use within an app , as part of ticket # <number> discussion . this would restrict the current capabilities of the system and valid points were raised on both sides . see attached email thread for further details . submitted as a requirements enhancement to trigger discussion at the architecture / steering committee level .",2
"time services need cleanup relative to requirements per <allcaps> ccb </allcaps> on <date> , time services goes way beyond it ' s requirements . need to re - evaluate configuration options and reduce mission specific code . as part of the cleanup , factor out duplicate code . specifically referenced at code review in command handling . - <code> , <code> , <code> , and <code> are all basically the same logic , etc . - break of files # <number> , specific note from <allcaps> cfs </allcaps> - <number> was the lack of a cfe_time_tone . h - <code> and <code> are basically the same logic , refactor - # <number> - # <number> - mutually exclusive defines could just be a boolean ( but will likely go away w / refactor ) , note cfe_time_verify . h is excessively complex at this point <url>",2
"executive services generic counter facilities not thread safe the executive services provides a "" generic counter "" <allcaps> api </allcaps> ( register , delete , increment , decrement , get , set ) . the implementation of these functions do not take any sort of mutex when accessing the table or performing these operations . as a bare minimum , the registration should ensure that two tasks simultaneously creating counters should be protected against collision .",0
"scrub all public <allcaps> api </allcaps> calls to ensure that all input parameters are properly sanitized before use as a matter of policy , all <allcaps> cfe </allcaps> function calls that are available for use by external apps or libraries ( i . e . all headers in the <code> subdirectory ) should sanity - check their input values before using them . during recent code reviews it was noted that at least two of these functions were missing a required range check , as noted in bug # <number> . this task is to perform an additional review on the public <allcaps> api </allcaps> calls and ensure that proper input value sanitization is being performed .",2
"cfe_fs_decompress infinite loop on truncated gzip file if cfs_fs_decompress is given a truncated gzip file , it will enter an infinite loop in which it attempts to read more data from the file , gets nothing , and tries again . discovered by accidentally attempting to have es load a new compressed application ( which we did not know had been truncated ) , which led to es getting stuck and an eventual watchdog reset . the problem seems to be that running out of bytes in a gzipped file before decompression is finished is not considered an error . i can see how this might be intentional if it is expected that the file handle might be a stream that could present data after being emptied , but for the normal file use case i think it is a bug . suggested fix by combining the two checks at line <number> of cfe_fs_decompress . c : if ( state - > insize = = <number> ) return <allcaps> eof </allcaps> ; if ( len = = os_fs_error ) { state - > error = cfe_fs_gzip_read_error ; return <allcaps> eof </allcaps> ; } into one : if ( ( state - > insize = = <number> ) ! || ( len = = os_fs_error ) ) { state - > error = cfe_fs_gzip_read_error ; return <allcaps> eof </allcaps> ; } recommend investigation if insize might temporarily hit <number> during a normal decompression . reported via email from mike stewart , <email>",0
"<allcaps> ccsds </allcaps> secondary header consistency update update data structure definition of <allcaps> ccsds </allcaps> command secondary header to be consistent with the rest of the message header definition . from /* - - - - - <allcaps> ccsds </allcaps> command secondary header . - - - - - */ typedef struct { uint16 command ; /* command secondary header */ /* bits shift - - - - - - - - - - - - description - - - - - - - - - - - - - - - - */ /* 0x0 0 ff <number> : checksum , calculated by ground system */ /* 0x 7 f00 <number> : command function code */ /* 0x 8 0 0 0 <number> : reserved , set to <number> */ } ccsds_cmdsechdr_t ; to /* - - - - - <allcaps> ccsds </allcaps> command secondary header . - - - - - */ typedef struct { uint8 command [ <number> ]; /* command secondary header */ /* bits shift - - - - - - - - - - - - description - - - - - - - - - - - - - - - - */ /* 0x0 0 ff <number> : checksum , calculated by ground system */ /* 0x 7 f00 <number> : command function code */ /* 0x 8 0 0 0 <number> : reserved , set to <number> */ } ccsds_cmdsechdr_t ; requested by tam via email .",0
resolve all compiler warnings all compiler warnings need to be resolved prior to the next release . requested by tam via email .,0
"cfe_es_scanapptable ( ) possible race conditions the <code> is called from the es message processing thread , but it does not lock the global es data structure when reading / writing from the global data . es software bus command messages are safe because this function is called by the same thread that is processing those messages , therefore concurrency is not possible here . but other functions , like <code> and <code> are part of the public <allcaps> api </allcaps> and these also update the same fields within the app state data structure that <code> is reading . <code> can also modify fields within this structure and this is called by pretty much every app in the system . this issue was noted while reviewing the fix for a similar issue in # <number> .",0
fs - externalize cfe_fs_decompress the decompression code should be removed and compile - time hooks to connect in an external decompression library should be provided .,2
<allcaps> cpu </allcaps> utilization calculation and idle task <allcaps> cpu </allcaps> utilization is currently calculated using an idle task . this can waste power and prevents the processor ( s ) from entering sleep or other power management states . as part of the <allcaps> smp </allcaps> implementation this issue should also be addressed .,2
"sb : remove appname ( and pipename ? ) from cfe_sb_piped_t in looking at sb code , i noticed that cfe_sb_piped_t has two character arrays , appname and pipename . appname , particularly , is a waste of memory to have in each pipe structure ( it should be maintained in one location ) and there is an appid field in the piped_t so it ' s not needed for finding pipes . same may go with pipename , as the <allcaps> osal </allcaps> queue takes the name as a parameter ( need to ensure the pipe name does not already exist in <allcaps> osal </allcaps> . )",2
"fix es unit test writetosyslog warning in es_ut . c , the <code> function is invoked with a generated ( non - const ) string used in place of the format string . some compilers generate a warning about this . the fix is simple .",0
"build system support for linking symbol table when using the dynamic loader on some <allcaps> rtos </allcaps> ' s ( <allcaps> rtems </allcaps> notably , but probably others too ) there is an extra build step required to build an executable capable of runtime linking . for <allcaps> rtems </allcaps> , this is : <number> . build all objects and link the executable as normal <number> . invoke the <code> tool to build a symbol table object <number> . re - link the executable using the objects from ( <number> ) and ( <number> ) this is possible in cmake by defining some custom commands , but requires a few hooks in the build system to do this , since it is os - specific .",2
"critical tables do not preserve filename of last loaded table file table services issue reported by <allcaps> oci </allcaps> : cfe table services provides a feature for having critical tables . these tables preserve their information across processor and application resets . the to application assumed that this included the filename of the last loaded table file . however , it does not . this should be fixed in the cfe_tbl application . also , there was an <allcaps> mks dcr </allcaps> that addressed this issue but it was never implemented .",0
"compiler warnings regarding some cfe_sb <allcaps> api </allcaps> calls the <code> , <code> , and <code> <allcaps> api </allcaps> calls trigger compiler warnings if they are called with a buffer that is qualified as <code> . as these <number> functions are read - only ( they do not modify the buffer ) the input should be qualified as <code> , which fixes the warning .",0
"improve <allcaps> cfe </allcaps> support for statically linked apps for some <allcaps> cfe </allcaps> deployments there are good reasons to _not_ use a dynamic loader for applications , and instead link <allcaps> cfe </allcaps> plus all applications into a single executable . this would typically be a "" minimalist "" target using an <allcaps> rtos </allcaps> that does not include dynamic loading , or a safety - critical subsystem where dynamic loading in general introduces operational variables . this had been possible in previous versions of <allcaps> cfe </allcaps> but it was ugly - - an application needed to be modified for static loading and needed use some preprocessor macros to make the necessary connections . it also used a special initialization path in <allcaps> cfe es </allcaps> . with the latest <allcaps> osal </allcaps> changes we can now support a much cleaner approach , where applications do / / not / / need any special treatment to support static linkage . the <allcaps> osal </allcaps> symbol lookup can be configured such that it can return the correct entry point even without os dynamic loader support .",2
"race condition in cfe_appcreate ( ) function this has been split to a separate ticket from # <number> . per email from preston faiks on <number> - <number> - <number> , there is an actual observed race condition issue with <code> out in the field : when es is loading and starting apps , one app might fail initialization and call cfe_es_exitapp ( ) if that occurs , its app state will be set to cfe_es_app_state_stopped . when apps are scanned , it will be removed from the app table and that table entry set to not in use . as es continues to load apps , it will make use on the now unused app table entry . it will not change the app state in the entry until it has successfully loaded the app into memory . the process of loading an app into memory can cause the task to pend on file system ( or network file system ) and allow other tasks to run . as that app continues to be loaded , another app scan can occur and detect the app entry as both in use and stopped , and will unload it . when es finishes loading the app , it will spawn a task at an entry point which was just unloaded by the scanning task , causing it to execute from unloaded memory and crash . i have reviewed this code again and the race condition risk described is definitely still present in the current development branch , but this is not the only example . there are other similar race conditions that are possible regarding the use if the <code> boolean field . having an observed failure should escalate this in priority now .",0
"possible buffer overrun in cfe_es the function <code> had hardcoded the size of the various output buffers to be os_max_api_name or os_max_path_len . this should use the <code> operator rather than using a specific macro , since that will accurately use the correct size , however it is defined . we previously updated most of these but this one was missed in the previous pass .",0
"es comments need checked for consistency lots of copy / paste type errors in es . for example , after cfe_es_incrementtaskcounter ( ) the comment says /* end of cfe_es_exitchildtask ( ) */",1
es apptable . taskinfo . numofchildtasks incremented but never decremented,0
"buffer size warnings with <allcaps> gcc </allcaps> <number> when compiling <allcaps> cfe </allcaps> with <allcaps> gcc </allcaps> version <number> , some new warnings about possible buffer overflow appear in the <allcaps> cfe es </allcaps> shell code . for example : { { { cfe / fsw / cfe - core / src / es / cfe_es_shell . c : <number> : <number> : error : ‘ , prnt app name : ’ directive writing <number> bytes into a region of size between <number> and <number> [ - werror = format - overflow <happy> sprintf ( line , "" task id : % 0 8 d , task name : % 2 0 s , prnt app id : % 0 8 d , prnt app name : % 2 0 s \ n "" } } }",0
<allcaps> evs </allcaps> delete event filter doxygen incorrect in file cfe_evs_msg . h the delete application event filter doxygen is incorrect . it states the command structure is cfe_evs_appnameeventidmaskcmd_t when it should be cfe_evs_appnameeventidcmd_t this was caught because a tool used the doyxgen to auto generate cmd & tlm definitions for <allcaps> cosmos </allcaps> so it is important to fix .,2
"document cfe_es_writetosyslog ( ) can be used when cfe_es_registerapp ( ) fails on thu , <date> at <time> , fleming , thadeus < <email> > wrote : it ' s clear that cfe_es_registerapp is supposed to be the first <allcaps> cfe </allcaps> function an app calls , and that the app should not continue if the call fails . however , it ' s not clear whether it ' s kosher to call cfe_es_writetosyslog to log failure of cfe_es_registerapp . it appears to be both safe ( the function source does not look at the app ' s entry in the apptable ) and common practice ( e . g . the gen_app_code app template does it ) . i ' d suggest that apps be allowed to call writetosyslog when registerapp fails , and that the practice is documented so that future versions of cfe do not modify writetosyslog in such a way that it would become a problem .",2
<allcaps> cfe es crc </allcaps> does not document polynomial <date> : mark pallone ( <allcaps> gsfc pace </allcaps> / <allcaps> oci </allcaps> ) reported the generator polynomial used in a <allcaps> crc </allcaps> implementation is fundamental information . the cfe_es_calculatecrc function does not state what generator polynomial it ' s using : <url> dave mccomas addition : this is a subset of a larger documentation issue . the cfe should have a flight - ground <allcaps> icd </allcaps> <allcaps> edit </allcaps> - updated link,1
"add cmake function to add cpus by function rather than assume consecutive cpu ids . currently , the cmake rules require that cpus are built in order and will stop looking for cpu targets when a cpu idx is not found . propose that a cmake function can be executed from the targets . cmake file which explicitly adds the cpus to be built for the mission .",2
"expose cfe_sb_isvalidmsgid ( ) <allcaps> cfe </allcaps> apps would benefit from a publicly - available isvalidmsgid ( ) function ( or perhaps an expanded "" is valid message "" function , that would check all header fields ? ) for example , <allcaps> sch </allcaps> has a function to validate its message table entries and has its own logic for determining whether a message id is valid or not . this would particularly facilitate ccsds_ver_2 transitions .",2
"add support for <number> - bit builds cfe should build and run on <number> - bit platforms such as x86_64 and <allcaps> arm </allcaps> cortex - a53 . this should be implemented by making pointer types more generic than "" int32 "" .",2
"incorrect documentation for cfe_tbl_releaseaddress reported by mark pallone <allcaps> gsfc pace </allcaps> / <allcaps> oci </allcaps> project on <date> : the documentation for cfe_tbl_releaseaddress says that if you get the return code cfe_tbl_err_never_loaded , "" this pointer must be released with the cfe_tbl_releaseaddress <allcaps> api </allcaps> before the table can be loaded with data . "" i think this is a copy / paste error , likely from cfe_tbl_getaddress .",1
"deprecate / remove network_includes . h ? <code> seems to be a strange file to have in the executive . nothing else in cfe uses it , and it is the only file in the core ( non stub ) code to test the various <code> macros ( <code> , <code> , etc . ) . should this file continue to exist as part of cfe ? or can it be deprecated and eventually removed ? apps that use it could keep their own copy as needed .",2
"cfe time var name changed in . h but not in code cfe master <number> release osal <number> . 1 a psp <number> . <number> building for vxworks <number> <allcaps> sparc </allcaps> ut700 kspace / plss_cws / . <repeated> / <allcaps> cfs </allcaps> / cfe / fsw / cfe - core / src / time / cfe_time_tone . c / home / sduran / aemu_workspace / plss_cws / . <repeated> / <allcaps> cfs </allcaps> / cfe / fsw / cfe - core / src / time / cfe_time_tone . c : in function ' cfe_time_tonesend ' : / home / sduran / aemu_workspace / plss_cws / . <repeated> / <allcaps> cfs </allcaps> / cfe / fsw / cfe - core / src / time / cfe_time_tone . c : <number> <time> : error : ' cfe_time_tonedatacmd_payload_t ' has no member named ' attoneleaps ' cfe_time_taskdata . tonedatacmd . payload . attoneleaps = <allcaps> from </allcaps> cfe 8 6 ce044 , <number> release plus a couple of hot fixes , master before <number> release , cfe_time_utils . h typedef struct { cfe_time_systime_t attonemet ; /* <allcaps> met </allcaps> at time of tone */ cfe_time_systime_t attonestcf ; /* <allcaps> stcf </allcaps> at time of tone */ - - - > int16 attoneleaps ; /* leap seconds at time of tone */ int16 clocksetstate ; /* time has been "" set "" */ int16 clockflystate ; /* current fly - wheel state */ cfe_time_systime_t attonedelay ; /* adjustment for slow tone detection */ cfe_time_systime_t attonelatch ; /* local clock latched at time of tone */ cfe_time_systime_t currentlatch ; /* local clock latched just "" now "" */ cfe_time_systime_t timesincetone ; /* time elapsed since the tone */ cfe_time_systime_t currentmet ; /* <allcaps> met </allcaps> at this instant */ } cfe_time_reference_t ; <allcaps> from </allcaps> cfe master 9 0 fdf9f <number> release , cfe_time_utils . h - - - var name changed in header , but not in cfe / fsw / cfe - core / src / time / cfe_time_tone . c : <number> <time> typedef struct { cfe_time_systime_t attonemet ; /* <allcaps> met </allcaps> at time of tone */ cfe_time_systime_t attonestcf ; /* <allcaps> stcf </allcaps> at time of tone */ - - - > int16 attoneleapseconds ; /* leap seconds at time of tone */ int16 clocksetstate ; /* time has been "" set "" */ int16 clockflystate ; /* current fly - wheel state */ cfe_time_systime_t attonedelay ; /* adjustment for slow tone detection */ cfe_time_systime_t attonelatch ; /* local clock latched at time of tone */ cfe_time_systime_t currentlatch ; /* local clock latched just "" now "" */ cfe_time_systime_t timesincetone ; /* time elapsed since the tone */ cfe_time_systime_t currentmet ; /* <allcaps> met </allcaps> at this instant */ } cfe_time_reference_t ; i do not see the issue with a linux build . i think it might be associated with <hashtag> define </hashtag> cfe_platform_time_cfg_bigendian the default is to <hashtag> un def </hashtag> cfe_platform_time_cfg_bigendian - makes sense on linux / x86 but for vxworks / <allcaps> sparc </allcaps> , i would think it should be defined . "" * * if this configuration parameter is defined , the <allcaps> cfe </allcaps> time server will * * publish time tones with payloads in big - endian order , and time clients * * will expect the tones to be in big - endian order . "" vxworks / sparc will build if <hashtag> un def </hashtag> cfe_platform_time_cfg_bigendian",0
"enforce strict <allcaps> ascii </allcaps> in document files this is an extension of the previous ticket . with the creation of this ticket , # <number> will have its scope reduced to cover only the already integrated changes to source code , allowing us to confirm that those changes are included in the <allcaps> cfe </allcaps> <number> release . this ticket will continue to carry the task of enforcing strict <allcaps> ascii </allcaps> for the remaining cases , which are all document files ; this work will take place after the <allcaps> cfe </allcaps> <number> release .",0
improve doxygen for <allcaps> cfe sb </allcaps> msgid wrappers it was noted when reviewing # <number> that the msgid wrapper functions could use some expanded doxygen documentation .,0
"remove doxygen - generated <allcaps> html </allcaps> files currently , we keep a snapshot of the <allcaps> html </allcaps> files produced by doxygen in the git repository . this is a potential source of problems as it might be out of date . it is the sense of the <allcaps> ccb </allcaps> that we should remove these from the git repository ; instead , when we make a release , we will run the command to generate them , and include the <allcaps> html </allcaps> tree in the published image .",1
"sb remove printmsghdr function the sb printmsghdr function does not protect against accessing invalid memory . in addition , this function is specific to debugging during development . this code should not be used during flight and could be a risk to the system . it is recommended to remove this code and create a library for hosing debug functions and utilities . this ticket will be used to remove the printmsghdr function . an alternate ticket will be created for developing a debug library .",0
"unit tests doing assignent instead of equality check when experimenting with # <number> , two test cases were also discovered where an assignment was being done rather than an equality check . this is not a "" failure "" , but rather these tests could never fail - it is defeating the purpose of the test case entirely .",0
"sb unit test failure on powerpc target when reviewing the unit test results for the <number> test systems for the <allcaps> cfe </allcaps> <number> release , there was one unit test failure case . on the <number> - bit powerpc test target , this unit test failure was observed : { { { [ <allcaps> fail </allcaps> ] <number> sb_ut . c : <number> - cfe_sb_messagestringget - destination size = <number> } } }",0
"cfe <number> documentation updates this ticket will be used for all cfe <number> documentation updates including the <allcaps> vdd </allcaps> . a listing of the needed documentation updates will be added to this ticket as tickets , requiring code updates , are reviewed and determined there is an associated documentation change .",2
"es - memory pool size no longer requires <number> - bit alignment the <allcaps> ccb </allcaps> approved commit under trac # <number> redesigned the es memory pool to perform alignment in accordance with the base address vs . the size of the data pool . this change affects es requirement ces1321 . <number> which is no longer needed . instead a new error check is performed to ensure the size of the pool is not less than the minimum block size . the affected requirement , along with its parent , is pasted below for reference . ces1321 : "" ces1321 upon receipt of a request the cfe shall allocate a block of memory of the specified size from the specified memory pool . "" ces1321 . <number> : "" ces1321 . <number> if the specified size is not an integral multiple of <number> bit words , the size shall be rounded up to an integral of <number> bit words . """,0
"please provide va_list variants of variadic functions i have recently encountered a need to conditionally call <code> or <code> depending on the app ' s status . unfortunately , both of these functions are variadic functions , and they can not easily be wrapped in another variadic function . the c standard library provides variants of its variadic functions that take a <code> . for example , <code> has the <code> variant . please provide similar variants for cfe ' s variadic functions . the implementation would be simple : the majority of the function ' s logic can reside in the <code> version , and the variadic function can become thin a wrapper around the <code> version .",2
"fix <allcaps> eds </allcaps> discrepancies after # <number> merge after merging # <number> , this changed some things in the <allcaps> ccsds </allcaps> header and there needs to be a corresponding update to the <allcaps> eds xml </allcaps> files and related items to ensure that the <allcaps> eds </allcaps> actually matches the running code . this change circles back to the <allcaps> eds </allcaps> side and updates the <allcaps> xml </allcaps> files so they correspond to the code .",0
"table services task pipe function incorrectly handling commands when calling the appropriate command message handler , the table services taskpipe function is failing to pass the entire message to the command processing function , resulting in a truncated message .",0
"table services sometimes copies buffers to itself running the <allcaps> tbl </allcaps> unit test in valgrind / memcheck reveals that under certain circumstances , the <code> and <code> functions attempt to copy a buffer onto itself . this is technically undefined behavior , as <code> requires that the source and destination not overlap .",0
"type safety and improved handling of cfe_sb_msgid_t values in <number> , as we move to supporting msgid ' s , msgkey ' s , routeidx , and other types , we should move away from using native c types and wrapping the types in a struct to prevent accidentally using the wrong type in assignments and function calls . this will , of course , require re - tooling any existing code that expects the type to be a simple type . <repeated> for example , instead of : <code> use : <code>",2
"continuation of <allcaps> eds </allcaps> integration for <allcaps> cfe </allcaps> integrate the remaining <allcaps> eds </allcaps> features which are not yet included as part of the <allcaps> cfe </allcaps> <number> release . this is a continuation of # <number> for the next <allcaps> cfe </allcaps> release . defects to resolve : # <number> , <allcaps> tbd </allcaps> enhancements to resolve : <allcaps> tbd </allcaps>",2
"cfe <allcaps> tbl </allcaps> - table name arrays incorrectly sized cfe <allcaps> tbl </allcaps> provides internal macros for appropriately sizing table names . table names are a concatenation of the appname , delimiter , and tblname i . e . "" appname . tblname "" . the size of the character array holding the table name needs to fall on a <number> - byte boundary in support of the <allcaps> tbl </allcaps> registry . the table names sent down in telemetry need to be sized accordingly using the cfe_tbl_max_full_name_len macro vs . the cfe_mission_tbl_max_name_length macro which is used to compute cfe_tbl_max_full_name_len . for reference , the internal table name length macro computations ( defined in cfe_tbl . h ) include : /* computation for maximum length allowed for a table name . <allcaps> note </allcaps> : "" + <number> "" is for <allcaps> null </allcaps> character and "" . "" ( i . e . - "" appname . tblname "" ) */ <hashtag> define </hashtag> cfe_tbl_max_full_name_len_comp ( cfe_mission_tbl_max_name_length + os_max_api_name + <number> ) /* ensure the table name falls on a <number> - byte boundary */ <hashtag> define </hashtag> cfe_tbl_max_full_name_len ( ( ( cfe_tbl_max_full_name_len_comp + <number> ) / <number> )* <number> )",0
"remove message_format_is_ccsds ifdefs from <allcaps> cfs </allcaps> code currently , most of the functions in cfe_sb_util . c and a few others are like : { { { void cfe_sb_initmsg ( void * msgptr , cfe_sb_msgid_t msgid , uint16 length , boolean clear ) { <hashtag> if def </hashtag> message_format_is_ccsds ccsds_initpkt ( ( ccsds_prihdr_t <wink> msgptr , ( uint16 ) msgid , length , clear ) ; <hashtag> end if </hashtag> } /* end cfe_sb_initmsg */ } } } it ' s confusing what else would be done in these functions ( and nothing else is done . ) as joe said , if someone implemented a wholly different sb message format , they are likely to write their own set of functions and having a bunch of <hashtag> if </hashtag> / elseif / elseif / elseif / endif blocks would be confusing and difficult to maintain . the suggestion from the <allcaps> ccb </allcaps> today was to remove these <hashtag> if defs </hashtag> . it might be worthwhile to put in a check at the top of the file that generates a compiler warning / error if it ' s not defined . <repeated>",2
cfe <number> verification testing required for release this ticket will be used to document the cfe <number> . <number> verification testing that will be performed at each center and capture the results of each test .,0
"event messages generated during library init get dropped i have a <allcaps> cfe </allcaps> based project that uses multiple libraries , which are loaded in the startup script as a cfe_lib rather than a cfe_app . today i found that one of the library initialization routines was failing . despite generating an event using cfe_sendevent on the condition , no event was reported on the console . the issue is that library init routines are called from the main thread context , and therefore not in the context of an executive services task . this causes cfe_es_getappid to fail - which is probably correct . however this causes cfe_evs to effectively drop the message on the floor , and it is entirely silent in this case . this might be intended behavior but it caught me off guard since i got no output whatsoever . one possible fix is to just stick to cfe_es_writetosyslog during library init functions but perhaps we should consider having event services actually do this , so the message at least goes somewhere visible .",0
"<allcaps> cfe sb </allcaps> and <allcaps> time </allcaps> components missing length verification on incoming messages as discussed during the <number> - <number> - <number> <allcaps> ccb </allcaps> meeting , the software bus and time subsystems within <allcaps> cfe </allcaps> are not checking the length of incoming messages . executive services and event services are both verifying that the length of the supplied message is sufficient before calling the handler . table services also verifies the length using a different approach . however sb and <allcaps> time </allcaps> have no validation , thereby theoretically allow a message that is too short to be passed to the handler , which could result in a crash . this has always been the case , this is not a new issue . note that full <allcaps> eds </allcaps> integration ( a potential target for <allcaps> cfe </allcaps> <number> + ) provides length checking on all packets automatically . so this already fixes the issue . but there needs to be a decision made whether to implement an interim change here for <allcaps> cfe </allcaps> <number> .",2
cmake script cleanup the cmake build scripts could benefit from some general cleanup prior to release of <allcaps> cfe </allcaps> <number> . in particular : - some comments are obsolete or incorrect - there is some dead code or broken options present - some refactoring would improve readability and maintenance the <allcaps> ghaps </allcaps> project did some cleanup here and i will push a commit under this ticket containing the modifications,2
clean up build warnings for <allcaps> cfe </allcaps> <number> there are several warnings that appear in a build of the current development branch that should be cleaned up prior to the <number> release . for instance : { { { fsw / cfe - core / src / es / cfe_es_api . c : in function ‘ cfe_es_getappid ’ : fsw / cfe - core / src / es / cfe_es_api . c : <number> <time> : warning : unused variable ‘ taskid ’ [ - wunused - variable ] uint32 taskid ; } } } there is also a cmake warning in new versions of the tool ( v3 . <number> + which is in ubuntu <number> ) and another const - ness warning regarding <code> that shows up with - wwrite - strings enabled .,0
"sb - add "" promiscuous "" pipe option particularly when debugging and diagnosing issues , it ' s useful to have an app that can capture all messages , no matter what is subscribed to by that pipe .",2
"cfe time service should be endian - neutral currently the cfe time service assumes time messages are in platform - endian format , which will cause headaches in mixed - endian environments . cfe time messages should standardize on one byte ordering ( i suggest network - order , aka big - endian ) .",0
"cfe_es mempool returns buffers that are not aligned per email from ryan prentice to the cfs - community mailing list on <number> / <number> : issues with tables containing doubles i tracked this down to be a mempool issue . i ’ ve posted part of the stack trace below that is responsible for assigning memory from the mempool for the table data . cfe_es_getpoolbuf ( ) - cfe_esmempool . c : <number> cfe_tbl_register ( ) - cfe_tbl_api . c : <number> line <number> of cfe_esmempool . c sets the address of the pointer where the table data will be loaded . { { { * bufptr = ( uint32 *)( bdptr + <number> ); } } } below are some values i pulled out of the debugger . { { { bdptr bd _t * 0x 4 2 a6d100 sizeof ( * bdptr ) unsigned long int 0x0 0 0 0 0 0 0 c ( uint32 *)( bdptr + <number> ) uint32 * 0x 4 2 a6d10c * bufptr uint32 * 0x 4 2 a6d10c } } } in my table , the first piece of data is a double and the above code would have that double start at an address that is not double word aligned . to test that this is in fact that location that the problem originates , i added four bytes to * bufptr and set it to 0x 4 2 a6d110 in the debugger , forcing it to be double word aligned . i then hit play and crossed my fingers , and what do ya know , it worked . adding an int32 as the first member of the table allowed me to proceed past the issue , but i feel like that is a very fragile solution . issues with sb messages containing doubles i ’ m getting unaligned memory exceptions when receiving a message that contained doubles from the sb . it appears the payload isn ’ t guaranteed to begin at a double word boundary . there is no way to pad for this since the payload is aligned sometimes and unaligned others . i ’ ve pasted the stack trace below .",0
"build failure when using std =c 9 9 a recent code change pushed to development may break the build for in certain configurations . on my projects we generally build using the <code> flags , which used to work . however the introduction of a binary constant broke it : { { { cfe / fsw / cfe - core / src / sb / cfe_sb_api . c : in function ‘ cfe_sb_sendmsgfull ’ : cfe / fsw / cfe - core / src / inc / cfe_sb . h : <number> <time> : error : binary constants are a <allcaps> gcc </allcaps> extension [ - werror ] <hashtag> define </hashtag> cfe_sb_pipeopts_ignoremine 0 b00000001 /* *< \ brief messages sent by the app that owns this pipe will not be sent to this pipe . */ ^ cfe / fsw / cfe - core / src / sb / cfe_sb_api . c : <number> <time> : note : in expansion of macro ‘ cfe_sb_pipeopts_ignoremine ’ if ( pipedscptr - > opts & cfe_sb_pipeopts_ignoremine ) ^ cc1 : all warnings being treated as errors cfe_core_default / cmakefiles / cfe_core_default . dir / build . make : <number> : recipe for target ' cfe_core_default / cmakefiles / cfe_core_default . dir / src / sb / cfe_sb_api . c . o ' failed } } }",0
"es - incorrect use of cfe_sb_messagestringget function in cfe_es_shelloutputcommand the calls to cfe_sb_messagestringget on lines <number> and <number> in cfe_es_shell . c are passing in an incorrect "" sourcemaxsize "" parameter causing the command to be truncated to <number> characters . possible solutions are documented in the attached email thread . the <allcaps> ccb </allcaps> will determine final solution .",0
"add option for medium_format mode in <allcaps> evs </allcaps> event services currently support configurations for long vs . short format event messages . a medium format that includes the dynamic data out of the event text string , along with the time stamp , event type , processor id , application name , and <allcaps> eid </allcaps> would be a useful addition to the set of <allcaps> evs </allcaps> configurations .",2
"checking return codes in <allcaps> cfe </allcaps> for example , in cfe_sb_createpipe , it calls cfe_es_getappid but does not confirm that it returned cfe_success . should it check that return value ? ( the appid is zeroed by getappid . ) this could create a situation where an app creates a lock ( and somehow an error is generated ) and the app could not later delete the pipe as it does not "" own "" it . it would be good to scrub all <allcaps> cfe </allcaps> code , looking for calls to internal functions that do not verify the return . also , what should be the behavior when these calls do not return cfe_success ? should they generate events ( when <allcaps> evs </allcaps> may not be functional ) or syslog messages or os_printf ?",2
"add "" maximum <allcaps> eid </allcaps> "" comment to the top of all cfe events . h files if a new event identifier ( <allcaps> eid </allcaps> ) needs to be added , and the best place for the event identifier is not at the end of the identifier list , developers may be inclined to renumber the preexisting eids to be in numerical ascending order with the new <allcaps> eid </allcaps> . renumbering existing eids could break tools , tests scripts , etc . it is recommended to comment all the cfe event . h files ( as was done with sb_events . h under ticket # <number> ) to alert developers on the max <allcaps> eid </allcaps> value in the file and how to number new eids using the max .",0
"cfe_sb_createpipe should avoid nesting locks cfe_sb_createpipe calls getappid and getappname in a block of code that uses a lock to protect against concurrent modification . ( per recommendation from joe ) we should avoid nesting locks , so these calls should go outside the protected block .",0
"cfe_es_getappid should call cfe_es_getappidinternal simplifies the code , ensures the same logic .",0
sb - stats telemetry packet is not time - stamped a line was deleted at some point in the cfe_sb_task . c file that used to timestamp the sb - stats message before going out on the s / w bus . the cfe_sb_sendstats ( ) routine merely needs a line added back in : cfe_sb_timestampmsg ( ( cfe_sb_msg_t <wink> & cfe_sb_taskdata . stattlmmsg ) ;,0
"option to not receive messages i send ? i would like to have an app ( detailed description below ) that can publish messages with id ' s that the same app is subscribed to . this would create loops and the app would have to mark messages to identify which it sent versus which were sent by other apps . given that the pipe has an app id , it would be easy to ( in sendmsgfull ) skip any pipes that have the same app id as the caller . can sb have a pipe option to not receive messages from the owning app ? detailed description : i am writing a voting application for redundant processor / sensor environments . as a test framework , i would like to read packets on the sb and to make duplicate copies so that the voter would have redundant messages to vote on . i ' d like the duplicate packets may have the same id as the original message .",2
add timestamps to <allcaps> evs </allcaps> logging to stdout often it ' s useful to know the time a message is generated in the stdout log . adding a timestamp to evs_sendviaports ( ) as an option would be helpful .,2
"have an option to set the timestamp in cfe_sb_sendmsg whether it be a compile - time option , a different function , or a parameter , it would be useful for specific timing testing to have telemetry messages timestamped by the sb code at the time the message is sent , rather than when the app calls setmsgtime or timestampmsg ( ) .",2
"sb - expose an <allcaps> api </allcaps> to increment / decrement the usecount of the buffer applications may want to retain the buffer provided by rcvmsg for longer than when the app makes the next call to the function . this should only require incrementing / decrementing the usecount of the cfe_sb_bufferd_t structure that precedes the buffer , and there is currently a private function "" cfe_sb_decrbufusecnt ( ) "" for decrementing this counter . can cfe_sb_decrbufusecnt ( ) be made public , and a companion function of incrbufusecnt be added as well ?",2
"cfe performance ids are private definitions performance identifier definitions should not be "" hidden "" in private header files . they should be made public in a configuration file . attached email thread contains additional information on mission use case for need to change a cfe performance identifier value .",0
"es shell command telemetry timing is hardcoded the cfe_es_shelloutputcommand hard codes a delay of <number> milliseconds to prevent flooding on large shell output messages over the software bus . this delay should be configurable to allow greater flexibility and support on a wide range of platforms . the email thread that brings this issue to attention and starts the discussion on the solution is pasted below for reference : from : <email> [ mailto : <email> ] on behalf of strege , susanne l . ( <allcaps> gsfc </allcaps> - <number> ) sent : tuesday , <date> <time> to : <allcaps> nasa </allcaps> core flight software community configuration control board mailing list < <email> > subject : re : [ cfs - community - ccb ] fw : cfe es shell command telemetry timing i ’ m in favor of removing the hardcoded hack and replacing with a platform configuration . unless anyone objects , i ’ ll write up a ticket and assign to the next release . from : <email> [ mailto : <email> ] on behalf of hickey , joseph p . ( <allcaps> grc </allcaps> - lss0 ) [ <allcaps> zin technologies inc </allcaps> ] sent : tuesday , <date> <time> to : <email> subject : re : [ cfs - community - ccb ] fw : cfe es shell command telemetry timing seems pretty clear to me - - the <allcaps> api </allcaps> / prototype directly out of osapi - os - core . h is : int32 os_taskdelay ( uint32 millisecond ) ; inside the call , the milliseconds are then converted into whatever units the underlying os uses to measure time passing . for vxworks this is converted to ticks , but for other oss like <allcaps> posix </allcaps> this is converted to nanoseconds for use with e . g . nanosleep ( ) . all in all i think this is a perfectly fine example of an abstraction layer doing what it is supposed to do . the only question is whether cfe_es_shell . c should hardcode it to 2 0 0 ms - - this is very hackish to me . on many systems it may not need a delay at all and could be <number> . but i agree , if there is any documentation out there which is describing the parameter of os_taskdelay as anything else , we need to fix that . would not hurt to ask . on <date> <time> , limes , gregory l . ( <allcaps> arc </allcaps> - ti ) [ <allcaps> sgt </allcaps> , <allcaps> inc </allcaps> ] wrote : oops - - i forgot to confirm the units of the parameter <wink> so , what document do we need to fix , given that saul was under the impression that the parameter was in ticks ? - - greg limes work : <email> home : <email> cell : <phone> land : <phone> ________________________________________ from : <email> [ <email> ] on behalf of hickey , joseph p . ( <allcaps> grc </allcaps> - lss0 ) [ <allcaps> zin technologies inc </allcaps> ] [ <email> ] sent : tuesday , <date> <time> to : <email> subject : re : [ cfs - community - ccb ] fw : cfe es shell command telemetry timing the argument to os_taskdelay is in milliseconds , so i am not sure where the concern arises ? i would support replacing the hardcoded "" <number> "" in cfe_es_shell . c with something more configurable , but i am not sure that cfe_psp_get_timer_tick is the right answer either . for instance on some psps that do not necessarily have direct access to this information , it returns <number> . besides that , it is defined as returning the number of ticks per second ( a rate ) , not a tick period , so it makes no sense to me to pass this value directly into os_taskdelay . if anything , i would suggest making another platform configuration define , and just using it here i . e . : os_taskdelay ( cfe_platform_os_shell_delay ) ; then the users can set it to whatever they ' d like . on <date> <time> , strege , susanne l . ( <allcaps> gsfc </allcaps> - <number> ) wrote : this looks like a valid suggestion to me . if others agree , i ’ ll put in a ticket and assign to the cfe <number> . <number> release . from : weiss , saul h [ mailto : <email> ] sent : tuesday , <date> <time> to : strege , susanne l . ( <allcaps> gsfc </allcaps> - <number> ) < <email> > cc : hinz , david b . ( <allcaps> jsc </allcaps> - ga111 ) [ <allcaps> lockheed martin corp </allcaps> ] < <email> >; clark , ronald h < <email> > subject : cfe es shell command telemetry timing susie , reviewing the cfe_es_shell . c , i noticed the following call in cfe_es_shelloutputcommand : os_taskdelay ( <number> ); my concern is that <number> is the default system tick hardcoded into the <allcaps> osal </allcaps> . so , this equates to a <number> second delay . we are using a different frame rate and so planned to use a different tick rate . i think the cfe_es_shell . c code should be updated to : os_taskdelay ( cfe_psp_get_timer_tick ( )); thoughts ? saul h weiss lockheed martin space systems company orion <allcaps> vpud csci cpe </allcaps> <phone> - - joe hickey software engineer - <allcaps> zin </allcaps> technologies , inc . phone : <phone> / <phone>",2
"' printf ' : mismatch between the type expected by the conversion specifier %x and the type of the argument . cfe_evs_disableportscmd calls evs_sendevent with a format string for printf that contains the %x specifier ( cfe_evs_task . c : <number> : <number> ) . evs_sendevent is also a varargs function and is called in this case with a variadic argument of type unsigned char . this gets promoted via the default argument promotions to a value of type int ( which is a signed type ) . however , evs_sendevent calls vsnprintf with the variadic argument list and the format specifier , which triggers undefined behavior because the %x specifier is expecting a value of type unsigned int . the fix is to add a cast to "" unsigned int "" in the call to evs_sendevent",0
no way to find an existing pipe id by name there is no way to find a pipe id given a pipe name for an existing pipe .,2
"remove all <allcaps> mks </allcaps> $ log comments in file header prologs the git version control system eliminates the need to have "" change logs "" included in each source code file . the original cfs <allcaps> mks </allcaps> change logs have been accumulating since <number> making the source code files very lengthy . the logs are outdated and of little practical use . now that the code is being maintained via git , the old <allcaps> mks </allcaps> $ log tags are no longer used . the old <allcaps> mks </allcaps> $ log tags and old <allcaps> mks </allcaps> log information / comments should be removed from all source code files . note : this needs to be performed after ticket # <number> changes have been merged to prevent any merge conflicts .",0
"<allcaps> ccsds </allcaps> electronic data sheet ( <allcaps> eds </allcaps> ) integration integrate consultative committee for spacecraft data systems ( <allcaps> ccsds </allcaps> ) electronic data sheets ( <allcaps> eds </allcaps> ) into the cfs tool chain and code base . an <allcaps> eds </allcaps> is a formal machine readable ( <allcaps> xml </allcaps> ) specification of interfaces for both hardware and software components . the primary use cases are to support : a ) exchange of unambiguous interface definitions in a standard format between organizations ( as <allcaps> ccsds </allcaps> is an international standards body , organizations includes other international agencies , and industry partners ) b ) automatic generation of interface code , system models , system tests , and mission operational databases c ) run - time support for plug - and - play systems there are two <allcaps> ccsds </allcaps> standards documents that specify the schema and terms to be used in the data sheets for cfs <number> ) <allcaps> xml </allcaps> specification for electronic data sheets for onboard devices and software components ( <allcaps> ccsds </allcaps> blue book <number> ) <number> ) specification for dictionary of terms for electronic data sheets for onboard components ( <allcaps> ccsds </allcaps> magenta book <number> ) this ticket is intended to address <allcaps> eds </allcaps> use at the cfs message layer ( software bus ) . another major use is at the device layer ( hardware component ) which is the target of major studies at the european space agency , and the china academy of space technology . the device layer use case will be a future cfs ticket .",2
"<allcaps> ccsds apid </allcaps> name space expansion expand the cfs software bus topic name space using extensions to the <allcaps> ccsds </allcaps> space packet secondary header . within the cfs architecture the <allcaps> ccsds </allcaps> primary header <allcaps> apid </allcaps> is used as a unique system - wide topic identifier . this ticket is intended to address several issue with the current <allcaps> ccsds </allcaps> space packet <allcaps> apid </allcaps> topic name space <number> ) difficulties allocating and managing the limited number of apids during development <number> ) insufficient number of apids for large systems <number> ) <allcaps> apid </allcaps> allocations for formation flying , distributed systems , multi - core , and partitioned systems <number> ) loss of spacecraft and subsystem identifying information as packets traverse the network stacks implementation of the extended header will include a compile time directive to include or disable extended header support . see attached file for header format .",2
"scrub all verify . h files from ticket # <number> : a scrub of the cfe_xx_verify . h files is needed for all the services to ensure that the checks make sense and remove the checks that do not make sense , ensure the proper rationale is provided for all the checks that do make sense and possibly adjust their values .",2
"add compile - time assert to ensure <number> - bit char type ticket # <number> - <allcaps> jsc </allcaps> : change uint8 to char for strings in interface structures . this change however , assumes use of the "" char "" data type as an <number> - bit type . this assumption is stated in the cfe doxygen and readme release notes however , this information could be missed by users . assumptions should always be explicit . adding a compile - time assert would be useful . it was recommended by the community <allcaps> ccb </allcaps> to place this assert in the cfe vs . the <allcaps> osal </allcaps> since the <allcaps> osal </allcaps> is not dependent on the char type being <number> - bits . the cfe_es_erlog . c file also contains a compile - time assert . it is not a good practice to scatter / hide compile - time asserts across multiple source files . it is highly recommended to move all cfe compile - time asserts to a separate / shared c file i . e cfe_compiletime_assert . c",2
"update sample cmake configuration <allcaps> cfe </allcaps> includes a "" sample_defs "" directory containing a sample configuration for cmake , which fell out of date over time . this needs to be updated . this is an ex - post - facto report ; we fixed this on the fly while creating the <number> . <number> tarball ; this ticket will be used when cycling this hotfix back into development .",0
"process cfe application developers guide with doxygen to allow linkage to code / files as discussed at the <date> <allcaps> ccb </allcaps> meeting ( reference cfs systems engineering handbook discussion in the minutes ) , the cfe application developers guide contains a significant amount of <allcaps> api </allcaps> references . indirectly referencing the cfs <allcaps> api </allcaps> ' s in an external document is prone to error . the <allcaps> api </allcaps> information should be referenced directly from the code . it is highly recommended to move the application developers guide to the cfe doxygen user ’ s guide .",1
"doxygen generator code had gotten stale the cmake build system included some logic to support building the doxygen - based <allcaps> cfe </allcaps> documentation . however these rules had gotten out of date with respect to other changes that had gone into the build since they were written , and a couple variable name and path names need to be fixed .",0
cfe cmake does not build out - of - the - box the list of options included in the cmake / sample_defs directory are out of date . these options have not been kept up with the cmake options that are defined in the test area used for the bamboo builds .,0
"cfe ces1515 . <number> requirement failure requirements ces1515 and ces1515 . <number> state : "" ces1515 upon a processor reset , the cfe shall create all operating system objects required by the cfe . "" "" ces1515 . <number> if the creation of the operating system object fails , the cfe shall perform a power on reset . "" to satisify this requirement , the cfe_es_createobjects function makes a call to the cfe_psp_panic function in the case where the return from os_taskcreate ! = os_success . the cfe_psp_panic function however , does not perform a power on reset . it performs an exit ( - <number> ) . to correctly satisfy this requirement , es needs to make a call to cfe_psp_restart with an input argument of cfe_psp_rst_type_poweron to specify a power on reset . this may not be the best solution . it is recommended to reconsider this requirement . it may be the best / required course of action to perform a power on reset following a processor reset if the creation of one of the cfe core application objects fails . this may not be the best / required course of action if the creation of one of the applications listed in the es startup script fails . it should be noted that this requirement has not been properly handled in past releases of the cfe . the call to the cfe_psp_panic function to satisfy this requirement has been in place since the initial release of the cfe . it was recently found that the test to verify this requirement was faulty producing a false positive .",0
"additional <allcaps> cfe </allcaps> start up state for application sync although the cfe <number> . <number> release improved synchronization during start up , it only implements a single state ( <code> ) which is supposed to indicate when everything is ready . however , this may not be sufficient for all applications . specifically , some applications have an "" early "" init in which its local data structures are all set to an initial state , followed by a "" late "" init that may require some communications with other applications or libraries . an application would need to also complete this "" late "" initialization in order to be considered completely up and running . currently the start up sync only handles the early init ; late init , if required , is generally done while in the "" operational "" state but this also a race condition in that requests can be made to an application that has not been fully initialized . this race condition was observed in the <allcaps> eva cws </allcaps> project where one app needed to wait for other apps to be fully loaded before completing its initialization , so it was using <code> before doing its late - phase init . but other applications ( also using the same sync call ) were calling other functions before the late - phase init had completed . the solution is to add another <allcaps> cfe </allcaps> startup state for this late - phase init .",2
"cfe_evs_register filters argument should be of type cfe_evs_binfilter_t * if the filters argument of cfe_evs_register is not null , it is always cast to "" cfe_evs_binfilter_t *"", the parameter should be of that type and not "" void *"". ( if users want to pass another type that is compatible , they can cast on their call to make it explicit . ) void * invites passing the wrong type of pointer .",0
"misleading cfe doxygen : cfe_sb_deletepipe during app development , a developer commented on the following : ' ' after testing , it appears that the comments in the cfe_sb_deletepipe are not correct . all created pipes are automatically deleted on <allcaps> cfs </allcaps> shutdown and no app specific calls to cfe_sb_deletepipe is required . calling deletepipe in cleanupcallback function gives the following error : ' ' { { { <allcaps> evs </allcaps> port1 <number> / <number> / cfe_sb <number> : pipe delete error : caller ( cfe_evs ) is not the owner of pipe <number> } } } the cfe doxygen has : ' ' ' int32 cfe_sb_deletepipe ( cfe_sb_pipeid_t pipeid ) ' ' ' description this routine deletes an input pipe and cleans up all data structures associated with the pipe . all subscriptions made for this pipe by calls to cfe_sb_subscribe will be automatically removed from the sb routing tables . any messages in the pipe will be discarded . ' ' ' applications must call this routine for all of their sb pipes as part of their orderly shutdown process . ' ' ' ' ' ' however , ' ' ' cfe_es_cleanupapp ( uint32 appid ) calls cfe_sb_cleanupapp ( appid ) ( in cfe_sb_priv . c ) which deletes all of an app ' s pipes . so when the app developer tries to do that same cleanup themselves they get an error . it ' s a question of resource management . how should the documentation be updated to tell the developer what to do ?",0
cfe ces1702 . <number> and ces1703 . <number> requirement failures the original implementation to satisfy es requirements ces1702 . <number> and ces1703 . <number> involved making a call to the cfe platform configuration variable cfe_es_exception_function within the <allcaps> psp </allcaps> . changes to the <allcaps> psp </allcaps> have now resulted in the failure of these two requirements ( requirement text is provided below for reference ) . cfe requirements should be satisfied within the cfe code base . failed requirements include : ces1702 . <number> if the <allcaps> cpu </allcaps> exception was caused by the operating system or cfe core then the cfe shall initiate a <platform_defined> response . ces1703 . <number> if the floating point exception was caused by the os or cfe core then the cfe shall initiate a <platform_defined> response .,0
"add cfe <allcaps> itos </allcaps> record files provide an initial release of cfe record files that define the cfe command and telemetry database for the <allcaps> itos </allcaps> ground system . it is believed these record files are substantially correct and complete however , they have been tested only lightly . it is important to get these files delivered with the next cfe so that they may be readily available for use and aid in fining errors or needed updates , documentation , etc .",2
"cfe_es_shelloutputcommand is truncating output filename in the cfe_es_shelloutputcommand , when a filename is passed into the function , the call to cfe_sb_messagestringget is truncating the input filename into the output filename variable . the truncation is occurring due to the sizeof the pointer to the input filename being used as the sourcemaxsize input in the call to the cfe_sb_messagestringget function on lines <number> - <number> : int32 cfe_es_shelloutputcommand ( const char * cmdstring , const char * filename ) { . <repeated> else { ( void ) cfe_sb_messagestringget ( outputfilename , filename , <allcaps> null </allcaps> , sizeof ( outputfilename ) , sizeof ( filename ) ); }",0
"cfe_es_reloadappcmd references incorrect data in call to cfe_es_reloadapp in the cfe_es_reloadappcmd function , the wrong data is being passed into the call to the cfe_es_reloadapp function . the cfe_es_reloadapp function takes in the appid and the name of the application file to load . instead of the filename being passed in , the name of the application is being passed in . see code snippet below from cfe_es_task . c lines <number> - <number> : cfe_sb_messagestringget ( localapp , ( char <wink> cmd - > application , <allcaps> null </allcaps> , os_max_api_name , sizeof ( cmd - > application ) ); result = cfe_es_getappidbyname ( & appid , localapp ) ; if ( result = = cfe_success ) { result = cfe_es_reloadapp ( appid , localapp ) ;",0
"<allcaps> evs </allcaps> unit test code coverage incomplete in task . c ( <allcaps> gsfc dcr </allcaps> <number> ) cfe_evs_task . c - <percent> % coverage ( <number> lines of code <allcaps> not </allcaps> executed ) the lines not covered are in cfe_evs_taskinit : - : <number> : /* register <allcaps> evs </allcaps> task for event services */ <number> : <number> : status = cfe_evs_register ( <allcaps> null </allcaps> , <number> , cfe_evs_binary_filter ) ; <number> : <number> : if ( status ! = cfe_success ) - : <number> : { # # # # # : <number> : cfe_es_writetosyslog ( "" <allcaps> evs </allcaps> : call to cfe_evs_register failed : rc =0 x % 0 8 x\ n "" , ( unsigned int ) status ) ; # # # # # : <number> : return status ; - : <number> : } <allcaps> reason </allcaps> : none",2
"<allcaps> evs </allcaps> - cfe_evs_writeappdatacmd references incorrect variable in call to os_creat in the cfe_evs_writeappdatacmd function , the wrong variable ( uninitialized ) is being passed into the os_create function . localname ( initialized via the call to cfe_sb_messagestringget ) should be passed in to os_creat rather than appdatafilename . see code snippet below from cfe_evs_task . c lines <number> - <number> : /* copy the commanded filename into local buffer to ensure size limitation and to allow for modification */ cfe_sb_messagestringget ( localname , ( char <wink> cmdptr - > appdatafilename , cfe_evs_default_app_data_file , os_max_path_len , sizeof ( cmdptr - > appdatafilename ) ); /* create application data file */ filehandle = os_creat ( appdatafilename , os_write_only ) ;",0
"incorrect leap seconds in docs under the cfe user ' s guide ( doxygen ) : core flight executive documentation » cfe time services overview file : cfe / docs / cfe usersguide / doxygen / cfetimeugcomponents . html . <repeated> this sentence is now quite out of date : "" the initial count of leap seconds ( <number> ) was established in january of <number> , the first leap second was added to the initial count in june of <number> , and the current count of leap seconds is <number> . "" we are up to <number> ( <url> - <date> ) . consider revising the verbiage so we do not have to keep updating it .",0
"enhanced build version . h collisions the <allcaps> cmake </allcaps> build system <allcaps> cfe </allcaps> / cmake / version . cmake code generates a version . h file that overrides the version . h required to build for vxworks . suggested fix is to change the generated filename to cmake_version . h , and make the change to <allcaps> cfe </allcaps> / cmake / target / src / target_config . c to include the new filename",0
"sb timeout receive unit test failure when running the sb unit tests via the "" classic build "" , the sb is failing due to an unexpected return : unexpected return in timeout receive test , exp = - <number> , act = - <number> the failure appears to be due to the unit test not setting the proper return value before the call to cfe_sb_rcvmsg . in the sb_ut . c source code file in the test_rcvmsg_timeout function there is an <hashtag> if n def </hashtag> statement around the ut_setrtncode function that is blocking the return code from being set properly .",0
fix git version strings built into executable the cmake build system includes version information acquired by running <code> in various source trees being used by the build . these version strings are then linked directly into the output executable . in testing the <allcaps> cfe </allcaps> <number> release i noticed that it wasn ' t quite working correctly . the git revs were ok but it in some cases was referencing the wrong base tag or no base tag at all .,0
cppcheck - strncpy - fills may not be null terminated this ticket will is addressing the following cppcheck warnings : e - ja / cfe / fsw / cfe - core / src / es / cfe_es_apps . c : <number> : warning : the buffer ' ramdiskpath ' may not be null - terminated after the call to strncpy ( ) . / home / bamboo - remote - agent / bamboo - agent - home / xml - data / build - dir / <allcaps> cfs </allcaps> - <allcaps> cfscfe </allcaps> - ja / cfe / fsw / cfe - core / src / es / cfe_es_apps . c : <number> : warning : the buffer ' ramdiskpath ' may not be null - terminated after the call to strncpy ( ) . / home / bamboo - remote - agent / bamboo - agent - home / xml - data / build - dir / <allcaps> cfs </allcaps> - <allcaps> cfscfe </allcaps> - ja / cfe / fsw / cfe - core / src / es / cfe_es_shell . c : <number> : warning : the buffer ' cmd ' may not be null - terminated after the call to strncpy ( ) . / home / bamboo - remote - agent / bamboo - agent - home / xml - data / build - dir / <allcaps> cfs </allcaps> - <allcaps> cfscfe </allcaps> - ja / cfe / fsw / cfe - core / src / es / cfe_es_shell . c : <number> : warning : the buffer ' outputfilename ' may not be null - terminated after the call to strncpy ( ) . <date> - <allcaps> ccb </allcaps> meeting discussed solution to replace strncpy call with cfe_sb_messagestringget,0
"redundant initializations if a variable is declared and initialized , then a value is immediately stored in it , we get a warning . the redundant initializer did not need to be added and we are removing them .",0
"shush cppcheck there are some specific places in the code where we want cppcheck to not produce warnings , without generalizing in any way to other code . this involves inserting comments like { { { /* cppcheck - suppress unsignedpositive */ } } }",0
"es - createchildtask <allcaps> api </allcaps> function does not use "" flags "" input parameter the <allcaps> api </allcaps> definition of the cfe_es_createchildtask <allcaps> api </allcaps> function is : int32 cfe_es_createchildtask ( uint32 * taskidptr , const char * taskname , cfe_es_childtaskmainfuncptr_t functionptr , uint32 * stackptr , uint32 stacksize , uint32 priority , uint32 flags ) the "" flags "" input parameter which is intended to be used to pass into the <allcaps> osal </allcaps> os_taskcreate call , is not being used . instead the call to os_taskcreate hardcodes the os_fp_enabled macro for the "" flags "" input . this implementation of the <allcaps> api </allcaps> is very misleading and limiting . in addition , es defines a "" flags "" macro in the cfe_es_perf . h called cfe_es_perf_child_flags that is passed into the cfe_es_createchildtask <allcaps> api </allcaps> function call when es spawns a child task to write its performance log data to a file . the flags used when creating child tasks need to be defined across all implementations vs . "" hidden "" in private cfe service header files . this macro should be removed and replaced with an appropriate <allcaps> osal </allcaps> macro . an accompanying <allcaps> osal </allcaps> ticket may need to be written to add all "" flags "" options .",2
"update cfe version number for <number> . <number> release this ticket will be used to update the version header file to update the version number to <number> . <number> for test and release . once cfe version <number> . <number> has been populated to the master branch , this ticket will be used to set the version number to <number> . <number> to indicate the code is development code retrieved from the "" development "" branch .",2
"<allcaps> smp </allcaps> : thread safety issues in cfe_time around the sync callbacks the <code> and <code> functions are not thread safe , as they do not utilize any sort of global mutex when searching the table . these are called by applications during startup , which is exactly the situation where multiple threads __might__ be calling these functions at the same time . furthermore , <code> does not protect against a callback being unregistered at the same time a tone message comes in .",0
"es does not check target file existence before attempting to reload an application ( <allcaps> gsfc dcr </allcaps> <number> ) if the following command is sent : / fsw_es_reloadapp <allcaps> application </allcaps> ={ application } , <allcaps> appfilename </allcaps> ={ file } and if the file does not exist , the application will be deleted but cannot be reloaded . this is because es does not check to see if the file exists first . this and any other es command that requires file existence should check for the file existence before attempting to do operations on the application .",0
refactor cfe_es_appcreate and cfe_es_loadlibrary these functions actually perform <number> major operations : * calling <code> to load the module * calling <code> to find the entry point / init function and calling that entry point / init function . ( for apps this also involves <code> here whereas a library init function is called directly ) * manipulate the internal <allcaps> cfe es </allcaps> global tables to store the data related to the application / library these major functional items should be broken into separate functions . this will make <code> and <code> much cleaner looking and remove the overloads needed to support static loading as in ticket # <number> .,2
"unsafe macros , investigate conversion into inline functions some places in <allcaps> cfe </allcaps> - - notably , in ccsds . h - - there are macros that do things like this : { { { <hashtag> define </hashtag> ccsds_wr_apid ( phdr , value ) \ ( ( phdr ) . foo [ <number> ] = ( value > > <number> ) , \ ( phdr ) . foo [ <number> ] = ( value & 0 xff ) ) } } } this means that if "" value "" is an expression , odd things happen when the macro is expanded . this appears in many places in ccsds . h and we need to do a scan of other headers as well . it needs to be : { { { <hashtag> define </hashtag> ccsds_wr_apid ( phdr , value ) \ ( ( phdr ) . foo [ <number> ] = ( ( value ) > > <number> ) , \ ( phdr ) . foo [ <number> ] = ( ( value ) & 0 xff ) ) } } } this change needs to happen for all the places where a macro parameter is an operand in an experession , and does not yet have parens around it . <allcaps> update </allcaps> <number> - <number> - <number> : <allcaps> ccb </allcaps> recommends that in many cases we would benefit from changing these macros into c99 "" inline "" functions , so this ticket is being hijacked !",0
"<allcaps> eds </allcaps> : the es "" loadlibrary ( ) "" call - avoid duplicates and pass id the <code> call currently does not check if a library with the same name is already loaded . it should probably do this , and if a duplicate is found it should return an error code indicating that the library is already loaded . in the same area , the library id should be passed to the init function so any data structures / api calls associated with the library can be properly tracked in case the library is unloaded in the future .",2
"clean up es startup object table in reviewing # <number> it was determined that a better approach to changing the type of the "" stackptr "" field would be to do some more general cleanup here and remove the unused field .",2
"fs - extractfilenamefrompath function needs revision the "" stringlength "" variable defined in the fs extractfilenamefrompath function does not meet <allcaps> misra </allcaps> standards ( <number> typedefs that indicate size and signedness should be used in place of the basic numerical types ) . the simple solution ( shown in ticket # <number> ) , "" replaced casting from int to size_t as must store return of strlen . "" , resulted in an additional "" correction "" variable which in turn may result in an infinite loop . it is recommended to rewrite this function .",2
possible buffer overrun in format strings used for scanf particularly in <code> this uses the %s to read strings into fixed length buffers . there is a possibility of overrun if the actual string exceeds the allocated size .,0
"cfe <number> documentation updates this ticket will be used for all cfe <number> documentation updates including the <allcaps> vdd </allcaps> . a listing of the needed documentation updates will be added to this ticket as tickets , requiring code updates , are reviewed and determined there is an associated documentation change .",2
"sb : "" cfe_sb . h "" should not depend on cfe_platform_cfg . h the public include file <code> currently includes <code> within it . however , nothing within cfe_sb . h actually depends on the macros in this file . usage of <code> macros should be limited to <allcaps> cfe </allcaps> itself ; however , <allcaps> cfs </allcaps> apps may include <code> . having the platform config included like this can cause problems for apps as it prevents them from building in a platform - config - agnostic way .",0
allow c99 code in <allcaps> cfe </allcaps> . update compiler flags to allow c99 code to be used everywhere in <allcaps> cfe </allcaps>,0
"cfe_es_appcreate does not unload an object file if the entry point is not found the function cfe_es_appcreate is used for the <allcaps> es api </allcaps> and the es command interface to load and start a new application . if the entry point for the new application does not exist in the object file for the application , the function returns an error , but does not try to unload the object module . this leaves the system with a loaded object module that is not tracked by the cfe . in addition the <allcaps> osal </allcaps> still has an entry for the object module , and will reject another attempt to load the same file , with the same module name . action : fix the code in cfe_es_appcreate to unload the object file in the event the entry point symbol is not found .",0
"add explicit "" return "" after functions that are not supposed to return function calls such as <code> do not normally return , except when running with a "" stub "" implementation during unit test . to keep the testing accurate , these functions should be immediately followed by an explicit "" return "" statement so that any instructions later in the function will <section> be executed .",0
<allcaps> jsc </allcaps> : update <allcaps> cfe </allcaps> unit tests roll - up of all <allcaps> jsc </allcaps> changes to the <allcaps> cfe </allcaps> unit tests,0
"<allcaps> jsc </allcaps> : add l / u / ul suffixes to literal values add an "" l "" , "" u "" , or "" ul "" suffix to all literal values and macro constants in <allcaps> cfe </allcaps>",0
"<allcaps> jsc </allcaps> : add "" void * "" casts add explicit <code> casts where ever a local object is being passed into a function that accepts a void pointer .",0
"<allcaps> jsc </allcaps> : type correctness fixes use the correct types for interacting with the system library . * use <code> to store results from functions such as <code> . * use correct type when calling <code> elsewhere , where / / <allcaps> not </allcaps> / / interacting with the system library , use fixed - width types instead of native types .",0
"fix size check in cfe_es_initializecds ( ) in the <code> function , the pool size is computed by the following code : { { { cfe_es_global . cdsvars . mempoolsize = cdssize - cds_pool_offset - sizeof ( cfe_es_global . cdsvars . validityfield ) ; } } } however , if the passed - in "" cdssize "" is actually smaller than the sum of these two constants , then the size will wrap and become very large . this code must first check that the passed - in size is not smaller than this constant , if it is , the subtraction should not be done .",0
"fix potential issues in es_cleanupapp ( ) in <code> there are two issues : * the <code> may be deleted twice . it may first be deleted when deleting the child tasks , then it is deleted again later in the function . * it calls <code> unconditionally . it is possible that this is / / not / / an external application , for instance if it is a core application then it was not loaded from a module and the contents of the <code> field are not valid .",0
"<allcaps> jsc </allcaps> : change uint8 to char for strings in interface structures use the <code> type when storing strings , rather than <code>",0
"<allcaps> jsc </allcaps> : update code constructs to <allcaps> misra </allcaps> recommendations * modify loops to / / not / / use <code> * do not modify loop control variables within the loop , use break instead * make sure all <code> constructs have final <code>",0
<allcaps> jsc </allcaps> : remove unnecessary cast on os_write cleanup - remove unnecessary cast on os_write ( ) call,0
"add missing "" . payload "" structure member designations the <code> structure access was missing in certain conditionally - compiled code paths within <code> . this caused compilation failure when these options were enabled and the compiler attempted to build this code .",0
"replace os_converttoarrayindex ( ) with a macro <allcaps> jsc </allcaps> has noted that the compiler for their vxworks target does not understand the c99 "" inline "" keyword . an inline function had been used as a compatibility bridge for the "" - ng "" versions of <allcaps> osal </allcaps> that require additional work to convert an <allcaps> osal id </allcaps> to an array index . compilation was failing on this declaration . rather than making this an out - of - line function ( the easiest approach ) it would be cleaner and less of a performance hit to replace this direct call with a macro . the macro can either call the conversion function or be a pass through .",0
"resolve "" - m32 "" <allcaps> cfe </allcaps> classic build issues the classic <allcaps> cfe </allcaps> build historically built for <number> - bit x86 linux , on <number> - bit x86 linux build machines . building on a <number> - bit x86 linux server requires the use of the "" - m32 "" flag , but <allcaps> only </allcaps> when the target is the classic <number> - bit x86 linux . this also requires that the server has <number> - bit goodies , often "" multilib "" is the thing you need to google if this is busted . currently , inserting this flag where it is missing or removing it where it is present requires editing files , which is a speedbump for developers and a blocker for automatic systems when building both <number> - bit x86 and any other target . need to set up the classic makefiles so that we default to - m32 not being present , and allow it to be inserted on demand from the command line or via an environment variable ( at the developer ' s option , both need support ) .",0
"improve cppcheck configuration for <allcaps> cfe </allcaps> the initial level of support for "" cppcheck "" within the <allcaps> cfe </allcaps> build plan is a simple implementation using default checking , widened to maximize coverage but not otherwise tuned . while any individual mission or project using <allcaps> cfs </allcaps> may decide to do this work , this is only mildly in their direct interest , but it is very much in the interest of the <allcaps> cfs </allcaps> community as a whole that it gets done . we can make cppcheck more useful , both for checking the <allcaps> cfe </allcaps> core applications themselves and for checking code that uses them , by setting up a configuration file that tells cppcheck as many details as possible about the intended interfaces . for example : - indicating functions that acquire and release resources so that cppcheck can attempt to report failures to release a resource ; this is not just memory allocation but includes lock aquisition and anything else managed using one function to acquire ( or open or connect . <repeated> ) and another to release ( or close or disconnect ) . - indicating where a function requires that a pointer , passed as a function parameter , must point to initialized memory , so that cppcheck can report things like "" trying to strcopy where the source array has not been initialized . "" there are other details we can also express in the cppcheck library configuration file , generally of flavor similar to the above .",2
"cfe_es_getappname ( ) undefined output when failure occurs the <code> function is reasonably well defined - it sets the appname output buffer and returns <code> when everything went well , and it also nicely ensures that the output buffer is null terminated with the specified output buffer size ( all good things ) . = = <allcaps> problem </allcaps> : = = most callers of this function do not check the return code . <code> does not touch the output buffer in case of failure ( any return code other than <code> ) and this would mean that the output may not be null terminated at all , or may be left with garbage from a previous value . some callers explicitly add a null char to the buffer at the last position in the buffer , but this still leaves the possibility of treating a buffer full of garbage ( or the previous value ) as the correct value . = = <allcaps> proposal </allcaps> = = as a near term fix <code> should return an empty string in addition to the error code .",0
"printf format specs need to be cleaned up there are many cases like this , where the variable to print is a different type than the format . many of these have simply been casts to get rid of the compiler warning , but the format spec is what probably really should be fixed to match the type . for example , cfe_sb_getcmdcode ( ) returns a uint16 , the format spec would more appropriately be % u , rather than % d . in this case , a large , valid , command code will get printed out as a negative value , which will be confusing , because command codes are not negative values . cfe_evs_sendevent ( cfe_sb_bad_cmd_code_eid , cfe_evs_error , "" invalid cmd , unexpected command code % d "" , ( int ) cfe_sb_getcmdcode ( cfe_sb . cmdpipepktptr ) ); there are many cases like this through out cfe that need to be reviewed and cleaned up .",2
standardize version numbering ( in <allcaps> cfe </allcaps> ) bring version number management within <allcaps> cfe </allcaps> into line with the cfs standards documented at <url>,0
"es unit test failing on x86_64 due to uint32 memory handle another case of a <code> being used to store a memory pool handle , which fails when running the unit tests on a <number> - bit build . using the <code> typedef instead solves the problem .",0
"copies to / from message payloads should use the sizeof ( ) operator where possible when reading / writing software bus message payloads , strings must be always char [ ] arrays ( not pointers ) by definition . many times these these are defined as something like : <code> and later they are filled using something like : <code> however , instead of using the <code> in the runtime code , it is more future - proof to use the <code> operator to get the array size . this is particularly true when the payload structures are generated from an <allcaps> eds </allcaps> ( electronic data sheet ) since there may not even be a simple macro to use in that case . the <code> operator will always work even if the size is a hardcoded value or the macro name changes in a future version .",2
"simplify function pointer manipulations there are a number of places within the <allcaps> cfs </allcaps> projects where the usage of function pointers is somewhat obfuscated by the inclusion of redundant operators . removing those operators can improve the clarity of the code . the redundancies are based on code that , when written , did not properly base itself on the following aspects of function pointers in the c programming language . <number> . function names decay into function pointers in the same way that array names decay into pointers to their first elements , which means that an <code> operator is redundant when setting a pointer to point at a function . for the classical example of this , see most <code> examples , where no <code> is applied to the comparison function when passing it as the last argument , which has type ' ' pointer to function . <repeated> ' ' <number> . the function call operator <code> ' ' args ' ' <code> operates on a function pointer - - so every function call you see actually is invoking the above decay semantics . this means that the <code> operator is ' ' not ' ' needed when calling a function via a function pointer . happily , this also often means that you also do not need an extra level ( or two ? ! <repeated> ) of parentheses to asure that the <code> is applied to the function pointer and not to the return value . <number> . calling a function pointed to by a structure member is a very common operation , and with the above in mind , note that there is no parsing or evaluation order ambiguity ; no extra parentheses are required to assure that <code> and <code> and the function call operator are evaluated in the proper order . my task - - embodied in this ticket - - is to seek out cases in the <allcaps> cfe </allcaps> source code where redundant operations are applied to function pointers ( at assignment sites ' ' and ' ' at call sites ) , and provide recommended changes to improve clarity . specific examples will accumulate in the comments below . ticket to be closed when my scan of the project is complete , and all call sites have been resolved ( whether the resolution is to improve them now , file a ticket for later improvement , or where we will be leaving the code unchanged ) . ' ' ( this also makes the code robust against the rare but troublesome case where an external function changed from a function to a function pointer . <repeated> we may never do this , but it is always good to foster good code hygene . ) ' '",2
naming convention for macros in cfe_mission_cfg and cfe_platform_cfg the <code> and <code> files contain numerous macros for tuning <allcaps> cfe </allcaps> to the jobs that need to be performed . the two files have different scope : * <code> is shared by all cpus within the spacecraft / mission * <code> is specific to a single <allcaps> cpu </allcaps> within the spacecraft / mission . it is important that the scope of these definitions is well defined and used consistently throughout the code . a naming convention should be introduced so that it is clear when reading the code whether the macro has mission - level or platform - level scope .,2
es performance child task priority is not configurable task priorities should not be hidden read - only cfe files . it is recommended to place all cfe application and task priority settings in the platform configuration file .,0
"<allcaps> tbl </allcaps> - dump table registry data command can hog <allcaps> cpu </allcaps> ( <allcaps> gsfc dcr </allcaps> <number> ) the <allcaps> gsfc nicer fsw </allcaps> team discovered that it takes approximately <number> second to process the dump table registry command when there are <number> <allcaps> rts </allcaps> tables and that lower priority tasks generate various error events related to not getting an opportunity to run . adding a platform configuration definition to insert task delays into the process loop will increase the time necessary for cfe_tbl to finish the command but will allow lower priority tasks to run while the command is being processed . also , creating some test code that puts performance markers around the file i / o calls within the command processor may identify where the bulk of the command process time is spent . it may be possible to reduce the command execution time by optimizing the command handler code if the bulk of the execution time is not being spent inside the file system .",0
"sb - duplicate pipe creation causes failure to delete pipe ( <allcaps> gsfc dcr </allcaps> <number> ) when a software bus pipe is created , the sb service will assign a new pipe id to the system . if the same pipe is created again , sb will change its pipe id and prevent the original pipe from being deleted . see attachments for more detail .",0
"<allcaps> ccsds </allcaps> header file macro ccsds_inc_seq generates a compiler warning when referenced ( <allcaps> gsfc dcr </allcaps> <number> ) the macro ccsds_inc_seq defined in ccsds . h generates a compile time warning because it calls the macro ccsds_wr_seq with <number> arguments . the first argument is "" phdr "" which is ok , but the second argument is "" ccsds_rd_seq ( phdr ) + <number> "" which is not ok . the problem is that the second argument results in code that looks like (x + <number> > > <number> ) , which is unclear . putting "" ccsds_rd_seq ( phdr ) + <number> "" inside parens results in code that looks like ((x + <number> ) > > <number> ) which is ok . change macro ccsds_inc_seq from : { { { <hashtag> define </hashtag> ccsds_inc_seq ( phdr ) ccsds_wr_seq ( phdr , ccsds_rd_seq ( phdr ) + <number> ) } } } to : { { { <hashtag> define </hashtag> ccsds_inc_seq ( phdr ) ccsds_wr_seq ( phdr , ( ccsds_rd_seq ( phdr ) + <number> ) ) } } }",0
"possible buffer underrun in cfe_fs_decompress . c [ <allcaps> mms </allcaps> - <allcaps> ivv </allcaps> - <number> ] [ <allcaps> obs </allcaps> - <number> ] [ <allcaps> gsfc dcr </allcaps> <number> ] source code file : cfe \ fsw \ cfe - core \ src \ fs \ cfe_fs_decompress . c line <number> output from code analysis tool : "" buffer overflow , array index of ' x ' may be outside the bounds . array ' x ' of size <number> declared at line <number> may use inde "" { { { <number> while ( ( i & ( ( <number> < < w ) - <number> ) ) ! = x[ h ] ) { <number> h - - ; /* do not need to update q */ <number> w - = l ; } } } the array x could be under run if h attains a value of - <number> . this will occur if the condition does not evaluate to true before h is decremented below <number> . this could also lead to an infinitely executing loop .",0
"remove "" cpu "" directories from fsw / platform_inc keeping separate cpu directories in fsw / platform_inc is redundant , unnecessary , and prone to error when the platform configuration files need to be updated . it is recommended to remove the cpu directories and maintain only one copy of the cfe_platform_cfg . h and cfe_msgids . h files .",0
"es creates redundant sys log entries when creating er log entries ( <allcaps> gsfc dcr </allcaps> <number> ) for most of the reset cases , es will create an entry in the exception and reset log ( er log ) and it will also create a syslog entry . both the er log and syslog are stored in the preserved <allcaps> ram </allcaps> on a platform , so it is probably not necessary to create the redundant syslog entries . determine the impact to unit and build tests , and remove the duplicate syslog entires for resets .",2
update cfe_es_system_log_size verify to allow larger sys log files ( <allcaps> gsfc dcr </allcaps> <number> ) the es verify . h file will only allow a max sys log file of <number> bytes . there is no documented rational for this limit .,0
sb - add last pipe id and msg id to routine telemetry for diagnosing message limit error and buffer overrun errors ( <allcaps> gsfc dcr </allcaps> <number> ) often the sb message limit error and buffer overrun error event messages are filtered . in order to help diagnose these sb issues it would be helpful to include the last pipe id and message id associated with these errors in routine telemetry .,2
"es - add ability to recreate the <allcaps> ram </allcaps> disk via command ( <allcaps> gsfc dcr </allcaps> <number> ) the es startup creates and initializes the <allcaps> ram </allcaps> disk . if the <allcaps> ram </allcaps> disk becomes corrupted there is no ground interface provided to recreate the <allcaps> ram </allcaps> disk . during <allcaps> gsfc gpm tv </allcaps> testing , a <allcaps> ram </allcaps> disk corruption was experienced . a processor reset was needed in order to restore the <allcaps> ram </allcaps> disk to an operational state . see the attached <allcaps> pfr </allcaps> description for more details .",2
"cfe time subsystem has calls to os functions that do not exist for non - default configurations in the cfe time subsystem , there are a couple of calls to functions that do not exist : os_getlocalmet and os_setlocalmet . these calls are conditionally compiled by a configuration parameter , and probably not used often . note : <allcaps> gsfc </allcaps> ' s <allcaps> mms fsw </allcaps> uses these functions and had to provide them .",0
"es - invalid memory handle when restarting / deleting an application with tables ( <allcaps> gsfc dcr </allcaps> <number> ) when you delete an application that uses tables ( e . g . hk ) and then restart another task ( e . g . sc ) for a second time , the es task writes to the system log that there are invalid memory handles . seems like when tables get unregistered is where the errors are happening . message says it got a bad pointer for this table , not sure if the app in messed up . this problem is not isolated to restartapp . it occurs in deleteapp as well . what it looks like is that the linked list is not getting cleaned up properly when an app is deleted or restarted . further investigation in the <allcaps> cfs </allcaps> lab narrows the problem down to the removeaccesslink function in cfe_tbl_internal . c . the errors are being generated on table handles from the deleted app . the buffer that is trying to be placed back into the pool is set to <allcaps> null </allcaps> because it has already been put back into the pool . the tables that were "" cleaned up "" still contain the appid of the deleted app . when the subsequent app is restarted , its appid becomes that of the deleted app and inherits the table handles from the previous app . for example , the hk app has <number> tables and the sc app has <number> tables . when hk is deleted , the <number> tables are removed and the entries still contain the appid of hk . when sc is restarted , it becomes the appid that hk was . the reason the errors occur on the 2 nd restart is because on the first restart sc had a unique appid . on the second restart , it has inherited hks original appid . in this case , you will see <number> sets of errors when sc is restarted . the sc application did not show any adverse functionality because of these errors . all that is happening is that the putpoolbuf function is reporting an error when trying to return a <allcaps> null </allcaps> buffer to the pool .",0
"update "" cfe - <allcaps> oss </allcaps> - readme . txt "" the <allcaps> oss </allcaps> readme file was updated when the <allcaps> cfe </allcaps> <number> . <number> hotfix release tarball was prepared for and distributed to sourceforge , but the updated text was not then also stored in the cfe / docs directory . this commit captures the updated readme text from the <allcaps> oss </allcaps> tarball and places it in the cfe / docs tree .",0
"cfe_es_system_log_size update makes cfe_evs test fail the change made to cfe_es_system_log_size in the <allcaps> cfe </allcaps> <number> . <number> hotfix release causes the cfe_evs test to fail . the test case that fails is case <number> where the size of the es reset area is jammed to zero using a stub and cfe_evs_earlyinit is called . the tested behavior is that a specific string is printed via the system log output which has been mocked . the mock does an exact string compare of the data against a fixed set of patterns . because the size of the structure has changed , the exact content of the error message has been modified and the message is no longer being recognized by the syslog printing mock , and the test then does not know that the correct condition was trapped .",0
"correction of an infinite loop in cfe_sb_task . c in cfe_sb_sendrtginfo ( ) the case where ( pd = = <allcaps> null </allcaps> ) followed by continue will result in an infinite loop . the proper correction is to replace the continue with a break , so that the loop is exited on an error . the correction was made in the following changeset , as part of static code analysis changes : commit : [ changeset : 5 9 6 4 0 e0 ]",0
"add ut assert stubs to <allcaps> cfe </allcaps> = = = history = = = as part of <allcaps> osal </allcaps> tracs [ cfs_osal : <number> ] and [ cfs_osal : <number> ] , the basic ut assert framework was integrated into <allcaps> osal </allcaps> so that it will be available for all unit testing . the <allcaps> osapi </allcaps> stub functions were also added as a side library distributed wit",2
"support for statically linked <allcaps> cfs </allcaps> applications some platforms ( <allcaps> rtems </allcaps> , for example ) do not natively support the concept of dynamic module loading . even on platforms that do offer this feature , it is sometimes beneficial to statically link anyway , at least in certain circumstances , since there is some extra runtime overhead when using a dynamically linked library vs . a statically linked library . this will add the build infrastructure to do this , along with the necessary hooks to include statically linked modules into the <allcaps> psp </allcaps> as well as <allcaps> cfs </allcaps> applications and libraries . see also [ cfs_psp : <number> ] for the <allcaps> psp </allcaps> enhancement to work with this .",2
"default configuration setting for cfe_es_startup_script_timeout_msec is too big the cfe_es_startup_script_timeout_msec default configuration setting is currently set to <number> seconds . a full cfs system typically takes ~ <number> second to launch and initialize the cfe and all applications . the cfe "" out - of - the - box "" open source release package initializes in less than a second . having the system wait <number> seconds causes the software to appear as though it is hung . it is recommended to set the default for this configuration to <number> second . projects with a larger application base can configure accordingly .",2
cfe_es_system_log_size default value is too small the default value for the cfe_es_system_log_size is set to 2 k ( <number> ) . this is not large enough to hold all the cfe startup system log entries . it is recommended to increase this 1 k larger ( default <number> ),0
"integrate cfe_time with <allcaps> osal </allcaps> timebase <allcaps> api </allcaps> the enhancement that adds "" timebase "" functions to <allcaps> osal </allcaps> was approved and merged in [ cfs_osal : <number> ] . with this feature , cfe_time can now set up its own 1 hz callback function . this is the final / complete solution to the race condition issue described in [ cfs_psp : <number> ] , because <allcaps> cfe time </allcaps> can request the 1 hz callbacks after the rest of initialization is fully complete ( and not before that time ) .",2
"fix build failures on <allcaps> rtems </allcaps> there are two issues that cause a build failure when using a recent <allcaps> rtems </allcaps> toolchain / library : * { { { msg_dontwait } } } now / / is / / defined by the library headers . this is re - defined in { { { fsw / cfe - core / src / inc / network_includes . h } } } - possibly an older library did not define this ? * { { { putchar ( ) } } } is a defined as a macro , but the { { { fsw / cfe - core / unit - test / osprintf_priv . h } } } file has a function prototype for this which conflicts . this function prototype really should not be here .",0
"cfe <allcaps> time </allcaps> unit tests break when different configuration options are used when using the unmodified sample version of the { { { cfe_platform_cfg . h } } } file , the test cases defined in { { { time_ut . c } } } all pass . but if the user makes any time - related modifications to the platform config file , many of the unit test cases break . in particular , configuring a time server vs . time client or setting src_met = = <allcaps> true </allcaps> , etc . the test cases in "" time_ut . c "" need to include / accommodate other valid configuration options .",0
"remove depenedencies on software_big / little_bit_order any usage of software_big / little_bit_order is an indicator of a problem area as code is ported to additional platforms . code should be written endian - neutral wherever possible . the { { { software_big_bit_order } } } and { { { software_little_bit_order } } } are not reliable , as they assume this value based on the <allcaps> bsp </allcaps> type but that is not always correct . for instance , the pc - linux <allcaps> bsp </allcaps> assumes software_little_bit_order but in fact that <allcaps> bsp </allcaps> is also fully applicable to big - endian platforms running linux as well . some architectures ( <allcaps> mips </allcaps> , <allcaps> arm </allcaps> , etc ) have both big - and little - endian modes of operation which further invalidates this macro . in fact the c standard does not specify any portable way to determine endianness at / / compile time / / , however runtime checks using a union are fairly easy and reasonably portable where it is absolutely necessary to do something different .",2
"<allcaps> cfe </allcaps> is closing filehandles that were not opened the new unit tests are catching errors where <allcaps> cfe </allcaps> is closing filehandles that were never successfully opened . it is actually passing an os error code ( not a filehandle ) into { { { os_close ( ) } } } . the "" real "" <allcaps> osal </allcaps> should notice this and do nothing , but the unit test is strict about this and this does cause ut to fail .",0
"submit cfe <number> . <number> test artifacts , user ' s guide , and documentation submitting : <number> . cfe <number> . <number> test report , log , and data files to the / test - and - ground / test - review - packages / results directory <number> . update test procedures to the / test - and - ground / asist / local / prc directory <number> . updated doxygen user ' s guide files to the / docs / <allcaps> cfe </allcaps> usersguide / doxygen directory <number> . unit test results to the / fsw / cfe - core / unit - test / xxresults directories ( where xx is the name of the cfe service ) <number> . version description document to the / docs directory",2
"<allcaps> cfe es </allcaps> unit test failures caused by startup sync fix the startup sync fix (# <number> ) caused some unit test failures . this is due to the fact that the counters never get incremented as expected , since this is done by the child thread . therefore the verification that the child thread actually started cannot be unit tested . as an interim fix this check will be removed from the main code . this will make unit tests pass in <number> . <number> . ironically , this is making the main code slightly less robust in order to appease unit tests . in the future a unit test "" hook "" function can be implemented for { { { os_taskcreate ( ) } } } that imitates the counter increment so the startup verification can be but back in at that time .",0
"<allcaps> cfe es </allcaps> mempool code uses "" uint32 "" where it should be "" cpuaddr "" fix a leftover case of using uint32 where the intent is to store a memory address . this is the start address in the "" pool_t "" structure .",0
"update <allcaps> cfe </allcaps> unit tests after rebase of <allcaps> osal </allcaps> ticket <number> previously , <allcaps> cfe </allcaps> ticket # <number> was implemented which was based on the proposed unit test framework implemented within <allcaps> osal </allcaps> [ cfs_osal : <number> ] . the unit test framework has since been revisited and the related <allcaps> osal </allcaps> ticket has been rebased accordingly . unfortunately , this broke some items that had been done originally within trac # <number> . trac <number> can no longer be rebased since it is merged in "" development "" already , so this ticket will fix the unit test breakage .",0
"failure to test should be <allcaps> fail </allcaps> the bamboo test plan does not currently complain if it is unable to stage and run unit tests on a target , for the simple reason that our test list is currently entirely driven by parsing results returned by the target . if the target vm is offline ( as it was last weekend ) , there are no indications that the test programs did not run , and the presence of a few test results ( the ones from static analysis ) keeps bamboo happy . the plan itself , or its top level scripts ( same thing ) , needs to keep track of the list of test programs , and generate test failure reports for any such program for which it does not obtain results .",0
"sb only increments message sequence count where there are subscribers in the current implementation of the software bus , sequence counter management is handled in the routing table . the routing table only includes entries that have subscribed messages . this results in the sequence counter being incremented only if there are subscribers to a message . if a message is unsubscribed to and then resubscribed , the sequence counter will be reset to zero . a message sequence count should reflect the production of the message vs . the receipt of a message . one use case for this implementation is to support the filtering of a message via the sequence count . <allcaps> apl </allcaps> / <allcaps> spp </allcaps> project implemented a solution to increment the sequence count upon production of the message regardless of whether or not there are any subscribers . the solution involved removing the sequence count table from the routing table . this exact solution may not support the new / expanded <allcaps> apid </allcaps> / message id name space . expanding the message id name space will need to be considered when implementing the overall solution to increment the sequence count to reflect message production .",0
"sb pipes are not protected . it is possible for a task to fetch messages from an sb pipe that was created by some other task , and this can happen easily if someone fetches using <allcaps> zero </allcaps> as the pipe id . this prevents the consumed message from arriving at its intended destination . note that applications fetching from the wrong message id might notice this issue if they are reporting the receipt of messages with unexpected message id numbers . solving this may require some attention to use cases where a pipe is created by one task , to be used by another . we may also want to think about the use case where multiple tasks fetch messages from a single pipe , with the *intention* that messages go to one of the several tasks . is this use case sufficiently interesting to offset the complexity of the code required to support it ?",2
"minor fixes for cmake unit test build the <allcaps> cfe </allcaps> unit test build was assuming the use of "" - pg - - coverage "" options for gcc . most targets do support this for coverage analysis however some do not ( <allcaps> rtems </allcaps> , for example ) as the runtime component of this feature may not be present in the target ' s c library . therefore the ut build currently fails for these targets . also , the <allcaps> osal </allcaps> build scripts have a feature to allow installation of the unit test executables to the target binary directory . this is based on the value of a cmake variable called "" install_target_list "" , but the current build scripts are not setting this variable . this ticket will * generate an appropriate value for install_target_list * use the ut_c_flags as computed by the <allcaps> osal </allcaps> build * add an "" install "" line for the <allcaps> cfe </allcaps> unit tests as well these are all fairly minor changes and only affect unit test .",0
"some symbols not making it into final core executable file in the current "" cmake "" - based build scripts , the final cfe core executable file is missing symbols that are not directly referenced in other parts of <allcaps> cfe </allcaps> . a notable example of this is { { { cfe_tbl_register } } } . because these are defined in a shared library , the linker is simply not including them as they do not serve to define any unresolved symbols from the linker ' s point of view . the { { { - rdynamic } } } option is already being used , but it does not apply since the <allcaps> cfe </allcaps> core code is in a static library . there are several approaches to this problem : <number> . use the { { { <allcaps> module </allcaps> } } } library type instead of making a static library for the <allcaps> cfe </allcaps> core . this way the { { { - rdynamic } } } export option will be applied to all the cfe code as it should be and therefore all functions included in the final link . <section> but it requires cmake v2 . <number> + ( released <number> ) . however <allcaps> rhel </allcaps> still includes a very old version of cmake from <number> with their distribution so going this route forces users of <allcaps> rhel </allcaps> to go to other sources for a newer cmake . <number> . use the { { { - - whole - archive } } } linker option to force the linker to include all objects from the <allcaps> cfe </allcaps> core , <allcaps> psp </allcaps> , and <allcaps> osal </allcaps> libraries during the link . this works , but the { { { - - whole - archive } } } is specific to the <allcaps> gnu </allcaps> ld linker and is unlikely to be supported on any other linkers . however , it appears that all targets supported by <allcaps> cfe </allcaps> use the <allcaps> gnu </allcaps> ld linker so this may not be a problem . <number> . create a "" fake "" function that calls all external functions , which causes them to be undefined and therefore included in the link . this does not change linker options or build scripts so should work with <allcaps> any </allcaps> linker and the old version of cmake , but it wastes some memory as this function is still loaded into memory , and it will require maintenance to keep it up to date .",0
"suspicious implementation of short_format mode in evs_sendpacket ( ) this code sequence occurs within the { { { evs_sendpacket ( ) } } } function : { { { /* ( <allcaps> lsw </allcaps> ) is the intent to write the event text to the log but not the sb msg ? <repeated> */ if ( cfe_evs_globaldata . evs_tlmpkt . payload . messageformatmode = = cfe_evs_short_format ) { /* send an empty message if short format is enabled */ evs_pktptr - > payload . message [ <number> ] = ' \ <number> ' ; /* ( <allcaps> lsw </allcaps> ) this is pointless - - why bother to send a buffer with an empty string ? <repeated> */ } } } } it appears that someone ( <allcaps> lsw </allcaps> ? ) already noticed the strangeness here some time prior to the <number> . <number> release . the intent here may have been to send only the event id and omit the actual string , since most event id ' s have fixed strings with them . however , the length of the actual packet ( in the <allcaps> ccsds </allcaps> header ) is never adjusted , so although the first character of the message payload is overwritten with a <allcaps> nul </allcaps> , <section> so there is absolutely no benefit to doing this in the current form .",0
"<allcaps> evs </allcaps> "" output ports "" should be a function of the <allcaps> psp </allcaps> currently the <allcaps> evs </allcaps> has <number> "" output ports "" implemented as functions within <allcaps> evs </allcaps> : { { { evs_outputport1 ( ) , evs_outputport2 ( ) , evs_outputport3 ( ) , evs_outputport4 ( ) } } } these are all <section> to { { { os_printf ( ) } } } the premise here seems logical - - to have several different destinations that the message may be sent . but the current implementation does not allow for that to really happen . the proposal is to change this to a <allcaps> psp </allcaps> implementation : { { { cfe_psp_sendeventtoport ( uint32 portnum , const char * message ) ;}}} this single <allcaps> api </allcaps> could be used for all ports , and the <allcaps> psp </allcaps> could switch based on the "" portnum "" value if needed , or simply call { { { os_printf } } } for all messages as it does in the current code .",2
"clean up <allcaps> evs </allcaps> ports implementation fix a few minor issues with <allcaps> evs </allcaps> ports implementation : <number> . although a macro is used when checking bits of the "" outputport "" mask , the value is still effectively hard coded with the shift , so the macro cannot change without also breaking these checks ( violates the spirit of using the macro to begin with ) . a simplification of the conditional will allow them to change independently ( just mask and non - zero ) : <url> <url> <url> <number> . when sending to multiple ports , the ( essentially ) same snprintf ( ) is done for each one and only one digit in the string changes . would be way more efficient to construct the later half of the string once , and change the port number . the first issue should be resolved prior to integration with <allcaps> eds </allcaps> as those macros become part of the <allcaps> eds </allcaps> . therefore they should be changeable without breaking the implementation that uses them . the second issue is just a performance / size enhancement .",2
"cfe_sb_getmsgtime ( ) and cfe_sb_setmsgtime ( ) do not handle byte - swapping on _el platforms assuming <allcaps> ccsds </allcaps> telemetry packet secondary header timestamps should be big - endian format , on little endian platforms ( when _el is defined ) , cfe_sb_setmsgtime and cfe_sb_getmsgtime should swap bytes for proper time interpretation .",0
"fix startup file pathnames in cmake version of the sample configurations the cmake install currently does not create an extra / apps / subdirectory to install the files . this makes it incompatible with the current platform config file that specifies the startup file to be : { { { / cf / apps / cfe_es_startup . scr } } } with the current installation script it should simply be : { { { / cf / cfe_es_startup . scr } } } this change only affects the sample configurations , nothing in the runtime code .",0
"unit test stub function ut_getactualcmdcodefield not restored with <allcaps> ccsds </allcaps> secondary header ( <allcaps> gsfc dcr </allcaps> <number> ) a change was made to the format of the cfe <allcaps> ccsds </allcaps> command secondary header to enforce the header to be in big endian in cfe <number> . <number> . the cfe unit test stub function ut_getactualcmdcodefield was updated accordingly . the change to the cfe <allcaps> ccsds </allcaps> command secondary header was restored to the original definition of the header in cfe <number> . <number> . the cfe unit test stub function ut_getactualcmdcodefield however , was not restored . the original code for this function is attached .",0
"exiting an application creates an application with an unknown state ( <allcaps> gsfc dcr </allcaps> <number> ) es will continually send out event message # <number> - "" es_proccontrolreq : unknown state ( % d ) application %s "" , with the unknown state set to <number> , when an application exits via the cfe_es_exitapp <allcaps> api </allcaps> function call . see attached email thread for more details .",0
fix es unit test failures the current es unit test has a number of failures that need to be addressed . file attached showing current unit test report file with <number> failures .,0
"clean up massive number of warnings in sb_ut . c the { { { sb_ut . c } } } file generates hundreds of warnings in the build , mostly about incompatible types within printf - style calls . this prevents building with - werror , and also makes it really difficult to work with the file in general since eclipse marks nearly every line as a warning .",0
"many command processors in <allcaps> cfe </allcaps> do not confirm null - termination of strings within the message across all <allcaps> cfe </allcaps> / <allcaps> cfs </allcaps> applications , many message definitions contain strings as "" char [ ] "" arrays . however , very few <allcaps> cfe </allcaps> command processors confirm that these strings are actually null terminated within the allotted length before passing them to other <allcaps> cfe </allcaps> functions and / or c library functions such as "" strcmp "" , "" strlen "" , etc . the <allcaps> cfe </allcaps> architecture needs to clearly define the rules here and also be consistent when following them .",0
"pre - cmake fallback build script needs updating . provision was made in the build system for building with either the classical build tree ( tools / gsfc_build ) or the modern cmake based system . mainly this was put in place back when cmake was coming on line , and has not been used or maintained since the cmake support became part of the baseline "" development "" tree . this facility was recently activated by the <allcaps> hotfix </allcaps> <number> . <number> integration candidate , and could use some attention . we should also consider activating the bamboo job that applies the pre - cmake build script to post - cmake branches , if we want to make sure that the classical build keeps working in parallel with the cmake build . or not , if we want to be more aggressive about pushing people forward into the brave new world of better build systems . <repeated> yeah , a <allcaps> ccb </allcaps> decision .",0
"file operations in cfe_es_shelloutputcommand ( ) need cleanup this function can be simplified and also made more robust . * does unnecessary copying of the input parameters . * does <allcaps> not </allcaps> always ensure proper null termination of the inputs . ( copying strings could be justified if it was to ensure null termination of the inputs ) . the "" cfe_es_shellcmd "" function that is calling this should ensure null termination but it does not . * matching of the "" es "" special commands needs improvement - it will not run any os command that happens to start with "" es_ "" , and it will also not handle it correctly if one happens to be a substring of another but not a complete match . * it does not check the return codes from either "" os_read "" or "" os_write "" calls and assumes they all work perfectly - the correct operation of this function , in fact , does depend on them all working perfectly . in the worst - case scenario , a benign failure of an os_write ( ) call could have a cascade effect causing a later os_read ( ) call to block indefinitely . * the return value of os_lseek ( ) is not properly checked . it also relies on having an os implementation of lseek that can accurately "" measure "" the size of the file . not all filesystems / file types are seekable in this nature . * it will not work with any "" special "" file or file system that does not support seeking or read / write file handles ( such as a pipe ) . * it unnecessarily extends the file on disk to add up to <number> extra spaces , which is only to coax the message generator loop into producing an extra message . * overall , the loop that is generating the telemetry messages can be simplified quite a bit . * the fixed 2 0 0 ms delay between messages should at least be configurable , but there is still no way to tell if buffer overflow is occurring * there is no sequence number , and way to tell at the receiving side of one intermediate component message was lost . ( possibly outside the scope of this , and no way to really fix this without changing the binary format of the messages ) .",0
"cfe_time fails to build with cfe_time_cfg_src_met set to <allcaps> true </allcaps> this issue was introduced by # <number> - some structure accesses hiding behind this conditional compile needs to have "" . payload "" added to them . as a separate enhancement , the bamboo tests should be updated to build using this configuration , along with the many other <allcaps> time </allcaps> options available .",0
"buffer overrun in stub implementation of cfe_time_print for unit testing an alternate "" stub "" implementation of cfe_time_print exists in unit - tests / ut_time_stubs . c the cfe_time_print ( ) function outputs the passed - in time value to a small fixed - size buffer . the ut stub version of this function uses the wrong size for its call to snprintf and is way too wordy in its output , easily overrunning the real size of the buffer . this is one thing causing unit tests to crash in <number> . <number>",0
"extend cmake app search path when apps are listed in the targets . cmake file , the cmake scripts already implements a dynamic search path to find matching entities in the source tree . right now the users typically add their own apps to the "" apps "" directory which become intermixed with the official <allcaps> cfs </allcaps> applications . while this is ok , this does present a challenge to a git novice - - if they cloned the babelfish repositories directly , then a simple ( default ) { { { git push } } } command may inadventently send all their private apps up to babelfish . ideally , the mission should at least create their own branch , or better yet , create their own vc repository and not / / directly / / use babelfish git clones ( such as the "" subtree "" method documented in the wiki ) , but this is unfortunately not the path of least resistance . by adding some extra names into the default app search path , the project - specific apps can be placed outside the official "" apps "" tree . this way , the apps repository remains "" pristine "" and unmodified , and an errant { { { git push } } } will do no harm .",2
"cmake support for elf2cfetbl usage the current cmake support structure does not include support for the old style <allcaps> cfe </allcaps> tables - - that is , where the table is embodied in a source file within the application , which is compiled with the application headers ( as well as headers from <allcaps> cfe </allcaps> , <allcaps> osal </allcaps> , and so on ) , and which is then converted from the <allcaps> elf </allcaps> object file format into a <allcaps> tbl </allcaps> file . asking each project that wants to convert to cmake to independently work out how to get the files compiled then converted is asking for a significant duplication of effort - - as this turns out to be something more than a couple easy lines of make scripting . it is more reasonable for us to work it out once , and provide a solution that projects can use ( or adapt ) as desired .",2
"<allcaps> cfe time </allcaps> fails to build when cfe_time_cfg_signal set to <allcaps> true </allcaps> the cfe_time_cfg_signal configuration macro will add calls to a function { { { os_selecttone ( ) } } } if it is set to <allcaps> true </allcaps> . however , os_selecttone is neither prototyped nor implemented in any released version of <allcaps> cfe </allcaps> or <allcaps> osal </allcaps> , as far as i can tell . it does not seem to be documented anywhere what this is supposed to do . it is currently not possible to build <allcaps> cfe </allcaps> with this configuration set to <allcaps> true </allcaps> due to this problem . calling this a minor defect for now , as it only appears when using this configuration option .",0
application startup race conditions ( <allcaps> gsfc dcr </allcaps> <number> ) applications will fail to start when they are started via the es start application command ( cfe_es_start_app_cc ) and the es application has a lower priority than the application being started by the command . this issue will also occur if the os startup code is a lower priority than the applications that are being started in the startup script .,0
"cfe_es_processcoreexception ( ) is not interrupt - safe the cfe_es_processcoreexception ( ) architecture needs to be re - examined . this is the equivalent of an interrupt handler and likely triggered as the result of a hardware interrupt . however the implementation calls other cfe_es functions , some of which take the global data mutex ( cfe_es_lockshareddata ) , do console output ( cfe_es_writetosyslog and other functions which ultimately do printf ) , or call os_taskdelay . all of these operations are unsafe to do in an interrupt context on most platforms . this may not be an issue if the end - result of the exception is a processor reset , which is probably the only safe thing to do . although the option to restart the task does exist , the system may be too far gone after this .",0
"<allcaps> smp </allcaps> : cfe_es_writetosyslog ( ) is not multi - thread safe the cfe_es_writetosyslog ( ) function is called from many places across <allcaps> cfe </allcaps> and many different threads ( upwards of ~ <number> references to this function throughout <allcaps> cfe </allcaps> and <allcaps> cfs </allcaps> ) . internally this uses the shared "" reset area "" pointed to by cfe_es_resetdataptr and makes multiple references to the "" systemlogindex "" and "" systemlogentrynum "" in the reset area . however , the read / modify / update sequence of these members is not protected by any sort of mutex .",0
"<allcaps> smp </allcaps> : <allcaps> cfe time </allcaps> uses <allcaps> osal </allcaps> intlock / intunlock for mutual exclusion interrupt locking simply prevents incoming interrupts ; is not a mutual exclusion mechanism and will __not__ achieve "" exclusive access "" on all types of processors . mutual exclusion is more of a side - effect that occurs on a single - core processor that uses a timer interrupt to perform task switching duties . on a multi - core processor , this will not work . furthermore , in the <allcaps> posix osal </allcaps> , intlock / unlock are no - ops , and interrupt control is a kernel - level function and not something that user space tasks can do ( even as root ) . this should be replaced with a mutex , as this is what the code is really trying to do .",0
"race conditions / dependencies between <allcaps> cfe </allcaps> core apps the "" core "" applications have significant dependencies between them that need to be more pro - actively satisfied . there are some race conditions during the startup phase that can pose some serious problems if things are not executed in the right order . the summary of what happened is below , but here is a list of the basic problems : * start up code should synchronize at least the "" core "" applications and ensure that each one has reached it ' s respective "" runloop "" before starting the next one , regardless of what the platform config sets the priority to ( likely depends on # <number> ) . * evs_isfiltered should range check before doing the table lookups based on passed - in values * <allcaps> cfe sb </allcaps> and <allcaps> evs </allcaps> ( at least ) populate different values into their own "" appid "" global variable before initialization . sb does nothing ( <number> by default , which is in fact a valid appid for a different app ) but <allcaps> evs </allcaps> initializes this to 0 xfffffffff , which has very ill - effects if actually used for something , and nothing really checks for this . for those interested , here are the details of the specific sequence of events discovered when debugging application startup on the microblaze processor used by the <allcaps> eva </allcaps> team at <allcaps> grc </allcaps> : <number> . as dictated by the table within "" cfe_es_objtab . c "" , the <allcaps> cfe </allcaps> core applications are started ( tasks created ) in the order of <allcaps> evs </allcaps> , sb , es , <allcaps> time </allcaps> , bl . <number> . in the default / example platform configuration , these have respective priorities of <number> ( <allcaps> evs </allcaps> ) , <number> ( sb ) , <number> ( es ) , <number> ( <allcaps> time </allcaps> ) , and <number> ( <allcaps> tbl </allcaps> ) . <number> . <allcaps> time </allcaps> task will run it ' s taskmain first even though it is 4 th in the start sequence . <number> . as part of this init sequence , it calls cfe_sb_createpipe ( ) which in turn calls cfe_evs_sendeventwithappid ( ) in several places ( for errors as well as an unconditional "" debug event "" at the end ) . the appid supplied is "" cfe_sb . appid "" which is uninitialized since sb has not executed yet . in this case the value used is actually <number> . <number> . in turn this eventually calls evs_notregistered ( ) ( since cfe_evs_taskinit has not run ) and then evs_sendevent ( ) as part of that . <number> . evs_sendevent ( ) calls evs_isfiltered ( ) with the contents of cfe_evs_globaldata . evs_appid , which is also uninitialized but set to "" 0 xffffffff "" , not zero like cfe_sb . appid . <number> . this appid value is not range - checked by evs_isfiltered and ultimately segfaults and crashes <allcaps> cfe </allcaps> core .",0
"race condition within cfe_es_appcreate when starting an application , <allcaps> cfe es </allcaps> calls "" cfe_es_unlockshareddata ( ) "" before os_taskcreate ( ) , then calls cfe_es_lockshareddata ( ) again to perform several more updates to the global table after the task id is obtained . this unlock - relock opens up an opportunity for the child thread to read the shared table data before it is fully populated . this can cause many problems . one specific one is that cfe_es_getappid ( ) ( which many tasks call very early in their init procedures ) will fail , which can have a serious snowball effect . note that the initial core app creation ( cfe_es_createobjects ) and child tasks ( cfe_es_createchildtask ) keeps the global lock for the entire procedure , so these are safe .",0
"<allcaps> cfe es </allcaps> "" startupsyncsemaphore "" subject to multiple race conditions the "" startup sync "" mechanisms are based on a binary semaphore , a boolean flag , and a counter . the handling of these various separate entities leaves several opportunities for race conditions to occur . at a minimum , this could cause "" waitforstarupsync "" to pend incorrectly , but could have other more serious side effects ( unknown ) depending on how the apps are using this . this is one problem that the <allcaps> eva </allcaps> team at <allcaps> grc </allcaps> are experiencing while deploying <allcaps> cfs </allcaps> on the xilinx microblaze platform .",0
enforce strict <allcaps> ascii </allcaps> replace all non - <allcaps> ascii </allcaps> characters ( i . e . copyright symbol ) with <allcaps> ascii </allcaps> equivalent .,0
update cfe_fs_initheader to to handle error / invalid length conditions the cfe_fs_initheader <allcaps> api </allcaps> function should perform checks on the header information being passed into the function and return an appropriate error code . see ticket # <number> for additional details . cfe services that make calls to this <allcaps> api </allcaps> should be updated to handle the error code .,2
"ut_sb_stubs broken by packet layout change the structure defining the message layout changed , placing the message content in a separate structure , requiring current code that was "" pointer - > field "" to be adjustd to read "" pointer - > packet . field "" this change must be applied to code in <code> that is only compiled when <code> is defined . the automatic test system used to check out <allcaps> cfe </allcaps> builds defines <code> in order to collect supporting evidence useful for debugging any failures or errors encountered during testing .",0
"update cfe unit tests the version of the unit tests currently included with cfe <number> . <number> were developed and tested against cfe <number> . <number> . due to cfe changes , all of the tests no longer pass . also , the tests have only been tested with the linux <allcaps> osal </allcaps> / pc - linux <allcaps> psp </allcaps> and arinc653 <allcaps> osal </allcaps> / orionscp <allcaps> psp </allcaps> . <allcaps> jsc </allcaps> has updated the tests to work fully with cfe <number> . <number> . <allcaps> jsc </allcaps> is also updating the tests to build and run on vxworks <number> ( on the <allcaps> sparc </allcaps> leon3 processor ) . these updates are being tracked in the <allcaps> jsc </allcaps> subversion repo and need to be pushed into a proper git branch and further work continued from there .",0
"fix "" no return "" warning on cfe_sb_readqueue ( ) function this is not a "" real "" warning , but it is flagged by static code analysis in eclipse that the cfe_sb_readqueue ( ) function has no return statement . although there is no real code path that will / / not / / get to a return statement , static code analysis does not see that . a trivial fix to consolidate the scattered return ' s into a single return at the end will get rid of this warning and make the code more readable .",0
"unit test stubs need to be kept in sync with their respective real implementations the "" unit - test "" code implements stub functions for all function calls which are / / not / / under test . in addition to stubs for the <number> core <allcaps> cfe </allcaps> functions , there are two other stub files : * ut_bsp_stubs . c * ut_osapi_stubs . c the difficulty here is that both the <allcaps> api </allcaps> / prototype of all the functions as well as the real implementation of those functions come from an external source , specifically the <allcaps> psp </allcaps> library and the <allcaps> osal </allcaps> library . if either the <allcaps> osal </allcaps> or <allcaps> psp </allcaps> changes , the corresponding change must be made to the <allcaps> cfe </allcaps> stub files to keep them in sync . futhermore , if another project tries to use the updated stub files with an older version of <allcaps> osal </allcaps> , the build will now break due to the mismatched definitions . it would be nice to simply make a rule that a defined <allcaps> api </allcaps> is never going to change , but that is not practical . __solution 1 __ utilize a preprocessor macro to "" tune "" the function definitions in the stub files to match what the <allcaps> osal </allcaps> / <allcaps> psp </allcaps> should be for that particular version advantages : can be implemented right away without any synchronized change to <allcaps> osal </allcaps> / <allcaps> psp </allcaps> libs . disadvantages : does not scale . code can get pretty messy with lots of <hashtag> if def </hashtag> ' s if it changes more than once . still requires <allcaps> cfe </allcaps> to "" know "" the <allcaps> osal </allcaps> / <allcaps> psp </allcaps> prototypes so breaks the independence of the two libraries . __solution 2 __ move the stub implementation to the same component that provides the real implementation . for this , the ut_bsp_stubs . c file would be relocated to the <allcaps> psp </allcaps> library and the ut_osapi_stubs . c file would be relocated to the <allcaps> osal </allcaps> library . the <allcaps> psp </allcaps> and <allcaps> osal </allcaps> builds would provide a separate ut stub product ( a library ) that the <allcaps> cfe </allcaps> unit test could link with . advantages : arguably a more logical place for the stub code . reduces need for synchronized changes in the future , better forward / backward compatibility between versions . also , other ( non - <allcaps> cfe </allcaps> ) users of <allcaps> osal </allcaps> library could also use stub functions . disadvantages : requires a synchronized change to get started ( solution <number> could help here ) . also would only work using cmake makefiles , although the <allcaps> gnu </allcaps> makefiles could probably be updated accordingly as well .",0
fix duplicate structure definitions in table unit test similar to trac # <number> for the mempool structures - - the dispatch table structure definitions are duplicated in the cfe_tbl_task . c and tbl_ut . h . the tests will break if these diverge . a more suitable place for these would be in cfe_tbl_task_cmds . h so the same definitions can be included in both places without duplication .,0
"ensure that return codes from <allcaps> psp </allcaps> functions are checked in some circumstances the return code from <allcaps> psp </allcaps> functions ( e . g . cfe_psp_getresetarea ) is either not checked or incorrectly checked . wherever the return code is checked , instead of specifically checking for an error code like so : { { { if ( status = = cfe_psp_error ) { < handle error > } } } } the code should check for non - success instead : { { { if ( status ! = cfe_psp_success ) { < handle error > } } } } this will make it more future - proof to <allcaps> psp </allcaps> implementations that might return more specific errors .",2
"pointer arguments to functions that are input only should be declared "" const "" marking the pointer parameter as "" const "" , particularly for string arguments , allows them to be called using string literals or other data that is already constant . this may make a substantial difference on some targets where the executable can actually be linked to put the read - only data section in <allcaps> rom </allcaps> rather than <allcaps> ram </allcaps> . however , in order to do this properly / safely the code must treat this as read - only data . by declaring it "" const "" the compiler will flag any writes to it . changing the prototypes should not affect current usage .",2
clean up unused local variables compiling with - wall complains about unused local variables in some functions . this will cause the build to fail if - werror is also used . this change is a prerequisite to turning on strict compiler settings in the default build .,0
"fix type mismatches and remove unnecessary typecasting this ticket is to fix up areas of the code that have type mismatches or other unnecessary typecasting . * in some areas , the standard "" int "" type is used when it should be the <allcaps> osal </allcaps> int32 / uint32 type . * in other areas , values are cast to certain types when it is not necessary to do so because the compiler will automatically do the right thing . in the latter case , the type cast should be removed , because in certain situations it can actually interfere with the compiler doing the right thing and make it do the / / wrong / / thing instead . an example of this is casting to "" int "" with operands that are actually unsigned types and / or different widths . in the case that the forced "" int "" is a negative value , a sign extension might be performed and this might produce an unexpected result . in general , a cast should only be used when there is a good reason why the compiler ' s default conversion rules are not sufficient .",0
"consolidate <allcaps> cds </allcaps> and generic / ram mempool code into single implementation currently there are two memory pool implementations in es : * cfe_es_cds_mempool . c * cfe_esmempool . c these two are very similar except that the <allcaps> cds </allcaps> uses offsets rather than direct pointers , and it calls into the <allcaps> psp </allcaps> to perform actual read / write functions . it would not be very hard to consolidate these into a single implementation . each implementation consumes about <number> - 5 kb of code / data space so this consolidation would make es a little smaller in addition to making it cleaner .",2
"fix duplicate mempool structure definitions in unit test code the unit test code uses its own ( re - ) definitions of the memory pool management structures . specifically , these structure definitions are duplicated : * cfe_es_cdsblockdesc_t * cfe_es_cdsblocksizedesc_t * cfe_es_cdspool_t * bd _t * blocksizedesc_t * pool_t these should not be redefined here . if these ever diverge from the definitions that <allcaps> cfe es </allcaps> uses , the tests will break . the definitions should be moved to a header file and <hashtag> include </hashtag> ' ed in both places to ensure that the same definitions are always used .",0
"code in <allcaps> cfe time </allcaps> fails to compile with strict compiler settings when strict compiler flags are used , there are several instances of unused variables in <allcaps> cfe time </allcaps> . these are related to the configuration options ( e . g . cfe_time_cfg_default_tai ) where under some configurations a variable is declared and / or set but not actually used . the preprocessor macros need to be adjusted such that the variable is not declared unless it is used .",0
"error constants defined in "" cfe_error . h "" incorrectly use the "" l "" suffix the "" l "" suffix on an integer literal tells the compiler that it is supposed to be interpreted as a "" long "" type . however , <allcaps> cfe </allcaps> error constants are supposed to be <number> - bit signed integers , which may or may not be the same thing as the system native "" long "" type . to be correct , the constants should be defined to be the same as the "" int32 "" <allcaps> osal </allcaps> type and the "" l "" suffix should be removed . this causes problems on a <number> - bit machine where the "" long "" type is <number> bits .",0
"data pointer argument to cfe_es_calculatecrc ( ) should be const since cfe_es_calculatecrc ( ) does not modify the data passed into it , the pointer should be declared "" const "" in the prototype . this will not affect any existing usage of the function , but it will allow usage in areas where the data is already "" const "" .",0
"stack pointer parameter to cfe_es_createchildtask should not be marked "" const "" by definition , a task ' s stack memory must be writeable . the stack pointer parameter to cfe_es_createchildtask ( ) is qualified as "" const "" . although this matches <allcaps> osal </allcaps> ' s task <allcaps> api </allcaps> , <allcaps> osal </allcaps> is wrong too and should be fixed . see : [ <url> this ticket should be merged into <allcaps> cfe </allcaps> <section> the <allcaps> osal </allcaps> ticket is fixed . this change will not affect compatibility with prior versions of <allcaps> osal </allcaps> because it is ok to pass a non - const pointer for a const parameter ( but vice - versa is an error ) .",0
"fix inclusion of <allcaps> psp </allcaps> private header files in <allcaps> cfe </allcaps> layer certain files are directly <hashtag> include </hashtag> ' ed from the <allcaps> psp </allcaps> library in the <allcaps> cfe </allcaps> code . only the "" public "" <allcaps> psp api </allcaps> defined in "" psp / fsw / inc "" should be directly used by application code . other files such as those under an architecture - specific <allcaps> psp </allcaps> ( e . g . psp / fsw / pc - linux / inc ) should be treated as private data to that particular <allcaps> psp </allcaps> and <allcaps> not </allcaps> be used or called directly from the application . if some value is necessary then a public <allcaps> api </allcaps> should be defined to retrieve it , rather than <hashtag> including </hashtag> it directly . fixing this up will make the build cleaner and more efficient . it will also ensure that application code is portable to __all__ <allcaps> psp </allcaps> ' s because it does not depend on some value that only one particular <allcaps> psp </allcaps> provides . note there is a corresponding ticket in the <allcaps> psp </allcaps> to stop using <allcaps> cfe </allcaps> headers as well : [ <url> when both of these tickets are merged in the incremental build process becomes much cleaner and faster .",0
"modify code that reads or writes memory addresses in external messages to use wapper in the current version , some external interface ( command / telemetry ) messages contain direct <allcaps> cpu </allcaps> memory addresses . this can be very bad for several reasons : * memory addresses can be a different size on different cpus * since memory addresses are likely to change from run to run ( even in the same build ) it makes it difficult to script tests * the receiver has no way to validate it ( other than <allcaps> null </allcaps> ) . * if the address value ever gets corrupted or an invalid value is used , the consequence is usually dire ( a crash ) . ultimately the use of direct memory addresses in messages should be avoided . as a first step to this , this ticket will modify those locations that a memory address is read or written from an external message to use a wrapper function . this ticket will not change any functionality in itself , but it will provide a path going forward such that the wrapper function can be modified to convert the address to / from a safe , verifiable , architecture independent value rather than using the address directly .",2
"remove cfe_es_devsrvr code cfe_es_devsrvr . c and . h appear to be stale / obsolete and not being called or referenced by anything else in cfe . furthermore , it should be deprecated anyway since device - support code logically fits better within the <allcaps> psp </allcaps> . at the cfe layer it should be all hardware - independent code . if this is correct , these two files should be removed from the build .",0
"<allcaps> smp </allcaps> : cfe_time_getreference ( ) has insufficient protection against update while reading in the current implementation , cfe_time_getreference ( ) uses a lockless version counter that is checked before and after reading the reference time to determine if the time got updated while it is being read . however , this protection is insufficient for some systems : * the global needs to be marked "" volatile "" for this to have any effect . if compiled with optimizations , the optimizer is likely to remove the "" redundant "" read of the global value therefore defeating the purpose of the loop altogether . * it does not protect against the reader interrupting the writer and receiving a "" half - updated "" value . running the updater at higher priority does not work on multi - core cpus since the two threads can be concurrently running .",0
"cfe_time_gettime ( ) should not return a structure in general it is not a good idea to return a structure from a function because compilers do not all perform this the same way . some compilers / abis are reasonably efficient at this ( as gcc seems to be ) , but others are not so efficient and will do extra copies of the structure .",2
"display extended version information from the build the <allcaps> cfe </allcaps> build currently contains a <number> - part version number , i . e . "" <number> . <number> "" . this version number is is <hashtag> define </hashtag> ' d in a header file and is manually updated with each official release . however , git and cmake ( see ticket # <number> ) offer additional build information where the current git commitid and most recent tag name are built into a global object that is accessible at runtime . when it is available , this extended build information should be displayed along with the manually updated official version number . the major benefit here is that it updates automatically with __every__ commit , not just official releases . it also indicates the whether the source code tree has been modified from the pristine version in the commit ( "" dirty "" ) or not . it is extremely useful to have this information built into the executable in order to verify the correct binary is loaded as well as being able to reproduce running binaries when needed .",2
"external <allcaps> cfe </allcaps> message definitions should not depend on values from cfe_platform_cfg . h or osconfig . h some structure definitions that define specific ground commands and telemetry messages use array sizes for strings that are either defined in osconfig . h ( e . g . os_max_path_len ) or cfe_platform_cfg . h ( e . g . cfe_es_max_applications ) . however , by definition , these header files contain parameters that are tunable to the specific <allcaps> cpu </allcaps> . for instance , a resource - constrained <allcaps> cpu </allcaps> may need to reduce cfe_es_max_applications to a small number to save memory . it is therefore problematic to use these values to define messages that serve as a data definition across processors , particularly in a multi - board setup . external message definitions must be limited to <section> configuration parameters only , such as cfe_mission_cfg . h , where all cpus as well as the ground system will have the same values .",0
"<allcaps> cfe </allcaps> enumeration names in order to reduce the chance of name space conflicts , enumerated names should follow the general form , with the value prefixed by the group name and the app name : < <allcaps> appname </allcaps> >_< <allcaps> groupname </allcaps> > _ <valueid_1> < <allcaps> appname </allcaps> >_< <allcaps> groupname </allcaps> > _ <valueid_2> . <repeated> < <allcaps> appname </allcaps> >_< <allcaps> groupname </allcaps> > _ <valueid_n> this ensures that even if two enums use the same value name ( s ) they will not conflict with each other . most <hashtag> define </hashtag> ' d values already follow this general form , but there are some exceptions . these should be fixed to be consistent .",0
<allcaps> cfe es </allcaps> makes assumptions about <allcaps> osal </allcaps> opaque objects <allcaps> osal </allcaps> returns object identifiers which are defined as uint32 values . in the current implementation of <allcaps> osal </allcaps> they happen to be zero - based but this should not be a requirement ; in fact there are several advantages to making these identifiers non - zero - based . the primary offender is the es core application using the task id from <allcaps> osal </allcaps> directly as an array index . to ensure compatibility the <allcaps> osal </allcaps> object ids should be treated as opaque integers of undefined range .,0
"add "" const "" to function prototypes where appropriate in particular , this should be done at least for functions that accept char * strings but do not modify them . if a string literal ( by definition a const char <wink> is passed into function argument that is declared a non - const char * , a compiler warning may be generated and the build will fail if compiled with strict settings . this ticket will add "" const "" to function parameters where appropriate .",0
"clean up "" extern "" declarations at the top of c files in the <allcaps> cfe </allcaps> core apps , many files reference functions and data structures defined in other files . however , the function prototypes or "" extern "" declarations are not in common header files , but simply put at the top of the c file that uses it . while this does build , it defeats the type checking done by the compiler . it is far from ideal because if the real variable type or function prototype ever changes , the linker will still happily link it together even though they might be completely incompatible ( or worse , incompatible in a really subtle way ) . the only reason to <allcaps> not </allcaps> put a declaration in a header file is if it should not be called or referenced by <allcaps> cfs </allcaps> apps , but this can be solved by creating a private <allcaps> cfe </allcaps> core shared header file .",0
"fix use of uint32 to store a memory address in many places a uint32 is used to store a memory address which breaks horribly on <number> - bit architectures . the new version of <allcaps> osal </allcaps> "" common_types . h "" introduced a "" cpuaddr "" type to address this - - it is defined as an integer type large enough to store a memory address on the local processor . this ticket is to replace all uses of a uint32 to store a memory address with the cpuaddr type for better portability . this is a requirement for a native <number> - bit build to work .",0
implement initheader call in <allcaps> cfe fs </allcaps> all <allcaps> cfe </allcaps> apps that write a file should prefix that file with a header object defined in fs . currently they do so on - the - fly by simply memset ( ) ' ing the structure to zero and setting a key field . this should be cleaned up and moved to an initheader ( ) call in <allcaps> cfe fs </allcaps> such that if fields need to be added to the header in the future this can be done without having to touch many different places where the header is initialized / written .,2
reentrant version of decompress routine in <allcaps> cfe fs </allcaps> the fs application has a feature where it can decompress file content on the fly . however the decompression routine keeps its internal state in global variables which makes it non - reentrant . to protect against concurrent usage a mutex is used but this has a major performance impact . the global variables should be replaced with a state structure so that it can be multithreaded like all other parts of <allcaps> cfs </allcaps> . for the time being a global state object can be implemented in order to preserve <allcaps> api </allcaps> compatibility .,2
"split message definitions from headers all of the cfs messages are currently defined in c structures . as a first step toward moving to "" electronic data sheets "" to describe the external data format , these need to be slightly modified to better separate the header portion of the structure from the payload portion of the structure . currently , message structures are typically defined by reserving a block of space for the header as a uint8 array of size cfe_sb_cmd_hdr_size or cfe_sb_tlm_hdr_size . this approach has several issues : * using a fixed - size block assumes only a single type of encapsulation ( <allcaps> ccsds </allcaps> ) will ever occur . this may not be the case , as other non - <allcaps> ccsds </allcaps> encapsulations may be a requirement for some missions . * the fixed size block is not guaranteed to be properly aligned for a <allcaps> ccsds </allcaps> header . since it is declared as a uint8 array , the compiler will not ensure any alignment this structure . it is technically not valid to cast this as a <allcaps> ccsds </allcaps> header since that contains uint16 ' s . * this is unlikely to be compatible with electronic data sheets ( <allcaps> eds </allcaps> ) no matter what specific implementation is used . since the definition of the message content ( payload ) and the message header ( <allcaps> ccsds </allcaps> or other format ) will come from different data sheets , it becomes very problematic to have them mixed together like this . to solve this problem requires a bit of restructuring : instead of declaring the format of the payload directly within the message structure , declare a separate "" payload "" structure and define it in there . this adds one extra layer to the structure tree but will improve flexibility going forward , and it will <section> change the external data format , so compatibility with ground systems is unaffected . it only affects the syntax of code accessing members of the payload structure .",2
document applications in trac wiki it would be helpful to construct a small wiki page corresponding to each application in cfe giving a quick overview of each . i suggest including hotlinks on each such page back into the doc subtree of the specific app for extended documentation - - as clones will obtain the content of the project sources but do not clone the trac wiki .,0
"compiler errors / warnings on evs_sendevent ( ) calls on some architectures one roadblock to turning on strict compiler settings ( such as - werror ) with full error checking is that <allcaps> many </allcaps> compiler warnings are generated by printf error checking done by gcc . the full error checking is <section> because it verifies that the argument corresponding to each escape code is the right type , e . g . %s has a string , % d has an integer , etc . the problem is that we are using the <allcaps> osal </allcaps> abstractions such as int32 or uint32 . for example , on some systems , printf ' ing an int32 needs a "" % d "" and on other systems it needs a "" % ld "" depending on whether it was typedef ' ed as an int or a long . so fixing an error on one platform by changing the escape code in the format string only generates an error on a different platform . in order to fix this so that it builds without warnings on all platforms , any argument that ultimately gets passed to any c library printf ( ) call needs to be cast to the right fundamental c type , not the abstracted type , at the call to the variadic function . note this is really only an issue for variable argument functions since for normal functions the correct type is known and the compiler automatically casts it when possible . but for variadic c library functions this is not possible so we must explicitly ensure that the argument gets converted to the correct type / / for the c library / / . <allcaps> gcc </allcaps> is nice enough to implement warnings for this when it is mismatched , we should leverage that .",0
"enhanced build system for cfs the alternate build system uses cmake and offers several enhancements : * completely isolated build tree - no mixing of source files and generated files * dynamic application search path , supports "" app - store "" concept by keeping app repos separate from cfs repos . * supports multiple different build configurations from the same source tree * includes mechanisms for electronic data sheets ( data dictionary ) support and lua functional testing support in the future",2
"use appropriate atomic type for inter - thread sync the rv tool analysis reported several cases of reading / writing shared memory variables without a lock . the intention behind the code was that the data type being read / written simultaneously here was atomic in nature , thus the parallel access would be safe , as it is not possible to catch an atomic value mid - update . to be more portable the code should use the c99 type <code> to ensure that the data type is in fact atomic on the given platform . currently it is using <code> which is not guaranteed to be atomic on all platforms . calling this "" minor "" because the <code> type will be atomic on all the platforms that the code in question is actually used on . there is no bug currently here , this is just to prevent a future bug if this code is expanded to smaller cpus ( microcontrollers ) where <code> is not atomic .",0
"clear <allcaps> bss </allcaps> on app restart under normal conditions , when a task is started , the process of loading the task will clear the <allcaps> bss </allcaps> segment ( used to store global - scope variables that are not explicitly initialized ) . however , if a task is "" restarted "" without "" reloading "" it may find that its <allcaps> bss </allcaps> segment still retains the content from the prior run . we discussed this at the <allcaps> ccb </allcaps> meeting on <number> - jan - <number> , and the moderate concensus was that it might be most useful for the <allcaps> bsp </allcaps> to explicitly clear the <allcaps> bss </allcaps> of tasks before they are started . according to my notes , joe was going to take a look at this .",0
"<allcaps> api </allcaps> for querying libraries ( like <allcaps> cfe es </allcaps> queryapp ) <section> unable to verify library image integrity ( cs cannot scrub library code space ) <section> implement <allcaps> api </allcaps> for querying library information , such that an app could scrub <section> none <section> none <section> jacob hageman / <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps> external request from cfs - community email list on <date>",2
timstamp all cfe generated sb messages <section> sb subscription report message is not timestampted : <url> <section> timestamp should be added here and anywhere else it ' s missing for all cfs generated sb messages : <code> <section> none <section> none <section> jacob hageman / <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps> originated from <allcaps> pace </allcaps> / <allcaps> oci </allcaps>,2
"sample makefile should use strict compiler flags and treat warnings as errors <section> the default makefiles / cmake scripts do not enforce any strict compiler warning flags and do not treat warnings as errors . this means issues like # <number> can more easily slip past . <section> building the <code> branch as a "" release "" ( - o3 ) using the default settings / sample config / makefile wrapper by preparing as : <code> then run make and you do get some warnings , at least when using gcc <number> . x and above : <code> however , the build continues and completes the process with no error results . <section> the build should stop , because warnings are problems that need to be resolved . if the build does not stop then it is very easy to not notice these issues . <section> ubuntu <number> ( <number> - bit ) , kernel <number> . <number> - <number> - generic , gcc <number> . <number> <section> joseph hickey , vantage systems , inc .",2
"about the <allcaps> psp </allcaps> mak file hi i am very new for write . mak file . i checked gcc ( <number> . <number> ) manual , found some symbols such as - wall , - m32 , but did not find __ix86__ . could you tell me how can i find this ? which manual should i reference to ? i want to make psp and osal for raspberry or freertos ! thanks sincerely",3
"did you close the forum hi , did you close the forum or did we need an authorization to access ? thanks",3
"could not copy app . so to / cpu1 / exe / cf / apps hi when i delete all app . so in this fold , then i make clean , make config and make again , there are not any app . so in this fold ? is this right ? thanks ! sincerely",3
"could not find the directory . <repeated> / cfe / inc in each app directory , such as sample_app / fsw / for_build / makefile , there is "" - i . <repeated> / cfe / inc "" , but i could find this sub directory in cfe / build / cpu1 / cfe , where i can get sample_app int the directory / cfe / build / cpu1 . thanks ! sincerely",3
<allcaps> posix </allcaps> : your queue depth may be too large update documentation to show posix fix : edit / etc / sysctl . conf and add the lines : <code> # # or edit as root <code> is set to <number> or some value appropriate . <code>,2
"compiling for raspberry pi would like to run on my <allcaps> arm </allcaps> based raspberry pi , the instructions do not seem to detail a means of building for different arch . thanks",3
