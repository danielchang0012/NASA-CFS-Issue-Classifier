text,label
"fix # <number> , refactor <code> to reduce <code> duplication testing performed * * github ci actions all passing successfully ( incl . build + run , unit / coverage tests etc . ) . <section> no change to behavior . <section> avi weiss <user>",2
"fix # <number> , refactor lc_tableinit to remove multiple returns testing performed * * github ci build + run , unit tests all passing successfully . <section> essentially no change to logic . previous early <code> exit points will now fail all the following tests for <code> and fall through to the end of the function , where <code> is returned . <section> avi weiss <user>",2
"buffer overflow in unit tests when using default config the unit test code sets the <code> member with a call to strncpy and a hardcoded size here : <url> however in the default platform config the size is only <number> : <url> <section> build and run using default / out - of - box config . <section> example configuration should not trigger buffer overflow <section> consider using <code> operator here , to adapt the <code> call to the real size of the target buffer . <section> joseph hickey , vantage systems , inc .",0
"lc "" isnan "" check relies on platform - defined behavior ( non - standard ) with floating point watchpoints , the watch point checking code looks for the ieee754 not - a - number ( nan ) value before doing other comparisons . however , the method used for checking this involves accessing the <code> value as a <code> , and checking the bits per ieee754 . this type of action is not standardized by the c language , and results of doing this are platform - defined . <section> n / a ( it does work as intended on most compilers , it is just not standard or portable "" by the book "" ) <section> should only rely on behavior that is specified by <allcaps> iso c </allcaps> . regarding nan , the c standard does guarantee that a nan is never equal to any other value , even itself . therefore , the generally recommended , portable way to check for nan is by checking that , e . g . : <code> <section> code at issue is here : <url> <section> code inspection when doing <allcaps> eds </allcaps> implementation <section> joseph hickey , vantage systems , inc .",0
remove remaining stray references to old event types expected behavior * * update to new event type constants or remove these commented - out tests . <section> <url> <url> <section> avi weiss <user>,2
"items instantiated in header causes duplicate definitions and link errors the unit test header file <code> instantiates objects directly in the header file , which breaks if it is ever included in more than one c file . <section> build lc with unit tests enabled , get lots of linker errors : ` ` <code> wdtable ' ; cmakefiles / coverage - lc - lc_action - testrunner . dir / lc_action_tests . c . <surprise> / home / joe / code / cfecfs / github / apps / lc / unit - test / utilities / lc_test_utils . h : <number> : first defined here / usr / bin / ld : libcoverage - lc_internal - stubs . a ( lc_test_utils . c . o ) <annoyed> home / joe / code / cfecfs / github / apps / lc / unit - test / utilities / lc_test_utils . h : <number> : multiple definition of <code> ` ` <section> build should work ? <section> <url> <section> ubuntu <section> i was just trying to build lc "" out of the box "" - not modified in any way - and it failed badly . not sure how this ever built or passed any validation testing with this the way it was . <section> joseph hickey , vantage systems , inc .",0
variables declared mid - function expected behavior * * all variables should be declared at the top of the function . <section> avi weiss <user>,2
"fix # <number> , refactor lc_sampleaps to remove extraneous if statement testing performed * * github ci actions ( incl . build + run , unit tests etc . ) all passing successfully . <section> intent of the code remains basically unchanged , although the logic has changed slightly . main change is that <code> is checked as valid before any sampling of action points , whereas previously this was only checked in the single action point sample condition - i . e . <code> <section> avi <user>",2
inconsistent event id naming expected behavior * * apply consistent event id names to the events which are common to all / most components and apps . <section> invalid message id : <code> <code> <code> <code> <code> <code> <code> <code> <code> initialization : <code> <code> <code> <code> <code> <code> <code> <allcaps> noop </allcaps> : <code> <code> <code> <code> <code> <code> reset counters : <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> etc . <section> avi weiss <user>,2
"multiple return statements in lc_createtaskcds and lc_tableinit multiple returns are a coding style violation , and the implementation is challenging to follow ( see # <number> and others ) . <url> <url> <section> single entry / exit point from functions . refactor to simplify flow . <section> none <section> could group w / multiple issues or tackle by file . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , updates <allcaps> cla </allcaps> information for apache <number> deletes old lc clas , removes language in contributing . md of app - specific <allcaps> cla </allcaps> , adds link to new clas in pull_request_template . md and contributing . md - fixes # <number> - fixes <url> <section> visually inspected links in fork and in pr template . <section> all references to clas should be updated to the cfs app <allcaps> cla </allcaps> . <section> google chrome browser <section> none <section> justin figueroa , <allcaps> asrc </allcaps> federal",1
"update <allcaps> cla </allcaps> information have new clas given the change in <url> with the combined <allcaps> cla </allcaps> , <section> - [ ] update the instructions in each app ' s contributing . md - [ ] delete old <allcaps> cla </allcaps> pdfs - [ ] update pr and issue templates as needed <section> none <section> none <section> gerardo e . cruz - ortiz",1
remove cfe_psp_memset use for addresses in <allcaps> ram </allcaps> should just use memset / memcpy for addresses in <allcaps> ram </allcaps> . the <allcaps> psp </allcaps> functions serve no use in this context . <section> replace with memset / memcpy . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"static analysis workflow failure due to style warnings strict cppcheck warnings cause static analysis workflow to fail , see <url> <code> <section> fix <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"static analysis issues relative to flight code handful of static analysis issues in the "" red "" identified ( non - style issues ) . need to resolve these . filter : - file : elf - file : ut - file : cfe - file : os - file : cf_ - file : _lab_app . c ! ( significance : style ) should resolve and / or disposition the higher ranked ones at minimum . note license restricts publishing issues . imported from <allcaps> gsfccfs </allcaps> - <number>",0
remove all mentions of <allcaps> asist </allcaps> or <allcaps> itos </allcaps> artifacts from documentation some of our doxygen docs still reference <allcaps> asist </allcaps> or <allcaps> itos </allcaps> artifacts . see cfs_mm repo : fsw / src / mm_msgdefs . h : l28 imported from <allcaps> gsfccfs </allcaps> - <number>,1
apps should use cfe_msg_ptr macro instead of cast or local unwrapping apps typically cast to a cfe_msg_message_t or use * . msg . better to use abstracted cfe_msg_ptr . <allcaps> note </allcaps> - not backwards compatible with caelum so recommend not addressing in draco . imported from <allcaps> gsfccfs </allcaps> - <number>,2
"lc hash logic comments only applicable to v1 message ids if the v1 message id is not used , theoretically the hash could collide up to the entire length of the linked list . at minimum the comments should reflect the possibility for more hash collisions , but might be worth reconsidering implementation or reporting collision depth . imported from <allcaps> gsfccfs </allcaps> - <number>",1
"lc : consider making states into enums in lc_msgdefs . h , lc states could be made into enums imported from <allcaps> gsfccfs </allcaps> - <number>",2
refactor lc_sampleapreq and lc_housekeepingreq the functions lc_sampleapreq and lc_housekeeping req could be refactored to use a loop instead of the multiple switch statements . the final if condition in lc_sampleapreq could also be refactored to reduce the nesting . imported from <allcaps> gsfccfs </allcaps> - <number>,2
"refactor lc_sampleaps the function lc_sampleaps can be refactored - the "" if ( startindex = = endindex ) "" condition can be removed . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"suggest reversing order in which ap / wp telemetry is stored lc builds ap / wp status / results starting with most significant bits first . i . e . ap <number> state in most significant <number> bits , then ap <number> results , then ap <number> state , and ap <number> results in least significant bits . when doing an array of bit fields , would be nice to have ap <number> in the most significant bits . imported from <allcaps> gsfccfs </allcaps> - <number>",2
should results tables be critical tables instead of stored to <allcaps> cds </allcaps> the watchpoint results table and actionpoint results table are currently saved to the <allcaps> cds </allcaps> on the housekeeping request interval ( see functions lc_updatetaskcds and lc_housekeepingreq ) . should these tables be critical tables instead ? imported from <allcaps> gsfccfs </allcaps> - <number>,2
lc_tableinit helper functions should be moved to their own file lc_tableinit has several helper functions that it calls while running . these calls have many different variations and effects upon what happens in lc_tableinit . this makes it very difficult to unit test because there is too much variation in the helper functions to attempt to keep adequate track of what may or may not be happening . if these helper functions were moved to their own . c file they could be wrapped and stubbed for testing lc_tableinit . this would simplify the unit testing process . imported from <allcaps> gsfccfs </allcaps> - <number>,2
"lc sets the ttofvalue when it transitions from <allcaps> stale </allcaps> to <allcaps> false </allcaps> while testing lc against cfe <number> , the lc_noaction test procedure failed because values were contained in the ttofvalue when they were not expected . the transition from <allcaps> stale </allcaps> to <allcaps> false </allcaps> seemed to set these values . imported from <allcaps> gsfccfs </allcaps> - <number>",0
"support platform - endian byte order in <allcaps> wdt lc </allcaps> should support numerical telemetry data types that are platform - endian . while it would be possible to get the same effect with an <hashtag> if </hashtag> macro block , it would make the table very hard to read . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"lc - more deterministic behavior currently lc will process messages when they are received , which is fine , generally . also , currently , lc uses a single pipe for commands and for watchpoint telemetry . lc does not process action points until it receives a command message . but in deterministic environments it may be better to have lc be commanded to read telemetry as well as be commanded to process action points . this will necessitate having a separate message pipe for commanding ( which the main loop would block on ) and a telemetry pipe ( which would accumulate telemetry until the command to read . ) the default lc behavior should remain the same ( process messages as they arrive . ) this should be a compile - time option , or perhaps run - time command - able . imported from <allcaps> gsfccfs </allcaps> - <number>",2
lc : support <number> - bit types lc currently does not support <number> - bit integers or floats ( doubles ) . imported from <allcaps> gsfccfs </allcaps> - <number>,2
"lc transitions active action points to passive when application is in passive mode during a stakeholder rehearsal there were several aps that were commanded "" active "" while the lc application state was in "" passive "" mode . before operations could command the application state to "" active "" mode , some of the aps that were activated and had "" tripped "" causing the ap to transition back to passive mode . the purpose of changing a "" tripped "" aps state from active to passive is to prevent an <allcaps> rts </allcaps> from getting initiated more than once . in "" passive "" mode , lc performs all limit tests as in "" active "" mode , but no stored command sequences are invoked as the result of ap failures . having the ap ' s state transition while the application is in passive mode will make enabling aps with a low threshold while lc is in passive mode very difficult . the rational for this design feature needs to be clearly understood and documented . the lc user ' s guides ( both doxygen and word / pdf ) do not make this design feature clear . if no rational exists this design feature should be removed from lc . imported from <allcaps> gsfccfs </allcaps> - <number>",0
"<allcaps> adt </allcaps> table size limit hello , i would like to know if it is possible to increase the <allcaps> wdt </allcaps> table size ( lc_max_actionpoints ) . how much i can extend the size of <allcaps> wdt </allcaps> table ? how many <allcaps> ap i </allcaps> can define ? is there any limit ? thanks .",3
