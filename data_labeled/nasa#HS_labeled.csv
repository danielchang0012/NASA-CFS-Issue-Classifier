text,label
"updated <allcaps> mat </allcaps> table assumes "" commandheader "" first member name <section> depending on where the message definitions came from , and the type of <allcaps> hdr </allcaps> implementation used , the first element of a structure may or may not be named <code> . this is controlled by the specific msghdr implementation that was chosen . <section> build the <allcaps> mat </allcaps> using <allcaps> eds </allcaps> - generated structs - in these ( unfortunately ) there is an extra layer of nesting , so this fails . the first element still is ultimately a command header . <section> the <allcaps> tbl </allcaps> message definitions are defined by a combination of <allcaps> tbl </allcaps> itself and the <allcaps> msg hdr </allcaps> module selection . no assumptions in hs should be made about its structure . <section> <url> specifically the "" . commandheader "" part . <section> debian <section> should be able to just remove this part of the designated initializer . normally i would recommend use of designated initializers , but in this context it introduces a dependency / assumption that may not be correct . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , remove <code> - related macros <section> - fixes # <number> - removes the couple instances of the <code> - related macros which are being removed from cfe in <url> <section> github ci actions all passing successfully . <section> no change . <section> avi weiss <user>",2
"add <allcaps> eds </allcaps> file for hs application <section> an electronic data sheet ( <allcaps> eds </allcaps> ) file provides a standardized machine - readable <allcaps> xml </allcaps> description of the interfaces for an application . having this documented externally from the code allows many new features and capabilities . <section> every <allcaps> cfs </allcaps> app should include an <allcaps> eds </allcaps> file . <section> <allcaps> cfe </allcaps> core modules already have these files . <section> joseph hickey , vantage systems , inc .",2
"use generated stubs <section> hs unit testing currently uses a set of stubs for its internal units that are not generated by the tool <section> use the generated stubs directly whenever possible , as this makes future maintenance easier - when an <allcaps> api </allcaps> changes , just re - run the generator tool to update the stubs . <section> this requires some additional separation of items - global variable stubs should be in a separate compilation unit , as the tool does not generate these . <section> joseph hickey , vantage systems , inc .",2
"cppcheck unread variable errors in hs_monitor . c <section> cppcheck is currently reporting the following style issues : | severity | location | error id | issue | | - - - | - - - | - - - | - - - | | style | fsw / src / hs_monitors . c : <number> | unreadvariable | variable ' entryresult ' is assigned a value that is never used . | | style | fsw / src / hs_monitors . c : <number> | unreadvariable | variable ' resourcetype ' is assigned a value that is never used . | | style | fsw / src / hs_monitors . c : <number> | unreadvariable | variable ' nullterm ' is assigned a value that is never used . | <section> run cppcheck workflow <section> should run clean <section> github hosted runner <section> joseph hickey , vantage systems , inc .",0
"appmonstatusrefresh tests appear to check the wrong output <section> the <code> <allcaps> api </allcaps> call updates a field called <code> in the global data structure . declared here : <url> value is updated in the function here : <url> called from unit test here ( among others ) : <url> however - the unit tests then check the similarly - named field within the hk packet here : <url> note that this is _not the same member_ - - one is directly inside the global , the other is inside the hk packet . <section> test should verify the fields it was supposed to update . <section> note the tests is passing , this suggests the test might not be sufficient , because it is checking a different value than was set . the test conditions could have simply been written to pass without actually verifying expected output . <section> joseph hickey , vantage systems , inc .",0
"inconsistent event id naming <section> copy of <url> after finding that there were <number> different event ids to indicate the same thing ( invalid message id ) in <url> i scrubbed the other common commands ( e . g . task initialisation [ <allcaps> init </allcaps> ] , <allcaps> noop </allcaps> , reset counters etc . ) and found the same issue there - almost every component / app had their own variation of the event id name for the exact same event . <section> apply consistent event id names to the events which are common to all / most components and apps . <section> invalid message id : <code> <code> <code> <code> <code> <code> <code> <code> <code> initialization : <code> <code> <code> <code> <code> <code> <code> <allcaps> noop </allcaps> : <code> <code> <code> <code> <code> <code> reset counters : <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> etc . <section> avi weiss <user>",2
"use cfe_msg_cmd_hdr_init macro in message action table implementation <section> current raw buffer / command implementation in <allcaps> mat </allcaps> table is not portable across different endian systems and is somewhat challenging / messy to implement . <section> similar to nasa / sc # <number> , the message action table could use the <code> macro and real command types to simplify table implementation . suggestion : typedef a union that contains each of the message types in the table , then define the array w / the <allcaps> mat </allcaps> info and unioned element <code> <section> none <section> similar possible approach with <allcaps> sch </allcaps> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
remove stray terminators <section> <url> <url> <section> remove <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"hs_idletask has no cancellation point <section> the default <code> has no cancellation point , so hangs up on linux for cntrl - c . <section> add a cancellation point <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <user>",0
"uncovered condition for while loop in hs_custom . c <section> there will always be room within the diagvalue / count array here , so it ' ll match before j >= the limit . the conditions are not independent : <url> <section> refactor <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsf </allcaps>",2
refactor config dependent conditional in hs_custom . c <section> can not cover branch when hs_util_calls_per_mark is <number> ( since the counter is static local ) : <url> <section> use the custom global to store config such that it can be set to get full coverage . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"simplify message action logic to avoid unreachable branch <section> branch can not be covered since there ' s no way to get to this decision with a actiontype <= hs_amt_act_last_nonmsg : <url> this is due to actiontype already being checked here : <url> all other cases of current implementation are handled . only way to exercise this decision as false would be to introduce a bug . <section> slight refactor to simplify and allow full coverage - remove the <allcaps> noact </allcaps> case since it can never happen : <url> also swap the logic to calculate msgactsindex first and just check the result for in - range . <section> could do enabled check first , but it ' s already <number> levels deep . better to save that for # <number> to really clean up duplicated logic . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , updates <allcaps> cla </allcaps> information for apache <number> deletes old hs clas , removes language in contributing . md of app - specific <allcaps> cla </allcaps> , adds link to new clas in pull_request_template . md and contributing . md <section> - fixes # <number> - fixes <url> <section> visually inspected links in fork and in pr template . <section> all references to clas should be updated to the cfs app <allcaps> cla </allcaps> . <section> google chrome browser <section> none <section> justin figueroa , <allcaps> asrc </allcaps> federal",1
"update <allcaps> cla </allcaps> information * [ ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> have new clas given the change in <url> with the combined <allcaps> cla </allcaps> , <section> - [ ] update the instructions in each app ' s contributing . md - [ ] delete old <allcaps> cla </allcaps> pdfs - [ ] update pr and issue templates as needed <section> none <section> none <section> gerardo e . cruz - ortiz",1
remove cfe_psp_memset use on addresses in <allcaps> ram </allcaps> <section> should just use memset / memcpy for addresses in <allcaps> ram </allcaps> . the <allcaps> psp </allcaps> functions serve no use in this context . <section> replace with memset / memcpy . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"add functional verification of hs8006 and hs8006 . <number> <section> hs8006 : upon any initialization , hs shall wait until the cfe startup synch has been received indicating all applications have started . hs8006 . <number> : if the startup - synch is not received in <platform_defined> seconds , hs shall begin processing . these are difficult to verify in <allcaps> cft </allcaps> , so they need to be verified in unit test by ensuring cfe_es_waitforstartupsync is called with a platform defined timeout . <section> add verification in the unit tests . <section> none <section> test case : <url> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
hs idle task only executes once and exits . <repeated> reports <allcaps> cpu </allcaps> hogging all the time <section> hs idle task used to have a while loop ( from <number> . <number> tag ) : <url> now just runs once : <url> <section> running cfs with hs reports hogging every time . <repeated> <code> <section> task should run in a loop and realistic margin should be getting reported <section> - os : linux - versions : <number> . <number> + <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"static analysis workflow failures due to style warnings <section> strict cppcheck fails in static analysis workflow , see <url> ' ' ' fsw / src / hs_cmds . c : <number> ] - > [ fsw / src / hs_cmds . c : <number> <url> variable ' status ' is reassigned a value before the old one has been used . fsw / src / hs_custom . c : <number> ] - > [ fsw / src / hs_custom . c : <number> <url> variable ' status ' is reassigned a value before the old one has been used . ' ' ' <section> fix <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
remove all mentions of <allcaps> asist </allcaps> or <allcaps> itos </allcaps> artifacts from documentation some of our doxygen docs still reference <allcaps> asist </allcaps> or <allcaps> itos </allcaps> artifacts . see cfs_mm repo : fsw / src / mm_msgdefs . h : l28 imported from <allcaps> gsfccfs </allcaps> - <number>,1
"health and safety has extraneous code <allcaps> ivv </allcaps> severity : <number> issue category : code issue type : extraneous code count : <number> description : the health and safety app init function includes the extraneous assignment of status to cfe_success [ <number> : line <number> ]; however , this value is never used again before the value of status is reassigned [ <number> : line <number> ] . recommended actions : the assignment statement for status can be removed . impact : defect impacting maintainability on current mission or reuse on future missions . imported from <allcaps> gsfccfs </allcaps> - <number>",2
apps should use cfe_msg_ptr macro instead of cast or local unwrapping apps typically cast to a cfe_msg_message_t or use * . msg . better to use abstracted cfe_msg_ptr . <allcaps> note </allcaps> - not backwards compatible with caelum so recommend not addressing in draco . imported from <allcaps> gsfccfs </allcaps> - <number>,2
"scrub configuration file for items that do not change suggest removing non - project configuration items from this file . would help to limit this list to only items that projects should expect to manage . examples of things i would not consider for project configuration - app name , wakeup pipe depth , table names , etc . note open ticket on <allcaps> cpu </allcaps> utilization / idle task so avoiding comments on those parameters since i expect this implementation to change . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"recommended refactoring in hs_monitorevent hs_monitorevent recommendation : refactor common action logic for the different monitors into one function , and pass in unique info . would avoid repeated logic for the same action from a different trigger . finding from code review imported from <allcaps> gsfccfs </allcaps> - <number>",2
hs idle task consumes <percent> <allcaps> cpu </allcaps> on <allcaps> posix </allcaps> systems imported from <allcaps> gsfccfs </allcaps> - <number>,0
hs telemetry reporting per - core <allcaps> cpu </allcaps> utilization on <allcaps> smp </allcaps> idle task needs to be updated for <allcaps> smp </allcaps> so that utilization can be determined for each core . imported from <allcaps> gsfccfs </allcaps> - <number>,2
