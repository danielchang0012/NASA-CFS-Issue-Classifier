text,label
"fix # <number> , update command code underscores for consistency testing performed * * github ci actions all passing successfully ( incl . unit tests and build + run ) . <section> no change to behavior . improved consistency and clarity . <section> avi weiss <user>",2
"fix # <number> , convert <code> return codes and variables to <code> testing performed * * github ci actions all passing successfully . <section> no change to behavior ( no types have actually changed with this pr ) . <code> is more expressive and improves consistency with cfe / cfs . <section> avi weiss <user>",2
cs <code> return codes and variables should be converted to <code> expected behavior * * use the more expressive <code> and improve consistency with cfs . <section> avi weiss <user>,2
"fix # <number> , move function prototypes out of <code> testing performed * * github ci actions all passing successfully . <section> no change to app behavior . cs now more consistent with the other cfs apps . <section> avi weiss <user>",2
"function prototypes can be moved out of <code> expected behavior * * unless these are specifically being kept private , it seems better to keep cs consistent with the other apps and move these to the header file . <section> avi weiss <user>",2
"all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> messages should put content in a "" payload "" sub - structure to match the patterns used in <allcaps> cfe </allcaps> and other modules , all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message definitions should put the content ( non - header ) parts into a separate struct called "" payload "" . <section> separate message content into a sub structure called "" payload "" . <section> this is benefit to tooling that can use the presence of this field to identify where the actual content starts ( e . g . something like <code> would work and be correct , as opposed to checking <code> which may not actually reflect where the content starts due to possible compiler - added padding between them ) . <section> joseph hickey , vantage systems , inc .",2
"incorrect size passed to "" strncmp "" the size passed to <code> here is not correct : <url> the <code> string being compared here is sized on <code> , not <code> , as declared here : <url> <section> build with <allcaps> gcc </allcaps> <number> and full warnings enabled , this is reported . <section> use <code> to avoid this possibility <section> debian <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , adds null termination to table name processing - fixes # <number> <section> make build and lcov <section> no impact to behavior <section> - os : ubuntu <number> <section> n / a <section> n / a <section> justin figueroa , vantage systems",2
"cs_tableinit - cyclomatic complexity of <number> <allcaps> nasa </allcaps> guidelines in <allcaps> npr </allcaps> <number> . 2 d recommends maintaining a cyclomatic complexity in software , in particular flight software of <number> . cs_table_processing . c : : cs_tableinit <url> unnecessarily violates the recommendation with a cyclomatic complexity of <number> . <section> clean up cs_tableinit such that it has a cyclomatic complexity of <number> or less . <section> justin figueroa , vantage systems",2
"cs_processnewtablesdefinitiontable - cyclomatic complexity of <number> <allcaps> nasa </allcaps> guidelines in <allcaps> npr </allcaps> <number> . 2 d recommends maintaining a cyclomatic complexity in software , in particular flight software of <number> . cs_table_processing . c : : cs_processnewtablesdefinitiontable <url> unnecessarily violates the recommendation with a cyclomatic complexity of <number> . <section> clean up cs_processnewtablesdefinitiontable such that it has a cyclomatic complexity of <number> or less . <section> justin figueroa , vantage systems",2
"improper null termination of table names it is not guaranteed that the source or destination arguments of <code> for table entry names assure null - termination . many standard functions such as strcpy , strlen , strcmp among others rely on arrays of characters to be null terminated . <section> <code> <url> alternatively considered : fm strncpy approach <url> however , this approach will not necessarily handle non - terminated sources properly . <section> <url> <url> <section> imported from <allcaps> jsc </allcaps> static analysis audit <section> the source table data was loaded via <code> so yes it came from a file which should be considered "" untrusted input "" . therefore , there is no guarantee that defentry - > name ( the source here ) is null - terminated . however , the current implementation is relying on the assumption that the source and dest are the same length , and thus the function will not read more than it writes , so it ' s safe - ish . <section> justin figueroa , vantage systems",2
"table processing : strncmp incorrect size argument ( cfe_tbl_max_full_name_len ) while compiling the latest version of cs , my build environment gave me the following error : <code> <section> the bug relates to this line : <url> based on checking the types for both table entries ( <code> ) , it seems that it would make sense to instead do the strncmp like so : <code> after changing to this locally , my build works fine .",0
"requirement verification failure <section> the following requirements fail verification testing because for each - an event message is sent , but checksumming is not disabled : <number> ( user memory ) cs shall send an event message and disable checksumming of the user - defined memory , if the state is not one of the following : a ) enabled b ) disabled c ) empty <number> ( user memory ) if the address range for any of the user - defined memory is invalid , cs shall send an event message and disable user - defined memory checksumming <number> ( tables ) cs shall send an event message and disable table checksumming , if the state is not one of the following : a ) enabled b ) disabled c ) empty <number> ( apps ) cs shall send an event message and disable application code segment checksumming , if the state is not one of the following : a ) enabled b ) disabled c ) empty <number> ( non - volatile ) cs shall send an event message and disable non - volatile checksumming , if the state is not one of the following : a ) enabled b ) disabled c ) empty <number> ( non - volatile ) if the address range for any of the non - volatile segments is invalid , cs shall send an event message and disable non - volatile checksumming <section> checksumming will need to be disabled in each case or the requirements will need to be updated <section> example from cs_table_processing . c : if ( result ! = cs_table_error ) { cfe_evs_sendevent ( cs_val_eeprom_state_err_eid , cfe_evs_eventtype_error , "" eeprom table validate : illegal state field ( 0x % 0 4 x) found in entry id % d "" , ( unsigned short ) statefield , ( int ) outerloop ) ; result = cs_table_error ; } <section> dan knutsen <allcaps> nasa </allcaps> goddard",0
"fix # <number> , apply consistent event id names to common events testing performed * * only github ci actions . <section> no impact on code behavior ( no logic changes ) . consistent event id names for the events which are common to all / most cfs components and apps will improve consistency and ease make code review / debugging easier . <section> avi weiss <user>",2
inconsistent event id naming expected behavior * * apply consistent event id names to the events which are common to all / most components and apps . <section> invalid message id : <code> <code> <code> <code> <code> <code> <code> <code> <code> initialization : <code> <code> <code> <code> <code> <code> <code> <allcaps> noop </allcaps> : <code> <code> <code> <code> <code> <code> reset counters : <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> etc . <section> avi weiss <user>,2
resolve issues building users guide with ubuntu <number> / doxygen <date> doxygen warnings for <code> <section> resove <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"remove stray <allcaps> todo </allcaps> and empty else condition <url> <section> there ' s no action for the else case , remove ( along with the <allcaps> todo </allcaps> note ) . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
remove stray terminators <url> <section> remove <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"fix # <number> , updates <allcaps> cla </allcaps> information for apache <number> deletes old cs clas , removes language in contributing . md of app - specific <allcaps> cla </allcaps> , adds link to new clas in pull_request_template - fixes # <number> <section> visually inspected links in fork and in pr template . <section> all references to clas should be updated to the cfs app <allcaps> cla </allcaps> . <section> google chrome browser <section> none <section> justin figueroa , <allcaps> asrc </allcaps> federal",1
"update <allcaps> cla </allcaps> information have new clas given the change in <url> with the combined <allcaps> cla </allcaps> , <section> - [ ] update the instructions in each app ' s contributing . md - [ ] delete old <allcaps> cla </allcaps> pdfs - [ ] update pr and issue templates as needed <section> none <section> none <section> gerardo e . cruz - ortiz",1
remove cfe_psp_memset and cfe_psp_memcpy use on addresses in <allcaps> ram </allcaps> should just use memset / memcpy for addresses in <allcaps> ram </allcaps> . the <allcaps> psp </allcaps> functions serve no use in this context . <section> replace with memset / memcpy . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"add scrubbing support for libraries cs currently does not support scrubbing libraries . this could be implemented now that ticket <url> is implemented . <section> add a field in the app table to specify whether or not an entry belongs to an app or a lib and call the appropriate <allcaps> api </allcaps> functions accordingly <section> add a separate dedicated lib table , or perhaps call cfe_es_getappidbyname first and if that fails , call cfe_es_getlibidbyname , then call cfe_es_getmoduleinfo ( ) to get the addresses to scrub <section> john n pham , northrop grumman",2
"use fixed size types for addresses and address offsets in tables / tlm / cmd changing telemetry and table sizes depending on platform ( <number> vs <number> bit ) when using the cpuaddr type in structures . <section> use cfe_es_memaddress and cfe_es_offset types for tables and telemetry and define those types as <number> bits . if space is an issue , users can redefine these types as <number> - bit . from <allcaps> ccb </allcaps> : <number> - <number> - <number> <url> > > - cpuaddress type will "" change size "" . use cfe_es_memaddress and cfe_es_offset types for tables and telemetry > - open new issue to address and discuss with customers > _originally posted by <user> in <url> <allcaps> edit </allcaps> : <code> and <code> are the actual types that should be used <section> leave as is , redefine telemetry sizes based on platform in the "" ground system "" <section> none <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps>",2
"add child task name to platform config file stakeholder suggestion - not all platforms support all task naming conventions , make configurable . unfortunately the platforms w / issues were not mentioned in the original issue so it ' s not clear if this is really relevant / necessary anymore . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"<allcaps> cs crc </allcaps> values may lead to confusion the cs application relies on the cfe_es_calculatecrc function to report the crcs that it calculates . however , this function calculates the <allcaps> crc </allcaps> as an int16 value and returns that value as a uint32 value . this causes the sign bit of the int16 ( bit <number> ) to be propagated to the upper <number> bits of the uint32 . if this bit is set , it can cause confusion since a <allcaps> crc </allcaps> of 0x 8 4 5 e would result in the cs application having a value of 0 xffff845e . imported from <allcaps> gsfccfs </allcaps> - <number>",0
"es - registeredtasks counter does not decrement when child tasks are exited stakeholder reported that the es "" registeredtasks "" counter was not decrementing when a child task exited . the cs code was examined to ensure the needed <allcaps> es api </allcaps> calls were being made . it was confirmed the cs child tasks make the <allcaps> es api </allcaps> call to cfe_es_exitchildtask . the cfe_es_exitchildtask <allcaps> api </allcaps> function does decrement the registeredtasks counter on line <number> however , this step is performed only if conditional checks are passed . really cs should not dynamically be creating / exiting child tasks per a separate issue , but noted here still since it was an observed issue ( although no steps provided to recreate ) . imported from <allcaps> gsfccfs </allcaps> - <number>",0
"checksum errors after restarting app summary scenario <number> . application gets an exception <number> . es restarts the application <number> . there is a high probability that the application checksum has changed due to the restart . <number> . checksum is not notified to recompute the application checksum . when it finds the checksum has changed , it puts out an event message to that effect . <number> . hs is monitoring for application checksum messages , and does a processor reset as a consequence . imported from <allcaps> gsfccfs </allcaps> - <number>",0
cs child tasks are dynamically created cs creates child tasks dynamically in several command functions : - - cs_recomputebaselinecfecorecmd - - cs_recomputebaselineoscmd - - cs_oneshotcmd is there any risk of cleanup issues if these commands are run too frequently ? cs could be modified to create the child tasks just once and then kick them off when a command is received ( perhaps using a semaphore mechanism like fm ) . imported from <allcaps> gsfccfs </allcaps> - <number>,2
"configuration parameters could exist in configuration table some parameters in cs_platform_cfg . h could be made part of a configuration table to provide more on - orbit flexibility . for instance , number of bytes per wakeup or child task delay time . finding from code review . imported from <allcaps> gsfccfs </allcaps> - <number>",2
consolidate similar commands several command handler functions are nearly identical . could be consolidated . cs_disableappcmd / cs_enableappcmd cs_disablenameappcmd / cs_enablenameappcmd cs_disableeepromcmd / cs_enableeepromcmd cs_disablememorycmd / cs_enablememorycmd cs_disableentryidmemorycmd / cs_enableentryidmemorycmd cs_disabletablescmd / cs_enabletablescmd cs_disablenametablescmd / cs_enablenametablescmd imported from <allcaps> gsfccfs </allcaps> - <number>,2
consider replacing switch statement with jump table in cs_backgroundcheckcmd finding from code review imported from <allcaps> gsfccfs </allcaps> - <number>,2
consider making the <allcaps> crc </allcaps> size configurable there are two <allcaps> crc </allcaps> algorithm types specified in the platform config . are both of these using <number> - bit <allcaps> crc </allcaps> ? what if we add another <allcaps> crc </allcaps> algo later that is not <number> - bit ? it might make sense to define the type that holds a <allcaps> crc </allcaps> result in platform config as well . comment is on the cs_computeeeprommemory function regarding the uint32 computedcsvalue parameter . imported from <allcaps> gsfccfs </allcaps> - <number>,2
apps should use cfe_msg_ptr macro instead of cast or local unwrapping apps typically cast to a cfe_msg_message_t or use * . msg . better to use abstracted cfe_msg_ptr . <allcaps> note </allcaps> - not backwards compatible with caelum so recommend not addressing in draco . imported from <allcaps> gsfccfs </allcaps> - <number>,2
"unable to functionally test app <allcaps> crc </allcaps> miscompare description : if the application ' s code segment <allcaps> crc </allcaps> is not equal to the corresponding application ' s baseline code segment <allcaps> crc </allcaps> , cs shall increment the application code segment <allcaps> crc </allcaps> miscompare counter and send an event message . was not able to generate a miscompare when reloading a different version of the reqval_app . loaded reqval_v500 which should have incremented the following error counter : appcserrcounter and also generated an event <number> - likely resolution will be to verify via "" analysis "" , aka unit test if reloading an app can not cause the miscompare . future work might support getting the module address , use mm to "" corrupt "" the memory to cause the miscompare . imported from <allcaps> gsfccfs </allcaps> - <number>",3
"resolve static analysis issues relative to unit tests many actual code issues ( uninitialized variables , buffer overruns , etc ) identified via static analysis in the unit tests . all actual "" bugs "" should be resolved . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"static analysis issues relative to flight code handful of static analysis issues in the "" red "" identified ( non - style issues ) . need to resolve these . filter : - file : elf - file : ut - file : cfe - file : os - file : cf_ - file : _lab_app . c ! ( significance : style ) should resolve and / or disposition the higher ranked ones at minimum . note license restricts publishing issues . imported from <allcaps> gsfccfs </allcaps> - <number>",0
cs : implicit padding being added to definition and results tables implicit padding is being added to multiple data structures in cs_tbldefs . h . this creates a problem because we would need to maintain different definition files for decomming the data between our linux and sp0 systems . affected data structures : cs_res_app_table_entry_t cs_res_tables_table_entry_t cs_res_eeprommemory_table_entry_t cs_def_eeprommemory_table_entry_t imported from <allcaps> gsfccfs </allcaps> - <number>,0
