text,label
"fix # <number> , convert <code> return codes and variables to <code> <section> - fixes # <number> - most <code> return codes converted over to <code> - <code> <code> / <code> variables holding cfe return codes converted to <code> <section> github ci actions all passing successfully . <section> no change to behavior . <code> is more expressive and improves consistency with cfe / cfs . <section> avi weiss <user>",2
ds <code> return codes and variables should be converted to <code> <section> ds has quite a few return codes ( as well as local <code> / <code> variables which hold <allcaps> cfe </allcaps> return codes ) that can be easily converted over to the <code> typedef . <section> use the more expressive <code> and improve consistency with cfs . <section> avi weiss <user>,2
"use generated stubs <section> ds unit testing currently uses a set of stubs for its internal units that are not generated by the tool <section> use the generated stubs directly whenever possible , as this makes future maintenance easier - when an <allcaps> api </allcaps> changes , just re - run the generator tool to update the stubs . <section> this requires some additional separation of items - global variable stubs should be in a separate compilation unit , as the tool does not generate these . <section> joseph hickey , vantage systems , inc .",2
"remove conditionally compiled code <section> conditionally - compiled code is a maintenance problem because code then needs to be validated both ways , with the condition on and off , and it is easy for the lesser - used / non - default option to become stale or broken , particularly with respect to the coverage testing . <section> remove conditional compilation , replace with runtime conditional checks , which can be constant - value in <allcaps> fsw </allcaps> context , but can be coverage test both ways via a single binary build . <section> in general conditional compilation of large chunks of code should be avoided , per <number> coding standards . example here of a block that is <number> lines long : <url> <section> joseph hickey , vantage systems , inc .",2
"strncpy source sizeof * ] i reviewed the [ contributing guide <url> . * [ ] i performed a cursory search to see if the bug report is relevant , not redundant , nor in conflict with other tickets . <section> while building with <section> flag the compiler complains about "" error : argument to ‘ sizeof ’ in ‘ strncpy ’ call is the same expression as the source ; did you mean to use the size of the destination ? "" <section> steps to reproduce the behavior : <number> . add - werror = sizeof - pointer - memaccess flag to compiler <number> . build <section> no errors <section> <url> <section> - os : oracle linux <number> <section> n / a <section> claudio olmi - <allcaps> nasa </allcaps> / <allcaps> metecs </allcaps>",0
"file age check logic is wrong <section> produces ~ <number> files in <number> minutes when requesting <number> file per minute <section> <number> . enable a <number> file per minute config <number> . watch ~ <number> files get produced <section> <number> file per minute when configured to do so <section> the problem is how file age is accumulated . w / the default config , <number> seconds are added every hk message , and another second is added every <number> second sb timeout . so within the typical <number> second scheduled hk request the file age gets incremented by <number> seconds ( <number> from hk processing and <number> from sb timeouts ) . <url> <url> really the time accumulation logic is broken since it ' s going to vary based on receiving any other command that would cause sb not to timeout . likely needs a functional test update to catch this issue . <section> independent of system <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , adds null termination to software bus messaging <section> - fixes # <number> <section> make build & lcov on local dev machine <section> no expected behavior changes <section> ubuntu <number> <section> n / a <section> n / a <section> justin figueroa , vantage systems",2
"ds_appprocesscmd - cyclomatic complexity of <number> <section> <allcaps> nasa </allcaps> guidelines in <allcaps> npr </allcaps> <number> . 2 d recommends maintaining a cyclomatic complexity in software , in particular flight software of <number> . ds_app . c : : ds_processcmd <url> unnecessarily violates the recommendation with a cyclomatic complexity of <number> . <section> clean up ds_processcmd such that it has a cyclomatic complexity of <number> or less . <section> n / a <section> n / a <section> justin figueroa , vantage systems",2
"improper null termination on software bus message handling <section> it is not guarenteed that the source or destination arguments of <code> for software bus message uses in ds / apps / fsw / src assure null termination . many standard functions such as strcpy , strlen , strcmp among others rely on arrays of characters to be null terminated . <section> from local ds repo , command <code> and view uses where argument is a software bus message . <section> no expected behavior changes . replace <code> with <code> <url> <section> the below code snips are ds strncpy uses that do not guarentee null - termination <url> <url> <url> this strncpy example in fm may help with null - terminated destination but does not guarentee null - terminated source : fm strncpy example <url> <section> imported from <allcaps> jsc </allcaps> static analysis audit <section> the fm example above proves to assure null termination for the destination , however , it may be best approach to replace <code> with <code> <url> to consolidate handling of strings . <section> justin figueroa , vantage systems",2
"fix # <number> , adds ds_cmdremovemid requirement documentation <section> - fixes # <number> <section> viewed the csv <section> added requirements in the requirements csv file . <section> view documentation change on github : <url> <section> n / a <section> if included , identify any third party code and provide text file of license <section> justin figueroa , vantage systems",1
"add documentation of ds_cmdremovemid requirements <section> ds / docs / ds_functionalrequirements . csv is missing documentation of requirements associated with ds_cmdremovemid <url> . <section> open and view ds / docs / ds_functionalrequirements . csv <section> ds / docs / ds_functionalrequirements . csv contains requirements documented in <allcaps> jira </allcaps> for ds_cmdremovemid . the added requirements should be ds5018 , ds5018 . <number> , ds5018 . <number> , and ds5018 . <number> . <section> n / a <section> simply viewed through github : <url> <section> n / a <section> justin figueroa , vantage systems",1
"inconsistent event id naming <section> copy of <url> after finding that there were <number> different event ids to indicate the same thing ( invalid message id ) in <url> i scrubbed the other common commands ( e . g . task initialisation [ <allcaps> init </allcaps> ] , <allcaps> noop </allcaps> , reset counters etc . ) and found the same issue there - almost every component / app had their own variation of the event id name for the exact same event . <section> apply consistent event id names to the events which are common to all / most components and apps . <section> invalid message id : <code> <code> <code> <code> <code> <code> <code> <code> <code> initialization : <code> <code> <code> <code> <code> <code> <code> <allcaps> noop </allcaps> : <code> <code> <code> <code> <code> <code> reset counters : <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> etc . <section> avi weiss <user>",2
"unused values and uninitialized variable static analysis warnings <section> unused values set in ds_table . c , uninitialized variable warning in ds_file_tests . c <section> squash <section> none <section> static analysis license restricts sharing actual warnings <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"uninitialized string copy if move location is empty <section> pathname is only set when move is not empty , but the copy is done outside that condition : <url> <url> <section> produce the packet with move empty <section> only copy over if pathname was set <section> observed , also flagged by static analysis <section> introduced with file complete tlm packet updates - # <number> , so does not impact draco - rc2 <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"buffer overflow possibility on command processing from <code> use and in <code> w / bad size to <code> <section> pathname from cmd used in strcpy , could overflow table pathname if not terminated : <url> if destfile - > pathname is not null terminated garbage could be added to the workname which gets copied back to the file name : <url> <section> this was actually happening in the test , although the test overflowed the buffer to get this condition : <url> <section> only copy up to the size of the pathname . <section> see above <section> ci <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"send a message when new files are completed <section> send a message when new files are completed in ds . <section> - initialize and send a message using <code> and <code> respectively . - define a new packet <code> for a single <code> payload . - define a new msgid . - may need to include logic that will use "" movename "" when ds_move_files = = <allcaps> false </allcaps> and use "" filename "" when ds_moves_files = = <allcaps> true </allcaps> . - this feature will be implemented at the close of a file within the <code> function . <section> none <section> none <section> justin figueroa , <allcaps> asrc </allcaps> federal",2
"fix # <number> , updates <allcaps> cla </allcaps> information for apache <number> deletes old ds clas , removes language in contributing . md of app - specific <allcaps> cla </allcaps> , adds link to new clas in pull_request_template . md and contributing . md <section> - fixes # <number> - fixes <url> <section> visually inspected links in fork and in pr template . <section> all references to clas should be updated to the cfs app <allcaps> cla </allcaps> . <section> google chrome browser <section> none <section> justin figueroa , <allcaps> asrc </allcaps> federal",1
"update <allcaps> cla </allcaps> information * [ ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> have new clas given the change in <url> with the combined <allcaps> cla </allcaps> , <section> - [ ] update the instructions in each app ' s contributing . md - [ ] delete old <allcaps> cla </allcaps> pdfs - [ ] update pr and issue templates as needed <section> none <section> none <section> gerardo e . cruz - ortiz",1
"reports "" desc test = ok "" in ds_flt_tbl_eid even though no validation is being performed <section> initiated from the following comment : <url> basically just could imply there ' s some validation of the descriptor text going on , which there currently is not . <section> could just remove that text , it ' s not added value . <section> leave as - is <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
remove cfe_psp_memset and cfe_psp_memcpy use on addresses in <allcaps> ram </allcaps> <section> should just use memset / memcpy for addresses in <allcaps> ram </allcaps> . the <allcaps> psp </allcaps> functions serve no use in this context . <section> replace with memset / memcpy . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"static analysis issues relative to flight code handful of static analysis issues in the "" red "" identified ( non - style issues ) . need to resolve these . filter : - file : elf - file : ut - file : cfe - file : os - file : cf_ - file : _lab_app . c ! ( significance : style ) should resolve and / or disposition the higher ranked ones at minimum . note license restricts publishing issues . imported from <allcaps> gsfccfs </allcaps> - <number>",0
apps should use cfe_msg_ptr macro instead of cast or local unwrapping apps typically cast to a cfe_msg_message_t or use * . msg . better to use abstracted cfe_msg_ptr . <allcaps> note </allcaps> - not backwards compatible with caelum so recommend not addressing in draco . imported from <allcaps> gsfccfs </allcaps> - <number>,2
"ds hash logic comments only applicable to v1 message ids if the v1 message id is not used , theoretically the hash could collide up to the entire length of the linked list . at minimum the comments should reflect the possibility for more hash collisions , but might be worth reconsidering implementation or reporting collision depth . imported from <allcaps> gsfccfs </allcaps> - <number>",1
"ds and fm use the same default subtype ds and fm both use "" <number> "" as the default file subtype ds / fsw / platform_inc / ds_platform_cfg . h : <hashtag> define </hashtag> ds_file_hdr_subtype <number> fm / fsw / platform_inc / fm_platform_cfg . h : <hashtag> define </hashtag> fm_dir_list_file_subtype <number> imported from <allcaps> gsfccfs </allcaps> - <number>",2
ds could limit the maximum number of files the ds file table could be modified to ( optionally ) enforce a maximum number of files for each type of file . this could be useful for missions with file space constraints . currently ds will keep creating files until space is entirely consumed . imported from <allcaps> gsfccfs </allcaps> - <number>,2
"ds should use cfe_fs_initheader ds initializes and populates the <allcaps> cfe fs </allcaps> header itself ( see ds_file . c , lines <number> - <number> ) this requires ds to understand the details of the header structure and could break if that structure changes . it should instead use the cfe_fs_initheader function which is designed to do exactly this . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"ds should ( optionally ) add a timestamp for each packet stored <allcaps> ccsds </allcaps> telemetry packets include a timestamp in the <allcaps> ccsds </allcaps> headers . command packets , on the other hand , do not . also , if <allcaps> ccsds </allcaps> timestamps are generated by something other than the local <allcaps> cpu </allcaps> , the timestamp may reflect when the packet was generated but not when the packet was received / stored by ds . thirdly , if the <allcaps> ccsds </allcaps> timestamp is generated using a different clock that is not in sync , the timestamps may not coincide . this is particularly important in multi - <allcaps> cpu </allcaps> environments , such as when cfs busses are connected via <allcaps> sbn </allcaps> . this will particularly help with replay using the ds_replay application as the timestamps will accurately reflect when ds received the packets and will be in the correct order . i suggest adding , for each packet stored in ds , a ds packet header containing a timestamp . this header could also include sequence count , message length ( although easy to compute using the <allcaps> ccsds </allcaps> header , a ds - generated length would make for easier access ) , byte position in file , or other fields . of course , all of this adds to the amount of data stored in ds files , so all should be optional . the ds file header should include the necessary metadata to determine what the ds packet header will contain . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"ds file header should include additional metadata ds currently stores a number of fields in the ds file header ( ds_fileheader_t ) , namely the time the file was closed , the file name , the file table index , and the file name type . when reading ds - created files on other platforms with other configurations , it is possible to tease apart platform / mission - specific information but it would be easier to store the configuration in the header for easier analysis of ds files . additional information should include , at least , the <allcaps> ccsds </allcaps> time format ( cfe_sb_packet_time_format ) , the <allcaps> ccsds </allcaps> secondary header ( cc , timestamp ) endian - ness , byte alignment , even the ds file header endian - ness for the close timestamp . also , as this will break compatibility with any ds - generated files from previous versions , including a ds header format version # should be included . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"ds should add a per - message and / or per - file checksum files generated by ds on a spacecraft may be subject to <allcaps> seu </allcaps> . as such , ds should add checksums to messages stored in the ds file , and / or store a checksum for the entire ds file at close time . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"ds file header values should be big - endian as with <allcaps> ccsds </allcaps> , which is standardizing on big - endian for message headers , the fields in the ds file header ( close time , filetableindex , filenametype ) should be stored in big - endian order . ( should the same be true for the <allcaps> cfs </allcaps> file header ? ) ( originally submitted to babelfish on <date> ) imported from <allcaps> gsfccfs </allcaps> - <number>",2
"error : unknown type name ' cfe_sb_cmdhdr_t ' i want to believe that i am missing a step in the documentation somewhere , but when i bring ds into my apps folder , i update my mission_global_applist with ds and attempt to build and get this error amongst others . / cfs / apps / ds / fsw / src / ds_msg . h : <number> : <number> : error : unknown type name ‘ cfe_sb_cmdhdr_t ’ is there a script or tool that should be running that i am unaware of ? the training documentation here does not imply any other steps in exercise <number> which is similar . <url>",0
"conditional compile macro uses wrong style of <allcaps> true </allcaps> in ds_file . c the line reading <hashtag> if </hashtag> ( ds_move_files = = <allcaps> true </allcaps> ) causes the subsequent section of code to always compile if <allcaps> true </allcaps> is not defined , and if ds_move_files is defined ; and ds_move_files is required to be defined by compiler directives in ds_verify . c . throughout the rest of ds code , the lower - case c keyword ' true ' is used , i . e ' <hashtag> if </hashtag> ( ds_move_files = = true ) . when ds_move_files is not set to ' true ' in ds_platform_cfg . h , the build fails because ' movename ' does not get defined in ds_table . h , and the code section in ds_file . c needs it to be defined .",0
