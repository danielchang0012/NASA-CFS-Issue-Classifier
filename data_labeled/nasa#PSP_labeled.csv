text,label
"cfe_psp_module_findbyname does not find base modules <section> <allcaps> psp </allcaps> modules can be enabled in two ways , either by adding to the <code> in targets . cmake ( for optional / platform - specific hardware access routines ) or a set of "" standard "" modules listed in <code> file under the <allcaps> psp </allcaps> . problem is that <code> only looks at the user - specified list ( from targets . cmake ) and not the list of standard modules . this is needed for hs because the <code> monitor ( for cpu utilization ) is now listed as a standard module for pc - linux <allcaps> psp </allcaps> , but this inadvertently made it un - findable . <section> run the current build of framework + hs app ( which relies on being able to locate the <code> module ) . hs does not find a module and disables <allcaps> cpu </allcaps> usage reporting . <section> hs should find the module and enable usage reporting <section> joseph hickey , vantage systems , inc .",0
"automate generation of integration candidate branch <section> generating the integration candidate branch is a very straightforward process , although it can be highly time consuming . automating this process can result in significant time savings . <section> use a github workflow to automatically merge a set of pull requests into the integration candidate branch and push it to github . <section> scripts can be used to simplify this process as well , but it requires setup by the person maintaining the repository and is not as portable . <section> dylan baker / <allcaps> nasa gsfc </allcaps> <number>",2
"add <allcaps> api </allcaps> for obtaining system health statistics <section> <allcaps> cfs </allcaps> apps ( such as hs in particular ) need to monitor and report the health of the system , in particular <allcaps> cpu </allcaps> usage . unfortunately this info can vary wildly and there is no standardized way of getting it via <allcaps> posix </allcaps> or other os apis - it is generally only obtainable via platform - specific access methods such as the <code> filesystem on linux . <section> design an <allcaps> api </allcaps> that can obtain system health statistics . initially this must support per - core <allcaps> cpu </allcaps> usage , but should be extendable to support arbitrary variables such as temperature , network + disk i / o stats , <allcaps> ram </allcaps> + swap use , etc . basically anything that is typically shown in a pc "" health monitor "" app . <section> initially the <allcaps> cpu </allcaps> usage stats would allow nasa / hs # <number> , nasa / hs # <number> , and nasa / hs # <number> to be resolved . <section> joseph hickey , vantage systems , inc .",2
"add example of hardware - based 1 hz signal <section> a few releases back the 1 hz configuration was changed to be initiated by <allcaps> cfe time </allcaps> itself , rather than started by the <allcaps> psp </allcaps> . this was done in order to resolve a race condition where the signal arrived before <allcaps> cfe time </allcaps> was ready to process it . however , as a result , we no longer have a good example of a "" real "" hardware - based 1 pps / 1 hz signal driving the <allcaps> cfe time </allcaps> 1 hz input , as the current example uses a software kernel timer only . <section> create an alternative to the <code> module that reads a 1 pps signal from an external reference such as a serial port - as a number of <allcaps> gps </allcaps> receivers do use a serial line to provide 1 pps along with location data . this probably still would not be directly usable but it would at least provide a ( closer ) example of how this could be achieved , that the user could modify for their particular setup . <section> there are two other ways this could be synced : <number> . use an external process like gpsd to sync the kernel clock to the 1 pps , then use <code> as - is . the result is that the 1 hz <allcaps> time </allcaps> signal will be in phase with the reference signal , but it will not occur at the same time . this phase delay may or may not acceptable depending on the application . this does have the advantage of having only a single time domain across the entire system ( kernel / os clocks and timers will all be synchronous with the <allcaps> gps </allcaps> time ) and it is totally transparent to apps - they just read time as normal . <number> . use an external sync routine ( last argument to <code> to wait for the 1 pps . this is similar to <number> but easier to implement ( no external dependencies ) however the result will be more jittery and apps must know that this timebase may not be synchronous with the os / kernel clock . <section> joseph hickey , vantage systems , inc .",2
"separate network logic in pc - rtems to support generic targets <section> the only non - generic implementation in pc - rtems is the network setup , which prevents use on a generic target . <section> isolate / separate network setup to support source selection or similar configuration option . consider configuring from target defs or similar to avoid changes required within psp . <section> could make an additional psp , but does not seem worth duplicating all the pc - rtems code that is not specific to pc ' s . <section> specific parts : <url> <url> might also benefit from making / mnt / eeprom a config param . <repeated> depends on how / where this is actually set up by the <allcaps> psp </allcaps> . would be nice to shift away from "" eeprom "" and use generic "" nonvol "" . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cppcheck <number> style warnings , constparameter <section> from unrelated run : <url> <html> <body> < ! - - startfragment - - > severity | location | error id | issue - - | - - | - - | - - style | fsw / pc - linux / src / cfe_psp_memory . c : <number> | constparameter | parameter ' ptrtokernelsegment ' can be declared with const style | fsw / pc - linux / src / cfe_psp_memory . c : <number> | constparameter | parameter ' sizeofkernelsegment ' can be declared with const < ! - - endfragment - - > </body> </html> <section> squash warnings <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
remove obsolete <code> <section> <code> is no longer used for anything . <url> <section> remove <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"wrong type of arguments to snprintf <section> function call with incorrect argument type . this argument should be of type ' unsigned int ' but is of type ' pcs_wind_tcb *'. <section> same behavior , fix error <section> <url> <section> vxworks <number> / mcp750 <section> from codeql use "" % 0 8 lx "" as the format and explicitly cast the argument as "" ( unsigned long ) "" <section> ariel adams , <allcaps> mcsg </allcaps> tech",2
"fix # <number> , create changelog file fixes # <number> <section> n / a <section> users can see important information on readme without changelog information . <section> ariel adams , <allcaps> mcsg </allcaps> tech",1
"cfe_psp_module_findbyname uses incorrect list limit / stop condition <section> the internal variable <code> is used as the limit for searching for a matching name in the <allcaps> psp </allcaps> module list here : <url> however , a while back the set of modules was split into two , so now we have separate lists : cfe_psp_base_module_list global_configdata . pspmodulelist the <code> value reflects the total number of entries ( sum ) of both lists . but the <code> function is only searching the second list ( global_configdata . pspmodulelist ) . this means that if there is no matching entry , it might read beyond the end of the list . <section> call <code> on a module name that does not actually exist in the system . the loop will segfault when it gets to the <allcaps> null </allcaps> entry that normally terminates the <code> . <section> the search should cover <code> and <code> like the init function does <section> init function uses a helper function that does each list at : <url> search function should mirror this . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc . on behalf of alan cudmore ( <allcaps> gsfc </allcaps> )",0
"powerpc specific include in vxworks timebase <section> there ' s a powerpc specific include in the timbase_vxworks here : <url> it would be good to make this module vxworks generic if possible . <section> i am not sure what ' s needed from that include , but if it is necessary it would be nice to abstract it out or ifdef it in only for <allcaps> ppc </allcaps> . <section> nothing particular in mind , but any method to make that module generic vxworks would work . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ping <user>",2
<code> defined but not used in vxworks timebase implementation <section> defined here : <url> expected use here : <url> <section> use the define or delete it . note it ' s defined as <number> and the function returns <number> so behavior would not change . <section> none . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ping <user>,2
"add psp_status_t and associated macros / wrappers / apis <section> same justification as nasa / cfe # <number> , supports clean handling / reporting of <allcaps> psp </allcaps> status . <section> add the type and wrappers , note actual use / enforcement can be later but elements need to exist in draco to maintain future compliance . <section> none . <section> - nasa / cfe # <number> - nasa / osal # <number> - nasa / cfe # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
uninitialized variable static analysis warning <section> uninitialized variable static analysis warning observed ( license restricts publishing ) <section> fix <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"provide example for setting processor affinity ( <allcaps> smp </allcaps> example ) <section> <allcaps> smp </allcaps> is a hot topic these days , we keep saying it ' s easy but no example provided showing how one could set a thread ' s <allcaps> cpu </allcaps> affinity . <section> provide an example for the "" simplest "" identified method for assigning threads to cores . <section> there ' s numerous approaches , this just shows one that assigns threads when created . one could manage threads from a platform specific app , do power management , fault management , etc . <section> see <url> <url> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
missing doxygen for function cfe_psp_setupreservedmemorymap missing the doxygen for function cfe_psp_setupreservedmemorymap <url>,1
apply latest copyright header <section> updated copyright header <section> update <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"remove explicit file name references in doxygen file comments to avoid warnings <section> file comment without a filename implies the comments apply to the current file . adding the file name makes doxygen try to match that file . the issue is there ' s multiple files with the same name , so doxygen gets confused unless you add full path . really it ' s just overhead since the point is to comment the current file . sample warning if you <code> from the bundle : ` ` <code> os - impl - binsem . c ' supplied as the second argument in the \ file statement matches the following input files : / home / jhageman / cfs / cfs - github / osal / src / os / posix / src / os - impl - binsem . c / home / jhageman / cfs / cfs - github / osal / src / os / rtems / src / os - impl - binsem . c / home / jhageman / cfs / cfs - github / osal / src / os / vxworks / src / os - impl - binsem . c please use a more specific name by including a ( larger ) part of the path ! ` ` ` <section> easiest to just remove the name since for every case the comment applies to the current file <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
apply header guard standard formatting <section> nonstandard guard used <section> apply standard <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"module list count includes both <code> and the configurable <code> but some apis use just the latter . <section> both lists are initilized : <url> which increments the <code> : <url> but then the <allcaps> api </allcaps> ' s use <code> to limit references to just the configurable list ( and other related issues ) : <url> <section> for example if there ' s <number> entry in <code> and <number> in the additional <code> , then <code> will = = <number> . then if you call cfe_psp_module_findbyname with any module not in the <code> it ' ll actually go off the end of the <code> since it ' s limited to <number> . <repeated> and it will not find anything in the <code> . <section> a complete module list should be used for apis that includes both the built in and added . <section> see above . <section> n / a - code inspection <section> stakeholder identified issue <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"argument cannot be negative <section> tempfd is passed to a parameter that cannot be negative . function open ( "" . reservedkeyfile "" , <number> , <number> ) returns a negative number . <section> add an if statement to ensure that tempfd is not a negative number . <section> <url> <section> coverity : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",0
"resource leak <section> handle variable filedescriptor going out of scope leaks the handle . <section> free filedescriptor or point to mmap <section> <url> <section> coverity : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",0
"<allcaps> toctou </allcaps> bug for open <section> calling function open that uses "" <allcaps> eeprom </allcaps> . <allcaps> dat </allcaps> "" after a check function . this can cause a time - of - check , time - of - use race condition . <section> the most basic advice for <allcaps> toctou </allcaps> vulnerabilities is to not perform a check before the use . could also use the o_creat and o_excl flags of <allcaps> posix </allcaps> ' s open ( ) function . <url> <url> <section> <url> <section> coverity : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",0
"too strict of check before calling "" init "" function of module <section> for <allcaps> psp </allcaps> modules the initialization is only called if the module type is "" <allcaps> simple </allcaps> "" - but this is not necessary to enforce , because the intent is to allow this to be extended to other module types as the mission requires . since the "" init "" function pointer is a fixed / defined entry ( so all modules have it , regardless of type ) and it is already permitted to be <allcaps> null </allcaps> if it is not needed , then there is no real reason to restrict calling it to the "" <allcaps> simple </allcaps> "" module type . <section> define an extension module type and try to use it with caelum . it will not be initialized as expected , the init call is skipped . <section> if a module provides an init function , it should be called , regardless of whether the module type is "" <allcaps> simple </allcaps> "" or something else . <section> check is here : <url> through some form of evolution it was checking specifically for <code> only , but it would be better to check that <code> instead . <section> ubuntu <section> only breaks when trying to add modules of other types ( extensions ) . could theoretically be fixed in other ways , but still , the intent of this code is only to confirm that the module structure is initialized to something before invoking a function pointer . so it is more correct to check that it is not invalid , rather than checking specifically for one value . <section> joseph hickey , vantage systems , inc .",0
"report actual errno / error string from c library calls <section> during startup , the <allcaps> psp </allcaps> makes several calls into c library functions , and an unexpected failure of these functions causes the system to abort / not start . however , the error messages reported do not include any detail of what went wrong . example : <url> <section> on any system call that sets the global <code> value , if that function fails , this should be included in the error that is printed to the console . at a bare minimum , could include the numeric value , but far preferable to use the system library call to print in a more human - friendly form , such as <code> or <code> if the system provides it . <section> should probably also not use <code> here due to its extra buffering , see # <number> , # <number> <section> joseph hickey , vantage systems , inc .",2
"add sleep ( <number> ) before exit call when printing <section> user reported os_print does not display before exit , for example : <url> <section> add sleep ( <number> ) between prints and exits to give it a chance <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"improve <allcaps> psp </allcaps> config override concept <section> historically <allcaps> psp </allcaps> ' s have been treated as clone - and - own , but to be a bit friendlier for reuse it would help to support a more general configuration override concept that would not break unit testing . example issue - if a user overrides cfe_psp_config . h for a specific target , it ends up getting used by unit test for the other psps that rely on unique / conflicting cfe_psp_config . h elements . this can be avoided by conditionally <allcaps> not </allcaps> pulling in a cfe_psp_config . h override for native or when enable_unit_tests = <number> unless trying to unit test the system it applies to but this really is not pretty if it ' s a multi - build and you really do want to coverage test using overridden configs . basically a user had an override to the linux <allcaps> psp </allcaps> config , but unit tests build for vxworks coverage and they tried to use the linux <allcaps> psp </allcaps> coverage override . <section> allow for easily disabling <allcaps> psp </allcaps> unit tests for the non - target psps . likely a good thing for <allcaps> osal </allcaps> also . really users only need to test what they are using , just the open source bundle needs to test them all . also would help to transition to the <allcaps> osal </allcaps> pattern for setting cmake variables , and use those to set the defines with default backups . the built configs could then easily override just what they want , and the common - across - psp settings would be portable . maybe the config headers should have unique names associated with the implementation vs all being called cfe_psp_config . h since really they are not portable . or separate the unique and portable settings . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , from conversation with <user>",2
"fix # <number> , rename doc to docs <section> this is a simple rename of the <code> subdirectory , for consistency with other modules . fixes # <number> <section> build cfe documentation <section> none , but may affect scripts / tools that look for / link to a specific "" doc "" directory name ( none found for <allcaps> psp </allcaps> based on my initial checks , but there could potentially be some links hidden elsewhere ) . <section> ubuntu <section> joseph hickey , vantage systems , inc .",1
"rename "" doc "" to "" docs "" for consistency <section> most other cfs modules put the documentation in a <code> subdirectory , except <allcaps> osal </allcaps> and <allcaps> psp </allcaps> , which put it in <code> <section> be consistent , use <code> since this is what cfe and the majority of cfs apps use . <section> inconsistent naming means over complicated scripts and tools , that have to look in multiple different possible names / locations <section> joseph hickey , vantage systems , inc .",2
"cfe_psp_memvalidaterange ( ) always fails on <number> - bit targets <section> when attempting to telemeter memory pool stats , <allcaps> cfe es </allcaps> calls <code> on the address of the pool data . however on <number> bit linux this function ends up always returning an error , because the internal table is not set up for <number> bit address <section> run <allcaps> cfe </allcaps> on a <number> - bit pc - linux platform , then issue <allcaps> cfe es </allcaps> command code <code> ( <number> ) with a valid pool id . this always fails and says invalid handle , even though the handle is actually fine , because it is not passing the <code> check . <section> check should pass . <section> if applicable , add references to the software . <section> ubuntu <number> ( <number> - bit ) <section> this table is still using <code> sizes . it must have been missed in the previous updates that changed much of this to <code> . <section> joseph hickey , vantage systems , inc .",0
"remove "" global_psp_configdata "" object <section> this global / constant structure object was originally added to facilitate modular linking , but is not really necessary anymore , and was never really used . as it stands today , only the <allcaps> psp </allcaps> has it , which makes it a bit of an anomaly in the system context . <section> clean it up , remove this extra global object . <section> in contrast the similar object <code> object _is_ used , as it facilitates getting <allcaps> psp </allcaps> access to constants defined in <allcaps> cfe </allcaps> at link time , without <allcaps> psp </allcaps> having to directly <code> the header that defines it at compile time ( as this would create a backwards dependency ) . the <code> object is the same idea but was for <allcaps> psp </allcaps> constants , however there is not the same dependency structure here , so it was never really needed . only the version info was ever used externally by <allcaps> cfe </allcaps> , and now that is replaced by an <allcaps> api </allcaps> call to get the info , ( recent prs nasa / psp # <number> and nasa / cfe # <number> ) so there is no need for this global at all anymore . <section> joseph hickey , vantage systems , inc .",2
"add missing "" cfe_psp_version . c "" to source list <section> the <code> file was not included in the <allcaps> psp </allcaps> source list as it should have been . <section> referencing any version info call results in linker error . <section> link should succeed <section> ubuntu <number> <section> this was supposed to be part of previous pr # <number> . somehow it got missed / omitted from that pr . ( too much stuff going on at once maybe . <repeated> ) <section> joseph hickey , vantage systems , inc .",0
"<allcaps> psp </allcaps> headers need a scrub / cleanup <section> the <code> header file puts its comments / description _after_ the function declaration and does not use doxygen style . it also contains at least a few functions that are not used by <allcaps> cfe </allcaps> and also may not even be implemented <section> cleanup . at least fixup comments to be more readable - put before declaration and ideally also add some doxygen markup . at least the <code> function appears to be not implemented at all - recommend removing this prototype . <section> other functions which are inconsistently implemented or too hardware specific to be useful , might be targets for deprecation / removal ( these are not used by <allcaps> cfe </allcaps> , either ) : - <code> - why an init but no read / write / mount / etc ? seems like a thought that was never completed . - <code> - note this is different than <code> - <code> - not well defined what this value really is , so not really usable in portable apps . these are referenced but have some issues : - <code> - the definition is inconsistent , sometimes it maps to a real clock and sometimes its more of an interval timer with an arbitrary wrap point , needs more info / definition at least because it is generally hard to use __correctly__ . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , add contributing guide <section> fix # <number> added a contributing guide that links to the main cfs contributing guide . <section> users should be able to view the contributing guide contents easily from the <allcaps> psp </allcaps> repo . <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"add contributing guide <section> add a contributing guide for the <allcaps> psp </allcaps> repo . <section> create a contributing guide markdown file . in the guide , add a link to the cfs contributing guide . <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"should not use os_getlocaltime ( ) for <allcaps> psp </allcaps> timebase <section> the <allcaps> psp </allcaps> timebase ( returned via <code> ) is used by <allcaps> cfe </allcaps> performance monitoring and it is important that this time is stable and does not get reset . but depending on the implementation of <allcaps> osal </allcaps> , it may be possible to reset / change the <allcaps> osal </allcaps> "" local time "" . at least there is an <code> function defined - whether it works or not depends on what kernel resource was used to implement this . <section> on pc - linux and other <allcaps> posix </allcaps> - like systems this should use <code> with clock_monotonic directly , instead of calling <allcaps> osal </allcaps> . furthermore this function can be split into a separate module and therefore used on any system that provides <code> <section> see nasa / osal # <number> - <code> may be redefined / clarified to indeed refer to "" real "" time , which would make it less suitable for this purpose used here . <section> joseph hickey , vantage systems , inc .",2
"scrub for include < > vs "" "" use ( < > should be system only ) <section> < > used on non - system header includes . example : <url> <section> full scrub / fix <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"make <allcaps> psp </allcaps> more modular <section> it is currently not easy to override items in the "" shared "" directory even for platforms which it does not apply . for example , in the "" cfe_psp_ram . c "" and "" cfe_psp_port . c "" files this contains code that directly writes to physical memory addresses , which may work on mcp750 , but will likely segfault on an pc - linux system . the code should be better structured as modules so the "" correct "" implementation can be used for each system without breaking the other system . <section> most of the code in <code> should be modularized so it can be selectable per - platform . each platform ( mcp750 , pc - linux , pc - rtems , plus whatever others users might have ) then becomes just a collection of modules . <section> there really should not be much in the <code> directory ( the existence of such a directory implies its not platform - specific , but yet its in the <allcaps> psp </allcaps> ) . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , add testing tools to the security policy <section> fix # <number> updated the security policy to include the type of testing done for <allcaps> psp </allcaps> or the cfs bundle under a new section titled "" testing "" . provided a disclaimer that under the apache license , liability is not provided . added that security reports should be emailed . <section> users should now be aware of the type of testing <allcaps> psp </allcaps> or the cfs bundle undergoes . <section> references : <url> <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"add testing tools to the security policy <section> users are unaware of how cfs / <allcaps> psp </allcaps> is tested . by providing this information , transparency is provided to the community which promotes trust . <section> the security policy should inform users what tools are being used to test cfs / <allcaps> psp </allcaps> while being cautious of liability issues . to do so , we can state explicitly that our software does not provide liability under the apache license . the security policy should inform users that they may view the <allcaps> lgtm </allcaps> results . the policy would state that the alerts from <allcaps> lgtm </allcaps> may not be accurate , since they cannot be dismissed . add that security report should be emailed . <section> references : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"static analysis : ' unsigned int ' but is of type ' pcs_wind_tcb * ' <section> see < <url> detected in <code> not sure we might want to dismiss it <section> run codeql <section> < img width = "" <number> "" alt = "" screen shot <number> - <number> - <number> at <number> <number> <number> pm "" src = "" <url>",0
"add codeql analysis to workflow <section> codeql analysis not implemented in submodules <section> add so alerts are generated on pull requests to submodules <section> none <section> codeql is run at the bundle ( nasa / cfs ) level , but link to code in submodules does not work . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
c + + comment style and commented out code violations <section> c + + comment style and commented out code violates style guidelines <url> <section> clean up <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
version string not reported correctly <user> commented on fri <date> <url> <section> <code> note missing <code> for psp <section> add <code> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"fix # <number> , create security policy <section> fix # <number> created a draft of a security policy markdown file for <allcaps> psp </allcaps> . the purpose of a security policy is to inform users on how to submit bugs or vulnerabilities . it is ideal to include a section for supported versions . <section> optional sections that may be included : - what to expect security - wise such as what type of testing is done - address privacy concerns - supported versions - license - known vulnerabilities references to public security policies : <url> <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"implement a security policy <section> create a security policy for users on how to report security vulnerabilities . <section> the security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns . <section> additional sections that may be included : - what to expect security - wise such as what type of testing is done - address privacy concerns - supported versions - license - known vulnerabilities references to public security policies : <url> <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"re - add static code analysis for pull requests <section> the travis ci runner ran cppcheck which we do not have anymore <section> submit pull request , notice that travis ci does not run anymore . <section> a success or failure report of a cppcheck run . <section> check from travis . yml <code> <section> n / a <section> part of ongoing travisci to github actions migration",0
"add workflow timeouts and format check <section> - no timeout in workflow ( default is <number> minutes ) could consume allocations - missing format check - remove old travis configuration - update badges <section> add timeout and format check <section> none <section> similar to transition in nasa / cfs <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <allcaps> edit </allcaps> - was general workflow ticket ( duplicate of # <number> ) , made specific for remaining changes",2
"update <allcaps> psp </allcaps> to use os time conversion / access methods <section> <allcaps> psp </allcaps> is directly accessing specific fields within <code> which will break when the struct definition changes . <section> instead of directly accessing the <code> and <code> fields within <code> , use the accessor functions to convert / extract the relevant info from the value instead . <section> see nasa / osal # <number> <section> joseph hickey , vantage systems , inc .",2
"remove obsolete reference to os_taskregister <section> obsolete comment ( in each psp , but sample below ) : <url> <section> remove obsolete comment <section> none . <section> nasa / osal # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"update unit test stubs to use size_t <section> as part of nasa / osal # <number> the unit test routines were updated to use <code> rather than <code> for object sizes . <section> <allcaps> psp </allcaps> stub implementations need to use <code> instead of <code> to avoid a compiler type mismatch error on some platforms . <section> this needs to go with / dependency on pr nasa / osal # <number> . this issue is only for stubs as it will cause a build issue without it . there will be a separate change / to - do item to fix <allcaps> psp fsw </allcaps> apis that are still using uint32 . <section> joseph hickey , vantage systems , inc .",2
"graceful shutdown for vxworks / mcp750 <section> when the <allcaps> cfe </allcaps> "" restart "" command is executed , it calls <code> . in the mcp750 implementation , this ultimately just invokes the <code> kernel <allcaps> api </allcaps> . this is rather extreme - - all apps / tasks are still running when this command comes in , and this just suddenly reboots the <allcaps> cpu </allcaps> with no notice . those tasks could have been doing something important when they suddenly get the carpet ripped out from underneath . <section> should do some sort of graceful shutdown like linux does with <allcaps> ctrl </allcaps> + c handling . cancel or suspend all running tasks first so that when the "" reboot ( ) "" is called there should not be any other activity going on . <section> <section> during <allcaps> cfe </allcaps> <number> testing there was some occasional spurious exceptions observed when issuing the <allcaps> cfe </allcaps> restart command - causing it to effectively execute a <allcaps> processor </allcaps> restart instead of the intended <allcaps> poweron </allcaps> reset . i was not able to reproduce that with the core framework distro , but my hypothesis is that there were possibly some apps running and doing something when the reboot was initiated and this set the stage for indeterminate behavior . <section> joseph hickey , vantage systems , inc .",2
refactor ut_setforcefail describe the bug ut_setforcefail was refactored to ut_setdefaultreturnvalue for <url> it needs to have its name changed here as well . expected behavior change ut_setforcefail to ut_setdefaultreturnvalue additional context part of <url> reporter info alex campbell,2
"apply standard formatting <section> various formatting styles in codebase <section> apply standard formatting , if it ' s an improvement then submit for fasttrack ( minimize impacts to open work ) . if standard format requires hand mods , update such that application of standard format in the future does not require repeat modification . <section> leave as - is if not an improvement . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> psp </allcaps> coverage tests fail to build on the mcp750 / vxworks <number> target <section> when building for mcp750 with all unit / coverage tests enabled , an error occurs : <code> <section> prepare using <code> and sample_defs config then run <code> <section> build should succeed <section> <code> build machine with mcp750 target <section> joseph hickey , vantage systems , inc .",0
"errors printed using os_printf may never appear <section> os_printf uses an additional output buffer with a low priority task to move the data from the buffer to the console . in the case of fatal errors which cause the process to exit as a result , the output may not get transferred before the process exits and the task is killed . <section> see # <number> of a case where ( for other reasons ) shmget failed but no error message was shown . <section> error messages should be shown <section> this is particularly an issue for errors which cause an immediate process exit . so long as the process keeps running and the output task is not immediately cancelled , there should not be an issue . recommendation is to use <code> for fatal error messages , as even the stdout stream might have some line buffering in the c library , but the stderr stream should be ( relatively ) unbuffered . <section> joseph hickey , vantage systems , inc . ( based on previous report in # <number> )",0
"update <allcaps> psp </allcaps> to use osal_id_t type instead of uint32 <section> the <code> typedef was recently added to <allcaps> osal </allcaps> to differentiate <allcaps> osal </allcaps> ids from simple integers . <section> <allcaps> psp </allcaps> should use this type , instead of <code> , for all the places where an id is stored . <section> using the typedef helps future - proof the code for possible id type changes . <section> joseph hickey , vantage systems , inc .",2
"set thread name on pc - linux <section> <allcaps> osal </allcaps> currently does not inform the os kernel of the actual thread names , because this is not a standard <allcaps> posix </allcaps> feature . but linux has this capability and it helps with debugging to see real thread names . <section> use the <allcaps> osal </allcaps> callback framework introduced in nasa / osal # <number> to set the thread name at the kernel level when using the <code> <allcaps> psp </allcaps> . <section> originally suggested in nasa / osal # <number> <section> joseph hickey , vantage systems , inc .",2
"add support for <allcaps> rtems </allcaps> <number> - cmake updates and pc - rtems <allcaps> psp </allcaps> readme updates <section> the cfs bundle currently supports <allcaps> rtems </allcaps> <number> . now that <allcaps> rtems </allcaps> <number> has been released , i would like to update the necessary components to support <allcaps> rtems </allcaps> <number> on the pc - rtems platform . this involves minor modifications to the cfe repository , the <allcaps> psp </allcaps> repository , and the <allcaps> osal </allcaps> repository . these changes can be done in such a way that preserves the current <allcaps> rtems </allcaps> <number> support and adds <allcaps> rtems </allcaps> <number> support . <section> i would like to add support for <allcaps> rtems </allcaps> <number> while maintaining compatibility with the existing <allcaps> rtems </allcaps> <number> support . for the <allcaps> psp </allcaps> repository there are a few minor changes needed to allow support of <allcaps> rtems </allcaps> <number> and <allcaps> rtems </allcaps> <number> : - minor changes in the <allcaps> psp </allcaps> cmake / modules / platform / <allcaps> rtems </allcaps> . cmake file - changes to the pc - rtems readme and the addition of an <allcaps> rtems </allcaps> <number> specific readme <section> alternatives include : - not supporting newer versions of <allcaps> rtems </allcaps> , but several projects will depend on <allcaps> rtems </allcaps> <number> support . - dropping <allcaps> rtems </allcaps> <number> support and just making the changes needed for <allcaps> rtems </allcaps> <number> , but there may be projects that depend on <allcaps> rtems </allcaps> <number> . we can consider dropping <allcaps> rtems </allcaps> <number> support on a future release . <section> <section> alan cudmore / <allcaps> nasa gsfc </allcaps> code <number>",2
"fix # <number> , install unit test to target directories <section> fix # <number> , install unit test to target directories <section> make unit tests , install , observe they install in correct directory <section> correct install directory <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> none . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"coverage test not installed in correct directory <section> coverage test not installed in correct directory - see nasa / cfe # <number> <section> make unit tests , make install , observe unit test in build directory . <section> should go in target directory ( build / exe / cpu1 for sample config ) <section> <url> <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , add cfe_psp_getprocessorname <section> fix # <number> - add cfe_psp_getprocessorname <section> added test code in sample_app to output <allcaps> sc id </allcaps> , <allcaps> cpu id </allcaps> , and <allcaps> cpu name </allcaps> build and ran ( pc - linux only ) , tested with both default options and <code> , confirmed expected output <section> now provides get processor name <allcaps> api </allcaps> <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main ( + cfe / osal main ) + this change . <section> nasa / cfe # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , set stub spacecraft id to historical value ( 0x 4 2 ) <section> fix # <number> - set the stub config data spacecraft id to historical value 0x 4 2 , was <number> . <section> nominal build / test , passed . <section> anything using the stub config data will now get the default . the point is really to reduce confusion the mismatch could cause . nothing should actually be using this stub data directly . <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main ( + cfe / osal main ) + this change <section> nasa / cfe # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"hardcode of spacecraft id to <number> in psp unit test stub <section> likely should be 0x 4 2 since that ' s the historical sample setting . not critical since this is just stub data , but easier to understand intent if the settings are consistent . <section> default spacecraft id to the historical setting . <section> some random value , or use cfe_spacecraft_id_value <section> nasa / cfe # <number> , nasa / cfe # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , remove classic make artifacts <section> fix # <number> - removes classic make artifacts <section> <code> ( passed ) <section> none , these files are no longer used anywhere <section> - hardware : cfs dev server - os : ubuntu <number> - versions : main bundle ( main cfe / osal since they were not in sync ) + this change <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"use a changelog to keep track of changes instead of having them in the readme <section> the version history in the readme file clutters useful information <section> move the "" version history "" from <code> to <code> and start following this spec : <url> <section> move changelog section in the readme to a section at the very bottom of the file <section> none <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",2
vxworks build broken - missing include path for net / uio . h <section> <code> <section> steps to reproduce the behavior : <number> . set tgt1_system to ppc - vxworks6 . <number> and try to build for mcp750 <section> should build <section> old includes : <url> current : <url> <section> - cfs vxworks host - os : building for vxworks6 . <number> - versions : current bundle <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
add replacement for deprecated <allcaps> osal </allcaps> - os_intlock and os_intunlock <section> os_intlock and os_intunlock were deprecated from <allcaps> osal </allcaps> since there wasn ' t a platform independent way to implement the actual intent . <section> need a replacement implemented where possible to support the concept of executing a uninterrupted block of code . <section> non - portable implementation of uninterruptible code ? <section> memory manager has a load memory with interrupts disabled command . perhaps operationally could be done differently ? * <allcaps> note </allcaps> * - priority to come up with a solution to support upcoming mm release . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,3
"increase exception action choices in <allcaps> psp </allcaps> handler <section> if , during * application development * , a task fails and raises a kernel exception , the <allcaps> psp </allcaps> handler can only choose between processor reset ( zero ) or restart the application ( non - zero value ) . when that happens , all the information about the exception are lost during the memory reset . <section> add extra options to the exception action field in the startup script to “ do nothing ” in case of exception , and therefore keep memory intact for task autopsy . maybe if exception action is below zero ignore . <section> <section> i can see this easily expanded to handle special cases where we want to recover data from the failed task , or communicate to another task / application this information . <section> claudio olmi <allcaps> nasa </allcaps> - <allcaps> jsc </allcaps> doyle mills <allcaps> nasa </allcaps> - <allcaps> jsc </allcaps>",2
"add build name and build number to version . h <section> need a better way to describe versions during development <section> add build name and build number to version . h as discussed , we will add a a build name string and a continuously incrementing build number to <code> <section> see notes from <allcaps> ccb </allcaps> : < <url> <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",2
"fix # <number> , set exception context size <section> store the size of the stored data into the exception record on mcp750 - vxworks platform . fixes # <number> <section> build and sanity test <allcaps> cfe </allcaps> . unit testing via <allcaps> psp </allcaps> coverage tests ( separately in issue # <number> ) <section> the exception context stored on mcp750 has a valid size . <section> ubuntu <number> running coverage tests for mcp750 . <section> joseph hickey , vantage systems , inc .",0
"mcp750 should set up a timebase like other psps do <section> mcp750 currently uses a ( very inaccurate ) infinite loop with an <code> to mimic a 1 hz callback . this is inaccurate as it drifts over time and not the best way to create a 1 hz tick . <section> in pc - linux and pc - rtems this just sets up a timebase object so cfe_time ( or anything else ) can register their own 1 hz timer and have it by synchronized to the <allcaps> psp </allcaps> time source . recommend to use this on mcp750 too . <section> infinite loops with no exit condition are also bad for unit testing . this code to set up a <allcaps> psp </allcaps> timebase using kernel timer could be modularized , as the implementation is already abstracted in <allcaps> osal </allcaps> . <section> joseph hickey , vantage systems , inc .",2
"mcp750 needs to set context size on exception handling <section> mcp750 is not storing the context size , which results in the size being <number> and therefore no extended data is saved to the log file even though its in memory . <section> found in unit testing with new <allcaps> psp </allcaps> coverage tests ( not yet merged ) <section> the <code> function should set the <code> field to the amount of data it has actually stored in the buffer . this is then used later if a file dump is requested to write the exception data to a file . <section> ubuntu <number> running <allcaps> psp </allcaps> coverage tests . <section> joseph hickey , vantage systems , inc .",0
"build <allcaps> psp </allcaps> components as a separate targets <section> as part of coverage testing that is being introduced in # <number> , it will require rebuilding the <allcaps> psp </allcaps> code more than once , to make a variant that include coverage instrumentation . this requires a bit of restructuring to support . <section> build components ( e . g . shared directory ) as separate targets so they can be added more than once with different configurations . define all target names using a separate re - definable string such as <code> rather than <code> to avoid target name conflicts . <section> prerequisite to # <number> , isolated to separate issue because it affects <allcaps> fsw </allcaps> headers and build scripts , not just unit test , and therefore warrants separate review . <section> joseph hickey , vantage systems , inc .",2
"create <allcaps> psp </allcaps> unit test framework and example <section> need to provide example of <allcaps> psp </allcaps> unit tests . coverage and functional testing are required but require a different approach . this issue will focus on the coverage test portion . <section> provide a framework and example to perform <allcaps> psp </allcaps> coverage test . <section> using mcp750 as a proof - of - concept . <section> joseph hickey , vantage systems , inc .",2
"add cfe_psp_getprocessorname ( ) <allcaps> api </allcaps> <section> the build configuration specifies a spacecraft id , <allcaps> cpu </allcaps> / processor id , and a <allcaps> cpu </allcaps> / processor name , but the <allcaps> psp api </allcaps> only gives runtime access to two of the three : <code> <section> should add : <code> <section> continue to offer incomplete information from <allcaps> psp api </allcaps> . <section> related to nasa / cfe # <number> <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , reference generic <allcaps> osal bsp </allcaps> <section> the change in nasa / osal # <number> makes the <allcaps> bsp </allcaps> modules more generic and changes the name . this changes the <allcaps> psp </allcaps> reference to be compatible . <section> build for all platforms and sanity check <allcaps> cfe </allcaps> operation <section> no change to behavior . <section> ubuntu <number> ( native ) <allcaps> rtems </allcaps> <number> on pc686 / <allcaps> qemu </allcaps> vxworks <number> on mcp750 <section> makes build compatible with nasa / osal # <number> <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , remove os_volumetable <section> removes all references to the os_volumetable in all psps . replace with call to os_filesysaddfixedmap ( ) for the fs_based entries . other types are already handled at runtime anyway . fix # <number> <section> build and sanity check <allcaps> cfe </allcaps> on all supported platforms ( vxworks , linux , rtems ) <section> no impact to behavior . <section> ubuntu <number> ( native ) <allcaps> rtems </allcaps> <number> on pc686 / <allcaps> qemu </allcaps> vxworks <number> on mcp750 <section> makes code compatible wtih nasa / osal # <number> which deprecates the os_volumetable <section> joseph hickey , vantage systems , inc .",2
"reference the generic <allcaps> osal </allcaps> bsps <section> recent <allcaps> osal </allcaps> changes make the <allcaps> bsp </allcaps> layer more generic for vxworks and linux . in nasa / osal # <number> this changes the name from mcp750 - vxworks to generic - vxworks , and from pc - linux to generic - linux , respectively . <section> change the <allcaps> psp </allcaps> references to match the <allcaps> osal bsp </allcaps> name . <section> joseph hickey , vantage systems , inc .",2
"deprecate definition / use of os_volumetable <section> <allcaps> osal </allcaps> has an <allcaps> api </allcaps> where volume table mappings can be added during the startup code , rendering the static <code> object unnecessary . <section> use the <allcaps> osal api </allcaps> to register the fs_based file system mappings , and remove os_volumetable . <section> joseph hickey , vantage systems , inc .",2
"implement exception logging / capture in <allcaps> psp </allcaps> <section> exception handling in <allcaps> cfe </allcaps> is not possible due to race conditions and differences between platforms , so the <allcaps> psp </allcaps> needs to take a greater role in handling these events . <section> <allcaps> psp </allcaps> should capture exception contexts locally , and provide a more abstract <allcaps> api </allcaps> for <allcaps> cfe </allcaps> to poll and retrieve them rather than pushing direct . <section> related to nasa / cfe # <number> , nasa / cfe # <number> <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , termination on strncpy <section> fix possible non - termination of strings in command line option parsing . these generated warnings in gcc9 . fixes # <number> <section> build code with default config , <allcaps> simulation </allcaps> = native <allcaps> buildtype </allcaps> = release on <allcaps> gcc </allcaps> <number> . <number> . confirm successful build with no warning . <section> no impact to behavior <section> ubuntu <number> <allcaps> lts </allcaps> <number> bit <section> joseph hickey , vantage systems , inc .",0
"inconsistent default <allcaps> cpu id </allcaps> / spacecraft id between pc - linux and other platforms <section> the <allcaps> cpu id </allcaps> / spacecraft id on linux differs from the vxworks build due to the linux build deriving the value from the targets . cmake and other platforms deriving it from the value of [ target name ] _platform_cfg . h and [ mission name ] _mission_cfg . h <section> set cfe_mission_spacecraft_id in [ mission name ] _mission_cfg . h different than spacecraft_id in targets . cmake . do same for cfe_platform_cpu_id and the <x> value in <allcaps> tgt </allcaps> <x> . build for linux and a vxworks target . <allcaps> cpu </allcaps> ids will be different when attempting to run <allcaps> sbn </allcaps> <section> the same default <allcaps> cpu </allcaps> ids should show up across both platforms . <section> it appears this is due to the linux <allcaps> psp </allcaps> using global_configdata in <allcaps> cfe </allcaps> ' s target_config . c and the other platforms using cfe_mission_spacecraft_id and cfe_platform_cpu_id directly . <section> - os : [ e . g . linux <number> ] - versions cfe <date> , <allcaps> psp </allcaps> <number> for mcp750 , linux , sp0 <section> add any other context about the problem here . <section> john pham , northrop grumman",2
"fix # <number> , update doxygen comments to fix warnings <section> fixes # <number> resolve doxygen warnings <section> steps taken to test the contribution : <number> . corrected lines that generated warnings <number> . rebuilt documentation with <code> <number> . observed no warnings generated <number> . viewed relevant page ( s ) to verify correctness <section> changes to documentation only ; no code impact <section> leor bleier , <allcaps> nasa </allcaps> \ <allcaps> gsfc </allcaps>",1
"fix doxygen warnings <section> warnings are generated when compiling the documentation <section> <number> . build documentation using <code> <number> . observe warnings in <code> <section> no warnings should be generated <section> leor bleier , <allcaps> gsfc </allcaps> \ <number>",0
"<allcaps> rtems </allcaps> cmake module does not define all required outputs <section> when building with <allcaps> cfe </allcaps> , this ultimately triggers a ( seemingly ) unrelated error : <code> <section> build software for i686 - rtems4 . <number> per <allcaps> readme </allcaps> instructions and example toolchain <section> build should succeed without warnings or errors <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit ( build host ) building for i686 - rtems4 . <number> <section> this regression was introduced when <allcaps> cfe </allcaps> added logic to inspect the variable <code> and use the same flags for the <code> option on the link line . normally <code> is exported by the platform module , but not in the locally - provided <allcaps> rtems </allcaps> module . <allcaps> rtems </allcaps> uses the compiler to perform linking ( gcc ) and as such it needs the <code> prefix . it may also benefit from <code> anyway so it is a good idea to include this . <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , resolve ci config warnings <section> resolves ci configuration warnings fix # <number> <section> steps taken to test the contribution : <number> . ci ( ci change only ) <section> no travis ci configuration warnings <section> - hardware : ci - os : ubuntu <number> - versions : this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix travis - ci config warnings <section> build config validation ( from travis - ci ) - root : deprecated key sudo ( the key <code> has no effect anymore . ) language : unexpected sequence , using the first value ( c ) root : missing os , using the default linux <section> see <url> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , compiler warnings on mcp750 <allcaps> psp </allcaps> <section> fix # <number> patches for the mcp750 <allcaps> psp </allcaps> to avoid some compiler warnings that show up when building with strict flags . <section> build for mcp750 using default config and procedure , confirm warnings are fixed ( others still exist in other modules , however ) . <section> no impact to behavior . only fixes warnings . <section> - <allcaps> gsfc </allcaps> build host ( gs582w - cfelnx ) <section> joseph hickey , vantage systems , inc .",0
"mcp750 <allcaps> psp </allcaps> fails to build <section> building the current "" master "" branch for mcp750 yields the following build error : <code> <section> build "" master "" using standard procedure and default config . <section> build should succeed . <section> - <allcaps> gsfc </allcaps> mcp750 build machine ( gs582w - cfelnx ) <section> this is an error now due to the inclusion of <code> in the default build . <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , remove local mcp750 header file <section> removed in favor of using cross - compiler provided header fix # <number> <section> steps taken to test the contribution : <number> . diff ' ed local file with cross - compiler version and they were identical <number> . switched to ppc - vxworks6 . <number> toolchain and built with cross compiler , no issues <section> none <section> - hardware : cfs cross - compiler pc - os : linux <number> - versions : master bundle w / this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove mcpx750 . h <section> mcpx750 . h does not belong in open source release . <section> remove file , real version gets picked up as part of include path for this platform cross - compiler toolset . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"allow out - of - tree psp paths <section> requiring a <allcaps> psp </allcaps> to always be defined inside the <allcaps> psp </allcaps> repository means holding a set of patches on top of the upstream version . this adds friction when updating to latest version . <section> at least initially , <code> should be introduced . it should be configurable and it should allow arbitrary paths to <allcaps> psp </allcaps> files .",2
"deprecated multiple "" success "" code responses <section> <allcaps> api </allcaps> ' s with multiple "" success "" codes are frequently mishandled <section> single success response , unique information should be passed back in parameters <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , release prep <section> fix # <number> - updated <allcaps> readme </allcaps> - removed custom license document - added standard apache <number> - updated copyright release version cfe <number> - > <number> <section> <number> . standard build , unit test and execute <section> - no impact to behavior <section> - hardware : cfs dev server <number> - os : ubuntu <number> - versions : cfe <number> . <number> related versions and <allcaps> osal </allcaps> <number> . <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
release prep <section> updates for release : - updated <allcaps> readme </allcaps> - removed custom license document - added standard apache <number> - updated copyright release version cfe <number> - > <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"parameter commanddata hides a global variable with the same name . [ lgtm ] <section> cfe_psp_start . c <code> <section> steps to reproduce the behavior : <number> . build against lgtm <section> anh van , <allcaps> nasa </allcaps> goddard",2
"improve consistency and reduce duplication in <allcaps> psp bsp </allcaps> implementation <section> see <url> where this ticket is to address item <number> to reduce code duplication in the <allcaps> psp </allcaps> ' s . <section> the <allcaps> cfe psp </allcaps> should be an extension of the <allcaps> osal bsp </allcaps> , not a replacement for it . the <allcaps> psp </allcaps> already defines a cfe_psp_main ( ) entry point for itself , and this can be invoked as a second - stage after os_application_startup to do the additional startup tasks required for <allcaps> cfe </allcaps> . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add travis . yml for cppcheck on psp / fsw <section> add cppcheck for fsw <section> anh van , <allcaps> nasa </allcaps> goddard",2
"<allcaps> psp </allcaps> cppcheck warning stricter flag <section> [ psp / fsw / mcp750 - vxworks / src / cfe_psp_exception . c : <number> ] - > psp / fsw / mcp750 - vxworks / src / cfe_psp_exception . c : <number> <url> inconclusive ) function ' cfe_psp_exceptionhook ' argument <number> names different : declaration ' pesf ' definition ' vpesf ' . [ psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> ] - > psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> <url> variable ' return_code ' is reassigned a value before the old one has been used . [ psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> ] - > psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> <url> variable ' return_code ' is reassigned a value before the old one has been used . [ psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> ] - > psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> <url> variable ' return_code ' is reassigned a value before the old one has been used . [ psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> ] - > psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> <url> variable ' return_code ' is reassigned a value before the old one has been used . [ psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> ] - > psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> <url> variable ' return_code ' is reassigned a value before the old one has been used . [ psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> ] - > psp / fsw / pc - linux / src / cfe_psp_memory . c : <number> <url> variable ' return_code ' is reassigned a value before the old one has been used . psp / fsw / pc - rtems / src / cfe_psp_exception . c : <number> <url> inconclusive ) the buffer ' taskname ' may not be null - terminated after the call to strncpy ( ) . psp / fsw / modules / eeprom_mmap_file / cfe_psp_eeprom_mmap_file . c : <number> <url> variable ' status ' is assigned a value that is never used . [ psp / fsw / shared / cfe_psp_module . h : <number> ] - > psp / fsw / shared / cfe_psp_module . c : <number> <url> inconclusive ) function ' cfe_psp_module_findbyname ' argument <number> names different : declaration ' modulename ' definition ' drivername ' . psp / fsw / mcp750 - vxworks / src / bsp - integration / cfesupport . c : <number> <url> the scope of the variable ' i ' can be reduced . psp / fsw / mcp750 - vxworks / src / bsp - integration / cfesupport . c : <number> <url> the scope of the variable ' cfnamefound ' can be reduced . psp / fsw / mcp750 - vxworks / src / bsp - integration / cfesupport . c : <number> <url> the scope of the variable ' tempfd ' can be reduced . psp / fsw / mcp750 - vxworks / src / bsp - integration / cfesupport . c : <number> <url> the scope of the variable ' compactflashname ' can be reduced . psp / fsw / shared / cfe_psp_module . c : <number> <url> the scope of the variable ' apiptr ' can be reduced . <section> resolve warning <section> anh van , <allcaps> nasa </allcaps> goddard",2
"cfe_psp_start timer race condition , leading to undef memory writes hi i am working with cfe in the context of <allcaps> nasa </allcaps> ' s icarus codebase we think we found an issue , in psp / fsw / pc - linux / src / cfe_psp_start . c , a timer is setup with this line : setitimer ( itimer_real , & timer , <allcaps> null </allcaps> ); the timer event ultimately calls cfe_es_perflogadd after 2 5 0 ms which starts making assignments on the perf object like so : perf - > metadata . invalidmarkerreported = <allcaps> true </allcaps> ; the problem is there is a time race condition in that cfe_es_main_function ’ s call to cfe_es_setupperfvariables has not yet initialized the perf object , depending on your execution speed . this is unlikely but if you are adding initialization code after setitimer it will likely lead to undefined behavior <section> steps to reproduce the behavior : after setitimer ( itimer_real , & timer , <allcaps> null </allcaps> ); add sleep ( <number> ); and undefined behavior will happen ( or nothing observable ) . it was crashing our lengthy <allcaps> dll </allcaps> initialization that we were running in the place of sleep ( <number> ); <section> no crash <section> n / a <section> - <number> bit intel - os : vmware workstation <number> running ubuntu <number> vm , host is windows <number> - versions current <section> n / a <section> reachable at <email> . this is not currently an issue for us but is probably worth reporting",0
"doxygen warning <section> psp / fsw / inc / cfe_psp_configdata . h : <number> : warning : the name ` cfe_psp_config . h ' supplied as the second argument in the \ file statement is not an input file <section> steps to reproduce the behavior : <number> . make usersguide <number> . see error <section> - hardware - ubuntu <number> - doxygen <date> , rc - <number> . <number> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"mcp750 - vxworks <allcaps> psp </allcaps> hardcodes core as "" cfe - core . o "" <section> cfe_psp_getcfetextsegmentinfo fails if cfe_module_name does not match what was run , currently hardcoded to "" cfe - core . o "" . could make lookup more general so it would not require hardcoded name . <section> steps to reproduce the behavior : <number> . build for vxworks , use core name other than cfe - core . o ( cfe - core . exe ) <number> . execute <number> . checksum of text segment will report as 0 xffff due to failed modulefindbyname on hardcoded cfe - core . o <section> checksum should work <section> see fsw / mcp750 - vxworks / src / cfe_psp_memory . c lines related to cfe_module_name <section> - hardware : mcp750 - os : vxworks6 . <number> - versions <number> bundle <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"update <allcaps> psp </allcaps> build options files to use add_definitions these had been setting the "" osal_c_flags "" variable and relied on <allcaps> osal </allcaps> preserving this value . however after [ cfs_osal : <number> ] this no longer gets preserved ( necessary because ut and real code may have different bsps / flags ) . using the cmake <code> mechanism is more appropriate and more reliable as it does not depend on the behavior of the <allcaps> osal </allcaps> build procedure .",0
"remove references to osalbool / boolean the c99 "" bool "" and related true / false identifiers should be used instead . this is related to [ cfs_osal : <number> ]",0
"update mcp750 - vxworks <allcaps> psp </allcaps> for cmake in order to build the vxworks image using cmake , a platform module and other various bits need to be added . this <allcaps> psp </allcaps> was previously only buildable with classic makefile .",0
"mcp750 uncommanded reset at startup an uncommanded reset periodically occurs ( ~ <number> in <number> startups ) at startup on the mcp750 using vxworks6 . <number> . this bug has likely been around for a long time ( <number> years or more ) , is only seen on a "" processor reset "" , and is likely related to something corrupted in memory that gets reused . reset type is based on a register , and after the reset , a "" power - on reset "" is performed and is always successful ( formats / clears the corrupted memory before use ) .",0
"remove "" enhanced_build "" macro the classic build is being deprecated , so the "" enhanced_build "" switch that indicated a cmake - based build is no longer required , as it is always the case . this is related to [ cfs_cfe : <number> ] in <allcaps> cfe </allcaps> .",0
"wrap / remove old backwards compatibility in cfe_psp_start comments say cfe_platform_cfg . h include is only for old makefiles , can this be removed now that classic build is deprecated ? remove backward compatibility for old <allcaps> osal </allcaps> - cfe_psp_setuplocal1hz and associated call .",0
wrap cfe_psp_subminor_version in deprecated ifndef fsw / pc - rtems / inc / psp_version . h has cfe_psp_subminor_version marked as only for backward compatibility .,0
"consistent cfe_psp_main implementation <allcaps> rtems psp </allcaps> hardcodes "" / cf / cfe_es_startup . scr "" , but mcp750 and pc - linux both use the cfe_platform_es_nonvol_startup_file . inconsistent implementations . from # <number> ( solved here ) : cfe_psp_start . c for mcp750 vxworks has startupfilepath as an input parameter to cfe_psp_main , but calls cfe_es_main with cfe_platform_es_nonvol_startup_file . confusing implementation . <repeated> looks like at least the pc - linux <allcaps> psp </allcaps> only uses cfe_platform_es_nonvol_startup_file ( but a different prototype ) .",2
"mcp750 <allcaps> psp </allcaps> ignores startupfilepath cfe_psp_start . c for mcp750 vxworks has startupfilepath as an input parameter to cfe_psp_main , but calls cfe_es_main with cfe_platform_es_nonvol_startup_file . confusing implementation . <repeated> looks like at least the pc - linux <allcaps> psp </allcaps> only uses cfe_platform_es_nonvol_startup_file ( but a different prototype ) .",2
"remove old <allcaps> mks </allcaps> flags in comments $ id , $ date , $ revision , $ log , etc all no longer useful and slightly misleading since they do not get updated .",0
update vxworks <allcaps> psp </allcaps> name ( no longer <number> ),0
"<allcaps> psp </allcaps> must not use os_printf ( ) before os_api_init in particular this is important when the "" utility task "" is in use ( soon to be standard ) . if <code> has not been called yet , then the data buffer to which <code> writes is not valid . the <allcaps> osal </allcaps> implementation does protect against this and it should drop the data , but <allcaps> psp </allcaps> should not be calling this function before the initialization . ( it happened to be ok if os_printf was just a wrapper around printf , but if os_printf is anything more , then it does not work ) . just use <code> or native c library calls before os_api_init ( ) .",0
update copyright and license info for end - of - summer release,0
resolve klocwork issues found in <number> . <number> see attached spreadsheet .,0
"add "" ramdisk startup script "" module this module adds a simple way for a <allcaps> psp </allcaps> to create the startup script file in a <allcaps> ramdisk </allcaps> , using embedded data linked at build time with <allcaps> cfe </allcaps> . intended for use on systems that have no persistent storage to hold this file .",2
add top level readme for open source release applies to both psp - <number> . 0 a and development branch .,2
update copyright and license for open source cfs framework release <number> . 0 a need to update / add copyright and license to apache <number> for open source release of <number> . 0 a .,0
remove tools directory directory clean - up,2
"remove non - <allcaps> ccb </allcaps> controlled psps sp0 and grut699 are not <allcaps> ccb </allcaps> controlled psps , remove them from development branch . note techdev branches were created to store the work ( both have diverged from current dev )",2
"improper strncpy to resettype in pc - linux <allcaps> psp </allcaps> static analysis noted that the following strncpy in <code> is potentially a problem : { { { strncpy ( commanddata - > resettype , "" po "" , <number> ); } } } this is because the string is a constant two character literal and the fixed copy size of "" <number> "" means that the null terminating byte will never get copied to the output buffer . in the <allcaps> psp </allcaps> , because the buffer had been zeroed out by an earlier memset ( ) call , the code still worked ok . still , this should be fixed , as the prior path to get to this function might not always be identical to the way it is today .",0
"cfe_psp_writetocds input buffer should be const the cfe_psp_writetocds ( ) <allcaps> api </allcaps> is not currently const - correct . the input buffer should be qualified as "" const "" but it is not currently so . the <allcaps> api </allcaps> prototype : { { { int32 cfe_psp_writetocds ( void * ptrtodatatowrite , uint32 cdsoffset , uint32 numbytes ) } } } should become : { { { int32 cfe_psp_writetocds ( const void * ptrtodatatowrite , uint32 cdsoffset , uint32 numbytes ) } } } in particular , this incorrect definition can cause a spurious compiler warning any time the data being written is "" const "" . in certain places , <allcaps> cfe </allcaps> calls this function with string literals , which trigger compiler warnings on some platforms / configurations .",0
"( pc - linux ) psp should not use signals ( 1 hz timer ) the <allcaps> psp </allcaps> 1 hz timer uses <allcaps> sigalarm </allcaps> and setitimer . there is a proposal ticket : <number> to use timer_create ( ) instead . this still has the problem of using asynchronous signal delivery . asynchronous signal delivery does not belong in realtime applications . we should remove this and instead us timerfd_create ( ) and create a thread to wait on the timer event . this tracks overruns as well as removes the danger of calling thread - unsafe functions in signal handlers ( which pc - linux does . ) in order to avoid the race condition specified in ticket : <number> the <allcaps> psp api </allcaps> should be changed for the user to register a callback rather than depeding on an external dependency from <allcaps> time </allcaps> . this would allow <allcaps> psp </allcaps> to start the timer relative to "" bootup "" and it would allow the user to avoid the race condition by registering itself with the timer . if we made it a blocking call the user could call from their own thread , it also would let the user control the priority of the thread receiving the timer event . i believe the point of the 1 hz timer is for platforms where there is a hardware timer that can be used with better granulatiry than os timers . if that is no longer true , then we should just get rid of this and use an os timer .",0
<allcaps> psp </allcaps> for sp0 - vxworks6 . <number> needs update for cfe v6 . <number>,0
"pc - linux64 create a <allcaps> psp </allcaps> for x86_64 on linux . this can serve as a development platform for code targeting the <allcaps> arm </allcaps> cortex - a53 , for example .",2
"update pc - rtems to support released <allcaps> rtems </allcaps> <number> the <code> <allcaps> psp </allcaps> was initially developed for <allcaps> cfe </allcaps> <number> using the development <allcaps> rtems </allcaps> branch ( pre - <number> ) . since then , <allcaps> rtems </allcaps> <number> has been released and upstream <allcaps> rtems </allcaps> development has moved on to <number> . there are some changes between the pre - release and final versions of <allcaps> rtems </allcaps> <number> . some functions being used were marked as deprecated . as part of testing <allcaps> cfe </allcaps> <number> release the <code> was re - validated against the latest <allcaps> rtems </allcaps> <number> . <number> official release . this ticket contains the necessary updates to pc - rtems <allcaps> psp </allcaps> to run with <allcaps> rtems </allcaps> <number> . <number> .",0
"fix <allcaps> psp </allcaps> to use updated names for macros and symbols <allcaps> cfe </allcaps> <number> addresses a number of naming convention inconsistencies , and many of the symbol names are updated to be clearer about the intent and purpose of the symbol . as part of <allcaps> cfe </allcaps> <number> a backward - compatibility mapping is also provided . this ticket is to do the corresponding updates to the <allcaps> psp </allcaps> to use the correct new - style name , and not rely on the backward compatibility macro anymore . this will need to be done before the compatibility names can be turned off .",0
"include <allcaps> psp </allcaps> unit test stub functions per the ut assert framework design , each component should include basic stubs for the same public <allcaps> api </allcaps> calls provided by the component . this adds those stubs for the <allcaps> psp </allcaps> .",2
<allcaps> psp api </allcaps> prototype fixes for warning cleanup some <allcaps> psp api </allcaps> calls were missing a <code> qualifier from their prototypes ( e . g . the memcpy wrapper ) which means that it triggered a compiler warning any time application code used these functions with a value that was correctly qualified as <code> . the prototype and all definitions of the function should be fixed .,0
"include <allcaps> psp api </allcaps> unit testing stubs in <allcaps> psp </allcaps> in the distributed ut assert framework , unit testing stubs for <allcaps> psp </allcaps> functions should be included with the <allcaps> psp </allcaps> .",2
"use timer_create ( ) instead of setitimer ( ) for pc - linux <allcaps> psp </allcaps> uses setitemer ( ) to call cfe_psp_timerhandler at 4 hz . setitemer ( ) does this by sending <allcaps> sigalrm </allcaps> to the process every <number> / 4 s . <allcaps> sigalrm </allcaps> ( and signals in general ) have no mechanism for distinguishing who created the signal , and handling the signal is tricky in multi - threaded environments . i would like to integrate a library but it also uses <allcaps> sigalrm </allcaps> ( also for timing ) and the two uses conflict . additionally , "" <allcaps> posix </allcaps> . <date> marks getitimer ( ) and setitimer ( ) obsolete "" and also has a number of issues regarding multiple timers and accuracy of the timers under load . see <url> i propose using timer_create ( ) and sigaction ( ) as demonstrated in the manual page : <url>",2
"( re ) create macosx <allcaps> psp </allcaps> the wiki includes <allcaps> osx </allcaps> as one of the target <allcaps> psp </allcaps> ' s , but it was removed a while ago . it should be re - created / updated .",2
"missing <allcaps> psp api </allcaps> document an <allcaps> api </allcaps> reference document is needed and should be provided . see <allcaps> osal api </allcaps> document for reference however , it is highly recommended to create this document via doxygen .",1
"mcp750 causes ces1702 . <number> and ces1703 . <number> requirement failures on vxworks <number> although the mcp750 vxworks <allcaps> psp </allcaps> directory is named "" mcp750 - vxworks6 . <number> "" , this implementation should support all <number> . x versions of vxworks . it was found the cfe_psp_setdefaultexceptionenvironment function defined in cfe_psp_exception . c does not set all the required flags in order to produce a task restart following a <allcaps> cpu </allcaps> or float point exception produced via task running under <number> . the recoverable interrupt flag ( _ppc_msr_ri ) is missing in the call to vxmsrset . it was recommended by windriver to update how we setup the default exception environment using the vxmsrget call . the following code will resolve the issue in vxworks <number> and will also not affect <number> from producing the desired behavior : vxmsrset ( vxmsrget ( ) | _ppc_msr_fe0 | _ppc_msr_fe1 | _ppc_msr_ee | _ppc_msr_fp | _ppc_msr_me | _ppc_msr_dr ) ; vxfpscrset ( vxfpscrget ( ) | _ppc_fpscr_ve | _ppc_fpscr_oe | _ppc_fpscr_ni | _ppc_fpscr_ze ) ; vxfpscrset ( vxfpscrget ( ) | _ppc_fpscr_xe | _ppc_fpscr_ue );",2
"cfe_psp_gettime loses resolution in conversion to microseconds ( <allcaps> gsfc dcr </allcaps> <number> ) there ' s a ' bug ' in the implementation of the mcp750 / vxworks <allcaps> psp </allcaps> which causes the loss of timing resolution in the function cfe_psp_gettime ( ) . for example : { { { void cfe_psp_gettime ( os_time_t * localtime ) { uint32 deccount ; /* reads the time from the hardware register , then converts it * into usable seconds and microseconds */ syspciread32 ( 0 xfc0011c0 , ( uint32 *)( & deccount ) ); deccount = deccount & 0x 7 fffffff ; deccount = ( ( uint32 ) 0x0 d6937e5 ) - deccount ; localtime - > seconds = deccount / <number> ; deccount = deccount % <number> ; localtime - > microsecs = ( deccount / <number> ) * <number> ; }/* end cfe_psp_getlocaltime */ } } } in this case , ( deccount / <number> ) * <number> is performed as an integer calculation ( as deccount and localtime - > microsecs are integers ) , basically reducing resolution from microseconds ( which this function can calculated from fractions of microseconds ) to miliseconds . <allcaps> note </allcaps> : <allcaps> gsfc </allcaps> ' s rad750 version has a similar calculation ( ( deccount / <number> ) * <number> ) should this be changed to something like ( for mcp750 ) : { { { localtime - > microsecs = ( uint32 ) ( ( ( ( double ) deccount ) / <number> ) * <number> ); } } }",0
add cfe_psp_getlocalmet and cfe_psp_setlocalmet <allcaps> api </allcaps> functions ( <allcaps> gsfc dcr </allcaps> <number> ) these functions are called by the cfe / <allcaps> time </allcaps> subsystem and were never implemented .,2
"add c + + support in <allcaps> psp </allcaps> header files ( <allcaps> gsfc dcr </allcaps> <number> ) to support c + + based applications , the <allcaps> psp </allcaps> header files need to have the following code : in the beginning of each header file : <hashtag> if def </hashtag> __cplusplus extern "" c "" { <hashtag> end if </hashtag> at the end of each header file : <hashtag> if def </hashtag> __cplusplus } <hashtag> end if </hashtag>",2
add <allcaps> psp api </allcaps> to return startup path of cfe ( <allcaps> gsfc dcr </allcaps> <number> ) <allcaps> apl </allcaps> has requested a <allcaps> psp api </allcaps> function to return the startup path of the cfe . this will allow them to load tables and applications from the same location the cfe was loaded from without having to use absolute / full paths . <allcaps> apl </allcaps> has prototyped this and is considering its use on solar probe plus . overall description of the changes : cfe_psp_start . c : new function void cfe_psp_parseandsavestartuppath ( char * startfilepath ) ; add storage for strings : startup file full path and filename startup path startup filename ( excluding path ) in cfe_psp_main ( ) call new function with the string used to pass into cfe_es_main ( ) inc / cfe_psp . h new <allcaps> api </allcaps> prototype uint32 cfe_psp_getstaruppath ( char * path ) cfe_psp_support . c new <allcaps> api </allcaps> definition,2
"consider adding the vxworks <allcaps> rtp </allcaps> / memory protected <allcaps> psp </allcaps> ( <allcaps> gsfc dcr </allcaps> <number> ) add the <allcaps> psp </allcaps> and startup manager code for the vxworks <allcaps> rtp </allcaps> implementation . this was used in an <allcaps> apl </allcaps> / <allcaps> gsfc irad </allcaps> to run the cfe within a memory protected process . using the startup manager , more than one instance of the cfe can be run on the same processor . at a minimum this should be added to the "" <allcaps> psp </allcaps> technology "" branch .",2
"preserve reserved memory on a soft power - on reset ( <allcaps> gsfc dcr </allcaps> <number> ) the default action on all <allcaps> psp </allcaps> implementations is to clear the reserved memory on a soft power - on reset . this is where the cfe stores the exception and reset log information . on both the <allcaps> gpm </allcaps> and <allcaps> mms </allcaps> missions , the <allcaps> psp </allcaps> ' s were customized to preserve the reserved memory on most soft power - on resets . the <allcaps> psp </allcaps> implementations should be changed to preserve this memory where possible . this may not be possible for all <allcaps> psp </allcaps> , but at a minimum could be done for the mcp750 target . attached is a sample of how the <allcaps> psp </allcaps> was changed on <allcaps> gpm </allcaps> for their rad750 target .",2
"add <allcaps> api </allcaps> to return <allcaps> eeprom </allcaps> write enable / disable status ( <allcaps> gsfc dcr </allcaps> <number> ) the <allcaps> psp </allcaps> should provide an <allcaps> api </allcaps> to allow a caller to retrieve the write enable / disable status of a selected bank of <allcaps> eeprom </allcaps> ( or alternatively , the status of all available banks ) . this would allow this information to be made available in telemetry .",2
"move <allcaps> psp </allcaps> timer init earlier , prior to module initialization <allcaps> psp </allcaps> modules may require timers . to support this , the <allcaps> psp </allcaps> timer initialization should be prior to initialization of the module list .",2
pass module id as parameter to <allcaps> psp </allcaps> module init function some modules can benefit from having a unique identifier they can use to allocate resources . this is a simple change to add .,2
"pc - <allcaps> rtems </allcaps> fixes from psp - <number> / cfe - <number> testing during testing of psp - <number> / cfe - <number> candidate , found a few things in need of attention in the pc - rtems <allcaps> psp </allcaps> .",0
"use ( foo ) , not & ( foo [ <number> ] ) , where appropriate in a number of places , code jumps through extra hoops to take the address of the first element of an array , rather than just allowing the array name to gracefully decay into the pointer . where just using the array name is more correct , we should simplify the code to use it .",2
"mcp750 - vxworks - memory variables should be "" cpuaddr "" type there are several variable instances in the cfe_psp_memory . c source file in the mcp750 - vxworks implementation that define memory address variables as a uint32 type . these definitions need to be updated to use the platform defined "" cpuaddr "" type .",0
printf format codes vs argument types resolve a number of mismatches between printf format string conversions and the data types of the parameters . from cppcheck : { { { psp / fsw / grut699 - vxworks6 / src / cfe_psp_start . c : <number> : warning : %x in format string ( no . <number> ) requires ' unsigned int ' but the argument type is ' unsigned long ' . psp / fsw / grut699 - vxworks6 / src / cfe_psp_watchdog . c : <number> : warning : %x in format string ( no . <number> ) requires ' unsigned int ' but the argument type is ' unsigned long ' . psp / fsw / grut699 - vxworks6 / src / cfe_psp_watchdog . c : <number> : warning : %x in format string ( no . <number> ) requires ' unsigned int ' but the argument type is ' unsigned long ' . psp / fsw / grut699 - vxworks6 / src / cfe_psp_watchdog . c : <number> : warning : %x in format string ( no . <number> ) requires ' unsigned int ' but the argument type is ' unsigned long ' . psp / fsw / grut699 - vxworks6 / src / cfe_psp_watchdog . c : <number> : warning : %x in format string ( no . <number> ) requires ' unsigned int ' but the argument type is ' unsigned long ' . psp / fsw / grut699 - vxworks6 / src / cfe_psp_watchdog . c : <number> : warning : %x in format string ( no . <number> ) requires ' unsigned int ' but the argument type is ' unsigned long ' . psp / fsw / grut699 - vxworks6 / src / cfe_psp_watchdog . c : <number> : warning : %x in format string ( no . <number> ) requires ' unsigned int ' but the argument type is ' unsigned long ' . } } },0
"<allcaps> psp </allcaps> build fails for mcp750 greg limes reports the following errors he got with "" make - k "" and notes because some files do not compile , the build does not attempt to build some others , so this may not be a complete list of all the actual errors : ( none of this is *hard* to fix . <repeated> just frustating when i only get short snips of time to push on this issue . <repeated> ) psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_start . c : <number> : error : conflicting types for ' cfe_psp_main ' psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_main ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_start . c : <number> : error : conflicting types for ' cfe_psp_main ' psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_main ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getresetarea ' psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getresetarea ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getresetarea ' psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getresetarea ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getuserreservedarea ' psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getuserreservedarea ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getuserreservedarea ' psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getuserreservedarea ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getvolatilediskmem ' psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getvolatilediskmem ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getvolatilediskmem ' psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getvolatilediskmem ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getkerneltextsegmentinfo ' psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getkerneltextsegmentinfo ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getkerneltextsegmentinfo ' psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getkerneltextsegmentinfo ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getcfetextsegmentinfo ' psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getcfetextsegmentinfo ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getcfetextsegmentinfo ' psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getcfetextsegmentinfo ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_exception . c : <number> : error : conflicting types for ' cfe_es_processcoreexception ' cfe / fsw / cfe - core / src / inc / cfe_es . h : <number> : error : previous declaration of ' cfe_es_processcoreexception ' was here psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_exception . c : <number> : error : conflicting types for ' cfe_es_processcoreexception ' cfe / fsw / cfe - core / src / inc / cfe_es . h : <number> : error : previous declaration of ' cfe_es_processcoreexception ' was here also matt grubb reports the following problems / fixes that were made in his environment to get the mcp750 build to compile : <number> . psp_version . h needed updated with the _impl definitions as i found in pc - linux <number> . cfe_psp_exception . c , cfe_psp_memory . c , and cfe_psp_start . c all needed updates for new function definitions in cfe_psp . h <number> . the version . cmake file creates a "" version . h "" file when building . this is a filename required by vxworks , so i renamed the file in the script to cmakeversion . h and changed the target_config to include cmakeversion . h <number> . added a build_options . cmake file to the mcp750 <allcaps> psp </allcaps> <number> . created a toolchain file for the mcp750 on vxworks <number> in proj_defs",0
n2x <allcaps> psp </allcaps> development branch for the n2x quad leon4 development board need to branch off trac - <number> - ut699 - improvements since it has all of the ut699 updates plus a good linux psp from trac - <number>,2
fix sp0 <allcaps> psp </allcaps>,0
"additional ut699 changes from trac - <number> ticket for the purpose of building a change set , for review , from the existing trac - <number> ticket .",0
"<allcaps> psp </allcaps> build fails for grut699 steve duran reports that he is encountering errors in the <allcaps> grut </allcaps> - <number> <allcaps> psp </allcaps> as follows : { noformat } / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getresetarea ' / home / sduran / cop_cfs_workspace / psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getresetarea ' was here / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : in function ' cfe_psp_getresetarea ' : / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : <number> : warning : cast increases required alignment of target type / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : at top level : / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getuserreservedarea ' / home / sduran / cop_cfs_workspace / psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getuserreservedarea ' was here / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : in function ' cfe_psp_getuserreservedarea ' : / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : <number> : warning : cast increases required alignment of target type / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : at top level : / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getvolatilediskmem ' / home / sduran / cop_cfs_workspace / psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getvolatilediskmem ' was here / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : in function ' cfe_psp_getvolatilediskmem ' : / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : <number> : warning : cast increases required alignment of target type / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : at top level : / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getkerneltextsegmentinfo ' / home / sduran / cop_cfs_workspace / psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getkerneltextsegmentinfo ' was here / home / sduran / cop_cfs_workspace / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c : <number> : error : conflicting types for ' cfe_psp_getcfetextsegmentinfo ' / home / sduran / cop_cfs_workspace / psp / fsw / inc / cfe_psp . h : <number> : error : previous declaration of ' cfe_psp_getcfetextsegmentinfo ' was here { noformat } these appear to be due to the changes to some of the <allcaps> psp </allcaps> functions , to go from using <code> to indicate where to store a pointer , to using <code> which is slightly better . i have a place i am currently building <allcaps> grut </allcaps> - <number> vxworks images , so i should be able to make this change and verify that it builds . this should be able to get done , tested , and integrated in time to be part of the next <allcaps> psp </allcaps> release ( <allcaps> psp </allcaps> <number> ) .",0
trick <allcaps> psp </allcaps> there is growing interest in being able to use the trick <allcaps> osal </allcaps> / <allcaps> psp </allcaps> so that a <allcaps> cfs </allcaps> build can be executed within a trick simulation - basically allowing developers to fly unmodified <allcaps> fsw </allcaps> within an all sw simulation environment on their desktop . the approach was used extensively and successfully on the morpheus project . the trick <allcaps> osal </allcaps> / <allcaps> psp </allcaps> were developed a few years ago . some work will be necessary to get them up and running again with the latest <allcaps> cfs </allcaps> .,2
"apexsim for arinc653 posix simulator effort has been made at <allcaps> jsc </allcaps> to build an "" apexsim "" which is a arinc653 os simulator that runs in <allcaps> posix </allcaps> . the tool was development by guy de carufel and mathew benson . it is not complete , but should be a good starting point for arinc653 development . the arinc modules that have been implemented are fully tested . it can be a good resource for any arinc653 <allcaps> osal </allcaps> development . the arinc653 <allcaps> osal </allcaps> timer has been tested with this tool . eventually , this could be adapted into a <allcaps> psp </allcaps> layer . here are things missing : - add partition scheduling for multi - partition build - add missing modules ( queuing port , events , error handler , blackboard ) - <allcaps> xml </allcaps> parsing tool to turn <allcaps> xml </allcaps> config file into apexsim tables - documentation - develop a <allcaps> psp </allcaps> layer",2
"volume table requires user modification the volume table definition is source file that is included with each <allcaps> psp </allcaps> implementation . the implementation source code files are not intended to be modified . the volume table however , requires user modification to specify the volumes and their physical locations specific to a project / mission . adding a volume table macro is a simple solution to allow volume information to be specified at build time .",0
"allow c99 code in <allcaps> psp </allcaps> . update compiler flags to allow c99 code to be used everywhere in <allcaps> psp </allcaps> . just removing <code> tells <allcaps> gcc </allcaps> to allow <allcaps> gnu </allcaps> extensions in the source code , which gets us most of what we want from c99 but not actually everythying . using <code> tells <allcaps> gcc </allcaps> that the code is expected to be <allcaps> incits iso </allcaps> / <allcaps> iec </allcaps> <number> <time> <number> ( aka c99 ) , and any other extensions as explicitly requested in the code .",0
update <allcaps> psp </allcaps> version number for <number> . <number> release all <allcaps> psp </allcaps> version . h header files need to be updated from version <number> . <number> to <number> . <number> for the release . note : this will be the last release that uses the old versioning scheme where all <allcaps> psp </allcaps> implementation version header files are updated with the same version number and no version exists for the shared code or <allcaps> api </allcaps> ' s .,2
standardize version numbering ( in <allcaps> psp </allcaps> ) bring version number management within <allcaps> osal </allcaps> into line with the cfs standards documented at <url>,0
"update mcp750 - vxworks6 . <number> cfesupport . c to enforce cf name the cf device is a rawfs device for the first part of the disk that contains the <allcaps> mbr </allcaps> and some unused space . mounting the device via vxworks <number> resulted in the device name of cf : <number> . this behavior has changed with newer versions of vxworks where the device name may result in cf : <number> or cf : <number> depending on where the device partition is made . a device name of cf : <number> will require the default <allcaps> psp </allcaps> volume table to be updated . to avoid changes to the <allcaps> psp </allcaps> volume table the attached kernel code make an update to the cfe_psp_initflashdisk function to look for a valid cf <kiss> ( where x is <number> - <number> ) and then if it finds one that is not <number> , it will create another device for <number> . this wastes a small amount of ram but is otherwise harmless . also the disk is mounted in buffered mode instead of sync mode .",2
"rename "" mcp750 - vxworks6 . <number> "" folder the mcp750 - vxworks6 . <number> implementation is not specific to vxworks version <number> . this implementation will work with other vxworks <number> versions up to vxworks <number> . the folder should be renamed to mcp750 - vxworks6 to avoid any confusion .",0
"should <allcaps> psp </allcaps> have byte - swapping utilities for endian conversions ? we are constantly running into code needing to swap bytes in <number> - and <number> - bit data for big - endian data on little - endian platforms and i think it might be a convenience if <allcaps> cfs </allcaps> provided byte - swapping utilities . ( theoretically , some platforms may have the ability to perform byte swaps more efficiently using <allcaps> cpu </allcaps> instructions or the like . ) this may be more appropriately housed in <allcaps> osal </allcaps> or elsewhere . <allcaps> cfs </allcaps> code should be reviewed for redundancies such as the fs code has cfe_fs_byteswapuint32 that could utilize a more generic function . ( i can take on writing the patch once i receive concurrence that this is a wise update and the right location to house the code . )",2
"simplify function pointer manipulations there are a number of places within the <allcaps> cfs </allcaps> projects where the usage of function pointers is somewhat obfuscated by the inclusion of redundant operators . removing those operators can improve the clarity of the code . the redundancies are based on code that , when written , did not properly base itself on the following aspects of function pointers in the c programming language . <number> . function names decay into function pointers in the same way that array names decay into pointers to their first elements , which means that an <code> operator is redundant when setting a pointer to point at a function . for the classical example of this , see most <code> examples , where no <code> is applied to the comparison function when passing it as the last argument , which has type ' ' pointer to function . <repeated> ' ' <number> . the function call operator <code> ' ' args ' ' <code> operates on a function pointer - - so every function call you see actually is invoking the above decay semantics . this means that the <code> operator is ' ' not ' ' needed when calling a function via a function pointer . happily , this also often means that you also do not need an extra level ( or two ? ! <repeated> ) of parentheses to asure that the <code> is applied to the function pointer and not to the return value . <number> . calling a function pointed to by a structure member is a very common operation , and with the above in mind , note that there is no parsing or evaluation order ambiguity ; no extra parentheses are required to assure that <code> and <code> and the function call operator are evaluated in the proper order . my task - - embodied in this ticket - - is to seek out cases in the <allcaps> psp </allcaps> source code where redundant operations are applied to function pointers ( at assignment sites ' ' and ' ' at call sites ) , and provide recommended changes to improve clarity . specific examples will accumulate in the comments below . ticket to be closed when my scan of the project is complete , and all call sites have been resolved ( whether the resolution is to improve them now , file a ticket for later improvement , or where we will be leaving the code unchanged ) . ' ' ( this also makes the code robust against the rare but troublesome case where an external function changed from a function to a function pointer . <repeated> we may never do this , but it is always good to foster good code hygene . ) ' '",2
"<allcaps> sparc </allcaps> leon3 memory alignment sensitivity and handling in our cfs_tst / ut699_vxworks6 . <number> build , i have noted that there are still cfe / osal / psp build warnings ( <number> ) . on ut699 / vxworks , they are almost all memory alignment warnings . "" warning : cast increases required alignment of target type "" i understand why we are getting theses , and only on this processor ( not linux or <allcaps> ppc </allcaps> - based processors - for these ones , either the processor or compiler will compensate for unaligned accesses ) . the <allcaps> sparc </allcaps> processor is sensitive to memory alignment ( in fact neither the processor or compiler will align for you , it just will crash and generate a memory alignment exception ) . it is a trade between hardware and compiler complexity and performance . i enabled the mem align warning in the compiler options . i have not looked at every single one of these warning cases , but most are something like char * ptr to a buffer or just a char buf [ <number> ] , then later there is code that casts a uint32 pointer to the buffer to access it - this is where you get the warning . the char * or char buf could end up on an odd address , the compiler does not guarantee allocation to an even address . however , in all of these cases , it has to currently be allocating to even , <number> - bit aligned addresses ( which is most efficient for memory access ) . we need to look at these warning cases ( these exit not only in the <allcaps> psp </allcaps> but in the cfe and <allcaps> osal </allcaps> ) and see if there is a better way to implement . the other and probably better option is to develop an exception handler that would trap the alignment exception and then still perform the access , there is a small performance hit if / when this occurs , but it beats crashing any day .",2
"change * to * * in cfe_psp_memory . c for improved efficiency consider changing 1 st argument to be a double pointer of type void , and not a single pointer of type void . then a straight assignment can be used in place of memcpy ( used to copy <number> bytes ) . this will be an <allcaps> api </allcaps> change . { { { int32 cfe_psp_writetocds ( void * ptrtodatatowrite , uint32 cdsoffset , uint32 numbytes ) } } } to { { { int32 cfe_psp_writetocds ( void * * ptrtodatatowrite , uint32 cdsoffset , uint32 numbytes ) } } } need to assess this proposed change . why was it implemented the way it was originally ?",2
"use more accurate return codes in cfe_psp_memory . c , original code returns os_error ( - <number> ) error code , modified at some point to return cfe_psp_error ( - <number> ) , but really should more acurratley use cfe_psp_invalid_pointer ( - <number> ) . however , this would basically change the <allcaps> api </allcaps> though by returning - <number> instead of - <number> . need to determine not sure how well any calling code checks return value and assess the impacts of this potential change .",2
"unld <allcaps> psp </allcaps> core unit test causes a processor exception load and run test , then unload , and load again to run test a 2 nd time and redirect output to a file results in an exception on the 2 nd load . this issue is only see in the way the unit tests were trying to be run . it is not any sort of system runtime issue . - > unld "" core_ut . o "" value = <number> = 0x0 - > ld < core_ut . o grlib > run <number> iu in error mode ( tt = 0x 2 b ) 6 5 2 c35f8 8 0 a06063 cmp % g1 , <number> grlib > hist <phone> ahb read , mst = <number> , size = <number> [ 6 1 1 7 d400 <number> ] <phone> ahb read , mst = <number> , size = <number> [ <number> <number> ] <phone> ahb read , mst = <number> , size = <number> [ <number> 0 0 0 0 0 0 8 e ] <phone> ahb write , mst = <number> , size = <number> [ <number> 0 0 0 0 0 0 ae ] <phone> ahb read , mst = <number> , size = <number> [ <number> <number> ] <phone> 6 5 2 c35d8 ld [ % g1 ] , % g1 [ <number> ] <phone> 6 5 2 c35dc add % g1 , <number> , % g2 [ <number> ] <phone> 6 5 2 c35e0 sethi % hi ( 0x0 ) , % g1 [ <number> ] <phone> 6 5 2 c35e4 or % g1 , % g1 [ <number> ] <phone> ahb write , mst = <number> , size = <number> [ <number> 0 0 0 0 0 0 ee ] <phone> 6 5 2 c35e8 st % g2 , [ % g1 ] [ <number> <number> ] <phone> 6 5 2 c35ec sethi % hi ( 0x0 ) , % g1 [ <number> ] <phone> 6 5 2 c35f0 or % g1 , % g1 [ <number> ] <phone> ahb write , mst = <number> , size = <number> [ <number> <number> ] <phone> 6 5 2 c35f4 ld [ % g1 ] , % g1 [ <number> ] <phone> ahb read , mst = <number> , size = <number> [ 6 5 2 c3600 <number> ] <phone> ahb read , mst = <number> , size = <number> [ 6 5 2 c3604 <number> ] <phone> 6 5 2 c35f8 cmp % g1 , <number> [ trapped ] grlib > reg <allcaps> ins locals outs globals </allcaps> <number> : <number> f3401fc4 6 1 2 3 e878 <number> <number> : <number> 6 5 2 c35c8 6 1 2 3 eb10 <number> <number> : 6 1 2 3 eb10 6 5 2 c35cc <number> <number> <number> : 0 0 0 0 0 0 0 a <number> <number> <number> <number> : 6 5 2 c7fc8 <number> <number> <number> <number> : 0 0 0 0 0 0 0 a <number> <number> <number> <number> : <number> 6 1 1 b88b8 6 1 1 7 5 0 e8 <number> <number> : 6 0 1 3 fb3c 6 0 1 cc000 6 0 0 acee4 <number> psr : f3401fe4 wim : <number> tbr : <number> y : <number> pc : 6 5 2 c35f8 cmp % g1 , <number> npc : 6 5 2 c35fc ble 0x 6 5 2 c363c",0
"update grut699 - vxworks6 cfe_psp_start . c per white box unit testing results during white box testing the following issue was identified with the grut699 - vxworks6 version of cfe_psp_start . c * in cfe_psp_getrestarttype , the input pointer is not checked for <allcaps> null </allcaps> prior to dereferencing it . issue identified during # <number> white box testing , commit : [ changeset : ad4e7c5f ]",0
update grut699 - vxworks6 cfe_psp_timer . c per white box unit testing results during white box testing the following issue was identified with the grut699 - vxworks6 version of cfe_psp_timer . c * cfe_psp_get_timebase - possible divide by zero in the calculation : lower /= systimestampfreq ( ) / 1 0 0 0 0 0 0 ul if systimestampfreq ( ) returns a number less than 1 0 0 0 0 0 0 ul . issue identified during # <number> white box testing commit : [ changeset : eade737 ],0
"limit the calculated results in cfe_psp_watchdogset cfe_psp_watchdogset computes a new value to set the watchdog timer to , but does not limit the results to the specified min and max values ( cfe_psp_watchdog_min and cfe_psp_watchdog_max ) . the calculation is also not protected from overflowing the possible range , so it is possible to get a much different result than expected . issues identified during # <number> white box testing commit <sad> changeset : 9 9 8 ebe4a ]",0
"cfe_psp_memrangeset ( ) description error cfe_psp_memrangeset ( ) in cfe_psp_memrange . c has a comment error on the memorytype argument that could be misleading . cfe_psp_memrangeset ( ) validates against cfe_psp_mem_ram and cfe_psp_mem_eeprom types and errors out with any other type . ( this is consistent with the cfe_psp_memvalidaterange ( ) implementation . ) but the source file comments for cfe_psp_memrangeset ( ) have ( cfe_psp_memrange . c , line <number> <sad> { { { < . <repeated> snip . <repeated> > * * * * parameters : * * rangenum - - a <number> bit integer ( starting with <number> ) specifying the memorytable entry . * * memorytype - - the memory type to validate : cfe_psp_mem_ram , cfe_psp_mrm_eeprom , or cfe_psp_mem_any * * address - - a <number> bit starting address of the memory range < . <repeated> snip . <repeated> > } } } that last "" or cfe_psp_mem_any "" is incorrect .",0
"update grut699 - vxworks6 cfe_psp_memory . c per white box unit testing results during white box testing a number of functions were identified which return cfe_psp_error rather than cfe_psp_invalid_pointer for <allcaps> null </allcaps> pointers . functions include : cfe_psp_getcdssize cfe_psp_writetocds cfe_psp_readfromcds cfe_psp_getresetarea cfe_psp_getuserreservedarea cfe_psp_getvolatilediskmem cfe_psp_getkerneltextsegmentinfo cfe_psp_getcfetextsegmentinfo other issues : several functions take two pointer arguments , but only check if one is a <allcaps> null </allcaps> pointer . should check calling functions to see if changes to the return values may potentially cause issues . issues identified during # <number> white box testing commit : [ changeset : 6 1 2 f00f3 ]",0
"cfe_psp_memcpy does not handle overlapping ranges <section> in cfe_psp_memutils . c does not contain any logic for handling the case where the source and destination memory regions overlap . the current grut699 - vxworks6 implementation currently calls the c memcpy ( ) , which is documented to have undefined behavior in this case .",0
"cfe_psp_memcpy / set not checking for <allcaps> null </allcaps> pointer args in the psp / fsw / shared / cfe_psp_memutils . c , the <section> do not check for null pointer arguments . if a null pointer is passed then a segfault occurs . both function signatures already have a return value for an error code . <section> <section> where none of them check the return value . it appears that either the <allcaps> psp </allcaps> return value was added later than most of the client development or client developers just assumed a c - like behavior with no return values .",0
"cfe_psp_memread / write ( ) not checking for <allcaps> null </allcaps> pointer args in the psp / fsw / shared / cfe_psp_ram . c , we have cfe_psp_memread8 / <number> / <number> and cfe_psp_memwrite8 / <number> / <number> functions . they all take memory addresses as uint32 values and the * read functions take a pointer . all of these addresses & pointers are happily dereferenced without checking for a null pointer . ( the - <number> and - <number> read / write functions do check for alignment and error out . ) some spot - checks revealed a larger problem : some clients that call these functions do not look at the return value . cfe_psp_memread8 ( <sad> the <allcaps> cfs </allcaps> <section> does not check the status . cfe_psp_memwrite8 ( <sad> the <allcaps> cfs </allcaps> <section> does not check the return value in <number> call sites ( mm_load . c and mm_mem8 . c ) . similar results for cfe_psp_memread16 ( ) , cfe_psp_memwrite16 ( ) , cfe_psp_memread32 ( ) , and cfe_psp_memwrite32 ( ) . recommendation : since these return an error code already , these functions should check for null pointers / addresses . but es and mm should be fixed to properly check the return codes first .",0
"<allcaps> psp api </allcaps> for onboard devices this has been split off from # <number> <allcaps> psp </allcaps> needs to define some common <allcaps> api </allcaps> / framework for communication with onboard devices . this would present a consistent <allcaps> api </allcaps> so <allcaps> cfs </allcaps> code can be better abstracted from the hardware implementation details . for instance , if a serial controller device is present on the board , it would speak the same protocol regardless of whether the physical devices is connected over rs232 , rs485 , an <allcaps> lvds </allcaps> link , or some other link . however the configuration <allcaps> api </allcaps> and the means to communicate over these different types of interfaces differs . some boards might have dedicated hardware channels , others might "" bit bang "" with <allcaps> gpio </allcaps> , etc . the <allcaps> psp </allcaps> should abstract this difference and present a similar <allcaps> api </allcaps> so the <allcaps> cfs </allcaps> code that talks to these devices can be portable . the standardization work being performed by the <allcaps> ccsds sois </allcaps> working group may be relevant here as well .",2
"add sp0 <allcaps> psp </allcaps> add the aitech sp0 <allcaps> psp </allcaps> developed at <allcaps> jsc </allcaps> . it is still under development , but the basics appear to work . - watchdog and exception handling code not done yet",2
"fix "" utbsp . h "" not found failure when building on some platforms testing on other platforms revealed an issue regarding the include path for the utassert header files . in particular , the latest ubuntu ( <number> ) failed to build due to "" utbsp . h "" not being found . ( this may be related to the more recent cmake v3 . <number> )",0
"update "" beaglebone - linux "" <allcaps> psp </allcaps> larc is contributing a beagle bone linux <allcaps> psp </allcaps> , which is based on the <allcaps> cfs </allcaps> <number> . <number> version of the pc - linux <allcaps> psp </allcaps> . it is now present in the cfs_psp project tree under the "" ic - larc - beaglebone - linux "" branch on babelfish , based at the <number> . <number> release . this <allcaps> psp </allcaps> does not yet have the following updates to bring it up to match the development versions of the other psps : # <number> enhanced build script # <number> - change uint32 to cpuaddr # <number> - dependency management # <number> compatibility with <allcaps> cfe </allcaps> "" const "" <allcaps> api </allcaps> # <number> - clean up build macros",2
"outdated license ( ? ) many files in the <allcaps> psp </allcaps> ( and one in the <allcaps> cfs </allcaps> ) contain a file license header that seems to be outdated ? it does not reference the <allcaps> nosa </allcaps> , and seems to include restrictions that are in conflict with the <allcaps> nosa </allcaps> ( see the 2 nd paragraph ) . note , working with the sourceforge cfe release . an example : { { { * * copyright ( c ) <number> - <number> , united states government as represented by the * * administrator of the national aeronautics space administration . * * all rights reserved . this software ( cfe ) was created at <allcaps> nasa </allcaps> goddard * * space flight center pursuant to government contracts . * * * * this software may be used only pursuant to a united states government * * sponsored project and the united states government may not be charged * * for use thereof . } } } a quick grep showed these files : { { { find . - type f - exec grep - li "" this software may be used only "" { } \; . / <allcaps> cfs </allcaps> / hs / fsw / unit_test / cfe_psp_timer . c . / cfe / psp / fsw / mcp750 - vxworks6 . <number> / inc / psp_version . h . / cfe / psp / fsw / mcp750 - vxworks6 . <number> / inc / cfe_psp_config . h . / cfe / psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_support . c . / cfe / psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_start . c . / cfe / psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_ssr . c . / cfe / psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_voltab . c . / cfe / psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_exception . c . / cfe / psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_watchdog . c . / cfe / psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_timer . c . / cfe / psp / fsw / mcp750 - vxworks6 . <number> / src / cfe_psp_memory . c . / cfe / psp / fsw / inc / cfe_psp . h . / cfe / psp / fsw / arm - linux / inc / psp_version . h . / cfe / psp / fsw / arm - linux / inc / cfe_psp_config . h . / cfe / psp / fsw / arm - linux / src / cfe_psp_support . c . / cfe / psp / fsw / arm - linux / src / cfe_psp_start . c . / cfe / psp / fsw / arm - linux / src / cfe_psp_ssr . c . / cfe / psp / fsw / arm - linux / src / cfe_psp_voltab . c . / cfe / psp / fsw / arm - linux / src / cfe_psp_exception . c . / cfe / psp / fsw / arm - linux / src / cfe_psp_watchdog . c . / cfe / psp / fsw / arm - linux / src / cfe_psp_timer . c . / cfe / psp / fsw / arm - linux / src / cfe_psp_memory . c . / cfe / psp / fsw / pc - cygwin / inc / psp_version . h . / cfe / psp / fsw / pc - cygwin / inc / cfe_psp_config . h . / cfe / psp / fsw / pc - cygwin / src / cfe_psp_support . c . / cfe / psp / fsw / pc - cygwin / src / cfe_psp_start . c . / cfe / psp / fsw / pc - cygwin / src / cfe_psp_ssr . c . / cfe / psp / fsw / pc - cygwin / src / cfe_psp_voltab . c . / cfe / psp / fsw / pc - cygwin / src / cfe_psp_exception . c . / cfe / psp / fsw / pc - cygwin / src / cfe_psp_watchdog . c . / cfe / psp / fsw / pc - cygwin / src / cfe_psp_timer . c . / cfe / psp / fsw / pc - cygwin / src / cfe_psp_memory . c . / cfe / psp / fsw / mac - osx / inc / psp_version . h . / cfe / psp / fsw / mac - osx / inc / cfe_psp_config . h . / cfe / psp / fsw / mac - osx / src / cfe_psp_support . c . / cfe / psp / fsw / mac - osx / src / cfe_psp_start . c . / cfe / psp / fsw / mac - osx / src / cfe_psp_ssr . c . / cfe / psp / fsw / mac - osx / src / cfe_psp_voltab . c . / cfe / psp / fsw / mac - osx / src / cfe_psp_exception . c . / cfe / psp / fsw / mac - osx / src / cfe_psp_watchdog . c . / cfe / psp / fsw / mac - osx / src / cfe_psp_timer . c . / cfe / psp / fsw / mac - osx / src / cfe_psp_memory . c . / cfe / psp / fsw / pc - linux / inc / psp_version . h . / cfe / psp / fsw / pc - linux / inc / cfe_psp_config . h . / cfe / psp / fsw / pc - linux / src / cfe_psp_support . c . / cfe / psp / fsw / pc - linux / src / cfe_psp_start . c . / cfe / psp / fsw / pc - linux / src / cfe_psp_ssr . c . / cfe / psp / fsw / pc - linux / src / cfe_psp_voltab . c . / cfe / psp / fsw / pc - linux / src / cfe_psp_exception . c . / cfe / psp / fsw / pc - linux / src / cfe_psp_watchdog . c . / cfe / psp / fsw / pc - linux / src / cfe_psp_timer . c . / cfe / psp / fsw / pc - linux / src / cfe_psp_memory . c . / cfe / psp / fsw / grut699 - vxworks6 / inc / psp_version . h . / cfe / psp / fsw / grut699 - vxworks6 / inc / cfe_psp_config . h . / cfe / psp / fsw / grut699 - vxworks6 / src / cfe_psp_support . c . / cfe / psp / fsw / grut699 - vxworks6 / src / cfe_psp_start . c . / cfe / psp / fsw / grut699 - vxworks6 / src / cfe_psp_ssr . c . / cfe / psp / fsw / grut699 - vxworks6 / src / cfe_psp_voltab . c . / cfe / psp / fsw / grut699 - vxworks6 / src / cfe_psp_exception . c . / cfe / psp / fsw / grut699 - vxworks6 / src / cfe_psp_watchdog . c . / cfe / psp / fsw / grut699 - vxworks6 / src / cfe_psp_timer . c . / cfe / psp / fsw / grut699 - vxworks6 / src / cfe_psp_memory . c . / cfe / psp / fsw / mcf5235 - rtems / inc / psp_version . h . / cfe / psp / fsw / mcf5235 - rtems / inc / cfe_psp_config . h . / cfe / psp / fsw / mcf5235 - rtems / src / cfe_psp_support . c . / cfe / psp / fsw / mcf5235 - rtems / src / cfe_psp_start . c . / cfe / psp / fsw / mcf5235 - rtems / src / cfe_psp_ssr . c . / cfe / psp / fsw / mcf5235 - rtems / src / cfe_psp_voltab . c . / cfe / psp / fsw / mcf5235 - rtems / src / cfe_psp_exception . c . / cfe / psp / fsw / mcf5235 - rtems / src / cfe_psp_watchdog . c . / cfe / psp / fsw / mcf5235 - rtems / src / cfe_psp_timer . c . / cfe / psp / fsw / mcf5235 - rtems / src / cfe_psp_memory . c } } }",0
"<allcaps> psp </allcaps> startup code should confirm that os_api_init worked if the { { { os_api_init ( ) } } } call fails for some reason , it means that the <allcaps> osal </allcaps> services are not available . this can result in some very strange and hard - to - debug situations , if it gets so far as to use underlying os primitives that have not been initialized . proceeding to call <allcaps> cfe </allcaps> main after a os_api_init failure is undefined and almost certain to deadlock the process . it would be preferable to call the <allcaps> psp </allcaps> panic function to make the initialization failure obvious .",0
"race condition : <allcaps> psp </allcaps> timer callbacks are set up and started before cfe_time is running this was the point brought up by chris monaco during today ' s <allcaps> ccb </allcaps> meeting while discussing the <allcaps> cfe </allcaps> core app startup dependencies the reference tickets in cfe : [ <url> and [ <url> the problem is that the <allcaps> psp </allcaps> actually starts the timer before calling cfe_es_main ( ) . depending on how long it takes to reach the initialization for cfe_time , the timer may fire and call the 1 hz function before the semaphore is created or the 1 hz task is started . <section> : this issue actually becomes moot when the latest { { { posix - ng } } } or { { { rtems - ng } } } <allcaps> osal </allcaps> is used . with this version a mutex id of <number> is never valid , and attempting to "" give "" that mutex will fail in a benign manner and do nothing . although it is not an ideal fix , there is no chance of problems occurring due to this when using these osals . <section> : delaying the start of the 1 hz tick may not be an option because this means scheduling will not work until cfe_es_main ( ) returns , which may be considerably delayed if apps have long startup sequences , or if they actually depend on the 1 hz signal in order to start properly .",0
"small fixes pc - rtems <allcaps> bsp </allcaps> this fixes a number of small issues found when testing the "" pc - rtems "" <allcaps> psp </allcaps> : * when compiling with - pedantic , gcc complains about the old - style initializer syntax * move the shell init call earlier in the main process , this is more logical placement and allows for a working console in the event that the <allcaps> cfe </allcaps> main function has a problem . * utilize the os_api_wait call implemented in the newest <allcaps> osal </allcaps> * remove conditional compiles around timer setups ( it is not expected this <allcaps> psp </allcaps> will be used with earlier <allcaps> osal </allcaps> versions )",0
"fix pc - linux <allcaps> psp </allcaps> for the latest <allcaps> osal </allcaps> several items in the pc - linux <allcaps> psp </allcaps> can be removed / cleaned up when using the newest revisions of <allcaps> osal </allcaps> : * the hack to use { { { - m32 } } } can be removed as the latest osal works with <number> bit natively * the installation subdirectory should be "" cf "" rather than "" eeprom1 "" * the task priority modifications done in main ( ) ( cfe_psp_start . c ) are now integrated into os_api_init and os_api_wait so these can be removed .",0
enforce strict <allcaps> ascii </allcaps> replace all non - <allcaps> ascii </allcaps> characters ( i . e . copyright symbol ) with <allcaps> ascii </allcaps> equivalent .,0
"fix inclusion of <allcaps> psp </allcaps> internal headers from within public headers the <allcaps> psp </allcaps> public { { { cfe_psp . h } } } file includes configuration and version information from another file which is located in the <allcaps> psp </allcaps> platform - specific ( internal ) subdirectory . specifically , these headers are platform - specific and therefore must only be used within <allcaps> psp </allcaps> itself : * cfe_psp_config . h * psp_version . h access to the values within these platform - specific includes should go through the public <allcaps> api </allcaps> rather than direct inclusion .",0
add xenomai <allcaps> b <elongated> psp </allcaps> add xenomai <allcaps> b <elongated> </allcaps> ( beagle bone black ) <allcaps> psp </allcaps> v1 . <number> as delivered from matt benson / odyssey space research on <date>,2
"clean up "" - d "" compile time macros used in pc - linux build the "" pc - linux "" <allcaps> psp </allcaps> defines the following to be added to the compiler <allcaps> cflags </allcaps> for __all__ files in the mission : { { { - d_el - <allcaps> dendian </allcaps> = _el - dsoftware_little_bit_order - d__ix86__ - d_ix86_ - dposix - <sad> 8 6 pc - d_reentrant - d_embed_ - dos_debug_level = <number> } } } these were brought into the cmake build from the original build scripts in order to be consistent just in case any code required it . however , they are unnecessary , many are not even used anywhere in <allcaps> cfe </allcaps> / <allcaps> osal </allcaps> , and potentially even wrong . the reality is that with linux , the "" pc - linux "" is a general purpose <allcaps> psp </allcaps> that can most likely be used on __any__ general - purpose development machine that runs linux . it is not limited to only x86 pc ' s , and in fact works just fine on <allcaps> arm </allcaps> , powerpc , and microblaze targets too . i have successfully used the ( unmodified ) pc - linux <allcaps> psp </allcaps> to execute <allcaps> cfe </allcaps> on a beaglebone black ( <allcaps> arm </allcaps> ) as well as an emulated powerpc <number> based development machine . in all these cases , the "" x86 "" macros are wrong , and on the powerpc , the el / <allcaps> endian </allcaps> / software_little_bit_order are wrong too . to summarize - i recommend removing <section> of these macros from the pc - linux build when using the cmake scripts ( the old makefiles can stay as - is ) .",0
"<allcaps> psp </allcaps> modifications for const - correct <allcaps> cfe api </allcaps> for context , see trac <number> in the <allcaps> cfe </allcaps> repository : [ <url> the <allcaps> cfe api </allcaps> has been updated such that the pointer arguments in functions called via the <allcaps> psp </allcaps> are now declared "" const "" . this helps in several ways , but the most important reason is so they can be safely supplied from a data structure in <allcaps> rom </allcaps> rather than requiring that the data structure be copied to <allcaps> ram </allcaps> first .",0
implement continuous integration tests of cfs <allcaps> psp </allcaps> tree need to construct a ci plan that builds everything that can be built in <code> and runs all of the local test programs that are suitable for fast turnaround automatic test cycles .,2
consider adding psps developed at <allcaps> jsc jsc </allcaps> has developed a number of psps as listed in the attachment . consider adding some or all to repo .,2
"provide grut699 - vxworks6 <allcaps> psp </allcaps> updates <allcaps> jsc </allcaps> developed grut699 - vxworks6 <allcaps> psp </allcaps> from <allcaps> jsc </allcaps> ' s subversion repo rev <number> was provided to <allcaps> gsfc </allcaps> and released with cfe <number> . since its release , changes have been made that need to be push to the main repo . <allcaps> jsc </allcaps> redmine issue # <number> <number> fixes get time base issue in grut699 <allcaps> psp </allcaps> as currently implemented , cfe_psp_get_timebase ( ) does not set tbu and tbl correctly , based on from cfe_es_perf . c : : cfe_es_perflogadd ( ) /* time is stored as <number> <number> bit integers , ( timerlower32 , timerupper32 ) : / / timerlower32 is the curent value of the hardware timer register . / / timerupper32 is the number of times the timer has rolled over . / / / / time is stored as a absolute time instead of a relative time between log / / entries . this will yield better accuracy since storing relative time between / / entries will accumulate ( rounding / sampling ) errors over time . it also is / / faster since the time does not need to be calculated . for this board , since upper is seconds and the <number> - bit timer register is reset to <number> ( basically rolled over ) every second that exactly fits this definition . upper = g_nsecondscount ; < - - upper is correct lower needs to be changed <allcaps> from </allcaps> lower = systimestamplock ( ); lower /= systimestampfreq ( ) / 1 0 0 0 0 0 0 ul ; to lower = systimestamplock ( ); when using using the <number> - bit <allcaps> tbr </allcaps> on <allcaps> ppc </allcaps> processors , this definition still fits , because the upper <number> - bits increments each time the lower <number> - bits rolls over at <number> ^ <number> . also , in cfe_psp_timer . c , i am pretty sure that cfe_psp_timer_low32_rollover should be <number> instead of <number> . it rolls over each second at <number> ticks . <number> means it rolls over at its max ( <number> ^ <number> ) value , which in this case it does not . <allcaps> note </allcaps> : this only impacts the correctness of performance log data time tags . no other code in <allcaps> cfs </allcaps> uses this function . <allcaps> jsc </allcaps> redmine issue <number> <number> <allcaps> psp </allcaps> updates for cfe <number> . x compatibility in compiler - opts . mak , changed <allcaps> from </allcaps> : $( cfe_tools ) / elf2cfetbl / elf2cfetbl to table_bin = elf2cfetbl also , changed <allcaps> psp </allcaps> rev to <number>",0
"add pc - rtems <allcaps> psp </allcaps> "" pc - rtems "" is a <allcaps> psp </allcaps> implemented for running <allcaps> cfe </allcaps> on standard pc hardware using the <allcaps> rtems os </allcaps> . it is mainly targeted at debugging or proof - of - concept validation using <allcaps> qemu </allcaps> as an emulator to provide a virtual pc hardware . it can also potentially be used as a build target for bamboo builds to ensure that all code builds , links , and runs properly using <allcaps> rtems </allcaps> .",2
document available psps in trac wiki it would be helpful to construct a small wiki page corresponding to each platform support package giving a quick overview of the platform for which support is being provided . i suggest including hotlinks on each such page back into the <code> subtree of the specific <allcaps> psp </allcaps> for extended documentation - - as clones will obtain the content of the project sources but do not clone the trac wiki .,0
"add pc - rtems <allcaps> psp </allcaps> "" pc - rtems "" is a <allcaps> psp </allcaps> implemented for running <allcaps> cfe </allcaps> on standard pc hardware using the <allcaps> rtems os </allcaps> . it is mainly targeted at debugging or proof - of - concept validation using <allcaps> qemu </allcaps> as an emulator to provide a virtual pc hardware . it can also potentially be used as a build target for bamboo builds to ensure that all code builds , links , and runs properly using <allcaps> rtems </allcaps> .",2
"<allcaps> psp </allcaps> needs unit tests this project has no unit tests that can be run as part of an automatic build - and - test cycle to assure that a change has not broken fundamental behaviors . we need central portable unit tests that can be run against any <allcaps> psp </allcaps> that check the basic behaviors required of every <allcaps> psp </allcaps> , and a way for individual psps to provide additional unit tests that verify any <allcaps> psp </allcaps> - specific required behaviors .",2
"<allcaps> psp </allcaps> memory , port , and <allcaps> eeprom </allcaps> functions assume direct - mapped access the <allcaps> psp </allcaps> currently provides a number of access functions such as cfe_psp_memwrite8 / <number> / <number> , cfe_psp_portread8 / <number> / <number> , etc . these functions all assume that the memory is directly accessible to the current process by simply casting the address as a pointer and directly reading / writing from it . unfortunately this is often <section> the case . * i / o port access in the x86 / intel world is never memory mapped and requires different instructions ( inline asm or kernel syscalls ) in order to get to it . * when using virtual memory , physical memory addresses are not directly accessible to the running process until the memory is mapped into the current virtual memory space . * many <allcaps> eeprom </allcaps> devices are actually connected via a serial bus such as <allcaps> spi </allcaps> or <allcaps> twi </allcaps> and therefore would not be memory mapped . with the way it is structured right now , cfe_psp_ram . c , cfe_psp_port . c , and ( to a lesser degree ) cfe_psp_eeprom . c only provide slow performance - robbing function calls to simply cast a pointer . furthermore , it is arguable whether direct i / o port or physical memory access even belongs in the <allcaps> psp </allcaps> at all ; the <allcaps> api </allcaps> this provides to the application layer remains far too hardware - specific to provide any useful abstraction . any <allcaps> cfs </allcaps> application performing direct i / o is already unlikely to be portable to any other platform , since ( by definition ) this would be accessing a specific hardware device at a specific location . proposed changes : * stop compiling cfe_psp_ram . c , cfe_psp_port . c , and cfe_psp_eeprom . c from the "" shared "" code by default ; what these currently implement is more of an exception than the general rule . these can be renamed or moved to indicate they are not always used . * deprecate / discourage future use of the <allcaps> ram </allcaps> / port access functions . instead , a "" driver "" architecture should be used so the hardware device can be better abstracted ( see # <number> this also allows easier simulation of the hardware , and the resulting <allcaps> cfs </allcaps> application will be much more portable / reusable . * on the <allcaps> psp </allcaps> ' s for which direct memory access / / is / / valid , they can continue to compile - in the current implementations to maintain backward compatibility . * on the <allcaps> psp </allcaps> ' s for which direct memory access / / is not / / valid , either customized functions can be provided or simply return the not_implemented error .",2
"remove references to "" cfe_platform_cfg . h "" from <allcaps> psp </allcaps> for maximum portability and the simplest build process , the <allcaps> psp </allcaps> library should be completely independent of the specific <allcaps> cfe </allcaps> configuration that is running on top of it . the <allcaps> psp </allcaps> ' s behavior should be dictated entirely by the capabilities / capacities of the platform it is supporting , not the application using it . as such , it should not need to directly "" compile - in "" any values or definitions from the application layer ( cfe ) . * the "" reset types "" returned by the <allcaps> psp </allcaps> functions use a definition that comes directly from the <allcaps> cfe es </allcaps> core application . since the hardware platform is what actually defines the different reset types , the definition of these types really belongs in the <allcaps> psp </allcaps> . * for memory area sizes , a better differentiation should be made between the size of memory that the hardware provides ( capacities ) and the sizes that cfe needs in order to operate ( requirements ) . currently only one value is defined for both which is not really accurate ; the cfe_platform_cfg . h defines the cfe requirements but the capacities are fixed by the physical hardware available .",0
"fix all <allcaps> psp </allcaps> memory functions that use a uint32 for memory addresses many functions within the <allcaps> psp </allcaps> code use a uint32 to store a memory address . this practice reduces code portability , most importantly it completely breaks on <number> - bit processors . reference [ <url> at a minimum the uint32 should be replaced with an integer type guaranteed to be wide enough for memory addresses on the local <allcaps> cpu </allcaps> . note that this change depends on having an <allcaps> osal </allcaps> that offers the "" cpuaddr "" type for this purpose .",0
"clean up shared <allcaps> eeprom </allcaps> read / write implementation the code in "" cfe_psp_eeprom . c "" is far more complicated than it needs to be . the objective of this code appears to be to accomplish basic read / writes of <number> , <number> , or <number> bit values to a memory device that only supports <number> bit access . therefore for words less than <number> bits it performs a read - modify - write sequence . it has a completely separate implementations for big endian vs little endian . the code could be easily made endian - neutral and <allcaps> much </allcaps> simpler by first reading the <number> bit value into a union and then performing simple byte / word access to update the value , then write it back . all <hashtag> if defs </hashtag> would become unnecessary and the code would be much more straightforward .",2
"<allcaps> psp </allcaps> modular build enhancements currently , in order to support a different variant of a board , such as one that has the same processor but different set of peripherals , one must "" clone "" the entire <allcaps> psp </allcaps> of the board and modify it to support the new board . the problem with this approach is that as usage becomes more widespread we will end up with a large number of similar - but - different psps needing maintenance . any change to the <allcaps> cfe </allcaps> that requires <allcaps> psp </allcaps> support will require updating <allcaps> all variants </allcaps> of the <allcaps> psp </allcaps> which will become increasingly difficult . the cmake build system introduced in ticket # <number> as the ability to / / statically / / link in a set of extra mission - defined code modules into the <allcaps> psp </allcaps> library . with this system in place , <allcaps> cfs </allcaps> applications can bind to specific "" <allcaps> psp </allcaps> drivers "" at runtime . this is analogous to statically linking driver modules into the linux kernel depending on the hardware configuration . as long as the interface is the same ( e . g . "" / dev / ttys *"") , the application need not know what hardware is actually providing the interface . this allows code re - use in many ways : * a single <allcaps> psp </allcaps> can support multiple physical board variations by loading a different module set . * multiple <allcaps> psp </allcaps> ' s can leverage the same drivers where appropriate ( e . g . an <allcaps> adc </allcaps> driver that communicates over a serial bus can work equally well on <allcaps> arm </allcaps> , x86 , or <allcaps> ppc </allcaps> as long as it has a compatible serial bus ) . * as long as all similar - function <allcaps> psp </allcaps> modules provide the same application - facing <allcaps> api </allcaps> , any <allcaps> cfs </allcaps> application implementing "" business logic "" can operate in a completely hardware - independent manner . the driver module can be replaced with a different module and the <allcaps> cfs </allcaps> application does not need to change ( or even be recompiled ) to work with alternate hardware . this framework should help avoid the need to "" clone - and - own "" a <allcaps> psp </allcaps> for a particular project . this is especially true for linux psps which are already very generic ( e . g . pc - linux easily runs on <allcaps> arm </allcaps> linux or <allcaps> ppc </allcaps> linux ) . the framework is a very simple extension to the <allcaps> psp </allcaps> and does not change existing <allcaps> psp </allcaps> apis so it will not interfere with existing code .",2
enhanced build system for cfs this ticket is for the <allcaps> psp </allcaps> portion of the enhanced build system pushed out under the corresponding cfs ticket : [ <url>,2
