text,label
"fix # <number> , removes extraneous boolean logic in concat command <section> - fixes # <number> - removes boolean logic tracking file status which results in reduction of cyclomatic complexity to <number> from <number> by bundling logic in one single nested if / else according to file status . <section> - lcov - build - cert_testbed cfe_evs_concatfilescmd . json functional test successful <section> no impact to behavior <section> - os : ubuntu <number> <section> could be argued that the concat function is more readable as - is , but this way , the <allcaps> nasa </allcaps> recommendation of <number> max cyclomatic complexity per function is satisfied . <section> n / a <section> justin figueroa , vantage systems",2
"split header files into external and internal components <section> configuration and header files for this app currently have mixed scope - some items apply globally ( mission ) and some only affect the internal app behavior . <section> split headers into single scope , so they contain only public / global items ( i . e . those that affect <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> / table definitions ) or they contain private / internal items . the latter would be things that are only used within the local application code and do not affect the interface . <section> similar to nasa / hs # <number> . this helps stabilize the interface , so configuration items that do change the interface are clearly marked in a separate file and the user is more aware of the impact the changes will have . it ' s also important for <allcaps> eds </allcaps> , where some of these files are generated - keeping a single scope allows for simple source selection vs . <code> s . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , convert <code> return codes and variables to <code> <section> - fixes # <number> - most <code> return codes converted over to <code> - <code> <code> / <code> variables holding cfe return codes converted to <code> <section> github ci actions all passing successfully . <section> no change to behavior . <code> is more expressive and improves consistency with cfe / cfs . <section> avi weiss <user>",2
fm <code> return codes and variables should be converted to <code> <section> fm has quite a few return codes ( as well as local <code> / <code> variables which hold <allcaps> cfe </allcaps> return codes ) that can be easily converted over to the <code> typedef . <section> use the more expressive <code> and improve consistency with cfs . <section> avi weiss <user>,2
"fm_childconcatcmd - cyclomatic complexity of <number> * x ] i reviewed the [ contributing guide <url> . * x ] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> <allcaps> nasa </allcaps> guidelines in <allcaps> npr </allcaps> <number> . 2 d recommends maintaining a cyclomatic complexity in software , in particular flight software of <number> . fm_app . c : : fm_childconcatcmd unnecessarily violates the recommendation with a cyclomatic complexity of <number> . <section> clean up fm_childconcatcmd such that it has a cyclomatic complexity of <number> or less . <section> dan knutsen <allcaps> nasa </allcaps> goddard",2
"use generated stubs for all internal functions <section> fm divides its coverage test into separate units and uses stubs for all units other than the unit under test . however , this appears to be a mixture of hand - written and some generated stubs , and the hand written stubs can diverge from the implementation . <section> re - run the ut assert generate stubs script and use the generated stubs only . <section> this makes the ut stubs easier to maintain - any time a header file changes , just re - run the tool and re - commit the stubs . it is best not to modify the generated stub in any way , if it can be avoided . <section> joseph hickey , vantage systems , inc .",2
"internal <allcaps> api </allcaps> calls are not const - correct ( possible race condition ) <section> functions that accept a pointer as an input only , and do not modify that structure , should be qualified as <code> . in particular , this is true of the software bus messages - these could be distributed to multiple subscribers , and these must not be modified by receivers or else race conditions are introduced . there is at least one case of fm where the buffer is modified . this should be corrected along with adding <code> to all messages . <section> possible race condition if multiple entities subscribe to the same message ( config - dependent ) <section> should not modify input . non - modified input structs should be <code> in the declarations . <section> possible case of input buffer getting modified is here : <url> <section> n / a <section> pretty much most / all of the functions in <code> should accept <code> string inputs . <section> joseph hickey , vantage systems , inc .",0
"move "" fm_globaldata "" back into private / local data structures <section> the <code> object is only used within the fm app for private data storage . it should not be visible externally . however , it is currently defined here in the public <code> file : <url> <section> this should be defined in one of the internal header files , not in a public interface file . <section> public <allcaps> api </allcaps> should generally only be constants / <code> ' s , and typedefs . <allcaps> api </allcaps> calls only for libraries - apps do not have public <allcaps> api </allcaps> calls . extern data structs / globals should not be exposed in either apps or libs for a variety of reasons . <section> joseph hickey , vantage systems , inc .",2
"all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message should put content in a "" payload "" sub - structure <section> to match the patterns used in <allcaps> cfe </allcaps> and other modules , all <allcaps> cmd </allcaps> / <allcaps> tlm </allcaps> message definitions should put the content ( non - header ) parts into a separate struct called "" payload "" . <section> separate message content into a sub structure called "" payload "" . <section> this is benefit to tooling that can use the presence of this field to identify where the actual content starts ( e . g . something like <code> would work and be correct , as opposed to checking <code> which may not actually reflect where the content starts due to possible compiler - added padding between them ) . <section> joseph hickey , vantage systems , inc .",2
"inconsistent event id naming <section> copy of <url> after finding that there were <number> different event ids to indicate the same thing ( invalid message id ) in <url> i scrubbed the other common commands ( e . g . task initialisation [ <allcaps> init </allcaps> ] , <allcaps> noop </allcaps> , reset counters etc . ) and found the same issue there - almost every component / app had their own variation of the event id name for the exact same event . <section> apply consistent event id names to the events which are common to all / most components and apps . <section> invalid message id : <code> <code> <code> <code> <code> <code> <code> <code> <code> initialization : <code> <code> <code> <code> <code> <code> <code> <allcaps> noop </allcaps> : <code> <code> <code> <code> <code> <code> reset counters : <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> <code> etc . <section> avi weiss <user>",2
"fm should use cfe_fs_initheader * x] i reviewed the [ contributing guide <url> . * x] i reviewed the [ <allcaps> readme </allcaps> file <url> to see if the feature is in the major future work . * [x ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> fm initializes and populates the <allcaps> cfe fs </allcaps> header itself this requires fm to understand the details of the header structure and could break if that structure changes . <section> fm should instead use the cfe_fs_initheader function which is designed to do exactly this . <section> haven carlson",2
resolve issues building users guide with ubuntu <number> / doxygen <date> <section> doxygen <code> <section> remove unnecessary documentation <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"fm_childsizetimemode does not clear filemode on os_stat failure <section> filemode could be uninitilized when written if there ' s an os_stat failure since it ' s not cleared : <url> <section> pass in uninitialized filemode , observe not cleared on os_stat failure . <section> should clear all values . <section> observation <section> low likelihood of ever seeing this ( maybe file deleted between directory read and os_stat ? ) , and just would write uninitialized data to the output . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"internal delete command support not in requirements , does not match description <section> fm_delete_int_cc is out of family . fm is operator interface to the file system , not what other elements should use to delete files . also strange handling in that it updates command counters but does not send the event message , so it would break normal / simple command counter confirmation approach for ground commands . <section> deprecate and / or directly remove support of this command . other apps should use os_remove directly instead of relying on fm . goal is to reduce interdependency . <section> none <section> replaces : - # <number> - # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , updates <allcaps> cla </allcaps> information for apache <number> deletes old fm clas , removes language in contributing . md of app - specific <allcaps> cla </allcaps> , adds link to new clas in pull_request_template <section> a clear and concise description of what the contribution is . - fixes # <number> - fixes <url> <section> visually inspected links in fork and in pr template . <section> all references to clas should be updated to the cfs app <allcaps> cla </allcaps> . <section> google chrome browser <section> none <section> justin figueroa , <allcaps> asrc </allcaps> federal",1
"update <allcaps> cla </allcaps> information * [ ] i performed a cursory search to see if the feature request is relevant , not redundant , nor in conflict with other tickets . <section> have new clas given the change in <url> with the combined <allcaps> cla </allcaps> , <section> - [ ] update the instructions in each app ' s contributing . md - [ ] delete old <allcaps> cla </allcaps> pdfs - [ ] update pr and issue templates as needed <section> none <section> none <section> gerardo e . cruz - ortiz",1
remove cfe_psp_memset and cfe_psp_memcpy use on addresses in <allcaps> ram </allcaps> <section> should just use memset / memcpy for addresses in <allcaps> ram </allcaps> . the <allcaps> psp </allcaps> functions serve no use in this context . <section> replace with memset / memcpy . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"potential truncation of number of open files the number of open files is treated as a uint32 by <allcaps> fsw </allcaps> , but is telemetered as a uint8 such that truncation may result if the number of open files allowed by <allcaps> osal </allcaps> grows .",2
style warnings in strict cppcheck analysis <section> currently fails cppcheck strict checking in static analysis workflow : <url> <code> <section> fix <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"either fm unit testing is incorrect or an <allcaps> osal </allcaps> enumeration is incorrect <user> commented on fri <date> <url> <section> i do not know if this an fm bug or an <allcaps> osal </allcaps> bug . i do not know what the intent on either side was . fm is failing unit tests . the first error indicates before <allcaps> osal </allcaps> <number> . <number> - bv , fm determined if a directory entry was a directory by using the s_ifdir macro directly , but had an <hashtag> if def </hashtag> that allowed it to use an <allcaps> osal </allcaps> defined macro instead . <code> with <allcaps> osal </allcaps> <number> . <number> - bv , the os_filestat_isdir macro is defined and fm is using the os_filestat_isdir macro . the unit test sets the filestatus . filemodebits to <number> ( 0x 4 0 0 0 ) , but the os_filestat_isdir tests equality against os_filestat_mode_dir ( 0x 1 0 0 0 0 ) so the unit tests fail . i do not know if the <allcaps> osal </allcaps> developer intended to use the value expected by fm ( 0x 4 0 0 0 ) , or if the fm should be : from : <code> to : <code> making the change above fixes these errors , but so does changing the enumeration from : os_filestat_mode_dir = 0x 1 0 0 0 0 to os_filestat_mode_dir = 0x 4 0 0 0 <section> steps to reproduce the behavior : <number> . build fm unit tests with the ut_assert , hooks , and stubs from cfe <number> . 0 a <number> . run fm unit tests <section> fm unit tests should pass . <section> - virtualbox - ubuntu <number> - fm <number> . <number> , <allcaps> osal </allcaps> <number> . <number> - bv , app ut_assert , hooks , and stubs from cfe <number> . 0 a <section> mathew benson windhover labs , <allcaps> llc </allcaps> <email> - - - <user> commented on mon <date> <url> <user> is this resolved with the latest fm release ?",0
"static analysis issues relative to flight code handful of static analysis issues in the "" red "" identified ( non - style issues ) . need to resolve these . filter : - file : elf - file : ut - file : cfe - file : os - file : cf_ - file : _lab_app . c ! ( significance : style ) should resolve and / or disposition the higher ranked ones at minimum . note license restricts publishing issues . imported from <allcaps> gsfccfs </allcaps> - <number>",0
apps should use cfe_msg_ptr macro instead of cast or local unwrapping apps typically cast to a cfe_msg_message_t or use * . msg . better to use abstracted cfe_msg_ptr . <allcaps> note </allcaps> - not backwards compatible with caelum so recommend not addressing in draco . imported from <allcaps> gsfccfs </allcaps> - <number>,2
"fm dir list to file does not clean buffer fm get directory list to file ( fm_get_dir_file_cc ) currently is not zeroing out the buffer of dirlistdata . entryname so there can be a bunch of random stuff in there . the dirlistdata that is written currently looks like this : entryname : fm_dirlist . out \ <number> \ <number> / dev / shmw �  \ <number> \ 0 0 hw �  \ <number> \ <number> j �  \ <number> \ <number> �  \ <number> \ <number> � � � entrysize : <number> modifytime : <phone> mode : <number> when it it should look like this : entryname : fm_dirlist . out entrysize : <number> modifytime : <phone> mode : <number> the code looks like this , the commented out part is what is missing and would fix the problem . /* populate directory list file entry */ / / cfe_psp_memset ( & dirlistdata , <number> , sizeof ( fm_dirlistentry_t ) ); strncpy ( dirlistdata . entryname , os_direntry_name ( direntry ) , entrylength ) ; dirlistdata . entryname [ entrylength ] = ' \ <number> ' ; imported from <allcaps> gsfccfs </allcaps> - <number>",2
"ds and fm use the same default subtype ds and fm both use "" <number> "" as the default file subtype ds / fsw / platform_inc / ds_platform_cfg . h : <hashtag> define </hashtag> ds_file_hdr_subtype <number> fm / fsw / platform_inc / fm_platform_cfg . h : <hashtag> define </hashtag> fm_dir_list_file_subtype <number> imported from <allcaps> gsfccfs </allcaps> - <number>",2
"add signature checking command to fm stakeholder request - add a command to check the signature of a file . in the open source version of the app , this will call an empty stub in fs_lib that will always succeed ( allows external users to fill in their own implementation ) . imported from <allcaps> gsfccfs </allcaps> - <number>",2
"add untar command to fm stakeholder requested that untar capability be added in cfe . in design discussions with the framework team , it was decided that it made sense to pull the decompress capability out of the framework and into a library , and to then add an untar command to the fm app . imported from <allcaps> gsfccfs </allcaps> - <number>",2
fm configuration parameter limits need clarification a number of fm configuration parameters have limits for which the reason is obscure at best . limits need to be re - evaluated and comments should give clear reasoning for the limit . imported from <allcaps> gsfccfs </allcaps> - <number>,2
fm return statements not needed for void function finding from code review imported from <allcaps> gsfccfs </allcaps> - <number>,2
"reduce redundant code in fm_cmd_utils . c most verify functions in fm_cmd_utils contain several instances of checking the filenamestate . could that code be refactored into its own function that receives the set of valid return codes , and is able to validate the return code or report the errors ( maybe a bitmap ) . this would eliminate a big portion of redundant code . or could it use switch statements ? imported from <allcaps> gsfccfs </allcaps> - <number>",2
"unrepeatable queue full error during fm file info command the fm main task has an internal queue to pass commands to the fm child task . most command are executed by the child task since the command execution time is unknown or variable . a stakeholder has experience two cases where an fm command somehow broke the fm main task and fm child task communication . the fm main task says the internal queue is full and the child task says it ' s waiting for the next command . in flight , this problem seemed to go away after <number> minutes and the fm child task reported the <number> queued commands had warnings . when it happened on the ground we did not wait long enough to see if it would clear up . it appears the sem give / take got confused . not sure how this can happen . observed on system using vxworks <number> , <allcaps> cfe </allcaps> <number> . <number> , fm <number> . <number> . imported from <allcaps> gsfccfs </allcaps> - <number>",0
"fm is incompatible with recent <allcaps> osal api </allcaps> changes this is regarding <allcaps> osal </allcaps> <number> . <number> - bv . fm calls os_opendir , os_readdir , and os_closedir which were removed in favor of os_directoryopen , os_directoryread , and os_directoryclose . i expect to see other issues as i make fixes to pass unit testing . i will post them here .",0
"cfe <number> . <number> ( <allcaps> osal </allcaps> <number> . <number> ) comparability issues while integrating file manager app <number> . <number> with cfe <number> . <number> ( <allcaps> osal </allcaps> <number> . <number> ) i ran into an issue . fm has a command that allows users to receive a telemetry packet listing all of the open files . in order to do this fm needs to be able to query <allcaps> osal </allcaps> ' s file stream resource objects . the current <allcaps> osal </allcaps> implementation only allows a creator to query all of the resources objects by using os_foreachobject ( ) . i wrote <allcaps> osal </allcaps> ticket # <number> to recommend a more general query feature would be helpful . in opensatkit i added a new function os_queryobjecttype ( ) that allows anyone ( not restricted to the creator ) to query a resource type . the specific <allcaps> osal </allcaps> changes are below followed by the fm code that uses the function . these changes were made for openstakit <number> that can be found at <url> this ticket can only be implemented once the <allcaps> osal </allcaps> is updated with a new feature that allows fm to query the resources objects . # # osapi - os - core . h : /* * * typedef for object query <allcaps> osal </allcaps> callback functions . a query does not * * have to be performed by the object creator . all fields of the * * query_record are completed . * * * * this may be used by multiple apis */ typedef struct { const char * name_entry ; uint32 creator ; uint16 refcount ; } os_query_record_t ; typedef void ( * os_objquerycallback_t ) ( os_query_record_t * query_rec , void * callback_arg ) ; / / dcm - added for <allcaps> osk </allcaps> /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */ /* * * <user> query an object resource type maintained by the <allcaps> osal </allcaps> * * user supplied callback is called for all active resources of a particular type * regardless of whether the caller created the object . * */ uint32 os_queryobjecttype ( uint32 obj_type , os_objquerycallback_t callback_ptr , os_query_record_t * query_rec , void * callback_arg ) ; / / dcm - added for <allcaps> osk </allcaps> # # osapi - idmap . c : /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - * * function : os_queryobjecttype * * purpose : implemented per public <allcaps> osal api </allcaps> * see description in <allcaps> api </allcaps> and header file for detail * * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */ uint32 os_queryobjecttype ( uint32 obj_type , os_objquerycallback_t callback_ptr , os_query_record_t * query_rec , void * callback_arg ) { uint32 obj_index ; uint32 obj_max ; uint32 obj_id ; uint32 active_obj_cnt = <number> ; os_common_record_t * obj_rec ; obj_max = os_getmaxforobjecttype ( obj_type ) ; if ( obj_max > <number> ) { os_lock_global_impl ( obj_type ) ; obj_index = os_getbaseforobjecttype ( obj_type ) ; while ( obj_max > <number> ) { obj_rec = & os_common_table [ obj_index ] ; obj_id = obj_rec - > active_id ; if ( obj_id ! = <number> ) { query_rec - > name_entry = obj_rec - > name_entry ; query_rec - > creator = obj_rec - > creator ; query_rec - > refcount = obj_rec - > refcount ; /* * handle the object - note that we must un - lock before callback . * the callback function might lock again in a different manner . */ os_unlock_global_impl ( obj_type ) ; ( * callback_ptr ) ( query_rec , callback_arg ) ; os_lock_global_impl ( obj_type ) ; + + active_obj_cnt ; } + + obj_index ; - - obj_max ; } os_unlock_global_impl ( obj_type ) ; } return active_obj_cnt ; } /* end os_queryobjecttype ( ) */ # # fm_cmd_utils . c : static uint32 open_file_cnt = <number> ; static void loadopenfiledata ( os_query_record_t * query_rec , void * callback_arg ) { fm_openfilesentry_t * openfilesdata = ( fm_openfilesentry_t <wink> callback_arg ; cfe_es_taskinfo_t taskinfo ; if ( openfilesdata ! = ( fm_openfilesentry_t <wink> <allcaps> null </allcaps> ) { /* fdtableentry . path has logical filename saved when file was opened */ strcpy ( openfilesdata [ open_file_cnt ] . logicalname , query_rec - > name_entry ) ; /* get the name of the application that opened the file */ cfe_psp_memset ( & taskinfo , <number> , sizeof ( cfe_es_taskinfo_t ) ); if ( cfe_es_gettaskinfo ( & taskinfo , query_rec - > creator ) = = cfe_success ) { strcpy ( openfilesdata [ open_file_cnt ] . appname , ( char <wink> taskinfo . appname ) ; } } + + open_file_cnt ; } /* end loadopenfiledata ( ) */ /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ /* */ /* fm utility function - - get open files data */ /* */ /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ uint32 fm_getopenfilesdata ( fm_openfilesentry_t * openfilesdata ) { os_query_record_t query_rec ; open_file_cnt = <number> ; os_queryobjecttype ( os_object_type_os_stream , loadopenfiledata , & query_rec , ( void <wink> openfilesdata ) ; return open_file_cnt ; } /* end fm_getopenfilesdata */",0
"cfe core services can create files fm can not delete <section> a few commands to the cfe core services , and possibly some cfs applications , are able to create files that cannot then be moved , renamed , deleted , or otherwise by fm . one example is <code> ( <code> ) . this command ( and all others that take filenames in the cfe core ) do not check the validity of a filename ; they simply pull the filename from the command and call <code> or <code> immediately . fm , on the other hand , calls <code> to check for validity of provided filenames in all commands . so , if a command like <code> is used to create a file with an invalid filename , fm cannot then access that file in any way . <section> steps to reproduce the behavior : <number> . use <code> to create a log file in <code> with a <code> in its filename . <number> . attempt to delete this file with fm . <section> i would expect that no cfe application , or cfe itself , should be able to create files with invalid filenames . my suggested fix , and how we have fixed this in our local copies of cfe and <allcaps> osal </allcaps> , is to move the <code> function into the <allcaps> osal </allcaps> , and have all <allcaps> osal </allcaps> file <allcaps> api </allcaps> functions perform the check before operating on files . this guarantees that nothing above the <allcaps> osal </allcaps> can create a file with an invalid name . <section> * <allcaps> evs </allcaps> creation of log data files without validating filename <url> * fm check on valid filenames <url> * cfs_lib filename validation <url> <section> - capella flight computer - os : freertos <number> . <number> - versions : cfe <number> . <number> , <allcaps> osal </allcaps> <number> . <number> ( plus in - house freertos port ) , cfs_lib <number> . <number> , fm <number> . <number> <section> this is another one we discovered accidentally operationally . one of our operators created an <allcaps> evs </allcaps> log with a question mark in the name , and then we realized that we could not do anything with that file with fm . we ended up patching the filename check in cfs_lib with mm so it would allow for us to delete the file . <section> mike stewart , capella space .",0
