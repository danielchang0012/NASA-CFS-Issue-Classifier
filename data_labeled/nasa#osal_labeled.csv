text,label
"automate generation of integration candidate branch <section> generating the integration candidate branch is a very straightforward process , although it can be highly time consuming . automating this process can result in significant time savings . <section> use a github workflow to automatically merge a set of pull requests into the integration candidate branch and push it to github . <section> scripts can be used to simplify this process as well , but it requires setup by the person maintaining the repository and is not as portable . <section> dylan baker / <allcaps> nasa gsfc </allcaps> <number>",2
"remove cast when starting timebase callback <section> the cast was originally hiding a bug , as described in # <number> . in # <number> comments , <user> suggested we remove the cast . the commit was made to remove this cast , but somehow the changes were lost . <section> <url> <section> jose f . martinez pedraza / <allcaps> gsfc </allcaps> <number>",0
"add missing doxygen to new ut assert <allcaps> api </allcaps> <section> cfs documentation workflow is failing with some undocumented parameters : <code> <section> add documentation <section> this unfortunately is not found by <allcaps> osal ci </allcaps> workflows , it was found by <allcaps> cfs </allcaps> workflows only after merging to main . potentially need to tweak workflows so this type of thing gets detected by the <allcaps> osal </allcaps> checks and / or a way to point the <allcaps> cfs </allcaps> workflow at the ic branch so it can be identified before merge . <section> joseph hickey , vantage systems , inc .",0
"add utassert_sizet_eq <section> in many cases the code uses <code> to check values that are actually <code> in the implementation . this is mostly ok as long as the sizes are < 4 gib , which is almost always the case on flight systems that usually do not have a lot of memory . <section> to support larger systems in the future , ut assert should have a macro that compares <code> values natively without converting down to <code> first . <section> continue using <code> comparisons , accept limitation that this cannot be used for objects / sizes greater than 4 gib . <section> intent is to be proactive , this will probably become a limiting factor to somebody at some point . plus it is more correct to be able to compare <code> values in a type - safe manner . <section> joseph hickey , vantage systems , inc .",2
stray remaining use of ' goto ' in test code <section> noticed a single stray use of <code> remaining in the test code . <section> use of <code> is advised against by most coding guidelines . preference is to use other method of flow control . <section> <url> <section> avi weiss <user>,2
"scrub for mismatched function prototype / implementation parameter names expected behavior * * while not a risk to behavior , these mismatched parameter names may cause compiler errors in the future on some systems , and can be confusing for maintenance and application programming . <section> cases identified : image <img> <section> avi weiss <user>",2
break up pc rtems bsp to support generic / configurable use <section> the <allcaps> pc rtems osal </allcaps> bsp references pc686 bsp specific calls and does not easily support reconfiguration . see <url> for more context . <section> break up the implementation to support source selection and allow for exclusion of bsp specific calls . could eventually make it generic - rtems w / bsp specific options . <section> add a new bsp . <repeated> but this ends up copying almost all the pc - rtems code . <section> i have got something in work but needs cleanup / discussion to ensure it ' s headed in the right direction . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
remove obsolete <code> <section> <code> is no longer used for anything . <url> <url> <url> <url> <section> remove <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"add option to force rtems_floating_point on all tasks <section> even if a task itself does not use floating point , if the <allcaps> rtems </allcaps> kernel is compiled with floating point enabled underlying functions may use it . under the current scheme , there is not a way to force inclusion of the rtems_floating_point flag for all tasks . <section> add override option to always add flag regardless of the flags passed in to the function call . <section> i am not sure if this is a problem w / other systems . <repeated> could make the flag generic to os ' s ? <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add better support for pointer return values in ut assert <section> currently , ut assert only as built - in support for <number> - bit integer return values , in the form of <code> and <code> . the majority of <allcaps> cfe </allcaps> / <allcaps> cfs </allcaps> apis have a <number> - bit integer return value , so this has been good enough . however , there are also a fair number of <allcaps> cfe </allcaps> functions that return pointer values , and these <code> apis do not currently work for pointer returns . any stub that returns a pointer must have its own custom handler function to help set the return value , and so support is spotty . every function that has a pointer return may have a slightly different way to control the return value , and a different range of things that can be done by the test to modify its behavior . <section> add two new apis to ut assert : - <code> - <code> these would work like the current integer functions , respectively , but accept pointers with a size instead of an integer . this type of signature could support <allcaps> all </allcaps> types of return values , including <number> - bit , <number> - bit , <number> - bit , and potentially even larger structures ( even though code should not output large structures via return value , it could be done ) . <section> a halfway point could be to just add generic reusable handlers that return a pointer , and could be registered to any function . but that would not be as clean , and would still need a separate function for each type . <section> this can be added without breaking any currently - existing tests or stubs , because its only a new type of return record . it would not change anything about the existing logic , just extend it . <section> joseph hickey , vantage systems , inc .",2
"add doxygen dependencies to "" doc - prebuild "" abstract target <section> nasa / cfe # <number> adds an abstract target for dependencies of the documentation build . currently <allcaps> osal </allcaps> requires generating the file <code> before documentation builds are run , so this should be registered as a dependency . this only affects documentation builds of <allcaps> cfe </allcaps> and <allcaps> cfs </allcaps> apps that in turn include <allcaps> osal </allcaps> headers as part of the document . these are depending on some artifacts that are generated by the <allcaps> osal </allcaps> build recipe . <section> add dependencies so that <allcaps> cfe </allcaps> and <allcaps> cfs </allcaps> app documentation builds that refer to <allcaps> osal </allcaps> files will work . <section> see nasa / <allcaps> cfe </allcaps> # <number> and nasa / cf # <number> for more context <section> joseph hickey , vantage systems , inc .",2
variables declared mid - function expected behavior * * all variables should be declared at the top of the function . <section> avi weiss <user>,2
support for freertos <user> and <user> <url> i had this issue . can you please help me to get the support for freertos - <allcaps> cfs </allcaps> .,3
"cppcheck flagging ut_default_stub as unknown macro <section> in recent runs of cppcheck , the following error is being reported <code> <section> run static analysis workflow <section> should pass <section> github workflow <section> see <url> <section> joseph hickey , vantage systems , inc .",0
"cppcheck flagging <allcaps> bugcheck </allcaps> macro as syntax error <section> the use of the <code> macro with the second argument blank looks suspicious and it is reported as a syntax error by newer versions of the <code> tool : <code> <section> execute a recent version of <code> against <allcaps> osal </allcaps> source code - observed in version <number> . <section> should pass cleanly <section> ubuntu <number> <section> the second argument being blank here is intentional , because it is a return value and this is a void function , so it needs to be empty . the syntax is actually valid but it is just a bit unusual . <section> joseph hickey , vantage systems , inc .",0
"allow ut assert tests to specify default verbosity <section> by default , ut assert runs in verbose ( not debug ) mode , where all calls to any assert macro are added to a log , except for <allcaps> debug </allcaps> messages . this means there is a record of tests that <allcaps> pass </allcaps> , which is generally desired for coverage testing . however , if doing fuzz testing , the point is to run a test against a large , random data set and as such there may be thousands ( or even millions ) of assertions . this will result in a very large log file full of "" <allcaps> pass </allcaps> "" messages . ut assert does allow the verbosity to be set , but currently only via command line on a run - by - run basis . <section> allow a test to specify what its default verbosity is supposed to be . for fuzz testing this can be a lower value than the normal coverage testing default . <section> currently test cases that run in a loop or otherwise would generate a large number of <allcaps> pass </allcaps> results use a pattern where the result is checked directly in the test code , e . g . : <code> such that an assertion is only logged if it fails . however , a side effect of this means that the "" pass "" counter and total test counter does not increment to reflect that something was tested / checked - it only increments if it fails . in contrast , by using the normal assert macro but reducing the verbosity means that the counters will still increment , it just does not write a log entry for <allcaps> pass </allcaps> cases . furthermore , a user could manually _increase_ the log level if they actually do want to see them all . <section> joseph hickey , vantage systems , inc .",2
"add random number capability for <allcaps> osal </allcaps> and ut assert <section> there are some circumstances where software ( validly ) needs high - quality random numbers , such as for cryptographic algorithms . the <allcaps> iso c </allcaps> standard <allcaps> api </allcaps> is not sufficient , as functions like <code> are only psuedo - random and thus are not useful for algorithms where true randomness is necessary . furthermore , to support the notion of "" fuzz testing "" the ut assert framework should also have a facility to easily get random numbers . <section> many os ' s have a facility to interface with a true hardware random number generator or get much higher - quality random numbers through software by gathering entropy from a local platform - specific source ( like keystrokes or mouse movements , or electrical noise from an <allcaps> adc </allcaps> , etc ) . <section> initially , this can be as simple as calling <code> once during startup with an unpredictable value , or the system clock tick counter if no real random source is available . this way , if the application does call <code> , the numbers at least will not be the same every time . that would be good enough for low impact tasks like fuzz testing and things of that nature , but would not be sufficient for crypto . <section> to clarify - fuzz testing described here is a functional test concept , independent of coverage testing . for coverage testing using ut assert , it is important that the test case follows predictable branches , and thus random numbers should <section> be used there . fuzz testing , if implemented , would be done as a completely separate test . <section> joseph hickey , vantage systems , inc .",2
"fixed path mapping not always working <section> using the fixed path mapping function os_filesysaddfixedmap ( ) with paths like <section> will only work once . <section> os_filesysaddfixedmap ( , "" / ram0 / cf "" , "" / cf1 "" ); os_filesysaddfixedmap ( , "" / ffx0 / cf "" , "" / cf2 "" ); <section> both paths should be included in the object table <section> this is the part of code that generates a unique dev_name , but <url> <section> - hardware : aitech sp0 - os : vxworks <number> - versions : latest <section> <section> claudio olmi , <allcaps> nasa jsc </allcaps>",0
"direct use of <allcaps> posix </allcaps> permission setting in ut assert <section> the ut assert framework is supposed to be portable , and this should adhere to strict c99 . however , in the goal of squelching a bogus codeql warning - some <allcaps> posix </allcaps> - specific logic got added in # <number> . this seemed to work ( likely because it was never run on a non - <allcaps> posix os </allcaps> ) until it was changed to use a different <allcaps> posix api </allcaps> ( fstat / fchmod ) to address another bogus codeql warning . now , builds are failing because the apis used are marked as <allcaps> posix </allcaps> - specific but we are not compiling this code with <code> ( nor should we , because its supposed to be pure c99 ) . this is currently breaking the mainline build . <section> build ut assert - get the error : <code> this is directly from the validation workflow on a recent cf change . <section> ubuntu ( various ) <section> the codeql warnings about file permissions "" not being set "" are not really valid . <allcaps> unix </allcaps> still allows file permissions to be set by the user , in the form of the umask setting . so the permissions on a file created using pure c99 stdio calls ( <code> ) are not "" unset "" - they are just not set directly by the application , they are controlled externally . <section> joseph hickey , vantage systems , inc .",0
"potentially unsafe use of strcat <section> may cause buffer overflow since the size of the source string is not checked . <section> same behavior with check . <section> <url> <section> caught by codeql . severity is rated at critical . can remove since it is part of coverage testing . <section> ariel adams , <allcaps> mcsg </allcaps> tech",2
"add condition variable implementation for vxworks <section> pull request # <number> added a condition variable <allcaps> api </allcaps> implementation for <allcaps> posix </allcaps> , but <allcaps> rtems </allcaps> and vxworks were set to use the "" not - impl "" module , with a plan to implement in the future . <section> add an implementation of condition variables for vxworks <number> . x <section> only vxworks <number> . x is likely to be supportable , version <number> . x will still need to use the "" not - impl "" module because the underlying sync mechanism may not exist . <section> joseph hickey , vantage systems , inc .",2
"add condition variable implementation for <allcaps> rtems </allcaps> <section> pull request # <number> added a condition variable <allcaps> api </allcaps> implementation for <allcaps> posix </allcaps> , but <allcaps> rtems </allcaps> and vxworks were set to use the "" not - impl "" module , with a plan to implement in the future . <section> add an implementation of condition variables for <allcaps> rtems </allcaps> <section> joseph hickey , vantage systems , inc .",2
"complexity of <allcaps> argcheck </allcaps> macros trigger <allcaps> jpl </allcaps> rule <number> , multiple statements per line <section> consider reworking <allcaps> argcheck </allcaps> . although it reduces repeated lines in code , it does "" hide "" a return within the macro and is not really the simplest macro when combined with os_check_string or similar . note it works . <repeated> it ' s just not a trivial macro so ends up triggering coding standard warnings . <section> although we did just disable the warning in <url> it ' s a warning that would be good to apply to non - macro code at least . really this issue trades macro complexity with function complexity where there is no real right answer in my mind . the point if this issue is to at least document this for future consideration , not necessarily back out the changes . <section> leave as - is <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"standalone <allcaps> osal </allcaps> build should export a package for use by other builds <section> <allcaps> osal </allcaps> is not standalone software that is typically installed on a pc , but rather it is always a component that is intended to be used within a larger software application . currently the cmake build does work in a standalone fashion ( i . e . one can invoke <code> and build the software ) and the software can be compiled but the result is not really usable for inclusion in a larger app . that is , there is no easy way for another ( separate ) application that needs to use <allcaps> osal </allcaps> to reference the headers and static library . <section> cmake has a method for referencing a dependency through its import / export and packaging functionality described here : <url> <section> note this is _not_ necessary when building cfs - in that mode , <allcaps> osal </allcaps> is just included as a subdirectory within the larger build , and this should still be supported as an option for other ( non - <allcaps> cfs </allcaps> ) builds as well . that is , the user can simply call <code> from their application build , and link to the provided <code> library as a regular target . the export target is only useful in cases where <allcaps> osal </allcaps> is built as a standalone software application . <section> joseph hickey , vantage systems , inc .",2
"rtems should show task names when typing <code> <section> typing <code> in console should show rtems names . add the following bits to <code> in rtems <code> <section> rtems should register its name , so it shows up when using rtems commands . <section> if applicable , add references to the software . <section> - hardware microblaze - os : rtems <number> <section> better debug info in rtems <section> nasa",2
<allcaps> rtems </allcaps> osal queue mixed sizes <section> im using queues to send variable length messages . <allcaps> rtems </allcaps> queue get returns an error if the message queue returned size is not the max buffer size . <url> this does not match the posix implementation . <url> the above logic in <code> uses <code> if the queue size is greater than the buffer provided . <code> <section> steps to reproduce the behavior : visual inspection . <section> follow the posix logic . <section> see above <section> microblaze <section> add any other context about the problem here . <section> sam price,2
remove stray terminators <section> <url> <url> <section> remove <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"address alignment issue in vxworks <number> on <number> bit processor <section> the task control bock ( <allcaps> tcb </allcaps> ) has an element with a <number> bit alignment requirement on some processors , but the way the os_impl_task_internal_record_t is defined for vxworks <number> does not enforce <number> bit alignment on a <number> bit system . this causes taskinitialize to fail . note the use of a char array in the structure here : <url> used here : <url> <section> need to get into a situation where the internal task record ( and tcb since it ' s the first element ) is not on a <number> bit boundary , and get ' s passed into taskinitialize , on a system that errors out if a <number> bit structure element is not on a boundary . observed on gr712rc . <section> should initialize tasks successfully . as a quick test a <code> was added to the internal task record , forcing alignment and the task initialization worked . <section> - hardware : gr712rc - os : vxworks <number> - versions : should be observable in caelum or later <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"consider skipping / truncating symbol if name to long os - impl - sytab : : os_symtableiteratro_impl will exit a symbol table dump if it detects a symbol name that violates the maximum defined length . this results in an inability to dump the symbol map if a symbol does violate the max length . consider skipping the symbol or truncating it + notify user via entry in dump file . if ( memchr ( name , <number> , os_max_sym_len ) = = <allcaps> null </allcaps> ) { os_debug ( "" %s ( <sad> symbol name too long \ n "" , __func__ ) ; state - > statuscode = os_err_name_too_long ; return ( false ) ; } path to file : osal / src / os / vxworks / src / os - impl - sytab . c <section> dan knutsen <allcaps> nasa </allcaps> goddard",2
"read ( ) vs os_read ( ) clarification my application involves reading data from a serial device ( <allcaps> imu </allcaps> ) in a nonblocking fashion . furthermore , i am writing code for a particular linux architecture so benefits from the standpoint of enabling os abstraction are not really important . so , other than that : what is the difference between linux ' s read ( ) and os_read ( ) ? is there a specific one that is recommended given my situation ? if so , why that one ?",3
"<allcaps> osal </allcaps> wrapper around qt <section> qt is an operating system abstraction layer that supports several different operating systems . would like to wrap an osal wrapper around qt <section> get a wrapper around qt . <section> - boost <section> <url> current status is it builds / links against qt , unit tests start to run . following needs done - [ ] work through getting the unit tests to run / pass on mac - [ ] cleanup code / fix comments - [ ] work through getting unit tests to run / pass on windows <section>",2
comments incorrect on sockets <section> ' src / os / portable / os - impl - bsd - sockets . c ' shutdown comments refer to connecting . <code>,1
"bin sem test <section> working through the unit tests for a qt port . i hit a stumbling block on bin - sem - test . c function <code> . when a task is deleted it may have registered callbacks with resources . in case of qt the task with a binary semaphore ( qsemaphore ) in a waiting state that gets deleted . ends up stalling the system when that qsemaphore is written to . from what i gather free - rtos has a similar issue . <url> > releasing resources on task exit / delete > posted by rtel <url> on <date> > if a semaphore is held by a task , and that task gets deleted , then there is nothing in the code that will automatically release the semaphore . > > looking at the source code i don ’ t think there is an easy way around this . the mutex can be reset by passing its handle into xqueuereset ( ) , but then to make it a mutex rather than a queue you would need to call prvinitialisemutex ( ) too – and that function is not publicly accessible . > > perhaps , if you are <percent> sure there are no other tasks blocked on the mutex , it could be deleted then re - created ? <code> a ctrl + c shows backtrace as follows . ` ` <code> __psynch_mutexwait + <number> frame # <number> : 0x0 0 0 0 7 fff207f02ab libsystem_pthread . dylib <code> _pthread_mutex_firstfit_lock_slow + <number> frame # <number> : 0x0 0 0 0 0 0 0 1 0 0 1 8 5 e6c qtcore <code> qsemaphore : : release ( int ) + <number> frame # <number> : 0x0 0 0 0 0 0 0 1 0 0 0 1 2 3 6 e bin - sem - test <code> os_binsemgive ( sem_id = <number> ) at osapi - binsem . c : <number> <time> frame # <number> : 0x0 0 0 0 0 0 0 1 0 0 0 0 4 e50 bin - sem - test <code> ` ` <section> - hardware - os : qt <number> , mac os <section> i subclassed my qt thread from the qt class , and have been using the terminate call . i will try a different method to see if that allows qt to cleanup semaphores from deleted tasks . <section> full name and company / organization if applicable",3
add os_statustostring <allcaps> api </allcaps> to support consistent status format representation in strings <section> related to <url> providing an <allcaps> api </allcaps> ( and using it ) would resolve inconsistency in string representation of osal_status_t . <section> add <code> <section> none <section> - # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"add abstraction for condition variables <section> <allcaps> posix </allcaps> condition variables can be useful for implementing worker thread pools , allowing worker task ( s ) to pend for work and dispatcher / manager tasks to unblock those workers once a job becomes available . <section> abstraction of something like <allcaps> posix </allcaps> condition variables via <allcaps> osal </allcaps> apis . <section> some of the worker pool concepts may be implemented with simple semaphores , but those are not ideal for some use cases : - a counting sem needs a <number> : <number> relationship between gives and takes , so it is not ideal for cases where work can be "" batched "" - either where a single input can unblock multiple worker jobs , or multiple inputs can be handled by a single worker job . - a binary sem helps the second case by capping the semaphore count at <number> , such that multiple "" gives "" on the dispatch side only cause a single worker run . but it does not allow for a dispatcher to unblock multiple workers , nor can it act on other conditions than a simple boolean . note that in the <allcaps> posix osal </allcaps> the binary semaphore is , in fact , implemented using condition variables underneath - where the condition is just a single boolean value . but only this limited use - case is exposed / available to applications . as a backward - compatible compromise of sorts - it may be possible to build on the current binary sem concept but allow the application to register its own "" condition test "" routine beyond the simple boolean . <section> vxworks support is not fully clear , i think vxworks <number> has the underlying apis to implement this , but <number> . x might not . <section> joseph hickey , vantage systems , inc .",2
"add os - impl - no - select . c for operating systems that do not have select ( <allcaps> rtems </allcaps> <number> with network off ) <section> <allcaps> rtems </allcaps> <number> . x removes the legacy network stack by default , and in doing so , removes the "" select "" call . now , when the <allcaps> osal </allcaps> osal_config_include_network option is set to <allcaps> false </allcaps> , the <allcaps> osal </allcaps> / cfs build fails because it still expects a select call . <section> i have implemented a src / os / portable / os - impl - no - select . c file along with the corresponding changes to the cmakelists . txt file that uses os - impl - no - select . c when the include_network option is <allcaps> false </allcaps> , otherwise it uses os - impl - bsd - select . c as usual . <section> alan cudmore / <allcaps> nasa gsfc </allcaps> / code <number>",2
"strict - type errors / exception when creating timebase callback on <allcaps> rtems </allcaps> during cfs init <section> a memory alignment exception occurs when running with <allcaps> rtems </allcaps> on gr740 board when compiling with <code> and <code> the exception occurs during cfs init , when starting the timebase callback task / thread : <url> the callback thread <code> function argument is of type <code> . <url> <allcaps> rtems </allcaps> expects the callback function argument to be of type <code> . the conversion from one type to another when starting the task causes the exception . <section> build for rtems5 - gr740 with <code> and <code> run cfs on gr740 board <section> successful cfs init . <section> - hardware : gr740 - os : <allcaps> rtems </allcaps> <number> - versions : draco <section> jose f martinez pedraza / <allcaps> gsfc </allcaps> <number>",0
function header documentation for os_objectidallocatenew ( ) is incorrect describe the bug the comments in the function header for os_objectidallocatenew ( ) is outdated / incorrect . i see that this was previously reported in # <number> but it appears that since then the function signature and implementation has again changed . <url> to reproduce n / a . only in the function comments . expected behavior description of the function should be with the function prototype as described in # <number> . in this case the removal of the inputs and outputs sections of the function header . reporter info nathan ohlson,1
apply latest copyright header <section> updated copyright header <section> update <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
strip mission source dir from doxygen path and provide common doxyfile to resolve references <section> - full path reported in doxygen generated stand - alone osal users guide - <allcaps> osal </allcaps> common doxyfile could be refactored to be used by any docs that reference <allcaps> osal </allcaps> <section> add the following to users guide <code> slight osal - common . doxyfile . in adjustments such that it can be used to resolve <allcaps> osal </allcaps> references . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
doxygen cleanup and convert from <code> to front page concept <section> see nasa / cfe # <number> <section> replace mainpage with a front page and refactor . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> per project request ping <user> - j - lin,1
"consider populating the "" name "" field of datagram socket entries <section> as noticed in previous issue # <number> , the datagram sockets are essentially name - less . this means that the <code> field of these entries is left unset , and will be <allcaps> null </allcaps> . this is different than most other <allcaps> osal </allcaps> resource types , which all have names . <section> stream sockets ( <allcaps> iirc </allcaps> ) generate a name consisting of the local ip address / port and remote ip address / port . datagram sockets are connectionless , but theoretically this field could still be populated with something unique , such that name - based apis could work . <section> leave as - is , where datagram sockets remain anonymous / nameless . <section> most name - based <allcaps> osal </allcaps> apis ( such as os_closefilebyname ) intentionally only operate on files - they check if the entry is a socket and ignore it if it is , so having a name associated with sockets if of limited usefulness unless we open that up , which also may not be a bad idea . ( i . e . one can get the name by calling os_fdgetinfo , then pass that name to os_closefilebyname or os_fileopencheck , etc ) . <section> joseph hickey , vantage systems , inc . based on <allcaps> ccb </allcaps> discussion of # <number> on <number> - <number> - <number>",2
"segfault when calling os_fdgetinfo on datagram socket id <section> sockets opened with os_socketopen get assigned an <allcaps> osal id </allcaps> which is of the same type / classification as file ids and shares the same global table . however , these ids do not have a name associated with them , and thus the <code> field of the global structure is <allcaps> null </allcaps> for these objects . the <code> will validate this type of id ( because it is a file type ) but will attempt to copy the name unconditionally , which results in a segfault because the pointer is <allcaps> null </allcaps> . <section> <number> . acquire a datagram socket id using <code> <number> . invoke <code> on that socket <number> . get segfault in <code> <section> should not segfault , rather the returned name should be empty . <section> offending call to strncpy is here : <url> <section> ubuntu <section> this code just needs to account for the name_entry being ( validly ) <allcaps> null </allcaps> on some types of entries . <section> originally found by <user> in <allcaps> osk </allcaps> implementation",0
"implement os_modulegetinfo_impl on <allcaps> rtems </allcaps> <section> es "" query application "" command cannot provide loaded object section addresses and sizes in <allcaps> rtems </allcaps> since the implementation of os_modulegetinfo_impl is a stub . <section> add an implementation of this using the <allcaps> rtems </allcaps> runtime loader <allcaps> api </allcaps> . <section> none <section> none <section> eric pollack - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add ut_assert to doxygen detailed design and fix warnings <section> ut_assert not included , and when it is doxygen warnings are produced <section> include in osa - detaildesign . doxyfile . in and resolve warnings <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"remove explicit file name references in doxygen file comments to avoid warnings <section> file comment without a filename implies the comments apply to the current file . adding the file name makes doxygen try to match that file . the issue is there ' s multiple files with the same name , so doxygen gets confused unless you add full path . really it ' s just overhead since the point is to comment the current file . sample warning if you <code> from the bundle : ` ` <code> os - impl - binsem . c ' supplied as the second argument in the \ file statement matches the following input files : / home / jhageman / cfs / cfs - github / osal / src / os / posix / src / os - impl - binsem . c / home / jhageman / cfs / cfs - github / osal / src / os / rtems / src / os - impl - binsem . c / home / jhageman / cfs / cfs - github / osal / src / os / vxworks / src / os - impl - binsem . c please use a more specific name by including a ( larger ) part of the path ! ` ` ` <section> easiest to just remove the name since for every case the comment applies to the current file <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
ensure memory is set in os_stat handler <section> risk of uninitialized variable use if buffer is not set in os_stat handler : <url> <section> initialize to zero if not fully set ( provides default behavior ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"type - safe implementation for osal_id_t <section> the <code> type is currently just a plain <code> to make it backward - compatible . the problem is that a plain number does not convey the purpose / intent of this id value . users can still do things like addition , subtraction , or interchange with other numbers , which are all invalid for a number being used as an id . as long as users are using the <code> type and the associated checks / conversions also provided by <allcaps> osal </allcaps> ( e . g . os_objectiddefined , etc ) then this should be transparent . <section> make <code> type - safe <section> this was the intent all along with creating a separate <code> typedef and using it across the <allcaps> cfe </allcaps> and <allcaps> psp </allcaps> . it does depend on having all the dependent code using the typedef , so probably want to stage this in using osal_omit_deprecated flag or similar , so we can find the things that are still broken in this regard . <section> joseph hickey , vantage systems , inc .",2
implement coverage test for <allcaps> rtems </allcaps> <section> coverage tests not implemented for <allcaps> rtems </allcaps> <section> add coverage tests <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"fix # <number> , search global and local symbol tables <section> - fix # <number> - refactors symbol table searching to include both local and global symbol tables for <allcaps> posix </allcaps> - renamed global search to generic since there is not currently a use case for global only search <section> <allcaps> draft </allcaps> - not complete yet <section> improved portability , recovers prior behavior and will find symbols even if loaded as local only . <section> - hardware : i5 / docker - os : ubuntu <number> - versions : bundle main <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"optional support for symbol table dump and module address / size info on <allcaps> posix </allcaps> systems ( adds <allcaps> gnu </allcaps> extension dependence ) <section> currently checksum app does not work on systems that use os - impl - posix - dl - symtab . c since module address / size data is not filled in , nor is os_symboltabledump supported . <section> would add <allcaps> gnu </allcaps> extension dependence , but dl_iterate_phdr ( ) could be used to get the information required for both symbol table dump and module address / size . example for getting module address here : <url> <section> none <section> we have avoided <allcaps> gnu </allcaps> extension dependence , but if supported on the desired system it would be helpful to have the option for this functionality to work . another use case is when simulating a system that does have these functions implemented , it ' s likely desirable to support the capability . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<code> should also support local symbol lookup <section> getting symbol addresses are an integral part of mm and md . for systems that load modules with local scope this could still be easily supported by looping through the modules w / o requiring app changes . currently it just looks for global or static symbols : <url> <section> possibly just use os_foreach and loop through modules within os_symbollookup , but on systems where local symbol table lookup just calls the global version that would waste cycles if a symbol does not exist since it would end up searching the global table for every module . consider a slight refactor . <repeated> a generic os_symbollookup_impl could search just global on systems with only global , global and local on systems that support it . really does not seem to be a use case for os_globalsymbollookup_impl which only searches the global table . <repeated> possibly remove ? <section> none others . <section> see mm and md use of symbol lookup , helpful to get from global or local scope . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"utassert_stub_count missing a space in string output <section> example output : "" callcountcfe_evs_sendevent ( ) ( <number> ) = = <number> ( <number> ) "" <section> callcount cfe_evs_sendevent ( ) ( <number> ) = = <number> ( <number> ) <section> none <section> ( <url> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"new compile warnings with <allcaps> gcc </allcaps> <number> . x <section> the newer versions of <allcaps> gcc </allcaps> report new warnings . these appear to be mostly false alarms , but easy to fix nonetheless . <section> build <allcaps> osal </allcaps> using recent <allcaps> gcc </allcaps> <section> should compile without warnings or errors <section> <code> <section> ubuntu <number> , gcc <number> . <number> <section> joseph hickey , vantage systems , inc .",2
"add simpler / semi - automatic unit test handling for pointer returns from stubs <section> for implementation functions which return some form of <code> , the stub generator and default handler automatically makes this return <number> if nothing sets up anything else . the framework also provides a common method to provide alternate values . this <code> return was singled out because it is very common across <allcaps> osal </allcaps> , <allcaps> cfe </allcaps> , <allcaps> psp </allcaps> , and apps . the next most common return type ( aside from void ) is probably a pointer value . but this is not handled automatically , the user is required to provide a handler function just to be able to use the stub at all - even just to get it to return <allcaps> null </allcaps> . furthermore there is no common method to get any other return value either . currently on a <number> - bit platform one gets an error if attempting to use a generated stub "" out of the box "" because the framework sees a return type of size <number> which it refuses to translate from the int32 status value . <section> expand the automatic / int32 return paradigm to pointer returns . note on a <number> - bit platform this probably already happens implicitly , since a pointer an an int32 are probably the same size , and "" <number> "" can be easily translated to <allcaps> null </allcaps> . this is just two things : - provide equivalent of <code> and <code> but for pointers , so tests can have a common method to register a pointer return . - if the handler / hook does not set a return pointer / override , then grab the pointer from the registered value if its was set , or return <allcaps> null </allcaps> ( basically the same as is done for <code> currently ) . <section> leave as - is where tests must always implement a custom handler for every function that returns a pointer . <section> noted when developing cf unit tests , there are a number of <allcaps> fsw </allcaps> functions that return pointers , and it would be a good timesaver if one could simply run "" generate_stubs "" and use the stubs immediately as - is . while this is true for integer return codes , functions returning pointers all require extra work in order to use the generated stubs . <section> joseph hickey , vantage systems , inc .",2
"add uint8 and uint16 equivalents for utassert_uint32_ <comparison> macros <section> using a uint32 comparison for smaller uint types does not allow for roll - over situations that are considered a pass condition : <code> outputs : & <hashtag> x 1 f 534 </hashtag> ;[ <allcaps> fail </allcaps> ] <number> a_test . c : <number> - some_uint8_valueundertest ( <number> ) = = unknownstartvaluethathappenstobemax_uint8 + <number> ( <number> ) <section> a uint8 comparison could provide an output like this : & <hashtag> x 1 f 7 e 2 </hashtag> ;[ <allcaps> pass </allcaps> ] <number> a_test . c : <number> - some_uint8_valueundertest ( <number> ) = = unknownstartvaluethathappenstobemax_uint8 + <number> ( <number> ) additionally , use could be made of the _desc_ argument in the actual call ( utassert_genericunsignedcompare ) to distinguish it from a uint32 call and add pertinent information for the developer : & <hashtag> x 1 f 7 e 2 </hashtag> ;[ <allcaps> pass </allcaps> ] <number> a_test . c : <number> - compare uint8 : somevalueundertest ( <number> ) = = unknownstartvaluethathappenstobemax + <number> ( <number> ) <section> adding a typecast to every assert : <code> which does provide decent output : & <hashtag> x 1 f 7 e 2 </hashtag> ;[ <allcaps> pass </allcaps> ] <number> a_test . c : <number> - ( uint8 ) somevalueundertest ( <number> ) = = ( uint8 ) ( unknownstartvaluethathappenstobemax + <number> ) ( <number> ) <section> the requirement for adding a typecast becomes cumbersome over time , but writing a line like this is simpler : <code> and will provide just as much clarity , if not more . <section> alan gibson <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <number>",2
"utassert_abort should support a format string like other calls do <section> sometimes , the utassert test macros are used to test not just the output of the unit under test , but to check for sanity in the test cases themselves ( e . g . that the appropriate preconditions were set , etc ) . if the condition is not true , then the user gets a regular failure report in the test log . this looks just like any other test failure , which is generally good enough in most cases ( attention is brought to it , so it can be fixed ) . but when using <code> or equivalent for this purpose , if checks fail , the test still continues to run . on occasion the value being check is critical enough that the test should actually stop early , such as if a pointer is <allcaps> null </allcaps> or a value would cause divide by zero , etc . utassert provides a <code> function , but this is an oddball in that in only accepts a single preformatted string message , <allcaps> not </allcaps> a printf - style format string like all other asserts do . <section> extend utassert_abort ( ) to make it accept a printf - style format string like other assert <section> test code should not use the system <code> for this , because a failure will not go through the proper reporting channels . utassert_abort ( ) is basically the equivalent idea , but its use was limited to some degree by the fact that it can not include detail information in the message ( at least not easily ) . <section> joseph hickey , vantage systems , inc .",2
give the utassert_ < type here > _ < comparison here > macros versions that can add user ' desc ' <section> output is generic and some additional information is desired . e . g . turn ' * received . runstatus ( <number> ) = = * test - > expected . runstatus ( <number> ) ' into ' cfe_es_runloop <kiss> received . runstatus ( <number> ) = = * test - > expected . runstatus ( <number> ) ' <section> take each of the macros in utassert . h <url> that are designed for these checks and add a second version that has _with_desc or something of that nature . <section> already written my own locally needed versions . <section> as an example for ut_unt32_eq would look like extended : <code> <section> alan gibson <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <number>,2
utassert_stringbufcompare output of strings could be put on top of each other for easier problem identification <section> differences in strings can be hard to identify when they are side by side . current output : <code> <section> stack strings for easier identification of malformations . for example : <code> <section> manual copy and paste into text editor . <section> n / a <section> alan gibson <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <number>,2
"generate_stubs . pl generated files put the comments from the . h file instead of identifying the stub file name <section> the top commenting from the header file being put into the stub file is stating that the generated stub file is the . h , because that is what the header states . <section> have the generated file identify itself as the stub file and if the . h comments are to be kept , have it identify them as such . <section> manually fixing it on every generated file <section> n / a <section> alan gibson <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <number>",3
"randomize location of <allcaps> osal </allcaps> temp directories <section> when running unit tests in parallel or multiple instances of cfs in parallel on linux , sometimes things break due to / dev / shm / osal : <allcaps> ram </allcaps> * directories being at a fixed location . this is particularly a problem for our ci server which is not allowed to spin up a container for each run due to policy reasons . <section> a flag or environment variable or something to randomize / set this directory , and any other directories that may be hardcoded . <section> we have configured a lock on jenkins to prevent multiple instances of the tests from being run in parallel . <section> <section> john n pham , northrop grumman",2
"fix # <number> rename os_xxxtime to os_xxxlocaltime in comments . <section> - fix # <number> - rename comments from os_xxxtime to os_xxxlocaltime <section> steps taken to test the contribution : no code changed . <section> a clear and concise description of how this contribution will change behavior and level of impact . - or no impact to behavior <section> none <section> add any other context about the contribution here . <section> if included , identify any third party code and provide text file of license <section> full name and company / organization / center of all contributors ( "" personal "" if individual work ) - if <allcaps> nasa </allcaps> civil servant employee or <allcaps> gsfc </allcaps> contractor on <allcaps> ses ii </allcaps> - address / email / phone and contract / task information ( if applicable ) must be on file",1
"posix implementation comments refer to old time apis , update to os_getlocaltime and os_setlocaltime <section> a clear and concise description of what the bug is . <code> src / os / portable / os - impl - posix - gettime . c : * this file contains implementation for os_gettime ( ) and os_settime ( ) update comment to <code> / <code> <section> steps to reproduce the behavior : git grep os_gettime <section> a clear and concise description of what you expected to happen . <section> add any other context about the problem here . <section> sam price",1
"<allcaps> toctou </allcaps> bug for mkdir <section> calling function mkdir that uses local - > system_mountpt after a check function . this can cause a time - of - check , time - of - use race condition . <section> alternative is to call mkdir , without a stat , and just ignore the <allcaps> eexist </allcaps> errno if it happens . <section> <url> <section> coverity : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",0
"<allcaps> toctou </allcaps> bug for chmod <section> calling function chmod that uses filename after a check function . this can cause a time - of - check , time - of - use race condition . <section> use fchmod as seen in os_filechmod_impl . <section> <url> <url> <section> coverity : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",0
"copy of overlapping memory in snprintf <section> in the call to function snprintf , the object pointed to by argument local - > volume_name may overlap with the object pointed to by argument local - > system_mountpt . local - > system_mountpt is <number> bytes off of the address of os_filesys_table [ os_objectindexfromtoken ( token ) ] . local - > volume_name is <number> bytes off of the address of os_filesys_table [ os_objectindexfromtoken ( token ) ] <section> resolve possible overlap . <section> <url> <section> coverity : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",0
"check return value for setsockopt <section> calling setsockopt ( impl - > fd , <number> , <number> , & os_flags , 4 u ) without checking return value . this library function may fail and return an error code . <section> check return value for setsockopt <section> <url> <section> coverity : <url> <section> possible solution <code> <section> ariel adams , <allcaps> asrc </allcaps> federal",0
"check return value of chmod <section> calling chmod ( filename , dststat . st_mode & 0 xffffffc0u ) without checking return value . this library function may fail and return an error code . <section> check the return value of chmod . <section> <url> <url> <section> from coverity : <url> possible solution : <code> <section> ariel adams , <allcaps> asrc </allcaps> federal",0
"update codename to caelum and license header for release , version <number> . <number> <section> development version still labeled as <number> . <number> ( whoops , should have been <date> ) . <section> upon official release , update relevant version / license info . <section> none <section> wait until official release <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"strict aliasing issue in vxworks "" intlib "" stub <section> when compiling with strict aliasing mode ( gcc w / <code> ) , a warning gets triggered in <code> as follows : <code> <section> build with new - ish gcc ( <number> ) w / <code> options and tests enabled ( so stubs are built ) . <section> should be clean . <section> ubuntu <section> could be argued that stubs should not be built with optimization + strict aliasing rules , but the fix is relatively easy to avoid this warning . <section> joseph hickey , vantage systems , inc .",0
"ut assert stub generator bypasses functions marked <code> <section> the <code> script ignores all contents inside <code> blocks . unfortunately , for header files which are made c + + - aware , it is typical to wrap c function calls in an <code> block which means it gets ignored by the tool . it does not understand the <code> surrounding it . <section> attempt to generate stubs against a header file which includes an extern "" c "" block . the prototypes inside the block are not processed . <section> should process prototypes inside the extern "" c "" block . <section> ubuntu . <section> prototypes were expected to all occur at the top - most scope but the <code> keyword for c + + changes this . really , the file needs to be run through the c ( not c + + ) preprocessor first , so the <code> here has the intended effect . <section> joseph hickey , vantage systems , inc .",0
"sem - speed - test : deadlocks sometimes when pthread_cancel is called on the threads that are actively using semaphores <section> this report is similar to # <number> and # <number> because a resource , in this case a thread , gets destroyed by <code> while another thread wants to <code> or <code> on semaphore that was just before <code> - d or <code> - d by waiting on by the destroyed thread . this is how the <code> called by <code> gets deadlocked on macos : ` ` <code> __ulock_wait + <number> frame # <number> : 0x0 0 0 0 7 fff203eaf60 libsystem_pthread . dylib <code> os_taskdelete_impl ( token =0 x00007ffee9ac08f0 ) at os - impl - tasks . c : <number> <time> frame # <number> : 0x0 0 0 0 0 0 0 1 0 6 1 4 ad9d sem - speed - test <code> semrun at sem - speed - test . c : <number> <time> frame # <number> : 0x0 0 0 0 0 0 0 1 0 6 1 4 2 8 3 9 sem - speed - test <code> os_application_run at utbsp . c : <number> : <number> frame # <number> : 0x0 0 0 0 0 0 0 1 0 6 1 5 4 fca sem - speed - test <code> start + <number> frame # <number> : 0x0 0 0 0 7 fff20404f3d libdyld . dylib <code> ` <code> pthread_cancelled <code> pthread_join <code> sem - speed - test <code> pthread_cancel <code> ` <code> ` <code> ` <code> ` <code> pthread_cancel <code> pthread_join ` does not block on macos . <section> this behavior is <percent> reproducible on macos , branch of the # <number> . i have also applied the clang ' s thread sanitizer to this and other tests . the thread sanitizer immediately complains about possible races related to unprotected access to the global variables managed by the tests . it could become a separate ticket when the more trivial issues reported so far are resolved . <section> stanislav pankevich ( personal contribution ) .",0
"queue - test : a message queue gets closed while still being used <section> this report is similar to # <number> because a resource , in this case a message queue , gets closed while it ' s still being used by another thread . this issue silently works on linux because of its <code> implementation details . the macos implementation of <code> in # <number> maintains a mutex in each of its methods including the <code> method . the deadlock results from the following collision : <number> ) main thread attempts to os_queuedelete that calls into <code> that wants to acquire the queue ' s mutex . <number> ) the task1 that has been deleted just before was still waiting on <code> holding the queue ' s mutex . <code> <section> one could argue that the <code> works on linux and therefore the macos implementation of <code> should accommodate . at the same time , similar to the # <number> , it looks like macos implementation actually highlights the fact that the <code> relied on undefined behavior . <section> for now , there is a custom hack to <code> on the mqueue ' s mutex before actually trying to close the mqueue . <code> <section> see the stacktrace of the blocked thread below . note that i cannot provide the second thread that holds the lock because that thread is pthread_cancelled by that point ( and the mutex has leaked ) . <section> stanislav pankevich ( personal contribution ) - - - stacktrace : ` ` <code> __psynch_mutexwait + <number> frame # <number> : 0x0 0 0 0 7 fff203e72ab libsystem_pthread . dylib <code> _pthread_mutex_firstfit_lock_slow + <number> frame # <number> : 0x0 0 0 0 0 0 0 1 0 7 6 e20af queue - test <code> mq_close ( mqd =0 x00007fdcc96040e0 ) at mq_close . c : <number> : <number> frame # <number> : 0x0 0 0 0 0 0 0 1 0 7 6 e00b7 queue - test <code> os_queuedelete ( queue_id = <number> ) at osapi - queue . c : <number> <time> frame # <number> : 0x0 0 0 0 0 0 0 1 0 7 6 d12e5 queue - test <code> uttest_run at uttest . c : <number> <time> frame # <number> : 0x0 0 0 0 0 0 0 1 0 7 6 d38f9 queue - test <code> main ( argc = <number> , argv =0 x00007ffee8532a08 ) at bsp_start . c : <number> : <number> frame # <number> : 0x0 0 0 0 7 fff20404f3d libdyld . dylib <code> start + <number> <code> / users / stanislaw / workspace / projects / code / osal / cmake - build - debug / tests / queue - test [ <allcaps> begin </allcaps> ] <allcaps> unit test </allcaps> [ <allcaps> begin </allcaps> ] <number> <allcaps> setup </allcaps> [ <allcaps> end </allcaps> ] no test cases [ <allcaps> begin </allcaps> ] <number> queuetimeouttest [ <allcaps> pass </allcaps> ] <number> queue - test . c : <number> - msgq create id = <number> rc = <number> [ <allcaps> pass </allcaps> ] <number> queue - test . c : <number> - task <number> create id = <number> rc = <number> [ <allcaps> pass </allcaps> ] <number> queue - test . c : <number> - timer <number> create id = <number> rc = <number> [ <allcaps> info </allcaps> ] queue - test . c : <number> : timer accuracy = <number> microseconds starting task <number> delay for <number> second before starting [ <allcaps> pass </allcaps> ] <number> queue - test . c : <number> - timer <number> set rc = <number> mq_timedreceive : lock mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> mq_timedreceive : unlock mq_timedreceive : lock <allcaps> task </allcaps> <number> : timeout on queue ! timer counter = <number> [ <allcaps> pass </allcaps> ] <number> queue - test . c : <number> - timer delete rc = <number> [ <allcaps> pass </allcaps> ] <number> queue - test . c : <number> - task <number> delete rc = <number> ` ` `",0
"coverage - vxworks - timebase : potential bug in the test implementation reported by clang address sanitizer on macos <section> when the address sanitizer is enabled in macos / clang , i get the following error in the <code> test . the reproducibility is <percent> . there are two more issues found using address sanitizer . i have linked them to this ticket in the form of a comment . <code> <section> enable address sanitizer in the root cmakelists . txt . <code> run the tests , including the <section> i suspect a memory management error that needs to be investigated . when the issue is fixed , the address sanitizer should report no issues . <section> <code> <section> - hardware mac - os : macos big sur - versions <url> <section> <code> <section> stanislav pankevich ( personal contribution )",0
"linkage problem on macos : ld : symbol ( s ) not found for architecture x86_64 <section> there is a solvable linkage problem on macos : <code> . <code> <section> the issue seems to be coming from the differences between <code> on linux and <code> on macos . the following simple modification makes the error to go away for the <code> symbol . <code> <code> and so on . <repeated> this change is implemented consistently in <url> <section> it does not seem to be possible to implement it differently on macos / clang . <section> this solution makes sense only if the macos <allcaps> osal </allcaps> is integrated into the <allcaps> osal ci </allcaps> . otherwise , it will not be obvious to a linux programmer that the practice of initializing the global variables has to be followed . <section> stanislav pankevich ( personal contribution )",2
"tests : calling sem_destroy ( ) on semaphores that are still being used <section> ( i would like to open this as a general discussion so using the feature ticket as the closest one ) running some of the <allcaps> osal </allcaps> ' s tests on macos results in <code> . instead of <code> macos ' s provides <code> and with some minor differences , the <allcaps> api </allcaps> is very similar . the above error message is a protection built in the implementation of semaphores to prevent a user from calling <code> on a semaphore that is still being used . <section> <number> of the current <allcaps> osal </allcaps> ' s test are hitting this error ( see appendix below ) and i am wondering if it would be practical to improve the design of these tests . i would also like to check with someone my understanding that destroying the resources while they are still being used results in undefined behaviour and that the undefined behaviour should be avoided even if the scope is test code , not the <allcaps> osal </allcaps> code itself . <section> for now , i am using an alternative implementation of semaphores found here <url> but i think it would be better to use the <code> as a more native implementation on macos . <section> <code> <section> stanislav pankevich , individual contribution . - - - # appendix : calling sem_destroy ( ) when a semaphore is still being used # # # <number> - osal_core_ut ( <allcaps> illegal </allcaps> ) ` ` <code> _dispatch_semaphore_dispose . cold . <number> + <number> frame # <number> : 0x0 0 0 0 7 fff202400bc libdispatch . dylib <code> _dispatch_dispose + <number> frame # <number> : 0x0 0 0 0 0 0 0 1 0 8 0 4 c130 osal_core_ut <code> os_countsemdelete_impl ( token =0 x00007ffee7bcf8d8 ) at os - impl - countsem . c : <number> : <number> frame # <number> : 0x0 0 0 0 0 0 0 1 0 8 0 3 f386 osal_core_ut <code> ut_os_count_sem_take_test at ut_oscore_countsem_test . c : <number> : <number> frame # <number> : 0x0 0 0 0 0 0 0 1 0 8 0 3 e4f9 osal_core_ut <code> os_application_run at utbsp . c : <number> : <number> frame # <number> : 0x0 0 0 0 0 0 0 1 0 8 0 5 1 5 4 a osal_core_ut <code> start + <number> frame # <number> : 0x0 0 0 0 7 fff20404f3d libdyld . dylib <code> ` <code> ` <code> ` <code> ` <code> _dispatch_semaphore_dispose . cold . <number> + <number> frame # <number> : 0x0 0 0 0 7 fff202400bc libdispatch . dylib <code> _dispatch_dispose + <number> frame # <number> : 0x <phone> c1f980 count - sem - test <code> os_countsemdelete_impl ( token =0 x00007ffeecff47c8 ) at os - impl - countsem . c : <number> : <number> frame # <number> : 0x <phone> c13156 count - sem - test <code> os_cleanupobject ( object_id = <number> , arg =0 x00007ffeecff493c ) at osapi - common . c : <number> <time> frame # <number> : 0x <phone> c160fc count - sem - test <code> os_objectiditeratorprocessentry ( iter =0 x00007ffeecff4898 , func =( count - sem - test <code> os_foreachobjectoftype ( idtype = <number> , creator_id = <number> , callback_ptr =( count - sem - test <code> os_foreachobject ( creator_id = <number> , callback_ptr =( count - sem - test <code> os_deleteallobjects at osapi - common . c : <number> : <number> frame # <number> : 0x <phone> c12c49 count - sem - test <code> uttest_run at uttest . c : <number> <time> frame # <number> : 0x <phone> c11979 count - sem - test <code> main ( argc = <number> , argv =0 x00007ffeecff4a08 ) at bsp_start . c : <number> : <number> frame # <number> : 0x0 0 0 0 7 fff20404f3d libdyld . dylib <code> start + <number> <code> _dispatch_semaphore_dispose . cold . <number> : movq % rsi , % rax subq ( % rdi ) , % rax leaq 0x 6 2 a5 ( % rip ) , % rcx ; "" <allcaps> bug in client of libdispatch </allcaps> : semaphore object deallocated while in use "" movq % rcx , 0x 6 0 4 a3566 ( % rip ) ; gcrannotations + <number> movq % rax , 0x 6 0 4 a358f ( % rip ) ; gcrannotations + <number> ud2 <code> * thread # <number> , queue = ' com . apple . main - thread ' , stop reason = exc_bad_instruction ( code = exc_i386_invop , subcode =0 x0 ) * frame # <number> : 0x0 0 0 0 7 fff2026d229 libdispatch . dylib <code> _dispatch_semaphore_dispose + <number> frame # <number> : 0x0 0 0 0 7 fff2023ec1a libdispatch . dylib <code> mac_sem_destroy ( psem =0 x <phone> f97bc8 ) at posix - macos - semaphore2 . c : <number> : <number> frame # <number> : 0x <phone> f78084 count - sem - timeout - test <code> os_countsemdelete ( sem_id = <number> ) at osapi - countsem . c : <number> <time> frame # <number> : 0x <phone> f6dd3d count - sem - timeout - test <code> os_foreachdocallback ( obj_id = <number> , ref =0 x00007ffee8c99870 ) at osapi - idmap . c : <number> : <number> frame # <number> : 0x <phone> f721dd count - sem - timeout - test <code> os_foreachdocallback at osapi - idmap . c : <number> ) ) at osapi - idmap . c : <number> <time> frame # <number> : 0x <phone> f722fa count - sem - timeout - test <code> os_cleanupobject at osapi - common . c : <number> ) , callback_arg =0 x00007ffee8c9992c ) at osapi - idmap . c : <number> <time> frame # <number> : 0x <phone> f72267 count - sem - timeout - test <code> os_cleanupobject at osapi - common . c : <number> ) , callback_arg =0 x00007ffee8c9992c ) at osapi - idmap . c : <number> : <number> frame # <number> : 0x <phone> f6dbb9 count - sem - timeout - test <code> os_api_teardown at osapi - common . c : <number> : <number> frame # <number> : 0x <phone> f6d279 count - sem - timeout - test <code> os_application_run at utbsp . c : <number> : <number> frame # <number> : 0x <phone> f7fada count - sem - timeout - test <code> start + <number> frame # <number> : 0x0 0 0 0 7 fff20404f3d libdyld . dylib <code> ` <code> ` <code> ` `",0
"potential aliasing warning in socket code <section> when using certain compiler versions and optimization flags , the address conversions in <code> may trigger warnings . <section> build using <allcaps> gcc </allcaps> <number> with <code> options example warning : <code> <section> should be clean . <section> <url> <section> ubuntu <number> <section> this is due to direct casting of the data , to be pedantically correct should probably memcpy the address value , rather than directly cast it , to be super safe . <section> joseph hickey , vantage systems , inc .",2
expand use of the <allcaps> bsp </allcaps> specific configuration registry across the rest of the resources <section> # <number> implements use of the registry for vxworks tasks but generically supports all resources . <section> add to all implementations / resources where implementation layer flags can be passed in . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> ? <allcaps> gsfc </allcaps>,2
"sp0 / vxworks6 . <number> <allcaps> spe </allcaps> unavailable exception encountered <section> apparently vxworks needs vx_spe_task defined for tasks on a <number> bit system if any <allcaps> spe </allcaps> instructions are inserted by the compiler . lacking this i hit "" <allcaps> spe </allcaps> unavailable exception "" from within a child task on the sp0 with vxworks <number> . side note - turns out under certain circumstances vx_fp_task behaves like vx_spe_task . flags are set here : <url> <section> run the cfe functional test on sp0 , observe the <allcaps> spe </allcaps> unavailable exception related to the testtblnonappcontext task started by testtablebadcontext in tbl_registration_test . c : <url> note - i am not sure how consistent this is , since it ' ll only occur if <allcaps> spe </allcaps> instructions are added by the compiler ( no clue why it happened w / this task ) . <section> no exception - could be achieved by allowing additional flags to be added from the <allcaps> psp </allcaps> build configuration ? <section> - hardware : sp0 - os : vxworks <number> - versions bundle main <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fcntl ( g_getfl ) fails on vxworks <number> <section> now that we check the return for fcntl , turns out it fails on vxworks <number> ( not implemented ) . used in os_socketopen_impl and os_socketaccept_impl : <url> <url> <section> consider trying ioctl if fcntl fails ? rumor has it ioctl is supported . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"typos in documentation , print statements , and comments <section> found multiple typos throughout the codebase <section> correct grammar and spelling errors <section> none <section> retroactively created for # <number>",1
typecast memcchr in os - shared - common . h <section> memchr is called and then assigned to a const char * without a cast . this causes failures on certain compilers ( llvm ) . <url> <code> in file <code> change <code> to <code> <section> - hardware - os : [ <allcaps> mac </allcaps> ] - versions [ <allcaps> osal </allcaps> hash 7 ebb463 ] <code> <section> sam price - <allcaps> gsfc </allcaps> image <img>,0
"add utassert bit field check macros <section> bit fields are a common method of storing multiple boolean values into a single data field . utassert should provide macros that aid in testing code that uses this type of storage . <section> add some new utassert macros to check bit fields . these macros should include in the log the raw value of the bit field being checked ( as a hex number ) as well as the specific mask bits being checked for . two forms should be included , one which passes if the bit ( s ) are set , and one which passes if the bit ( s ) are not set . this should be able to use the same underlying generic assert helper function , just with a different macro wrapper around it that checks a bit mask . <section> may use the existing utassert_uint32_eq / <allcaps> neq </allcaps> , in either of these forms : <number> . utassert_int32_eq ( bitfield , bitfield | check_bits ) <number> . utassert_int32_eq ( bitfield & check_bits , check_bits ) downsides : the resulting log is not quite as concise as it should be : - its not clear that this is a bitmask check - as it is logged as a normal value check . - only either the raw value ( form <number> ) or the bitmask value ( form <number> ) will be logged . it will not log both pieces of info . - values will be logged in decimal / base - <number> by default which is not easy to read when examining bit flags - base - <number> is preferable . all of the above should be solvable by simply making a different wrapper macro around the existing <code> function . <section> see nasa / cfe # <number> for a use case <section> joseph hickey , vantage systems , inc .",2
"utassert "" n / a "" test case type is slightly overloaded <section> there are a number of similar situations for which the "" n / a "" ( aka <code> ) log type is used , but have different nuances : <number> . when a certain functionality is not implemented at all ( e . g . network tests on a system without network stack , the <allcaps> api </allcaps> returns <code> ) . in this case a single "" n / a "" entry is used and the whole group of tests is skipped . <number> . when a certain functionality is implemented , but cannot be tested due to external factors , such as the state of the system , how it was booted , etc . ( e . g . in the "" <allcaps> cds </allcaps> "" test in es , when calling cfe_es_registercds ( ) , if the <allcaps> cds </allcaps> memory was not cleared before the test , the result may be "" cfe_es_cds_already_exists "" ) . in this case the "" n / a "" entry is used to advise the user that the test is <section> due these external factors , and that the user should take action to correct this and get a complete test result . <number> . when there is more than one possible acceptable result from a specific function call . in this case , the test code checks for each acceptable result , but are checked with <code> to indicate that although this value was checked and does not match , it does _not_ constitute a failure of the test ( the test can go on to check for the other possible acceptable results ) . <section> these three different "" n / a "" nuances should ideally have a different case type . ( specific words / abbreviations can be discussed ) . as the traditional meaning of "" n / a "" is "" not applicable "" , it likely line up best with the use case ( <number> ) above , where a test is truly not applicable on that platform / setup . for the other two , a separate casetype should be added to better convey the intent : for item ( <number> ) above is to warn the user that the results are incomplete due to external factors , and they need to take action to correct those external factors to get a complete result . this should not necessarily be a failure ; the test can still succeed in reduced form , but the report should be very clear that tests were skipped or not complete , and the user needs to take manual action to correct it . for item ( <number> ) above , the intent is allow a "" soft "" test - where multiple values are acceptable , it is necessary to "" <allcaps> pass </allcaps> "" ( and log it ) if a value _does_ match the acceptable value , but _not_ fail if the value does not match - because there are other acceptable values . typically these checks would not need to go in the log at all ; they may only be of interest to developers implementing the test , it does not provide much value in a final report log to see values that were checked for but did not match . ( in that sense , visibility of these tests should be similar to <allcaps> debug </allcaps> , but we should not overload <allcaps> debug </allcaps> either ) . <section> leave all these case types as n / a <section> existing overload of n / a is not horribly broken / wrong , but it makes the logs a little harder to process , and not as clear as to what action ( if any ) the user needs to take for the n / a reports . <section> joseph hickey , vantage systems , inc .",2
"migrate <allcaps> cfe </allcaps> generic integer assert tests to common ut assert <section> recently <allcaps> cfe </allcaps> added a number of useful generic test assertion macros , for greater than / less than , booleans , and other commonly needed checks in the <allcaps> cfe </allcaps> coverage test . it would be nice to use these same assertions in the functional test too , and perhaps other app / lib tests , since they are pretty generic . <section> migrate the code from <allcaps> cfe </allcaps> coverage test - specific area into general ut assert to be usable in the full range of test environments . currently the macros and code are in <url> thus private to <allcaps> cfe </allcaps> "" coverage "" test environment . <section> could copy the macros and functions into <code> so it can be used in functional tests , but then there would be two copies , and it would still be limited to <allcaps> cfe </allcaps> ( no app / lib tests could use ) . <section> putting them into ut assert itself allows for the single / common implementation for both coverage and functional and any other app / lib test . <section> joseph hickey , vantage systems , inc .",2
autogenerate utassert documentation <section> utassert headers have doxygen style comments but are not included in any of the current documentation generation paths . <section> either add a unique doxygen utassert users guide or add to an existing document . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"ut stub library missing "" shell "" <allcaps> api </allcaps> <section> the <code> file was not included in the <code> library , and hence apps needing to test shell functions will get a linker error due to this missing function . <section> attempt to build the unit test for an app that calls <code> <allcaps> api </allcaps> . link fails with the missing symbol . <section> build should succeed . <section> list is here . the "" shell "" stub file is there ( generated from header ) but was missed / omitted from the library somehow . <url> <section> joseph hickey , vantage systems , inc .",0
"unexercised code at the "" functional "" level of testing <section> although the coverage test which link directly to the implementation * . c file for all of these do fully exercise the functions , they are not called from the "" functional "" level of testing which links to the osal library ( and uses public include paths ) . so it ' s possible they could pass all current testing but not get linked / included properly in relation to the library . also a call at the functional level would cover alternative implementations , not just what ' s provided currently ( "" black box "" testing ) . helps even for the inlines / macros in headers , since they could move and get missed in the public includes ( not likely , but possible ) . os_getbuildnumber os_getversioncodename os_getversionnumber os_getversionstring os_objectidtoarrayindex inline : os_objectiddefined os_objectidequal os_objectidfrominteger os_objectidtointeger os_timeadd os_timeassemblefrommicroseconds os_timeassemblefrommilliseconds os_timeassemblefromnanoseconds os_timeassemblefromsubseconds os_timegetfractionalpart os_timegetmicrosecondspart os_timegetmillisecondspart os_timegetnanosecondspart os_timegetsubsecondspart os_timegettotalmicroseconds os_timegettotalmilliseconds os_timegettotalnanoseconds os_timegettotalseconds os_timesubtract <section> add a simple test for these at the functional level ( tests / unit - tests ) . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add utassert_mir macro ( similar to utassert_na ) <section> use of utassert_casetype_mir not standardized like na , leads to potential for misuse <section> add a similar macro as utassert_na <section> none <section> related to nasa / cfe # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add typedef for <allcaps> osal </allcaps> status codes <section> in the recent versions of <allcaps> cfe </allcaps> , a typedef ( <code> ) is added and used for the return type on any function that returns a <allcaps> cfe </allcaps> status code , while <allcaps> osal </allcaps> continues to use a bare <code> return type . although the type does need to be integer in nature ( to maintain semantics of equality checks , etc ) , the typedef does still serve a useful purpose , in that it implies behavioral characteristics of the function i . e . that its return value should be checked against the set of defined status values for that module where certain values have defined meaning - as opposed to a generic number . <section> <allcaps> osal </allcaps> should define an <code> ( which can be a typedef to <code> ) and prototypes of functions returning a status value should be updated to <code> to more clearly indicate when the return value should be compared against the set of constants defined in <code> . <section> leave as <code> ( inconsistent with <allcaps> cfe </allcaps> ) . <section> in particular , having a separate type and macros helps identify cases where improper or incomplete type conversions are done , for instance see nasa / cfe # <number> <section> joseph hickey , vantage systems , inc .",2
"<code> implementation wrt errors not consistent <section> in the <allcaps> rtems </allcaps> implementation if <code> fails ( over max int ) it ' ll wait <number> ticks , although comment is somewhat misleading since <number> is not a minimum . <repeated> passing in <number> would also cause no wait : <url> vxworks does not wait a minimum if <code> fails , just returns an error : <url> <allcaps> posix </allcaps> just converts to <code> and uses <code> . <section> technically <code> should be functionally tested with a <number> and max value input , not that i ' d ever want to wait that long ( although <allcaps> rtems </allcaps> and vxworks should return quickly due to the os_milli2ticks error response ) . it would be nice if behavior was consistent , although for <number> it looks to me like none of them would yield . if we really want a yield in all cases then it needs an update . <section> none . <section> from functional test scrub . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<code> not used <section> <code> error code is defined but not used anywhere . documented as a return code for both <code> and <code> apis . <section> use or remove . <section> could leave in if it ' s just not applicable to any of the open source os ' s , but seems strange it would not apply for at least one of them . <section> discovered in unit / coverage testing . relation to # <number> . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"return os_error if <code> fails in vxworks <code> <section> coverage test highlights somewhat unexpected behavior in the vxworks <code> where it will still return success if <code> does not return os_success . there is not a real case where <code> would fail that i know of , but the logic is a bit strange . <url> <section> return os_error if there is an error . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , add <allcaps> osal </allcaps> prefix to network <allcaps> api </allcaps> group <section> fix # <number> - doxygen group name update <section> ci , doc only <section> none , updated doc <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
network id apis group missing <allcaps> osal </allcaps> prefix <section> missing prefix : <url> <section> add prefix . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"osal_timer_ut inconsistent on mcp750 / vxworks <section> the timer test does not have consistent results when run on the mcp750 + vxworks <number> platform <section> run "" osal_timer_ut "" and occasionally a failure occurs in the "" nominal "" timer case : <code> <section> test should pass reliably <section> this is partly related to the fact that the mcp750 implementation has something wrong with its timer implementation . the test reports these warnings : <code> this means there is increased jitter in the callbacks , which is then compounded by the rather crude delta check : <url> <section> mcp750 / vxworks <number> <section> other timer tests which average the counts over total time pass fine . but this one checks the delta on every interval , so one case of too much jitter and it fails . <section> joseph hickey , vantage systems , inc .",0
"vxworks osal_file_ut test does not pass with default config <section> the osal_file_ut uses a small ramdisk as its temporary file system to run the tests . however , with the default configuration of <code> at <number> , one gets the following error : os_fileopen_impl ( <sad> <number> : open ( ram3 : <number> / tmpfile26 . txt ) : errno = 0x 3 8 0 0 0 4 this errno correlates to <code> reducing the value of <code> to <number> , the test passes ok <section> run osal_file_ut on mcp750 / vxworks <number> with default config <section> test should pass with default config <section> if applicable , add references to the software . <section> mcp750 / vxworks <number> <section> the <allcaps> ramdisk </allcaps> only has <number> blocks , so this might be related . the other option , if acceptable , might be to document in the release notes that this particular test on this platform requires the osal_config_max_num_open_files to be reduced from its default value . <section> joseph hickey , vantage systems , inc .",0
"osal_core_ut hanging on mcp750 / vxworks <section> when i run <code> on the mcp750 , it seems to run fine until it gets to the <code> test . about <number> tasks into the process of creating os_max_tasks , output stops , and the test just hangs . here are the last few lines of output : <code> <section> run <code> on the mcp750 test platform <section> test should pass <section> mcp750 vxworks <number> <section> this test used to pass , so very confusing as to why it seems to be locking up now . <section> joseph hickey , vantage systems , inc .",0
"vxworks timebase still registers signal with <allcaps> rtos </allcaps> when sync function is not <allcaps> null </allcaps> <section> when calling <code> with the 3 rd argument ( external_sync ) non - <allcaps> null </allcaps> , it is supposed to use the external sync function rather than an register an <allcaps> rtos </allcaps> timer to implement the tick . however , the vxworks implementation still tries to register the <allcaps> rtos </allcaps> timer , which has a signal number of <number> , so it fails in <code> . <section> run timebase - api - test on vxworks , observe failure : <code> <section> test should pass <section> mcp750 , vxworks <number> <section> vxworks just needs to skip <code> and other <allcaps> rtos </allcaps> timer configs when assigned_signal is <number> . <section> joseph hickey , vantage systems , inc .",0
"network - api - test timeout still too short for mcp750 <section> the console / printf operations on mcp750 take a considerable amount of time ( only <number> baud serial ) . it appears some extra assert statements added in this test have made it so even 1 0 0 0 ms is not sufficient . ( looks like the serverfn might be timing out on a write while the client is printing a bunch of asserts , which then causes an error later when the client finally gets to the read ) . <section> run test on mcp750 , observe unexpected timeout error : [ <allcaps> fail </allcaps> ] <number> network - api - test . c : <number> - os_timedread ( ) ( - <number> ) = = <number> <section> test should pass <section> mcp750 vxworks <number> <section> joseph hickey , vantage systems , inc .",0
"<allcaps> rtems </allcaps> os_gettaskid_impl returns invalid value from root task <section> the "" root "" or initial task is technically not an <allcaps> osal </allcaps> task and does not have an <allcaps> osal id </allcaps> . if <allcaps> osal </allcaps> os_gettaskid ( ) is called , it should return os_object_id_undefined . however on <allcaps> rtems </allcaps> it returns a nonzero value which is not a valid task id . <section> run unit tests on <allcaps> rtems </allcaps> <section> os_gettaskid ( ) should return os_object_id_invalid if the "" rtems classic name "" is not actually an <allcaps> osal </allcaps> task id . <section> <allcaps> rtems </allcaps> <number> . <number> <section> joseph hickey , vantage systems , inc .",0
"timer "" reconfig "" tests do not work on <allcaps> rtems </allcaps> or vxworks <section> the "" reconfig "" tests were added to verify that timer config calls from the context of a timer callback are rejected . unfortunately the underlying mechanism that allows this to happen only works on <allcaps> posix </allcaps> ( via the pthread keys , which can do this ) . on <allcaps> rtems </allcaps> and vxworks , the mechanism which gets the task id ( <code> ) does not return the timer id when called from a timer task . <section> run timer tests on vxworks or <allcaps> rtems </allcaps> , timer reconfig tests will fail . <section> test should pass . <section> mcp750 vxworks <number> <allcaps> rtems </allcaps> <number> . <number> <section> might be fixable on <allcaps> rtems </allcaps> but probably difficult to fix on vxworks . may want to consider just skipping this test ? <section> joseph hickey , vantage systems , inc .",0
"ut symbol table dump size too small on mcp750 ( vxworks ) <section> the unit test case that verifies the <code> function has a size limit of only <number> bytes . the actual size of the symbol table on the mcp750 test platform is larger , and this returns an error . <section> run loader test on mcp750 , dump test will fail due to symbol table size limit getting reached <section> test should pass <section> mcp750 , vxworks <number> <section> joseph hickey , vantage systems , inc .",0
"add range to os_taskdelay test <section> when running cfs in a vm ( e . g . <allcaps> qemu </allcaps> ) the timings and the system clock is not as precise / predictable . as a result , i have occasionally seen the newly - added functional test for os_taskdelay fail as follows : <code> <section> execute osal_core_ut on a cfs system running in a vm <section> tests should pass reliably . <section> <allcaps> rtems </allcaps> <number> . <number> running in <allcaps> qemu </allcaps> <section> likely related to some sloppiness in how the emulated real time clock works under a hypervisor . suggestion is to just extend the acceptable range a big ( i . e . >= <number> instead of >= <number> ) <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , rename doc to docs <section> this is a simple rename of the <code> subdirectory , for consistency with other modules . also corrects various files where it referred to "" doc "" fixes # <number> <section> build cfe documentation <section> none , but will affect scripts / tools that look for a specific "" doc "" directory name <section> ubuntu <section> if accepted , this will likely need a corresponding update in the cfe / cfs bundle <section> joseph hickey , vantage systems , inc .",1
"provide file for cfe detail design <section> by default , when building cfe mission "" detail design "" document , the entire module directory is added to the doxygen input , which will recursively pick up all source files , but also everything else too . this can lead to conflicts with e . g . "" mainpage "" , where <allcaps> osal </allcaps> provides its own mainpage for its <allcaps> api </allcaps> guide , but this should <allcaps> not </allcaps> be used for other documentation that includes <allcaps> osal </allcaps> , like the detail design doc . <section> <allcaps> osal </allcaps> should provide a detaildesign template file that indicates which sources should be used , rather than everything . <section> cfe itself could exclude certain parts in its templates , but that means cfe must have knowledge of <allcaps> osal </allcaps> directory tree . <section> related to nasa / cfe # <number> <section> joseph hickey , vantage systems , inc .",2
"rename "" doc "" to "" docs "" for consistency <section> most other cfs modules put the documentation in a <code> subdirectory , except <allcaps> osal </allcaps> and <allcaps> psp </allcaps> , which put it in <code> <section> be consistent , use <code> since this is what cfe and the majority of cfs apps use . <section> inconsistent naming means over complicated scripts and tools , that have to look in multiple different possible names / locations <section> joseph hickey , vantage systems , inc .",2
"set parameter on os_selectfdisset should be const <section> this function only checks bits ( read only ) , it does not modify the "" set "" argument <section> the pointer should be qualified <code> <section> # <number> ( part of <allcaps> cfs </allcaps> - <number> review ) corrected the internal function , but it looks like this one was missed . it is part of the public <allcaps> api </allcaps> but adding const here should not break anything . <section> joseph hickey , vantage systems , inc .",2
"use "" <allcaps> bsp </allcaps> "" lock to protect utassert globals <section> as originally noted in # <number> , the utassert global data structures are not protected against concurrent modification by multiple test threads . utassert * functions should not be invoked from child threads , but many tests do this anyway . although no observed failures can be traced directly to this , it is not correct . <section> the <allcaps> bsp </allcaps> lock that was originally implemented to clean up console output can also serve to protect these data structures . this lock can make it so utassert calls can be safely done from any test thread . <section> the tests which use child tasks could be redesigned to only assert from the main thread , but this can be difficult to do in some cases . <section> this is the second half of the request in # <number> , split into a separate work item . adding a mutex around the modifications is lower risk than changing the internal data structure initialization , and they can be implemented separately . <section> joseph hickey , vantage systems , inc .",2
"add test to validate priority - based wakeup on semaphores <section> <allcaps> osal </allcaps> semaphores should implement priority - based wakeup , as opposed to <allcaps> fifo </allcaps> . this currently is not validated by any test . <section> should implement a new unit test to confirm that priority - based semaphores are working as expected . basic procedure should be something like : <number> . create a semaphore with value <number> <number> . create a low priority task which blocks on the semaphore <number> . create a high priority task which also blocks on the semaphore <number> . give the semaphore <number> . confirm only high priority task woke up , low priority still blocked <number> . give the semaphore again <number> . confirm low priority task woke up <section> this test depends on actual task priorities being set in the os scheduler , which may not happen when running as a normal user and using os_config_permissive_mode option . this test would have to be bypassed in that case . <section> joseph hickey , vantage systems , inc .",2
"add workflow to locally build osal documentation <section> once <url> is merged we can now build the osalguide locally and check that prs do not break the osal docs . <section> create a "" docs "" workflow github actions workflow <section> figure out how to trigger the cfs bundle workflows from <allcaps> osal </allcaps> prs <section> none",1
"ensure all unit test cases for invalid id use <allcaps> undefined </allcaps> plus another value <section> when checking for proper id validation , the specific value <code> must be rejected as it is always invalid . however , the set of values that should be rejected is much larger than this - proper id validation should only permit a small subset of values to be accepted . <section> in order to confirm that id values are being validated properly , test cases checking for <code> should pass in <code> as well as some other value , which should be nonzero , but also _not_ in the valid range - to confirm that the implementation is doing the proper validation and not simply checking for equality with <code> . <section> this came up as part of return / status code validation efforts - test cases are currently inconsistent , some tests are only using <code> , while some only use <code> . <section> joseph hickey , vantage systems , inc .",2
"stub generator script filtering all "" extern "" strings <section> in order to parse the headers the "" generate_stubs . pl "" script needs to filter out "" extern "" keywords . problem is , it is filtering the "" extern "" string even if it appears inside a larger string , not just the keywords . <section> view the generated stub for "" os_timebasecreate "" . the last parameter should be <code> but it its appearing in the generated code as <code> instead . <section> should appear in the generated code as <code> , same as header . <section> <url> <section> ubuntu <section> joseph hickey , vantage systems , inc .",0
"include doxyfile templates in <allcaps> osal </allcaps> <section> currently the <allcaps> osal api </allcaps> is marked up with doxygen , but the required <code> config file / template exists in the <allcaps> cfe </allcaps> repo , not in the <allcaps> osal </allcaps> repo . <section> the <code> and other support / config files for the <allcaps> osal </allcaps> guide should exist in this repository , in the docs directory , so <allcaps> osal </allcaps> documentation can be generated on its own without <allcaps> cfe </allcaps> . <section> <allcaps> osal </allcaps> is supposed to be a standalone product , but currently only <allcaps> cfe </allcaps> users can generate <allcaps> osal </allcaps> documentation . it also makes management harder having certain config files in a separate repo . <section> joseph hickey , vantage systems , inc .",2
"occasional deadlock issue in tests that delete tasks <section> when running the unit tests repeatedly , occasionally some tests are getting into a deadlock . these tests are ones that : <number> . use sub - tasks to do various work <number> . those sub - tasks use os_printf ( ) <number> . use an asynchronous os_taskdelete during their cleanup / teardown in the event that the sub - task was in the midst of an os_printf ( ) call when os_taskdelete was invoked , the underlying <allcaps> bsp </allcaps> lock will not get released . observed in mutex - test , but others may have similar patterns . <section> run mutex - test repeatedly , may deadlock at some runs . ( it is a race condition , not <percent> reproducible ) <section> should run consistently . <section> ubuntu <section> this really just a symptom of a generic / known issue with os_taskdelete , in that other resources held by that task are not necessarily tracked or freed , depending on what it was doing at the time it was deleted . linux / pthreads does have a workaround but the issue is likely to exist on all os ' s <section> joseph hickey , vantage systems , inc .",0
implement os_mkdir access settings <section> see conversations in < <url>,2
"utassert should enforce newline on messages only if its missing <section> currently the <code> used by utassert appends a newline after every message , see here : <url> however , in many calls to <code> the test author already included a <code> in the format string , such as here : <url> as a result there is extra whitespace in the log , example here : <url> <section> the append of the newline in <code> should only happen if the message did _not_ have a trailing newline already . this will still accomplish the intent of making sure output messages end in a newline and do not run together , but will clean up extra unintended blank lines in the log files . <section> this is mainly just a nitpick / pet peeve about the extra blank lines that come with "" utprintf "" , but it also does potentially impact parsing log files with scripts . <section> joseph hickey , vantage systems , inc .",2
"return value of "" os_rmdir "" implementation not being passed through <section> the return value of <code> ( the low level implementation ) is not getting propagated back to the caller of <code> as it should be . <section> call <code> on a directory that should not be removable , e . g . if it is not empty . the <code> function fails and returns <code> , but the application gets returned <code> . <section> caller should get the error code , not <code> . <section> <url> <section> ubuntu <number> <section> noticed this when validating return codes in # <number> and # <number> <section> joseph hickey , vantage systems , inc .",0
"os_debug on vxworks needs to use same <allcaps> bsp </allcaps> facility as os_printf <section> the "" os_debug "" macro , when enabled , ends up calling <code> directly . on vxworks the characters from these debug statements get intermixed with other output from the async utility task / console writer . this makes it just about impossible to read . furthermore unit tests call the <allcaps> bsp </allcaps> function directly , so there is potentially a third task writing chars at the same time during tests , making it worse . <section> run functional / unit tests on vxworks . <section> output should be at least decipherable / readable . adding some sort of mutex on os_bsp_consoleoutput_impl ( ) would probably help greatly . <section> mcp750 , vxworks <number> <section> here is a cut and paste of some output from the "" network - api - test "" that i am currently looking into for other issues . this is not even the worst example i have seen . but it is very hard to see what ' s actually going on here . <code> <section> joseph hickey , vantage systems , inc .",2
""" network - api - test "" does not run successfully on vxworks <section> running the "" network - api - test "" on vxworks fails with several issues . the fcntl <code> / <code> calls return errno <code> followed by other failures . <section> run the "" network - api - test "" program on mcp750 w / vxworks <number> . various failures are reported . eventually the test hangs because a timeout test is reached , but timeouts do not function correctly due to issues with the previous fcntl f_getfl calls . <section> test should pass . <section> mcp750 w / vxworks <number> <section> this is partly related to modifications in pr # <number> / issue # <number> which was a product of the <allcaps> cfs </allcaps> - <number> review . previously it would not check the result of the <code> calls so the "" selectable "" flag was always set . now the result is checked and the "" selectable "" flag only gets set if the flags were set . so the fcntl was always failing on vxworks but it was previously ignored . but even if the o_nonblock flag does not get set , <code> should still be usable . the flag is mainly set as a protection in case two tasks call a blocking <allcaps> api </allcaps> at the same time . <section> joseph hickey , vantage systems , inc . ( on behalf of <allcaps> jsc </allcaps> team )",0
"update <code> documentation related to it being an <allcaps> api </allcaps> , inconsistent documentation in implementation <section> <code> is an external <allcaps> api </allcaps> : <url> yet internally there ' s a few style patterns and references that treat it like it ' s internal : <url> <url> note the implementation file itself has some inconsistencies : <url> <url> <url> <url> <section> update comments , make sure headers are in the right place <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
differentiate hook and handler function filenames <section> from <allcaps> ccb </allcaps> : <number> - <number> - <number> <url> in <url> <section> rename * hooks . c as * handler . c for stubs <section> none <section> see nasa / cfe # <number>,2
"add tests for object id inline functions <section> <code> , <code> , <code> , <code> are missing tests . <section> add tests . since these are inline they can be completely exercised via explicit coverage tests ( suggest adding to coveragetest - idmap . c ) . note these can be trivial , just need to convert a to and from a range of id ' s ( note these are just to / from integers , <allcaps> not </allcaps> indexes . <repeated> ) , check each for equal to itself but not equal to the others , check that os_object_id_undefined results in undefined and the rest are defined . this also ensures an id did not "" wrap "" by exercising array index conversions from array index <number> and max for each type ( as defined in configuration ) . <section> could be added to a "" functional / full stack "" test but no point since they do not have any external dependencies . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"improve consistency in the result reporting in "" unit - tests "" <section> in order to be able to cross check and confirm that the unit tests are actually checking for the status codes that they should be , the test cases need to be clear about the <allcaps> api </allcaps> being called and the return value / status code being tested for in that test case . however , the functional tests are currently not consistent in how results are reported . <section> example from the binsem test , which is better because it at least uses a macro that includes both the function name / <allcaps> api </allcaps> being called ( <code> ) as well as the status code being tested for ( <code> <sad> <url> which translates to a line like this in the log file : <code> however a similar test case from os_moduleload displays neither : <url> the latter translates only to a line like this in the log file , which does not say much at all : <code> a clear and concise description of what you want to happen . <section> this is a prerequisite to completing # <number> - the information in the log file needs to be made more like the binsem case , so it can be cross referenced back to confirm the functional tests are checking for the items they are supposed to be checking for . <section> joseph hickey , vantage systems , inc .",2
"return for a timeout is negative <number> <url> not sure which layer of abstraction to report this but the comment states that a timeout should return <number> . however , on linux / portable <allcaps> bsd </allcaps> . <repeated> the eventual call to os_doselect is returning os_error_timeout ( - <number> ) and flowing that all the to the os_timedread <allcaps> api </allcaps> . i would prefer it to be "" caught "" and returned as <number> at some point but . <repeated> more than anything . <repeated> just need the comment to match .",1
wrong token name used in accept call <url> this is a bug . i think it should be conn_token . <repeated> not sock_token,0
"add utassert method to verify expected stub argument value ( s ) <section> in some tests cases it is desired to not only verify that a specific stub function was called , but also to verify the specific arguments that the stub function was called with . this is currently possible by writing a hook function to check the argument values , but that requires writing a specific hook for every <allcaps> api </allcaps> . <section> provide a more generic facility such that a test case can pre - assemble an object ( similar to the context object which is passed to the hook ) that has the _expected_ argument names + values . then provide a generic method to compare those to the _actual_ argument values when the function is called . the latter bit can be done by common code at the same time the user - defined hooks are invoked . <section> a scaled - back alternative might be to provide a facility to register a persistent hook that is called for every function , and is not forgotten / unregistered when the stubs are reset like other hooks are . this would allow a test case to register a function to be called with _every_ stub on _every_ test without having to re - register it every time . calling this an alternative because the test case can then implement its own generic argument value check hook , but this would simplify the process by allowing it to apply universally and persistently . <section> joseph hickey , vantage systems , inc .",2
"why does utprintx have an infinite loop in it ? <section> any use of utprintx results in an infinite printing of the given memory and length . <section> steps to reproduce the behavior : <number> . put utprintx in a unit test , give it an address and size ( from <number> to max uint32 ) <number> . run tests <number> . enter loop <section> <number> . print the number of bytes given as _length_ starting at the given address _memory_ ( with newline at end ) <number> . return <section> <url> <section> - <allcaps> rhel </allcaps> <number> <section> alan gibson <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <number>",0
"cannot find recommended method ( utmemset ) suggested in comments <section> utmemset is not found in ut - assert , but it suggested to be used in comments from utassert . h and uttools . h <section> <url> <url> <section> other comments in the same files suggest to use methods that do exist , utmemfill and utmem2binfile . <section> alan gibson <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <number>",1
"fix # <number> , update <allcaps> osal </allcaps> config guide link <section> fixes github link in <allcaps> osal readme </allcaps> . <section> - went to <url> in firefox to render markdown - clicked "" configuration guide "" link at bottom of document - confirmed that firefox navigated me to valid doc link : <url> fixes # <number> <section> link now properly navigates users to config guide documentation . <section> - hardware : pc - os : ubuntu <number> - versions : firefox <number> ( <number> - bit ) <section> n / a <section> n / a <section> ross peters",1
"<allcaps> osal </allcaps> configuration guide link is broken in <allcaps> readme </allcaps> <section> the link to the <allcaps> osal </allcaps> configuration guide is broken in blob / main / <allcaps> readme </allcaps> . md . <section> go to <url> and then click on the "" configuration guide "" link near the bottom of the file . it navigates to the old <allcaps> pdf </allcaps> file link . <section> i expected the link to take me to the markdown file in the repo . <section> ` see the configuration guide <url> . <section> documentation only . <section> n / a <section> ross peters",1
add socket shutdown <allcaps> api </allcaps> <section> no support for graceful shutdown of <allcaps> tcp </allcaps> sockets <section> add shutdown <allcaps> api </allcaps> <section> none <section> stakeholder request <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ping <user>,2
"impossible to test os_console_async false case <section> now that os_console_async is defined locally , it ' s impossible to functionally test false case or get full branch coverage on <code> without modifying the code under test : <url> <url> <section> either need to be able to exercise this option or remove it . <section> none <section> prevents full branch coverage <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"utassert improvements for multiple test invocations <section> utassert currently assumes that there will only be one test set to execute . after booting , a set of tests is collected , then executed , and once the test is complete the process will end ( either by simply exiting the process on linux debug environment , or stopping the parent vm / container , or doing a processor reset if on real hardware ) . the newly added <allcaps> cfe </allcaps> functional test now permit more than one test set to run , based on commands . a test can be started , completed , and then another test can be started , all in one "" lifetime "" of the utassert global data structures . although this generally works there could be some improvements <section> at the end of a test run the list is destroyed , and it leaves the list pointer as <allcaps> null </allcaps> . this means no additional tests can be registered after a call to uttest_run . ( luckily re - invoking uttest_earlyinit is a workaround - this is risky though because if any tests were in the list already , early init will drop them and leak the memory , it does not check for this ) . preferably this should leave the structure in a state where more tests can be registered without a complete re - init . <section> neither of these suggestions are critical at this time - would be nice to have , but nothing that prevents <allcaps> cfe </allcaps> functional test from basically running , using the workaround of re - invoking <code> between every test cycle . the biggest risk is the fact that re - invoking uttest_earlyinit does not protect against clobbering already - registered tests , but this should not happen if the proposed test pattern is followed ( its more of something that is not protected against happening , not something actually happening ) . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> # <number> # <number> , adds local makefile and bundle / local unit test actions with coverage verification <section> fix # <number> - adds local makefile ( trivial single build sample , can use different build directories for multiple platform ) fix # <number> - adds bundle and local unit test run and coverage verification fix # <number> - added missing line coverage <section> self testing ! also checked distclean and install independently . <section> runs the unit tests again , both from the context of the bundle config and local <allcaps> osal </allcaps> config . verifies <percent> line coverage . <section> - hardware : local docker container - os : ubuntu <number> - versions : cfs bundle main + these commits <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> rtems </allcaps> fails to build with shell enabled <section> the prototype for the os_shelloutputtofile_impl ( ) function has gotten stale and needs an update . unfortunately this is not built as part of any regularly - run test routine . <section> change <allcaps> osal </allcaps> config to enable shell build on <allcaps> rtems </allcaps> <section> build should pass <section> <url> <section> <allcaps> rtems </allcaps> <number> . <number> target , ubuntu <number> host . <section> joseph hickey , vantage systems , inc .",0
"<allcaps> osal </allcaps> should have an inverse function to os_api_init ( ) <section> once <allcaps> osal </allcaps> is initialized , normally it runs forever until rebooted , or the process exits in the case of linux . in that light , resources obtained during os_api_init ( ) cannot directly / simply be released via the <allcaps> api </allcaps> - there is no opposite / inverse routine defined . however under testing conditions , and for general completeness of <allcaps> api </allcaps> , it is useful to have an inverse function to tear down the <allcaps> api </allcaps> structures and return the system to the state it was prior to the <code> call . this can ( _almost_ ) be done with the current <allcaps> osal api </allcaps> , but it must be done in two parts : <number> . <code> will clean up any remaining user - instantiated objects in the tables . <number> . <code> will cause any internal resources , such as the console utility task , to also self - exit . the combination of these two basically leaves the system in a state similar to what it was before <code> was run . ( its not perfect , but its close ) . but its not ideal because a user should not have to call two functions ( one of which also has a parameter ) to undo the init call . <section> implement a <code> routine which would be just be a wrapper around these two currently - existing functions , to make it simpler to do this . importantly , being a void / void routine means that it can be easily used with unit tests and the <code> routine . <section> leave as - is <section> issue # <number> which calls for something like this that unit tests can use . <section> joseph hickey , vantage systems , inc .",2
"<allcaps> osal </allcaps> timer ut failing intermittently <section> on my virtual machine running ubuntu <number> , osal_timer_ut fails roughly <percent> of the times i run it . specifically the os_timerset test . <section> run make test <section> it should pass <percent> of the time . <section> here is the printout <allcaps> begin </allcaps> ] <number> os_timerset [ <allcaps> pass </allcaps> ] <number> ut_ostimer_timerio_test . c : <number> - # <number> invalid - id - arg [ <allcaps> info </allcaps> ] <number> ut_ostimer_timerio_test . c : <number> - # <number> internal - error [ <allcaps> info </allcaps> ] ut_ostimer_timerio_test . c : <number> : os_timerset ( ) - # <number> interval - too - short ( clk_accuracy = <number> ) [ <allcaps> pass </allcaps> ] <number> ut_ostimer_timerio_test . c : <number> - # <number> interval - too - short [ <allcaps> info </allcaps> ] ut_ostimer_timerio_test . c : <number> : os_timerset ( ) - # <number> nominal condition ( clk_accuracy = <number> ) [ <allcaps> fail </allcaps> ] <number> ut_ostimer_timerio_test . c : <number> - # <number> nominal [ <allcaps> end </allcaps> ] <number> os_timerset <allcaps> total </allcaps> : : <number> <allcaps> pass </allcaps> : : <number> <allcaps> fail </allcaps> : : <number> <section> ubuntu <number> <section> alex campbell <allcaps> gsfc </allcaps>",2
"shell - test does not appear to work on vxworks <section> the "" shell - test "" program attempts to run the following command : echo - n "" valuetoechointhefile "" but this does not appear to work correctly on vxworks <number> . the test reports : <code> <section> enable shell and run "" shell - test "" on mcp750 <section> test should pass <section> mcp750 vxworks <number> <section> i am not familiar enough with vxworks , it seems the interactive shell does not even have an "" echo "" command so i am not sure how this is expected to work to begin with . if run directly on the shell as a test , i get : <code> so it is not clear to me how this is expected to work . <section> joseph hickey , vantage systems , inc .",0
"improve compliance with public coding standards ( and document non - compliance ) <section> cfs core has been developed and maintained utilizing internal coding standards , which is not much help to the wider community when the question of coding standards come up . lacking documented compliance and there ' s a few easy fixes that could be implemented to improve compliance . <section> could document compliance against public standards ( <allcaps> jpl </allcaps> / power of <number> / etc ) . some easy updates where we could improve compliance : - ( ) around <section> macros : currently not on constants - ( ) for precedence : currently rely on precedence rules in many cases - a handful of elements could be file static - a handful of elements could be local static - side effects in expressions : there ' s a handful that could be expanded warnings we monitor and minimize occurrences : - conditional compilation : still have cases to support alternate configurations - recursion : avoided in general , carefully analyzed ( current identified cases are <number> level of recursion in debug support and one other that is protected from occurring ) - pointer type inside typedef : in general minimized ( function pointers , etc ) - complex macros : minimized ( although utilized in debugging / testing ) - definitely use function pointers ( callbacks , etc ) , but to satisfy requirements areas we do not comply and debatable value : - unchecked parameter dereferences in helper functions and "" false alarms "" based on status return checks ( we check status return and skip logic , but do not explicitly check a provided pointer is not <allcaps> null </allcaps> ) - function too long : could be a topic of future refactor but heritage / working code should trade value vs risk - not enough assertions : style difference - basic numerical types used : we use fixed width types where appropriate , but do not strictly disallow basic types where they make sense other non - compliances identified are analyzed and dispositioned ( internally ) , examples : - cast alters value : all over in print statements to print hex ( unsigned ) status ( signed ) values - many false alarms for various rules ( all confirmed false ) - redundant conditions , unreachable code , useless assignments to support configurability ( would not be if configuration changes ) <section> none <section> note - marking for discussion to trigger input . nothing "" breaking "" or "" critical "" identified . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ping <user>",2
non - distinct identifiers <section> vxworks defines <code> in time . h conflicts with : <url> <url> vxworks defines <code> in unistd . h conflicts with : <url> <url> <url> <section> deconflict <section> none <section> static analysis warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"file api unit test uses osal_id_t as integer <section> the type <code> should not be used as an integer , and normal integer operations or comparisons should not be used with this type . however it looks like a couple cases in file <allcaps> api </allcaps> test were recently added which are comparing this to a <code> type directly . <section> build <allcaps> osal </allcaps> with a type - safe osal_id_t , fails to build in <code> <section> build should succeed . <section> comparisons to uint32 : <url> <url> <section> ubuntu <number> <section> should use <code> inline function to test . <section> joseph hickey , vantage systems , inc .",0
"make os_strnlen public <section> the os_strnlen ( ) wrapper could be useful for apps , because <code> is not a standardized function , but many times this behavior is needed / desired when reading fixed size string buffers . an inline function exists in <allcaps> osal </allcaps> to provide a substitute but it is currently in an internal header . <section> move the function to the public header so apps can also use it . <section> leave as is <section> joseph hickey , vantage systems , inc .",2
"<allcaps> rtems </allcaps> silently discards non - selectable file handles in os_selectmultiple ( ) <section> the conversion from the <code> to the internal <code> inside os_fdset_convertin_impl ( ) will ignore filehandles for which the <code> flag is not set . the select ( ) is then called _without_ this file included in the set , and the result is returned . this is misleading because the user is not aware that the implementation ignored one ( or more ) if the filehandles in the set . if the user requested it by including in the set , it should return an error to the caller , not silently ignore . <section> now exposed by unit tests in the current ic ( this makes the function no longer return os_err_operation_not_supported and the test that should be skipped is not actually skipped because of this ) . <section> return an error instead of silently ignoring the handle for which select ( ) cannot be done . <section> <allcaps> rtems </allcaps> <number> . <number> <section> joseph hickey , vantage systems , inc .",0
"fd_set coversions in select impl can read beyond the end of os_impl_filehandle_table <section> the loop inside os_fdset_convertin_impl and os_fdset_convertout_impl is limited by <code> , which itself is sized to accommodate os_max_num_open_files as a bit mask . the problem is that the size is ( necessarily ) padded up to a multiple of <number> bits . if os_max_num_open_files was not a multiple of <number> , and some of these "" padding "" bits are set as <number> , these functions will attempt to read entries beyond the end of <code> . <section> in normal use cases where the correct <allcaps> api </allcaps> is used ( e . g . <code> ) it is not possible to set these extra bits - as the os_selectfdadd ( ) checks if the filehandle is valid before setting the bit . but in coverage tests , the structure is <code> to all ones ( 0 xff ) which causes undefined behavior as it will end up reading beyond the end of the array . <section> must not read beyond the end of the array even if extra bits are set . <section> ubuntu <number> <section> observed as failure in <url> this issue was not introduced by those merges , it just so happens that it changed the preconditions such this became exposed . <section> joseph hickey , vantage systems , inc .",0
comments on header guard endif do not match ifdef <section> for example : <url> <url> <section> comments should be consistent w / code <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"move osal guide into this repository <section> the osal guide currently "" lives "" inside the cfe repo in the <code> <url> directory . it would make more sense to keep the documentation files in the osal repository . <section> move <code> and <code> files to this repository . will need to add a script that builds those in a standalone fashion . <section> keep as is . move <allcaps> all </allcaps> docs to the bundle repository . <section> none",1
"fix # <number> , add contributing guide <section> fix # <number> added a contributing guide that links to the main cfs contributing guide . <section> users should be able to view the contributing guide contents easily from the <allcaps> osal </allcaps> repo . <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"add contributing guide <section> add a contributing guide for the <allcaps> osal </allcaps> repo . <section> create a contributing guide markdown file . in the guide , add a link to the cfs contributing guide . <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"report timer_gettime error in os_timebaseset_impl <section> if timer_gettime fails the rounding error will not be reported , silently ignored : <url> <section> report error , return failure <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"report symeach errors in os_symboltabledump_impl <section> errors not reported : <url> <section> check for non - <allcaps> null </allcaps> , report error ( write to file ? ) , return error . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"os_shelloutputtofile_impl in vxworks is not thread safe <section> filename is common : <url> <section> at minimum document . consider refactor for shell safe implementation . although current cfs concept is to use a single app and even this should be avoided when possible ( direct shell use is discouraged in production ops ) . <section> deprecate / remove . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"return error on moduleinfoget error in vxworks <section> <code> always returning success in vxworks : <url> <section> return error . it ' s not like the other cases where other info is not available and success makes sense . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"remove mcp750 specific <allcaps> ata </allcaps> device mapping <section> this code is out of <allcaps> osal </allcaps> scope : <url> <section> move to <allcaps> psp </allcaps> or similar . <section> leave as - is ( future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"remove os_binsemflush <section> leads to race conditions , should not be used . also other flushes are not implemented , so consistency . <url> <section> deprecate / remove <section> leave as - is ( future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"remove impossible to reach ( operationally ) code <section> os_mutsemtake_impl will block until this thread owns the mutex , check would require os error : <url> <section> remove <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"inconsistent os_max_module limit / documentation <section> comments do not match check : <url> <section> fix implementation ( if needed ) , fix comments ( if needed ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"os_fs_getphysdrivename should take a buffer size <section> os_fs_getphysdrivename assumes buffer size : <url> <section> update / replace with <allcaps> api </allcaps> that takes buffer size <section> leave as - is ( future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"refactor excessive logic / side effects in return statement <section> excessive logic in os_filesys_findvirtmountpoint return statement . this is not coding standard compliant and takes a while to sort out when first observed : <url> <section> refactor / comment to make more clear . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"<hashtag> define </hashtag> or configurable copy block size <section> hard coded copy block size : <url> <section> make a <code> with clear documentation that it could be adjusted for page size or whatever , performance , etc . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"replace questionable enum use <section> could conflict configurable os_max_count_semaphores and os_object_type_os_countsem <url> <section> adjust implementation . <section> leave as - is ( future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"remove rogue while loop <section> leftover while loop : <url> <section> remove <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"convert long switch ' s to static const array / jump tables / function pointer tables <section> do not really need a switch , could use a function pointer table , aka jump table ( as long as you are ok using function pointers . <repeated> <sad> <url> <url> <url> could be static const array : <url> <url> <section> convert to function pointer table <section> leave as - is ( future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"return success on multiple os_api_init calls <section> os_api_init writes error to the syslog and returns error if called multiple times . does not really cause any issues , could just write to the syslog and return success . <url> <section> consider returning success <section> leave as - is ( future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"improve performance of os_debugprintf <section> os_debugprintf checks the level and does not do the work , but the caller still sets up the variable arguments . it ' s better to have a table of function pointers that change when the level changes to either the debug printf or a no - op . <url> <section> table of function pointers <section> leave as - is ( future work ) , this is debug code which would not typically be included in production <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"update os_u32valuewrapper_t name and consider using uintptr_t <section> confusion in name where <code> is used for a union that ' ll hold a <code> . also recommendation to consider using <code> <section> consider rename / <code> use . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"scrub for include < > vs "" "" use ( < > should be system only ) <section> < > used on non - system header includes . example : <url> <section> full scrub / fix <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"better error code for <allcaps> espipe </allcaps> lseek failure ( not os_err_not_implemented ) <section> os_err_not_implemented error code used for <allcaps> espipe </allcaps> lseek error : <url> <section> replace error code with something more appropriate <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"scrub use of ( ) in return statements <section> inconsistent use of ( ) , style . example below but should fix all . <url> <section> fix . <section> leave as - is ( future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"add generic circular buffer implementation <section> console circular buffer not unique , could utilize a generic implementation <section> implement generic circular buffer <section> leave as - is ( future work ) <section> none <section> jacob hageman <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"remove addrlen switch duplication <section> switch to get addrlen repeated multiple times : <url> <url> <url> <url> <section> calculate once and store or implement once and inline <section> leave as - is ( future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"check fcntl return status or explicitly ( void ) <section> return status not checked / reported <url> <section> add check and debug error output or explicitly void . need to resolve w / documentation research . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"rationale for select right after connect ( or remove ) <section> rationale for select ( ) right after connect ( ) ? if the socket is selectable , then it wasn ' t made non - blocking . ( see line <number> ) connect blocks until the connection is made or an error occurs . <url> <section> justify ( add comment ) or remove . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"use compile time assert on address length check in bind <section> known at compile time : <url> <section> use compiletimeassert <section> what if sizeof ( struct sockaddr_in6 ) is > os_sockaddr_max_len but only af_inet is used ? not really an error ? maybe only really known if os_network_supports_ipv6 is not defined ? <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"move set of so_reuseaddr to bind / listen <section> opening every socket as so_reuseaddr is not needed : <url> <section> move to more appropriate function <section> leave as - is ( future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"consolidate switch logic in os_socketopen_impl <section> duplicate switch cases that could be consolidated : <url> <url> <section> consolidate <section> was separate if future domains were added . <repeated> but is currently awkward looking . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"add check for <allcaps> eagain </allcaps> in os_doselect loop <section> on some other <allcaps> unix </allcaps> systems , select ( ) can fail with the error <allcaps> eagain </allcaps> if the system fails to allocate kernel - internal resources , rather than <allcaps> enomem </allcaps> as linux does . <allcaps> posix </allcaps> specifies this error for poll ( <number> ) , but not for select ( ) . portable programs may wish to check for <allcaps> eagain </allcaps> and loop , just as with <allcaps> eintr </allcaps> . <url> <section> add check for <allcaps> eagain </allcaps> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"fix math in os_doselect <section> imagine simplified example with decimal value : now = <number> , and end = = <number> . that means we should sleep for <number> seconds . using the above logic , we get : tv . tv_sec = <number> tv . tv_usec = - <number> so , tv . tv_usec < <number> : tv . tv_usec now becomes <number> ( correct ! ) tv . tv_sec now becomes <number> ( huh ? ) so now we wait <number> seconds instead of <number> maybe we need a - - tv . tv_sec ? <section> confirm / fix if needed . remove bug if not real . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",0
"use pselect in os_doselect to avoid needed conversions <section> could avoid timespec to timeval conversion : <url> if pselect was used here : <url> <section> use pselect , need to check vxworks / <allcaps> rtems </allcaps> support <section> leave as - is ( future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"add assert for fd_set_size in relation to osal_set <section> fd_set has limits : <url> <section> should respect the fd_set_size limit ( prefer compile time error ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"const correctness on input parameters <section> missing const for a few parameters . osal_set : <url> final_id ( need to confirm ) : <url> <section> add const <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"either deprecated or require os_taskregister <section> os_taskregister has comments that it is obsolete , but never got officially deprecated . <section> need to either officially deprecate or officially support . <section> none <section> impacts apps , better now in a major release than later for removal . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"deprecate os_networkgetid and os_networkgethostname <section> os_networkgetid and os_networkgethostname are not really all that useful in an os agnostic sense . <section> deprecate / remove <section> leave as - is ( future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"remove duplicate prototype definition <section> duplicated prototypes for os_networkgetid and os_networkgethostname : <url> <url> <url> <url> <section> remove from osapi - sockets . h <section> deprecate / remove ( see issue # <number> ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"wider adoption of <number> bit interval ( generic timekeeping ) pattern <section> some <allcaps> api </allcaps> ' s and implementations still use msec : <url> <url> <url> consider refactor of timebase init with same pattern : <url> <section> consider wider adoption of the generic <number> bit interval pattern <section> leave as - is ( future work ) . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"implement os_printf / console at shared <allcaps> osal </allcaps> level <section> entire os_printf / <allcaps> osal </allcaps> console implementation could be handled at the <allcaps> osal </allcaps> level and not via implementation . every os needs a thread , a circular buffer , and a semaphore to wake that thread and write to console . all we really need is for that thread to call printf ( ) . there ' s a vxworks specific impl and there ' s a <allcaps> posix </allcaps> impl , etc . it seems it could be <allcaps> osal </allcaps> only using all <allcaps> osal </allcaps> primitives and standard c . <section> use <allcaps> osal </allcaps> primitives at shared level <section> leave as - is ( future work ) > <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"os_mutsemgive - add unique error code for attempted release by non - owning thread <section> attempt to release by non - owning thread is a useful error to identify uniquely ( and it ' s already checked ) : <url> <url> <section> add unique error code <section> currently allowing the os to decide if it ' s an error or not , could leave as - is ( future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"move os_mount and similar platform specific ( or even pre - load of cfs actions ) outside <allcaps> osal </allcaps> <section> os_mount is more in - line with <allcaps> psp </allcaps> concept . occasionally done by os before even loading cfs . <section> consider moving / removing from <allcaps> osal </allcaps> <section> leave as - is , not critical ( consider for future work ) <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"typo , copy / paste , comment clean - up <section> general issue to capture typo , copy / paste cleanup from <allcaps> osal </allcaps> code review . extra space : <url> add comment to justify numbers : common pattern to represent <number> obtjects in a byte ( single bit ) <url> clarify in comments if os_taskdelay is a "" busy "" wait or scheduled ( sleep ) : <url> document input parameter as actually in / out : <url> make capitalization consistent output - > output : <url> clarify comment - explicitly zero for consistency in operations and to avoid confusion : <url> clarify comment - test for existence and is a directory <url> duplicate function comments : <url> check_mode - > lock_mode : <url> comment cleanup , vsnprintf also does the format , <code> : <url> data_size - > max_size : <url> clarify constants in comments : <url> <url> <url> justify constant return - <code> : <url> clarify - <code> : <url> justify constants ( + <number> / <number> ) rounds : <url> <section> fix <section> none <section> no impacts <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"remove os_direntry_name macro <section> os_dirent_t is exposed , do not really need a macro to get to the element <url> <section> remove references , deprecate , remove . <section> leave it , provides a layer of abstraction if names change . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"clarify os_getlocaltime / os_setlocaltime use in relation to osal_gettime_source_clock <section> not really clear / consistent on os_setlocaltime and os_getlocaltime in relation to osal_gettime_source_clock . currently defaulted to clock_monotonic , so a os_setlocaltime may fail . really need to clarify intent of the design / apis to be more clear on how they should be used since the osal_gettime_source_clock is used in both and the setting has different impacts in the different contexts . <section> may benefit from individual configuration parameters , or maybe os_setlocaltime should never be clock_monotonic . add a bit more context to <allcaps> api </allcaps> / configuration documentation . use cases ? <section> anything to clarify / explain intent . <section> debated "" bug "" , could switch . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"clean up endian temporary compatibility macro <section> missing an else ( likely error ) case ( or ! defined ( __byte_order ) ) <url> it ' s also a misnomer ( <allcaps> byte </allcaps> not <allcaps> bit </allcaps> ) , and one of many various patterns ( see nasa / cfe # <number> ) <section> at minimum add the error case , ideally clean / remove / consolidate . <section> none <section> nasa / cfe # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"remove redefine of <allcaps> null </allcaps> <section> the following code will <section> redefine / define <allcaps> null </allcaps> which wasn ' t the intent <url> <section> remove , <allcaps> null </allcaps> is standard c <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"benchmark replacing strncpy use with local / safe version ( s ) <section> strncpy null <section> when not always needed , and does not guarantee <allcaps> null </allcaps> termination . <section> benchmark current implementation against local inline implementation ( s ) that always <allcaps> null </allcaps> terminates , consider option to null fill or not , etc . strlcpy flavor with a fill option ? may differ per compiler / platform / etc . <section> leave as - is . <section> might be a good new user / intern project - <user> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> , <allcaps> osal </allcaps> code review",2
"fix # <number> , add testing tools to the security policy <section> fix # <number> updated the security policy to include the type of testing done for <allcaps> osal </allcaps> or the cfs bundle under a new section titled "" testing "" . provided a disclaimer that under the apache license , liability is not provided . added that security reports should be emailed . <section> users should now be aware of the type of testing <allcaps> osal </allcaps> or the cfs bundle undergoes . <section> references : <url> <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"add testing tools to the security policy <section> users are unaware of how cfs / osal is tested . by providing this information , transparency is provided to the community which promotes trust . <section> the security policy should inform users what tools are being used to test cfs / osal while being cautious of liability issues . to do so , we can state explicitly that our software does not provide liability under the apache license . the security policy should inform users that they may view the <allcaps> lgtm </allcaps> results . the policy would state that the alerts from <allcaps> lgtm </allcaps> may not be accurate , since they cannot be dismissed . add that security report should be emailed . <section> references : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"always initialize file descriptor in os_opencreate <section> numerous false alarms on possible uninitialized variable with os_opencreate use . <section> initialize the file descriptor to os_object_id_undefined : <url> <section> could initialize before passing in from each call , but this would provide consistency <section> static analysis warnings ( on use ) <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
c + + comment style and commented out code violations <section> c + + comment style and commented out code violates style guidelines <url> <section> clean up <section> none <section> alex campbell <allcaps> gsfc </allcaps>,2
"comment copy / paste errors in os - shared - idmap . h <section> various comments are not right : <url> <url> <url> <url> just examples , needs full scrub <section> prefer removal of the function name in the comment , and update the actual comment to match purpose . even better is switch to doxygen comments . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"<allcaps> osal </allcaps> should have a "" os_getversionstring ( ) "" function <section> currently the <allcaps> osal </allcaps> version is a string that is made available as a macro - <code> - which defined in <code> the problem with this is that because its a preprocessor macro - the replacement is done at the point the macro is _referenced_ and therefore the value ends up getting built into the binary code for whatever referenced this ( in <allcaps> cfe </allcaps> use case this is <code> ) this means if that code is later linked with a different / updated <allcaps> osal </allcaps> library ( but the <allcaps> cfe </allcaps> code using <allcaps> osal </allcaps> is <section> recompiled ) it will still report the original <allcaps> osal </allcaps> version string , which is wrong . <section> there should be a function call into <allcaps> osal </allcaps> to get the version string , rather than a macro in a header . therefore if / when re - linking without recompilation , it will report the correct value . <section> in summary - the <allcaps> osal </allcaps> version string should be stored within the <allcaps> osal </allcaps> library binary file , rather than stored within the <allcaps> cfe </allcaps> library binary file . this is confirmed via the "" strings "" tool that right now its in the wrong place : $ strings build / native / default_cpu1 / cfe - core / libcfe - core . a | grep osal cfs versions : cfe v6 . <number> - rc1 + dev348 , osal v5 . <number> - rc1 + dev262 , psp this shows that the actual string showing the <allcaps> osal </allcaps> version as reported by the cfe event is baked into the <allcaps> cfe </allcaps> library , not the <allcaps> osal </allcaps> library where it should be . <section> joseph hickey , vantage systems , inc .",2
"minor redundancy cleanup from static analysis warnings <section> two minor redundant logic / checks : <url> <url> no actual issues , just minor cleanup . <section> remove first , refactor second so the bound is just checked in one place <section> none <section> static analysis warnings <section> jacob hageman - <allcaps> nasa </allcaps>",2
"unreasonable size argument - os_createsocketname static analysis warning <section> static analysis warns when using sizeof ( sock - > stream_name ) in os_strnlen check and later math <code> passed to snprintf which out of context could then be a negative number ( but is not because os_socketaddrtostring_impl limits to os_max_api_name , so this is a false positive ) : <url> <section> truncating the port while fully adding the parent name or possibly even truncating both seems like it could be confusing . just truncate at the end . <section> could use os_max_api_name to limit len in first check , but seems like overkill since the size is os_max_path_len . <section> static analysis warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
local stub helper update to match macro behavior <section> custom call to <code> do not match standard macro behavior ( <allcaps> null </allcaps> terminate for functions not including va list ) . <section> match macro ( avoids static analysis warning ) <section> none <section> none <section> jacob hageman,0
"work # <number> , # <number> , # <number> , minor fixes to osal config guide <section> i noticed a few things missing from the documentation . there were also duplicate entries in one of the tables partially addresses # <number> , # <number> , # <number> <section> ( none ) <section> no impact to behavior <section> gentoo linux - amd64 <section> andrei tumbar ( <allcaps> nasa jpl </allcaps> ) <email> / <email>",1
"<allcaps> rtems </allcaps> build broken due to format mismatch ( again ) <section> somewhere a printf in "" queue_test . c "" got changed without the requisite cast , now generates a warning on <allcaps> rtems </allcaps> . <code> <section> build for <allcaps> rtems </allcaps> <number> with default config <section> should build successfully <section> <allcaps> rtems </allcaps> <number> . <number> target on ubuntu <number> build host . <section> need to always remember to always cast args in printf when using fixed - width types . this breaks very frequently . <section> joseph hickey , vantage systems , inc .",0
convert from strlen to strnlen where appropriate <section> per security standards strlen should be avoided if possible : <code> <section> replace with strnlen where possible . <section> none <section> security analysis warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"os_shelloutputtofile_impl in src / os / rtems / src / os - impl - shell . c issues <section> - does a strncpy to loadcmd , then a snprintf to localcmd - does not check for no truncation prior to sending so could do strange things - cmd could take up more than allotted space <section> remove the strncpy ? check the full command fit prior to execution ? <section> already can be optionally excluded from build . <repeated> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
improper null termination <section> a few cases of possible missing termination : <url> <url> <section> terminate . <section> none <section> secuity analysis warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
unreachable code in posix os_binsemcreate_impl <section> can not reach : <url> <section> refactor to eliminate dead code . <section> none <section> static analysis warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
network - api - test fails if osal_config_include_network is false <section> set all includes to false and network - api - test failed <section> should cleanly handle os_err_not_implemented <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"select - test fails if network is not included <section> select - test hung when run with all the include options being false , suspect it ' s due to osal_config_include_network <section> select test should handle either configuration ( check for os_err_not_implemented and skip tests that do not apply ) <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"os - impl - no - symtab . c out of date <section> conflicting types for the implementations <section> attempt to compile w / os - impl - no - symtab . c : osal_config_include_dynamic_loader <allcaps> false </allcaps> <section> should compile <section> many of the implementations do not match , sample : <code> <section> - hardware : cfs dev server - os : ubuntu <number> - versions cfs bundle <section> seen when adding a coverage test for this code (# <number> ) , # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"os - impl - no - sockets . c out of date <section> conflicting types for the implementations <section> attempt to compile w / os - impl - no - sockets . c : osal_config_include_network <allcaps> false </allcaps> <section> should compile <section> many of the implementations do not match , sample : <code> <section> - hardware : cfs dev server - os : ubuntu <number> - versions cfs bundle <section> seen when adding a coverage test for this code (# <number> ) <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"update coverage tests for vxworks at minimum to include reporting of all code that could be included in build <section> currently os - impl - bsd - socket . c can be included ( and is by default ) in the vxworks build : <url> but it ' s not included in coverage testing or reported as part of status <url> so although code coverage reports <percent> , we are <allcaps> not </allcaps> covering the possible <allcaps> fsw </allcaps> <percent> . <repeated> so it ' s a bit misleading . <section> all possible code should be reported for coverage . short term is just to add tests ( track by hand ) but eventually may benefit from a quick check that all the files included in the build are included in coverage analysis . <section> none <section> illuminated by investigation into # <number> , unreachable code wasn ' t being reported even though it was in the core build . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"unreachable code in os - impl - bsd - sockets . c : <section> 2 nd set of default cases are unreachable , since there ' s a return from a prior check : <url> specifically line <number> and <number> are legitimately dead code . <section> refactor to eliminate dead code <section> none <section> static analysis warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"return code not passed back in os_consoleapi_init - static analysis warning <section> os_consoleapi_init always returns success , but could error . inconsistently implemented ( if return_code is being recorded , return it . <repeated> if it is not needed why set it ? ) <section> either do not have a return value , or return the actual status . in test / coverage the expected return value should be confirmed . <section> none <section> static analysis warning since return_code is unused <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , resolve coercion alters value warnings <section> fix # <number> - fixed two locations with local return code defined as uint32 , should be int32 ( or eventually the status type ) <section> build and execute unit tests , passed <section> no functional change , just resolves warnings <section> - hardware : cfs dev server - os : ubuntu <number> - versions : cfs bundle main + this commit <section> static analysis warning <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"coercion alters value - static analysis warnings <section> a few locations where a type is incorrect ( just listing an example here , see pr for all fixes ) : <url> note returns status which is int32 , but return_code is uint32 . no real bugs identified yet , but cleaning up warnings makes it easier to spot real issues in the future . <section> fix types where needed . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"remove commented out code where it does not have a benefit <section> pages of commented out code warnings show up in static analysis . <section> general scrub and removal where it ' s not necessary . <section> none , any valuable comments will be retained <section> codeql warnings <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"refactor to avoid possible uninitialized local variables <section> <url> <url> <url> note the only one in non - test code is a false alarm so i am not marking as a bug and not critical , but easy to squash : <url> <section> fix . <section> none <section> codeql warnings <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"unterminated variadic call in ut tools , codeql warning <section> codeql warning on : <url> <url> <section> terminate list with <allcaps> null </allcaps> in macro <section> none <section> codeql warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
file created without restricting permissions in unit test tools <section> codelql security warnings against following code : <url> <url> <section> <url> <section> none <section> codeql analysis results <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"local variable hides global in queue - test . c , bin - sem - timeout - test . c , bin - sem - test . c <section> <url> <url> similar in bin - sem - timeout - test . c and bin - sem - test . c <section> preference is to implement a style such that it ' s easy to differentiate global vs local variables ( local lower case , global camel or similar ) or put global variables in a structure ( easy to init / clear ) . <section> none <section> codeql warning <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"osc_inum_to_ivec stub returning stack allocated memory <section> codeql warning on line <number> ( returning vectbl ) : <url> <section> make dummyvec static <section> remove , no longer used in <allcaps> osal </allcaps> testing but could be used by <allcaps> psp </allcaps> implementations . leaving in for now . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"add codeql analysis to workflow <section> codeql analysis not implemented in submodules <section> add so alerts are generated on pull requests to submodules <section> none <section> codeql is run at the bundle ( nasa / cfs ) level , but link to code in submodules does not work . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove deprecated code ( release candidate prep ) <section> <code> elements exist to help with upgrade / transition and reduce frequency of breakage . <section> remove deprecated code for major release . <section> could tag before removal for any user that would benefit from a "" gentle "" transition . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"apply style formatting ( release candidate prep ) <section> code has diverged from automated style . <section> apply automated style formatting . <section> none <section> suggest adding as a check in workflow until release . style has been very stable , should be manageable to enforce at least in the short term ( release candidate and release prep ) . could enforce just on rc branch ( es ) if there ' s an issue w / general enforcement . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> api </allcaps> ' s null pointer check in void methods <section> some pointers are used in methods that return void so the os_check_pointer function does not work in those methods since it returns an error code . there needs to be a way to check that pointers are valid inside void methods . <section> need to discuss the best solution <section> related to # <number> , that branch has this comment marking everywhere it comes up . /* <allcaps> todo </allcaps> : void pointer , <url> */ <section> alex campbell <allcaps> gsfc </allcaps>",2
"cfs fails to start if executed off of a large <allcaps> nfs </allcaps> home directory <section> if cfs is executed off of an <allcaps> nfs </allcaps> home directory , an output similar to the following is created : <code> - cfe_es_startup . scr cannot be found . <section> execute linux cfs binary off of an <allcaps> nfs </allcaps> home directory <section> cfs reads cfe_es_startup . scr successfully <section> <url> <section> linux ( rhel7 ) , <allcaps> osal </allcaps> <number> . <number> - rc1 + dev184 <section> john n pham , northrop grumman",3
"testreadwritelseek has off by one error <section> testreadwritelseek calls strlen but fails to account for null terminator , causing garbage characters to be written to test log <section> build and run file - api - test depending on the contents of memory , bogus characters may be written to build / [ arch ] / default_ [ cpu ] / testing / temporary / lasttest . log <section> valid characters in lasttest . log <section> should be <code> <url> <section> linux <section> john n pham , northrop grumman",0
"<allcaps> osal </allcaps> tests fails under various conditions <section> osal_loader_ut would fail while running on the target , since the utmod / * files are not installed along w / the test executable to build / exe / * in addition , under certain circumstances , the following tests may fail , i . e . if another user has run the tests and files are left in / dev / shm ( the tests do not clean up the files ) : file - api - test select - test <section> for the first case , run test out of build / exe / [ cpu ] for the second case , run file - api - test / select - test once , chown the files under / dev / shm / <allcaps> ram </allcaps> [ n ] to some other user , and run again . <section> tests should succeed <section> should have an install line for the test modules here : <url> should test if actual directory is writable , not just if the parent tmp directory is writable , <url> this alone would not solve the issue though , just punt it to the next available tmp directory . you ' d probably also want to use mkstemp ( ) or similar to generate a randomly named directory under the tmp folder . <section> - linux <section> john n pham , northrop grumman",0
"typo in osapi . h <section> typo in osapi . h causes compilation failure when included into a c + + file <section> include osapi . h into a c + + file <section> successful compilation <section> the following line is missing its corresponding <code> and fails to build under c + + : <url> appears to be introduced in <url> <section> linux <section> john n pham , northrop grumman",0
""" select test "" still hanging <section> select test can still sometimes get stuck and hang forever . # <number> fixed one cause but this is a different way it can happen . it ' s caused because it is waiting for a subtask to finish but if for whatever reason that subtask never even starts , then it gets stuck waiting forever <section> run the test over and over until you see it happen . <section> test should never under any circumstance hang forever . <section> if applicable , add references to the software . <section> the ci <section> alex campbell <allcaps> gsfc </allcaps>",0
"output format string as debug message in os_printf stub <section> os_printf stub is silent , more helpful when debugging tests to see at minimum the format string <section> output the format string as a debug messae similar to cfe_evs_sendevent <section> could put in a hook , but this is general and useful enough to add <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"implement a security policy <section> create a security policy for users on how to report security vulnerabilities . <section> the security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns . <section> additional sections that may be included : - what to expect security - wise such as what type of testing is done - address privacy concerns - supported versions - license - known vulnerabilities references to public security policies : <url> <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"scrub <allcaps> api </allcaps> ' s for null pointer checks <section> all pointers should be checked for <allcaps> null </allcaps> prior to accessing , a few cases where this was observed have been fixed but need to do a complete scrub . <section> scrub and add any missing null pointer checks <section> none <section> use the new macros . <repeated> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"re - add static code analysis for pull requests <section> the travis ci runner ran cppcheck which we do not have anymore <section> submit pull request , notice that travis ci does not run anymore . <section> a success or failure report of a cppcheck run . <section> check from travis . yml <code> <section> n / a <section> part of ongoing travisci to github actions migration",0
"<allcaps> rtems </allcaps> <number> needs size_t type to build <section> there are a few methods that will not build in rtmes <number> because they use uint32 instead of size_t relevant files and line numbers : bsp_console . c <number> os - impl - network . c <number> os - impl - queues . c <number> , <number> os - impl - tasks . c <number> <section> build for <allcaps> rtems </allcaps> <number> per instructions and default config . build fails . <section> build should succeed . <section> ubuntu <number> as build host for <allcaps> rtems </allcaps> <number> . <number> <section> alex campbell <allcaps> gsfc </allcaps>",0
resolve cppcheck redundantassignment failure <section> running - <code> results in - <code> <section> resolve <section> none <section> travis ci no longer running on main repo <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
add actions in workflow to replace former ci implementation <section> ci no longer running for pr ' s in nasa repo <section> implement ci as github actions <section> none <section> similar to transition in nasa / cfs <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
users guide generation warning <section> generated from user ' s guide action from cfs <code> <section> resolve warnings <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"update ut_setdefaultreturnvalue comment while i agree with the new function name , the comments are duplicated from the ( now deprecated ) <code> , i suggest a re - write of the comments for this important function . <url>",1
"<number> different ways of identifying file systems <section> unlike other <allcaps> osal </allcaps> resources , the file system related calls ( os_mount / unmount / mkfs / rmfs / initfs etc ) identify the target by string rather than as a numeric id . aside from being inconsistent , this is also ambiguous and confusing because the are actually <number> different possible strings use here : <number> . device name ( e . g . "" / ramdev0 "" ) <number> . volume name ( e . g . "" <allcaps> ram </allcaps> "" ) <number> . system mount point ( e . g . "" / dev / shm / osal : <allcaps> ram </allcaps> "" ) <number> . virtual mount point ( e . g . "" / ram "" ) furthermore not all functions use the same name . when implementing os_filesysstatvolume i noticed that the old os_fs ( bytes | blocks ) free ( ) and os_chkfs use virtual mount point ( <number> ) , while the others use device name ( <number> ) . the os_fs_getphysdrivename ( ) actually returns the system mount point ( <number> ) not the actual device ( <number> ) that other calls require . <section> ideally , change these apis to work with ids rather than names because ids are not ambiguous . one can also find / lookup an id based on any of the names ( lookup functions do not all currently exist but easy to add ) . <section> if <allcaps> api </allcaps> changes are not possible at this stage , then then we should at least be consistent and choose one name to use . probably the device name ( <number> ) should be the one , as it seems the one used by most calls currently . <section> the fact that <code> uses a virtual mount point should probably be considered a bug , as it implies the file system is already mounted at the time the call is done . most os ' s do not permit a file system check of a mounted device . <section> joseph hickey , vantage systems , inc .",2
"deprecate os_fsblocksfree and os_fsbytesfree <section> as noted in # <number> these functions return the value directly , which does double duty as an error code and therefore is limited to being <code> - but this type is not big enough for large file systems . <section> deprecate these functions in favor of <code> added in pr # <number> , which returns the information as a os_statvfs_t object containing all relevant information . <section> references to these functions within <allcaps> osal </allcaps> tests need to be fixed / replaced , as well as references in <allcaps> cfe </allcaps> / apps . this is a follow - on / completion of the fix for # <number> / pr # <number> . deprecation has to be done separately because the new function needs to exist before the refs can be changed . <section> joseph hickey , vantage systems . inc .",2
"fix # <number> , correct utassert_zero description typo <section> fix # <number> - typo fix <section> ci - comment change only <section> none <section> n / a <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"more test failures related to "" chmod "" implementation <section> the current <code> on <allcaps> posix </allcaps> has some issues / limitations : <number> . a while back this was changed from using the filename based calls to using a file descriptor , which "" protects "" against a theoretical issue where the file may get renamed while the operation is in progress . however this introduced a potential for a file descriptor leak - - if the <code> call fails , the <code> is returned , but the file descriptor is left open . <number> . any failure is reported as the generic <code> . <repeated> this should do a better job of translating the <code> to a more specific error code . in particular , not all file systems support unix - style file permissions - such as the very common fat32 / <allcaps> dosfs </allcaps> - and in this case the <code> call is likely to return - <number> with <code> set to something like <code> or <code> . <number> . also a file system can be mounted read only , which also prevents chmod ( ) from working . the main issue of <number> + <number> above is that the generic <code> code causes the chmod unit test to fail . <section> run the chmod test on vxworks using a <allcaps> dosfs </allcaps> mounted filesystem ( e . g . cf : <number> on the mcp750 test platform ) . <section> the chmod test cases should be skipped without failing the overall test in cases where the mounted file system does not support / allow permission to be changed . <section> vxworks <number> on mcp750 <section> so this is just a matter of translating the <code> values for these conditions into <code> instead of <code> , because the test is already implemented to check for and skip the rest of the test when it gets this return code . <section> joseph hickey , vantage systems , inc .",0
"race condition in "" select "" test <section> running the <allcaps> osal </allcaps> select test , i ran into a deadlock situation where the "" multi "" test got stuck and never finished . <section> hit or miss . <repeated> run test repeatedly on a system with other loads ( e . g . parallel builds ) <section> test should complete <section> checking the test status / backtrace it looks like two tasks ( main + "" server_fn "" ) are waiting on the binary sem . in particular the server_fn is stuck here : <url> while the main task is waiting in the teardown code ( the <code> has completed , and it has invoked <code> which in turn invokes <code> here ) : <url> <section> ubuntu <number> <section> this is likely related to the use of <code> . we should probably deprecate this function , as i cannot see how this can ever be used safely without it being a race condition . vxworks offers it which ( i think ) is why <allcaps> osal </allcaps> also offers it , but its a fundamentally broken concept . i can confirm that looking at the traceback in gdb , the flush_count is indeed already <number> - meaning the flush had already happened by the time the server_fn entered the bin sem take routine . <section> joseph hickey , vantage systems , inc .",0
"tests that use network stack do not run on <allcaps> rtems </allcaps> <section> the <allcaps> rtems </allcaps> network stack needs to be explicitly initialized in a platform - specific manner . however , the barebone / minimal <allcaps> bsp </allcaps> that runs the unit tests does not do this initialization . therefore when running the network tests , it just gives an immediate error : <code> <section> not clear at this point . the network init is quite board specific ( refers to a specific nic driver ) so probably does not fit as part of the <allcaps> osal bsp </allcaps> . suggest just documenting this limitation . <section> as the network tests only use the loopback address ( <number> . <number> ) it might be possible to bring up the <allcaps> rtems </allcaps> network stack with only this interface and no "" real "" nic . that might be a possibility to get these tests to run without making the <allcaps> bsp </allcaps> too complicated . <section> joseph hickey , vantage systems , inc .",2
"unlock globals during create / delete ops <section> for a number of resource create / delete operations , they may take some non - deterministic amount of time to execute in the system , and may require obtaining some type of mutex in the underlying c library too ( e . g . if something invokes malloc ) . this is especially true of creating and deleting tasks , which may need to malloc ( ) memory for the stack , and need to create a new task resource in the kernel . because of this , <allcaps> osal </allcaps> should not hold its own global table mutex while the whole operation takes place , as this will also prevent _other_ unrelated ops from completing . <section> these operations should reserve an entry in the table but mark it as reserved , not with a normal id ( so distinct from a normal entry ) . it can then unlock the global table and complete the non - deterministic parts of the operation , then re - lock when complete . <section> this is required for # <number> , already have it implemented but felt it was worth splitting into a separate issue / commit for tracking purposes . <section> joseph hickey , vantage systems , inc .",2
"replace remaining loops through all objects with iterators <section> previous changes introduced the concept of an iterator in the <allcaps> osal </allcaps> shared layer to iterate across all objects of a particular type . however there remains a few cases where code is still doing a "" for "" loop through each index . <section> for consistency of operation , these should be converted to iterators . <section> importantly the iterator handles locking of the global table . using the iterator ensures that this is done consistently , and provides the appropriate token object for any calls to other functions . <section> joseph hickey , vantage systems , inc .",2
"clean up inconsistent implementation of os_lock_global_impl / os_unlock_global_impl <section> only the "" shared "" layer invokes these impl ( low level ) apis - they are not invoked directly by applications , and the shared layer has already done its error checking . therefore they should never be invoked with a bad object type , and there is no recourse if the implementation fails . <section> - make sure "" shared "" layer is doing the appropriate scrubbing of object type before calling "" impl "" layer . - remove duplicate / unnecessary error checking in "" impl "" layer that was already performed at "" shared "" layer . - make "" impl "" functions return <code> - these should never fail , and there is no feasible recovery if they do . the only way they can fail is if they were not initialized properly . the os_debug message that is printed is the only recourse . <section> error checking should be consolidated at "" shared "" layer , layer whenever possible , as this keeps "" impl "" layer simpler , and also ensures that the same error checking is done on all platforms - so all platforms work the same . right now the error checking in these functions is not quite the same between <allcaps> posix </allcaps> / vxworks / <allcaps> rtems </allcaps> . <section> joseph hickey , vantage systems , inc .",2
"build broken on <allcaps> rtems </allcaps> <number> <section> a recent change has broken the build for <allcaps> rtems </allcaps> ( again ) . these are printf format warnings . <code> appears to be added by pr # <number> . <repeated> <section> build for <allcaps> rtems </allcaps> <number> per instructions and default config . build fails . <section> build should succeed . <section> ubuntu <number> as build host for <allcaps> rtems </allcaps> <number> . <number> / pc686 <allcaps> bsp </allcaps> . <section> joseph hickey , vantage systems , inc .",0
"build broken for vxworks on <allcaps> rhel </allcaps> <number> <section> the newest <allcaps> rhel </allcaps> <number> comes by default with cmake version <number> . <number> in the official os repos . however the "" version_greater_equal "" comparison was added in <number> . thus the build became broken on this platform after merging # <number> . <section> attempt to build for vxworks using <allcaps> rhel </allcaps> <number> . x as the host platform . make file generation fails immediately with : <code> <section> build should succeed . <section> <url> <section> red hat enterprise linux workstation release <number> ( maipo ) <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , create <allcaps> osal </allcaps> security policy markdown <section> fixes # <number> created a draft of a security policy markdown file for <allcaps> osal </allcaps> . the purpose of a security policy is to inform users on how to submit bugs or vulnerabilities . it is ideal to include a section for supported versions . <section> optional sections that may be included : - what to expect security - wise such as what type of testing is done - address privacy concerns - supported versions - license - known vulnerabilities references to public security policies : <url> <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"<allcaps> osal </allcaps> should separate task allocation from task activation <section> currently <code> both allocates and activates a task . however in embedded software it is often useful to pre - allocate a task - which creates the stack and id and anything else that might fail - but hold it stopped in the kernel scheduler while other initialization is completed . when the app is ready , it makes a separate call to activate the previously - allocated task . the benefit is that the activation step does not do any new allocation so it is very unlikely to fail ( simplifying error clean up ) , as well as being fast to execute as it just unblocks the task . most <allcaps> rtos </allcaps> ' s actually do it this way internally , where vxworks uses <code> followed by <code> , and <allcaps> rtems </allcaps> uses <code> followed by <code> . notably <allcaps> posix </allcaps> / pthreads does not separate these two actions , but easy to mimic / replicate via the new os_waitforstatechange ( ) function . <section> add two new functions : - <code> , similar to os_taskcreate but without starting the task - <code> , which starts the task the existing <code> becomes just a combination of the two . which it really as it is today anyway , but the two are coupled down in the <code> layer and therefore cannot be invoked separately in <allcaps> osal </allcaps> user applications . this would bring it up one layer and ( optionally ) allow the app developer to leverage it , if they want . <section> the "" timebase "" objects on vxworks also would benefit from having a separate allocate / start . <section> joseph hickey , vantage systems , inc .",2
"incorrect assertions in network - api - test <section> the test is not correctly checking the return value in a few places . for example : <url> <url> <section> make the subject code return something other than os_success or os_err_not_implemented . assert statement will still be true . <section> probably should be <code> <section> n / a - inspection <section> joseph hickey , vantage systems , inc .",0
"combine initialized and shutdown flags into one <section> the <allcaps> osal </allcaps> global state structure has two flags , one for "" initialized "" ( set during os_api_init ) and one for shutdown ( set during os_applicationshutdown ) . although similar in purpose , they are defined and work differently . <section> should combine these into just one state variable , which should be <number> prior to initialization ( i . e . such that the application loader provided by the os will zero it before <allcaps> osal </allcaps> loads ) , then set to a nonzero value for normal runtime , and another special nonzero value for shutdown . <section> just a suggestion for cleaning up / simplifying what is already there . <repeated> structure defined here : <url> using a full <number> bit value with all bits - even though there are only a few states - provides protection in case of a random bit flip . at least in the case of an application shutdown , the entire system operation should not be dependent on a single bit in memory . this is why the current "" shutdown flag "" is not just a simple <number> / <number> . so this should be preserved , but it should be trivial to combine this with the "" initialized "" field . <section> joseph hickey , vantage systems , inc .",2
"implement macro to facilitate argument checking <section> <allcaps> osal </allcaps> and <allcaps> cfe </allcaps> contain many argument checks at the beginning of functions . these would benefit from a macro to keep them consistent and readable in the application code , as well as offer alternative implementations / options for controlling how these are handled on an application - wide basis . <section> provide assert - style macros in <allcaps> osal </allcaps> that can facilitate argument checking , bug checking , and error handling . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , use errno in clock_getres error reporting <section> fix # <number> - now uses errno instead of status return from clock_getres with strerror reporting <section> built and ran unit tests on linux , which does not mean much since it does not include this code in functional or coverage testing . requesting retest from <user> - nasa <section> fixed error message <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"<allcaps> osal </allcaps> not reporting correct error string if clock_getres ( ) call in os_posix_timebaseapi_impl_init fails <url> from clock_getres man pages : > clock_gettime ( ) , clock_settime ( ) and clock_getres ( ) return <number> for success , or - <number> for failure ( in which case errno is set appropriately ) . the return value of <code> is just <number> or - <number> . if it returns - <number> in the event of a failure , it sets <code> , so the <code> line should use <code> , not <code> , otherwise it always reports : <code>",0
"file chmod test failing on <allcaps> rtems </allcaps> <section> when running unit tests against the latest baseline , there is a new failure on <allcaps> rtems </allcaps> : <code> <section> build with unit tests and execute on <allcaps> rtems </allcaps> <number> + pc686 + <allcaps> qemu </allcaps> as documented in <allcaps> readme </allcaps> . the chmod test fails . <section> test should pass . <section> <allcaps> rtems </allcaps> <number> . <number> , pc686 <allcaps> bsp </allcaps> , running in <allcaps> qemu </allcaps> <section> appears to be introduced in pr # <number> reinforces need ( again ) for ci script that runs the <allcaps> rtems </allcaps> build . <section> joseph hickey , vantage systems , inc .",0
"implement better wait for status change in vxworks / <allcaps> rtems </allcaps> <section> as a follow on to previous pr # <number> , this implements a new "" impl "" function which waits for a global table change to complete using an os - specific primitive . but only <allcaps> posix </allcaps> / pthreads was initially updated to use a proper wait primitive for this operation . for vxworks and <allcaps> rtems </allcaps> , these continue to use a simple unlock - task delay - re - lock and poll for the change . this works but can potentially introduce noticable extra / unnecessary delay . in particular , during task startup the parent task is using the accessing record at the same time the child starts up and also needs to access the same record . therefore the child task will hit this wait condition . on <allcaps> posix </allcaps> the child resumes immediately once the parent task has completed its use of the record . but currently for vxworks and <allcaps> rtems </allcaps> they must wait for the task delay to expire . <section> need to investigate / consider the various sync primitives that the os provides , and use something more appropriate that will not add extra unnecessary delay or polling . <section> keep polling . it is not "" broken "" in a strict sense - the contention should be resolved and the right thing will happen after the delay expires . it ' s just not what the user might expect ( that is , there might be a millisecond or two delay between os_taskcreate returning and the user task actually running ) . <section> <allcaps> rtems </allcaps> barrier might be an option . however i do not see any way to sync a barrier with a condition ( like a <allcaps> posix </allcaps> condition variable ) - so these leave open the possibility that the other task finishes its operation _just before_ the current task is about to wait - meaning it will end up waiting for an event that has already happened . but so long as a timeout is _also_ used , that means it will just fall back to the timeout - so if this happens its not worse than what is implemented now . originally discussed in review of # <number> at <allcaps> ccb </allcaps> <number> - <number> - <number> <section> joseph hickey , vantage systems , inc .",2
convert doc / <allcaps> osal </allcaps> - configuration - guide . doc to markdown <section> doc and <allcaps> pdf </allcaps> not github friendly <section> convert to markdown and remove doc / pdf <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"implement better way to wait for status change <section> if the object exists but is not in the correct state to access it , then the <code> will simply loop / retry the operation using <code> . this is not ideal and likely creates more delay than what is really needed . <url> <section> should use a proper primitive to wait until the underlying state changes and wake up the task immediately . <section> continue using polling w / task delays ( still an option for os types which do not have the proper primitive ) <section> joseph hickey , vantage systems , inc .",2
"<allcaps> posix </allcaps> unnecessarily setting signal masks in global lock <section> as part of the global lock the <allcaps> posix </allcaps> implementation is setting the signal mask of the parent process . however , the signal mask which is being set is the same mask that was already set in the parent process during the initialization . <section> n / a <section> the signal mask is already configured during initialization , so it should not be re - configured when locking / unlocking the global object tables . <section> locking : <url> unlocking : <url> <section> ubuntu <number> <section> i have investigated and i cannot find any justification for this anymore . in older versions of <allcaps> osal </allcaps> the signal ( s ) were not blocked and therefore e . g . <allcaps> sigint </allcaps> , <allcaps> sigalrm </allcaps> etc could be handled by any thread . in this design it was likely important to make sure that a timer / interrupt does not get processed while internal <allcaps> osal </allcaps> ops are being performed . but in the current <allcaps> osal </allcaps> design all of these signals are blocked initially in the main task - which all normal tasks then inherit . so this is only resetting the same mask that was already configured . <section> joseph hickey , vantage systems , inc .",2
"add a stand - alone example build with osal ( modernize src / examples / tasking - example ? ) <section> difficult for new user to set up a new trivial build using just <allcaps> osal </allcaps> . <section> helpful to include a simple cmake setup and a bare - bones c file to show simplest version of <allcaps> osal </allcaps> use . there ' s src / examples , but it ' s not set up to build / run out of the box . also update the instructions in the users guide . <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> - stakeholder request",2
"osal core test is not a good example of how to write tasks <section> the <code> refers to task functions that are actually defined ( not just declared ) in <code> furthermore , these tasks just implement a tight loop : <url> multiple problems : <number> . against coding standards to implement code in a header . <number> . same function is defined <number> times . <number> . the task has no blocking statement at all , so it spins using <percent> cpu after it is started . <number> . on some operating systems ( e . g . <allcaps> posix </allcaps> ) , unless async task cancellation is enabled this also means the task also cannot be deleted , because it will never execute a cancellation point . although the <code> program passes and attempts to delete these tasks , in reality they keep running on <allcaps> posix </allcaps> and do not actually exit . <section> view in a debugger after creating + deleting these tasks - the threads are still there . <allcaps> cpu </allcaps> usage is also very high ( e . g . <percent> ) for the remainder of the test because these tasks are spinning and do not exit . <section> there is no need to redefine the same function . recommend to use the <code> function ( which already exists ) for all of these tasks . this function also uses <code> so it does not consume max <allcaps> cpu </allcaps> and also this serves as a cancellation point thus allowing the task to be deleted normally . <section> ubuntu <number> <section> this becomes a bigger issue when # <number> is done , as the tasks effectively are un - deletable . <section> joseph hickey , vantage systems , inc .",0
"add check of sem_wait / rtems_semaphore_obtain in console loop <section> console loop could spin if the semaphore returns error . <section> check for real errors ( not just interrupted ) , and exit loop if needed . <section> none . <section> mentioned in # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , exit console loop on shutdown <section> fix # <number> replaced condition on forever loops to end on shutdown . <section> built and ran unit tests for posix , built on vxworks ( planning to build on rtems using the latest setup instructions . <repeated> ) <section> - loop will exit on shutdown <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this change <section> what about also checking for a semaphore error on posix / rtems ( or at least non - interrupt ) ? would make it consistent with vxworks . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"incorrect parameter type in timebase sync callback <section> timebase sync callback prototype is currently defined as : typedef uint32 ( * os_timersync_t ) ( osal_index_t timer_id ) ; /* *< <user> timer sync */ but indices ( table position ) is an internal <allcaps> osal </allcaps> value that should not be used externally from <allcaps> osal </allcaps> . more importantly , it is easy to alias , and cannot be differentiated if an object is deleted and then created again . <section> use the full id value , not the index . so the prototype would be : typedef uint32 ( * os_timersync_t ) ( osal_id_t timer_id ) ; /* *< <user> timer sync */ <section> leave as is . <section> i was going to roll this into a larger change , but figured this technically qualifies as an "" <allcaps> api </allcaps> change "" so writing it as a separate issue for specific awareness . however , nothing outside of <allcaps> osal </allcaps> itself ( and the included tests ) actually implements a sync callback . psps could , but none currently do , so this really should not have any current impact to users . but if users do start using this option , better to have the full id value than just the index . <section> joseph hickey , vantage systems , inc .",0
"<allcaps> osal </allcaps> does not build cleanly with conversion warnings enabled <section> <allcaps> osal </allcaps> does not build cleanly if <code> warnings are enabled . in the <allcaps> cfe </allcaps> builds this warning is neither enabled nor disabled so it is left with the compiler default . most gcc cross toolchains currently used disable it by default , but with the toolchain provided in vxworks <number> this is enabled by default , so this difference becomes apparent . <section> first needs <allcaps> ccb </allcaps> discussion as to whether we want to be "" conversion clean "" . downside is that it requires a bunch of extra type casting for things that would normally work implicitly without issue - which makes code ugly - and the casts can become outtdated / stale if the underlying type changes and that does not always generate a compiler message but can cause problems due to multiple conversions and / or changing for equality of wrong types . so unnecessary extra type casts can be a real risk to behavior , not just readability . upside is that every now and then it will identify a truncation or sign conversion issue that might be a real problem . once decided one way or the other , we should explicitly set the <code> or <code> setting in <allcaps> cfe </allcaps> so that it is consistent and not dependent on compiler default . <section> originally identified in # <number> - split to separate issue ( not limited to just vxworks <number> - that ' s just what brought it up ) <section> joseph hickey , vantage systems , inc .",3
"consider limiting size of read / write / seek to int32_max <section> the <allcaps> osal api </allcaps> returns results as <code> , and this includes the size of data read / written from operations like os_read and os_write . however it is possible to read / write a larger buffer than what can be expressed as <code> . if this overflow happens then the result is likely to become negative and be interpreted as an error . <section> <code> and <code> should probably cap the amount they will transfer in a single call to be <code> . this should in turn limit the size of the result that would need to be returned to the caller . os_lseek ( ) returns the file offset , so this probably does not work with files bigger than 2 gb . <section> use a larger data type e . g . <code> as return , but this is potentially slow on <number> bit cpus where <number> bit values may need to be emulated by the c library . <section> if <code> ( buffer size parameter ) is <number> bits and the return value is <number> bits ( usable ) then there is a large set of potential values which are not representable . however - this problem has existed even when the input size was <code> rather than <code> . <repeated> because anything bigger than <code> is a problem - so this is not new , its just potentially more of a concern with large files . / file systems and <number> bit platforms . read / write actions should always be allowed ( per <allcaps> api </allcaps> ) to transfer fewer bytes than the request was for - app should retry with the remainder . so capping at <code> should not be a problem - no app should expect an extremely large transfer like that to happen in one go . <section> joseph hickey , vantage systems , inc .",0
"vxworks build failure in os_filechmod_impl <section> failure occurs on a vxworks <number> build : <code> looks like this was recently introduced in the <number> - <number> - <number> ic in via # <number> . <repeated> <section> build for mcp750 / vxworks <number> platform using standard method and default config . <section> build succeeds . <section> looks like vxworks <number> does not implement <code> per <allcaps> posix </allcaps> specs - it only has the <number> argument form ( with mode ) and not the <number> argument form . <section> vxworks <number> <section> hopefully we can get a ci that includes vxworks . <repeated> <section> joseph hickey , vantage systems , inc .",0
"vxworks stack address calculation should use unsigned type <section> the vxworks task create implementation calculates a stack base address which involves adjustment such as rounding and accounting for whether the stack grows up or down ( per vxworks requirements of <code> . this does the calculation as integers , and currently uses the <code> type . the risk is that if the address happens to lie in the negative range of this type , then the rounding / adjustments may need to go in the opposite direction . <section> the address calculations should use <code> instead of <code> just to ensure that all rounding and base address adjustments behave the same way in the event that the addresses lie in the upper half of memory ( i . e . start with a <number> bit ) which would put it in the negative range of a <code> type . <section> this is really just a suspicion of a possible issue - can not really confirm / test because we do not have direct control of where these stack buffers get allocated in memory . but either way using <code> would be more correct anyway - and would simply avoid the possibility that the operation works differently depending on its value . it probably used <code> in the first place only because that is what the arguments to <code> are declared as . <section> joseph hickey , vantage systems , inc .",0
"os_chmod is requiring read access <section> if you do not have read access to a file then os_chmod will not be able to change it . this is most likely caused by chmod opening the file as a way to avoid filename race potential , see the code snip . <section> <number> ) set the file access to write only . <number> ) try to change the access using os_chmod <number> ) will get an os_error <section> you should be able to change the permissions of a file without read access . <section> <url> <section> ubuntu <number> <section> alex campbell <allcaps> gsfc </allcaps>",0
"incorrect call to os_objectidcompose_impl in os_timerdelete <section> <allcaps> osal </allcaps> has an incorrect setting of <code> when deleting timers . <url> the second argument to <code> is a serial number , not a table index . these are only the same value until table entries start to be re - used , after this they become different , and this will start to fail . this should really not be using <code> at all here . <section> - create and delete several timebases - at least <code> - such that table entries start to be re - used . - create another valid timebase for the test ( do not delete ) . - create at least two timers based on this timebase - delete one of the timers . at this point the id in the timebase callback ring ( <code> member ) may refer to an invalid entry - a timebase id which does not exist . <section> should look up the <code> from the actual table entry instead - do not re - compose the id , because <code> is a table index , not a serial number . <section> ubuntu <number> <section> it is only possible to trigger this after a rather extensive sequence of creating and deleting these resources . so this is probably unlikely to ever occur in a real system where timers are typically created and run forever . should still be fixed though . this was initially discovered by enforcing type - safety in the <code> and <code> - during this scrub it revealed that this was passing an <code> to a function which is supposed to accept a serial number . so type safety = good . <section> joseph hickey , vantage systems , inc .",0
"scrub <allcaps> osal </allcaps> for direct array references <section> in <allcaps> osal </allcaps> there are quite a few places with direct array references to an index , such as : <url> in many functions this is repeated many times over ( i . e . makes several accesses into the table entry for the given item ) . <section> this should be separated to use local pointer ( s ) to the entry / entries in use . first do a lookup , e . g . : stream = osal_table_entry ( os_stream_table , local_id ) ; then use <code> to refer to that entry from there on , e . g . : if ( stream - > socket_type ! = os_sockettype_stream ) <section> this makes the code a lot more readable and more maintainable . the <allcaps> cfe </allcaps> was already scrubbed for this , so it makes sense for <allcaps> osal </allcaps> to also do the same . <section> joseph hickey , vantage systems , inc .",2
"some "" close "" operations not doing standard delete procedure <section> all close / delete ops should go through <code> so things are cleaned up consistently . but there remain a couple places where this is not done - <code> and its variants e . g . <code> and <code> <section> this is apparent if there is some action in the <allcaps> psp </allcaps> handler for deallocation . it will not get invoked for these close ops because it does not go through the common delete path . <section> should go through common path . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",0
"os_taskexit ( ) on vxworks causes task table owner to be the deleted task <section> os_taskexit ( ) calls os_objectidfinalizedelete ( ) . this function sets the task ' s record - > active_id to <number> , which is also being used as the task id on vxworks . objectidfinalizedelete ( ) subsequently calls os_unlock_global , which errors out and does not clear the owner , as the task id is now zeroed out and does not match the owner of the table . this does not occur on linux <section> steps to reproduce the behavior : on vxworks , call cfe_es_exitchildtask with osal_config_debug_printf enabled <section> error message should not be printed out <section> <url> <url> <url> <url> <section> - sp0 - os : vxworks <number> - versions : <allcaps> cfe </allcaps> <number> , <allcaps> osal </allcaps> <number> . <number> - rc1 + dev16 , <section> see attached screenshots for stack traces image <img> image <img> <section> john n . pham , northrop grumman",0
remove os_pack define <section> should not use non - standard packing options . really should scrub the list . <url> <section> remove / scrub <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"os_taskdelete is not synchronous on <allcaps> posix </allcaps> <section> the current <allcaps> posix </allcaps> implementation of <code> uses <code> . this is a cancellation _request_ but the target thread continues to run until it hits a cancellation point . as a result , when the os_taskdelete ( ) function returns , it is likely that the target thread is actually still running for a short period of time . but if the intent is to actually unload the module , as is done in the <allcaps> cfe </allcaps> "" restart "" and "" reload "" commands , it is critical to ensure that all uses / references to code within the to - be - unloaded module have actually been released . so it is important to make sure that the cancellation request has been executed and the task is actually deleted before proceeding to the <code> call . currently with the <allcaps> posix </allcaps> implementation , there is no way to guarantee this , so this becomes a race condition during restart / reload operations on this platform . <section> not directly reproducible in current code - this race condition is currently masked by the fact that modules are loaded with <code> , so if the runtime loader still sees the module being referenced using its internal refcount , it does not actually unload it when <code> is called . so in this case the task finishes up normally and there is no apparent problem . but when this is fixed - such as when using <code> as suggested in # <number> - then this race condition becomes a problem , and as a result a <allcaps> cfe </allcaps> reload or restart command sometimes triggers a segmentation fault in the event that <code> gets called before the task has fully been deleted . <section> <code> should ensure that the task has been fully removed , not just pending removal , before it returns to the caller . suggestion to achieve this : - keep threads in the attached ( joinable ) state by default - use <code> to wait for the cancelled task to actually exit . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",0
"add os_moduleload flags to indicate symbol table visibility <section> on <allcaps> posix </allcaps> platforms with a real dynamic loader / shared object implementation , using the <code> flag to dlopen ( ) can make it tricky or impossible to unload modules later . this flag makes the symbols globally available to satisfy other relocations , and unloading of the module will be deferred or prevented entirely as long as the runtime loader thinks a symbol is being used . this ultimately causes a requirement failure on this platform as documented in nasa / cfe # <number> - because the module is not _actually_ unloaded when <code> is called , and even though the new / replacement app module was loaded , <allcaps> cfe </allcaps> will end up restarting the original code , not the new ( reloaded ) code . loading a module with <code> instead seems to prevent this issue - because the symbols are simply not made available for other modules / entities to use . this ensures that when the time comes to unload the module , nothing else is referencing the module , and <code> actually does unload it . but this <allcaps> local </allcaps> flag cannot be used for all modules , because libraries do need their symbols added to the global table , or else it will not be possible to load apps that depend on those libraries <section> add a "" flags "" parameter onto the existing <code> <allcaps> api </allcaps> , so it becomes : int32 os_moduleload ( osal_id_t * module_id , const char * module_name , const char * filename , uint32 flags ) the "" flags "" parameter can be used to indicate the symbol visibility . a flag value of <number> should map to "" global "" - which is what the current implementation does - to make an easy transition for existing code . in order to be able to look up an entry point in a module loaded with this option , this necessitates another new <allcaps> api </allcaps> : int32 os_modulesymbollookup ( osal_id_t module_id , cpuaddr * symboladdress , const char * symbolname ) which is the same as <code> but accepts a module id value and operates on that module , rather than on the global scope . this should be the id that was returned from the os_moduleload call . for <allcaps> rtos </allcaps> implementations that do not have this symbol visibility option they can ignore the flag , continue to map everything into the global symbol table as they currently do , and <code> and <code> become equivalent . <section> note that most all other <allcaps> osal </allcaps> "" create "" functions ( tasks , queues , semaphores , etc ) already have a "" flags "" parameter on the <allcaps> api </allcaps> , reserved for future use . unfortunately , this flags parameter was not part of the original <code> <allcaps> api </allcaps> definition , making it an exception to the pattern . so by adding this , although it is a breaking change , it makes it more consistent with the rest of the apis . the alternative would be to define a separate <code> <allcaps> api </allcaps> , but this pattern does not exist anywhere else , so it would continue to be an exception with respect to the overall <allcaps> osal api </allcaps> . <section> joseph hickey , vantage systems , inc .",2
"<allcaps> osal </allcaps> configuration guide - osal_includedir not found <section> the <allcaps> osal </allcaps> configuration guide mentions osal_includedir in section <number> . <number> , variables that must be specified . this <allcaps> cmake </allcaps> variable is not found in any files nor reported issue . <section> update the <allcaps> osal </allcaps> configuration guide if osal_includedir is no longer in use . <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"os_moduleunload ( ) for statically loaded module may segfault <section> calling <code> on a statically loaded module will still attempt to call <code> but the handle is <allcaps> null </allcaps> because no module was loaded . at least on linux / glibc this actually causes a segmentation fault . <section> using the <allcaps> cfe </allcaps> framework switch any app ( e . g . sample_app ) from a regular dynamic app to a static app . build and run <allcaps> cfe </allcaps> , then shutdown with <allcaps> ctrl </allcaps> + c . the shutdown ends up calling <code> which in turn will trigger this bug - one gets a segfault instead of a clean exit . <section> should shutdown cleanly . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",0
"more consistent types for <allcaps> osal </allcaps> resources <section> <allcaps> cfe </allcaps> issue nasa / cfe # <number> describes mismatched types used across <allcaps> cfe </allcaps> for certain items , such as stack size and priority of tasks . to help resolve this <allcaps> osal </allcaps> should provide a typedef for the "" right "" types to use when interfacing with <allcaps> osal </allcaps> . <section> should add at least : - <code> - type used for <allcaps> osal </allcaps> task priority - <code> - type used for <allcaps> osal </allcaps> stack pointer <section> this will identify the correct type to use , instead of the mishmash currently seen in <allcaps> cfe </allcaps> as described in nasa / cfe # <number> . <section> joseph hickey , vantage systems , inc .",2
resolve sem_value_max not defined test issue <section> was a <allcaps> fixme </allcaps> : <url> <section> address / disposition as an issue . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
file / socket can be closed while actively inside a os_selectmultiple ( ) call in another thread <section> converting <allcaps> fixme </allcaps> into an issue : <url> <section> address / disposition as an issue . <section> none <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"fix # <number> , update utassert macros with dynamic string formatting <section> changed all utassert macros to take variable string arguments , feature request # <number> <section> steps taken to test the contribution , cfs / main branch commit 2 0 0 9 7 ef64e455ace25a1535ea43090a739eb7c0c : <url> <number> . make clean <number> . make enable_unit_tests = <allcaps> true simulation </allcaps> = native <number> . make test <number> . all cfe unit tests pass <section> a clear and concise description of how this contribution will change behavior and level of impact . utassert_true wrapper around call will no longer be necessary to accommodate dynamic string output , thus removing the double assert . utassert macros will now be able to offer more information by themselves . <section> pc , <allcaps> rhel </allcaps> <number> <section> alan gibson <allcaps> nasa gsfc </allcaps> / <number>",2
"in utassert . h allow all utassert macros to use utassertex and __va_args__ for dynamic output strings <section> i have to add utassert_true as an outer shell to any of the asserts that do not use dynamic arguments . <section> update all the macros ( except for utassert_simple ) to use utassertex as the base function , removing description and adding __va_args__ . <section> utassert_true wrapper around calls , but this results in two asserts per check which is unnecessary . <section> wrote up the change and did not see any issues while building or running tests . <section> alan gibson <allcaps> nasa gsfc </allcaps> / <number>",2
"fix # <number> , apply standard formatting <section> fix # <number> - apply standard formatting <section> build / run unit tests , all pass . <section> none , whitespace only <section> - hardware : cfs dev server - os : ubuntu <number> - versions : current bundle w / this commit <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"apply standard formatting <section> various formatting styles in codebase <section> apply standard formatting , if it ' s an improvement then submit for fasttrack ( minimize impacts to open work ) . if standard format requires hand mods , update such that application of standard format in the future does not require repeat modification . <section> leave as - is if not an improvement . <section> preparation activity for certification code review . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add os config option for fast mutexes <section> currently <allcaps> osal </allcaps> always creates recursive mutexes , with no option to control this . <repeated> normal or non - recursive mutexes are more efficient than recursive mutexes . <section> add an os config compile time option to elect "" fast "" or non - recursive mutexes . <section> this is a follow - on to issue # <number> <allcaps> cfe </allcaps> currently will not run with non - recursive mutexes due to known issues . but as long as the default remains to be recursive mutexes , then this option can be added for future use without breaking anything . obviously this option could not be enabled for <allcaps> cfe </allcaps> until the known issues are fixed . <section> joseph hickey , vantage systems , inc .",2
"add os_debug warning if task locks a mutex multiple times <section> as noted in nasa / <allcaps> cfe </allcaps> # <number> , there are cases in <allcaps> cfe </allcaps> where a mutex may be taken by the same task more than once . this is technically allowed because <allcaps> osal </allcaps> enables recursive mutexes for all supported os types . but my concern is that : - recursive mutexes are not guaranteed to be provided - i . e . some minimal <allcaps> rtos </allcaps> ' s might not have this facility at all . - if recursive mutexes are provided , they are slower than the normal ( non - recursive ) counterpart . - anything that depends on recursive mutexes generally indicates deeper code design flaws - i . e . insufficient separation of internal vs . external apis , function loops , circular subsystem dependencies , etc . <section> start by introducing an <code> warning if the same task takes a mutex more than once . this can help identify the issues , and it is very easy to add . it also will not be displayed unless <allcaps> osal </allcaps> is compiled with debug messages enabled . <section> a future / follow up change , once dependencies on recursive mutexes are fix , could be to allow the user to optionally elect to use non - recursive / fast mutexes via an osconfig option . <section> joseph hickey , vantage systems , inc .",2
"freertos port hi , it seems that you only provide the <allcaps> osal </allcaps> for linux , rtems and vxworks . however you regularly mention freertos in your documentation . do you plan to share the sources for the freertos port ? not sure the amount of work such operation require and the limitations ( especially concerning the file system ) . it would be great to have more information about this point . thanks in advance ! <section> jonathan michel , master student at the university of applied science of western switzerland working on <allcaps> chess </allcaps> <url> .",3
"update <allcaps> rtems </allcaps> osal to use osal_id_t typedef <section> while fixing # <number> i noticed that the <allcaps> rtems osal </allcaps> is still using <code> for its ids . <section> this should be changed to use the <code> typedef instead . <section> joseph hickey , vantage systems , inc .",2
"<allcaps> rtems </allcaps> build broken <section> needs updates to fix issues related to <code> - missing prototype - references to old function prototype still exist in some <allcaps> rtems </allcaps> source files . <section> build default configuration for <allcaps> rtems </allcaps> <number> . fails to compile with errors such as : <code> <section> should compile cleanly . <section> ubuntu <number> ( host ) cross buiding for <allcaps> rtems </allcaps> <number> . <number> / pc - <number> <allcaps> bsp </allcaps> <section> typo noted in # <number> but there are more problems than just that . <repeated> <section> joseph hickey , vantage systems , inc .",0
"fixed typo in rtems binsem timeinticks variable name <section> this addresses a typo in the rtems os - impl - binsem . c file for a variable name . fixes <url> <section> compiled using rtems toolchain , but not run on hardware . <section> prior to this change , compilation failed for an rtems platform . the code should now compile for rtems . <section> - hardware : dell latptop ( build machine ) - <allcaps> aac </allcaps> sirius ( host machine ) - os : ubuntu <number> ( build machine ) - <allcaps> rtems </allcaps> <number> ( host machine ) - versions : <allcaps> osal </allcaps> main <section> adam st . amand - personal",0
typo in <allcaps> rtems </allcaps> binsem . c variable name <url> i believe the line is meant to read the following : <code>,0
"add support for vxworks <number> <section> cfs traditionally has supported vxworks <number> . there are projects interested in using vxworks <number> with cfs , so support must be added . this requires work in <allcaps> psp </allcaps> and <allcaps> osal </allcaps> . <section> an ideal solution is to support both vxworks <number> and <number> with as little cloning of old vxworks <number> as possible . on <allcaps> psp </allcaps> , the current work is to copy mcp750 - vxworks for the working platform . ( <number> ) <allcaps> osal </allcaps> ' s goal is to have the vxworks osal support both <number> and <number> . <section> <section> <section> steven seeger / embedded flight systmes , inc . / <allcaps> gsfc </allcaps> code <number>",2
"add <allcaps> osal </allcaps> debug messages for cases where multiple error conditions result in the same return code <section> there are multiple functions in which multiple error conditions result in the same return code . for instance , in os_filerename_impl , the return code os_error is used for any failure of the rename ( ) function . this obscures the cause of the error and makes debugging more challenging . <section> add an os_debug statement in these cases to provide additional information ( such as errno value ) describing the specific cause of the error . <section> alternatives include : - adding unique return codes - > this would greatly bloat the number of return codes . - using some kind of future event mechanism ( see <allcaps> osal </allcaps> # <number> ) <section> <section> elizabeth timmons / <allcaps> nasa gsfc </allcaps> code <number>",2
"add support for <allcaps> rtems </allcaps> <number> - <allcaps> rtems osal </allcaps> and pc - rtems <allcaps> osal bsp </allcaps> updates <section> the cfs bundle currently supports <allcaps> rtems </allcaps> <number> . now that <allcaps> rtems </allcaps> <number> has been released , i would like to update the necessary components to support <allcaps> rtems </allcaps> <number> on the pc - rtems platform . this involves minor modifications to the cfe repository , the <allcaps> psp </allcaps> repository , and the <allcaps> osal </allcaps> repository . these changes can be done in such a way that preserves the current <allcaps> rtems </allcaps> <number> support and adds <allcaps> rtems </allcaps> <number> support . <section> i would like to add support for <allcaps> rtems </allcaps> <number> while maintaining compatibility with the existing <allcaps> rtems </allcaps> <number> support . for the <allcaps> osal </allcaps> repository there are a few minor changes needed to allow support of <allcaps> rtems </allcaps> <number> and <allcaps> rtems </allcaps> <number> : - minor changes in the <allcaps> osal </allcaps> pc - rtems <allcaps> bsp </allcaps> - minor changes in the <allcaps> rtems osal </allcaps> implementation files <section> alternatives include : - not supporting newer versions of <allcaps> rtems </allcaps> , but several projects will depend on <allcaps> rtems </allcaps> <number> support . - dropping <allcaps> rtems </allcaps> <number> support and just making the changes needed for <allcaps> rtems </allcaps> <number> , but there may be projects that depend on <allcaps> rtems </allcaps> <number> . we can consider dropping <allcaps> rtems </allcaps> <number> support on a future release . <section> <section> alan cudmore / <allcaps> nasa gsfc </allcaps> code <number>",2
"cast - align warning in os_taskgetid_impl for vxworks <section> <code> recreate by building on ubuntu <number> , set <code> in <code> and prep with <code> <section> resolve warnings . <section> none <section> observed on ubuntu <number> w / cast - align = strict <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , add ut_assert address equal macro <section> fix # <number> - adds the macro <section> used the macro in work related to nasa / cfe # <number> ( built and ran unit tests locally using it ) <section> additional macro available <section> - hardware : cfs dev server - os : ubuntu <number> - versions : main bundle + this commit <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
add ut_assert address equal macro <section> address equal macro would be handy . <section> add it . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"fix # <number> , remove os_tick2micros and internalize os_milli2ticks <section> fix # <number> - removed os_tick2micros implementation , tests , stubs , references - moved prototype from <allcaps> api </allcaps> to internal for os_milli2ticks - updated os_milli2ticks to return status - added check for rollover in os_milli2ticks - os_milli2ticks now sets and limits ticks as int - updated all internal use of os_milli2ticks to check for error and returns immediately on error ( will not wait maximum amount ) - coverage tests updated to check for new error cases - os_milli2ticks stub updated ( default implementation ) <section> built and ran unit tests , all pass , coverage maintained ( although not <number> due to previous lapses , see # <number> ) <section> <allcaps> api </allcaps> ' s no longer exposed . <repeated> no known uses identified so should not be an impact <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
code coverage for shared dropped below <percent> ( again ) <section> shared / src / osapi - common . c : os_deleteallobjects missing coverage shared / src / osapi - idmap . c : os_objectidfinalizedelete not covered <section> <number> . add coverage back in <number> . enforce <percent> coverage in ci <section> at minimum add coverage back . <repeated> ci really should enforce or we will keep missing code coverage . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"utassert_zero in utassert . h doxygen brief incorrectly states nonzero <section> what appears to be a copy paste error , the assert zero states it is checking for nonzero . this mimics the assert nonzero brief above it . <section> <url> <section> state "" confirm an integer value is zero "" instead . <section> see above . <section> n / a <section> n / a . <section> alan gibson <allcaps> nasa gsfc </allcaps> / <number>",1
"<code> should be a signed type <section> <code> is used for <allcaps> osal </allcaps> coverage testing to replace the c library <code> type as used in e . g . <code> this is being substituted with an unsigned type , but really should be a signed type . <section> suggested change in pr # <number> exposes the mismatch : <url> coverage test fails due to later comparison for ( result < <number> ) which is impossible with unsigned type . <section> ubuntu <number> <section> using <code> instead fixes it . <section> joseph hickey , vantage systems , inc .",0
"<allcaps> ttf </allcaps> ( test teardown failure ) not reported in individual or full test summary <section> <allcaps> ttf </allcaps> only indicated during the test run , not included in the individual or full summary . <section> include <allcaps> ttf </allcaps> in summaries <section> <allcaps> fail </allcaps> / <allcaps> tsf </allcaps> / <allcaps> ttf </allcaps> are all failures . <repeated> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"promote the internal <code> function to the public <allcaps> api </allcaps> <section> currently <allcaps> osal </allcaps> only provides a public <allcaps> api </allcaps> for <code> which operates indiscriminately on any object type . for instance , if passed a task id , it returns a value in the range of <code> and if passed a queue id it will return a value in the range of <code> and so forth . but code using this function is using it to index an array of a specific object type ( e . g . tasks ) . so this creates an opportunity for error if passed the wrong object id - the caller may get a successful conversion but still get an index that is beyond the range of their local table . <section> the <code> function is better because it first enforces that the passed - in id actually refers to the intended object type . the public <allcaps> api </allcaps> is actually just a wrapper around this that _defeats_ the type check . for some reason this got relegated to an internal <allcaps> api </allcaps> . <section> keep as is , accept risk of getting an index outside the expected range if ids get mixed . <section> as the function already exists it should be just a matter of putting its prototype into the public <allcaps> api </allcaps> , and providing a ut stub for it ( easy ) . <section> joseph hickey , vantage systems , inc .",2
"add tracking for order of stub calls during a unit test <section> it can sometimes be important to know that calls in a function are done in a proper order ; i . e . ability to verify that a message is timestamped before it is sent . <section> an addition that allows a stub to report that it was called to a central location and this information accessible to a unit test for verification . add this to the default stub implementation , but have it be available to stubs that do not use the default . <section> write local hooks for all stubs used in unit testing that use a local version of this concept . <section> example of situation that requires this : <code> <section> alan gibson <allcaps> nasa gsfc </allcaps> / <number>",2
"add functional test for "" one - shot "" timer <section> spawned from the conversation on # <number> . <allcaps> api </allcaps> documentation specifies behavior that is not covered by the current functional tests ( one - shot ) . <section> add a one - shot timer test <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"es reports version <number> . <number> in hk telemetry , when built off a development branch <section> misidentifies version <section> look at version in es housekeeping packet . <section> system should report a consistent version number at startup , from noops , and in tlm . could go back to the old way where development versions all report a revision of <number> . <section> <url> <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle . <section> got out of sync with new versioning scheme <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"possible <allcaps> osal </allcaps> bug in os_filesysaddfixedmap not allowing fs_based mapping on vxworks <section> unable to add a arbitrary filesystem path mappings with os_filesysaddfixedmap <section> call os_filesysaddfixedmap w / parameters & fsid , "" / "" , "" / "" , and it ' ll fail <section> entry added to os_filesys_table <section> it looks like the error code from line <number> is propagated improperly to line <number> instead of just being used to set flags on <number> , causing the finalization step to fail . <url> <section> - sp0 - s - os : vxworks <number> - <allcaps> cfe </allcaps> <number> . <number> + dev292 , <allcaps> osal </allcaps> <number> . <number> + dev247 , <allcaps> psp </allcaps> <number> . <number> + dev76 ( w / additions for sp0 - s ) <section> attempting to add a mapping to / for netbooting off of <allcaps> ftp </allcaps> on sp0 - s <allcaps> psp </allcaps> . mapping / cf / to / cf / used to work earlier this year . in addition , os_filesys_findvirtmountpoint appears to fail to map to "" / "" if it ' s in the table ( although i suppose it ' s not desirable to map / in production anyway , since it ' d override all other mappings ) . <section> john n pham , northrop grumman",0
"ut_assert header files not included in ' make osalguide ' <section> when building the osal guide with ' make osalguide ' the ut_assert header files are not included <section> steps to reproduce the behavior : <number> . make osalguide <number> . browse guide , no ut_assert files present <section> ut_assert files included in osal guide <section> <url> <section> <allcaps> rhel </allcaps> <number> <section> adding : <code> after osconfig - example in the above code includes ut_assert headers in the guide . <section> alan gibson <allcaps> nasa gsfc </allcaps> / <number>",1
"[ <allcaps> moved </allcaps> ] document nested usage of ut_add_test and clarify nomenclature for individual versus groups of tests # # describe the problem the <code> call has some limitations as addressed in nasa / cfe # <number> . some solutions are discussed in that pr . # # proposed solutions <number> . have <code> handle "" nested "" unit tests , or <number> . develop a nomenclature for unit test functions that explicitly indicates whether there are nested unit tests and then rename unit tests accordingly , or <number> . document the anti - pattern , or <number> . split up all unit tests to ensure only one test per function and make this a design pattern . # # additional context _originally posted by <user> in <url> > related to nasa / osal # <number> . individual tests are added w / the ut_add_test call . some tests are grouped at a lower level ( test_msg_ccsdsext is a group of tests ) , and those functions are called directly . same pattern is used in <code> : > > <url>",0
"adding unit tests from with a unit test not a supported pattern <section> possibly related to # <number> ( reverted to v5 . <number> - rc1 and they ran ) . adding tests after starting to run tests ( adding a test within a test ) is not a supported pattern , and they will not actually get run ( they do get added to the front of the individual list , but the merged test list does not not handle them ) . <section> add a unit test from within a unit test , build / execute and the added unit test will not execute . <section> did not know <allcaps> not </allcaps> to do this . <repeated> just do not do it . <section> just do not do it . document limitations and proper usage . <section> uttest . c - see the adding and merging <section> - hardware : cfs dev server - os : ubuntu <number> - versions checked latest integration candidate and v5 . <number> - rc1 , problem does not exist in v5 . <number> - rc1 <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
utassert_message doxygen comments should include params <section> there are no param items listed in the utassert_message method in utassert . h <section> n / a <section> add param descriptions . <section> <url> <section> <allcaps> rhel </allcaps> <number> <section> n / a <section> alan gibson <allcaps> nasa gsfc </allcaps> / <number>,1
"os_fsblocksfree returns a <number> - bit value , but os_statvfs_t . blocks_free is <number> bit os_fsblocksfree returns a <number> - bit value , but os_statvfs_t . blocks_free is <number> bit .",0
"filesize in os_fstat_t is uint32 , should be 6 4 bit friendly filesize in os_fstat_t is uint32 , but should be off_t like in <allcaps> posix </allcaps> . on <number> - bit systems . it ' s a <number> - bit value and this causes conversion issues .",2
"time and timeouts have no consistent type in <allcaps> osal </allcaps> in <allcaps> osal </allcaps> , time and timeouts are represented typically by both int32 or uint32 . this convention is used in many places . it might make sense to have a consistent type for time . perhaps even absolute and relative time . there are wconversion issues with uses of these types .",2
"os_statvfs_t types do not match corresponding <allcaps> posix </allcaps> types when building for <number> - bit , wconversion shows issues with os_statvfs_t ' s types . they do not match the types in struct statvfs on <allcaps> posix </allcaps> systems . it may be worth a discussion to change these types of just handle the conversions in the specific implementation .",2
"sysconf can return - <number> on error in posix / src / os - impl - tasks . c sysconf ( ) is used . its storage is into a type size_t , but sysconf ( ) can return - <number> . we should change the storage to ssize_t to accommodate this , or we should check for - <number> and then store a non - negative value to posix_globalvars . pagesize . sysconf ( ) should not return - <number> when passed _sc_pagesize , so this may be low priority .",0
"os_taskprepare should propagate return code . <section> in the internal <code> routine , it calls a low - level implementation routine but does not propagate the return code . <section> more theoretical than real . in <allcaps> posix </allcaps> this depends on the underlying <code> routine returning an error , of which the only documented error ( at least per <allcaps> posix </allcaps> ) is <code> . however that does not mean that there could not be other implementation - specific errors on other systems . <section> if the <code> fails , this result should be propagated up the stack and prevent the task from starting . <section> see here : <url> <section> <section> if this fails then it means dependent routines like <code> will also be broken , so it really should block startup of the task and return the error to the caller . catching this type of error early , when possible , is usually better than getting an obfuscated error later . <section> joseph hickey , vantage systems , inc .",0
"consolidate cleanup code into a separate "" finalizedelete "" routine <section> all <allcaps> osal </allcaps> objects share a basically common pattern for finalization after creation and deletion . for creation the finalization was consolidated into a <code> routine , but the deletion finalization is basically repeated as it only involved clearing a single global . <section> even though deletion is currently trivial , it is beneficial to consolidate this code as it could become less trivial , as in issue # <number> <section> this was split from # <number> this is a necessary prerequisite in order to implement any sort of common / generic handling without repeating the code everywhere . it also makes deletion more of a mirror - image of creation , which is really the way it should be . <section> joseph hickey , vantage systems , inc .",2
"remove <allcaps> osal </allcaps> deprecated code for next release <section> now that the "" <number> . x "" release branch has been created , the next release should remove all code / functions that are currently marked as deprecated . <section> removal of all code currently contained within an <code> conditional compile switch . <section> the removal only applies to "" main "" branch - not the <number> . x release branch , where it will continue to exist for that release series . this assumes the next release ( main ) will become version <number> . there are other changes currently in development which do break some deprecated items - hence why i ' d like to remove this sooner rather than later , as it saves the work of updating / fixing this old code if the intent is to remove it anyway . <section> joseph hickey , vantage systems , inc .",2
"ut_setforcefail is a misnomer <section> ut_setforcefail assumes that the value given , that is being set as return value , is a fail condition . there may be sometimes that a function returns more than <number> value that is not considered a fail . <section> use in a unit test where there is a stubbed function with more than <number> "" successful "" return value . <section> change to something like ut_setforcedreturnvalue to make it more generic . <section> n / a <section> <allcaps> rhel </allcaps> <number> <section> not a required or debilitating situation , but a name change may be make the function ' s effects more clear . <section> alan gibson <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps> / <number>",0
"cleanup - remove os_objectidmap / unmap internal prototypes <section> the functionality provided by os_objectidmap and os_objectidunmap has been replaced by other functions and these are neither used nor defined in the current <allcaps> osal </allcaps> , but they are still declared / prototyped in <code> <section> remove unused / leftover prototypes <section> joseph hickey , vantage systems , inc .",2
"deprecate os_open and os_creat <section> for historical / backward compatibility reasons , the <allcaps> api </allcaps> of these two functions does not follow the typical flow . rather than providing a <code> id output buffer as the first argument with a separate int32 return code , they return the <allcaps> osal id </allcaps> cast as an <code> on success . for these functions , the caller is expected to check if the result is negative , and if so , consider it an error code . whereas if it is non - negative , the caller is expected to cast it back to a <code> type and interpret it as an <allcaps> osal id </allcaps> . <section> these should be like all other <allcaps> osal </allcaps> apis and pass back the id separately from the return / error status . <section> leave as is . but these two functions present a challenge when making a distinct type for <allcaps> osal </allcaps> ids . <section> in the current implementation , . these are just compatibility wrappers anyway . they both call <code> internally , which provides both open ( existing file ) and creat ( new file ) based on the flags it was passed . the <code> function _does_ follow the correct pattern so one option would be to just expose this to the public <allcaps> api </allcaps> . the other option is to create a new version of os_open and os_creat which follow the correct pattern . but in order to provide a transition they would have to use different names . <section> joseph hickey , vantage systems , inc .",2
"<allcaps> osal </allcaps> should provide a typedef for "" id "" values <section> the <allcaps> osal api </allcaps> uses <code> type to identify objects / resources in an abstract way . <section> there should be a typedef for this . for instance : typedef uint32 os_id_t ; this typedef can then be used in all apis rather than using <code> directly . <section> keep using <code> . <section> providing a typedef is generally accepted as good practice in terms of future proofing the code . this would not change anything immediately , as the type will remain <code> as it currently is . <section> joseph hickey , vantage systems , inc .",2
"lengthen allowable unit test names <section> not sure if it is a bug , but why is the testname length based upon os_max_api_name * <number> in utglobal . h ? <section> steps to reproduce the behavior : <number> . write a unit test with a name longer than os_max_api_name * <number> <number> . run tests and see that the test name is truncated <section> provide enough space for long ( descriptive ) test names . <section> <url> char testname [ os_max_api_name * <number> ]; <section> - pc - rhel <number> - current ' master ' branch <section> this is only an issue because i use long descriptive test names . <section> alan gibson <allcaps> gsfc </allcaps> , code <number>",3
"use a changelog to keep track of changes instead of having them in the readme <section> the version history in the readme file clutters useful information <section> move the "" version history "" from <code> to <code> and start following this spec : <url> <section> move changelog section in the readme to a section at the very bottom of the file <section> none <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",1
doxygen warning : file argument matching multiple files <section> doxygen produces multiple ambiguous file warnings when building the documentation using <code> at the bundle level . for example : ` ` <code> os - impl - binsem . h ' supplied as the second argument in the \ file statement matches the following input files : / cfs / cfs / osal / src / os / posix / inc / os - impl - binsem . h / cfs / cfs / osal / src / os / rtems / inc / os - impl - binsem . h / cfs / cfs / osal / src / os / vxworks / inc / os - impl - binsem . h please use a more specific name by including a ( larger ) part of the path ! ` ` <code> sample_defs <code> ` <code> ` <code> cfs / build / doc / warnings . log <code> ` <code> ` <code> ` <code> ` ` <section> ubuntu running on docker <section> none <section> gerardo e . cruz - ortiz,1
"add uttest_teardown ( ) to ut_assert <section> i would like to have a "" teardown "" that runs at the end of the unit tests test - runner file . much like the uttest_setup runs at the start . <section> add a uttest_teardown ( ) that is called after all the tests have run . <section> not having it , which is the current state . <section> this is a common feature with most unit test frameworks . <section> alan gibson <allcaps> nasa </allcaps> goddard code <number>",2
"ut_assert - typo in readme , some clarifications of stub functions <section> there ' s a typo in the ut_assert readme , plus some of the stub function comments are not very clear and could use a bit of cleanup . <section> <email>",1
"documentation updates <section> <number> . in osapi - os - net . h , os_socketaccept lists addr as an [ in ] parameter where as it is an [ out ] parameter . this is where a new connection ' s incoming address is stored as an output to the function call and is not an input to the function . ( file location : osal / src / os / inc / osapi - os - net . h ) <number> . in osapi - os - core . h , os_taskcreate notates the input parameter "" stack_size "" as "" stack_size : the size of the stack , or <number> to use a default stack size "" . a <number> input here is not valid and should be appointed an appropriate stack size . ( file location : osal / src / os / inc / osapi - os - core . h ) <number> . in osapi - os - filesys . h , os_timedread / os_timedwrite . while the documentation is clear that these functions are used primarily with sockets , it is unclear how a socket may be used as an input parameter . the first input parameter "" filedes "" is notated as "" the handle id to operate on "" but i think it would be prudent to add an additional comment to explain that this is also the socket id . perhaps these two functions should also be defined with the rest of the network functions in ( osal / src / os / inc / osapi - os - net . h ) instead of with functions used for file operations ( osal / src / os / inc / osapi - os - filesys . h ) for further specified use and clarity . it was not easily clear on how to send messages back and forth between a <allcaps> stream </allcaps> connection , as it is with <allcaps> datagram </allcaps> connections . ( file location : osal / src / os / inc / osapi - os - filesys . h ) <section> cfs dev server os : ubuntu <number> versions : <allcaps> osal </allcaps> <number> . <number> <section> add any other context about the problem here . <section> yasir majeed khan <allcaps> nasa gsfc </allcaps> / emergent space",1
<allcaps> datagram </allcaps> network function os_socketsendto segfault <section> os_socketsendto ( ) segfaults when passed in <allcaps> null </allcaps> for remote address ( last parameter ) and all the other parameters are valid . <section> cfs dev server os : ubuntu <number> versions : <allcaps> osal </allcaps> <number> . <number> <section> y . m . k . emergent,0
"add os_getmoduleidbyname ( ) to return id of a module given the name <section> if es loads a module ( such as a library that an app uses ) , but an app wishes to unload that module , that app has no way to find the id to send to the unload function . <section> add an os_getmoduleidbyname ( ) function that returns ( via an out param ) the id of the module given its name . <section> <email>",2
"<allcaps> osal </allcaps> event callback framework for platform - specific handling <section> many platforms support extra non - standardized features , but <allcaps> osal </allcaps> cannot make use of these . this includes items such as setting the processor affinity in a multi - processor system , or propagating the user - friendly task name at the os level , as was suggested in # <number> . <section> an event callback framework could help solve this problem , allowing those platform - specific features to be invoked from the <allcaps> psp </allcaps> / <allcaps> bsp </allcaps> layer while keeping <allcaps> osal </allcaps> itself standards - compliant . <section> use <code> conditional compiles for platform - specific features ( ugly and not as maintainable ) . <section> joseph hickey , vantage systems , inc .",2
"incorrect install / staging location for coverage test binaries <section> typo in cmake file - the loop variable when installing coverage binaries is <code> but the <allcaps> destination </allcaps> refers to <code> . <section> build with multiple cpus sharing the same target + platform config . <section> binaries should be installed for everything in install_target_list . <section> <url> <section> ubuntu <number> <section> the <allcaps> cfe </allcaps> scripts also do set <code> in other places so it by chance had a leftover value that happened to be the same thing , and therefore this would not be noticed when building for a single target ( the default case ) . <section> joseph hickey , vantage systems , inc .",0
"overall tests pass even with a <allcaps> tsf </allcaps> <section> the software is set up such that overall tests pass even if there is a test case that <allcaps> tsf </allcaps> . i have had individual tsfs , and yet the overall tests showed everything passed . see code here : <url> <section> cfs dev server os : ubuntu <number> versions : <allcaps> osal </allcaps> <number> . <number> <section> y . m . k . emergent",0
"new buffer size warning in ut assert <section> after moving the utassert_dotestsegmentreport ( ) function , it has triggered a new warning when building with optimization enabled ( <allcaps> buildtype </allcaps> = release ) . <code> <section> build with gcc9 + and <code> flag . <section> should build cleanly . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",0
"vxworks os_countsemcreate unit test fails <section> the os_countsemcreate unit test , "" # <number> initial - count - too - high "" , fails . this is because the vxworks <allcaps> osal </allcaps> , as written , does not check the initial count . rather , it passes it directly to the os call . <section> it should pass . <section> - aitech sp0 - s - os : vxworks <number> - <allcaps> osal </allcaps> <number> . <number> - bv <section> mathew benson windhover labs",0
"scrub all <allcaps> osal ut </allcaps> stub functions <section> need to scrub all <allcaps> osal </allcaps> unit test stub routines , similar to nasa / cfe # <number> but for <allcaps> osal </allcaps> . <section> - all functions prototyped in the <allcaps> osal </allcaps> public <allcaps> api </allcaps> headers ( the <code> dir ) should also have a stub defined . - all arguments should be registered in the context so the complete context is available within ut hook functions . - the argument names should always match the prototype . <section> joseph hickey , vantage systems , inc .",2
os_api_init ( ) failure due to <number> stack size <section> os_api_init ( ) fails on generic - linux due to a stack size of <number> being used for the console task . <section> <number> . build the provided example using the ' generic - linux ' <allcaps> bsp </allcaps> . <number> . execute the provided example . <section> the three test tasks should execute . <section> os_api_init ( ) fails with the following error message ( debug messages enabled ) : <code> <section> the error occurs on the following call to pthread stack size in os_posix_internaltaskcreate_impl ( <sad> <code> the reason it fails is because the stacksz is set to zero in os_consolecreate_impl ( <sad> <code> <section> - hardware : dell precision <number> laptop - os : wsl2 ubuntu <number> . <number> <allcaps> lts </allcaps> - versions : <allcaps> osal </allcaps> master <section> this issue is resolved by using a stack size of pthread_stack_min instead of <number> : <code> <section> adam st . amand,0
"copyright / license update for current master <section> copyright / license update for current master , relative to apache <number> approval <section> update . <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
copyright / license and <allcaps> readme </allcaps> update for <number> release <section> old markings and documents need to be updated for release <section> update <section> n / a <section> n / a <section> jacob hageman <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"release processing <number> . <number> <section> license and readme updates to version <number> . <number> fix # <number> <section> nominal unit test and build from bundle . see <allcaps> vdd </allcaps> in cfs for full test description of release . <section> no impact , header and document updates <section> - hardware : cfs dev server - os : ubuntu <number> - versions : <number> bundle <section> switched to apache <number> license <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"second parameter of pthread_mutex_timedlock should be absolute time not timeout in src / os / posix / src / os - impl - binsem . c , there are three calls to pthread_mutex_timedlock , each time with & os_posix_binsem_max_wait as the second parameter where os_posix_binsem_max_wait has a value of <number> seconds . because the second parameter of pthread_mutex_timedlock should be an absolute time and is not a timeout , if the mutex is not immediately available , pthread_mutex_timedlock will return with <allcaps> etimedout </allcaps> resulting in the os_binsemflush_impl , os_genericbinsemtake_impl , or os_binsemgive_impl call returning os_sem_failure . here ' s a code snippet of the "" as is "" : if ( pthread_mutex_timedlock ( & sem - > id , & os_posix_binsem_max_wait ) ! = <number> ) { return ( os_sem_failure ) ; } it should look something like : struct timespec timeouttime ; clock_gettime ( clock_realtime , & timeouttime ) ; timeouttime . tv_sec + = os_posix_binsem_max_wait . tv_sec ; timeouttime . tv_nsec + = os_posix_binsem_max_wait . tv_nsec ; if ( pthread_mutex_timedlock ( & sem - > id , & timeouttime ) ! = <number> ) { return ( os_sem_failure ) ; } reproducing this issue is tricky as the cfs application has to run long enough to have a mutex not immediately available for the lock . the behavior i am seeing in my installation is the background task terminates and ctrl - c can no longer be used to terminate the application . i am running in a centos <number> virtual box machine . jonathan c . brandenburg <allcaps> metecs </allcaps> <email>",0
"use of hardcoded numbers for bad ids in <allcaps> osal </allcaps> unit tests <section> some unit tests pass a hardcoded magic number i . e . <number> to <allcaps> osal </allcaps> functions to evoke a bad id error , such as the case here : <url> as the <allcaps> api </allcaps> does not specifically dictate what constitutes a good id vs . a bad id , there is a possibility that in some <allcaps> osal </allcaps> implementation this value <code> might actually be a valid id . this is a concern for black box tests which are supposed to be implementation - agnostic , but need to validate that the correct error is returned when called with a bad id . <section> the <allcaps> osal api </allcaps> should define macro to provide a value which is guaranteed to always be a valid id . unit tests can use this symbol instead of the magic number . <section> joseph hickey , vantage systems , inc .",2
"<allcaps> osal </allcaps> unit tests terminate before the console thread prints the results <section> most of the <allcaps> osal </allcaps> unit tests terminate before the console thread is allowed to execute and write the results to the console . <section> steps to reproduce the behavior : <number> . build with unit tests , i . e . the initial build created using the instructions in the cfs repository . <number> . run the unit tests manually , not with ctest . ctest hides the console output anyway . <section> running osal_core_ut should look like : <code> instead , depending on the timing of the target under test , you might see : <code> <section> the easiest fix is to add : <code> to the end of the function "" void ut_os_teardown ( const char * testsuitename ) "" in file "" ut_os_stubs . c "" . this will ensure the caller thread pends for long enough time ( hopefully ) for the console thread to release and complete printing to the console . however , this is not <percent> bullet proof since it still relies on the console thread starting and completing the print in the time provided to the os_taskdelay ( ) function . for example , if you are stepping through code with your debugger inside the os_consoleoutput_impl ( ) function on the last call in the unit test , you have <number> seconds to get whatever information you need to get before the process is terminated . <section> - virtualbox virtual machine - ubuntu <number> - <allcaps> osal </allcaps> <number> . <number> - bv <section> most platforms ( all platforms i know of ) use a separate , kernel created thread , to print to the console already . the <allcaps> osal </allcaps> provided console thread just adds a third thread to <number> already existing threads . i am not sure why the additional thread needed to be added . but if it wasn ' t there , this problem is resolved by calling fflush , which pends until the output has successfully been sent out . aside from making the <allcaps> osal </allcaps> more complicated , i am not sure what problem the new console thread is solving . <section> mathew benson owner windhover labs , <allcaps> llc </allcaps>",0
"vxworks <number> does not provide <code> type <section> a new compiler error has appeared on the vxworks - <number> build : <code> <section> build using the vxworks <number> toolchain <section> should build successfully <section> vxworks <number> , gcc <number> . <number> on gs582w - cfelnx lab machine . <section> joseph hickey , vantage systems , inc .",0
"idmap <allcaps> api </allcaps> test needs to use real task stack size and priority <section> although linux allows the stack size to be zero ( it uses a nonzero default ) other os ' s do not have this fallback . the <code> attempts to create a task with zero stack and this fails on <allcaps> rtems </allcaps> . <section> run ' idmap - api - test <code> os_taskcreate ( ) ` fails ( reports as <allcaps> tsf </allcaps> ) but then other failures occur related to this . <section> should pass . <section> <allcaps> rtems </allcaps> <number> . <number> running in <allcaps> qemu </allcaps> . <section> should consider forcibly making every os fail ( i . e . enforce in shared layer ) if passed a zero stack . <section> joseph hickey , vantage systems , inc .",0
"time base <allcaps> api </allcaps> test introduced new format warnings <section> new warnings noted when building for <allcaps> rtems </allcaps> : <code> <section> build code using <code> toolchain . <section> should build cleanly . <section> cross compile for <code> on ubuntu <number> host . <section> needs cast whenever fixed - width types are used with printf . <section> joseph hickey , vantage systems , inc .",0
"add int32 ut assert macro <section> a very common use case in unit testing is to assert on an <code> value , as this is a common return value type for error codes and status values . ut assert provides a generic <code> macro which can certainly test for integer equality , but it is still very repetitive and test cases may not include all the relevant information . for instance , the framework should encourage / require that the actual values are printed in addition to the pass / fail status , and the generic macro being totally free - form does not enforce this at all . <section> add a macro <code> to check for equality of two values as <code> types . other types could be added too , but <code> is by far the most commonly needed as it is the return type of many <allcaps> api </allcaps> calls across <allcaps> osal </allcaps> and <allcaps> cfe </allcaps> . <section> continue using the generic <code> macro . <section> many test programs already use their own macros for testing return values . they have already evolved to be similar but different ( e . g . <allcaps> cfe sb </allcaps> has <code> , and <allcaps> osal </allcaps> coverage testing has <code> ) . it would be worthwhile to put more of these in ut assert itself so these do not need to continue being duplicated . <section> joseph hickey , vantage systems , inc .",2
"offer secondary target for ut assert library that can be dynamically loaded <section> the current ut assert is designed to be statically linked as an <allcaps> osal </allcaps> application . to support a <allcaps> cfe </allcaps> functional test environment that uses the same ut assert reporting methods , the library should offer a target that can be linked as loadable module . <section> the differences are : - compile as position independent code ( <allcaps> pic </allcaps> ) so it can be linked into a dynamic module . - separate out the os_application_startup and os_application_run - as this will be loaded into a larger app , not a standalone app , and these symbols are already defined . - consolidate global variables into a common structure and make early init / reset of these variables into a separate routine from os_application_startup . <section> this dynamically - loadable variant can be a separate target , so it should not change anything about the existing apps / tests that link with the existing static "" ut_assert "" library . <section> joseph hickey , vantage systems , inc .",2
"linux <allcaps> bsp </allcaps> should not trim first argument <section> as part of command line processing the logic for linux <allcaps> bsp </allcaps> is to prune the first argument which is the command name , to be consistent with other ( e . g . <allcaps> rtems </allcaps> ) platforms that do not pass the command name to begin with . however the <allcaps> cfe psp </allcaps> passes the argument list to the c library <code> and this expects the first argument to be the command name , so this breaks . <section> pass arguments ( e . g . <code> - i ` to force a test failure on the spacecraft id value and it did not work . <section> joseph hickey , vantage systems , inc .",0
"file descriptor signed or unsigned ? <section> os_open ( ) returns an int32 file descriptor , os_socketaccept ( ) takes a uint32 pointer for the file descriptor . they should be the same type . ( the socket code should probably use / take int32 . ) <section> <email>",2
"missing stub function for os_filesysaddfixedmap <section> coverage unit tests being added for the <allcaps> psp </allcaps> will likely require a stub of this function . <section> provide the stub function as part of the <allcaps> osal </allcaps> stub library <section> n / a - all public <allcaps> api </allcaps> functions should have ut stubs . this one was overlooked / missed . <section> joseph hickey , vantage systems , inc .",2
"race condition in new idmap tests <section> the <code> routine occasionally fails , because it creates one of its semaphores in a sub task , but does not actually wait for that sub task to run . <section> run idmap test , in particular a single core machine seems to reproduce it more reliably . <section> need to add a wait loop of some type in main task to make sure child task has executed . <section> task started here : <url> might want to employ a loop similar to what is done here to make sure the child task has executed : <url> <section> centos <number> vm ( single core ) <section> joseph hickey , vantage systems , inc .",0
documentation - - objectid architecture description <section> would be good to put some words / pictures into the doxygen documentation ( or . md ? ) describing the way object id ' s are managed in <allcaps> osal </allcaps> . <section> <email>,1
"document that <code> id of new obj is > <number> <section> the os_ <obj> create ( ) functions always generate an id as an "" out "" parameter and that id is always > <number> when the creation succeeds . this is useful as users of these <allcaps> api </allcaps> ' s as they can assume <number> is not a valid id ( such as in arrays or variables that are not always referring to valid objects . ) <section> should describe , in the comments for all os_ <obj> create functions , that id will always be > <number> . <section> <email>",1
"ut assert argument name association <section> ut assert passes "" static "" function arguments to hook functions as an array of opaque pointers , based on the order of calls to the <code> <allcaps> api </allcaps> inside the stub . this is basically equivalent to argc / argv on a command line . this requires test cases to "" know "" which position the argument they need to access is in , and basically hard - code that number . this could become more problematic if hook functions are used more frequently . <section> offer a variant of <code> that also stores the argument name , and offer a "" getter "" that a hook function can use in order to get by that name . registering and retrieving values by name will provide greater stability as the apis and test cases evolve over time . the downside is that its slower and uses more memory to look up based on name , but that does not matter much for ut . <section> leave as is using number / sequence based args . it works but concerned it ' s too easy to get out of sync . <section> could also use some macros to make both the register ( stub - side ) and get ( hook - side ) operations a little more user - friendly . <section> joseph hickey , vantage systems , inc .",2
"add shared layer <allcaps> api </allcaps> for handling global mutex <section> currently the shared layer calls <code> and <code> directly when locking / unlocking the internal tables within <allcaps> osal </allcaps> . this does not offer a place to : - check return code of operation - track ownership of resource in case of not being freed . <section> should implement <code> and <code> wrappers at the shared <allcaps> api </allcaps> level , which can provide a common place to check status , handle failure , and track resource usage . <section> in # <number> , the global table lock was correctly returning an error but nothing ever checked the return code . rather than adding a specific return code test everywhere this is used , simpler and better to add a wrapper . <section> joseph hickey , vantage systems , inc .",2
"global lock for "" timecb "" objects missing <section> the internal table mutex for the timer callback ( timecb ) object type is missing / not implemented . this leave a potential race condition as timer callbacks are registered . <section> not observed in real execution at this time - but theoretically possible if two timers are registered by two tasks at the exact same time . <section> should be protected . <section> ubuntu <number> <section> the global lock table is simply missing an entry for this object type . <section> joseph hickey , vantage systems , inc .",0
"scrub reference counting for possible task deletion issues <section> the <allcaps> osal </allcaps> shared layer employs a reference counting scheme for long running / blocking operations , such as file read / write , and socket operations . this reference count prevents deletion while these operations are still in progress . however , the possibility exists that the task is deleted while this operation is occurring , which means the reference count may never get decremented . <section> whenever possible / relevant , the <allcaps> osal </allcaps> should "" wrap "" the long running operation in a cancellation cleanup handler as was done for binary sems in # <number> . for <allcaps> posix </allcaps> , this may be needed for anything that invokes a cancellation point : - read / write / open / close ( files ) - send / recv / connect / accept ( sockets ) - select - mq_receive / mq_send ( queues ) <section> leave as - is and accept a risk that there may be dangling references when tasks are deleted . <section> there is no way for the <allcaps> osal </allcaps> to know about and handle inter - relationships between resources that the application may impose ( i . e . using a mutex to control access to a shared memory or a reference count of its own ) and therefore this cleanup / recovery can never be bulletproof . while <allcaps> osal </allcaps> could potentially do better at handling its own reference counts in the context of task deletion , there will still be other remaining risks of unreleased resources after tasks being deleted for things it cannot track . <section> joseph hickey , vantage systems , inc .",2
"order of operations on os_deleteallobjects <section> os_deleteallobjects ( ) is used when shutting down the system , such as after an exception , a commanded processor restart , or <allcaps> ctrl </allcaps> + c , etc . this simply deletes resources based on their numeric <code> value , meaning tasks ( <number> ) are first , followed by queues , bin / count , semaphores , mutexes , etc . and eventually timers ( <number> ) . a recent issue described in nasa / cfe # <number> observed a potential problem with this . as the task and semaphore are deleted , a timer could still be running . if that timer executes during shutdown , it may interrupt the deletion , and attempt to use semaphore objects . normally this should not be an issue because <allcaps> osal </allcaps> will return an error and reject the call . however due to an underlying issue in binary semaphores (# <number> ) after task cancellation , this caused deadlock . <section> it would be preferable to delete timers first , then tasks , then semaphores , files , and other resources . this should be a safer ordering in general , as it will reduce the potential for resources to be used as they are being deleted . <section> leave as - is . <section> the real fix for # <number> prevents deadlock , this is just more future - proofing . <section> joseph hickey , vantage systems , inc .",2
"binary semaphore locked after thread cancellation <section> on <allcaps> posix </allcaps> systems using the binary semaphore <allcaps> api </allcaps> , there is a risk that threads can become deadlocked after deleting a task that was executing an <code> <allcaps> api </allcaps> call . <section> - create two tasks and one binary semaphore . - task a calls <code> at some event / interval . - task b waits on the binary sem using <code> then delete task b while it was pending in <code> . the semaphore resource is now inoperable , because the condition mutex was "" owned "" by task b at the time it was deleted , and is never released , thereby preventing any other task from using the mutex . <section> the semaphore should continue to be usable by other tasks after deleting task b . <section> ubuntu <number> <section> this was originally reported / observed in nasa / cfe # <number> , during shutdown where timers were used . <section> joseph hickey , vantage systems , inc . ( after diagnosis / investigation of issue reported by <user> in above ticket )",0
"update unit tests to provide consistent directory map <section> the "" file - api - test "" and "" osal_loader_ut "" unit tests rely on a real fs_based directory map that is provided by the <allcaps> bsp </allcaps> . this creates an undesired dependency on the <allcaps> bsp </allcaps> volume table in these test cases , in that they must provide a map for <code> . <section> test should be <allcaps> bsp </allcaps> - agnostic . a map for the directory used by the test case can be provided locally as part of this test setup . a relative system directory can be used ( e . g . "" . / test "" ) to make this platform - agnostic . <section> this will allow to run unit tests without a <allcaps> bsp </allcaps> - provided volume table . <section> joseph hickey , vantage systems , inc .",2
"update <allcaps> rtems </allcaps> implementation to dynamically create <allcaps> ram </allcaps> disk block devices <section> the current <allcaps> rtems bsp </allcaps> predefines the <allcaps> ram </allcaps> disks by way of the <code> which is set at compile time . however the <allcaps> osal </allcaps> model is to create these block devices at runtime based on memory segments that are allocated externally . the workaround up to this point was to preallocate the ram disks , and then attempt to correlate the address in the os_mkfs / initfs request to one of the preallocated blocks . however this is not possible when the compile - time config and ramdisk allocation are done by separate libraries ( <allcaps> bsp </allcaps> and <allcaps> cfe psp </allcaps> , respectively ) . <section> <allcaps> rtems </allcaps> can support dynamically - created <allcaps> ram </allcaps> disks using <code> which better aligns with the way things are supposed to work . <section> this is necessary as part of decoupling the volume / filesystem table from the <allcaps> osal bsp </allcaps> . <section> joseph hickey , vantage systems , inc .",2
"improve <allcaps> abort </allcaps> handling in <allcaps> rtems </allcaps> unit test <section> if an unit testing error occurs that causes the test to abort , the implementation just calls the system <code> function . in <allcaps> rtems </allcaps> , this causes the entire system / kernel to shutdown . this leaves no ability to use the shell to check the system state or diagnose what went wrong . <section> defer handling of the abort to the <allcaps> bsp </allcaps> . in <allcaps> rtems </allcaps> , when the shell is available , this should just suspend the calling task to stop the tests , allowing the shell to continue being used . <section> this used to be the case , but probably an artifact of merging the <allcaps> ut bsp </allcaps> with regular <allcaps> bsp </allcaps> that this got lost in translation , and it only shows up if an abort failure occurs . fairly trivial / easy to add it back in though . <section> joseph hickey , vantage systems , inc .",2
"filesystem should differentiate between fs_based ( known ) and unknown filesystem types <section> the existing <code> type is used to cover basically any filesystem mapping that does not directly fall into the other categories ( e . g . normal_disk , volatile_disk , etc ) . this includes the traditional <code> types , which just map to another existing place in the filesystem . <section> the code should provide a unique value for <code> maps , which is a valid mapping type , as opposed to not knowing what mapping is being used . <section> distinction between known fs types and unknown types is required for running without volume table in <allcaps> bsp </allcaps> . <section> joseph hickey , vantage systems , inc .",2
"filesystem using wrong length for device_name field <section> the <code> field within the <code> is using a length of <code> , which is not correct / ideal . <section> the length should be <code> <section> this is an existing symbol defined in the <code> public <allcaps> api </allcaps> header file . noted when working on <allcaps> bsp </allcaps> volume table removal . <section> joseph hickey , vantage systems , inc .",0
"improve error code on <allcaps> rtems </allcaps> os_stat ( ) implementation <section> depending on the filesystem in use , the <allcaps> rtems </allcaps> <code> call might not be implemented at the filesystem level . in particular if it is called on the <allcaps> imfs </allcaps> filesystem type , it returns an error and sets errno to <code> . <allcaps> osal </allcaps> translates any error here to <code> , which is what gets returned to the application . ultimately this causes the filesystem unit test to fail when this filesystem type is in use . <section> preferable to return <code> in this case . in particular , unit tests already check for this , and will skip the test cases for this <allcaps> api </allcaps> , avoiding failure . this makes it a soft error . <section> joseph hickey , vantage systems , inc .",2
"portable select ( ) implementation needs to check filehandle "" selectable "" flag <section> not all file handles support the <code> <allcaps> api </allcaps> - - in particular on <allcaps> rtems </allcaps> it only works on sockets . the file implementation layer contains a boolean flag <code> for every file handle to indicate whether the file descriptor can be select ' ed upon . the implementation of this layer needs to confirm / check that the <code> flag is true before calling this <allcaps> api </allcaps> . <section> run the new <code> <allcaps> api </allcaps> unit tests on an <allcaps> rtems </allcaps> platform , which call this <allcaps> api </allcaps> on regular files . when it does so , this actually causes an exception and results in kernel panic / abort . <section> <allcaps> osal </allcaps> should return os_err_not_implemented or otherwise avoid calling <code> on filehandles which the kernel does not handle properly . <section> <allcaps> rtems </allcaps> <number> . <number> via <allcaps> qemu </allcaps> / pc686 <allcaps> bsp </allcaps> . <section> kernel panic result here is rather extreme - - one would have expected that the select ( ) call would simply return error and set an errno as usual . this probably also signifies an underlying bug in <allcaps> rtems </allcaps> . <section> joseph hickey , vantage systems , inc .",0
"add alternative source directory option for <allcaps> osal </allcaps> implementations <section> the <allcaps> osal </allcaps> build script always looks for <allcaps> bsp </allcaps> implementations in : <code> likewise it always looks for os implementations in : <code> this presents a challenge to for a user with a custom os / <allcaps> bsp </allcaps> implementation not within the mainline <allcaps> osal </allcaps> source tree , but wishes to use the github repo directly . <section> it should be possible to provide an external directory that the <allcaps> osal </allcaps> build can use . <section> create an <allcaps> osal </allcaps> fork or "" git subtree "" to assemble a full <allcaps> cfe </allcaps> / <allcaps> cfs </allcaps> repo , which allows one to add custom packages or patches they need . <section> the internal <allcaps> api </allcaps> between the <allcaps> bsp </allcaps> / os implementation components is not stabilized like the public <allcaps> api </allcaps> is , and can change any time . if directly using a "" master "" branch from github in conjunction with a locally - controlled implementation module , users may experience frequent breakage , as the component interface can change any time rendering it incompatible with their local version . in contrast , although the fork / subtree approach does have a similar issue , it does not happen "" automatically "" - it requires a specific user action to pull and merge the new "" master "" so it creates a buffer that avoids unsolicited breakage . this feature should come with a big disclaimer that says its for debug / development only , not to use it in production . <section> joseph hickey , vantage systems , inc .",2
"make bsps more generic <section> users requiring custom <allcaps> psp </allcaps> packages should not need to create both - - a <allcaps> cfe psp </allcaps> and <allcaps> osal bsp </allcaps> . the existing <allcaps> osal bsp </allcaps> should be used whenever possible . the "" mcp750 - vxworks "" <allcaps> bsp </allcaps> ( at least ) is not particularly hardware - specific and should be usable on any vxworks platform . likewise "" pc - linux "" should be usable on any generic linux platform . the main purpose of the <allcaps> osal bsp </allcaps> is just to provide an entry point to get into the common / modular code . <section> rename these bsps to be generic and allow use by many psps . <section> user needs to add a custom <allcaps> bsp </allcaps> for each board . <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , add check against os_max_queue_depth <section> the <code> function will now sanity check the depth parameter against the configured os_max_queue_depth value . if it is too large , an error will be returned . this is a hard limit and independent of the "" permissive "" mode . the os_max_queue_depth should be configured to the largest value that an application may reasonably request . fix # <number> <section> confirm <allcaps> cfe </allcaps> framework starts and operates normally ( but see nasa / to_lab # <number> ) confirm <allcaps> osal </allcaps> unit tests pass <section> <code> will return an error code if the depth parameter is larger than the configured <code> . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",2
"more doxygen warnings <section> further doxygen warnings should be resolved <section> steps to reproduce the behavior : <number> . build documentation using <code> <number> . observe warnings in <code> <section> no warnings should occur <section> the currently observed warnings are recurring . we should baseline best practices so that these do not continue to recur <section> leor bleier , <allcaps> nasa gsfc </allcaps> \ code <number>",0
"os_converttoarrayindex and os_timebasegetfreerun <allcaps> segfault </allcaps> when passed in a <allcaps> null </allcaps> pointer <section> os_converttoarrayindex and os_timebasegetfreerun <allcaps> segfault </allcaps> when passed in a <allcaps> null </allcaps> pointer as the second input instead of handling the <allcaps> null </allcaps> pointer and returning an error . <section> steps to reproduce the behavior : <number> . checkout branch fix374 - <number> - object - utilities - missing - tests in osal <number> . go to path : cfs / osal / src / tests / idmap - api - test <number> . build and run with the following in the main function : os_converttoarrayindex ( bin_sem_id , <allcaps> null </allcaps> ); <number> . checkout branch fix380 - add - timebase - api - functional - tests <number> . go to path : cfs / osal / src / tests / time - base - api - test <number> . build and run with the following in the main function : os_timebasegetfreerun ( time_base_id2 , <allcaps> null </allcaps> ); <section> os_converttoarrayindex and os_timebasegetfreerun <allcaps> segfault </allcaps> when passed in a <allcaps> null </allcaps> pointer , should handle the <allcaps> null </allcaps> pointer and return an associated error code . <section> ( path : cfs / osal / src / tests / idmap - api - test ) uint32 bin_sem_id ; os_binsemcreate ( & bin_sem_id , "" binsem "" , <number> , <number> ); actual = os_converttoarrayindex ( bin_sem_id , <allcaps> null </allcaps> ); expected = os_err_incorrect_obj_type ; utassert_true ( actual = = expected , "" os_converttoarrayindex ( ) ( % ld ) = = % ld "" , ( long ) actual , ( long ) expected ); output : the following tests <allcaps> failed </allcaps> : <number> - idmap - api - test ( <allcaps> segfault </allcaps> ) <section> cfs dev server os : ubuntu <number> versions : <allcaps> osal </allcaps> <number> . <number> <section> yasir khan <allcaps> nasa gsfc </allcaps>",0
<hashtag> include </hashtag> < sys / signal . h > from os - posix . h causes compiler warnings in alpine linux <section> when trying to build the cfs bundle using alpine linux using the musl library we get a gcc error : <code> from my seaarches it seems that <code> is an older implementation . <section> build and run the following docker image <code> build and run the container : build : <code> docker run - it - - rm cfs - bundle : alpine <code> os - posix . h : <number> <code> <hashtag> include </hashtag> < sys / signal . h > ` <section> docker desktop <number> . <number> <allcaps> osx </allcaps> <number> . <number>,0
"deprecate ostask_id field from os_task_prop_t <section> this field is not necessarily applicable to all os types and it breaks the abstraction . <allcaps> osal </allcaps> should not be reporting the raw / unabstracted values back to the application . this field is fundamentally broken in any environment where the underlying os task id is not convertible to a <code> . this includes real systems , such as : - cygwin , where <code> is a compound data type , not an integer ( <allcaps> posix </allcaps> specifically allows this ) - systems where the task id is actually pointer to the <allcaps> tcb </allcaps> ( in which case it will be <number> bits on <number> bit systems ) currently this field serves one purpose , which is to allow the <allcaps> cfe es </allcaps> exception processing to find the <allcaps> osal </allcaps> task id associated with the exception . however , this design is being reworked in nasa / cfe # <number> where more of the exception processing is done in the <allcaps> cfe psp </allcaps> . with this , there should be no need for applications to ever use the <code> member . <section> the <code> member of <code> should be marked as deprecated . as a replacement , an new <allcaps> api </allcaps> can be added which can be invoked by the <allcaps> psp </allcaps> / <allcaps> bsp </allcaps> to aid in exception processing . this new <allcaps> api </allcaps> should use an abstract pointer and size , not assume that the task identifier information fits within a <number> - bit integer . <section> joseph hickey , vantage systems , inc .",2
"add double - lock detection for <allcaps> osal </allcaps> mutexes as a debug option <section> a recent issue in nasa / cfe # <number> was due to an application double - locking the same mutex from the same task . this wasn ' t detected during testing because <allcaps> posix </allcaps> allows this recursive locking . however , other <allcaps> rtos </allcaps> ' s do not allow it , nor is it intended behavior . <section> <allcaps> osal </allcaps> should check / enforce that a single task id only takes a mutex once , and must release it before locking again . violations of this pattern should be reported to the debug console , so they can be addressed by the developer . as there is a small overhead cost to doing this , it can be selectively enabled as a debug feature , and remain off by default . <section> see nasa / cfe # <number> <section> joseph hickey , vantage systems , inc .",2
"simplify config by inferring osal_system_ostype from osal_system_bsptype <section> currently the build requires that the user specify both osal_system_bsptype and osal_system_ostype . this is redundant because each <allcaps> bsp </allcaps> only works with a specific os . <section> the user should be allowed to specify only osal_system_bsptype , and the correct os layer can be inferred automatically . <section> continue as is , which increases user config burden and risk of misconfiguration <section> see also nasa / cfe # <number> <section> joseph hickey , vantage systems , inc .",2
"use a better time representation in os_stat call <section> the <code> call currently returns the file time as an <code> member within the <code> structure , as defined here : <url> this is not really documented in the <allcaps> api </allcaps> but the field is a traditional <allcaps> unix </allcaps> - style timestamp , which is seconds elapsed since <date> <allcaps> utc </allcaps> . this type of timestamp suffers from the "" year <number> "" bug , where the int32 value rolls over and becomes negative . although this is <number> years from now , at the timescales of space software development cycles , it is entirely possible that coding being developed now will still be in service at the time this happens , so it should be fixed sooner rather than later . <section> there are two fixes needed : <number> . use the <code> representation as used in <code> and <code> . this is just for consistency - should not use a different representation of time as the other <allcaps> api </allcaps> calls do . <number> . fix the <code> to accommodate larger timestamp values and / or use a different epoch ( latter would be risk but keep the structure the same size ) . <section> discussion regarding use of this field in nasa / cfe # <number> <section> joseph hickey , vantage systems , inc .",0
test_os_converttoarrayindex : tautological assertion <section> unit test <code> implements the following assertion : <url> this is a tautological assertion as it compares <code> with itself . <section> n / a ( code analysis ) <section> <code> should be compared with <code> : <code> <section> see above . <section> n / a ( code analysis ) <section> n / a <section> guillaume lethuillier - personal,0
"test # <number> : osal - core - test failure <section> test # <number> : osal - core - test fails . <section> steps to reproduce the behavior : note : this test was not readily repeatable , but it failed <number> / <number> times on this branch : fix413 - add - reference - to - osal - users - guide - from - readme <number> . go to branch stated above <number> . run build / exe / cpu1 / osal - core - test <section> the test failed <number> / <number> times . specifically , failure is due to the code snippet noted below in osal - core - test . c , line <number> where a small time delay is supposed to occur and the child task is perhaps not exiting before the os_taskdelete call happens , so it ' s returning success . <section> [ <allcaps> fail </allcaps> ] <number> osal - core - test . c : <number> - os_taskdelete , self exiting task <section> <allcaps> gnome vm </allcaps> os : ubuntu <number> versions : <allcaps> osal </allcaps> <number> . <number> <section> this may be due to the vm delay . <section> yasir khan <allcaps> nasa gsfc </allcaps>",0
"fix # <number> , add reference to osal user ' s guide from readme fix413 : added reference to osal user ' s guide from readme <section> steps taken to test the contribution : <number> . went to github to verify that that link added worked properly <section> none <section> - <allcaps> gnome vm </allcaps> - os : ubuntu <number> - versions : <allcaps> osal </allcaps> <number> . <number> <section> yasir khan <allcaps> nasa gsfc </allcaps>",1
separate cmake coverage logic and resolve clang support issue <section> - pg option is not supported by clang in <allcaps> os x </allcaps> <number> and later <section> consider a coverage . cmake implementation similar to the example : <url> see comments on # <number> . <repeated> ( really relating to # <number> ) . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"ci improvements - better support of local and cross - platform testing <section> command implemented in . travis . yml does not support local or cross - platform testing <section> implement as makefile , ansible playbooks , or invoke in a way that supports future build verification plan ( cross - platform / docker / <allcaps> qemu </allcaps> based ) . see <url> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"os_shelloutputtofile missing functional test <section> no functional test for os_shelloutputtofile <section> add functional test . needed for build verification for any system that includes this capability . <section> at one point discussed removing this <allcaps> api </allcaps> , but <allcaps> ccb </allcaps> decided to make it optionally included <section> # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
add reference to <allcaps> osal </allcaps> user ' s guide from <allcaps> readme </allcaps> . md <section> user ' s guide is built and not included in repo <section> reference <url> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
implement coverage tests for posix <section> coverage tests not implemented for posix <section> add coverage tests <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"fix # <number> , resolve doxygen warnings for main doc <section> fixes # <number> by removing a duplicate reference the doxygen warned about <section> steps taken to test the contribution : <number> . edited file in which error occurred <number> . rebuilt documentation using <code> <number> . observed no warning generated <number> . viewed relevant documentation page to verify correctness <section> leor bleier <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",1
"break up osapi - os - core . h into more focused includes <section> spawned from # <number> discussion - osapi - os - core . h is a monolithic include covering a vast array of apis , which makes changes harder conceptually separate and manage . <section> break up osapi - os - core . h - could use the deprecation process to avoid breakage where osapi - os - core . h just includes all the more focused headers . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
fix doxygen warnings <section> doxygen generates warnings when building the documentation <section> steps to reproduce the behavior : <number> . do a <code> in the <code> directory <number> . observe the warnings in <code> <section> no warnings should be generated . <section> leor bleier <allcaps> gsfc </allcaps> \ <number>,1
"error code documentation updates related to enforcement / test <section> see # <number> for related issue / discussion . lacking documented approach for return code checking across functional tests . <section> <number> . update the error code list in <allcaps> api </allcaps> documentation to state : <code> <number> . typical return code documentation ( for just execution status ) : <code> <number> . scrub <allcaps> api </allcaps> error code documentation with the concept functional tests will verify the error codes explicitly defined , should just be a general set ( not implementation unique ) . <section> see discussion in # <number> <section> coverage tests are expected to verify every implemented return code ( white box ) . functional tests are <allcaps> api </allcaps> based . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",1
"simplify unit tests with utassert . h macros <section> currently a lot of <allcaps> osal </allcaps> unit test code is like the following ( basically , run code , check the result , "" force "" an assert that it worked or did not work ) : <code> <section> instead , this can be simplified to : <code> <section> a clear and concise description of any alternative solutions or features you have considered . <section> add any other context about the feature request here . <section> <email>",2
"fix # <number> , make os_stream_state available with apis … it ' s needed by os_selectsingle ( ) <section> moves os_stream_state defines to os / inc / osapi - os - core . h as they are needed by os_selectsingle ( ) <section> can build unit tests ( being developed ) for os_selectsingle ( ) note that this is a prerequisite for # <number> and is related to # <number> all three should be pulled at the same time , or # <number> , # <number> then # <number> <section> <email>",0
"os_selectsingle ( fd , & selectflags , timeout ) users require os_stream_state_readable / os_stream_state_writable <section> in order to use os_selectsingle ( ) a user needs access to the <hashtag> defines </hashtag> for os_stream_state_readable and os_stream_state_writable but they are contained in osal / src / os / shared / os - impl . h not in osal / src / os / inc / . <repeated> <section> try to use the os_selectsingle <allcaps> api </allcaps> <happy> <section> these <hashtag> defines </hashtag> need to be moved to osal / src / os / inc <section> <email>",0
"os_selectfdzero / os_selectfdadd / os_selectfdclear / os_selectfdisset does not ensure set is ! = <allcaps> null </allcaps> <section> users of these <allcaps> api </allcaps> ' s will cause a seg fault if they call these functions with a null pointer . <section> call os_selectfdzero ( <allcaps> null </allcaps> ) , etc . <section> these <allcaps> api </allcaps> ' s should return an error code when provided a <allcaps> null </allcaps> pointer . <section> <code> <section> debian <number> <section> add any other context about the problem here . <section> <email>",0
"fix travis - ci config warnings <section> build config validation ( from travis - ci ) - root : deprecated key sudo ( the key <code> has no effect anymore . ) language : unexpected sequence , using the first value ( c ) root : missing os , using the default linux <section> see <url> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"update <allcaps> osal </allcaps> configuration guide , build instructions , directory references , etc <section> build instructions in doc / <allcaps> osal </allcaps> - configuration - guide . doc and . pdf have instructions for classic build . also the section on building the unit tests requires use of the classic build . <section> a new section needs to be written for building unit tests under cmake and the old classic build section needs to be removed ( and refs to the classic build in the cmake section need to be stricken . ) also note in <number> . <number> , setup the <allcaps> osal </allcaps> source distribution , that the <allcaps> osal </allcaps> source distribution directories are not aligned with our current directories . for example , osal / src / make and osal / src / inc no longer exists . <section> none <section> related to # <number> , # <number> , # <number> <section> chris knight - <allcaps> nasa </allcaps> / <allcaps> arc </allcaps>",1
"use cmocka for stubs <section> the cmocka ( <url> framework provides much the same functionality as our unit test stub framework , and is apache licensed . i suggest we replace our stub framework with cmocka ( and contribute any required capabilities to the cmocka project if it does not currently cover all our needs . ) <section> use cmocka . <section> i am sure there are lots of other unit test frameworks . cmocka seems simple , capable , and easy to incorporate into cfs . <section> add any other context about the feature request here . <section> <email>",2
os_timeradd missing functional test <section> functional test missing for os_timeradd <section> add test <section> none <section> certification issue <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"timebase <allcaps> api </allcaps> missing functional tests <section> os_timebasecreate , os_timebaseset , os_timebasedelete , os_timebasegetidbyname , os_timebasegetinfo , os_timebasegetfreerun all missing functional tests <section> add tests <section> none <section> certification issue <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
os_filesysaddfixedmap missing functional test <section> missing functional test for os_filesysaddfixedmap <section> add test <section> none <section> certification issue <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
os_timedread and os_timedwrite missing functional tests <section> os_timedread and os_timedwrite missing functional tests <section> add tests <section> none . <section> certification issue <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"<allcaps> osal </allcaps> select apis missing functional test <section> os_selectmultipe , os_selectsingle , os_selectfdzero , os_selectfdadd , os_selectfdclear , os_selectfdisset all missing functional tests <section> add tests <section> none <section> certification issue . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add object utility <allcaps> api </allcaps> functional tests <section> os_identifyobject , os_converttoarrayindex and os_foreachobject missing explicit functional tests <section> add tests <section> none . <section> certification violation <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> osal </allcaps> network apis missing functional tests <section> seems there ' s not really any unit tests for the <allcaps> osal </allcaps> networking code . <section> should have unit tests . <section> not having unit tests ? <section> note that to do unit testing , it ' s likely we will need to stub out os - provided <allcaps> api </allcaps> ' s ( open , select , socket , bind , accept , close ( ) . ) do we have a standard framework for stubbing out os - provided functions ? <section> <email>",2
"<allcaps> osal </allcaps> fs defines scrub - deprecate os_volumetable and related symbols <section> fs_based , ram_disk , eeprom_disk , ata_disk , num_table_entries all missing os_ prefix os_chk_only and os_repair defined , but the input to the expected <allcaps> api </allcaps> is a boolean ( bool repair ) <section> add prefix , remove unused defines <section> none <section> do after # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add ut assert ability to set a buffer position <section> ut assert has a feature to associate data buffers with stub routines to facilitate data passing between the stub and the test case . for cases with "" random access "" requirements ( e . g . <allcaps> es cds </allcaps> , mem pools , etc ) cases there is a <code> <allcaps> api </allcaps> which also gets the current position within the buffer ( its tail ) , but there is no related <allcaps> api </allcaps> to actually set the position . <section> should add another stub <allcaps> api </allcaps> so that a stub routine can also directly set the tail position without needing to use <code> as a workaround . <section> setting the position can be done by calling <code> or <code> but this can can be ugly and convoluted in cases where the stub does not have actual data to copy . both of these copy data in addition to moving the tail position , so its less than ideal if the stub only needs to adjust the tail position and not copy data . <section> joseph hickey , vantage systems , inc .",2
"<allcaps> api </allcaps> doxygen scrub <section> doxygen documentation out of date <section> format / layout changes : - table - fy return values ( and eliminate some pdf build errors / warnings ) - make links from text where appropriate - documented <allcaps> osal </allcaps> return codes - add parameter direction where missing - added explicit grouping where appropriate ( and group references ) - group <allcaps> api </allcaps> ' s and reference from main page - marked os_taskregister as deprecated in documentation ( no code change yet , that ' s # <number> ) - marked exception handling as deprecated in doc ( code change is # <number> ) - marked shmem as deprecated in doc ( code change is # <number> ) - added missing descriptions and parameter definitions - added clock address rounding comments related to # <number> ( partial resolution ) - delete old <allcaps> osal api </allcaps> doc and pdf information changes : - internal file descriptor not accessible ( recommend against mixing direct calls with osal apis ) - noted os_translatepath is available to use with open directly by an app <section> none <section> related issues : # <number> , # <number> , # <number> partial : # <number> , # <number> , # <number> , # <number> <section> full name and company / organization if applicable",1
""" duplicate symbol ' _main ' "" on macos when building tests <section> this is one of the issues addressed by # <number> . i am extracting it hereby to be considered separately from the rest of my work of macos port . i am getting linker errors on macos because the test targets link in <code> library that has a <code> function and they link <code> which has a <code> that launches tests . this causes a conflict with these test target ' own main ( ) function as follows : <code> <section> usually the cases like this resolved by extracting the main function from one of the conflicting libraries . in this case it could make sense to extract the <code> function from <code> to a separate library such as <code> or <code> to avoid any conflicts with test targets . that separate library would then not be linked to the tests and the conflict would go away . <section> there seems to be no alternative to this behavior on macos . you either have one <code> function or there is a conflict . <section> this is a more complete fragment of the output : <code> <section> stanislav pankevich",0
"os / shared / osapi - module . c : the return value of the call to os_moduleload_impl should be checked <section> i have noticed this issue while working on making the <allcaps> osal </allcaps> ' s tests pass on macos ( see # <number> ) . i am reporting this issue separately from the rest of the changeset suggested there . the issue is in the following fragment of code as found in the current master branch ( as of <url> <code> we can see that the return value of the <code> is not tested for <code> so the execution can continue even if the call to this function returns an error . this is a direct link to the line : <url> <section> most of the code in <allcaps> osal </allcaps> does check the return values : <code> or <code> so it makes sense to create such a check in this case too . i am going to create a pull request that addresses this issue . <section> to the best of my knowledge , a proper return value checking is the only way to get fast feedback from a call to the <code> if something goes wrong . <section> none . <section> stanislav pankevich , independent contribution .",2
"add os_queuegetname ( ) <section> cfe will have a function to get a pipe ' s name given its id , which will call down to <allcaps> osal </allcaps> to get the name from the queue . currently this is accomplished with os_queuegetinfo ( ) but that requires a pointer to a struct buffer . <section> a convenience function should be added to retrieve a queue ' s name given its id without the need to pass in a struct buffer ( instead passing in a string buffer . ) <section> could maintain the status quo , this is a convenience function . <section> add any other context about the feature request here . <section> <email>",2
"os_moduleload_impl function header does not match definition <section> when os_include_module_loader is not defined , the function header does not match the definition : <code> this issue was introduced in pr # <number> . <section> build with <code> not defined . <section> build succeeds .",0
"fix # <number> : make parameter const <section> when os_include_module_loader is not defined , the function header does not match the definition . this issue was introduced in pr # <number> . longer term : is there a continuous integration strategy to avoid this sort of situation happening in the future ? <section> build with module loader disabled with cfs master distribution . <section> none <section> - pc , ubuntu <number> <section> andrei - costin zisu of planetary transportation systems gmbh ( berlin , germany ) . company - wide <allcaps> cla </allcaps> is in the process of being signed and should be available soon .",0
"split shell code out to support optional inclusion <section> execute in shell functionality is undesirable for some security conscious applications . <section> allow for optional inclusion ( like network option ? ) , respond as not implemented when not included . <section> discussed security at length , diverse use cases require flexibility for user to decide . <section> <allcaps> posix </allcaps> issue found in <allcaps> lgtm </allcaps> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"<allcaps> wip </allcaps> : os / posix : port of the posix implementation to macos <section> this is an ongoing attempt to make the <allcaps> cfs </allcaps> / <allcaps> osal </allcaps> work on macos . i am opening this is as a work - in - progress pull request because there are many things that have to be addressed . rough plan of the work ( major points ) : - necessary ports : - [x ] mqueue ( based on memory - mapped files , portable but needs verification ) - [x ] pthread_setschedprio ( portable ) - [x ] sem_ * : - [x ] the mac_sem_ * implementation is based on pthread_mutex and pthread_cond ( portable ) - [x ] the mac_sem2_ * implementation is based on <allcaps> gcd </allcaps> semaphores ( macos specific ) - [x ] clock_nanosleep ( portable but needs verification ) - [x ] timer_ * ( portable , but the implementation is rather limited and tailored to what <allcaps> cfs </allcaps> does ) - [x ] all of the tests as found in the changeset ' s <code> are passing . one could use this makefile as a starting point for working with this changeset . - ] nasa / osal should have a proper ci and test scripts that could be used for verifying this work . this is still open and it looks like a dependency for this macos - related work : <url> until then , this pr uses a [ custom test suite <url> . - x] [ fix # <number> , fix memory corruption produced by misplaced memset ( ) <url> has to be merged . - [ ] decision has to be made if : <number> ) a separate folder for macos has to be created as a full copy of posix . or <number> ) macos support could be enabled with a number of <code> s . i would go with the approach <number> with a separate macos folder to maintain clear distinction between linux and macos given that macos will most likely always be only a development / simulation target which means that the lack of the <code> stuff on macos is not a problem and its simulation is ok . - x] <code> of src / bsp / pc - linux / src / bsp_start . c [ conflicts ] ( <url> with the <code> of the unit tests . open and fixed here : [ "" duplicate symbol ' _main ' "" on macos when building tests # <number> <url> . - ] this port only makes sense if the related [ elf2cfetbl # <number> <url> is approved and incorporated . otherwise it is not possible to run <allcaps> cfs </allcaps> and have correct <code> files on macos . - [ ] non - portable code coverage flag , opened here : <url> some important comments : - it is not the first time that i am trying to make something work on macos so i had some code in my pockets already . i have collected the <allcaps> posix </allcaps> functions which were missing on macos to a separate project : posix - mac - addons <url> . for now , i am simply copying the <code> contents of that project to the root of the <code> repository . please see the comments on the implemented functions on that project ' s <allcaps> readme </allcaps> page as well . - i have built this branch from <number> different macos machines and i can confirm that everything seems to work on my end : building them from a clean tree and running the tests . both are mojave though , so i cannot promise that everything will work on catalina ( many things are breaking for those who have upgraded so upgrading this changeset to catalina could be a separate action ) . - all of the tests as found in the changeset ' s <code> are passing . one could use this makefile as a starting point for working with this changeset . - i was not sure whether i should have created the <code> port or simply hack on top of <code> . i decided to go for latter because it is now easier to see on the diff what is different . however , if there is an interest in getting this merged , it is not clear to me what would be the right solution : keep <code> with lots of ifs or create a dedicated <code> one . - both implementations of the semaphores are passing the tests . this changeset is using the one which is <code> based on the <allcaps> gcd </allcaps> semaphores . the following important detail explains why the implementation is a bit more sophisticated . without this detail some of the tests are crashing . i guess , this could be fixed by simply ensuring that the semaphores in the tests are used in a balanced way . ` ` <code> <allcaps> bug in client of libdispatch </allcaps> <code> mac_sem2_ *< code > ` <code> posix - mac - addons <code> posix - mac - addons ` available as a standalone repository that will have a <allcaps> mit </allcaps> license . i would like to know your thoughts on if / how this third - party code could be integrated then . <section> stanislav pankevich , personal the signed individual <allcaps> cla </allcaps> has been sent to the email specified in the <allcaps> cla </allcaps> document .",2
"build instructions in top level <allcaps> readme </allcaps> are incorrect <section> followed the build steps as in the <allcaps> readme </allcaps> file but the build is not successfull . error : <code> <section> steps to reproduce the behavior : <number> . clone the latest build <number> ( <number> - jan - <number> ) or the commit 7 8 1 9 9 2 ce2c0df067ebd84779615bf1ebf6ef7de5 <number> . follow the build steps as mentioned in the <allcaps> readme </allcaps> file <number> . source setvars . sh <number> . cd build <number> . make config <number> . make <section> successful build <section> if applicable , add references to the software . <section> - hardware : pc - linux - os : [ ubuntu <number> ] - versions [ osal_5 . <number> ] <section> add any other context about the problem here . <section> waheed ejaz",1
"os_socketaccept fails <section> when using os_socketaccept on a stream ( <allcaps> tcp </allcaps> ) server socket , it fails because the accept code calls os_objectidgetbyid ( ) passing a os_lock_mode_refcount , but then os_socketaccept sees the refcount > <number> and fails out . <section> create code ( e . g . an app ) that creates a <allcaps> tcp </allcaps> socket server and try using os_socketaccept ( ) to receive the incoming connections . <section> os_socketaccept should work as expected / documented . <section> os_sockaddr_t addr ; int socket = <number> , clientfd ; int32 status = <number> ; os_socketaddrinit ( & addr , os_socketdomain_inet ) ; os_socketaddrfromstring ( addr , "" <number> . <number> "" ); os_socketopen ( & socket , os_socketdomain_inet , os_sockettype_stream ) ; os_socketbind ( socket , & addr ) ; status = os_socketaccept ( socket , & clientfd , & addr , <number> ); <section> debian <number> <number> - bit x86 <section> removing the check for refcount results in expected behavior , os accept ( ) call should be thread - safe so need not maintain lock through socketaccept ( ) function . <section> chris knight , <allcaps> nasa </allcaps> ames",0
"reevaluate signal handling in <allcaps> posix </allcaps> <section> there may be some inefficiencies / room for improvement in how <allcaps> posix </allcaps> is handling the signal masks , that should be evaluated and considered . for the rt signals , these are masked all the time and timers use <code> to synchronously receive them . however that potential to leave stray signals queued . this has been worked around by ensuing that no signals are queued before setting up a timer , but there may be a more efficient way to accomplish this . <section> consider setting all the unused signals to "" <allcaps> ignore </allcaps> "" such that the kernel will not even deliver them to the process , rather than masking them at the process . ~ signal masks are also changed as part of the global lock / unlock procedure what may not be necessary . this should be re - evaluated with the current <allcaps> osal </allcaps> design . historically this may have been necessary for async signals but the current <allcaps> osal </allcaps> now avoids async signals for all <allcaps> osal </allcaps> - created tasks . ~ already done in # <number> /# <number> <section> leave as - is . <section> see related issue # <number> <section> joseph hickey , vantage systems , inc .",2
"add <allcaps> osal </allcaps> library build , coverage test , and functional tests to ci <section> ci does not build or execute tests for <allcaps> osal </allcaps> related to conversation on <url> <section> ideally create a makefile with a set of rules to cover building , running tests , and reporting coverage ( pattern after bundle build ) which allows for users to easily do the same thing once created , put into ci <section> some of the actions are detailed in <url> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"os_dirent_t . filename uses os_max_path_len for array size typedef struct { char filename [ os_max_path_len ] ; } os_dirent_t ; it ' s probably the case that filename should be of os_max_file_name size instead . the use case is to build a filename from a path and a filename from an os_dirent_t . this path , including the filename , would be os_max_path_len .",2
"remove classic build artifacts <section> classic build no longer supported . <section> remove all associated artifacts : build directory , all * . mak directories , setvars . sh <section> none <section> makes # <number> obsolete <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"possible bug in os / posix / osapi . c when running osal - core - test / <allcaps> bsem </allcaps> tests . <section> i apologize in advance in case the issue i am reporting is caused by my misunderstanding of the <allcaps> osal posix </allcaps> code and the problem is rather somewhere on my end . i am trying to port the <allcaps> posix osal </allcaps> code to macos . it is a rather long adventure but it looks like there can be a happy end . by now i am going through all of the unit and integration tests in this repository in order to see which things have to be changed in order to run on macos . this issue i have first reported on stackoverflow because i thought the problem was on the macos side : calling pthread_cond_destroy results in “ function not implemented ” <allcaps> enosys </allcaps> on macos <url> . <code> results in <code> as i am running it on macos . looking at the code further i have found that there might be a bug in the <code> function along these lines : <code> i would like to highlight that the <code> happens <allcaps> after </allcaps> the <code> line which means that <code> corrupts the work that is done by <code> . if i put the <code> string <allcaps> before </allcaps> the <code> line , the <code> test passes . <section> i am reproducing this on a private fork of <code> and it is a very hacky branch to make it work on macos . at the moment i can only suggest to do a mental reasoning about the critical lines : <code> and <code> lines as i described above . <section> this is how the test log looks like with my change above and this is what i expect to always happen : <code> <section> if applicable , add references to the software . <section> - macbook pro ( <number> - inch , <number> , four thunderbolt <number> ports ) - os : macos mojave <number> . <number> ( 1 8 g87 ) - versions <allcaps> osal </allcaps> repository build from this commit : <code> <section> this is how the issue manifests itself ( i am only running the related tests ) . <code> this is the original stackoverflow report : ` ` <code> pthread_cond_destroy <code> pthread_cond_destroy <code> pthread_cond_ *< code > ` ` <section> stanislav pankevich",0
"osal_timer_ut periodic failure <section> osal_timer_ut periodically reports a failure on linux for the nominal os_timerset case <section> <number> . build and run <code> <section> should pass <section> see ut_ostimer_test . c for ut_os_timercallback ( the timer callback function ) see ut_ostimer_timerio_test . c line <number> for the failure location <section> - cfs dev <number> server - os : ubuntu <number> - versions : happened to be running the ic - <number> branches , but not unique ( historical issue ) <section> added after the tolerance check in the callback function : <code> failure result was seen due to unexpected first interval of <number> , where interval was set to <number> : <code> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"bin - sem - flush - test reporting work incorrectly <section> there is an issue in bin - sem - flush - test . c . within the binsemflushcheck function - lines <number> , <number> , <number> , and <number> contain the wrong variable name ( task_1_work as opposed to task_2_work & task_3_work ) . <section> run test . <section> expect "" task <number> / <number> work = % u "" to correspond with task_2 / 3 _work variables . <section> void binsemflushcheck ( void ) { int32 status ; /* at first , no task should have done any work yet ( all blocked ) */ utassert_true ( task_1_work = = <number> , "" task <number> work = % u "" , ( unsigned int ) task_1_work ) ; utassert_true ( task_2_work = = <number> , "" task <number> work = % u "" , ( unsigned int ) task_1_work ) ; utassert_true ( task_3_work = = <number> , "" task <number> work = % u "" , ( unsigned int ) task_1_work ) ; status = os_binsemflush ( bin_sem_id ) ; utassert_true ( status = = os_success , "" binsem1 flush rc = % d "" , ( int ) status ) ; /* after more delay the work done should be nonzero on all tasks */ /* <allcaps> note </allcaps> - there is a slight race condition here as the task could be blocked * by something else other than the bin sem . */ os_taskdelay ( <number> ); utassert_true ( task_1_work ! = <number> , "" task <number> work = % u "" , ( unsigned int ) task_1_work ) ; utassert_true ( task_2_work ! = <number> , "" task <number> work = % u "" , ( unsigned int ) task_1_work ) ; utassert_true ( task_3_work ! = <number> , "" task <number> work = % u "" , ( unsigned int ) task_1_work ) ; utassert_true ( task_1_failures = = <number> , "" task <number> failures = % u "" , ( unsigned int ) task_1_failures ) ; utassert_true ( task_2_failures = = <number> , "" task <number> failures = % u "" , ( unsigned int ) task_2_failures ) ; utassert_true ( task_3_failures = = <number> , "" task <number> failures = % u "" , ( unsigned int ) task_3_failures ) ; } <section> na <section> na <section> dan knutsen <allcaps> nasa </allcaps> goddard space flight center",2
"lgtm issues for os - impl - posix - files . c , osapi - filesys . c <section> os - impl - posix - files . c <code> osapi - filesys . c <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"assert return codes specified in <allcaps> api </allcaps> in functional tests i noticed that osal - core - test . c only tests if the function returns os_success or does <allcaps> not </allcaps> return os_success . it does not actually test that the return code is correct . for example , the test to ensure that the <allcaps> osal </allcaps> does not create a queue with a name that already exists does not actually test for os_err_name_taken . it merely passes if the return is not os_success . a quick spot check indicates this design pattern is systemic . these unit tests were used to certify ( per npr7150a ) the <allcaps> arinc </allcaps> <number> version of <allcaps> cfs </allcaps> . this requires requirements have tracing back to tests . testing the actual expected return code is a better pattern , but is required if there is an actual requirement defining the return codes .",2
"lgtm warning - misc . <section> reference issues # <number> posix / osfileapi . c <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"osal lgtm warning <section> reference issue # <number> . os - impl - bsd - sockets . c <code> shared / osapi - idmap . c <code> shared / osapi - sockets . c <code> shared / osapi - time . c <code> os - posix . h <code> <section> anh van , <allcaps> nasa </allcaps> goddard .",2
"recommended lgtm osal issues <section> recommended osal issues : osapi - os - core . h <code> osapi - module . c <code> shared / os - impl . h <code> posix / osnetwork . c <code> shared / osapi - select . c <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"sem - speed - test can run infinitely on some platforms <section> in the sem - speed - test , the main thread stops the test by doing a task delay and then deleting the worker tasks . when running on a hard real time kernel and a single processor system , if the worker threads are a higher priority than the main thread , then the main thread never gets <allcaps> cpu </allcaps> time to stop the test and it just runs infinitely . <section> run the test on a single - processor system such as vxworks or <allcaps> rtems </allcaps> where the originating ( shell ) task is a ( logically ) lower priority than <number> , which is the priority given to the worker tasks it creates . the test will never exit because the root task never gets <allcaps> cpu </allcaps> time again to cancel the worker tasks . <section> the test should never run infinitely , regardless of ( mis - ) configuration . <section> <allcaps> rtems </allcaps> <number> on i686 ( <allcaps> qemu </allcaps> ) <section> the worker tasks should employ some type of hard limit so they do not run infinitely even if the priority is higher than the root task . <section> joseph hickey , vantage systems , inc .",2
"coverage test failure in vxworks <section> the coverage test cases for <code> are failing : <code> <section> build <allcaps> osal </allcaps> coverage tests and execute <section> all tests should pass <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit <section> this was probably some fallout related to the vxworks timer fixups that were done recently (# <number> , # <number> ) but never noticed because the <allcaps> osal </allcaps> coverage test is still separate ( that aspect is also being addressed ) . <section> joseph hickey , vantage systems , inc .",2
"exception / interrupt <allcaps> api </allcaps> issues in <allcaps> osal </allcaps> <section> when running unit tests on the <allcaps> osal </allcaps> for the vxworks , <allcaps> posix </allcaps> , and <allcaps> rtems </allcaps> environments , it revealed a few minor issues on the implementation side that should be addressed . these are all in the interrupt / fpu / exception <allcaps> api </allcaps> areas for which the <allcaps> cfe fsw </allcaps> does not really rely upon . <number> . for <allcaps> posix </allcaps> and <allcaps> rtems </allcaps> , the <allcaps> fpu </allcaps> exception apis should all return <code> , because these are in fact not implemented . returning <code> , as some did , implies that the behavior took effect when it did not ( this matters to ut ) . these are : - <code> - <code> - <code> - <code> <number> . <allcaps> rtems </allcaps> does not provide a direct equivalent for the os_intenable / os_intdisable <allcaps> api </allcaps> like vxworks has . the implementation had been using rtems_intterupt_enable / disable for this , but the semantics of those calls are different ( they are more appropriate for os_intlock / os_intunlock ) . the enable / disable implementation should just return <code> . <number> . the <allcaps> rtems </allcaps> <code> / <code> implementation should use the "" local "" variant of the <allcaps> rtems </allcaps> interrupt enable / disable function . this is documented as being identical on single - processor machines but only the local variant is applicable to multi - processor machines . <number> . the <code> <allcaps> api </allcaps> accepts a pointer as an output buffer , so to be consistent with all other <allcaps> api </allcaps> calls that accept a pointer , it should check for <allcaps> null </allcaps> and return <code> in that case . <section> execute the <allcaps> osal </allcaps> unit tests ( including changeset for # <number> to enable full testing ) and some failures are reported due tot his . <section> all unit tests should pass . <section> - ubuntu <number> <allcaps> lts </allcaps> <number> - bit ( native / posix ) - <allcaps> rtems </allcaps> <number> on i686 / pc ( <allcaps> qemu </allcaps> - emulated target ) - vxworks <number> on <allcaps> ppc </allcaps> / mcp750 <section> joseph hickey , vantage systems , inc .",2
"add cppcheck to bsp and os <section> add cppcheck to osal / src / bsp and osal / src / os <section> anh van , <allcaps> nasa </allcaps> goddard",2
"code in "" unit - test "" should use ut assert <section> the tests in the "" unit test "" directory use an entirely different result reporting mechanism . although they do currently link with ut assert , they keep a local record of test cases and do not use any of the ut assert functions . this is a maintenance issue . the code makes extensive use of macros which makes it difficult to understand and also duplicates much of the logic that ut assert already has . furthermore , the tests do not run on all <allcaps> osal </allcaps> platforms ( e . g . <allcaps> rtems </allcaps> ) because the macros are incomplete , even though ut assert does support this platform . <section> build with enable_unit_tests = <allcaps> true </allcaps> and run all tests . the osal "" unit - tests "" produce entirely different log files than the rest of the tests . <section> the osal "" unit - tests "" should be more consistent in behavior and log file format with all the other tests . <section> - ubuntu <number> <allcaps> lts </allcaps> <number> - bit <section> this is becoming more of an issue due to a parallel effort to avoid clobbering <code> (# <number> ) . but this unit test build currently relies on <code> and os - specific definitions ( e . g . <code> , <code> , etc ) to pick the right macros to use . so this breaks the unit test if not setting <code> anymore . although it could probably be patched up again with some more hacks , it is probably worth some extra effort to just clean this up properly so it stops being a perpetual issue . since most things are macro based already , it is likely that simply changing the macro definitions to direct the output to ut assert instead of the local structure is probably sufficient . <section> joseph hickey , vantage systems , inc .",2
"<allcaps> osal </allcaps> cmake script should not force / overwrite cmake_c_flags <section> the <allcaps> osal </allcaps> build script currently configures several compiler flags by directly setting the <code> variable , and also setting it differently for unit test vs . <allcaps> fsw </allcaps> code . this was originally done for compatibility with very old cmake versions but this is no longer necessary , as any reasonable cmake version ( including v2 . <number> distributed in <allcaps> rhel </allcaps> / centos6 + ) have better commands to deal with target - specific flags ( e . g . target_compile_definitions , etc ) . overriding this variable is not ideal as it is expected to retain its value from the parent . <section> build <allcaps> osal </allcaps> using the current script and enable_unit_tests = <allcaps> true </allcaps> . cmake_c_flags is forcibly reset twice during the cmakelists . txt evaluation . <section> <code> should not be modified by the <allcaps> osal </allcaps> build script . it should preserve whatever value the parent had set ( if any ) and use the preferred commands ( e . g . target_compile_options , etc ) to manage the different flags required for ut and normal <allcaps> fsw </allcaps> code . <section> ubuntu <number> <allcaps> lts </allcaps> , <number> bit <section> joseph hickey , vantage systems , inc .",0
"cppcheck for os dir . <section> from issue # <number> <code> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"remove unsupported / untested bsps <section> old bsps are not within scope of the cfs framework and not tested <section> remove sis - rtems , mcf5235 - rtems , and sparc - vxworks6 . <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"cryptic failure when running <allcaps> cfs </allcaps> as non - root when running the <allcaps> cfs </allcaps> without elevated privileges , the output that indicates an os failure does not express errors with scheduler policy . the current output under these conditions is : <code> the origin of this issue comes from <url> a failure to set the schedule policy should probably have a special error message indicating both why it failed and the recommended course of action .",2
"compiler warnings in <allcaps> osal </allcaps> <section> some warnings still get triggered when building the coverage tests with high strictness flags , as they exercise some <allcaps> api </allcaps> calls that are not even used by the <allcaps> fsw </allcaps> code . so even though the <allcaps> fsw </allcaps> itself builds clean , when the coverage test is added it is no longer clean due to these issues . <section> build <allcaps> osal </allcaps> coverage tests with warnings / strictness flags , at least : <code> <section> should build warning free . <section> ubuntu <number> <allcaps> lts </allcaps> , <number> bit . <section> joseph hickey , vantage systems , inc .",2
"alternative approach to compile - time function substitutions for ut <section> currently , the <allcaps> osal </allcaps> coverage test overrides c library calls using a combination of a single "" override "" header file that correlates with the c library header file of the same name . this file declares stub versions of the same functions but with an <code> prefix . this is combined with a "" stub - map - to - real . h "" header that uses <code> statements to divert the original calls to the substitute ( <allcaps> ocs </allcaps> ) version at compile time . the c library calls need to be stubbed out in this manner , because they cannot be done at link time ( as the ut still needs to link with the real c library , unlike higher - level libraries ) . <section> put the <code> statements in the substitute header itself , rather than in a local map file , and move the <code> prototypes and declarations to a new , separate header file . <section> the existing method of using a separate map file to provide the substitutions , but this complicates the build of the source units under test as this file must be explicitly included somehow . <section> the change alleviates the need to inject the <code> file as part of the compilation of the source unit under test , as it gets the overrides implicitly though the include path instead , so it simplifies the build for ut that needs this feature . the trade - off is that it requires a _pair_ of override headers for each real header being overridden , i . e . one for the <code> replacements and one for the actual <code> statements to do the mapping . so for the <allcaps> osal </allcaps> coverage test , which override headers for about <number> different system headers , this adds quite a few files . <section> joseph hickey , vantage systems , inc .",2
"os_sockaddr_t alignment issue on some architectures <section> on some <allcaps> cpu </allcaps> architectures that have strict alignment requirements , the os socket address storage buffer triggers a warning / error about casts that increase alignment . for example : <code> <section> build on an architecture that has strict alignment requirements ( e . g . <allcaps> sparc </allcaps> , <allcaps> mips </allcaps> , etc ) <section> should build cleanly , no warnings . <section> - <allcaps> mips </allcaps> linux ( <allcaps> qemu </allcaps> ) <section> not likely to be a "" real "" alignment issue as this specific instance follows a uint32 value , so it will already have <number> bit alignment already . adding a union wrapper will squelch the warning though . <section> joseph hickey , vantage systems , inc .",0
"alternative entry point for ut - assert based test applications <section> applications which utilize the ut assert library to do testing ( either functional or coverage ) share the same entry point with "" normal "" <allcaps> osal </allcaps> applications , specifically the <code> function . for testing , this is not ideal as there is some extra setup / teardown when using ut assert . this prevents using the <allcaps> osal </allcaps> - provided <allcaps> bsp </allcaps> directly and necessitates an alternative <allcaps> bsp </allcaps> that includes the extra setup / teardown . if the ut assert based applications used a differently - named entry point , this could be properly layered and some duplicate logic in the <allcaps> osal </allcaps> bsps can then be removed . <section> build with enable_unit_tests = <allcaps> true </allcaps> , and observe that the system builds a ut - bsp in addition to the normal <allcaps> osal bsp </allcaps> . on pc - linux for instance , both of this libraries include a <code> function . the difference is that the ut - bsp includes extra ut assert setup / teardown logic before and after the call to os_application_startup ( ) . it also duplicates the <code> object . <section> the <code> routine and <code> should _not_ be duplicated . rather , the ut assert setup / teardown should be an extension layer to the normal <allcaps> bsp </allcaps> . <section> ubuntu <number> <allcaps> lts </allcaps> , <number> bit <section> joseph hickey , vantage systems , inc .",2
"expand resource object query options while integrating file manager app <number> . <number> with cfe <number> . <number> ( <allcaps> osal </allcaps> <number> . <number> ) i ran into an issue . fm has a command that allows users to receive a telemetry packt listing all of the open files . in order to do this fm needs to be able to query <allcaps> osal </allcaps> ' s file stream resource objects . the current implementation only allows a creator to query all of the resources objects by using os_foreachobject ( ) . i think having a more general query feature would be helpful . i added a new function os_queryobjecttype ( ) that allows anyone ( not restricted to the creator ) to query a resource type . the specific <allcaps> osal </allcaps> changes are below followed by the fm code that uses the function . these changes were made for openstakit <number> that can be found at <url> # # osapi - os - core . h : /* * * typedef for object query <allcaps> osal </allcaps> callback functions . a query does not * * have to be performed by the object creator . all fields of the * * query_record are completed . * * * * this may be used by multiple apis */ typedef struct { const char * name_entry ; uint32 creator ; uint16 refcount ; } os_query_record_t ; typedef void ( * os_objquerycallback_t ) ( os_query_record_t * query_rec , void * callback_arg ) ; / / dcm - added for <allcaps> osk </allcaps> /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */ /* * * <user> query an object resource type maintained by the <allcaps> osal </allcaps> * * user supplied callback is called for all active resources of a particular type * regardless of whether the caller created the object . * */ uint32 os_queryobjecttype ( uint32 obj_type , os_objquerycallback_t callback_ptr , os_query_record_t * query_rec , void * callback_arg ) ; / / dcm - added for <allcaps> osk </allcaps> # # osapi - idmap . c : /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - * * function : os_queryobjecttype * * purpose : implemented per public <allcaps> osal api </allcaps> * see description in <allcaps> api </allcaps> and header file for detail * * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */ uint32 os_queryobjecttype ( uint32 obj_type , os_objquerycallback_t callback_ptr , os_query_record_t * query_rec , void * callback_arg ) { uint32 obj_index ; uint32 obj_max ; uint32 obj_id ; uint32 active_obj_cnt = <number> ; os_common_record_t * obj_rec ; obj_max = os_getmaxforobjecttype ( obj_type ) ; if ( obj_max > <number> ) { os_lock_global_impl ( obj_type ) ; obj_index = os_getbaseforobjecttype ( obj_type ) ; while ( obj_max > <number> ) { obj_rec = & os_common_table [ obj_index ] ; obj_id = obj_rec - > active_id ; if ( obj_id ! = <number> ) { query_rec - > name_entry = obj_rec - > name_entry ; query_rec - > creator = obj_rec - > creator ; query_rec - > refcount = obj_rec - > refcount ; /* * handle the object - note that we must un - lock before callback . * the callback function might lock again in a different manner . */ os_unlock_global_impl ( obj_type ) ; ( * callback_ptr ) ( query_rec , callback_arg ) ; os_lock_global_impl ( obj_type ) ; + + active_obj_cnt ; } + + obj_index ; - - obj_max ; } os_unlock_global_impl ( obj_type ) ; } return active_obj_cnt ; } /* end os_queryobjecttype ( ) */ # # fm_cmd_utils . c : static uint32 open_file_cnt = <number> ; static void loadopenfiledata ( os_query_record_t * query_rec , void * callback_arg ) { fm_openfilesentry_t * openfilesdata = ( fm_openfilesentry_t <wink> callback_arg ; cfe_es_taskinfo_t taskinfo ; if ( openfilesdata ! = ( fm_openfilesentry_t <wink> <allcaps> null </allcaps> ) { /* fdtableentry . path has logical filename saved when file was opened */ strcpy ( openfilesdata [ open_file_cnt ] . logicalname , query_rec - > name_entry ) ; /* get the name of the application that opened the file */ cfe_psp_memset ( & taskinfo , <number> , sizeof ( cfe_es_taskinfo_t ) ); if ( cfe_es_gettaskinfo ( & taskinfo , query_rec - > creator ) = = cfe_success ) { strcpy ( openfilesdata [ open_file_cnt ] . appname , ( char <wink> taskinfo . appname ) ; } } + + open_file_cnt ; } /* end loadopenfiledata ( ) */ /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ /* */ /* fm utility function - - get open files data */ /* */ /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ uint32 fm_getopenfilesdata ( fm_openfilesentry_t * openfilesdata ) { os_query_record_t query_rec ; open_file_cnt = <number> ; os_queryobjecttype ( os_object_type_os_stream , loadopenfiledata , & query_rec , ( void <wink> openfilesdata ) ; return open_file_cnt ; } /* end fm_getopenfilesdata */",2
"error compiling unit test : osprintf - test <section> error compiling osprintf - test <section> steps to reproduce the behavior : <number> . add osprintf - test in cfs / osal / src / unit - tests to cmakelists . example : add_subdirectory ( osprintf - test ) <number> . in cfs directory : <number> . make distclean <number> . make enable_unit_tests = <allcaps> true simulation </allcaps> = native prep <number> . make <number> . see error <section> - hardware - ubuntu <number> - cfs <number> <section> anh van , <allcaps> nasa </allcaps> goddard",0
"doxygen illegeal command <section> cfecmdmnems : <number> : warning : illegal command \ dd as the argument of a \ dd command . <repeated> . <repeated> cfetlmmnems : <number> : warning : illegal command \ sb_pipeoptsec as the argument of a \ c command <section> steps to reproduce the behavior : <number> . make usersguide <section> - hardware - ubuntu <number> - doxygen <date> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"cppcheck coverage check warning <section> reference issue # <number> osal / src / os / posix / osapi . c : <number> <url> shifting signed <number> - bit value by <number> bits is undefined behaviour osal / src / unit - test - coverage / shared / src / coveragetest - time . c : <number> <url> shifting signed <number> - bit value by <number> bits is undefined behaviour osal / src / unit - test - coverage / shared / src / coveragetest - timebase . c : <number> <url> shifting signed <number> - bit value by <number> bits is undefined behaviour osal / src / unit - test - coverage / ut - stubs / src / libc - stdio - stubs . c : <number> <url> uninitialized variable : actual osal / src / unit - test - coverage / ut - stubs / src / libc - stdio - stubs . c : <number> <url> uninitialized variable : actual <section> anh van , <allcaps> nasa </allcaps> goddard",2
"cppcheck unit test warning <section> references issue # <number> osal / src / unit - tests / oscore - test / ut_oscore_binsem_test . c : <number> <url> syntax error osal / src / unit - tests / oscore - test / ut_oscore_countsem_test . c : <number> <url> syntax error osal / src / unit - tests / oscore - test / ut_oscore_exception_test . c : <number> <url> syntax error osal / src / unit - tests / oscore - test / ut_oscore_interrupt_test . c : <number> <url> syntax error osal / src / unit - tests / oscore - test / ut_oscore_misc_test . c : <number> <url> syntax error osal / src / unit - tests / oscore - test / ut_oscore_mutex_test . c : <number> <url> syntax error osal / src / unit - tests / oscore - test / ut_oscore_queue_test . c : <number> <url> syntax error osal / src / unit - tests / oscore - test / ut_oscore_task_test . c : <number> <url> syntax error osal / src / unit - tests / osfile - test / ut_osfile_dirio_test . c : <number> <url> syntax error osal / src / unit - tests / osfile - test / ut_osfile_fileio_test . c : <number> <url> syntax error osal / src / unit - tests / osfilesys - test / ut_osfilesys_diskio_test . c : <number> <url> syntax error osal / src / unit - tests / osloader - test / ut_osloader_module_test . c : <number> <url> syntax error osal / src / unit - tests / osloader - test / ut_osloader_symtable_test . c : <number> <url> syntax error osal / src / unit - tests / osnetwork - test / ut_osnetwork_misc_test . c : <number> <url> syntax error osal / src / unit - tests / osprintf - test / ut_osprintf_misc . c : <number> <url> sprintf format string requires <number> parameter but only <number> are given . osal / src / unit - tests / osprintf - test / ut_osprintf_misc . c : <number> <url> snprintf format string requires <number> parameter but only <number> are given . osal / src / unit - tests / osprintf - test / ut_osprintf_offset . c : <number> <url> va_list ' ptr ' used before va_start ( ) was called . osal / src / unit - tests / osprintf - test / ut_osprintf_offset . c : <number> <url> va_list ' ptr ' used before va_start ( ) was called . osal / src / unit - tests / osprintf - test / ut_osprintf_offset . c : <number> <url> va_list ' ptr ' used before va_start ( ) was called . osal / src / unit - tests / osprintf - test / ut_osprintf_offset . c : <number> <url> va_list ' ptr ' used before va_start ( ) was called . osal / src / unit - tests / osprintf - test / ut_osprintf_offset . c : <number> <url> va_list ' ptr ' used before va_start ( ) was called . osal / src / unit - tests / osprintf - test / ut_osprintf_offset . c : <number> <url> va_list ' varg ' used before va_start ( ) was called . osal / src / unit - tests / osprintf - test / ut_osprintf_offset . c : <number> <url> va_list ' varg ' used before va_start ( ) was called . osal / src / unit - tests / osprintf - test / ut_osprintf_offset . c : <number> <url> va_list ' varg ' used before va_start ( ) was called . osal / src / unit - tests / osprintf - test / ut_osprintf_offset . c : <number> <url> va_list ' ptr ' used before va_start ( ) was called . osal / src / unit - tests / osprintf - test / ut_osprintf_offset . c : <number> <url> va_list ' ap ' used before va_start ( ) was called . osal / src / unit - tests / osprintf - test / ut_osprintf_offset . c : <number> <url> va_list ' ptr ' used before va_start ( ) was called . osal / src / unit - tests / osprintf - test / ut_osprintf_offset . c : <number> <url> va_list ' ptr ' used before va_start ( ) was called . osal / src / unit - tests / ostimer - test / ut_ostimer_timerio_test . c : <number> <url> syntax error <section> anh van , <allcaps> nasa </allcaps> goddard",2
replace <hashtag> include </hashtag> of c files with build system source selection <section> <hashtag> include </hashtag> of a c file is not acceptable flight coding style for some organizations and complicates formal verification processes <section> source selection should be done via build system <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"doxygen misc . warning <section> osal / src / os / inc / osapi - os - core . h : <number> : warning : the following parameters of os_converttoarrayindex ( uint32 object_id , uint32 * arrayindex ) are not documented : parameter ' arrayindex ' osal / src / os / inc / osapi - os - core . h : <number> : warning : argument ' milliseconds ' of command <user> is not found in the argument list of os_taskdelay ( uint32 millisecond ) osal / src / os / inc / osapi - os - core . h : <number> : warning : the following parameters of os_taskdelay ( uint32 millisecond ) are not documented : parameter ' millisecond ' osal / src / os / inc / osapi - os - core . h : <number> : warning : the following parameters of os_tasksetpriority ( uint32 task_id , uint32 new_priority ) are not documented : parameter ' new_priority ' osal / src / os / inc / osapi - os - filesys . h : <number> : warning : the following parameters of os_open ( const char * path , int32 access , uint32 mode ) are not documented : parameter ' mode ' <section> steps to reproduce the behavior : <number> . make usersguide <number> . see error <section> - hardware - ubuntu <number> - doxygen <date> , rc - <number> . <number> <section> anh van , <allcaps> nasa </allcaps> goddard",2
"doxygen warning : expected <tr> <section> doxygen is giving warning : expected <tr> tag but found tk_lnkword token instead ! userguide_osal_expected_tr_warning . txt <url> <section> steps to reproduce the behavior : <number> . make usersguide <number> . see warning in build / doc <section> - hardware - ubuntu <number> - r . c - <number> . <number> <section> anh van , <allcaps> nasa </allcaps> goddard",0
"possible deadlock of timer callbacks <section> if the actual timer interval is larger than the requested timer interval , due to the system tick timer resolution , then it is possible for timers to become deadlocked . <section> configure a timer with <code> and <code> . configure the interval such that it must be rounded up to a whole number of system ticks . the timer works fine for a while , but then callbacks will cease once the first overrun occurs . <section> callbacks should continue until canceled by the application . <section> <allcaps> rtems </allcaps> <number> ( pc686 ) running in <allcaps> qemu </allcaps> mpc750 vxworks <number> <section> discovered as part of the fix for # <number> , submitted as a separate bug for review as it affects the shared / common layer . <section> joseph hickey , vantage systems , inc .",0
"incorrect printf format code in <allcaps> rtems </allcaps> debug message <section> incorrect printf format code in <allcaps> rtems </allcaps> debug message <section> build on <allcaps> rtems </allcaps> with debugging messages enabled and full warnings enabled ( - wall , - werror ) compiler generates an error about an incorrect format : <code> <section> code should build warning - free <section> ubuntu <number> . <number> <allcaps> lts </allcaps> ( build host for i686 - rtems4 . <number> ) <section> joseph hickey , vantage systems inc .",0
"sem - speed - test program creates tasks with zero stack size <section> for <allcaps> rtems </allcaps> and <allcaps> posix </allcaps> this is not an issue because these implementations will just use a minimum stack size , but vxworks actually creates the task with a very small stack . the worker tasks are then likely to overrun the stack , causing undefined behavior . <section> execute sem - speed - test on the mpc750 test platform observe inconsistent behavior during / after test ( sometimes it completes ok , sometimes errors , occasionally even a reboot ) . <section> the test should complete successfully . <section> mcp750 , vxworks <number> <section> joseph hickey , vantage systems , inc .",0
"incorrect time to first callback when using os_timercreate <allcaps> api </allcaps> <section> there discrepancies between the expected first callback and the time the first callback actually occurs , for timers created via <code> . this is with regards to the "" start_time "" parameter . <section> the <code> example program exposes this bug . it was never seen because on <allcaps> posix </allcaps> the difference is not substantial enough to cause failure , but on vxworks it does fail . general sequence is : create a timer via <code> set the timer using <code> with start_time = <number> ( <number> sec ) and interval_time = <number> ( 4 0 0 ms ) . the time between the os_timerset call and the first timer callback should be <number> seconds ( within system timer tick tolerances ) but it is approximately <number> seconds on <allcaps> posix </allcaps> . on vxworks the difference is even more substantial , causing failure of the timer - test example program . <section> the time between the os_timerset call and the first timer callback should be equivalent to the <code> parameter from the os_timerset call . <section> ubuntu <number> . <number> <allcaps> lts </allcaps> , <number> bit , using <code> <allcaps> osal </allcaps> build vxworks <number> on mcp750 , using <code> <allcaps> osal </allcaps> build both running the "" timer - test "" example program . <section> this appears to be limited to cases where the backward - compatible os_timercreate <allcaps> api </allcaps> is used . in this case an implicit timebase object is created just to service the single timer . in this mode , there is an initial condition issue in the wait routine , and the first interval therefore is not correct . if the timer callback is registered via <code> followed by <code> , then it is ok . <section> joseph hickey , vantage systems , inc .",0
"incorrect test of taskspawn result in vxworks implementation <section> the vxworks implementation is testing for an error result from the <code> <allcaps> api </allcaps> call by comparing with <code> . this is incorrect , the vxworks <allcaps> api </allcaps> documentation says that when taskspawn fails , it returns the value <code> , not <number> . <section> this can only be reproduced in unit test . <section> the error handing path should be taken when <code> returns <code> . <section> ubuntu <number> . <number> <allcaps> lts </allcaps> <number> bit ( running <allcaps> osal </allcaps> coverage unit tests ) <section> discovered when implementing the coverage error path unit tests in # <number> <section> joseph hickey , vantage systems , inc .",0
"remove vxworks6 coverage code , rename vxworks - ng to vxworks <section> for the <code> code , the directory names must match those of the actual implementation they are testing . the build scripts assume / require this name relationship . recently , the classic <allcaps> osal </allcaps> implementations were dropped and the "" - ng "" implementations replaced them in the main code tree , but the unit - test - coverage still has the old vxworks6 and new vxworks - ng directories . the old <code> should be removed and the <code> needs to be renamed to be <code> . <section> build coverage code using e . g . : <code> the subsequent <code> will fail because there is no longer an <allcaps> osal </allcaps> implementation named <code> , it is named <code> now . <section> the build should complete successfully <section> ubuntu <number> . <number> <number> - bit <section> joseph hickey , vantage systems , inc .",0
remove references to osal_opaque_object_ids and osal_abstract_filesys_types <section> references to removed <hashtag> defines </hashtag> remain in the unit test code . <url> <section> remove references <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"update function header comments on "" ng "" implementation functions action item from vxworks - ng review held on <number> - <number> - <number> : across posix - ng , rtems - ng , and vxworks - ng , the implementation functions have header comments that were cut and paste from the original implementation and may not reflect the actual code anymore . this should be scrubbed prior to the <allcaps> osal </allcaps> release .",0
move os_fs_err_ * defines to common os error definitions os_directoryopen returns os_invalid_pointer if dir_id or path pointers are <allcaps> null </allcaps> . os_directoryread returns os_fs_err_invalid_pointer if dirent pointer is <allcaps> null </allcaps> . likely other cases of mixed use . suggest deprecation of the os_fs_err_ * defines and switch to common definitions .,2
"improve consistency and reduce duplication in various <allcaps> bsp </allcaps> / <allcaps> psp </allcaps> implementations currently in the <allcaps> cfe </allcaps> / <allcaps> osal </allcaps> world we have at least four different platform - specific abstraction methods , all of which basically do the same thing of getting common code to run on a different platforms . all of these provide three very basic bits of functionality , in different flavors : - provide a well - known entry point symbol for the platform ( main , init , etc ) - get the system into a proper state for running the app - invoke <code> - - or whatever the real app entry point is - do something for idle time while the app runs ( a shell , or just an idle loop ) . - shut it down when complete <section> : on the <allcaps> osal </allcaps> side this is provided by the "" <allcaps> bsp </allcaps> "" . it has genppc - vxworks6 . <number> , pc - linux , pc - rtems , sparc - vxworks6 . <number> , sis - rtems , and mcf5235 - rtems ( the latter <number> are somewhat unmaintained / untested ) . <section> : when running unit tests , an alternative <allcaps> osal bsp </allcaps> is used which has extra functionality for running the tests . the idea is that any platform capable of running applications should also be capable of running unit tests . unfortunately , to avoid changing existing <allcaps> bsp </allcaps> functions , this was "" cloned "" and therefore this has basically morphed into a second duplicate provider of the entry point / startup / shutdown logic , because ut needs a slightly different setup from a regular app . there still is , however , a considerable amount of overlap between the "" ut "" <allcaps> bsp </allcaps> and the regular application <allcaps> bsp </allcaps> . / / proposal / /: these should be made into an extension of the basic <allcaps> osal bsp </allcaps> . <section> : the <allcaps> cfe psp </allcaps> also provides many of the same services . on the <allcaps> cfe psp </allcaps> repo , there are "" pc - linux "" , "" pc - rtems "" , and "" mcp750 - vxworks6 . <number> "" . these are basically extended versions of the <allcaps> osal bsp </allcaps> , and also provide entry point / shutdown logic , but they also do <allcaps> additional </allcaps> configuration that is specific to <allcaps> cfe </allcaps> before calling the <allcaps> cfe </allcaps> entry point . / / proposal / /: like the unit tests , the <allcaps> cfe psp </allcaps> should be an extension of the <allcaps> osal bsp </allcaps> , not a replacement for it . the <allcaps> psp </allcaps> already defines a <code> entry point for itself , and this can be invoked as a second - stage after os_application_startup to do the additional startup tasks required for <allcaps> cfe </allcaps> . <section> : the <allcaps> jsc </allcaps> - provided unit tests residing in the <code> directory contain their own platform abstractions by way of preprocessor macros and alternate header / source files . the source / header file choice is based off the <code> , <code> , and <code> compile - time macros . in turn , this defines additional macros for platform - specific routines like sleep / logging / taskdelay , etc . these tests are already using an entry point provided by the ut - <allcaps> bsp </allcaps> described in ( <number> ) above , the macros supplement this . the problem is that not all platforms are provided . most notably , there is no implementation for _rtems_os_ , so these tests are currently unbuildable on pc - <allcaps> rtems </allcaps> . / / proposal / /: functions like sleep / delay and other platform - specific bits should be changed from a macro to an <allcaps> api </allcaps> call provided by the ut - <allcaps> bsp </allcaps> . logging functions are already provided by the ut - <allcaps> bsp </allcaps> . furthermore , all the test cases should use utassert calls to make the output consistent with everything else .",2
fix unused variables in <allcaps> rtems </allcaps> compiling with <code> noted two unused variables in <allcaps> osal </allcaps> for rtems - ng . these are simple fixes to clean up .,0
"remove unit test backwards compatibility in osapi - filesys functions flight code should have the right implementation , and unit test code should be fixed to match . current comments indicate the flight code is less than optimal to match unit test code . specifically : os_fs_error vs os_err_name_not_found returns .",2
remove <allcaps> osal </allcaps> dependencies on deprecated <allcaps> osal </allcaps> elements building with osal_omit_deprecated fails . first error : / home / jhageman / cfs / cfs - dev / osal / src / unit - tests / shared / ut_os_stub_platforms . h : <number> : <number> : error : unknown type name ‘ os_fdtableentry ’ extern os_fdtableentry os_fdtable [ os_max_num_open_files ] ;,0
"update backwards compatibility comments in the osapi - filesys functions really not backwards compatibility , but in support of abstraction and in the spirit of portability operations attempted on a fs_based file system that arn ' t actually allowed should no - op and return success .",0
deprecate endian temporary compatibility macors the bit_order defines in src / os / inc / common_types . h are marked as temporary and should be easily removed to check compatibility . check for use in cfs framework .,2
add bsp_ut functionality for genppc vxworks to be able to run unit tests need to be able to run unit tests on vxworks - ng for end - of - summer release .,0
"remove old <allcaps> mks </allcaps> flags in comments $ id , $ date , $ revision , $ log , etc all no longer useful and slightly misleading since they do not get updated .",0
"remove <allcaps> deprecated </allcaps> define in ut_assert , utmemset has been marked <allcaps> deprecated </allcaps> for <number> years , since [ changeset : 1 0 b7816 ] as part of ticket # <number> .",0
deprecate osalbool and boolean in favor of c99 bool eliminates unnecessary redefines .,0
"remove custom fixed size types option custom fixed size types in common_types . h requires assumptions outside required standards . remove this code in favor of stdint . h . for any platform without stdint . h the resolution is platform dependent and outside the scope of the cfs framework . remove _have_stdint_ logic from cmake recipe , and custom defines in common_types . h . see also [ cfs_cfe : <number> ] in cfs_cfe .",0
"use c11 ' s _static_assert for compiletimeassert when available it is straightforward to test the c version and define <code> using c11 ' s [ <url> _static_assert keyword ] this can be done e . g . {{{# ! c <hashtag> if </hashtag> __stdc_version__ >= 2 0 1 1 1 2 l <hashtag> define </hashtag> compiletimeassert ( condition , message ) _static_assert ( condition , <hashtag> message </hashtag> ) <hashtag> else </hashtag> <hashtag> define </hashtag> compiletimeassert ( condition , message ) typedef char message [ ( condition ) ? <number> : - <number> ] <hashtag> end if </hashtag> } } } this avoids polluting the type namespace with the magic typedefs used in the older implementation , and also produces better error messages if the assertion fails . it would also be possible to use c + + <number> ' s [ <url> static_assert keyword ] in a similar manner , but i am not sure if this is desirable ; this depends whether we want to officially support using this header in c + + code . i will create a branch containing the attached patch and update this ticket .",2
""" host_module_id "" in os_module_prop_t might be too small on <number> - bit machines the <code> structure ( output by <code> ) contains a field "" host_module_id "" which is a <code> type . this is possibly too small for some machines and can cause a warning , notably on <number> - bit builds where the host module is tracked natively as a <code> . suggest to either use a <code> type instead , or to remove this field altogether as it is really a crutch that should not be needed ( a good abstraction means that the app should not ever need to know this , and if the app actually does use it , then the app is not portable ) .",0
"avoid continuous looping in the time base callback thread as part of the "" timebase "" implementation , a high priority helper thread is used as the context for timer callbacks . this is supposed to block on a <code> or some other custom <allcaps> psp </allcaps> - supplied function until a tick arrives . however , if something goes wrong with the wait routine and it does <allcaps> not </allcaps> actually block for whatever reason , then a continuous loop is possible . because it is running as a high priority realtime thread , on a single core system this has the effect of locking up the <allcaps> cpu </allcaps> . in the case that the blocking function fails to block , this needs a failsafe to prevent hogging the <allcaps> cpu </allcaps> .",0
"add support for asynchronous console output in shared layer ( ng ) on some target boards , the console output from <code> needs to be buffered and sent to a separate task for output . this was enabled on several vxworks targets through the <code> directive , but generally was not implemented on <allcaps> posix </allcaps> or <allcaps> rtems </allcaps> targets , where os_printf was a simple wrapper around printf . this console output buffer will become necessary in order to support this paradigm for a vxworks - ng implementation . the basic framework for doing this is fairly simple , and may provide immediate benefit for any <allcaps> rtems </allcaps> or <allcaps> posix </allcaps> boards that might want to enable it , too .",2
"fix nonexistent symbol lookup in <allcaps> rtems </allcaps> in the event of a lookup on a nonexistent symbol , the <allcaps> rtems </allcaps> <code> implementation does not return <allcaps> null </allcaps> like the <allcaps> posix </allcaps> implementation does . this is intended to differentiate between a nonexistent symbol and a symbol that exists but actually has an address of <allcaps> null </allcaps> . unfortunately , this makes the <allcaps> osal </allcaps> symbol lookup <allcaps> api </allcaps> return "" success "" and a <allcaps> null </allcaps> address , which can cause the implementation to jump to <allcaps> null </allcaps> if e . g . a bad entry point name was supplied .",0
"clean up the "" os_shelloutputtofile "" implementation the implementation of this function is something of a kludge , generating a shell command string using redirection characters ( > ) to redirect the output to a file and then calling <code> using this string . as the intended output file is in fact already "" open "" by the local process , it is far cleaner and less error prone to invoke <code> directly , and simply <code> the filehandles to be stdout_fileno and stderr_fileno , then exec the shell process . this avoids a bunch of issues related to the system ( ) call .",2
"improve shared layer to support lookups by keys other than id the shared layer currently only supports object / resource lookups by id . the code locks the table , does a direct calculation of the table index using the id , and confirms that the id is correct . this supports the vast majority of <allcaps> osal </allcaps> calls where the subject resource is passed in using a <number> - bit resource identifier . however , there are other <allcaps> api </allcaps> calls which require lookup by name rather than id . some of these must continue to exist for backward compatibility , but still should use as much of the same infrastructure as possible .",2
"add semaphore speed test during discussions of the ng architecture , a recurring concern was regarding the additional function calls and possible increase in overhead related to this . rather than act on assumptions , it is better to actually benchmark the code in question to determine if optimizations are necessary , and if so , where those optimizations should be done .",2
"fix unit test coverage build during some recent unit testing , it was observed that the coverage flags ( - pg , - - coverage ) were not being correctly applied to code under test , and therefore the coverage report could not be generated . i tracked this down to a previous build change that reset all c flags to allow the unit testing to be performed with a different <allcaps> bsp </allcaps> than the main test . unfortunately as a side effect the ut coverage flags were also lost .",0
"os_cp cleanup looking at os_cp , which does a system call to the "" cp "" command , this is really ugly , not realtime - friendly , and probably a security risk ( if you could somehow inject a ' ; ' into the system call , which should not be difficult . <repeated> does not look like os_translatepath catches this . ) i suggest re - writing os_cp to do an open , a loop of read / write , and close ( with the appropriate checks to ensure errors are handled . ) also looks like os_translatepath does the check for <allcaps> null </allcaps> and length , so the os_ { cp | mv | remove | . <repeated> } should not do the same .",0
remove last - gen osals and replace with next gen removing last - gen with <allcaps> osal </allcaps> <number> . <number>,0
"osconfig . h os_queue_max_depth unused os_queue_max_depth is defined as <number> in osconfig . h for both pc - rtems and pc - linux , but the limit is not applied / checked / or even used within <allcaps> osal </allcaps> . queue depth is accepted as input by os_queuecreate with no limiting within <allcaps> osal </allcaps> . note cfe also has a max pipe depth ( cfe_platform_sb_max_pipe_depth ) that is applied by the cfe prior to calling os_queuecreate , but it ' s set to <number> . this limit seems arbitrary at the cfe level . linux depth limit by default is <number> on at least centos , would be nice if it worked out of the box .",2
"correct build errors in ut assert bamboo build for legacy configurations where the old type mapping is used in <code> , the ut assert library fails to build with the following errors . this is from the bamboo logs when building in the classic mode . / home / bamboo - remote - agent / bamboo - agent - home / xml - data / build - dir / <allcaps> cfs </allcaps> - <allcaps> cfscfe </allcaps> - ja / osal / ut_assert / src / utassert . c : <number> : <number> : error : unknown type name ' uint32_t ' / home / bamboo - remote - agent / bamboo - agent - home / xml - data / build - dir / <allcaps> cfs </allcaps> - <allcaps> cfscfe </allcaps> - ja / osal / ut_assert / src / utstubs . c : <number> : <number> : error : unknown type name ' bool ' this issue is causing bamboo to fail on the "" job a "" of both <allcaps> cfe </allcaps> and <allcaps> osal </allcaps> . other jobs that use the stdint . h based mapping are ok .",0
"requirement option to exit / abort on app load failure <allcaps> ccb </allcaps> <date> discussion relative to # <number> touched on a possible debug option to shut down / exit / abort on app load failure . in the context that there are some debugging hooks already , could add this as an extreme reaction ( avoids time spent searching for why the system is not working as expected ) . kicked up to the steering committee / requirements discussion to resolve if this is required optional behavior .",2
pthread_stack_min typo in <allcaps> posix </allcaps> / <allcaps> posix </allcaps> - <allcaps> ng osal </allcaps> both the <allcaps> posix </allcaps> and <allcaps> posix </allcaps> - ng osals contain the following in <code> : {{{# ! c <hashtag> if n def </hashtag> pthread_stack_min <hashtag> define </hashtag> pthread_stack_min <number> <hashtag> end if </hashtag> } } } i believe this is supposed to be <number> or <number> * <number> .,0
"port vxworks <allcaps> osal </allcaps> to shared / ng <allcaps> osal </allcaps> architecture this is a follow - on to # <number> . the original change set was merged to development branch as of the <number> - <number> - <number> <allcaps> ccb </allcaps> , without yet having an implementation for vxworks that uses the refactored architecture . before the next <allcaps> osal </allcaps> release , there should be an implementation for vxworks using the shared layer , to go with posix - ng and rtems - ng .",2
"improve coverage test for "" shared "" layer this is a follow - on to original ticket # <number> as part of the original change sets , a basic coverage test was added for the shared layer . it calls most functions in a nominal case , but does not yet cover a sufficient number of the error cases . for instance the module loader only has <percent> of line coverage . others are between <number> - <percent> but could still be improved ( files , queues , timers ) . it has been discussed in <allcaps> ccb </allcaps> meetings during the review for # <number> that we should make another pass through the coverage test logs to improve the error case coverage prior to releasing the next <allcaps> osal </allcaps> .",2
mqueue test program <allcaps> osal </allcaps> should include a simple mqueue test program to validate that the user has the correct settings and permissions to create / open / close / delete mqueues . often users stumble on mqueue configuration and it is more difficult to diagnose when it ' s wrapped in the entirety of <allcaps> osal </allcaps> / cfs .,2
"consider moving cpu usage code to <allcaps> osal </allcaps> currently , code to request cpu usage is included in the hs application . however , this requires hs to be modified to run on different operating systems . because the code to request cpu usage is os - specific , consider moving this functionality out of hs to the <allcaps> osal </allcaps> .",2
scrub cppcheck warnings in <allcaps> osal </allcaps> dev branch the bamboo continuous integration server runs cppcheck static analysis on every build . this ticket is for tracking any small / minor fixes to address concerns brought up by this tool . nothing here should change any functionality . ( anything bigger than a simple one or two - liner should probably have its own ticket for tracking ) .,0
clean up unneeded ut assert compatibility logic the <allcaps> osal ut </allcaps> assert framework has a number of functions to act as a bridge or compatibility layer for historical <allcaps> cfe </allcaps> unit test cases . with the current <allcaps> cfe </allcaps> these test cases should be fixed and therefore this compatibility code is no longer necessary . this should be cleaned up as part of the next <allcaps> osal </allcaps> / <allcaps> cfe </allcaps> release set .,2
os_timercreate ( ) callback functions & event messages event messages in callback functions seem to associate the event app id with timer id . the first timer created gets a timer id of zero and events in the callback are get associated with cfe_evs ( app_id = <number> ) . the second timer gets a <allcaps> tid </allcaps> of <number> so events are associated with cfe_sb ( app_id = <number> ) . i did not dig through all of the code to prove this and i observed this behavior on a linux deployment .,0
"bsp_ut updates to work with cfe <number> the associated changeset specifically addresses control code use , conditionally dependent on os .",0
"remove conditionally compiled code prior to next <allcaps> osal </allcaps> release as part of <allcaps> osal </allcaps> development several macros are utilized to allow the code to be merged in pieces without breaking existing code . before the next <allcaps> osal </allcaps> release is finalized , these conditional - compile macros should be removed and only the active branch should remain . at least these two macros should always be considered "" enabled "" in future versions : <code> <code>",2
"way to get raw os task priority / <allcaps> osal </allcaps> has too many priorities <allcaps> osal </allcaps> attempts to provide a uniform set of task priority by translating the given priority to a native os priority . this is often done by assigning bins that certain priorities can fall into . typically , applications can set their priorities far enough apart that this is not a problem . however , sometimes tighter control would be nice especially in systems where the number of available priorities is fewer than <allcaps> osal </allcaps> . ( for example , <allcaps> osal </allcaps> provides <number> priorities but <allcaps> posix </allcaps> only <number> . ) <allcaps> posix </allcaps> , for example , can see priorities squashed where tasks become round - robin instead of higher priority than one another . having to pick <allcaps> osal </allcaps> priorities when writing apps with many child threads based on what you know the characteristics of the underlying os to be defeats the purpose of <allcaps> osal </allcaps> . one way to fix this is to create a macro os_raw_prio ( x ) where the most significant bit of a priority is set , which has meaning to <allcaps> osal </allcaps> ' s thread creation mechanism . this would tell it to use the raw value instead of translating . another approach would be to lower the number of maximum <allcaps> osal </allcaps> priorities to a number lower than most rtoss ( like <number> or so ) so that there can always be unique priorities in any underlying os . or , this could be made configurable when building the system .",2
"<allcaps> osal </allcaps> needs a concept of event one useful primitive missing from <allcaps> osal </allcaps> is an event concept . in <allcaps> posix </allcaps> , this could be implemented via pipe ( ) where an event is signaled by writing to the write pipe , and cleared by reading from the read pipe . this is useful because multiple events can be blocked upon using select ( ) . ( <allcaps> osal </allcaps> supports select ( ) , so this makes sense . )",2
"osal needs blocking timer <allcaps> api </allcaps> the current <allcaps> osal </allcaps> timer <allcaps> api </allcaps> calls callbacks in an unknown context to the user when the timer event fires . this removes flexibility from the user to manage their own threads . a new <allcaps> api </allcaps> ( or addition to existing one ) should be created where the user can read from the timer , which will block until the event fires . as this would be a periodic timer , the user should also be able to be informed of overruns that occurred . this functionality mirrors <allcaps> posix </allcaps> timerfd / read ( ) .",2
"os_queuedelete ( ) has too small of a char name buffer looks like a copy / paste error but the "" name "" variable used to figure out a unique name for mq_open ( ) & mq_unlink ( ) calls is of different sizes between os_queuecreate ( ) and os_queuedelete ( ) . in os_queuedelete ( ) , change : char name [ os_max_api_name + <number> ]; to : char name [ os_max_api_name * <number> ]; the result is memory clobbering when deleting a queue of a longer name .",0
"posix - ng / posix os_moduleload flag inconsistency in the <allcaps> posix osal </allcaps> , modules are loaded by <code> with a flags value of <code> whereas in posix - ng the flags value is <code> . changing from <code> to <code> alters the behavior of <code> . it may be desirable to make that change , but it should be consistent between the <allcaps> posix osal </allcaps> implementations .",0
"please provide va_list variants of variadic functions variadic functions in c can not easily be wrapped in another variadic function . to resolve this issue , the c standard library provides variants of its variadic functions that take a { { { va_list } } } . for example , { { { printf } } } has the { { { vprintf } } } variant . please provide similar variants for the <allcaps> osal </allcaps> ' s variadic functions . the implementation would be simple : the majority of the function ' s logic can reside in the { { { va_list } } } version , and the variadic function can become thin a wrapper around the { { { va_list } } } version . at the time of submitting this issue , the only variadic function in <allcaps> osal </allcaps> is <code> . see also [ cfs_cfe : <number> cfe issue <number> ] .",2
"<allcaps> osal </allcaps> boolean should use actual c99 bool type on c99 + platforms that have the builtin <code> type , this should be used for the <allcaps> osal </allcaps> boolean typedef rather than <code> . two major benefits : <number> . smarter implicit conversion semantics . during <allcaps> cfe </allcaps> <number> testing there was one case discovered where an ( nonzero ) <code> was directly passed to a function taking <code> , which was implicitly truncated to <number> bits and became zero ( false ) because the <allcaps> lsb </allcaps> was zero . when using the actual builtin boolean type , this remains true . <number> . better warnings . in newer version of <allcaps> gcc </allcaps> it will flag warnings on suspicious expressions used as truth values ( such as an assignment ) .",2
"posix : use rtld_default instead of <allcaps> null </allcaps> in dlsym in { { { os_symbollookup } } } defined in { { { osloader . c } } } in the <allcaps> posix osal </allcaps> , [ <url> dlsym ] is used to obtain the address of the specified symbol : { { { function = dlsym ( ( void <wink> <number> , symbolname ) ; } } } the behavior of { { { dlsym } } } when called with a null pointer for the first argument is not defined by <allcaps> posix </allcaps> . on <allcaps> gnu </allcaps> / linux , this value corresponds to { { { rtld_default } } } , as found in { { { / usr / include / dlfcn . h } } } . { { { # define rtld_default ( ( void <wink> <number> ) } } } when called with { { { rtld_default } } } as a first argument , "" the identifier lookup happens in the normal global scope ; that is , a search for an identifier using handle would find the same definition as a direct use of this identifier in the program code . "" this appears to be the intended behavior in the <allcaps> osal </allcaps> . however , the value of { { { rtld_default } } } is implementation - defined according to <allcaps> posix </allcaps> . the macro , rather than the value it happens to have on <allcaps> gnu </allcaps> / linux , should be used . this would address part of # <number> .",2
"clean up <allcaps> osapi </allcaps> prototypes there are still several functions , mainly in the filesystem area , where input string parameters are missing the <code> qualifier . these prototypes should be fixed . note that adding <code> typically will not affect user code , as it is ok to pass non - const into const , just not the other way . this will fix warnings on the <allcaps> cfe </allcaps> side .",0
"enhancements to ut assert testing framework the ut assert framework stub <allcaps> api </allcaps> supported only "" consumable "" data buffers , which works well for calls such as read / write , where the buffer is filled with each call . it does not work as well for such things as the critical data store ( <allcaps> cds </allcaps> ) in cfe_es , which require a stub to mimic "" random access "" behavior . for this , the stub would have to retain the buffer between calls . this ticket is to add all the necessary enhancements to allow full testing of <allcaps> cfe </allcaps> / <allcaps> cfs </allcaps> .",2
add symmetric multiprocessing ( <allcaps> smp </allcaps> ) support flight and ground computing platforms contain multiple processing cores . symmetric multiprocessing ( <allcaps> smp </allcaps> ) support must be added to the <allcaps> osal </allcaps> to fully utilize these platforms .,2
"pointer handed to pthread_setspecific is not a pointer the pthreads "" setspecific "" and "" getspecific "" apis are used to associate a pointer value , specific to the current thread , with a key value indicating what it represents . the <allcaps> posix </allcaps> implementation of <allcaps> osal </allcaps> uses this facility to store the thread - specific index of the thread ' s task in the task table , and it does so by casting the small integer value to have a pointer type . it would be safer , instead , to store a pointer to the actual row of the task table as the thread - specific data ; this would not violate the expectation that a pointer is either <allcaps> null </allcaps> or represents the address of valid data . extraction of the table index then becomes a range check followed by a pointer subtraction , rather than a combination of memory copies and masks that make unportable assumptions about sizes and endianness . marked as "" minor "" priority as existing code accidentally works on <number> - bit systems and little - endian <number> - bit systems where sizeof ( int ) = = <number> , which accidentally covers current use cases .",0
"document method on linux to modify user priority limits the posix osal can set priorities in linux . out of the box , this only works if you run <allcaps> cfs </allcaps> as root . in a lab environment , with many developers using shared lab workstations , root access for everyone is not an option . this method allows <allcaps> cfs </allcaps> apps , running as standard privileged users , to use the priority settings in the startup script ( . scr file ) . <number> ) as root , set the following config : update "" rtprio "" in / etc / security / limits . conf for a user or group . <code> <number> ) the following changes to the currently released <allcaps> osal </allcaps> <number> . 1 a will need to be applied to osal / src / os / posix / osapi . c . add this include to osal / src / os / posix / osapi . c . <hashtag> include </hashtag> < sys / resource . h > /* danny strauss / aa2 - for getrlimit ( ) */ in osal / src / os / posix / osapi . c : : os_taskcreate ( ) , replace the following code : /* * * test to see if the user is running as root . * * root is required to set the scheduling policy , stack , and priority */ if ( geteuid ( ) = = <number> ) with this code : /* danny strauss / aa2 : remove geteuid check to allow all users to set task * attributes ( priority , etc . ) and replace it with a check of user ' s * allowed system rt priority limit */ struct rlimit rl ; getrlimit ( rlimit_rtprio , & rl ) ; printf ( "" os_taskcreate : setting %s priority % d . "" , task_name , os_priority ) ; if ( os_priority > ( int ) rl . rlim_cur ) { printf ( "" os_taskcreate : <allcaps> warning </allcaps> priority not set because you are limited to priority % d \ n "" , ( int ) rl . rlim_cur ) ; } else { printf ( "" \ n "" );",1
"pthread_cond_wait ( ) spurious wakeup in os_binsemtake in os_binsemtake ( ) in the posix osal , a call to pthread_cond_wait ( ) is used for signaling from the task giving the semaphore . however , it is possible for pthread_cond_wait ( ) to return in the event of a spurious wakeup , without the condition it was actually waiting on becoming true . to fix this , the call to pthread_cond_wait ( ) should be wrapped in a while loop that checks the condition after the calling task is woken up . e . g . { { { while ( os_bin_sem_table [ sem_id ] . current_value < os_bin_sem_table [ sem_id ] . max_value ) { ret = pthread_cond_wait ( & ( os_bin_sem_table [ sem_id ] . cv ) , & ( os_bin_sem_table [ sem_id ] . id ) ); } } } }",0
"mq_open has invalid data in struct mq_attr os_queuecreate uses mq_open , and it passes a partially - initialized struct mq_attr as the last parameter . this structure should be initialized to <number> as two fields in it contain junk .",0
"os_translatepath ( ) does not handle mountpoint equal to virtualpath discovered while using cfs_fm app , if one were to get a directory listing for "" / cf "" , then <allcaps> osal </allcaps> will report this does not exist because of a bug in os_translatepath ( ) . you are required to ask for "" / cf / "" because the code is looking for a required trailing slash . this seems to be true of all volumes listed in one ' s volume table ( cfe_psp_voltab . c ) . this trailing slash should not be required . two diff outputs with fixes are enclosed . <repeated> one for vxworks6 and one for posix . { { { diff - - git a / cfs_osal / src / os / vxworks6 / osfilesys . c b / cfs_osal / src / os / vxworks6 / osfilesys . c index 0 2 e0a3c . <repeated> 4 8 6 3 6 d3 <number> - - - a / cfs_osal / src / os / vxworks6 / osfilesys . c + + + b / cfs_osal / src / os / vxworks6 / osfilesys . c @ @ - <number> + <number> @ @ int32 os_translatepath ( const char * virtualpath , char * localpath ) if ( os_volumetable [ i ] . freeflag = = <allcaps> false </allcaps> ) { path_on_device = skip_prefix ( virtualpath , os_volumetable [ i ] . mountpoint ) ; - if ( path_on_device & & ( ' / ' = = * path_on_device ) ) + if ( path_on_device & & ( ( ' / ' = = * path_on_device ) || ( ' \ <number> ' = = * path_on_device ) ) ) { <hashtag> if def </hashtag> os_debug_printf printf ( "" numchars : % d \ n "" , path_on_device + <number> - virtualpath ) ; } } } { { { diff - - git a / cfs_osal / src / os / posix / osfilesys . c b / cfs_osal / src / os / posix / osfilesys . c index ef92ce9 . <repeated> a6f9a15 <number> - - - a / cfs_osal / src / os / posix / osfilesys . c + + + b / cfs_osal / src / os / posix / osfilesys . c @ @ - <number> + <number> @ @ int32 os_translatepath ( const char * virtualpath , char * localpath ) if ( os_volumetable [ i ] . freeflag = = <allcaps> false </allcaps> ) { path_on_device = skip_prefix ( virtualpath , os_volumetable [ i ] . mountpoint ) ; - if ( path_on_device & & ( ' / ' = = * path_on_device ) ) + if ( path_on_device & & ( ( ' / ' = = * path_on_device ) || ( ' \ <number> ' = = * path_on_device ) ) ) { <hashtag> if def </hashtag> os_debug_printf os_printf ( "" numchars : % d \ n "" , path_on_device + <number> - virtualpath ) ; } } }",0
"( re ) create <allcaps> osal </allcaps> for <allcaps> osx i </allcaps> use <allcaps> osx </allcaps> as a development environment and , while i can easily use a vm of linux , it would be nice to be able to compile / run cfs in <allcaps> osx </allcaps> natively . there are a couple issues with using the posix <allcaps> osal </allcaps> on <allcaps> osx </allcaps> : * there is no timer interface . * pthreads does not include the priority control <allcaps> api </allcaps> ' s * there are no "" _init "" or "" _fini "" externs for stack introspection . * no vfs . h * dlsym takes special rtld_ * handles to define its namespace search behavior ( <allcaps> null </allcaps> does not work . )",2
readme and makefile updates for <allcaps> osal </allcaps> <number> . <number> the various readme ' s skipped steps and were confusing when trying to stand up and run a clean set of tests on <number> - bit pc - linux . ( if it bit some experienced folks multiple times then others will be bit as well . ) included a quick unintrusive fix for # <number> in tended for pc - linux builds .,0
"pc - linux osloader unit test builds wrong test files (x 8 6 _64 ) on x86_64 linux platforms , the pc - linux osloader unit test builds the eeprom1 module test files for the x86_64 platform - even when you are building with the - m32 flag in the osal - config . mak file . all other tests and binaries are properly built as <number> - bit with that osal - config . mak change so the osloader unit tests fail to load <number> - bit modules . the current workaround is to : { { { cd osal / build / unit - tests / osloader - test make - f modules . mak clean make - f modules . mak # and continue testing . / osloader - test . bin } } }",0
update version number for <allcaps> osal </allcaps> <number> . <number> release the version number information in the osapi - version . h file needs to be updated to reflect the <number> release as follows : <hashtag> define </hashtag> os_major_version ( <number> ) <hashtag> define </hashtag> os_minor_version ( <number> ) <hashtag> define </hashtag> os_revision ( <number> ) <hashtag> define </hashtag> os_mission_rev ( <number> ),2
<allcaps> osal </allcaps> <number> . <number> version description document review cycle please see the attached <allcaps> osal </allcaps> <number> . <number> <allcaps> vdd </allcaps> open for <allcaps> ccb </allcaps> review ( <allcaps> osal </allcaps> <number> . <number> version description document - initial . docx ) and provide review comments / approval .,0
black box unit tests do not ensure resources are cleaned up between tests unit tests should utilize a setup and teardown approach to ensure each test runs in an expected and known configuration . the teardown function needs to ensure that all test objects and resources have been deallocated and cleanup .,2
"functional timer test hard codes configuration value the functional timer test ( / src / tests / timer - test / timer - test . c ) hard codes the number of timers to <number> , which may be higher than the os_max_timers configuration set in osconfig . h . it is recommended to update the test to use the os_max_timers configuration macro or add protection with an <hashtag> if </hashtag> guard .",2
"vxworks <allcaps> osal </allcaps> uses potentially unsafe "" strcpy "" operations in at several locations the vxworks <allcaps> osal </allcaps> is using <code> and <code> functions to copy strings between string buffers that are sized using different macros . at least one of the sizes in play , the <code> comes from the user - configurable "" osconfig . h "" file . other sizes , such as <code> are specified in the local headers and are <section> user - configurable . in some functions , such as <code> ( but not limited to this ) , a local buffer of size <code> is copied into a global buffer of size <code> . however , because the <code> is configurable via the osconfig . h file , it is not guaranteed that <code> is less than or equal to <code> .",0
"missing documentation on howto build / run unit and functional tests at a minimum a simple readme file should be included under the functional , black box , and white box unit test directories to provide users with some guidance on how to build and run each set of tests .",1
"posix does not alert users of undefined symbol during load the posix <allcaps> osal </allcaps> implementation of the os_moduleload <allcaps> api </allcaps> simply returns os_error when a bundle fails to load . this return error code provides no information for users to troubleshoot the cause of the load failure . in many cases the load error is due to an undefined symbol in the load bundle . the undefined symbol name may be captured in the string returned by the dl_error ( ) function . the information captured in the call to dl_error ( ) should be printed via the os_printf function and / or easily made accessible to users for troubleshooting . note : the vxworks <allcaps> osal </allcaps> implementation of the os_moduleload <allcaps> api </allcaps> ( when os_debug_printf is defined ) will print information to the console when a module cannot be loaded . specifically the following os_printf statement is used : os_printf ( "" <allcaps> osal </allcaps> : error , cannot open application file : %s \ n "" , translated_path ) ;",2
"provide useful output upon posix osloader failure the posix osloader . c ' s os_moduleload ( ) fails ' ' ' very ' ' ' tersely providing absolutely no help in figuring out _why_ a module failed to load . { { { <number> /* <number> * * open the loadble bundle . <repeated> just opening it loads it into the system . <number> */ <number> function_lib = dlopen ( translated_path , rtld_lazy | rtld_global ) ; <number> dl_error = dlerror ( ); <number> if ( dl_error ) <== = "" oh so many reasons why "" <number> { <number> os_module_table [ possible_moduleid ] . free = <allcaps> true </allcaps> ; <number> return ( os_error ) ; <number> } } } } various reasons include ( but are not limited to ) : missing file , bad filename , bad path , bad path mapping , missing symbol , bad / typo entry point in the startup script , etc . this wastes developer time and frequently forces you into a debugger . a fix like this helps immensely : { { { + + + b / osal / src / os / posix / osloader . c @ @ - <number> + <number> @ @ int32 os_moduleload ( uint32 * module_id , const char * module_name , const char * fi if ( dl_error ) { os_module_table [ possible_moduleid ] . free = <allcaps> true </allcaps> ; + /* <allcaps> fixme </allcaps> - debugging */ + os_printf ( "" os_moduleload ( ) ' s dlopen failed for translated path : %s \ n "" , ( char <wink> translated_path ) ; + os_printf ( "" os_moduleload ( ) ' s dlopen error : %s \ n "" , dl_error ) ; return ( os_error ) ; } } } }",2
"posix queue depth differs : mqueues vs sockets running the <allcaps> osal </allcaps> oscore - test unit test with mqueue vs . sockets ( appropriate <hashtag> define </hashtag> changed in osconfig . h ) shows a difference with sockets that wasn ' t there with mqueues . { { { test # <number> queue - full [ <allcaps> failed </allcaps> ] <allcaps> failed </allcaps> [ ] os_queueput - # <number> queue - full } } } apparently the socket implementation does not implement queue depth checks with the same semantics . the socket os_queuecreate ( ) queue_depth arg is ignored : { { { int32 os_queuecreate ( uint32 * queue_id , const char * queue_name , uint32 queue_depth , uint32 data_size , uint32 flags ) } } } the socket os_queueput ( ) looks at the bytes sent , returned from sendto ( ) , and compares them to the message data size , but this results different "" depth "" semantics based on the socket behavior . the unit test fails because it is expecting the <allcaps> api </allcaps> to honor the queue depth limit and error out on os_queueput ( ) , but it does not .",0
"version_info . cmake looks for wrong tags in the current repo we are tagging <allcaps> osal </allcaps> releases in the form "" osal - rel - xx "" . however , the version_info . cmake file , which instructs the cmake build system how to filter tags when building the version strings , is looking for "" <allcaps> osal </allcaps> - xx "" ( caps ) . minor fix .",0
"posix socket os_queueget ( ) timeout fails we have linux platforms where the linux mqueue is not available and we have to use sockets . however , we are seeing a problem when using sockets vs . mqueues . when os_queueget ( ) is called with an actual timeout value ( msec ) the socket implementation appears to always return without properly reporting a message is present . sb messages pile up . the outreach drone is one such platform and we see this in our centos linux vm simulation platform ( <allcaps> osal </allcaps> configured the same for consistency ) . ( i have a unofficial report from another developer who encountered this as well . ) i think i have seen this on is with the open - source release <allcaps> osal </allcaps> as well as the current development branch . ( likely the default event filters prevented folks from seeing this if they were not looking at the sb telemetry directly . ) - - - - - - - steps to reproduce : <number> ) create a clean / pristine cfs build . ( i used a bootstrap script : <url> but it should not matter . ) ( i used all the development branches as of <date> <time> central time . ) <number> ) source setvars . sh <number> ) cd build / cpu1 <number> ) make config <number> ) remove all sb event filters ( to see on command line ) , as in : { { { @ @ - <number> + <number> @ @ * * this filtering applies only to sb events . * * these parameters have a lower limit of <number> and an upper limit of <number> . */ - <hashtag> define </hashtag> cfe_sb_filtered_event1 cfe_sb_send_no_subs_eid - <hashtag> define </hashtag> cfe_sb_filter_mask1 cfe_evs_first_4_stop + <hashtag> define </hashtag> cfe_sb_filtered_event1 <number> + <hashtag> define </hashtag> cfe_sb_filter_mask1 cfe_evs_no_filter - <hashtag> define </hashtag> cfe_sb_filtered_event2 cfe_sb_dup_subscrip_eid - <hashtag> define </hashtag> cfe_sb_filter_mask2 cfe_evs_first_4_stop + <hashtag> define </hashtag> cfe_sb_filtered_event2 <number> + <hashtag> define </hashtag> cfe_sb_filter_mask2 cfe_evs_no_filter - <hashtag> define </hashtag> cfe_sb_filtered_event3 cfe_sb_msgid_lim_err_eid - <hashtag> define </hashtag> cfe_sb_filter_mask3 cfe_evs_first_16_stop + <hashtag> define </hashtag> cfe_sb_filtered_event3 <number> + <hashtag> define </hashtag> cfe_sb_filter_mask3 cfe_evs_no_filter - <hashtag> define </hashtag> cfe_sb_filtered_event4 cfe_sb_q_full_err_eid - <hashtag> define </hashtag> cfe_sb_filter_mask4 cfe_evs_first_16_stop + <hashtag> define </hashtag> cfe_sb_filtered_event4 <number> + <hashtag> define </hashtag> cfe_sb_filter_mask4 cfe_evs_no_filter <hashtag> define </hashtag> cfe_sb_filtered_event5 <number> <hashtag> define </hashtag> cfe_sb_filter_mask5 cfe_evs_no_filter } } } <number> ) cd exe and run core - linux . bin & wait for <number> - <number> seconds as expected , running with mqueues by default , there will be no significant event messages after : { { { es startup : cfe_es_main entering <allcaps> operational </allcaps> state } } } now , to switch to sockets and show the problem : <number> ) edit build / cpu1 / inc / osconfig . h as : { { { @ @ - <number> + <number> @ @ * * this define sets the queue implentation of the linux port to use sockets * * commenting this out makes the linux port use the <allcaps> posix </allcaps> message queues . */ - /* <hashtag> define </hashtag> osal_socket_queue */ + <hashtag> define </hashtag> osal_socket_queue /* * * module loader / symbol table is optional } } } <number> ) make clean ; make <number> ) cd exe and run core - linux . bin & wait for <number> - <number> seconds , you will see : { { { <number> - <number> - <time> . <number> es startup : cfe_es_main entering <allcaps> operational </allcaps> state warning : system log full , log entry discarded . <allcaps> evs </allcaps> port1 <number> / <number> / cfe_time <number> : stop <allcaps> flywheel </allcaps> <allcaps> evs </allcaps> port1 <number> / <number> / cfe_sb <number> : msg limit err , msgid 0x 1 8 0 8 , pipe es_cmd_pipe , sender sch_lab_app <allcaps> evs </allcaps> port1 <number> / <number> / cfe_sb <number> : msg limit err , msgid 0x 1 8 0 8 , pipe es_cmd_pipe , sender sch_lab_app <allcaps> evs </allcaps> port1 <number> / <number> / cfe_sb <number> : msg limit err , msgid 0x 1 8 0 8 , pipe es_cmd_pipe , sender sch_lab_app <allcaps> evs </allcaps> port1 <number> / <number> / cfe_sb <number> : msg limit err , msgid 0x 1 8 8 5 , pipe ci_lab_cmd_pipe , sender sch_lab_app <allcaps> evs </allcaps> port1 <number> / <number> / cfe_sb <number> : msg limit err , msgid 0x 1 8 8 3 , pipe sample_cmd_pipe , sender sch_lab_app <allcaps> evs </allcaps> port1 <number> / <number> / cfe_sb <number> : msg limit err , msgid 0x 1 8 0 8 , pipe es_cmd_pipe , sender sch_lab_app <allcaps> evs </allcaps> port1 <number> / <number> / cfe_sb <number> : msg limit err , msgid 0x 1 8 8 5 , pipe ci_lab_cmd_pipe , sender sch_lab_app <allcaps> evs </allcaps> port1 <number> / <number> / cfe_sb <number> : msg limit err , msgid 0x 1 8 8 3 , pipe sample_cmd_pipe , sender sch_lab_app <allcaps> evs </allcaps> port1 <number> / <number> / cfe_sb <number> : msg limit err , msgid 0x 1 8 0 8 , pipe es_cmd_pipe , sender sch_lab_app <allcaps> evs </allcaps> port1 <number> / <number> / cfe_sb <number> : msg limit err , msgid 0x 1 8 8 5 , pipe ci_lab_cmd_pipe , sender sch_lab_app <allcaps> evs </allcaps> port1 <number> / <number> / cfe_sb <number> : msg limit err , msgid 0x 1 8 8 3 , pipe sample_cmd_pipe , sender sch_lab_app } } } each of these apps / services invokes cfe_sb_rcvmsg ( ) with a timeout value : * cfe es : 1 0 0 0 ms * ci_lab & sample_app : 5 0 0 ms they delegate to cfe_sb_readqueue ( ) and to os_queueget ( ) with a timeout value .",0
"os_translatepath using "" %* s "" where "" % . *s "" is correct while resolving cppcheck messages , a <code> inside <code> was replaced by an <code> call . unfortunately , the intended <code> format string was typo - decayed into a <code> resulting in the value of <code> including more of the virtual path than intended . fortunately , the use of <code> later prevents this from actually generating incorrect results . to prevent anyone from picking up this <code> call and using it as a model for other <code> replacement code , i would like to fix the format string . <repeated> for the record , the original code was : { { { strncpy ( devname , virtualpath , numchars ) ; devname [ numchars ] = ' \ <number> ' ; /* truncate it with a <allcaps> null </allcaps> . */ } } } the modified code was supposed to be : { { { snprintf ( devname , os_max_path_len , "" % . *s "" , numchars , virtualpath ) ; } } } the code as actually committed was : { { { snprintf ( devname , os_max_path_len , "" %* s "" , numchars , virtualpath ) ; } } } <allcaps> note </allcaps> : os_translatepath could also be refactored to eliminate the need for internal buffers to hold copies of the input , but that is a larger and longer task ( prototype working but needs testing and more testing ) .",0
create a configuration file loader <allcaps> api osal </allcaps> should provide an <allcaps> api </allcaps> for loading text configuration files ( akin to tables ) .,2
"cmake separate flags for c + + builds when building <allcaps> osal </allcaps> applications that use c + + , it is required to use a separate variable for the compiler flags , because sometimes these are incompatible with c compiler flags . cmake has a separate "" cmake_cxx_flags "" variable for c + + compiler commands . most importantly this issue becomes apparent if you use <code> . g + + rejects this option and it needs to be <code> ( or whatever ) instead .",0
"os_symbollookup function prototype variable names do not match implementation the os_symbollookup function prototype ( in osapi - os - loader . h ) defines the prototype to be : int32 os_symbollookup ( cpuaddr * symbol_address , const char * symbol_name ); while the implementations of this function declares the function with variable names that do not match the prototype : int32 os_symbollookup ( cpuaddr * symboladdress , const char * symbolname ) this could result in compiler errors / warnings on certain platforms . it is recommended to update the prototype variable names to match the implementations .",0
"implement osapi - os - net . h <allcaps> sbn </allcaps> , and other applications , would benefit from an <allcaps> osal </allcaps> layer over network interfaces . per the <allcaps> ccb </allcaps> action item <number> , "" update <allcaps> sbn </allcaps> to use the new <allcaps> osal </allcaps> network / socket apis "" . but there is no implementation of the osapi - os - net . h interfaces .",2
trick <allcaps> osal </allcaps> there is growing interest in being able to use the trick <allcaps> osal </allcaps> / <allcaps> psp </allcaps> so that a <allcaps> cfs </allcaps> build can be executed within a trick simulation - basically allowing developers to fly unmodified <allcaps> fsw </allcaps> within an all sw simulation environment on their desktop . the approach was used extensively and successfully on the morpheus project . the trick <allcaps> osal </allcaps> / <allcaps> psp </allcaps> were developed a few years ago . some work will be necessary to get them up and running again with the latest <allcaps> cfs </allcaps> .,2
"<allcaps> osal </allcaps> <number> version description document review cycle attached <allcaps> osal </allcaps> <number> <allcaps> vdd </allcaps> is open for <allcaps> ccb </allcaps> review . please attached any tracked changes / comments with initials included in document filename i . e . "" <allcaps> osal </allcaps> <number> . <number> version description document - sls . docx "" . following the <allcaps> ccb </allcaps> review cycle , when all changes have been reviewed / accepted or rejected , the document will be open for signature and release .",2
allow c99 code in <allcaps> osal </allcaps> . update compiler flags to allow c99 code to be used everywhere in <allcaps> osal </allcaps> .,0
update version number for <allcaps> osal </allcaps> <number> release the version number information in the osapi - version . h file needs to be updated to reflect the <number> release as follows : <hashtag> define </hashtag> os_major_version ( <number> ) <hashtag> define </hashtag> os_minor_version ( <number> ) <hashtag> define </hashtag> os_revision ( <number> ) <hashtag> define </hashtag> os_mission_rev ( <number> ),2
"os_readdir cannot be called with a closed handle ut_osfile_dirio_test . c closes a directory handle with os_closedir but then uses it again with os_readdir to perform a test . this causes a memory issue on vxworks . ( either the osal should return some id from a table that guards against this , and that id should never be used again to prevent double - free , or the test is invalid . )",0
ostimer unit test uses os_idleloop but not os_application_shutdown this prevents the unit test from successfully returning . [ changeset : ea1fcdd ] ready for <allcaps> ccb </allcaps> review,0
vxworks <allcaps> osal </allcaps> implementation needs os_idleloop and os_application_shutdown [ changeset : facd2b3 ] ready for <allcaps> ccb </allcaps> review,0
"timer - test . c has a difficult time obtaining a count for timer4 due to the start delay . i increased the loop count of the os_taskdelays , which can be interrupted by signals . on vxworks this allows the test to pass . [ changeset <tong> 8 e8bb ] ready for <allcaps> ccb </allcaps> review",0
"vxworks <allcaps> osal </allcaps> implementation should use static initialization where possible <allcaps> osal </allcaps> has a concept of tables of resources , where the user can configure some maximum amount of those resources . for example , the binary semaphore table could contain the static bytes of memory for the semaphore itself ( using vx_binary_semaphore or an array of size vx_semaphore_size taking care to maintain proper alignment ) and then use sembinitialize on that memory when the <allcaps> osal </allcaps> wants to create a binary semaphore instead of allocating one from the resource pool . the user configures the maximum number of resources of each type , so it ' s ok to use the memory . this enhancement would increase determinism in the system while maintaining the current <allcaps> api </allcaps> .",2
"os_api_init ( ) does not correct cleanup resources on error os_api_init initializes several os primitives but is made with a pattern of exiting as soon as any initialization fails without cleaning up previous successful initializations . for example : os_task_table_sem = semmcreate ( sem_q_priority | sem_inversion_safe ); if ( os_task_table_sem = = <allcaps> null </allcaps> ) { return ( os_error ) ; } os_queue_table_sem = semmcreate ( sem_q_priority | sem_inversion_safe ); if ( os_queue_table_sem = = <allcaps> null </allcaps> ) { return ( os_error ) ; } if os_task_table_sem successfully initializes , but os_queue_table_sem does not , then os_task_table_sem will become a leaked resource .",0
posix impl should use timer_t instead of uint32 for host_timerid the <allcaps> posix </allcaps> implementation of <allcaps> osal </allcaps> uses timer_create in ostimer . c but stores the timerid in a uint32 instead of a timer_t as per the posix specification . this would also deal with any size issues ( <number> - bit vs <number> - bit ) that may occur when building . i have checked in a fix [ changeset : 5 7 7 3 e4faf0 ],0
"add unit test baseline results and log files the unit test baseline ( specifically for the posix and vxworks implementations that have undergone unit testing for the <number> . <number> release ) needs to be included and delivered with the release . it is recommended to create a "" results "" directory under / src / unit - test - coverage / os for each os implementation that has been unit tested for this release .",0
os_api_init ( ) should be called before any <allcaps> osal </allcaps> calls are used in the unit tests the unit tests vary in how ( or if ) they call os_api_init ( ) before any <allcaps> osal </allcaps> calls are used .,0
ostimer unit test needs non - zero stack size parameter passed to os_taskcreate the call to os_taskcreate in ostimer - test . c needs a non - zero stack - size .,0
"<allcaps> osal </allcaps> <number> configuration guide updates <allcaps> osal </allcaps> <number> will be delivered with cmake and ut assert library stubs and hook functions . the <allcaps> osal </allcaps> configuration guide should be updated to provide instruction for using cmake . the ut assert library and coverage tests should be mentioned in the "" <allcaps> osal </allcaps> source distribution directories "" table under section <number> . <number> .",2
function declaration is not a prototype cppcheck messages : { { { src / ostimer . c : <number> : warning : function declaration is not a prototype } } } note that this is the <code> in the unit - test - coverage tree .,0
"uninitialized variables ( initial cppcheck detection ) <allcaps> note </allcaps> : as cppcheck gets more interesting stuff in cppcheck . cfg we may uncover more independent instances of uninitialized variables . <allcaps> tbd </allcaps> whether they lump in with this ticket or get a new one . probably a new one if we close these promptly , which we should . <repeated> cppcheck messages : { { { src / unit - tests / oscore - test / ut_oscore_queue_test . c : <number> : error : uninitialized variable : queue_data_out src / unit - tests / oscore - test / ut_oscore_queue_test . c : <number> : error : uninitialized variable : queue_data_out } } }",0
same expression on both sides of a binary operator cppcheck message : { { { src / unit - tests / osfile - test / ut_osfile_fileio_test . c : <number> : style : same expression on both sides of ' ||'. } } } this can helpfully point out copy - paste - edit errors where an expression was copied and pasted but not actually edited .,0
"repeated assignments without using the value ( real code edition ) cppcheck messages : { { { src / os / vxworks6 / osnetwork . c : <number> : performance : variable ' retval ' is reassigned a value before the old one has been used . src / os / vxworks6 / ostimer . c : <number> : style : variable ' status ' is assigned a value that is never used . } } } recommended fix methods , <allcaps> pick one </allcaps> : <number> . actually check the status variables to see if an error was returned <number> . put a <code> cast on the function call instead of storing the data that is not actually ever going to be looked at . this advertises to maintainers and to the compiler and to static analysis that we are purposefully ignoring the return value of the function . it would be a good idea to check the posix and rtems implementations to see if they have the same construct in this place . see ticket # <number> for the same problem occurring very frequently in unit test code .",0
"readdir is not reentrant cppcheck messages : { { { src / os / posix / osfileapi . c : <number> : portability : non reentrant function ' readdir ' called . for threadsafe applications it is recommended to use the reentrant replacement function ' readdir_r ' . } } } be sure to check vxworks and rtems implementations , they may also need fixing .",0
"test for unsigned variable less than zero cppcheck messages : { { { src / os / posix / osapi . c : <number> : style : checking if unsigned variable ' sem_initial_value ' is less than zero . src / os / posix / osapi . c : <number> : style : checking if unsigned variable ' sem_initial_value ' is less than zero . } } } <allcaps> note </allcaps> : be sure to check the vxworks and rtems versions , they may also need fixing .",0
"unreachable flow control cppcheck messages : { { { src / tests / osal - core - test / osal - core - test . h : <number> : style : consecutive return , break , continue , goto or throw statements are unnecessary . } } } yes , the code does have two return statements in a row ( this is not the case where cppcheck was getting hideously confused in a header ) .",0
"strncpy may not ' \ <number> ' - terminate cppcheck messages : { { { src / os / posix / osfileapi . c : <number> : warning : the buffer ' localcmd ' may not be null - terminated after the call to strncpy ( ) . src / os / posix / osfilesys . c : <number> : warning : the buffer ' filename ' may not be null - terminated after the call to strncpy ( ) . } } } joe looked at this during the <number> - <number> - <number> <allcaps> ccb </allcaps> meeting and indicated that the code involved needs fixing . joe , i am sending this to you in case you want to punch it out ; otherwise , just toss it back and we can queue up the issue normally .",0
"osloader_testcase code cleanup and resolution of cppcheck results cppcheck messages : { { { osloader_testcase . c : <number> : style : struct or union member ' testcopysymbolrecord_t : : symbolname ' is never used . osloader_testcase . c : <number> : style : struct or union member ' testcopysymbolrecord_t : : symboladdress ' is never used . } } } this structure exists in order to take the size of the structure containing these fields , so our code will be retaining the fields and will not be referring to them . we need to tell cppcheck that , in these two specific cases , it is perfectly ok for these members to be unused . <allcaps> edit </allcaps> - ticket diverged to also clean up function pointers , memsets , test logic suggestions , etc",2
"usleep is obsolete the exact cppcheck message , apparing for these lines { { { src / unit - tests / oscore - test / ut_oscore_misc_test . c : <number> src / unit - tests / oscore - test / ut_oscore_misc_test . c : <number> src / unit - tests / oscore - test / ut_oscore_misc_test . c : <number> } } } in the current development tree , is { { { obsolete function ' usleep ' called . it is recommended to use the ' nanosleep ' or ' setitimer ' function instead . } } }",0
"may need - rdynamic the symbolapitest reports that , if we do not use - rdynamic when linking , modules may not include all of the symbols that they expect to export . ticket # <number> reduces the invasive patching of the build rules being done by the bamboo support scripts ; that patching was forcing - rdynamic into one of the headers . with that invasive patching gone , symbolapitest now fails . alternatives to pick from : <number> . always use - rdynamic ( for the platform where it is meaningful ) <number> . change symbolapitest to not need it to be specified <number> . reinstantiate bamboo code that forces the flag to be used . need to look at the exact effects of - rdynamic and decide when these are needed versus when they are undesirable .",0
"reconcile diffs between unit test makefiles and <allcaps> jsc ut </allcaps> makefiles here is a summary ( from joe hickey ) of what i see as differences between the <allcaps> jsc </allcaps> oscore - test linux makefile ( attached above ) and what we currently have in the "" build "" subdirectory in <allcaps> osal </allcaps> ( this changeset ) . this is what would have to be reconciled before the <allcaps> jsc </allcaps> makefile and the <allcaps> osal </allcaps> makefile could be called "" compatible "" again : variable / macro value settings : * <code> : <allcaps> jsc </allcaps> uses <code> vs . <code> in <allcaps> osal </allcaps> * <code> : <allcaps> jsc </allcaps> uses externally defined $( osal_ut_flgs ) and $( ut_cov_flgs ) make variables , the <allcaps> osal </allcaps> makefile actually sets this blank * <code> : <allcaps> jsc </allcaps> makefile only specifies the one object specifically under test , <allcaps> osal </allcaps> makefiles specify all <allcaps> osal </allcaps> objects here . * <code> and <code> : <allcaps> jsc </allcaps> references externally - defined $( mission_home ) , $( cfs_mission_inc ) , $( osal_tst_src ) variables . <allcaps> osal </allcaps> makefiles are all based on $( osal_src ) included sub - makefile component pathname differences : * ' ' ' osal - config . mak ' ' ' : <allcaps> jsc </allcaps> has <code> and <allcaps> osal </allcaps> makefiles have <code> * ' ' ' debug - opts . mak ' ' ' : <allcaps> jsc </allcaps> has <code> and <allcaps> osal </allcaps> has <code> ( note the lack of "" osal - "" prefix in addition to the relative path difference ) * ' ' ' compiler - opts . mak ' ' ' : <allcaps> jsc </allcaps> has relative path <code> and <allcaps> osal </allcaps> has an absolute path <code> * ' ' ' app - rules . mak ' ' ' : <allcaps> jsc </allcaps> has relative path <code> and <allcaps> osal </allcaps> has absolute path <code> target differences : * <allcaps> jsc </allcaps> overrides the default rule for <code> * <allcaps> jsc </allcaps> defines a <code> target that actually executes the test - <allcaps> osal </allcaps> makefile does not define this * <allcaps> jsc </allcaps> defines a <code> target that calls <code> and scrubs the output . <allcaps> osal </allcaps> makefile does not define this .",2
add <allcaps> sparc </allcaps> - vxworks6 . <number> <allcaps> bsp </allcaps> need to add a <allcaps> sparc </allcaps> vxworks <number> <allcaps> osal bsp </allcaps> so that the <allcaps> osal </allcaps> unit tests for vxworks can build and run right from the <allcaps> osal </allcaps> directory out of the box ( assuming that you have an installation of the <allcaps> sparc bsp </allcaps> and vxworks <number> tool chain ),2
"resolve "" - m32 "" <allcaps> osal </allcaps> classic build issues the classic <allcaps> osal </allcaps> build historically built for <number> - bit x86 linux , on <number> - bit x86 linux build machines . building on a <number> - bit x86 linux server requires the use of the "" - m32 "" flag , but <allcaps> only </allcaps> when the target is the classic <number> - bit x86 linux . this also requires that the server has <number> - bit goodies , often "" multilib "" is the thing you need to google if this is busted . currently , inserting this flag where it is missing or removing it where it is present requires editing files , which is a speedbump for developers and a blocker for automatic systems when building both <number> - bit x86 and any other target . need to set up the classic makefiles so that we default to - m32 not being present , and allow it to be inserted on demand from the command line or via an environment variable ( at the developer ' s option , both need support ) .",0
"expand cppcheck application the initial "" cppcheck "" configuration has been running for a while and looks both useful and stable , but is not using the full power of cppcheck . i need to research the more advanced features of <allcaps> cppcheck </allcaps> and how to make them useful in our environment . this is likely to require someone ( probably me ) to evaluate each function exposed in each <allcaps> api </allcaps> for the documented intent of the function with respect to these features , and encode them in the <code> file . this task may take a significant amount of time . in the interest of getting utility out of the effort quickly , i will break it up into smaller chunks that can be managed independently - - and once the ball gets rolling , with luck , allow more than one person to generate configuration file data . my plan is to identify one <allcaps> cppcheck </allcaps> feature at a time , write a comment on this ticket about the feature , then open a separate ticket to track setting up that feature .",2
"<allcaps> osal api </allcaps> documentation should be doxygen based the <allcaps> osal api </allcaps> documents are currently available as separate word and . pdf documents . the <allcaps> api </allcaps> ' s are defined and maintained in the source code . any changes or new findings to the <allcaps> api </allcaps> ' s can easily get left undocumented , creating a disconnect between the source code and what is stated in the <allcaps> osal api </allcaps> word and . pdf documents . it is highly recommended to couple the documentation with the source code via doxygen .",2
support insertion / integration of third party / bridge libraries missions / projects may have the need / requirement to use specific implementations of functions provided by third party libraries i . e . <allcaps> arinc </allcaps> <number> does not include a printf function . third party libraries cannot legally be included within an official release of the <allcaps> osal </allcaps> . the <allcaps> osal </allcaps> currently does not provide a generic means of integrating third party libraries into the <allcaps> osal </allcaps> . see ticket # <number> for more details,2
"fix up pointer subtraction ( do not cast to integers ) pointer subtraction works . code that casts the pointers into integer types differs from the correct code only in its obfuscation . additionally , where pointer subtraction is used to determine the length of a string , the entire sequence should be replaced by a call to strlen ( ) . on a side note , dividing by "" sizeof ( char ) "" is also mere obfuscation as the standard defines that sizeof returns the size in ( char ) units . note that when attempting to compile for <number> - bit targets , these will usually be flagged as "" casting pointer to wrong sized integer "" - - this may help to find problematic code . start with os_check_name_length ( ) .",0
"<allcaps> jsc </allcaps> : general code cleanup originally implemented as part of trac # <number> and isolated for <allcaps> ccb </allcaps> review purposes . general code clean up modifications : * make all if / then / else as compound statements * add "" void "" to functions that do not take parameters * add final "" else "" to all "" else if "" constructs * make sure all cases in switch stametents have break * add explicit casting where the compiler may emit warnings * add "" static "" and "" extern "" keywords where needed",0
<allcaps> jsc </allcaps> : change fpu get / set mask function return code originally done as part of trac # <number> and isolated for <allcaps> ccb </allcaps> review purposes . changes the return code of the <code> and <code> functions to return <code> for builds that do not have such a mask register .,0
<allcaps> jsc </allcaps> : use fixed width types originally part of trac # <number> and isolated for <allcaps> ccb </allcaps> review purposes . replace use of native <code> with fixed - width <code> typedef .,0
"<allcaps> jsc </allcaps> : audit vxworks6 global table protections originally part of trac # <number> , isolated for <allcaps> ccb </allcaps> review purposes . audit the usage of <code> / <code> calls surrounding global table accesses and adjust where needed .",0
<allcaps> jsc </allcaps> : add static initializers to all local variables originally done as part of trac # <number> and split off for <allcaps> ccb </allcaps> review purposes . only affects vxworks6 <allcaps> osal </allcaps> .,0
"<allcaps> jsc </allcaps> : replace "" <allcaps> uninitialized </allcaps> "" macro with "" os_uninitialized "" originally part of trac # <number> and split off for review purposes . only affects vxworks6 .",0
integrate <allcaps> jsc </allcaps> audit of parameter and return code checking originally part of trac # <number> and split off for <allcaps> ccb </allcaps> review purposes . <allcaps> jsc </allcaps> has done an audit of input parameter checking and intermediate return code checking and added multiple checks / returns . primarily affects vxworks6 but some posix code was touched as well .,0
"<allcaps> jsc </allcaps> updated <allcaps> api </allcaps> tests integrate <allcaps> jsc </allcaps> updates to <allcaps> api </allcaps> ( black - box ) tests . originally implemented as part of trac # <number> , split off for <allcaps> ccb </allcaps> review purposes",2
"add <allcaps> jsc </allcaps> coverage tests ( originally # <number> ) separated from original trac # <number> - add "" white box "" coverage tests for vxworks6 <allcaps> osal </allcaps> .",2
"improve cppcheck configuration for <allcaps> osal </allcaps> the initial level of support for "" cppcheck "" within the <allcaps> osal </allcaps> build plan is a simple implementation using default checking , widened to maximize coverage but not otherwise tuned . while any individual mission or project using <allcaps> osal </allcaps> may decide to do this work , this is only mildly in their direct interest , but it is very much in the interest of the <allcaps> cfs </allcaps> community as a whole that it gets done . we can make cppcheck more useful , both for checking the <allcaps> osal </allcaps> itself and for checking code that uses it , by setting up a configuration file that tells cppcheck as many details as possible about the intended interfaces . for example : - indicating functions that acquire and release resources so that cppcheck can attempt to report failures to release a resource ; this is not just memory allocation but includes lock aquisition and anything else managed using one function to acquire ( or open or connect . <repeated> ) and another to release ( or close or disconnect ) . - indicating where a function requires that a pointer , passed as a function parameter , must point to initialized memory , so that cppcheck can report things like "" trying to strcopy where the source array has not been initialized . "" there are other details we can also express in the cppcheck library configuration file , generally of flavor similar to the above .",2
"cppcheck warns us that strncpy behavior is obscure . as reported by cppcheck warning : if the source string ' s size fits or exceeds the given size , strncpy ( ) does not add a zero at the end of the buffer . this causes bugs later in the code if the code assumes buffer is null - terminated . this message is present in <number> files : { { { osal / src / os / posix / osfileapi . c osal / src / os / posix / osfilesys . c osal / src / os / vxworks6 / osfileapi . c osal / src / os / vxworks6 / osfilesys . c } } } need to examine the fingered bits of code , see if any of them need fixing , and figure out how to get cppcheck to be happy . when checking this , our official stand on telemetry records is that arrays in telemetry records containing text have fixed size and that consumers of the data must not assume that they contain a terminating <code> character . this is the classical case where this strncpy behavior on data overflow is desired as defined .",0
"value stored is never used as reported by cppcheck style : variable % is assigned a value that is never used . this message is present in <number> files : { { { osal / src / os / vxworks6 / ostimer . c osal / src / unit - tests / oscore - test / ut_oscore_task_test . c osal / src / unit - tests / osloader - test / ut_module . c } } } need to examine the fingered bits of code , see if any of them need fixing , and figure out how to get cppcheck to be happy .",0
"unreachable flow control statements as reported by cppcheck style : consecutive return , break , continue , goto or throw statements are unnecessary . the second statement can never be executed , and so should be removed . this message is present in <number> files : { { { osal / src / os / vxworks6 / osapi . c osal / src / tests / osal - core - test / osal - core - test . h } } } need to examine the fingered bits of code , see if any of them need fixing , and figure out how to get cppcheck to be happy .",0
"overwriting unused buffer content as reported by cppcheck performance : buffer % is being written before its old content has been used . reported against : { { { src / unit - tests / osfile - test / ut_osfile_fileio_test . c : <number> src / unit - tests / osfile - test / ut_osfile_fileio_test . c : <number> src / unit - tests / ostimer - test / ut_ostimer_test . c : <number> } } } . <repeated> and a bunch of places in ut_os_stubs . c need to examine the fingered bits of code , see if any of them need fixing , and figure out how to get cppcheck to be happy .",0
readdir is not reentrant as reported by cppcheck portability : non reentrant function ' readdir ' called . for threadsafe applications it is recommended to use the reentrant replacement function ' readdir_r ' . reported against : osal / src / os / posix / osfileapi . c,0
"<allcaps> gcov </allcaps> results for "" osapi "" obscured . the "" make gcov "" target for the "" osapi "" coverage test feeds the output of <allcaps> gcov </allcaps> through some <allcaps> sed </allcaps> scripting that was originally constructed to handle <allcaps> gcov </allcaps> output for a single source file . for the <allcaps> osapi </allcaps> case , however , <allcaps> gcov </allcaps> is being handed data that covers both the adapter source file and the original source file . the sequence of line joins and line edits provided does not produce correct output for this case : it does manage to generate the coverage line for the adapter source , but the heuristic deals badly with the remainder of the file . it would have worked if the second "" file "" line happened to fall on an odd line number .",0
"add <allcaps> gcov </allcaps> summary report we are running <allcaps> gcov </allcaps> on the <allcaps> osal </allcaps> / unit - tests - summary / programs and preserving the details , but there is no coverage summary available from a central location .",0
standardize version numbering ( in <allcaps> osal </allcaps> ) bring version number management within <allcaps> osal </allcaps> into line with the cfs standards documented at <url>,2
"posix message queues leak . during testing , i notice that i sometimes get <allcaps> msgq </allcaps> test failures despite having the "" queues per process "" configuration set to a high enough value , and rebooting fixes the issue . after one spate of reboots , i went and did some digging , and we do seem to be actively leaking posix message queues , at least during testing : posix message queues have identities , and can stick around when nobody has them open , and of course there is a finite limit to them in the system . fortunately , / dev / mqueue shows us all of the queues that exist in the system , and if you remove the entry in / dev / mqueue , the message queue itself is removed . i have implemented code in my testing scripts that aggressively watches for message queue leaks during testing . what i am seeing so far : - the <allcaps> cfe </allcaps> "" run the core until the deadman timer trips "" test can leave behind many queues . - the <allcaps> osal </allcaps> "" queue timeout test "" can leave behind a queue . it would be worthwhile to assure that only operations unique to unit testing ( such as "" kill - <number> $cfecore "" . <repeated> ) leak these .",0
"simplify function pointer manipulations there are a number of places within the <allcaps> cfs </allcaps> projects where the usage of function pointers is somewhat obfuscated by the inclusion of redundant operators . removing those operators can improve the clarity of the code . the redundancies are based on code that , when written , did not properly base itself on the following aspects of function pointers in the c programming language . <number> . function names decay into function pointers in the same way that array names decay into pointers to their first elements , which means that an <code> operator is redundant when setting a pointer to point at a function . for the classical example of this , see most <code> examples , where no <code> is applied to the comparison function when passing it as the last argument , which has type ' ' pointer to function . <repeated> ' ' <number> . the function call operator <code> ' ' args ' ' <code> operates on a function pointer - - so every function call you see actually is invoking the above decay semantics . this means that the <code> operator is ' ' not ' ' needed when calling a function via a function pointer . happily , this also often means that you also do not need an extra level ( or two ? ! <repeated> ) of parentheses to asure that the <code> is applied to the function pointer and not to the return value . <number> . calling a function pointed to by a structure member is a very common operation , and with the above in mind , note that there is no parsing or evaluation order ambiguity ; no extra parentheses are required to assure that <code> and <code> and the function call operator are evaluated in the proper order . my task - - embodied in this ticket - - is to seek out cases in the <allcaps> osal </allcaps> source code where redundant operations are applied to function pointers ( at assignment sites ' ' and ' ' at call sites ) , and provide recommended changes to improve clarity . specific examples will accumulate in the comments below . ticket to be closed when my scan of the project is complete , and all call sites have been resolved ( whether the resolution is to improve them now , file a ticket for later improvement , or where we will be leaving the code unchanged ) . ' ' ( this also makes the code robust against the rare but troublesome case where an external function changed from a function to a function pointer . <repeated> we may never do this , but it is always good to foster good code hygene . ) ' '",2
"vxworks osapi . c utility task does not exit the vxworks osapi . c has an optional task that is started in os_api_init ( <sad> <code> however , this utility task implementation has a while ( <allcaps> true </allcaps> ) loop with no exit logic . for a "" load and forever run it "" scenario this may work , but for any other scenario where an orderly shutdown is desired by the user this means the task is never killed . one can get kernel crashes if the vxworks module is unloaded while that thread is still writing to output . the forever loop thread also makes line coverage difficult . we need a robust method to always end this thread and to ensure the parent thread does not return to os control while this thread is still hanging out there .",0
os_translatepath ( ) has unused variables devicelen and filenamelen of os_translatepath ( ) are function - local variables that are written to but never used .,0
"osfilesys . c mixed return types in osfilesys . c , some functions return os_success ( from osapi . h ) and some functions return os_fs_success ( from osapi - os - filesys . h ) .",2
"os_unmount ( ) & os_chkfs ( ) do not catch os_translatepath ( ) failures in osfilesys . c os_unmount ( ) , the return value from os_translatepath is not checked .",0
"os_rename ( ) does not first check if a file is in use the osfileapi . c <section> does not check if a file is in use or not ( in an entry in the global os_fdtable ) before it makes the system call to rename the file . however , this is in contrast to <section> - which do check if the file is open ( according to the os_fdtable entry ) . if those functions see that the file is open then they return and do not alter the filesystem . so this behavior seems quite different for functions at affect a file . the documentation of the <allcaps> osal api </allcaps> does not explicitly mention any behavior tied to a file that is in use by the <allcaps> osal </allcaps> for any of these functions ( although the implementation is very clear for those other three functions . ) discovered in # <number> , as part of # <number> unit testing .",1
"vxworks os_getphysdevicename ( ) problem with max volume name length the vxworks os_getphysdevicename ( ) in osfilesys . c may have a problem when the volume name length is at its maximum length . see test_os_getphysdevicename_maxvolname ( ) in osfilesys_testcase . c , part of testing form trac - <number> branch , [ changeset :0 f36fb6 ] .",0
"vxworks os_getphysdevicename ( ) does not handle null pointer the vxworks os_getphysdevicename ( ) in osfilesys . c does not check for a null pointer in its arguments . discovered with testing form trac - <number> branch , [ changeset :0 f36fb6 ] .",0
"vxworks os_fs_geterrorname ( ) errors the vxworks os_fs_geterrorname ( ) in osfilesys . c does not check for a null pointer argument . discovered with testing form trac - <number> branch , [ changeset :0 f36fb6 ] .",0
"vxworks os_translatepath ( ) does not handle truncated path properly the vxworks os_translatepath ( ) in osfilesys . c does not detect and properly handle when the mount point and given virtualpath arg are too long . discovered with testing form trac - <number> branch , [ changeset :0 f36fb6 ] .",0
"vxworks os_fsblocksfree ( ) misreports the vxworks os_fsblocksfree ( ) can mis - report the free blocks value . discovered with testing form trac - <number> branch , [ changeset :0 f36fb6 ] .",0
"vxworks os_initfs ( ) logic errors testing form trac - <number> branch , [ changeset :0 f36fb6 ] revealed logic errors in the os_initfs ( ) of osfilesys . c . when running down off - nominal paths and handling the os_volumetable [ idx ] . freeflag . this ticket is to fix those errors .",0
"vxworks os_mkfs ( ) logic errors the vxworks osfilesys . c os_mkfs ( ) has a number of logic errors uncovered by trac - <number> branch , [ changeset :0 f36fb6 ] involving error paths and handling the os_volumetable [ idx ] . freeflag . this ticket is to fix those errors .",0
"vxworks osfilesys . c functions not thread - safe during trac # <number> unit testing it was found that many functions in the vxworks osfilesys . c are not using the semaphore to access the shared table . demonstrated on the trac - <number> branch , [ changeset :0 f36fb6 ]",0
"some vxworks osfileapi . c functions not handling string length correctly there were multiple problems identified in the osfileapi . c ' s string handling . this issue wraps them all up together for convenience . problem <number> : strlen check (>= ) is different than os_check_name_length strlen check ( > ) for the same variable . the check in os_check_name_length should be (>= ) . affects : ( function , rough line number ) * os_creat <number> * os_open <number> * os_stat <number> * os_remove <number> * os_rename <number> * os_rename <number> * os_cp <number> * os_cp <number> * os_mv <number> * os_mv <number> * os_rmdir <number> problem <number> : strlen check ( > ) should check for (>= ) , assuming os_max_path_len includes the terminating null character . affects : ( function , rough line number ) * os_opendir <number> * os_check_name_length <number> identified with # <number> white - box coverage testing .",0
"vxworks osfileapi . c functions not using semaphore multiple functions in the vxworks osfileapi . c are not taking the semaphore when accessing the shared table . os_close , os_read , os_write , os_lseek , os_remove , os_rename , os_cp , os_mv , os_shelloutputtofile , os_fdgetinfo . identified with # <number> white - box coverage testing .",0
vxworks osapi . c os_geterrorname ( ) missing codes os_geterrorname ( ) is missing a few codes . <repeated> error code not returned for os_error_address_misaligned error code not returned for os_invalid_sem_value error code not returned for os_err_file error code not returned for os_err_not_implemented error code not returned for os_timer_err_invalid_args error code not returned for os_timer_err_timer_id error code not returned for os_timer_err_unavailable error code not returned for os_timer_err_internal identified with # <number> white - box coverage testing .,0
vxworks osapi . c os_milli2ticks ( ) problems two problems found : <number> ) os_milli2ticks ( ) returns type ' int32 ' from variable declared as ' uint32 ' . <number> ) there are no limit checks on input value . the calculation may generate overflow on the resulting output type . identified with # <number> white - box coverage testing .,0
vxworks osapi . c functions not using semaphore multiple functions in the vxworks osapi . c are not taking the semaphore when accessing the shared table . identified with # <number> white - box coverage testing .,0
"vxworks os_symtableiterator ( ) unchecked write ( ) in os_symtableiterator ( ) write ( ) is used . it returns the # of bytes actually written . however , the # of bytes is not actually checked by this code . only if a - <number> was returned . an assumption is made that the entire set of sizeof ( symbolrecord_t ) is copied . from the vxworks kernel programmer ' s guide , <number> . pdf : ' ' "" the write ( ) routine ensures that all specified data is at least queued for output before returning to the caller , though the data may not yet have been written to the device ( this is driver dependent ) . the write ( ) routine returns the number of bytes written ; if the number returned is not equal to the number requested , an error has occurred . "" ' ' from the vxworks <number> write ( ) man page : { { { <allcaps> returns </allcaps> the number of bytes written ( if not equal to nbytes , an error has occurred ) , or <allcaps> error </allcaps> if the file descriptor does not exist , the driver does not have a write routine , or the driver returns <allcaps> error </allcaps> . if the driver does not have a write routine , errno is set to <allcaps> enotsup </allcaps> . } } } <allcaps> btw </allcaps> , that ' s two error return codes , not just a - <number> . recommend : checking the return val vs . desired # of bytes , then erroring out the same path .",0
"vxworks os_symtableiterator ( ) name arg too long the os_symtableiterator ( ) name arg could be too long and could be strncpy / copied without a terminating null into symbolrecord_t ' s char symbolname [ os_max_sym_len ] ;. this unterminated null would then be written into the os_sym_table_file_fd . see osloader . c , ln <number> . recommend : an explicit name length check : { { { if ( strlen >= os_max_sym_len ) { return ( <allcaps> false </allcaps> ); } } } } before strncpy . ( discovered as part of # <number> coverage testing . )",0
"vxworks osloader . c functions not using mutex the osloader . c functions do not properly protect the os_module_table , os_sym_table_file_id , and os_symbol_table_size with the os_module_table_mut . these items are being read from and changed outside of the mutex . ( discovered as part of # <number> coverage testing . )",0
vxworks os_moduleload ( ) module_name arg too long if the module_name argument for osloader . c ' s os_moduleload ( ) is too long ( compared to os_max_api_name ) then an unterminated string can be copied into the os_module_table [ i ] . name field . the <allcaps> osal api </allcaps> doc & source comments specify the following return values : * os_error if the module cannot be loaded * os_invalid_pointer if one of the parameters is <allcaps> null </allcaps> * os_err_no_free_ids if the module table is full * os_err_name_taken if the name is in use * os_success if the module is loaded successfuly the osapi . h os_err_name_too_long would be a more descriptive return code . <repeated> but if we do not want an <allcaps> api </allcaps> change then the best thing to do would be to check the argument length ( with terminating null ) and return os_error . ( discovered as part of # <number> coverage testing . ),0
"classic build broken mike scott ( <allcaps> aso </allcaps> project at ames ) reports that with the most recent update to development , his build process that uses the classic build of <allcaps> osal </allcaps> is no longer working . the initial failure is being unable to find osconfig . h i started looking into this , and there are further issues that prevent the classic <allcaps> osal </allcaps> build instructions from working now , and will document each issue ( and its repair ) here .",0
"fix "" utbsp . h "" not found failure when building on some platforms testing on other platforms revealed an issue regarding the include path for the utassert header files . in particular , the latest ubuntu ( <number> ) failed to build due to "" utbsp . h "" not being found . ( this may be related to the more recent cmake v3 . <number> )",0
"rtems ostimer . c functions not using semaphore in the <allcaps> rtems </allcaps> version of ostimer . c , some functions are not using the semaphore with accessing the os_timer_table . see # <number> , and # <number> for similar issue in other osals . ' ' ' os_timersignalhandler ( ) , os_timerset ( ) , os_timergetidbyname ( ) ' ' ' do not touch the semaphore but do access or modify the table . ' ' ' os_timercreate ( ) ' ' ' obtains & releases the semaphore , but is modifying the table after releasing the semaphore .",0
"posix ostimer . c functions not using semaphore similar to trac # <number> , the posix version of ostimer . c is not properly protecting its os_timer_table via a mutex . { { { pthread_mutex_t os_timer_table_mut ; } } } many of the issues seen in trac # <number> are in the posix version as well . full branch coverage unit tests , in trac # <number> , were used to fix trac # <number> ( vxworks ) . the posix ostimer . c will likely need similar coverage tests to ensure this is fixed properly .",0
"enhancements to <allcaps> osal ut </allcaps> stub code in osapi_stubs this ticket reflects further testing with <allcaps> cfe </allcaps> unit tests . previous ticket # <number> is now integrated with <allcaps> cfe </allcaps> unit tests but some additional bits are needed to make everything right . since # <number> was approved at the last <allcaps> ccb </allcaps> , it is not going to be amended anymore , so this is a follow - on update . * hooks were not completely implemented - <allcaps> cfe </allcaps> needs this to make the latest version fully testable . * provide stubs for missing functions : { { { os_timercreate } } } , { { { os_timeradd } } } , { { { os_timerset } } } , { { { os_countsemcreate } } } .",2
"ostimer . c functions not using semaphore the vxworks ostimer . c has a static table and a semaphore to protect it , as in : { { { static os_timer_record_t os_timer_table [ os_max_timers ] ; static uint32 os_clock_accuracy ; /* * * the semaphore for protecting the above table */ static sem_id os_timer_table_sem ; } } } unfortunately , only os_timercreate ( ) , and os_timergetinfo ( ) use that semaphore . ' ' ' os_timercreate ( ) , os_timerset ( ) , os_timerdelete ( ) do not ' ' ' and they ' ' ' modify ' ' ' the table . ' ' ' os_timergetidbyname ( ) ' ' ' and the internal ' ' ' os_timersignalhandler ( ) ' ' ' also access ( read ) the table without using the semaphore . the os_timerapiinit ( ) creates the semaphore , the time conversion functions do not access the table . recommend fixing all the functions that access or modify the table to acquire the semaphore after passing input argument checks .",0
"os_open and file - api - test in conflict the test for os_open includes a clause that explicitly attempts to open , using os_read_write , a file that has never existed - - and expects an error . that is , the test presumes that os_open does not by default create files that do not exist . the implementation , on the other hand , includes o_creat except when opening read - only . the test needs to use os_read_only mode , if we want it to pass with the current implementation .",0
"os_open : <number> is not <number> the 3 rd parameter to os_open is the set of permission bits to be applied if a file is created . the typical value of these is <code> which is an <allcaps> octal </allcaps> constant representing read - write for owner , read - only for group and read - only for everyone else . in several places in the <code> the value <code> without the leading zero - - thus decimal <number> - - is passed , which would create a file using mode <code> octal , which is write - only to owner , no access to group and read - only access to everyone else . oh , and the sticky bit set . in most cases , these erroneous <number> values are not used , but it was used in one case . on the theory that bad code should be repaired , i propose fixing all of them when fixing the erroneous test .",0
"os_timercreate ( ) "" unfreed "" table entries after failure in ostimer . c , os_timercreate ( ) , ln <number> , if the timer_connect ( ) fails , the code attempts to delete the timer created by timer_create , but there is still an "" unfreed "" timer entry in the os_timer_table . this is a potential resource leak that would exhaust the timer table . { { { . <repeated> picking up at ostimer . c , os_timercreate ( ) , line <number> . <repeated> status = timer_create ( clock_realtime , <allcaps> null </allcaps> , ( timer_t <wink> & ( os_timer_table [ possible_tid ] . host_timerid ) ); if ( status < <number> ) { /* commentary : here this table entry is properly freed up . */ os_timer_table [ possible_tid ] . free = <allcaps> true </allcaps> ; return ( os_timer_err_unavailable ) ; } status = timer_connect ( ( timer_t ) ( os_timer_table [ possible_tid ] . host_timerid ) , os_timersignalhandler , possible_tid ); if ( status < <number> ) { status = timer_delete ( ( timer_t ) ( os_timer_table [ possible_tid ] . host_timerid ) ); /* commentary : no cleanup here before the return ! */ return ( os_timer_err_unavailable ) ; } } } } also noted : the timer_delete status is unused , and may not matter at this point .",0
"os_timercreate ( ) unterminated string ostimer . c maintains a static os_timer_table , and a char name [ os_max_api_name ] is an element of each table entry . in os_timercreate ( ) , ln <number> , ' ' ' the code could leave an unterminated string in os_timer_table [ i ] . name ' ' ' . and it appears as though all the other code is assuming it is a properly - terminated string . line <number> tests : { { { if ( strlen ( timer_name ) > os_max_api_name ) . <repeated> return error value } } } and later { { { strncpy ( os_timer_table [ possible_tid ] . name , timer_name , os_max_api_name ) ; } } } copies the string with os_max_api_name length . but if the timer_name argument is sized exactly os_max_api_name + <number> ( including the terminating null ) then it ' ll be copied over so that there is no terminating null in the table entry name . to fix : * the strlen if - test should account for the \ <number> in its length check { { { if ( strlen ( timer_name ) > os_max_api_name - <number> ) } } } * the documentation for this function should note the actual arg length limit with the null * ( nice to have ) it is not actually documented in osconfig . h whether the terminating string nulls are counted as part of the os_max_ * name and path limits . but it certainly does appear that the intent is that strings are properly terminated in the vxworks <allcaps> osal </allcaps> . ( written clairty on that convention would have helped some . )",2
"divide osconfig . h three ways the current osconfig . h ( present in <allcaps> bsp </allcaps> trees and , as a bonus , in the build / inc directory ) contains configuration items that are <allcaps> osal </allcaps> generic , plus configuration items that are <allcaps> bsp </allcaps> specified , and probably items that are os specified . the content of this file needs to be divided . items that are generic <allcaps> osal </allcaps> configurations need to be in a header file located centrally . items that are specified by the os should be kept in a header file within the appropriate <code> tree ; probably a good idea to have this file included by the generic configuration file , to provide "" sane defaults "" in the central file ( where there can be sane "" most os "" values ) , then have the os - specific file override those as appropriate . ditto for the <allcaps> bsp </allcaps> .",2
"add timebase <allcaps> api </allcaps> calls to existing osals for <allcaps> api </allcaps> compatibility to allow backward / forward compatibility once psps begin using the <allcaps> osal </allcaps> timebase <allcaps> api </allcaps> added in # <number> , the existing osals ( posix / rtems / vxworks6 ) need to have some implementation of these functions or else the link will fail . this just adds an implementation that returns { { { os_err_not_implemented } } } for all these calls for the <number> existing <allcaps> osal </allcaps> libraries , which allows the <allcaps> psp </allcaps> or other application code to determine at runtime if the functionality is available or not .",0
"incorrect logic in os_timespectousec in the vxworks and posix implementation of ' ' ' os_timespectousec ( ) ' ' ' , the algorithm logic is using the value of the ' ' ' output ' ' ' ( usec ) by mistake . ( this first if - test is the same if - test used by the opposite function , os_usectotimespec ( ) just above . i assume its a copy - paste error ) . { { { * * function : os_timespectousec * * * * purpose : convert a <allcaps> posix </allcaps> timespec structure to microseconds * * */ void os_timespectousec ( struct timespec time_spec , uint32 * usecs ) { if ( ( * usecs ) < <number> ) { * usecs = time_spec . tv_nsec / <number> ; } else { } } }",0
"osnetwork . c <allcaps> api </allcaps> discrepancies the vxworks osnetwork . c code differs from the <allcaps> osal </allcaps> library <allcaps> api </allcaps> documentation under some conditions . even more interesting , the posix and rtems <allcaps> osal </allcaps> implementations behave differently from the vxworks as well . in osal / src / os / vxworks6 / osnetwork . c , the documentation and code for { { { int32 os_networkgetid ( void ) } } } do not match when there is no network ( e . g . os_include_network is undefined in osconfig . h ) . the c source file function comments are : { { { returns : os_error if the host id could not be found a <number> bit host id if success } } } the <allcaps> osal </allcaps> library <allcaps> api </allcaps> . pdf has : { { { returns : os_error if the operating system calls fail os_success if success } } } ' ' ( that os_success looks like a copynpaste error , all implementations return the host id for successful behavior . ) ' ' but the vxworks code returns a ( valid ) host id of zero , instead of os_error ( a - <number> ) or os_err_not_implemented ( osapi . h ) . when looking at the osal / src / os / rtems / osnetwork . c , i see that it returns os_err_not_implemented when the os_include_network is undefined in osconfig . h . that return value is not documented in the <allcaps> osal </allcaps> library <allcaps> api </allcaps> . pdf or in any code comments . the posix osnetwork . c pays no attention to os_include_network and always makes the os - layer network calls ( unlike the rtems and vxworks osal ' s ) . other <allcaps> api </allcaps> surprises : { { { int32 os_networkgethostname ( char * host_name , uint32 name_len ) } } } can return os_invalid_pointer with a <allcaps> null </allcaps> pointer arg . good implementation , but needs documentation . note : i did not find a tie - breaker in the osapi - os - net . h because that common header had no comments . also , i was unable to find documentation ( pdf or code comments ) on the meaning of these osapi . h return codes . ' ' ' initial recommendations for this ticket : ' ' ' * all <allcaps> osal </allcaps> ( osnetwork . c ) implementations for os_networkgetid ( ) and os_networkgethostname ( ) should return os_err_not_implemented when the os_include_network is undefined and not even attempt to make os calls . * the <allcaps> osal </allcaps> library <allcaps> api </allcaps> . pdf function documentation should be updated to cover all possible return values . * the separate osnetwork . c documentation should be removed in favor of a common function description in the osapi - os - net . h , which all <allcaps> osal </allcaps> implementations use . its too easy to focus in on one . c source and not realize there is an <allcaps> api </allcaps> discrepancy . * document ( in the osapi . h and in the <allcaps> osal </allcaps> library <allcaps> api </allcaps> . pdf ) the meanings of these common <allcaps> osal </allcaps> return codes .",0
"<allcaps> osal </allcaps> timer tests may crash on <number> - bit linux i have seen changes between test runs of the same branch where sometimes the timer related test programs run ok and other times when they die with a <allcaps> sigsegv </allcaps> . test results need to be robust and repeatable . i suspect that these tests are sensitive to some condition that is not being adequately controlled on the test targets . i am making the initial assumption that this is going to require an update to the test scripts for <allcaps> osal </allcaps> , but debugging is going to require some tinkering inside <allcaps> osal </allcaps> to extract what is going on . so this bug is being filed in both <allcaps> osal </allcaps> and <allcaps> test </allcaps> .",0
"failure to test should be <allcaps> fail </allcaps> the bamboo test plan does not currently complain if it is unable to stage and run unit tests on a target , for the simple reason that our test list is currently entirely driven by parsing results returned by the target . if the target vm is offline ( as it was last weekend ) , there are no indications that the test programs did not run , and the presence of a few test results ( the ones from static analysis ) keeps bamboo happy . the plan itself , or its top level scripts ( same thing ) , needs to keep track of the list of test programs , and generate test failure reports for any such program for which it does not obtain results .",0
"combine "" pc - linux "" and "" pc - linux - ut "" <allcaps> osal </allcaps> bsps there is a separate <allcaps> bsp </allcaps> called { { { pc - linux - ut } } } that is used for unit testing . this differs slightly from the normal { { { pc - linux } } } <allcaps> bsp </allcaps> : * it does not block signals * it does not have an idle wait at the end of { { { main ( ) } } } having a different <allcaps> bsp </allcaps> violates the "" fly what you test , test what you fly "" philosophy . the unit tests driven by timers do not work with signals blocked , because these rely on signals working during { { { os_application_startup ( ) } } } in order to function . this is probably the reason for the alternate <allcaps> bsp </allcaps> . however , these tests can and should be fixed to operate using the normal <allcaps> bsp </allcaps> with signals blocked , as this will be more representative of what happens in a normal system . to fix these tests just requires creating a child thread to handle the test logic and allowing { { { os_application_startup } } } to complete normally .",0
"import ut - assert basics into <allcaps> osal </allcaps> portions of ut - assert will be very useful for unit testing within <allcaps> osal </allcaps> , and should be imported from the official release into the <allcaps> osal </allcaps> tree .",2
"os_taskdelete fails if the task ( pthread ) has already terminated on its own i am creating tasks with functions that execute for a period of time , then return ( terminate ) on their own . os_taskdelete tries to call pthread_cancel on the thread id , which fails . this results in the task table entry remaining and i am unable to re - use that task name .",0
"os_taskdelay has wrong nanosleep values in src / os / posix / osapi . c , lines <number> - <number> , os_taskdelay should use : waittime . tv_sec = ms / <number> ; waittime . tv_nsec = ( ms % <number> ) * <number> ; not waittime . tv_sec = ms / <number> ; waittime . tv_nsec = ( ms % <number> ) * <number> ;",0
"os_queuecreate failures the os_queuecreate test ( in test_msgq ) is failing on specific versions of specific branches where it previously passed . i observed that after a string of <allcaps> green </allcaps> builds , the nightly builds were in <allcaps> red </allcaps> status , with this test being the trigger for the failure , but only on one of the two test targets . rebooting the test target involved cleared the failure . this is not an acceptable long term solution ; testing should not induce resource leaks . this was observed on the <number> - bit x86 linux test target , but i suspect it will be common to all targets sharing that <allcaps> osal </allcaps> message queue implementation .",0
"os_check_name_length portability the os_check_name_length function triggers warnings when it casts pointers to integers . it then triggers refactoring when an engineer notices that it is calcualting the length of a string by casting pointers to int , subtracting , and dividing by sizeof ( char ) .",0
"fix warnings in vxworks support code take a few minutes to resolve the remaining compiler warnings generated when building for powerpc vxworks targets . three edits in / os / and one in / bsp / , all specific to the vxworks cross - compilation .",0
"fix simulataneous use of <allcaps> osal bsp </allcaps> + <allcaps> cfe psp </allcaps> compiler flags when building <allcaps> osal </allcaps> as a component of <allcaps> cfe </allcaps> , the compiler flags for both the <allcaps> cfe psp </allcaps> and the <allcaps> osal bsp </allcaps> are used . with the current <allcaps> bsp </allcaps> / <allcaps> psp </allcaps> , the effect here is that "" - d_linux_os_ "" is included twice . this does not currently cause a problem , but it is incorrect , and it could cause a problem for future configuration where things may conflict . this only affects the cmake build .",0
"add user - space message queue library to the <allcaps> osal </allcaps> ( <allcaps> gsfc dcr </allcaps> <number> ) the <allcaps> gsfc atlas </allcaps> project developed an alternate queue library to use with <allcaps> posix </allcaps> to overcome a performance limitation with the linux posix message queues . incorporate this enhancement ( or similar enhancement ) into the <allcaps> osal </allcaps> for <allcaps> posix </allcaps> , <allcaps> rtems </allcaps> , and vxworks .",2
add vxworks <allcaps> rtp </allcaps> / memory protected port ( <allcaps> gsfc dcr </allcaps> <number> ) this vxworks <number> . x port is available from a <number> <allcaps> irad </allcaps> effort . it will support running code in a memory protected process under vxworks . this port will not affect other <allcaps> osal </allcaps> ports .,2
"<allcaps> osal </allcaps> library <allcaps> api </allcaps> document cut and paste errors in the "" <allcaps> osal </allcaps> library <allcaps> api </allcaps> "" document : <number> . the description of the os_write function is a cut and paste of the os_read function . <number> . in the description of the os_binsemtimedwait "" function , the syntax section states "" os_binsemtimewait "" ( without the ' d ' ) .",1
consider adding a timed wait function to the mutex <allcaps> api </allcaps> ( <allcaps> gsfc </allcaps> <number> ) the <allcaps> osal </allcaps> does not include a mutex wait with a timeout . this was originally requested by <allcaps> apl </allcaps> . see also trac ticket # <number>,2
"<allcaps> posix </allcaps> - consider using "" sched_rr "" instead of "" sched_fifo "" for realtime threads although <allcaps> osal </allcaps> defines <number> priority levels ( <number> - <number> ) , most typical <allcaps> posix </allcaps> systems will have considerably fewer than <number> priority levels for task scheduling . a typical linux system offers priority levels ranging from <number> to <number> . to handle this , the <allcaps> posix </allcaps> layer combines multiple <allcaps> osal </allcaps> priorities into a single <allcaps> posix </allcaps> priority bucket , evenly spreading the <allcaps> osal </allcaps> range into the available <allcaps> posix </allcaps> priority range . when combined with the sched_fifo policy , this may have unintended consequences in the case that two <allcaps> osal </allcaps> tasks are created with priority values that cause them to be mapped into the same <allcaps> posix </allcaps> bucket . to illustrate : consider two <allcaps> osal </allcaps> tasks , created with priority levels "" <number> "" and "" <number> "" . if both get mapped into the same bucket ( likely ) then the os will treat them as equal for scheduling purposes . assuming the task at priority "" <number> "" becomes ready - to - run first , it can use the <allcaps> cpu </allcaps> indefinitely even if the task with priority "" <number> "" also becomes ready - to - run . this is because task <number> will be behind task <number> in the <allcaps> fifo </allcaps> queue . using the round - robin ( rr ) scheduling policy can be an improvement here , since the kernel will time - slice the two tasks rather than allowing task <number> to indefinitely preempt task <number> . although there is no ideal solution due to the lower number of actual priority levels in the kernel , the rr policy is arguably a better choice here .",2
"posix - optionally disable use of some realtime features for debugging it was discovered that the pthreads library supplied by xilinx for their microblaze platform does not properly support the pthread_prio_inherit attribute on mutexes . the problem occurs when a higher - priority thread becomes blocked on a mutex owned by a lower - priority thread , in this pthreads implementation the higher priority task starts "" spinning "" and ultimately uses <percent> <allcaps> cpu </allcaps> , locking out any other process , including the ability to kill or stop the process - reboot is the only recourse . this bug is a problem in the xilinx - supplied pthreads library , but until a real fix is done , we need to disable the pthread_prio_inherit option . disabling this feature may also be useful to others during debugging if another user runs into a similar issue . it was also useful to disable rt scheduling entirely while debugging this problem . this ticket will add compile - time macros that can be added to the "" osconfig . h "" file that will control these features . the default ( if nothing is defined ) will be to use the same features that are currently in place ( no change ) .",2
<allcaps> osal </allcaps> : os_eof macro is not defined ( <allcaps> gsfc dcr </allcaps> <number> ) <allcaps> eof </allcaps> can be defined differently for different platforms . the <allcaps> osal </allcaps> should define this value and make reference to this return value in the <allcaps> osal </allcaps> library <allcaps> api </allcaps> documentation .,2
<allcaps> osal </allcaps> : consider allowing root task ( caller of os_api_init ) to register and use <allcaps> osal </allcaps> services ( <allcaps> gsfc dcr </allcaps> <number> ) consider a model for the system root task where the caller to os_api_init ( ) is also a registration of the task with the <allcaps> osal </allcaps> . this can ensure that the root task can use <allcaps> osal </allcaps> functions . this also allows to <allcaps> osal </allcaps> to initialize <allcaps> cpu </allcaps> affinity for the root task and use that stored <allcaps> cpu </allcaps> affinity for inforcing <allcaps> cpu </allcaps> affinity policies when the root task spawns tasks .,2
"backtrace - tracking feature for debugging <allcaps> osal </allcaps> mutexes buggy code that takes a mutex but forgets to release it can be very difficult to debug - when the code is stopped in the debugger , it is clear that the thread is waiting on the mutex , but evidence of the real problem is long gone and it is impossible to tell which thread took the mutex but did not give it up . glibc has a { { { backtrace ( ) } } } function which can be extremely useful in debugging these situations . this will add an enhancement to the "" posix - ng "" build to __optionally__ obtain and store a backtrace with each successful "" take "" of a mutex . if at some point in the future another thread gets locked trying to obtain the mutex , the backtrace will point exactly to the code that obtained the mutex without releasing it . obviously this has some performance / memory implications ( although not much ) so it will not be enabled by default . this would be something the developer could enable when actually trying to debug mutex release issues .",2
enforce strict <allcaps> ascii </allcaps> replace all non - <allcaps> ascii </allcaps> characters ( i . e . copyright symbol ) with <allcaps> ascii </allcaps> equivalent .,0
"connect compiler warnings to test results parser after compiling , scan the resulting log for warning messages , and produce an output file presenting the warnings as "" test failures "" that can be observed ( and quarantined ) from within the bamboo interface . interesting design goals : * ability to configure patterns that group warnings that are closely related but scattered through the build logs ( i am ok with doing this by editing the warning - detecting <allcaps> awk </allcaps> script , at least initially ) . * ability to report "" test now passing "" for groups of warnings previously identified . * fall back to a reasonably sane organizational method to present any warnings not captured by patterns above ; <allcaps> gcc </allcaps> ' s "" - wsome - warning - type "" tags are suggested . requirements too obvious to state : * input is the "" warning "" lines from a compile * build area path needs to be stripped from the input * output is "" <allcaps> xml </allcaps> - ish "" files for bamboo ' s junit parser yes , i am already tinkering with a prototype <wink>",2
add xenomai <allcaps> osal </allcaps> add xenomai <allcaps> osal </allcaps> v1 . <number> as delivered from matt benson / odyssey space research on <date>,2
"implement user - selectable compiler warning switches it has become apparent that a "" one - size - fits - all "" approach to compiler warnings may not be sufficient going forward . in general , most developers should be using "" - werror "" in addition to "" - wall "" , "" - pendantic "" , etc to catch any coding issues at first sight . however , the specific set of warnings for any given piece of code is dependent on the specific compiler version , target architectures , and optimization level in use at the time of build . this can mean code that builds without warnings on one build can fail miserably on a different build . this could be an major issue for a novice who clones the latest code from the community repository , and builds it with the latest version of <allcaps> gcc </allcaps> ( i . e . one that we may not have tested yet ) and finds a new warning that causes the entire build to fail unexpectedly . as a compromise , the following is proposed : * always use "" - wall "" switch to enable the most reasonable warnings ( incidentally , this is not __all__ warnings , it leaves out the ones most likely to generate false positives ) . * do not put "" - werror "" in the official build scripts , so if compiling with a new <allcaps> gcc </allcaps> version or a different target architecture than the what has been officially tested , the build will not fail if a new warning is triggered . * also leave out "" - pedantic "" from the official build as this , by definition , tends to warn on constructs that are generally ok in practice but violate some ( possibly esoteric ) aspect of the c standard . the thought behind this is that plenty of old existing code out there may work fine but might not compile cleanly using "" - pedantic "" , so we should not force this switch upon users by default . * add a mechanism by which developers can easily add extra <allcaps> cflags </allcaps> to a build , without modifying a makefile ( or cmakelists ) file . this way , any users that want to may enable "" - werror "" or "" - pedantic "" on their own builds , all the time , without having to maintain a private branch of the build script . the automatic builds done by bamboo , these will be built __without__ "" - werror "" but the build log will be checked for warnings , and the presence of any new warnings will be logged as a unit test error so they can be fixed before moving the code forward .",2
add locking during test runs the build support scripts presume they have unique ownership of the test target . this assumption may be violated if the script is run manually . this can be resolved by using the flock ( <number> ) command to set up an advisory lock within the shell script .,2
"add osprintf to <allcaps> osal jsc </allcaps> has developed a known and understood version of printf that has been code reviewed and unit tested . it can be used on platforms that do not provide a printf ( such as arcin653 ) or as a known , trusted implementation of the printf function on other oss . currently , versions ( there are small variations in the implementation between oss ) for the posix , vxworks6 , and arinc653 osals are available . need to add branch with <allcaps> osal </allcaps> / src / os / posix , vxworks6 , arcin653 / osprintf . c and <allcaps> osal </allcaps> / src / os / inc / psprintf_priv . h , osprintf . h",2
"<allcaps> api </allcaps> additions to formalize common routines in <allcaps> osal </allcaps> during unit testing and for "" restart "" actions in a real system ( either processor or power - cycle restarts ) it is necessary to have a method of cleanly shutting down the system . currently , support for shutdown operations is left up to the <allcaps> bsp </allcaps> , and it is not consistently handled between the various bsps or not handled at all in some cases . <allcaps> osal </allcaps> needs to have formal procedures for a normal shutdown since there is often some clean up work to do , including but <section> : * sanely exit all running tasks , or collect resources from tasks that have exited already * delete queues , mutexes and semaphores ( this is particularly necessary on systems where this is a limited resource and may affect the ability to implement a warm restart ) * unmount any non - volatile filesystems that may have been mounted * delete shared memory segments this ticket will add some basic <allcaps> api </allcaps> calls to formalize the procedure and provide the hooks necessary to do this cleanup . the <allcaps> posix </allcaps> layer needs this with the highest priority , as it is used extensively for testing where a sane shutdown / restart procedure is important .",2
"adjust usage of feature support macros for glibc / posix glibc ( de - facto standard c library for <allcaps> gnu </allcaps> / linux ) uses compiler macros to select features from the various c standards out there . at a bare minimum , the <allcaps> posix </allcaps> build currently relies on some features in xpg5 and <allcaps> posix </allcaps> . 1 c ( <number> ) . in order to ensure these are enabled , the osapi . c file <hashtag> defines </hashtag> "" use_unix98 "" immediately before including pthread . h . this is not the proper way to do this - - use_unix98 ( with underbars ) is an internal macro defined by the glibc headers based on <allcaps> other </allcaps> macros that were specified . it should also be done in such a way that all source files adhere to the same general standard ( for sanity sake ) . = = recommended fix = = use "" xopen_source = <number> "" across the entire build . this will enable xpg6 features . xpg6 adds some more realtime features that are likely to be useful to applications such as this , e . g . clock_nanosleep ( ) and some others .",0
"<allcaps> osal </allcaps> public / private data structure delineation this ticket was originally part of ticket # <number> but the change was independent and significant enough to warrant breaking this out into a separate review item . this will fix some issues with the os module <allcaps> api </allcaps> : * <allcaps> cpu </allcaps> addresses must be stored using the "" cpuaddr "" type , not uint32 . * the "" os_module_record_t "" should be made into an os - dependent structure , as the different os layers may have different sets of data that they need to retain for loaded modules . this will also make it more consistent with the other apis - - e . g . tasks , queues , semaphores all define their internal record structures in the os - specific implementation and not part of the public <allcaps> api </allcaps> . * the os_moduleinfo ( ) call should return a standardized structure and not the direct internal record . this will also be more consistent with the way the other apis do this where they have a separate "" prop "" structure that is returned that is defined as part of the public <allcaps> api </allcaps> .",2
"fix <allcaps> osal </allcaps> timer test id usage the <allcaps> osal </allcaps> timer test implementation assumes that timer ids will always be issued in sequential order starting with "" <number> "" . it incorrectly assumes that the timer id will be suitable for an array index . an intermediate lookup table is required here , which has os_max_timers entries , to correctly map the id supplied during the create call back to a local array index .",0
"add pc - rtems <allcaps> bsp </allcaps> to <allcaps> osal </allcaps> for development under <allcaps> rtems </allcaps> it is helpful to have a basic <allcaps> bsp </allcaps> that does not require any special development boards . the <allcaps> rtems </allcaps> project provides this via the "" pc686 "" <allcaps> bsp </allcaps> . this makes it possible to boot and run an <allcaps> rtems </allcaps> application on ordinary commodity pc hardware . this also boots and runs in virtual machines i . e . <allcaps> qemu </allcaps> which is very desirable for testing . this ticket will add a "" pc - rtems "" <allcaps> bsp </allcaps> to <allcaps> osal </allcaps> that can be used for this purpose .",2
"do not block synchronous hardware - generated signals in pc - linux <allcaps> bsp </allcaps> as of <allcaps> osal </allcaps> <number> , __all__ signals are blocked during execution of the os_application_startup ( ) call , then unblocked before entering the wait loop . there is some valid logic behind this - - * by definition , a signal is directed to a process , not a thread . in a multi - threaded process , each thread gets its own signal mask and "" normal "" signals may be delivered to __any thread__ within that process that has the signal unmasked . * by masking all signals during os_application_startup ( ) , any threads created during this time will automatically inherit the mask and therefore have all signals blocked . * signals will then be unblocked only in the original ( main ) thread , therefore any signals generated will be delivered only to this thread . the issue here is that some signals on linux are generated by the underlying hardware and the kernel forwards these ( synchronously ) to the specific __thread__ that was executing on the <allcaps> cpu </allcaps> when the actual signal was triggered . the set of hardware - generated signals : <allcaps> sigsegv </allcaps> , <allcaps> sigill </allcaps> , <allcaps> sigbus </allcaps> , <allcaps> sigfpe </allcaps> should <section> be blocked at any time by any thread . for instance , if a thread causes a segmentation fault by using a bad pointer while <allcaps> sigsegv </allcaps> is blocked , the thread will continue running , but results are undefined .",0
"clean up "" - d "" compile time macros used in pc - linux build this is the equivalent of trac <number> in the <allcaps> cfe psp </allcaps> - - see [ <url> the same build flags are duplicated in the <allcaps> osal bsp </allcaps> . the "" pc - linux "" <allcaps> osal bsp </allcaps> defines the following to be added to the compiler <allcaps> cflags </allcaps> : { { { - d_el - <allcaps> dendian </allcaps> = _el - dsoftware_little_bit_order - d__ix86__ - d_ix86_ - dposix - <sad> 8 6 pc - d_reentrant - d_embed_ - dos_debug_level = <number> } } } these were brought into the cmake build from the original build scripts in order to be consistent just in case any code required it . however , they are unnecessary , many are not even used anywhere in <allcaps> cfe </allcaps> / <allcaps> osal </allcaps> , and potentially even wrong . the reality is that with linux , the "" pc - linux "" is a general purpose <allcaps> psp </allcaps> that can most likely be used on __any__ general - purpose development machine that runs linux . it is not limited to only x86 pc ' s , and in fact works just fine on <allcaps> arm </allcaps> , powerpc , and microblaze targets too . i have successfully used the ( unmodified ) pc - linux <allcaps> bsp </allcaps> to execute unit tests on a beaglebone black ( <allcaps> arm </allcaps> ) as well as an emulated powerpc <number> based development machine . in all these cases , the "" x86 "" macros are wrong , and on the powerpc , the el / <allcaps> endian </allcaps> / software_little_bit_order are wrong too . to summarize - i recommend removing <section> of these macros from the pc - linux build when using the cmake scripts ( the old makefiles can stay as - is ) .",0
"write <allcaps> xml </allcaps> files for bamboo we use the atlassian ' ' bamboo ' ' system to automatically build the project , run the test , and present the results , but the system is not an oracle : it requires test results to be in one of the several forms for which it has parsers . i was able to construct <allcaps> xml </allcaps> files that bamboo ' s "" junit results "" parser was able to handle . this commit introduces a simple implementation of a file writer for those files . this is a ' ' bare - bones ' ' implementation , onto which we can hang future enhancements . note that there are rules for quoting data in strings , and text not within <code> tags ; the simple approach taken here is merely to completely avoid the use of any character that needs quoting . my intention is to continue work on this when i get back from vacation on the 2 3 rd .",2
"improve bamboo builds of cfs <allcaps> osal </allcaps> tree the current bamboo plan for the <code> project compiles <allcaps> osal </allcaps> and runs both sets of tests , but only recovers test results from one of the two sets . work needs to be done to extend the test results recapture to pull in the results of the other tests .",2
"pthread_create 3 rd arg must be of right type os_taskcreate is handed an <allcaps> osal </allcaps> entry point , which is a pointer to a function taking no parameters and returning no return value . it passes it along to pthread_create which is expecting a pointer to a function that takes a single void pointer parameter , and returns a void pointer return value . the code as written triggers a compiler warning that we want to get rid of . casting the pointer gets rid of the warning , at the cost of presuming that the <allcaps> abi </allcaps> will do the right thing when the caller and callee disagree on the function signature . this has an associated technical debt : every implementation that uses this code has to be aware of the issue and assure that this kind of signature mismatch is ok . alternately , we can stash the pointer to the entry point somewhere , and hand pthread_create a pointer to a function of correct type , which is responsible for calling the entry point and returning a pointer . this has a runtime memory cost of one stack frame . doing nothing retains the potential failure , but also retains a warning about the potential failure . i suggest either doing the real fix , or leaving the code alone until - werror forces us to do the real fix . i will not automatically push this into the <number> - <number> - <number> integration candidate , as tempted as i am .",0
"os_moduleload ( ) 2 nd and 3 rd args need to be const the current integration candidate for cfs_cfe includes code that passes ( char const <wink> pointers as the 2 nd and 3 rd parameters to the os_moduleload ( ) function . in order for this to compile without warnings , these parameters of this function need to carry <code> qualifiers in the header defining the function and in the function itself . the function does not modify data pointed at by these parameters , so the <code> qualifier is appropriate . this change does not require changes to callers ( but does allow them to pass pointers to <code> data ) . this change will need to be included in the <number> - <number> - <number> integration candidate synchronized across all projects . ( i thought i had seen a ticket for this , but was unable to lay hands on it . )",0
update <allcaps> osal </allcaps> for class a & associated unit tests the currently released <allcaps> osal </allcaps> unit tests may not fully run with <allcaps> osal </allcaps> <number> . <number> . <allcaps> jsc </allcaps> has made updates so that they run with linux and arinc653 <allcaps> osal </allcaps> <number> . <number> . <allcaps> jsc </allcaps> is currently updating to work with vxworks <number> . these updates are being tracked in the <allcaps> jsc </allcaps> subversion repo and need to be pushed into a proper git branch and further work continued from there .,0
"<allcaps> osal ppc </allcaps> vxworks "" test runner "" independent of any other issues with building test code for the powerpc running vxworks - - it appears that i will need a small bit of "" helper code "" in order to make my testing environment a little bit more robust . currently , running a unit test requires someone , by hand , to do the following steps for each test : - observe the value of <code> - issue <code> command - watch out for any ' ' undefined symbol ' ' errors - verify that <code> changed - issue <code> command - monitor console output watching for the test to finish - perhaps reboot the target if things went horribly wrong running the tests by calling <code> directly from the shell introduces problems if the test program makes any changes in the task that disturb the shell - - most notably , if the task calls <code> all bets are off . what i want in a "" test runner "" is to have code that supervises loading of the program , detects any load errors , and assures that the loaded image provides a suitable entry point . if all is good , start the test as a subtask . the runner needs to then wait for the task to complete , which unfortunately requires it to periodically test to see if the task is still alive . a nice thing to have for this sort of facility is a timeout , which turns out to be pretty trivial given that we have to drop into a polling loop . if we loop too long , we can kill off the task and make appropriate log annotations . the initial runner i envision is simply an image to be loaded after the target boots , exporting a function that does the work for one test , coupled with a script that loads the image and calls the function for each test to be run .",2
"<allcaps> tsf </allcaps> : osloader os_moduleload # <number> the os_moduleload test case in the osloader unit test fails during the "" test setup "" loop . once the test was augmented to report the failing module name , it was discovered that this was due to not staging the "" <allcaps> module </allcaps> % d . so "" files to the target running the unit tests . repairs actually applied to the build script over in the cfs_test project ( cfs_test / osal / build . sh ) .",0
"fix <allcaps> osal </allcaps> build when using <allcaps> rtems </allcaps> "" pc686 "" <allcaps> bsp </allcaps> in the <allcaps> rtems </allcaps> distribution , the rtems_interrupt_catch ( ) function is not always defined . it depends on the <allcaps> bsp </allcaps> build - time options , specifically if the macro "" cpu_simple_vectored_interrupts "" is defined set to <allcaps> false </allcaps> then the <allcaps> api </allcaps> call is not available . this causes a link error when building with the "" pc686 "" <allcaps> bsp </allcaps> since os_intattachhandler ( ) calls rtems_interrupt_catch ( ) . this ticket will simply add a preprocessor check for the above condition , and if rtems_interrupt_catch ( ) is not available then os_intattachhandler ( ) should return os_err_not_implemented .",0
"<allcaps> osal </allcaps> should use ut framework similar to that of <allcaps> cfe </allcaps> with trac ticket # <number> ( and related # <number> ) now implemented , the <allcaps> osal </allcaps> tests can be used as one piece of a build verification tool suite . however , the implementation is currently very basic - it does not use any real testing framework , it simply counts errors using a global integer added to each test . <allcaps> cfe </allcaps> has a more sophisticated ut framework consisting of the following functions : * ut_text ( ) - informational / log file text printing function ; * ut_report ( ) - provides a common method to check for a condition , along with code to log <allcaps> passed </allcaps> / <allcaps> failed </allcaps> in a consistent manner ; * ut_setrtncode ( ) - ability to tailor the response code of stub functions in order to exercise error paths ; * ut_reportfailures ( ) - test summary generator <allcaps> osal </allcaps> could benefit from using the same framework to run its tests . most importantly , using the common "" ut_report ( ) "" <allcaps> api </allcaps> ensures that any errors that occur will be counted and logged in a consistent way . this is particularly important for automated tests , as a simple "" grep "" command can reliably find failures within log files containing thousands of test cases .",2
"os_pend and os_check are backwards for functions that have a "" timeout "" parameter , two special values are defined : "" os_pend "" can be used to wait forever , and "" os_check "" can be used to not wait at all / return immediately . the issue is that "" os_pend "" is defined as "" <number> "" and "" os_check "" is defined as "" - <number> "" . these should be the other way around . the problem is not so much when the special values are used but rather when they are <allcaps> not </allcaps> used and the timeout is computed by subtracting a current time from a deadline time . if the result of that computation happens to be zero , the <allcaps> osal </allcaps> will interpret this as "" os_pend "" and will end up waiting forever . simply swapping the definitions of os_check and os_pend would make the operation much more logical by making a computed timeout of zero get the behavior of os_check and not os_pend .",2
"alternate time references for <allcaps> osal </allcaps> timers <allcaps> osal </allcaps> currently has a timer <allcaps> api </allcaps> which references only to the real time clock in the <allcaps> cpu </allcaps> . all timers created using the os_timercreate ( ) / os_timerset ( ) <allcaps> api </allcaps> are always based on the same clock reference . however , in an embedded system , a local clock may not always be the real reference for events ; many systems derive their timing from an external entity which is <allcaps> not </allcaps> necessarily synchronized to the local <allcaps> cpu </allcaps> clock . this ticket will add a new type of <allcaps> osal </allcaps> object called a "" time base "" . by default a time base can be driven from the local <allcaps> cpu </allcaps> real time clock , which will mimic the current behavior of timers . however the <allcaps> bsp </allcaps> / <allcaps> psp </allcaps> may create additional time bases and synchronize them to e . g . an external timing interrupt . the same existing "" timerset "" <allcaps> api </allcaps> can be used to set the timers against the alternate time base and it will be transparent to the app .",2
"more lenient operation when "" <allcaps> simulation </allcaps> "" compile - time directive is defined when using the <allcaps> posix osal </allcaps> implementation under linux , certain things only fully work when running as root . specifically : * attempts to create <allcaps> posix </allcaps> queues at depths greater than / proc / sys / fs / mqueue / msg_max ( typically <number> ) will fail . * attempts to raise the priority of user threads will fail . the queue depth issue in particular is so frequently encountered that there is a special message printed if queue creation fails . however , the suggested workarounds require root access , and this would not typically be the case when using an official <allcaps> aces </allcaps> - issued linux workstation ( unless one has elevated privileges ) . in order to make it easier for someone to initially get up and running with <allcaps> osal </allcaps> / <allcaps> cfe </allcaps> , the <allcaps> osal </allcaps> should be more lenient and allow the operation to succeed even if all the parameters were not met due to being a normal user and not root . a workaround such as this can be employed if and only if compiling with the "" <allcaps> simulation </allcaps> "" flag , as this indicates the user is performing a debug build and not running on a real target . this way , the operation will still fail when performing a build for real hardware .",2
"<allcaps> api </allcaps> prototype changes to address compiler warnings these areas of the <allcaps> osal api </allcaps> need clean up . task <allcaps> api </allcaps> : * os_taskcreate ( ) stack pointer is declared const ( read - only ) . by definition , stack space should not be read - only . * os_taskinstalldeletehandler ( ) takes a "" void * "" argument rather than a function pointer . this should be a function pointer . module <allcaps> api </allcaps> : * to be consistent with the other <allcaps> api </allcaps> ' s , a separate property structure should be defined for use with os_moduleinfo ( ) . currently this returns the internal <allcaps> osal </allcaps> "" os_module_record_t "" , while all other <allcaps> api </allcaps> ' s return a dedicated property object . this is necessary to allow the internal implementation of the <allcaps> osal </allcaps> to change in the future while preserving the public <allcaps> api </allcaps> types . * the types should be changed to use the "" cpuaddr "" type rather than uint32 where a memory address is stored ( os_module_address_t , os_symbollookup ( ) ) general : * when passing character strings as input to functions these should preferably be declared as "" const char * "" whenever possible . this allows one to pass string literals into the function . otherwise a warning may be generated if a literal is used for a parameter declared as "" char *"".",0
"make file system <allcaps> api </allcaps> work more like the rest of <allcaps> osal </allcaps> in addition to the error code issue in ticket # <number> , other aspects of the filesystem <allcaps> api </allcaps> should be fixed to better integrate with the rest of <allcaps> osal </allcaps> : * the filesystem <allcaps> api </allcaps> is not a full abstraction , it is only a light wrapper around the <allcaps> posix </allcaps> / c library functions . similarly , the "" os_fstat_t "" , "" os_dirp_t "" , and "" os_dirent_t "" are directly typedef ' ed to the c library types and not abstracted in any way . the effect of this is that any application code written using the <allcaps> osal </allcaps> filesystem <allcaps> api </allcaps> is ultimately still dependent on the underlying system libraries and headers , and the particular <allcaps> posix </allcaps> / c standard variant it supported , and may not be portable to other os ' s . * due to the direct use of os - supplied types and implementation , this implicitly adds a limitation that any <allcaps> osal </allcaps> filesystem must also map to a "" real "" filesystem recognized by the underlying os . it is not possible to access a file storage device unless the os already recognizes its filesystem . * the <allcaps> api </allcaps> calls are defined differently and look / feel more like c library functions than the rest of <allcaps> osal </allcaps> . some fs functions return an "" int32 "" which serves as both an object id and error code . other fs function return a pointer and these have no way of returning a more descriptive error other beyond a <allcaps> null </allcaps> pointer . in the rest of <allcaps> osal </allcaps> , <allcaps> api </allcaps> functions pass back an object id separately from the error code via a separate "" uint32 "" parameter . this eliminates confusion of how to differentiate an error code from a valid object id . this can be fixed without breaking <allcaps> api </allcaps> compatibility with existing code : * the types which are currently directly typedef ' ed to the c library types can be properly abstracted . this will be transparent to application code as long as the names are preserved . * a new file <allcaps> api </allcaps> can be introduced that works more like the rest of <allcaps> osal </allcaps> , and wrappers implemented to mimic the current <allcaps> api </allcaps> so that existing code still works . to save code memory space , an optional compile time switch ( e . g . in osconfig . h ) can disable the wrapper functions once application code is updated .",2
"duplicate <allcaps> osal </allcaps> error codes and error string <allcaps> api </allcaps> osapi - os - filesys . h has its own set of error codes that overlap with and are <section> the rest of <allcaps> osal </allcaps> error codes . for example , "" os_fs_err_name_too_long "" is not the same as "" os_err_name_too_long "" . there are several codes that are redefined differently . at a minimum , this is confusing , but it can also cause real bugs if the wrong action is taken due to misinterpreting an error . furthermore , fs has a second implementation of os_geterrorname called os_fs_geterrorname ( ) that only translates the fs error codes . passing an error code from one of the filesystem functions into os_geterrorname will get the wrong string . this should be cleaned up - the fs error codes should be merged with the rest of <allcaps> osal </allcaps> error codes into a single set , with a single implementation of os_geterrorname ( ) to get them all .",0
"<allcaps> api </allcaps> versioning for <allcaps> osal </allcaps> the <allcaps> osal </allcaps> version id e . g . "" <number> . <number> "" can also be used by application code to determine <allcaps> api </allcaps> features in case they change over time . although the existing <allcaps> osal api </allcaps> is intended to remain stable across versions , new calls can ( and should ) be added when appropriate . however this presents a problem for backward compatibility as new code written against a new <allcaps> api </allcaps> cannot be compiled with an older version of <allcaps> osal </allcaps> . this is a common problem and is generally solvable by creating / checking a version macro . for example , glibc uses "" posix_c_source "" as an integer to define which version of <allcaps> posix </allcaps> it should behave like . the <allcaps> osal </allcaps> should do the same , and create an "" osal_api_version "" macro that application code can check to see what version of the <allcaps> api </allcaps> the current <allcaps> osal </allcaps> supports . application code can then adjust itself accordingly , either by compiling without the new feature or generate a compile error if that feature is required .",2
"add free - run tick counter <allcaps> api </allcaps> to <allcaps> osal </allcaps> many times it is simpler and more efficient to deal with a simple free - running tick counter than to deal with the full - blown time <allcaps> api </allcaps> . on some os platforms this is as simple as reading an internal timer tick register , but in the worst case it can always be generated from gettimeofday ( ) or whatever the os_getlocaltime ( ) already uses . the <allcaps> osal </allcaps> currently has an <allcaps> api </allcaps> call for os_getlocaltime ( ) that fills in an os_time_t structure . the problem with this structure is that it has two parts , seconds and microseconds , which makes it difficult to add and subtract from other os_time_t structures . even if this were c + + and the code could be "" hidden "" behind an overloaded + / - operator , there is still the issue of an extra function call and checking for overflow which makes it slow and inefficient no matter how you mask it . it can be argued that the majority of client code that calls functions such as this are really interested in "" relative "" time i . e . the amount of time elapsed since some prior event , as this is how timeouts and error handling are typically invoked . a simpler way to solve this is via a single ever - incrementing ( free - running ) integer counter that simply increments each period and wraps around if int_max is reached . the major advantage is fast and simple add / subtract / compare operations to acquire relative times . the disadvantage is that it is not easy to display as a human - readable time but this is typically not a problem - - the os_getlocaltime works for this . it also is not able to measure relative times more than <number> ^ <number> ^ ticks ( about <number> days for 1 ms period ) , but if time spans that long need to be measured then typically a <number> - second resolution is preferable anyway and that is already available via os_getlocaltime ( ) . as this is a new <allcaps> api </allcaps> call , it will not affect any existing code , it only provides a new call to simplify operations where it is more appropriate than os_getlocaltime ( ) .",2
"add <allcaps> osal </allcaps> abstraction for network / socket interface currently the <allcaps> osal </allcaps> has a very minimal abstraction for network / socket functions . network operations are a common requirement and the presence / type of network stack can vary , such as <allcaps> bsd </allcaps> - style sockets or the lightweight ip ( lwip ) stack . this is a prime candidate for addition to the <allcaps> osal </allcaps> . the abstraction layer should contain : * abstraction of os socket address ( sockaddr_in / _in6 for ipv4 and ipv6 at least ) * abstraction of stream / <allcaps> tcp </allcaps> & datagram / <allcaps> udp </allcaps> socket creation * bind / listen for <allcaps> tcp </allcaps> * sendto / recvfrom for <allcaps> udp </allcaps> * abstractions for the basic inet_aton ( ) / inet_ntop ( ) ip - address",2
"fix warnings in <allcaps> osal </allcaps> "" unit - test "" code the code in the "" unit - tests "" directory in <allcaps> osal </allcaps> has a number of warnings when it compiles and this is one thing preventing turning on the strictest compiler settings ( - wall - werror , etc ) during the build . many of the warnings are related to passing a non - const string directly to a printf function when logging test results .",0
"make <allcaps> osal </allcaps> tests more autonomous the <allcaps> osal </allcaps> tests ( in the "" tests "" directory , <allcaps> not </allcaps> "" unit - test "" ) provide reasonable "" black - box "" style testing of the <allcaps> osal </allcaps> features via the public <allcaps> api </allcaps> . however they are currently implemented with the expectation of being explicitly run by a user at the console , not from an automated script : * most run infinitely , requiring a <allcaps> ctrl </allcaps> + c to stop the test * they do not count errors or provide a status code to indicate whether the test worked as expected or not . in order to integrate with a continuous integration system , these tests need to be more automated . this ticket is to add a "" script - mode "" feature to the tests which : * checks for the expected conditions and maintains an error counter of any tests that did not satisfy expected conditions * limits the time of execution and exits the test automatically ( no <allcaps> ctrl </allcaps> + c ) * returns a non - zero exit code if any errors occurred ( for scripting ) ( note : this does not apply to the "" unit - tests "" directory which is more white - box style code coverage testing - - this will possibly need other tweaks to work with a ci system and that is a separate ticket )",0
"refactor common code between vxworks / posix / rtems into <allcaps> osal </allcaps> shared layer the <allcaps> osal </allcaps> library is essentially three separate libraries sharing a common <allcaps> api </allcaps> . the vxworks , rtems , and posix implementations do not share any code aside from the common osapi header files . depending on the os selection , one of the three libraries will be compiled . however , under the hood , many of the operations within these three libraries are very similar . although the final call down into the os differs , much of the "" housekeeping "" that <allcaps> osal </allcaps> performs is similar between all three implementations . each of them maintain internal tables that map os objects to names and numbers , and all the <allcaps> osal api </allcaps> calls check their arguments against these internal tables to see e . g . if an object by some id is valid or if an object by some name already exists . all this housekeeping / / really should be identical / / and it could be argued that any difference is really a bug and not a feature , as differences here could affect the portability of application code from one os to another . refactoring this "" common "" functionality into a layer which is actually shared among os implementations provides several benefits : * cuts down on the code in the actual os - specific portions by about <percent> , and the code that is left is much more direct and "" to - the - point "" . for instance , an implementation of creating a semaphore / / <allcaps> only </allcaps> / / needs to create the actual semaphore and return a success / fail code . all locking , table manipulation , error checking , and recovery is handled by the shared / common layer . * this makes additional operating system layers easier to implement and less costly to maintain in the future . * likewise , abstraction of additional os features ( such as network sockets ) is easier to implement and less costly to maintain in the future . * ensures that the housekeeping operations are done consistently across __all__ supported operating systems . this greatly reduces the chances of operations working differently on one os vs another . this is particularly true of error conditions that may not be exactly the same or recovered in the same way between current os implementations .",2
document available oss in trac wiki it would be helpful to construct a small wiki page corresponding to each operating system implementation giving a quick overview of the platform for which support is being provided . i suggest including hotlinks on each such page back into the doc subtree of the specific os for extended documentation - - as clones will obtain the content of the project sources but do not clone the trac wiki .,1
document available bsps in trac wiki it would be helpful to construct a small wiki page corresponding to each board support package giving a quick overview of the platform for which support is being provided . i suggest including hotlinks on each such page back into the doc subtree of the specific <allcaps> bsp </allcaps> for extended documentation - - as clones will obtain the content of the project sources but do not clone the trac wiki .,2
enhanced build system for <allcaps> osal </allcaps> this ticket is for the <allcaps> osal </allcaps> portion of the enhanced build system pushed out under the corresponding cfs ticket : ​ [ <url> the cmake script for <allcaps> osal </allcaps> can also be used to generate a standalone <allcaps> osal </allcaps> library for use with projects other than <allcaps> cfs </allcaps>,2
"<allcaps> osal </allcaps> "" common_types . h "" is not completely reliable on some systems ( particularly <number> - bit ) the types defined in <allcaps> osal </allcaps> "" common_types . h "" file do not always match their expected widths . there is currently a very helpful compile - time assert to catch this if it does go wrong but we need it to not go wrong in the first place . the best way to solve this is to leverage the c "" stdint . h "" file - this has been standard since c99 . for any c library that does not have this header it can fall back to using the existing defines .",0
"inline documentation on <allcaps> osal </allcaps> routines is incorrect / outdated in many places <section> the comments in the function headers of many of the <allcaps> osal </allcaps> calls have become outdated and incorrect . <section> n / a . this reflects source code comments only . most evident on the "" implementation "" files which copied the comment block from the external function call . <section> comment blocks should better reflect reality of what the code does . the "" real "" comment block that describes the function should reside with the function prototype . the definition should also have a comment block but primarily for visual differentiation in the source code . this block should not re - describe the function , as this results in multiple copies of the same description and thus could become stale / divergent again . <section> joseph hickey , vantage systems , inc .",1
"microsecond round up code does not round up . <section> spawned from # <number> the code comment claims it rounds up to never return zero . the formula implemented doesn ’ t actually round up in all cases , since generally when casting a float / double to an int you lose the fractional part ( truncation , not rounding ) . so the code is not self - consistent . it ’ s not a <allcaps> posix </allcaps> or os issue , it ’ s that the code doesn ’ t do what it says it does . the <allcaps> api </allcaps> document doesn ’ t specify a non - zero guarantee . <url> similar misleading comment at : <url> for what it ’ s worth , on linux ( our ubuntu dev system ) this code reports <number> ticks per second , and <number> usec per tick . but if you pass in high values for ticks per second , it does return zero when it claims to round up ( try <number> ticks per second ) . <section> steps to reproduce the behavior : <number> . compile <code> <number> . execute : <code> <section> expected code to match comment , round up to not equal zero . algorithm does not work as claimed in comment . <section> - cfs development server - os : <number> . <number> - <number> - generic # <number> - ubuntu - versions : n / a , sample code shows behavior ( although i poked in cfe to cause the same thing ) <section> add any other context about the problem here . <section> jacob hageman / <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",2
"return os_error if os_timerset is called with both parameters as zero <section> related to the discussion in # <number> <section> see title , as described in <url> <section> see # <number> comment thread <section> none <section> jacob hageman / <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",2
"update os_timerset <allcaps> api </allcaps> documentation for timer disable <section> as stated in # <number> , the os_timerset documentation does not match behavior . <section> <allcaps> api </allcaps> documentation should describe os_timerdelete ( ) as the method to cancel the timer ( not a start time of zero ) <section> none <section> none <section> jacob hageman / <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",1
qnx osal does such exists in nature ?,3
test <code> does not compile <allcaps> osal </allcaps> fails to compile with a clean clone of the repo . <code>,3
