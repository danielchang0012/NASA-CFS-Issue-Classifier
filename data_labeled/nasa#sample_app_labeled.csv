text,label
registration of events with 0x0 0 0 0 filters is not all that helpful <section> registration of all events with <code> filters just loads the system without actually filtering anything . also fills the event filter buffer for the app and likely drops some since default limit is <number> . <section> remove zero entries from initialization and add a filter when / if needed ( or operationally via command ) . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
apply latest copyright header <section> updated copyright header <section> update <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,1
"recommend using fcncode ( instead of commandcode ) terminology in the code the current implementation of the sample app mixes terminology , calling the field which identifies a command a <code> <url> whereas the <allcaps> cfe </allcaps> apis call it a <code> . since this app is the starting point for many people , it might make sense to use consistent terminology . since the <allcaps> cfe </allcaps> apis call it a <code> , it seems like the code should too .",2
update to preferred unit test patterns <section> uses lower level macros where generic output is preferred . <section> use macros with default outputs . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"return value of cfe_msg_getmsgid is not checked during processcommandpacket or verifycmdlength <section> cfe_msg_getmsgid returns a status value to indicate success or failure of the call , but neither of the usages in the sample app check if it is successful nor do they state that the return value is ignored by design . <section> n / a <section> sample app should either make use of the return value to verify success or should note the reason why this is not being done . <section> <url> <url> <section> n / a <section> alan gibson <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> <number>",2
"overrun warning false alarm for cfe_msg_message_t <section> overrunning struct type cfe_msg_message_t of <number> bytes by passing it to a function which accesses it at byte offset <number> using argument 2 0 ul . <section> fix overrun <section> <url> <section> coverity : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",2
"update cfe_msg_message_t conversions to use cfe_msg_ptr macro <section> in nasa / cfe # <number> introduces a <code> macro which converts a cmd / tlm header object to a <code> pointer , which is intended to be used rather than assuming a specific member name ( e . g . <code> ) . <section> use the macro instead of assuming <code> member name . <section> required when using generated headers , as the member name may not be "" msg "" or may be further encapsulated . <section> joseph hickey , vantage systems , inc .",2
"improve consistency in application of cfe_sb_msgidtovalue / valuetomsgid conversions <section> a <code> value , like other ids , is supposed to be a unique type / opaque value that identifies a message within the sb application context . although it is currently implemented using an integer ( <code> specifically ) application should not assume this . instead , a set of macros and inline conversion functions ( cfe_sb_msgidtovalue and cfe_sb_valuetomsgid ) are provided for when the application needs to interpret the value as an integer for a valid purpose . <section> add conversions where they are currently missing <section> see nasa / cfe # <number> for full info . a separate issue + pr will be submitted for each framework app . <section> joseph hickey , vantage systems , inc .",2
"need to check the status of cfe_tbl_load ( ) call <section> sample_app does not actually check the status returned by the call to <code> . as a result , if the filename is wrong or missing , it is not obvious that the app has not initialized itself fully , because it still prints the "" <allcaps> sample </allcaps> app initialized "" message as usual . <section> start <allcaps> cfe </allcaps> framework as normal but without the sample app table file present in the / cf directory . the sample app still starts "" successfully "" as reported in the message but the table is not loaded . <section> the app should not report that it initialized if the table did not load . <section> the status is saved to a local variable here , but nothing is done with it : <url> <section> ubuntu <number> <section> surprising that this is not reported by static analysis , as it seems to be a case of variable assignment without use . also worth noting that table services itself _does_ send an event about the failure to load the table , but it does not have much detail : <code> if <allcaps> osal </allcaps> debug is enabled ( osal_config_debug_printf ) then the user does get a message on the console , at least on linux , with more detail ( "" no such file or directory "" ) . <section> joseph hickey , vantage systems , inc .",2
fix non - compliant header guards <section> leading <code> is reserved <section> replace with pattern used in <allcaps> osal </allcaps> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"should zero global data structure at initialization <section> fragile initialization touches individual elements , no memset <number> <section> memset the global to zero , only initialize non - zero elements <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add generate_config_includefile pattern for perfids and msgids <section> currently just includes the local mission_inc / platform_inc directories . really these are examples / defaults , and should be easily overridden from the target defs . <section> use generate_config_includefile ( example : <url> <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove references to cfe_es_registerapp <section> as part of nasa / osal # <number> and nasa / cfe # <number> the registration apis are getting fully deprecated and removed . applications no longer need to call os_taskregister , cfe_es_registerapp , or cfe_es_registerchildtask . <section> remove references to these functions . <section> will be required with nasa / osal # <number> and nasa / cfe # <number> <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , add contributing guide <section> fix # <number> added a contributing guide that links to the main cfs contributing guide . <section> users should be able to view the contributing guide contents easily from the sample_app repo . <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"add contributing guide <section> add a contributing guide for the sample_app repo . <section> create a contributing guide markdown file . in the guide , add a link to the cfs contributing guide . <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"scrub for include < > vs "" "" use ( < > should be system only ) <section> < > used on non - system header includes . example : <url> <section> full scrub / fix <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , add testing tools to the security policy <section> fix # <number> updated the security policy to include the type of testing done for sample_app or the cfs bundle under a new section titled "" testing "" . provided a disclaimer that under the apache license , liability is not provided . added that security reports should be emailed . <section> users should now be aware of the type of testing sample_app or the cfs bundle undergoes . <section> references : <url> <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"add testing tools to the security policy <section> users are unaware of how cfs / sample_app is tested . by providing this information , transparency is provided to the community which promotes trust . <section> the security policy should inform users what tools are being used to test cfs / sample_app while being cautious of liability issues . to do so , we can state explicitly that our software does not provide liability under the apache license . the security policy should inform users that they may view the <allcaps> lgtm </allcaps> results . the policy would state that the alerts from <allcaps> lgtm </allcaps> may not be accurate , since they cannot be dismissed . add that security report should be emailed . <section> references : <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"add codeql analysis to workflow <section> codeql analysis not implemented in submodules <section> add so alerts are generated on pull requests to submodules <section> none <section> codeql is run at the bundle ( nasa / cfs ) level , but link to code in submodules does not work . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , add static analysis and format check <section> fix # <number> - adds static analysis and format check into github workflow , includes badges in readme <section> ci <section> basic ci works again <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
ci updates - add static analysis and format in workflow <section> travis - ci not transitioned to github actions <section> transition ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"fix # <number> , create security policy <section> fix # <number> created a draft of a security policy markdown file for sample_app . the purpose of a security policy is to inform users on how to submit bugs or vulnerabilities . it is ideal to include a section for supported versions . <section> optional sections that may be included : - what to expect security - wise such as what type of testing is done - address privacy concerns - supported versions - license - known vulnerabilities references to public security policies : <url> <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"implement a security policy <section> create a security policy for users on how to report security vulnerabilities . <section> the security policy should instruct users on how to report security vulnerabilities and provide them additional contact information for questions and concerns . <section> additional sections that may be included : - what to expect security - wise such as what type of testing is done - address privacy concerns - supported versions - license - known vulnerabilities references to public security policies : <url> <url> <url> <section> ariel adams , <allcaps> asrc </allcaps> federal",1
"fix # <number> , apply message alignment pattern <section> fix # <number> - replace cfe_sb_rcvmsg with cfe_sb_receivebuffer - use cfe_sb_buffer_t for receiving and casting to command types - use cfe_msg_commandheader_t and cfe_msg_telemetryheader_t in command and telemetry type definitions - use cfe_sb_transmitmsg to copy the command and telemetry into a cfe_sb_buffer_t and send it where needed - avoids need to create send buffers within the app ( or union the packet types with cfe_sb_buffer_t ) - eliminates references to cfe_sb_cmdhdr_t and cfe_sb_tlmhdr_t that formerly enforced alignment since these had potential to change the actual packet sizes - no need to cast to cfe_msg_message_t anywhere since it ' s available in the cfe_sb_buffer_t union - replaced cfe_msg_size_t with size_t <section> bundle ci , unit tests , spot checked cmd / tlm <section> none , pattern applied only <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle ( integration - candidate ) + nasa / cfe # <number> , and this commit <section> depends on nasa / cfe # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"remove function names from comments ( where not useful ) <section> function names in comments ( end of function comment , function header comment ) historically have been poorly maintained . example : <url> <url> <section> remove redundant information ( these end of function comments and name from the header ) . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"update for suggested alignment enforcement pattern ( nasa / cfe # <number> ) <section> see nasa / cfe # <number> , inconsistent pattern <section> match suggestion in nasa / cfe # <number> , use the "" raw "" message cmd / tlm types in definition . <section> none <section> nasa / cfe # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
refactor ut_setforcefail describe the bug ut_setforcefail was refactored to ut_setdefaultreturnvalue for <url> it needs to have its name changed here as well . expected behavior change ut_setforcefail to ut_setdefaultreturnvalue additional context part of <url> reporter info alex campbell,2
remove use of os_pack <section> os_pack should not be used . <section> remove it . <section> none <section> nasa / osal # <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
remove dependencies on deprecated sb apis <section> sb apis deprecated in nasa / cfe # <number> <section> update to use <allcaps> msg </allcaps> module . <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"not correctly checking return code of cfe_tbl_getaddress <section> the <code> routine is one of the apis that have multiple "" success "" codes . although the intent / hope is to deprecate this ( see nasa / cfe # <number> ) - the current implementation still returns values other than <code> . in particular the first time it is called after loading , one gets <code> . <section> run <allcaps> cfe </allcaps> with sample app and issue the "" process "" command ( <number> ) and observe one gets an "" error "" message e . g . : <number> - <number> - <time> . <number> sample app : fail to get table address : 0x 4 c00000e but that error code is actually a "" success "" response . if the same command is repeated , it works ok because it returns <code> this time . a bigger issue , however , is that the address acquired from the first invocation is not released . <section> should get address and release address correctly . <section> ubuntu <number> <section> this is an <section> example of why multiple success responses are a bad idea . it is really a bug in the cfe_tbl <allcaps> api </allcaps> - - we did not as if a table was updated , we only asked to get its pointer . if <allcaps> tbl </allcaps> services gives back a buffer pointer as requested , the response should be <code> . the unnecessary over - complexity of the <allcaps> tbl api </allcaps> definitely causes usability problems . but in the meantime one can change the check from <code> to <code> and it should resolve the resource leak issue here . <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , check only format string in ut event test <section> for example "" sendevent "" tests in sample_app , do not pass the test string through <code> to get a fully rendered output . instead test only that the format string matches . this is my recommended approach . note that the "" fully - rendered "" output is affected my many external variables and is not necessarily going to be consistent . the most recent example is in # <number> /# <number> which is the reason for this change , but it also can be affected by things totally outside of <allcaps> cfe </allcaps> like the user ' s locale settings in the os . fixes # <number> <section> build and run sample_app unit tests <section> fixes current failure in integration candidate <number> - <number> - <number> . <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",2
"string checks in ut should check only the spec / format string , not the fully rendered text . <section> as the comment in the code suggests , the "" fully - rendered "" text is really a derived output that depends on a lot of external factors . it is not a direct output of the unit under test . as an example , the unit test is currently getting thrashed around due to a message id check due to the fact that there is no specific text that is always "" correct "" here . it broke when updated to <number> bit (# <number> ) , attempted to fix in # <number> , which only broke the original case ( v1 header ) . <section> run unit test using v1 ( <number> - bit ) message ids . <section> <section> tests should pass . <section> ubuntu <number> and travis - ci ( current integration candidate ) . <section> recommendation is to only check the <allcaps> spec string </allcaps> ( <code> ) which will be the same regardless of what the "" invalid msgid "" value actually is . that ' s all that really matters . <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , install unit test to target directory <section> fix # <number> , install unit test to target directory <section> make unit tests , install , observe they install in correct directory <section> correct install directory <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + this commit <section> none . <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"coverage test not installed in correct directory <section> coverage test not installed in correct directory - see nasa / cfe # <number> <section> make unit tests , make install , observe unit test in build directory . <section> should go in target directory ( build / exe / cpu1 for sample config ) <section> <url> <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , unit test <allcaps> mid </allcaps> string format now 3 2 bit <section> fix # <number> with nasa / cfe # <number> , the format is now consistently <number> bit , fixed event string check to match . <section> built unit tests with nasa / cfe # <number> , now passes <section> unit test pass <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main + nasa / cfe # <number> + this commit <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"fix # <number> , remove cfe_sb_initmsg use in coverage test <section> fix # <number> - removes test code call of cfe_sb_initmsg and sets the <allcaps> api </allcaps> / stub buffers directly . <section> built and ran tests , passed - depends on nasa / cfe # <number> <section> none , just improved test . <section> - hardware : cfs dev server - os : ubuntu <number> - versions : bundle main ( + cfe / osal main ) + nasa / cfe # <number> and this commit <section> nasa / cfe # <number> <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"fix # <number> , apply style <section> fix # <number> - applies standard coding style <section> ci only , whitespace . <section> none <section> ci <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"unit test fails when ver_2 headers are used <section> event test strings are different when the msgid size changes , but test looks for explict message : <url> <url> <url> ! ver_2 = <code> , ver_2 =< code > ( or capitalized based on the format string ) <section> set message_format_is_ccsds_ver_2 , build and run unit tests . <section> unit tests should pass with either configuration <section> see above . <section> - hardware : cfs dev vm - os : ubuntu <number> - versions : main bundle <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"cmakelists . txt not c + + friendly <section> this might be out of scope of this project but when baselining off of sample_app to make other apps i have been able to write c + + code and extern "" c "" functions to run in the sample_app . c main file ( or equivalent ) . now that the cmakelists . txt file does not have the "" aux_source_directory ( fsw / src app_src_files ) "" and "" add_cfe_app ( sample_app app_src_files ) "" lines , the c + + externed functions are not linked by the cmake build system . by explicitly saying "" add_cfe_app ( sample_app fsw / src / sample_app . c ) "" the link command will not pick up the necessary c + + symbols . <section> steps to reproduce the behavior : <number> . create a c + + file in app src directory and make a function called "" extern "" c "" void test ( ) { printf ( "" test \ n "" ) } "" <number> . forward declare this test function in sample_app . c at the top by writing "" void test ( ) "" <number> . add "" <allcaps> cxx </allcaps> "" to the project ( ) line in cmakelists . txt <number> . call test ( ) in sample_app . c somewhere where you know it will be called ( init or main run loop ) <number> . build and run on target <section> target should have an error similar to "" undefined symbol "" when dynamically loading / linking the sample_app during cfs startup / initialization <section> - linux ubuntu <number> , intel i7 vxworks <number> target - os : ubuntu <number> and vxworks <number> <section> joe mahoney - <allcaps> lta </allcaps> research",3
"fix # <number> , install unit test <section> fix # <number> - install unit test as part of cmake recipe <section> normal build with enable_unit_tests = true , with make install , and ran sample app unit test from install dir ( passed ) <section> sample app test runner now shows up in expected install dir <section> - hardware : cfs dev vm - os : ubuntu <number> - versions : current bundle development branch <section> none . <section> none . <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"add build name and build number to version . h <section> need a better way to describe versions during development <section> add build name and build number to version . h as discussed , we will add a a build name string and a continuously incrementing build number to <code> <section> see notes from <allcaps> ccb </allcaps> : < <url> <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",2
"inconsistent use of <allcaps> tbl </allcaps> vs <allcaps> table </allcaps> <section> it seems we use <allcaps> tbl </allcaps> and <allcaps> table </allcaps> interchangeably . for example <code> has both uses . <section> search the sample_app directory for uses of * <allcaps> tbl </allcaps> * and * <allcaps> table </allcaps> * both upper and lower case combinations exist . <section> a single mnemonic for tables . <allcaps> tbl </allcaps> seems to be the default used in cfs . <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",2
"rename files , functions , and variables to match appname_ * pattern <section> pr # <number> shed light on inconsistencies in naming conventions . there are multiple items named sample_itemname as opposed to sample_app_itemname . <section> one relevant example is <code> in <code> <section> all item names should use the prefix <code> as opposed to <code> . in the example above the correct name should then be <code> . <section> source code <section> gerardo e . cruz - ortiz , <allcaps> nasa </allcaps> - <allcaps> gsfc </allcaps>",0
"fix # <number> , reorg the table file <section> fix # <number> - move the table to fsw / tables and renames "" sample_table "" to "" sample_app_table "" . <section> built and run . <section> debian <number> <section> <email>",2
"should sample_app be writing to syslog ? <section> i thought that , generally , apps should be generating events on errors , not writing to syslog . however , if you look at , say sample_appinit ( ) , it writes to syslog for a number of error conditions . <section> re - write to generate events . <section> <email>",3
"sample_table . c - - relocate ? <section> tables are a component of applications that are expected to be customized by the user . the cfs build process supports this customization ( for example , by creating <code> ) . currently <code> is in <code> but everything else in <code> is not expected to be customized by the user . i consider sample_app to be the "" style template "" for applications , so this should be clear not just for users of the sample_app but for folks who model their code on sample_app . <section> i would like to see a clearer indication that <code> is expected to be customized - - whether it be relocated to a different folder ( <code> ? ) or possibly rename it to <code> ? <section> <email>",3
"fix # <number> , remove references to <allcaps> ccsds </allcaps> types <section> replace references to <code> types with the <code> - provided type . fixes # <number> <section> build and sanity check <allcaps> cfe </allcaps> , run all unit tests <section> no impact to behavior <section> ubuntu <number> <section> joseph hickey , vantage systems , inc .",2
"remove references to "" <allcaps> ccsds </allcaps> "" structures <section> applications should <allcaps> not </allcaps> refer to the "" <allcaps> ccsds </allcaps> "" data types and macros , as there should be no assumption of a particular message framing type at this level . <section> use the abstract types provided in <code> rather than directly using <code> types . <section> related to nasa / cfe # <number> <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , add extended context information to event hook <section> add a string validation to the sample event hook as an example of how to use the context information supplied to the hook to perform this type of validation . fixes # <number> <section> execute unit tests and confirm correct operation . all passing . <section> test cases now compare an expected event string with a string derived from the spec string and arguments that were output by the unit under test . <section> ubuntu <number> <section> depends on prerequisites / related tickets : - nasa / osal # <number> - nasa / cfe # <number> these are necessary to pass the full cfe_evs_sendevent context through to the hook function . <section> joseph hickey , vantage systems , inc .",2
"provide example of extended context arguments in unit test <section> unit test stubs are being updated to pass - through a more complete context information , currently for <allcaps> evs </allcaps> events such that the full spec string and argument set can be checked / manipulated . <section> sample unit tests should include an example of how to obtain the context arguments in a hook function . <section> see nasa / cfe # <number> <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , refactor code to fit suggested app model <section> this is # <number> , resubmitted for fixes : addresses ticket # <number> . specifically adds new sample_app_cmds . c / . h and sample_app_utils . c / . h files , moves functions out of sample_app . c into the new cmds and utils files . updates unit tests . this change makes sample_app a better reference application - structure more closely matches other apps . fix # <number> <section> <allcaps> tbd </allcaps> <section> none <section> - hardware : [ e . g . pc , sp0 , mcp750 ] - os : [ e . g . ubuntu <number> , <allcaps> rtems </allcaps> <number> , vxworks <number> ] - versions : [ e . g . cfe <number> , <allcaps> osal </allcaps> <number> , <allcaps> psp </allcaps> <number> for mcp750 , any related apps or tools ] <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps> ( resubmit ) elizabeth timmons / <allcaps> nasa </allcaps> ( implemented )",2
"sample_reporthousekeeping fails , likely due to nasa / cfe # <number> <section> ut failure , likely related to nasa / cfe # <number> : <code> <section> build and run unit tests at bundle level with nasa / cfe # <number> included <section> tests pass <section> n / a <section> - hardware : cfs dev server <number> - os : ubuntu <number> - versions bundle with nasa / cfe # <number> included <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"sample app test does not end up in exe dir after make install <section> sample_app - sample_app - testrunner does not get "" installed "" <section> steps to reproduce the behavior : <number> . make <allcaps> simulation </allcaps> = native enable_unit_test = true prep ; make ; make install <number> . ls build / exe / cpu1 <number> . find / . - name "" sample_app_sample_app - testrunner "" <section> install should move all tests to install directory <section> n / a <section> - hardware : cfs dev <number> - os : ubuntu <number> - versions : observed in refactored ic at skliper / ic - <number> - jh <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"format conversion error in coverage test <section> when compiling the coverage test on <allcaps> rtems </allcaps> , a format conversion error is triggered : <code> <section> build with enable_unit_tests = <allcaps> true </allcaps> for i686 - rtems4 . <number> platform <section> should build clean <section> i686 - rtems4 . <number> cross build <section> joseph hickey , vantage systems , inc .",0
"fix # <number> , reference skeleton_app in readme <section> adds a doc update with a link to <url> <section> <email>",1
"fix # <number> , update coverage compile / link flag options <section> <allcaps> osal </allcaps> now sets these as ut_coverage_compile_flags , ut_coverage_link_flags . building and linking the ut executable needs a corresponding update . fixes # <number> <section> build with <code> and confirm that all unit tests are building <section> coverage data ( <code> ) now includes the sample_app code again <section> ubuntu <number> <allcaps> lts </allcaps> <number> bit <section> joseph hickey , vantage systems , inc .",0
"apps should not pend forever on software bus the sample_app , which is supposed to exemplify the current best practices , should not be pending forever on a software bus message as it does here : <url> the problem with pending forever is that the app also needs to perform an orderly exit if a restart / reload / delete command is sent to es , which is checked by <code> . if an app is pending forever for software bus messages but none are sent , then the shutdown request will remain pending indefinitely .",2
"app should treat cfe_sb_msgid_t values as opaque <section> for compatibility going forward , code should not assume that <code> is an integer . <section> when dealing with an integer , such as when printing in events / messages or for backward compatibility with <allcaps> mid </allcaps> <code> ' s , the code may use <code> and <code> conversion routines . <section> architecturally , the <code> is supposed to be an opaque / abstract value that identifies an endpoint on the software bus routing domain . the specific meaning of integer values is already different in an "" extended header "" ( <allcaps> ccsds </allcaps> v2 ) build vs . the standard header build . therefore apps should never make assumptions regarding the specific integer values , and all introspection of <code> values should be through the <allcaps> cfe sb api </allcaps> only . <section> joseph hickey , vantage systems , inc .",2
"skeleton app <section> sample_app is great for showing a variety of capabilities that cfs provides to an application , but folks will likely come to sample_app thinking it ' s a good starting place for them to develop their new apps . i suggest we also have a "" skeleton_app "" either as a separate <allcaps> git </allcaps> repository ( and referenced in the sample_app docs ) or contained in the sample_app folder . <section> a skeleton_app which has the barest of minimums to make it a valid cfs application . <section> add any other context about the feature request here . <section> <email>",1
"suggest adding a child task to sample_app <section> not related to a problem . <section> a simple child task could be added to sample_app to demonstrate how a child task is created . if sample_app is intended to be a fully featured example / template , child tasks are a key thing that is not represented in the sample . <section> none <section> none <section> elizabeth timmons - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"suggest refactoring sample_app to more closely match "" real "" apps . <section> this ticket is not related to a problem . this is a feature request to reorganize the sample app to more closely match "" real "" apps ( namely the <allcaps> gsfc </allcaps> open source apps ) . this would increase sample_app ' s value as a template . in addition to providing a more realistic example , the organization of functions into files has implications for unit testing . <section> <number> . move command functions into a separate sample_app_cmds . c file . <number> . move utility functions into a separate sample_app_utils . c file <section> none <section> none <section> elizabeth timmons - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
"avoid using aux_source_directory <section> the example build script should __not__ use <code> as it is not well defined / controlled behavior - it depends on files that existed at the time "" prep "" was run . <section> <code> should list the app source files explicitly . this is recommended cmake practice for most normal build cases . <section> this is a prime example of why <code> is discouraged , because in this case it incorrectly pulled in the "" sample_table . c "" source file into the app binary . this is incorrect ; the table file is built separately by the table generator script . <section> joseph hickey , vantage systems , inc .",0
"sample_app should have a clearly - defined "" publish telemetry "" function <section> i ' d venture most folks who look at the sample_app code are looking to read some data from a sensor / instrument and publish the telemetry onto the software bus . the current code does not make it clear where such code would go . <repeated> i ' d venture it ' d go in "" processcc ( ) "" ? in fact , the only call to cfe_sb_sendmsg ( ) is in reporthousekeeping ( ) function . <section> the sample app demonstrates reading from a table and calling a library , perhaps a call to a library function that iterates through an array ( provided by a table ) of values and publishes the next one on each command received ? needless to say , a big comment block stating "" add your code here "" would be appropriate . the processcc ( ) function really has no documentation in the comments as to what it does . <section> i think some folks on the <allcaps> ccb </allcaps> consider the sample app to *not* be a skeleton for a real application . if that is the intent , it should be made more clear in the sample_app . c file and the <allcaps> readme </allcaps> . md , and it would be appropriate to have a separate skeleton app for folks to start developing from . ( in fact , such a skeleton would be a nice source for developers to fork from , and any major framework changes could be made in the skeleton and folks would see the change when they fetch from their upstreams . ) <section> add any other context about the feature request here . <section> <email>",2
"fails to build under raspbian - alignment of pointers <section> trying to build under raspbian , sample_app fails with "" cast increases required alignment of target type "" errors . <code> <section> build on raspbian . <section> should not cause warnings / errors . <section> <section> raspberry pi zero w <section> add any other context about the problem here . <section> <email>",0
apply code style <section> inconstant style <section> see <url> and <url> <section> n / a <section> n / a <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
build fails with deprecated cfe / <allcaps> osal </allcaps> elements removed <section> build fails on <number> undeclared errors : errors . txt <url> <section> make omit_deprecated = true prep ( requires <url> <section> clean build <section> - cfs dev server <number> - os : ubuntu <number> - versions : mostly <number> ( + commit above ) <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,0
"fix <number> - release updates <section> fix # <number> - updated <allcaps> readme </allcaps> - removed custom license document - added standard apache <number> - updated copyright release version cfe <number> - > <number> <section> <number> . standard build , unit test and execute <section> - no impact to behavior <section> - hardware : cfs dev server <number> - os : ubuntu <number> - versions : cfe <number> . <number> related versions and <allcaps> osal </allcaps> <number> . <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",2
release <number> . <number> prep <section> updates for release : - updated <allcaps> readme </allcaps> - removed custom license document - added standard apache <number> - updated copyright release version cfe <number> - > <number> <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>,2
"compiler warning on <allcaps> rtems </allcaps> <section> when compiling on <allcaps> rtems </allcaps> this application now has multiple warnings : <code> <section> build on <allcaps> rtems </allcaps> per the readme / howto and with <code> switches <section> should build clean <section> ubuntu <number> ( build host ) when cross compiling for <allcaps> rtems </allcaps> <number> <section> appears the problem calls were introduced in # <number> as a rule of thumb , whenever "" printf "" style conversions are used in conjunction with the fixed - width types ( int32 , uint32 , etc ) these need an explicit cast because the actual type definitions vary by platform . <section> joseph hickey , vantage systems , inc .",0
"sample_processcc needs to check return code of cfe_tbl_getaddress call <section> the <code> example calls <code> and then immediately proceeds to dereference the pointer , without checking its return code . <section> this is primarily evident in unit test , where the <code> call can be forced to fail . it outputs a <allcaps> null </allcaps> pointer in this case and subsequently segfaults . <section> the <code> should not attempt to dereference the pointer output of <code> unless that function actually returns cfe_success <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit ( when running ut ) <section> joseph hickey , vantage systems , inc .",2
"fix # <number> , add sample app tests <section> fixes # <number> adds a complete example unit test to the sample application . uses the ut assert framework with common stubs provided by <allcaps> cfe </allcaps> and other modules . obtains <percent> line coverage on the current app implementation . <section> build with <allcaps> simulation </allcaps> = native enable_unit_tests = <allcaps> true </allcaps> execute the unit tests per "" make test "" and confirm correct output execute "" make lcov "" to collect coverage statistics verified that the sample application is included in results and achieves <percent> line coverage . <section> no changes to <allcaps> fsw </allcaps> . <section> ubuntu <number> <allcaps> lts </allcaps> <number> bit <section> there is a bug in the application implementation , described in # <number> . the unit tests actually will fail until this is fixed . <section> joseph hickey , vantage systems , inc . <section> you must attach a signed <allcaps> cla </allcaps> ( required for acceptance ) or reference one already submitted",2
"sample app has error counter and command counter reversed <section> the sample_reporthousekeeping function reports the error count and command count values reversed . <section> send a <allcaps> noop </allcaps> command , then report housekeeping , and see that the error count is in place of the the command count . <section> the error count and command count should not be reversed . <section> inside <code> , it has : <code> <section> ubuntu <number> <allcaps> lts </allcaps> <number> - bit <section> actually discovered this when writing the unit test for the reporthousekeeping function (# <number> ) , and the test case failed because the counters were backwards . <section> joseph hickey , vantage systems , inc .",0
"the "" sample_app "" should call into "" sample_lib "" <section> the sample_app only calls <allcaps> cfe </allcaps> functions ; it does not call any <allcaps> osal </allcaps> , <allcaps> psp </allcaps> , or additional library functions like a real app might do . this makes a difference for unit testing . the framework should contain a useful example of ut for apps and libs ( related to # <number> ) and the example would be more useful if it called something other than <allcaps> cfe </allcaps> . <section> the sample_app should invoke the <code> as provided in the example <code> library . <section> n / a <section> this change would demonstrate two things : - demonstrate at runtime that the dynamic linking worked correctly for the libraries ( i . e . an app can successfully call into a lib like it is supposed to ) - demonstrate linking to the stubs provided by the library for unit testing <section> joseph hickey , vantage systems , inc .",2
"sample app needs to release table to allow management <section> table not released after use <section> did not test it , but likely will not be able to load a new table after sending the sample_processcc command . <section> add cfe_tbl_releaseaddress after access of table data <section> <url> <section> - versions : current bundle <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"table type should be defined once in table header file <section> sampletable_t is defined in both sample_app_msg . h and sample_table . c <section> define sample_table . h , and include where needed . <section> none <section> none <section> jacob hageman - <allcaps> nasa </allcaps> / <allcaps> gsfc </allcaps>",0
"add unit test example the sample app should include an example of how to use the ut_assert , and link / build / run .",2
"replace deprecated cfe refs , # <number> fixes # <number> submitted by <user> , <allcaps> cla </allcaps> on file testing : - make enable_unit_tests = <allcaps> true simulation </allcaps> = native prep - built on linux with - dcfe_omit_deprecated_6_6 with no build errors - make test passed ( except osal_timer_ut which occasionally fails on linux ) - cfs executes and loads apps with no issues",2
remove dependencies on deprecated cfe elements with : <code> build errors : <code>,2
"enhanced version numbering use ci_lab_version from cfecfs_version_info . h if available and report on <allcaps> noop </allcaps> and startup ( along with classic version numbering "" classic version numbering can then just be updated on release , vs for every commit .",2
remove classic build support only supporting cmake build going forward .,2
"remove old <allcaps> mks </allcaps> flags from comments $ id , $ date , $ revision , $ log , etc all no longer useful and slightly misleading since they do not get updated .",2
systematic naming convention ? can all the the core flight system ( cfs ) repositories follow a systematic naming convention with cfs - <name> ? just ' sample_app ' seems to pollute the namespace . thank you .,3
"sample app should be consistent with app developer ' s guide originated by dave ( <number> on babelfish ) the sample_app provided with the cfe is not consistent with the example app documented in the application developer ' s guide . the app developer ' s guide should documented recommended styles and practices . similarly the sample_app should implement them . i do not think sample app needs to cover all of the potential app features like critical data stores , child tasks , etc . just the basics to get someone started .",2
